uint64_t sub_2345D55A0(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;
  char v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = vcgt_f32(*a2, *a1);
  if (v2.i8[0])
  {
    v3 = 1;
  }
  else
  {
    if ((vcgt_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      v4 = (uint64_t *)a1[1];
      v5 = (uint64_t *)a2[1];
      if (v4 != v5)
      {
        v6 = v4[1];
        v7 = *v5;
        v8 = v5[1];
        if (COERCE_FLOAT(*v4) == *(float *)&v6 && *(float *)&v7 != *(float *)&v8)
        {
          v3 = a1[2].i8[0] != 0;
          return v3 & 1;
        }
        if (COERCE_FLOAT(*v4) != *(float *)&v6 && *(float *)&v7 == *(float *)&v8)
        {
          v3 = a2[2].i8[0] == 0;
          return v3 & 1;
        }
      }
      v3 = v2.i8[4];
      return v3 & 1;
    }
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_2345D562C(float32x2_t *a1, float32x2_t *a2, int8x16_t a3)
{
  char v3 = 0;
  if (a1 && a2)
  {
    *(float32x2_t *)a3.i8 = *a1;
    float32x2_t v4 = a2[1];
    if (vcgt_f32(*a1, v4).u8[0] & 1) != 0 || (float32x2_t v5 = *a2, v6 = a1[1], (vcgt_f32(*a2, v6).u8[0]))
    {
LABEL_5:
      char v3 = 0;
      return v3 & 1;
    }
    _D4 = (int32x2_t)vsub_f32(*(float32x2_t *)a3.i8, v6);
    int32x2_t v9 = (int32x2_t)vsub_f32(v5, v4);
    float v10 = vmlas_n_f32((float)-*(float *)&_D4.i32[1] * *(float *)v9.i32, *(float *)&v9.i32[1], *(float *)_D4.i32);
    if ((float)(v10 * v10) < 0.000001) {
      float v10 = 0.0;
    }
    if (v10 == 0.0)
    {
      _D5 = vsub_f32(v5, v6);
      __asm { FMLA            S6, S4, V5.S[1] }
      if ((float)(_S6 * _S6) >= 0.000001) {
        float v17 = _S6;
      }
      else {
        float v17 = 0.0;
      }
      if (v17 != 0.0) {
        goto LABEL_5;
      }
      int32x2_t v18 = (int32x2_t)vmul_f32(vsub_f32(v5, *(float32x2_t *)a3.i8), _D5);
      int32x2_t v19 = (int32x2_t)vmul_f32(vsub_f32(v4, *(float32x2_t *)a3.i8), vsub_f32(v4, v6));
      int8x8_t v20 = vmvn_s8((int8x8_t)vcltz_f32(vadd_f32((float32x2_t)vzip1_s32(v19, v18), (float32x2_t)vzip2_s32(v19, v18))));
      if (v20.i32[1] & v20.i32[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      int32x2_t v21 = (int32x2_t)vsub_f32(v5, *(float32x2_t *)a3.i8);
      int32x2_t v22 = (int32x2_t)vsub_f32(v6, *(float32x2_t *)a3.i8);
      int32x2_t v23 = (int32x2_t)vsub_f32(v4, *(float32x2_t *)a3.i8);
      int32x2_t v24 = (int32x2_t)vsub_f32(*(float32x2_t *)a3.i8, v5);
      int32x2_t v25 = (int32x2_t)vsub_f32(v4, v5);
      int32x2_t v26 = (int32x2_t)vsub_f32(v6, v5);
      float32x2_t v27 = (float32x2_t)vzip1_s32(v22, v25);
      float32x2_t v28 = (float32x2_t)vzip2_s32(v22, v25);
      float32x2_t v29 = vmla_f32(vmul_f32(v27, vneg_f32((float32x2_t)vzip2_s32(v21, v24))), v28, (float32x2_t)vzip1_s32(v21, v24));
      float32x2_t v30 = (float32x2_t)vdup_n_s32(0x358637BDu);
      float32x2_t v31 = vmla_f32(vmul_f32(v27, vneg_f32((float32x2_t)vzip2_s32(v23, v26))), v28, (float32x2_t)vzip1_s32(v23, v26));
      float32x2_t v32 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v29, (int8x8_t)vcgt_f32(v30, vmul_f32(v29, v29))), (float32x2_t)vbic_s8((int8x8_t)v31, (int8x8_t)vcgt_f32(v30, vmul_f32(v31, v31))));
      if (v32.f32[0] >= 0.0 || v32.f32[1] >= 0.0)
      {
        int32x2_t v33 = (int32x2_t)vsub_f32(v5, v6);
        int32x2_t v34 = (int32x2_t)vsub_f32(v4, v6);
        *(float32x2_t *)a3.i8 = vsub_f32(*(float32x2_t *)a3.i8, v4);
        int32x2_t v35 = (int32x2_t)vsub_f32(v6, v4);
        float32x2_t v36 = (float32x2_t)vzip1_s32(v9, _D4);
        float32x2_t v37 = vmul_f32(v36, vneg_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a3.i8, v33)));
        *(int32x2_t *)a3.i8 = vzip1_s32(*(int32x2_t *)a3.i8, v33);
        float32x2_t v38 = (float32x2_t)vzip2_s32(v9, _D4);
        float32x2_t v39 = vmla_f32(v37, v38, *(float32x2_t *)a3.i8);
        *(int8x8_t *)a3.i8 = vbic_s8((int8x8_t)v39, (int8x8_t)vcgt_f32(v30, vmul_f32(v39, v39)));
        float32x2_t v40 = vmla_f32(vmul_f32(v36, vneg_f32((float32x2_t)vzip2_s32(v35, v34))), v38, (float32x2_t)vzip1_s32(v35, v34));
        *(float32x2_t *)a3.i8 = vmul_f32(*(float32x2_t *)a3.i8, (float32x2_t)vbic_s8((int8x8_t)v40, (int8x8_t)vcgt_f32(v30, vmul_f32(v40, v40))));
        float32x4_t v41 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
        *(float32x2_t *)&v41.i32[1] = v32;
        if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v41))))
        {
          int32x2_t v42 = vcltz_f32(*(float32x2_t *)a3.i8);
          char v3 = (v32.f32[0] < 0.0 || v32.f32[1] < 0.0) | v42.i8[4] | v42.i8[0];
          return v3 & 1;
        }
        goto LABEL_5;
      }
    }
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t sub_2345D5838(uint64_t *a1, __n128 a2)
{
  __p = 0;
  v43 = 0;
  v44 = 0;
  uint64_t v2 = *a1;
  if (a1[1] == *a1)
  {
    float32x2_t v4 = 0;
    float32x2_t v28 = 0;
  }
  else
  {
    float32x2_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      float32x2_t v6 = (float32x2_t *)(v2 + 16 * v5);
      float32x2_t v8 = *v6;
      float32x2_t v7 = v6[1];
      a2.n128_u64[0] = (unint64_t)vcgt_f32(*v6, v7);
      if (a2.n128_u8[0] & 1) != 0 || (vceq_f32(v8, v7).u8[0] & 1) != 0 && (a2.n128_u8[4])
      {
        *float32x2_t v6 = v7;
        *(float32x2_t *)(*a1 + 16 * v5 + 8) = v8;
        uint64_t v2 = *a1;
        int32x2_t v9 = (float32x2_t *)(*a1 + 16 * v5);
        float32x2_t v8 = *v9;
        float32x2_t v7 = v9[1];
        float32x2_t v4 = v43;
      }
      unint64_t v10 = v2 + 16 * v5;
      if (v4 >= v44)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (unsigned char *)__p) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_57;
        }
        if (0x5555555555555556 * (((char *)v44 - (unsigned char *)__p) >> 3) > v13) {
          unint64_t v13 = 0x5555555555555556 * (((char *)v44 - (unsigned char *)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          v15 = (char *)sub_2345D82E0((uint64_t)&v44, v14);
        }
        else {
          v15 = 0;
        }
        v16 = (float32x2_t *)&v15[24 * v12];
        float32x2_t *v16 = v8;
        v16[1] = (float32x2_t)v10;
        v16[2].i8[0] = 1;
        *(__int32 *)((char *)v16[2].i32 + 1) = 0;
        v16[2].i32[1] = 0;
        int32x2_t v18 = (char *)__p;
        float v17 = (char *)v43;
        int32x2_t v19 = v16;
        if (v43 != __p)
        {
          do
          {
            a2 = *(__n128 *)(v17 - 24);
            v19[-1] = *(float32x2_t *)(v17 - 8);
            *(__n128 *)v19[-3].f32 = a2;
            v19 -= 3;
            v17 -= 24;
          }
          while (v17 != v18);
          float v17 = (char *)__p;
        }
        v11 = v16 + 3;
        __p = v19;
        v43 = (__n128 *)&v16[3];
        v44 = (__n128 *)&v15[24 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        v4->n128_u64[0] = (unint64_t)v8;
        v4->n128_u64[1] = v10;
        v4[1].n128_u8[0] = 1;
        *(unsigned __int32 *)((char *)v4[1].n128_u32 + 1) = 0;
        v11 = (float32x2_t *)&v4[1].n128_i8[8];
        v4[1].n128_u32[1] = 0;
      }
      v43 = (__n128 *)v11;
      if (v11 >= (float32x2_t *)v44)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (unsigned char *)__p) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_57:
        }
          sub_2345D8238();
        if (0x5555555555555556 * (((char *)v44 - (unsigned char *)__p) >> 3) > v21) {
          unint64_t v21 = 0x5555555555555556 * (((char *)v44 - (unsigned char *)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          int32x2_t v23 = (char *)sub_2345D82E0((uint64_t)&v44, v22);
        }
        else {
          int32x2_t v23 = 0;
        }
        int32x2_t v24 = (float32x2_t *)&v23[8 * (((char *)v11 - (unsigned char *)__p) >> 3)];
        *int32x2_t v24 = v7;
        v24[1] = (float32x2_t)v10;
        v24[2] = 0;
        int32x2_t v26 = (char *)__p;
        int32x2_t v25 = (char *)v43;
        float32x2_t v27 = &v23[24 * v20];
        if (v43 != __p)
        {
          do
          {
            a2 = *(__n128 *)(v25 - 24);
            *((void *)v27 - 1) = *((void *)v25 - 1);
            *(__n128 *)(v27 - 24) = a2;
            v27 -= 24;
            v25 -= 24;
          }
          while (v25 != v26);
          int32x2_t v25 = (char *)__p;
        }
        float32x2_t v4 = (__n128 *)&v24[3];
        __p = v27;
        v43 = (__n128 *)&v24[3];
        v44 = (__n128 *)&v23[24 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        float32x2_t *v11 = v7;
        float32x2_t v4 = (__n128 *)&v11[3];
        v11[1] = (float32x2_t)v10;
        v11[2] = 0;
      }
      v43 = v4;
      ++v5;
      uint64_t v2 = *a1;
    }
    while (v5 < (a1[1] - *a1) >> 4);
    float32x2_t v28 = (__n128 *)__p;
  }
  unint64_t v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v28) >> 3));
  v41[0] = (uint64_t (*)(long long *, long long *))sub_2345D55A0;
  if (v4 == v28) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  sub_2345D835C((uint64_t)v28, v4, v41, v30, 1, a2);
  memset(v41, 0, sizeof(v41));
  sub_234613D7C(v41);
  float32x2_t v31 = (char *)__p;
  if (v43 == __p)
  {
LABEL_52:
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    while (1)
    {
      int32x2_t v34 = &v31[v32];
      uint64_t v35 = *((void *)v34 + 1);
      if (v34[16]) {
        sub_234613F4C();
      }
      float32x2_t v36 = (float32x2_t *)sub_2346148E8((uint64_t)v41, v35);
      float32x2_t v37 = (float32x2_t *)sub_2346149D4((uint64_t)v41, v35);
      if (sub_2345D562C(v37, v36, v38)) {
        break;
      }
      sub_234614520((uint64_t)v41, v35);
      ++v33;
      float32x2_t v31 = (char *)__p;
      v32 += 24;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)__p) >> 3) <= v33) {
        goto LABEL_52;
      }
    }
    uint64_t v39 = 1;
  }
  sub_234613F48(v41);
  if (__p)
  {
    v43 = (__n128 *)__p;
    operator delete(__p);
  }
  return v39;
}

void sub_2345D5C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2345D5C98(__n128 a1, float a2)
{
  unsigned int v2 = vcvtms_u32_f32(a1.n128_f32[0] / a2);
  unsigned int v3 = vcvtms_u32_f32(a1.n128_f32[1] / a2);
  unsigned int v4 = vcvtms_u32_f32(a1.n128_f32[2] / a2);
  unint64_t v5 = (((unint64_t)(v2 & 0x1FFFFF) << 16) | ((unint64_t)(v2 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v2;
  uint64_t v6 = (v5 | (v5 << 8)) & 0x1003003003003003 | (16 * ((v5 | (v5 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  unint64_t v7 = (((unint64_t)(v3 & 0x1FFFFF) << 16) | ((unint64_t)(v3 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v3;
  uint64_t v8 = (v7 | (v7 << 8)) & 0x1003003003003003 | (16 * ((v7 | (v7 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  uint64_t v9 = ((8 * v8) | (2 * v8)) & 0x2492492492492492 | (v6 | (4 * v6)) & 0x1249249249249249;
  unint64_t v10 = (((unint64_t)(v4 & 0x1FFFFF) << 16) | ((unint64_t)(v4 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v4;
  uint64_t v11 = (v10 | (v10 << 8)) & 0x1003003003003003 | (16 * ((v10 | (v10 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  return v9 | ((16 * v11) | (4 * v11)) & 0x4924924924924924;
}

uint64_t sub_2345D5DAC(float32x4_t **a1, __n128 a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  float32x4_t v4 = **a1;
  uint64_t v55 = 1065353216;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  memset(v54, 0, sizeof(v54));
  if (v3 == v2)
  {
    __p = 0;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL);
    float32x4_t v8 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), vnegq_f32((float32x4_t)a2)), v4, v7);
    float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
    int32x4_t v10 = (int32x4_t)vmulq_f32(v8, v8);
    v10.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), *(float32x2_t *)v10.i8)).u32[0];
    float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
    float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
    float32x4_t v49 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
    float32x4_t v13 = vmlaq_f32(vmulq_f32(v7, vnegq_f32(v49)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
    float32x4_t v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
    int32x4_t v15 = (int32x4_t)vmulq_f32(v13, v13);
    v15.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8)).u32[0];
    *(float32x2_t *)v13.f32 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    *(float32x2_t *)v13.f32 = vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32)));
    float32x4_t v48 = vmulq_n_f32(v14, vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))).f32[0]);
    do
    {
      float32x4_t v16 = v2[v6];
      int32x4_t v17 = (int32x4_t)vmulq_f32(v49, v16);
      __n128 v18 = (__n128)vmulq_f32(v48, v16);
      v18.n128_u64[0] = (unint64_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v18, 2), vadd_f32((float32x2_t)v18.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v18.n128_u64[0], 1))));
      unint64_t v53 = v18.n128_u64[0];
      int32x2_t v19 = v57;
      if (v57 >= v58)
      {
        uint64_t v21 = (v57 - (unsigned char *)v56) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_2345D8238();
        }
        unint64_t v22 = (v58 - (unsigned char *)v56) >> 2;
        if (v22 <= v21 + 1) {
          unint64_t v22 = v21 + 1;
        }
        if ((unint64_t)(v58 - (unsigned char *)v56) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23)
        {
          int32x2_t v24 = (char *)sub_2345D9644((uint64_t)&v58, v23);
          v18.n128_u64[0] = v53;
        }
        else
        {
          int32x2_t v24 = 0;
        }
        int32x2_t v25 = &v24[8 * v21];
        *(void *)int32x2_t v25 = v18.n128_u64[0];
        unint64_t v20 = v25 + 8;
        float32x2_t v27 = (char *)v56;
        int32x2_t v26 = v57;
        if (v57 != v56)
        {
          do
          {
            unint64_t v28 = *((void *)v26 - 1);
            v26 -= 8;
            v18.n128_u64[0] = v28;
            *((void *)v25 - 1) = v28;
            v25 -= 8;
          }
          while (v26 != v27);
          int32x2_t v26 = (char *)v56;
        }
        v56 = v25;
        v57 = v20;
        v58 = &v24[8 * v23];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)v57 = v18.n128_u64[0];
        unint64_t v20 = v19 + 8;
      }
      v57 = v20;
      if (sub_2345D967C(v54, &v53, v18))
      {
        __p = &v53;
        uint64_t v30 = sub_2345D9784((uint64_t)v54, &v53, v29, (uint64_t)&unk_23463AC00, (float32x2_t **)&__p);
        ++v30[3].i32[0];
      }
      else
      {
        __p = &v53;
        sub_2345D9784((uint64_t)v54, &v53, v29, (uint64_t)&unk_23463AC00, (float32x2_t **)&__p)[3].i32[0] = 0;
      }
      __p = &v53;
      if (sub_2345D9784((uint64_t)v54, &v53, v31, (uint64_t)&unk_23463AC00, (float32x2_t **)&__p)[3].i32[0] >= 3)
      {
        uint64_t v46 = 0;
        goto LABEL_48;
      }
      ++v6;
      unsigned int v2 = *a1;
    }
    while (v6 < a1[1] - *a1);
    uint64_t v32 = v56;
    __p = 0;
    v51 = 0;
    v52 = 0;
    if (v57 != v56)
    {
      unint64_t v33 = 0;
      unint64_t v34 = 0;
      unint64_t v35 = (v57 - (unsigned char *)v56) >> 3;
      do
      {
        unint64_t v36 = v32[v34++];
        unint64_t v37 = v32[v34 % v35];
        if (v33 >= v52)
        {
          uint64_t v38 = (v33 - (unsigned char *)__p) >> 4;
          if ((unint64_t)(v38 + 1) >> 60) {
            sub_2345D8238();
          }
          unint64_t v39 = (v52 - (unsigned char *)__p) >> 3;
          if (v39 <= v38 + 1) {
            unint64_t v39 = v38 + 1;
          }
          if ((unint64_t)(v52 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            float32x4_t v41 = (char *)sub_2345D9C30((uint64_t)&v52, v40);
          }
          else {
            float32x4_t v41 = 0;
          }
          int32x2_t v42 = (__n128 *)&v41[16 * v38];
          v42->n128_u64[0] = v36;
          v42->n128_u64[1] = v37;
          v44 = (__n128 *)__p;
          v43 = v51;
          v45 = v42;
          if (v51 != __p)
          {
            do
            {
              a2 = v43[-1];
              v45[-1] = a2;
              --v45;
              --v43;
            }
            while (v43 != v44);
            v43 = (__n128 *)__p;
          }
          unint64_t v33 = (char *)&v42[1];
          __p = v45;
          v51 = v42 + 1;
          v52 = &v41[16 * v40];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(void *)unint64_t v33 = v36;
          *((void *)v33 + 1) = v37;
          v33 += 16;
        }
        v51 = (__n128 *)v33;
        uint64_t v32 = v56;
        unint64_t v35 = (v57 - (unsigned char *)v56) >> 3;
      }
      while (v35 > v34);
    }
  }
  uint64_t v46 = sub_2345D5838((uint64_t *)&__p, a2) ^ 1;
  if (__p)
  {
    v51 = (__n128 *)__p;
    operator delete(__p);
  }
LABEL_48:
  sub_2345D95F8((uint64_t)v54);
  if (v56)
  {
    v57 = (char *)v56;
    operator delete(v56);
  }
  return v46;
}

void sub_2345D61D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2345D95F8((uint64_t)&a17);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2345D6224(float32x4_t **a1, float32x4_t a2)
{
  BOOL result = 0;
  float32x4_t v4 = *a1;
  float32x4_t v5 = v4[2];
  unint64_t v6 = vsubq_f32(a2, v5).u64[0];
  unint64_t v7 = vsubq_f32(v4[1], v5).u64[0];
  _S5 = HIDWORD(v6);
  float v9 = vmlas_n_f32((float)-*((float *)&v7 + 1) * *(float *)&v6, *((float *)&v6 + 1), *(float *)&v7);
  if (fabsf(v9) >= 0.000001)
  {
    _D6 = vsubq_f32(*v4, v5).u64[0];
    __asm { FMLS            S3, S5, V6.S[0] }
    if (fabsf(_S3) >= 0.000001)
    {
      float v16 = vmlas_n_f32((float)-*((float *)&v7 + 1) * *(float *)&_D6, *((float *)&_D6 + 1), *(float *)&v7);
      float v17 = v9 + _S3;
      if (vabds_f32(v9 + _S3, v16) >= 0.000001)
      {
        if (v16 >= 0.0)
        {
          BOOL v19 = v9 >= 0.0;
          if (_S3 < 0.0) {
            BOOL v19 = 0;
          }
          return v17 <= v16 && v19;
        }
        else
        {
          BOOL v18 = v9 <= 0.0;
          if (_S3 > 0.0) {
            BOOL v18 = 0;
          }
          return v17 >= v16 && v18;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_2345D62F0(uint64_t *a1, uint64_t a2, void *a3, float32x4_t a4)
{
  if (*(void *)(a2 + 8) == *a1) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *a1;
  }
  uint64_t v5 = *(int *)(*(void *)v4 + 16);
  uint64_t v6 = *(void *)(*a1 + 8);
  if (v6 == a2) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  float32x4_t v7 = *(float32x4_t *)(*a3 + 16 * *(int *)(*a1 + 16));
  float32x4_t v8 = vsubq_f32(v7, *(float32x4_t *)(*a3 + 16 * v5));
  float32x4_t v9 = vsubq_f32(*(float32x4_t *)(*a3 + 16 * *(int *)(v6 + 16)), v7);
  float32x4_t v10 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v8)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
  float32x4_t v11 = vmulq_f32(v10, v10);
  if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), v11)).f32[0] < 1.0e-12)return 1; {
  float32x4_t v13 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), a4);
  }
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0] < 0.0;
}

uint64_t sub_2345D63A4(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = *(int *)(*a4 + 16);
  float32x4_t v9 = a2 + 1;
  uint64_t v8 = a2[1];
  if (v8)
  {
    float32x4_t v10 = a2 + 1;
    do
    {
      int v11 = *(_DWORD *)(v8 + 28);
      BOOL v12 = v11 < (int)v7;
      if (v11 >= (int)v7) {
        float32x4_t v13 = (uint64_t *)v8;
      }
      else {
        float32x4_t v13 = (uint64_t *)(v8 + 8);
      }
      if (!v12) {
        float32x4_t v10 = (void *)v8;
      }
      uint64_t v8 = *v13;
    }
    while (*v13);
    if (v10 != v9 && (int)v7 >= *((_DWORD *)v10 + 7)) {
      return 0;
    }
  }
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = *a4;
  }
  uint64_t v15 = *(int *)(*(void *)v14 + 16);
  uint64_t v16 = *(void *)(v6 + 8);
  if (v16 == a1) {
    uint64_t v16 = *(void *)(a1 + 8);
  }
  uint64_t v17 = *(int *)(v16 + 16);
  __p = 0;
  v63 = 0;
  v64 = 0;
  uint64_t v18 = *a3;
  unint64_t v20 = (char *)sub_2345D9C30((uint64_t)&v64, 1uLL);
  uint64_t v21 = &v20[16 * v19];
  *(_OWORD *)unint64_t v20 = *(_OWORD *)(v18 + 16 * v15);
  unint64_t v22 = v20 + 16;
  int32x2_t v24 = (char *)__p;
  unint64_t v23 = v63;
  int32x2_t v25 = v20;
  if (v63 != __p)
  {
    do
    {
      long long v26 = *((_OWORD *)v23 - 1);
      v23 -= 16;
      *((_OWORD *)v25 - 1) = v26;
      v25 -= 16;
    }
    while (v23 != v24);
    unint64_t v23 = (char *)__p;
  }
  __p = v25;
  v63 = v20 + 16;
  v64 = &v20[16 * v19];
  if (v23)
  {
    operator delete(v23);
    uint64_t v21 = v64;
  }
  v63 = v20 + 16;
  uint64_t v27 = *a3;
  if (v22 >= v21)
  {
    uint64_t v29 = (v22 - (unsigned char *)__p) >> 4;
    if ((unint64_t)(v29 + 1) >> 60) {
      goto LABEL_73;
    }
    uint64_t v30 = v21 - (unsigned char *)__p;
    uint64_t v31 = v30 >> 3;
    if (v30 >> 3 <= (unint64_t)(v29 + 1)) {
      uint64_t v31 = v29 + 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32) {
      unint64_t v33 = (char *)sub_2345D9C30((uint64_t)&v64, v32);
    }
    else {
      unint64_t v33 = 0;
    }
    unint64_t v35 = &v33[16 * v29];
    unint64_t v36 = &v33[16 * v32];
    *(_OWORD *)unint64_t v35 = *(_OWORD *)(v27 + 16 * v7);
    unint64_t v28 = v35 + 16;
    uint64_t v38 = (char *)__p;
    unint64_t v37 = v63;
    if (v63 != __p)
    {
      do
      {
        long long v39 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v35 - 1) = v39;
        v35 -= 16;
      }
      while (v37 != v38);
      unint64_t v37 = (char *)__p;
    }
    __p = v35;
    v63 = v28;
    v64 = v36;
    if (v37) {
      operator delete(v37);
    }
  }
  else
  {
    *((_OWORD *)v20 + 1) = *(_OWORD *)(v27 + 16 * v7);
    unint64_t v28 = v20 + 32;
  }
  v63 = v28;
  uint64_t v40 = *a3;
  if (v28 >= v64)
  {
    uint64_t v42 = (v28 - (unsigned char *)__p) >> 4;
    if (!((unint64_t)(v42 + 1) >> 60))
    {
      unint64_t v43 = (v64 - (unsigned char *)__p) >> 3;
      if (v43 <= v42 + 1) {
        unint64_t v43 = v42 + 1;
      }
      if ((unint64_t)(v64 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44) {
        v45 = (char *)sub_2345D9C30((uint64_t)&v64, v44);
      }
      else {
        v45 = 0;
      }
      uint64_t v46 = &v45[16 * v42];
      v47 = &v45[16 * v44];
      *(_OWORD *)uint64_t v46 = *(_OWORD *)(v40 + 16 * v17);
      float32x4_t v41 = v46 + 16;
      float32x4_t v49 = (char *)__p;
      float32x4_t v48 = v63;
      if (v63 != __p)
      {
        do
        {
          long long v50 = *((_OWORD *)v48 - 1);
          v48 -= 16;
          *((_OWORD *)v46 - 1) = v50;
          v46 -= 16;
        }
        while (v48 != v49);
        float32x4_t v48 = (char *)__p;
      }
      __p = v46;
      v63 = v41;
      v64 = v47;
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_54;
    }
LABEL_73:
    sub_2345D8238();
  }
  *(_OWORD *)unint64_t v28 = *(_OWORD *)(v40 + 16 * v17);
  float32x4_t v41 = v28 + 16;
LABEL_54:
  v63 = v41;
  v51 = (void *)*a2;
  if ((void *)*a2 == v9)
  {
LABEL_68:
    uint64_t v34 = 1;
  }
  else
  {
    while (1)
    {
      int v52 = *((_DWORD *)v51 + 7);
      BOOL v53 = v52 == v15 || v52 == v17;
      if (!v53)
      {
        float32x4_t v58 = *(float32x4_t *)(*a3 + 16 * v52);
        v60 = 0;
        uint64_t v61 = 0;
        v59 = 0;
        sub_2345D9C68(&v59, __p, (uint64_t)v63, (v63 - (unsigned char *)__p) >> 4);
        BOOL v54 = sub_2345D6224((float32x4_t **)&v59, v58);
        if (v59)
        {
          v60 = v59;
          operator delete(v59);
        }
        if (v54) {
          break;
        }
      }
      uint64_t v55 = (void *)v51[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          uint64_t v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (void *)v51[2];
          BOOL v53 = *v56 == (void)v51;
          v51 = v56;
        }
        while (!v53);
      }
      v51 = v56;
      if (v56 == v9) {
        goto LABEL_68;
      }
    }
    uint64_t v34 = 0;
  }
  if (__p)
  {
    v63 = (char *)__p;
    operator delete(__p);
  }
  return v34;
}

void sub_2345D6704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345D6724(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, void *a6, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a7, void *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, double a12, double a13, float32x4_t a14)
{
  if (a2 >= 3)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        int v22 = a4 + 1;
        int v23 = a4 + 2;
        uint64_t v24 = (*a6)++;
        sub_2345D9D28(this);
        *(_DWORD *)(*((void *)this + 4) + 4 * v24) = a4;
        uint64_t v25 = (*a6)++;
        sub_2345D9D28(this);
        *(_DWORD *)(*((void *)this + 4) + 4 * v25) = v22;
        uint64_t v26 = (*a6)++;
        sub_2345D9D28(this);
        *(_DWORD *)(*((void *)this + 4) + 4 * v26) = v23;
        uint64_t v27 = (*a8)++;
        sub_2345D9D28(a7);
        *(_DWORD *)(*((void *)a7 + 4) + 4 * v27) = 3;
        return;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      sub_2345D7554((void **)&v195, a2);
      uint64_t v55 = 0;
      v192 = &v192;
      v193 = (void **)&v192;
      unint64_t v194 = 0;
      v56 = v196;
      do
      {
        uint64_t v57 = *(void *)(a1 + 32) + 12 * *(int *)(*(void *)(a3 + 32) + 4 * (v55 + a4));
        v54.i64[0] = *(void *)v57;
        v54.i32[2] = *(_DWORD *)(v57 + 8);
        if (v56 >= v197)
        {
          float32x4_t v185 = v54;
          uint64_t v58 = v56 - v195;
          if ((unint64_t)(v58 + 1) >> 60) {
            sub_2345D8238();
          }
          unint64_t v59 = ((char *)v197 - (char *)v195) >> 3;
          if (v59 <= v58 + 1) {
            unint64_t v59 = v58 + 1;
          }
          if ((unint64_t)((char *)v197 - (char *)v195) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v59;
          }
          if (v60) {
            uint64_t v61 = (char *)sub_2345D9C30((uint64_t)&v197, v60);
          }
          else {
            uint64_t v61 = 0;
          }
          v62 = (float32x4_t *)&v61[16 * v58];
          float32x4_t *v62 = v185;
          v56 = v62 + 1;
          v64 = v195;
          v63 = v196;
          if (v196 != v195)
          {
            do
            {
              float32x4_t v65 = v63[-1];
              --v63;
              v62[-1] = v65;
              --v62;
            }
            while (v63 != v64);
            v63 = v195;
          }
          v195 = v62;
          v196 = v56;
          v197 = (float32x4_t *)&v61[16 * v60];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          *v56++ = v54;
        }
        v196 = v56;
        v66 = operator new(0x18uLL);
        v66[4] = v55;
        v67 = v192;
        *(void *)v66 = v192;
        *((void *)v66 + 1) = &v192;
        v67[1] = v66;
        v192 = v66;
        ++v194;
        ++v55;
      }
      while (v55 != a2);
      v68 = v195;
      unint64_t v69 = v56 - v195;
      v54.f32[0] = (float)v69;
      if (v56 == v195)
      {
        v54.f32[0] = (float)(1.0 / v54.f32[0]) * 0.0;
        float32x4_t v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
        float32x4_t v77 = 0uLL;
      }
      else
      {
        if (v69 <= 1) {
          uint64_t v70 = 1;
        }
        else {
          uint64_t v70 = v56 - v195;
        }
        float32x4_t v71 = 0uLL;
        v72 = v195;
        uint64_t v73 = v70;
        do
        {
          float32x4_t v74 = *v72++;
          float32x4_t v71 = vaddq_f32(v71, v74);
          --v73;
        }
        while (v73);
        uint64_t v75 = 0;
        float32x4_t v76 = vmulq_n_f32(v71, 1.0 / v54.f32[0]);
        float32x4_t v77 = 0uLL;
        do
        {
          if (v69 - 1 == v75) {
            uint64_t v78 = 0;
          }
          else {
            uint64_t v78 = v75 + 1;
          }
          float32x4_t v79 = vsubq_f32(v195[v75], v76);
          float32x4_t v80 = vsubq_f32(v195[v78], v76);
          int32x4_t v81 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), vnegq_f32(v79)), v80, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
          float32x4_t v77 = vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v81, v81), (int8x16_t)v81, 0xCuLL));
          ++v75;
        }
        while (v70 != v75);
      }
      float32x4_t v88 = vmulq_f32(v77, v77);
      float v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0];
      if (v89 < 1.0e-12)
      {
        unint64_t v90 = a2 - 2;
        int v91 = a4 + 1;
        do
        {
          uint64_t v92 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v92) = a4;
          uint64_t v93 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v93) = v91;
          uint64_t v94 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v94) = v91 + 1;
          uint64_t v95 = (*a8)++;
          sub_2345D9D28(a7);
          *(_DWORD *)(*((void *)a7 + 4) + 4 * v95) = 3;
          ++v91;
          --v90;
        }
        while (v90);
LABEL_139:
        sub_2345D81C0(&v192);
        if (v195)
        {
          v196 = v195;
          operator delete(v195);
        }
        return;
      }
      float v96 = v89;
      float32x2_t v97 = vrsqrte_f32((float32x2_t)LODWORD(v89));
      float32x2_t v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)LODWORD(v96), vmul_f32(v97, v97)));
      __n128 v184 = (__n128)vmulq_n_f32(v77, vmul_f32(v98, vrsqrts_f32((float32x2_t)LODWORD(v96), vmul_f32(v98, v98))).f32[0]);
      float32x4_t v186 = v76;
      if (!sub_2345D5DAC(&v195, v184))
      {
        unint64_t v127 = a2 - 2;
        int v128 = a4 + 1;
        do
        {
          uint64_t v129 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v129) = a4;
          uint64_t v130 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v130) = v128;
          uint64_t v131 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v131) = v128 + 1;
          uint64_t v132 = (*a8)++;
          sub_2345D9D28(a7);
          *(_DWORD *)(*((void *)a7 + 4) + 4 * v132) = 3;
          ++v128;
          --v127;
        }
        while (v127);
        goto LABEL_139;
      }
      if (v56 != v68)
      {
        uint64_t v99 = 0;
        float32x4_t v100 = vsubq_f32(*v195, v186);
        int32x4_t v101 = (int32x4_t)vmulq_f32(v100, v100);
        v101.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v101, 2), vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1))).u32[0];
        float32x2_t v102 = vrsqrte_f32((float32x2_t)v101.u32[0]);
        float32x2_t v103 = vmul_f32(v102, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v102, v102)));
        float32x4_t v104 = vmulq_n_f32(v100, vmul_f32(v103, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v103, v103))).f32[0]);
        int32x4_t v105 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), vnegq_f32((float32x4_t)v184)), v104, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v184, (int32x4_t)v184), (int8x16_t)v184, 0xCuLL));
        float32x4_t v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v105, v105), (int8x16_t)v105, 0xCuLL);
        if (v69 <= 1) {
          uint64_t v107 = 1;
        }
        else {
          uint64_t v107 = v56 - v68;
        }
        do
        {
          float32x4_t v108 = vsubq_f32(v195[v99], v186);
          int32x4_t v109 = (int32x4_t)vmulq_f32(v104, v108);
          int32x4_t v110 = (int32x4_t)vmulq_f32(v106, v108);
          float32x2_t v111 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v110.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v110.i8));
          int32x4_t v112 = vzip2q_s32(v109, v110);
          *(float32x2_t *)v112.i8 = vadd_f32(*(float32x2_t *)v112.i8, v111);
          v112.i32[2] = 0;
          v195[v99++] = (float32x4_t)v112;
        }
        while (v107 != v99);
      }
      v190 = 0;
      uint64_t v191 = 0;
      uint64_t v113 = (uint64_t)v193;
      v188 = v193;
      v189 = (uint64_t *)&v190;
      if (v193 == (void **)&v192)
      {
        v114 = (void **)&v192;
      }
      else
      {
        do
        {
          if (sub_2345D62F0((uint64_t *)&v188, (uint64_t)&v192, &v195, (float32x4_t)xmmword_23463ABF0)) {
            sub_2345DA000(&v189, (uint64_t *)&v190, (int *)(v113 + 16), (_DWORD *)(v113 + 16));
          }
          uint64_t v113 = *(void *)(v113 + 8);
          v188 = (void **)v113;
        }
        while ((void **)v113 != &v192);
        v114 = v193;
      }
      v187 = (void **)&v192;
      v188 = v114;
      int v133 = v194;
      if (v194 >= 3)
      {
        if (v194 != 3)
        {
          int v135 = 0;
          while (!sub_2345D63A4((uint64_t)&v192, &v189, (uint64_t *)&v195, (uint64_t *)&v188))
          {
            unint64_t v154 = v194;
            if (v114[1] == &v192) {
              v134 = v193;
            }
            else {
              v134 = (void **)v114[1];
            }
            v188 = v134;
            ++v135;
            v114 = v134;
LABEL_117:
            if (v135 > v133 || v154 <= 2) {
              goto LABEL_126;
            }
            if (v154 == 3) {
              goto LABEL_120;
            }
          }
          v136 = v193;
          if (v193 == v114) {
            v137 = (void **)&v192;
          }
          else {
            v137 = v114;
          }
          int v138 = *((_DWORD *)*v137 + 4);
          int v139 = *((_DWORD *)v114 + 4);
          if (v114[1] != &v192) {
            v136 = (void **)v114[1];
          }
          int v140 = *((_DWORD *)v136 + 4);
          uint64_t v141 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v141) = v138 + a4;
          uint64_t v142 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v142) = v139 + a4;
          uint64_t v143 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v143) = v140 + a4;
          uint64_t v144 = (*a8)++;
          sub_2345D9D28(a7);
          *(_DWORD *)(*((void *)a7 + 4) + 4 * v144) = 3;
          v146 = *v114;
          v145 = (void **)v114[1];
          if (v145 == (void **)&v192) {
            v134 = v193;
          }
          else {
            v134 = (void **)v114[1];
          }
          v146[1] = v145;
          *(void *)v114[1] = v146;
          --v194;
          operator delete(v114);
          v188 = v134;
          v147 = v190;
          if (v134 == (void **)&v192)
          {
            v114 = v134;
            v134 = (void **)&v192;
          }
          else
          {
            if (!v190)
            {
              if (v193 == v134) {
                v164 = (void ***)&v192;
              }
              else {
                v164 = (void ***)v134;
              }
              v187 = *v164;
              v114 = v134;
LABEL_116:
              int v135 = 0;
              unint64_t v154 = v194;
              int v133 = v194;
              goto LABEL_117;
            }
            int v148 = *((_DWORD *)v134 + 4);
            v149 = &v190;
            v150 = v190;
            do
            {
              v151 = v150;
              v152 = v149;
              int v153 = *((_DWORD *)v150 + 7);
              if (v153 >= v148) {
                v149 = (void **)v150;
              }
              else {
                ++v150;
              }
              v150 = (void *)*v150;
            }
            while (v150);
            if (v149 != &v190)
            {
              if (v153 < v148) {
                v151 = v152;
              }
              if (v148 >= *((_DWORD *)v151 + 7))
              {
                v114 = v134;
                if (sub_2345D62F0((uint64_t *)&v188, (uint64_t)&v192, &v195, (float32x4_t)xmmword_23463ABF0)) {
                  goto LABEL_95;
                }
                sub_2345DA424((uint64_t)&v189, (int *)v134 + 4);
                v134 = v188;
                v147 = v190;
              }
            }
            v114 = v134;
          }
LABEL_95:
          if (v193 == v114) {
            v155 = (uint64_t *)&v192;
          }
          else {
            v155 = (uint64_t *)v114;
          }
          uint64_t v156 = *v155;
          v187 = (void **)v156;
          if (v147)
          {
            v157 = (int *)(v156 + 16);
            int v158 = *(_DWORD *)(v156 + 16);
            v159 = &v190;
            do
            {
              v160 = v147;
              v161 = v159;
              int v162 = *((_DWORD *)v147 + 7);
              if (v162 >= v158) {
                v163 = v147;
              }
              else {
                v163 = v147 + 1;
              }
              if (v162 >= v158) {
                v159 = (void **)v147;
              }
              v147 = (void *)*v163;
            }
            while (*v163);
            if (v159 != &v190)
            {
              if (v162 < v158) {
                v160 = v161;
              }
              if (v158 >= *((_DWORD *)v160 + 7)
                && !sub_2345D62F0((uint64_t *)&v187, (uint64_t)&v192, &v195, (float32x4_t)xmmword_23463ABF0))
              {
                sub_2345DA424((uint64_t)&v189, v157);
              }
            }
          }
          goto LABEL_116;
        }
        v134 = v114;
LABEL_120:
        v165 = v193;
        if (v193 == v114) {
          v166 = (void **)&v192;
        }
        else {
          v166 = v114;
        }
        int v167 = *((_DWORD *)*v166 + 4);
        if (v134[1] != &v192) {
          v165 = (void **)v134[1];
        }
        sub_2345D7494(this, a6, a7, a8, v167 + a4, *((_DWORD *)v134 + 4) + a4, *((_DWORD *)v165 + 4) + a4);
      }
LABEL_126:
      sub_2345D9FAC((uint64_t)&v189, v190);
      v168 = 0;
      v190 = 0;
      uint64_t v191 = 0;
      v189 = (uint64_t *)&v190;
      if (v194 >= 4)
      {
        v169 = v193;
        do
        {
          v170 = v193;
          if (v193 == v169) {
            v171 = (void **)&v192;
          }
          else {
            v171 = v169;
          }
          int v172 = *((_DWORD *)*v171 + 4);
          int v173 = *((_DWORD *)v169 + 4);
          if (v169[1] != &v192) {
            v170 = (void **)v169[1];
          }
          int v174 = *((_DWORD *)v170 + 4);
          uint64_t v175 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v175) = v172 + a4;
          uint64_t v176 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v176) = v173 + a4;
          uint64_t v177 = (*a6)++;
          sub_2345D9D28(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v177) = v174 + a4;
          uint64_t v178 = (*a8)++;
          sub_2345D9D28(a7);
          *(_DWORD *)(*((void *)a7 + 4) + 4 * v178) = 3;
          v180 = *v169;
          v179 = (void **)v169[1];
          if (v179 == (void **)&v192) {
            v181 = v193;
          }
          else {
            v181 = (void **)v169[1];
          }
          v180[1] = v179;
          *(void *)v169[1] = v180;
          --v194;
          operator delete(v169);
          v169 = v181;
        }
        while (v194 > 2);
        sub_2345D81C0(&v192);
        v168 = v190;
      }
      sub_2345D9FAC((uint64_t)&v189, v168);
      goto LABEL_139;
    }
    unint64_t v28 = (int *)(*(void *)(a3 + 32) + 4 * a4);
    int v29 = a4 + 1;
    int v30 = a4 + 2;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v32 = v31 + 12 * *v28;
    a9.i64[0] = *(void *)v32;
    a9.i32[2] = *(_DWORD *)(v32 + 8);
    uint64_t v33 = v31 + 12 * v28[1];
    a14.i64[0] = *(void *)v33;
    a14.i32[2] = *(_DWORD *)(v33 + 8);
    uint64_t v34 = v31 + 12 * v28[2];
    a10.i64[0] = *(void *)v34;
    a10.i32[2] = *(_DWORD *)(v34 + 8);
    uint64_t v35 = v31 + 12 * v28[3];
    a11.i64[0] = *(void *)v35;
    a11.i32[2] = *(_DWORD *)(v35 + 8);
    float32x4_t v36 = vsubq_f32(a14, a9);
    float32x4_t v37 = vsubq_f32(a11, a10);
    float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL);
    float32x4_t v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
    float32x4_t v40 = vnegq_f32(v36);
    float32x4_t v41 = vsubq_f32(a11, a14);
    float32x4_t v42 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), v40), v41, v38);
    float32x4_t v43 = vsubq_f32(a10, a14);
    float32x4_t v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL);
    float32x4_t v45 = vmlaq_f32(vmulq_f32(v39, vnegq_f32(v43)), v37, v44);
    float32x4_t v46 = vmulq_f32(v42, v45);
    int v47 = a4 + 3;
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), v46)).f32[0] < 0.0)
    {
      uint64_t v48 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v48) = a4;
      uint64_t v49 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v49) = v29;
      uint64_t v50 = (*a6)++;
      sub_2345D9D28(this);
      uint64_t v51 = *((void *)this + 4);
LABEL_7:
      *(_DWORD *)(v51 + 4 * v50) = v30;
      uint64_t v52 = (*a8)++;
      sub_2345D9D28(a7);
      *(_DWORD *)(*((void *)a7 + 4) + 4 * v52) = 3;
      uint64_t v53 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v53) = a4;
LABEL_58:
      uint64_t v124 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v124) = v30;
      uint64_t v125 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v125) = v47;
      uint64_t v126 = (*a8)++;
      sub_2345D9D28(a7);
      *(_DWORD *)(*((void *)a7 + 4) + 4 * v126) = 3;
      return;
    }
    float32x4_t v82 = vsubq_f32(a10, a9);
    float32x4_t v83 = vmlaq_f32(vmulq_f32(v39, vnegq_f32(v82)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL));
    float32x4_t v84 = vmlaq_f32(vmulq_f32(v44, v40), v43, v38);
    float32x4_t v85 = vmulq_f32(v84, v83);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), v85)).f32[0] >= 0.0)
    {
      int32x4_t v115 = (int32x4_t)vmulq_f32(v42, v42);
      int32x4_t v116 = (int32x4_t)vmulq_f32(v45, v45);
      int32x4_t v117 = (int32x4_t)vmulq_f32(v84, v84);
      int32x4_t v118 = (int32x4_t)vmulq_f32(v83, v83);
      *(float32x2_t *)v118.i8 = vabd_f32(vabs_f32(vadd_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v117.i8), vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v115, v117), (float32x2_t)vzip1_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v117.i8)))), vabs_f32(vadd_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v118.i8), vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v116, v118), (float32x2_t)vzip1_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v118.i8)))));
      unsigned __int8 v119 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1), *(float32x2_t *)v118.i8).u8[0];
      uint64_t v120 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v120) = a4;
      uint64_t v121 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v121) = v29;
      uint64_t v50 = (*a6)++;
      sub_2345D9D28(this);
      uint64_t v51 = *((void *)this + 4);
      if ((v119 & 1) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v86 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v86) = a4;
      uint64_t v87 = (*a6)++;
      sub_2345D9D28(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v87) = v29;
      uint64_t v50 = (*a6)++;
      sub_2345D9D28(this);
      uint64_t v51 = *((void *)this + 4);
    }
    *(_DWORD *)(v51 + 4 * v50) = v47;
    uint64_t v122 = (*a8)++;
    sub_2345D9D28(a7);
    *(_DWORD *)(*((void *)a7 + 4) + 4 * v122) = 3;
    uint64_t v123 = (*a6)++;
    sub_2345D9D28(this);
    *(_DWORD *)(*((void *)this + 4) + 4 * v123) = v29;
    goto LABEL_58;
  }
}

void sub_2345D7430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void *);
  uint64_t v16 = va_arg(va1, void);
  sub_2345D9FAC((uint64_t)va, v15);
  sub_2345D81C0((uint64_t *)va1);
  BOOL v12 = *(void **)(v10 - 104);
  if (v12)
  {
    *(void *)(v10 - 96) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_2345D7494(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, void *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, void *a4, int a5, int a6, int a7)
{
  uint64_t v14 = (*a2)++;
  sub_2345D9D28(a1);
  *(_DWORD *)(*((void *)a1 + 4) + 4 * v14) = a5;
  uint64_t v15 = (*a2)++;
  sub_2345D9D28(a1);
  *(_DWORD *)(*((void *)a1 + 4) + 4 * v15) = a6;
  uint64_t v16 = (*a2)++;
  sub_2345D9D28(a1);
  *(_DWORD *)(*((void *)a1 + 4) + 4 * v16) = a7;
  uint64_t v17 = (*a4)++;
  sub_2345D9D28(a3);
  *(_DWORD *)(*((void *)a3 + 4) + 4 * v17) = 3;
}

void sub_2345D7554(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_2345D8238();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_2345D9C30(v3, a2);
    uint64_t v7 = &v6[v5];
    float32x4_t v9 = &v6[16 * v8];
    int v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_2345D75F8(void *a1, unint64_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  unsigned int v2 = (void *)a1[2];
  if (v3 != v2)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 4);
    do
    {
      MEMORY[0x237DC2530](&v43, "vertex");
      uint64_t v8 = (long long *)(v3 + 9);
      uint64_t v7 = v3[9];
      float32x4_t v9 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8) != v9)
      {
        MEMORY[0x237DC2530](&v43, "uniform");
        uint64_t v10 = *(void *)v8;
        int v11 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
        if ((v43 & 7) != 0) {
          atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8) == v11)
        {
          uint64_t v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          sub_2345D7A70((uint64_t)&v43, *a2 / 3);
          if (*(void *)v6)
          {
            unint64_t v18 = 0;
            int v19 = 0;
            do
            {
              sub_2345D9D28(v6);
              int v20 = *(_DWORD *)(a1[8] + 4 * v18);
              if (v20 >= 3)
              {
                uint64_t v21 = 4 * v19;
                int v22 = v20 - 2;
                do
                {
                  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
                  *(_DWORD *)(v45 + v21) = v18;
                  v21 += 4;
                  ++v19;
                  --v22;
                }
                while (v22);
              }
              ++v18;
            }
            while (*(void *)v6 > v18);
          }
          int v23 = (long long *)(v3 + 2);
          if (v3[2])
          {
            uint64_t v42 = 0;
            long long v40 = 0u;
            long long v41 = 0u;
            sub_2345D7A70((uint64_t)&v40, v43);
            if ((void)v43)
            {
              unint64_t v24 = 0;
              do
              {
                sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
                uint64_t v25 = *(int *)(v45 + 4 * v24);
                sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                LODWORD(v25) = *(_DWORD *)(v3[6] + 4 * v25);
                sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
                *(_DWORD *)(v42 + 4 * v24++) = v25;
              }
              while ((unint64_t)v43 > v24);
            }
            uint64_t v26 = v42;
            uint64_t v27 = v3[5];
            uint64_t v42 = v3[6];
            uint64_t v28 = v3[4];
            v3[4] = v41;
            long long v29 = *v23;
            *int v23 = v40;
            long long v40 = v29;
            v3[5] = *((void *)&v41 + 1);
            v3[6] = v26;
            *(void *)&long long v41 = v28;
            *((void *)&v41 + 1) = v27;
            sub_2345D9DC0((uint64_t)&v40);
          }
          else
          {
            sub_2345D7AE4((uint64_t)(v3 + 2), &v43);
          }
          MEMORY[0x237DC2530](&v40, "uniform");
          if (&v40 == v8)
          {
            uint64_t v37 = v40;
          }
          else
          {
            if ((*(void *)v8 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v37 = 0;
            *(void *)uint64_t v8 = v40;
            *(void *)&long long v40 = 0;
          }
          if ((v37 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_2345D9DC0((uint64_t)&v43);
        }
        else
        {
          MEMORY[0x237DC2530](&v43, "faceVarying");
          uint64_t v12 = *(void *)v8;
          long long v13 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
          if ((v43 & 7) != 0) {
            atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
          }
          if ((atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
          {
            int v30 = (long long *)(v3 + 2);
            if (v3[2])
            {
              uint64_t v45 = 0;
              long long v43 = 0u;
              long long v44 = 0u;
              sub_2345D7A70((uint64_t)&v43, *a2);
              if (*a2)
              {
                unint64_t v31 = 0;
                do
                {
                  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
                  uint64_t v32 = *(int *)(a2[4] + 4 * v31);
                  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                  LODWORD(v32) = *(_DWORD *)(v3[6] + 4 * v32);
                  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
                  *(_DWORD *)(v45 + 4 * v31++) = v32;
                }
                while (*a2 > v31);
              }
              uint64_t v33 = v45;
              uint64_t v34 = v3[5];
              uint64_t v45 = v3[6];
              uint64_t v35 = v3[4];
              v3[4] = v44;
              long long v36 = *v30;
              *int v30 = v43;
              long long v43 = v36;
              v3[5] = *((void *)&v44 + 1);
              v3[6] = v33;
              *(void *)&long long v44 = v35;
              *((void *)&v44 + 1) = v34;
              sub_2345D9DC0((uint64_t)&v43);
            }
            else
            {
              sub_2345D7AE4((uint64_t)(v3 + 2), (long long *)a2);
            }
          }
          else
          {
            MEMORY[0x237DC2530](&v43, "constant");
            uint64_t v14 = *(void *)v8;
            uint64_t v15 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
            if ((v43 & 7) != 0) {
              atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8) != v15)
            {
              unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
              if (v16)
              {
                uint64_t v17 = (const char *)(v16 + 16);
                if (*(char *)(v16 + 39) < 0) {
                  uint64_t v17 = *(const char **)v17;
                }
              }
              else
              {
                uint64_t v17 = "";
              }
              unint64_t v38 = v3[7] & 0xFFFFFFFFFFFFFFF8;
              if (v38)
              {
                float32x4_t v39 = (const char *)(v38 + 16);
                if (*(char *)(v38 + 39) < 0) {
                  float32x4_t v39 = *(const char **)v39;
                }
              }
              else
              {
                float32x4_t v39 = "";
              }
              NSLog(&cfstr_WarningMeshSHa.isa, v17, v39);
            }
          }
        }
      }
      v3 += 11;
    }
    while (v3 != v2);
  }
}

void sub_2345D7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2345D9DC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345D7A70(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2345DA898((void *)a1);
  uint64_t v6 = &v5;
  sub_2345DA8E4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345D7ACC(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2345D7AE4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345D7B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345D7B98(uint64_t a1)
{
  unsigned int v2 = (uint64_t *)sub_2345D8090(*(void *)(a1 + 8));
  uint64_t v51 = sub_2345D811C(v2);
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32));
  long long v3 = *(int **)(a1 + 64);
  uint64_t v52 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32);
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32));
  while (v3 != (int *)(*(void *)(a1 + 64) + 4 * *(void *)(a1 + 32)))
  {
    if (*v3 <= 2)
    {
      unint64_t v9 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        uint64_t v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0) {
          uint64_t v10 = *(const char **)v10;
        }
      }
      else
      {
        uint64_t v10 = "";
      }
      NSLog(&cfstr_WarningMeshHas.isa, v10, v51);
      return 0;
    }
    ++v3;
  }
  sub_2345D9D28(v52);
  uint64_t v4 = *(int **)(a1 + 64);
  sub_2345D9D28(v52);
  uint64_t v5 = *(void *)(a1 + 64) + 4 * *(void *)(a1 + 32);
  if (v4 == (int *)v5)
  {
    unint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v4++;
      v7 += 3 * (v8 - 2);
      v6 += (int)v8 - 2;
    }
    while (v4 != (int *)v5);
  }
  uint64_t v64 = 0;
  memset(v63, 0, sizeof(v63));
  LODWORD(v58[0]) = 0;
  *(void *)&v62[0] = v58;
  sub_2345DA8E4(v63, v7, (_DWORD **)v62);
  memset(v62, 0, 40);
  LODWORD(v57[0]) = 0;
  *(void *)&v58[0] = v57;
  sub_2345DA8E4((unint64_t *)v62, v6, (_DWORD **)v58);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v11 = *(void *)v52;
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  sub_2345D7A70((uint64_t)v58, v11 + 1);
  uint64_t v12 = (long long *)(a1 + 72);
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      sub_2345D9D28(v52);
      unint64_t v15 = *(int *)(*(void *)(a1 + 64) + 4 * v13);
      int v16 = v60;
      sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
      *(_DWORD *)(v59 + 4 * v13) = v16;
      sub_2345D6724(v51, v15, a1 + 72, v14, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63, &v61, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v62, &v60, v17, v18, v19, v20, v21, v22);
      v14 += v15;
      ++v13;
    }
    while (v11 != v13);
  }
  int v23 = v60;
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
  *(_DWORD *)(v59 + 4 * v11) = v23;
  BOOL v24 = v61 == v7 && v60 == v6;
  uint64_t v25 = v24;
  if (v24)
  {
    sub_2345D75F8((void *)a1, v63);
    uint64_t v26 = *(void *)(a1 + 48);
    long long v27 = *(_OWORD *)v52;
    *(_OWORD *)uint64_t v52 = v62[0];
    *(void *)(a1 + 48) = *(void *)&v62[1];
    v62[0] = v27;
    *(void *)&v62[1] = v26;
    long long v28 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&v62[1] + 8);
    *(_OWORD *)((char *)&v62[1] + 8) = v28;
    memset(v57, 0, 40);
    sub_2345D7A70((uint64_t)v57, v63[0]);
    if (v63[0])
    {
      unint64_t v29 = 0;
      do
      {
        sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        uint64_t v30 = *(int *)(v64 + 4 * v29);
        sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 72));
        LODWORD(v30) = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v30);
        sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
        uint64_t v31 = *(void *)&v57[2];
        *(_DWORD *)(*(void *)&v57[2] + 4 * v29++) = v30;
      }
      while (v63[0] > v29);
    }
    else
    {
      uint64_t v31 = *(void *)&v57[2];
    }
    uint64_t v34 = *(void *)(a1 + 88);
    uint64_t v35 = *((void *)&v57[1] + 1);
    *(void *)(a1 + 88) = *(void *)&v57[1];
    long long v36 = *v12;
    *uint64_t v12 = v57[0];
    v57[0] = v36;
    *(void *)&v57[1] = v34;
    long long v37 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = v35;
    *(void *)(a1 + 104) = v31;
    *(_OWORD *)((char *)&v57[1] + 8) = v37;
    float32x4_t v39 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 112);
    unint64_t v38 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 120);
    while (v39 != v38)
    {
      uint64_t v56 = 0;
      long long v54 = 0u;
      long long v55 = 0u;
      if (*(void *)v39)
      {
        sub_2345D9D28(v39);
        long long v40 = (int *)*((void *)v39 + 4);
        sub_2345D9D28(v39);
        uint64_t v41 = *((void *)v39 + 4);
        uint64_t v42 = (int *)(v41 + 4 * *(void *)v39);
        if (v40 != v42)
        {
          do
          {
            uint64_t v43 = *v40;
            int v53 = 0;
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
            int v44 = *(_DWORD *)(v59 + 4 * v43);
            uint64_t v45 = (int)v43 + 1;
            while (1)
            {
              int v53 = v44;
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
              if (v44 >= *(_DWORD *)(v59 + 4 * v45)) {
                break;
              }
              sub_2345DADA8((uint64_t)&v54, &v53);
              int v44 = v53 + 1;
            }
            ++v40;
          }
          while (v40 != v42);
          uint64_t v41 = *((void *)v39 + 4);
        }
        unint64_t v46 = v55;
        *((void *)v39 + 4) = v56;
        uint64_t v56 = v41;
        long long v47 = *(_OWORD *)v39;
        *(_OWORD *)float32x4_t v39 = v54;
        uint64_t v48 = *((void *)v39 + 2);
        uint64_t v49 = *((void *)v39 + 3);
        *((_OWORD *)v39 + 1) = __PAIR128__(*((unint64_t *)&v55 + 1), v46);
        long long v54 = v47;
        *(void *)&long long v55 = v48;
        *((void *)&v55 + 1) = v49;
      }
      sub_2345D9DC0((uint64_t)&v54);
      float32x4_t v39 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v39 + 40);
    }
    sub_2345D9DC0((uint64_t)v57);
  }
  else
  {
    unint64_t v32 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v32)
    {
      uint64_t v33 = (const char *)(v32 + 16);
      if (*(char *)(v32 + 39) < 0) {
        uint64_t v33 = *(const char **)v33;
      }
    }
    else
    {
      uint64_t v33 = "";
    }
    NSLog(&cfstr_WarningTriangu.isa, v33);
  }
  sub_2345D9DC0((uint64_t)v58);
  sub_2345D9DC0((uint64_t)v62);
  sub_2345D9DC0((uint64_t)v63);
  return v25;
}

void sub_2345D8000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

std::type_info *sub_2345D8090(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345DAAAC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7625E8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345D811C(uint64_t *a1)
{
  if (sub_2345DAAAC((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345DAD64(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void *sub_2345D81C0(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    BOOL result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        BOOL result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_2345D8224(void *a1)
{
}

void sub_2345D8238()
{
}

void sub_2345D8250(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2345D82AC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264BF4780, MEMORY[0x263F8C060]);
}

void sub_2345D8298(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2345D82AC(std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *sub_2345D82E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2345D8328();
  }
  return operator new(24 * a2);
}

void sub_2345D8328()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void sub_2345D835C(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  uint64_t v12 = (long long *)&a2[-2].n128_i8[8];
  uint64_t v13 = (long long *)a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v13;
    uint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-2].n128_i8[8], v13))
          {
            unint64_t v32 = *((void *)v13 + 2);
            long long v30 = *v13;
            long long v28 = *v12;
            *((void *)v13 + 2) = a2[-1].n128_u64[1];
            *uint64_t v13 = v28;
            *uint64_t v12 = v30;
            a2[-1].n128_u64[1] = v32;
          }
          break;
        case 3uLL:
          sub_2345D8940(v13, (long long *)((char *)v13 + 24), (long long *)&a2[-2].n128_i8[8], a3);
          break;
        case 4uLL:
          sub_2345D8F60((uint64_t)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        case 5uLL:
          sub_2345D904C((__n128 *)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)v13 + 72, (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 575) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        sub_2345D9170((__n128 *)v13, a2, a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    float32x4_t v19 = (long long *)((char *)v13 + 24 * (v17 >> 1));
    if ((unint64_t)v16 >= 0xC01)
    {
      sub_2345D8940(v13, (long long *)((char *)v13 + 24 * (v17 >> 1)), (long long *)&a2[-2].n128_i8[8], a3);
      uint64_t v20 = 3 * v18;
      double v21 = (long long *)((char *)v13 + 24 * v18 - 24);
      sub_2345D8940((long long *)((char *)v13 + 24), v21, (long long *)&a2[-3], a3);
      float32x4_t v22 = v13 + 3;
      int v23 = (long long *)((char *)v13 + 8 * v20 + 24);
      sub_2345D8940(v22, v23, (long long *)&a2[-5].n128_i8[8], a3);
      sub_2345D8940(v21, v19, v23, a3);
      uint64_t v31 = *(void *)(a1 + 16);
      long long v29 = *(_OWORD *)a1;
      long long v24 = *v19;
      *(void *)(a1 + 16) = *((void *)v19 + 2);
      *(_OWORD *)a1 = v24;
      *((void *)v19 + 2) = v31;
      *float32x4_t v19 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_2345D8940((long long *)((char *)v13 + 24 * (v17 >> 1)), v13, (long long *)&a2[-2].n128_i8[8], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)(a1 - 24), (long long *)a1) & 1) == 0)
    {
      uint64_t v13 = sub_2345D8A90((long long *)a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v25 = sub_2345D8BF0((long long *)a1, (unint64_t)a2, (uint64_t (**)(char *, long long *))a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v27 = sub_2345D8D50(a1, v25, a3);
    uint64_t v13 = (long long *)(v25 + 24);
    if (sub_2345D8D50(v25 + 24, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v27)
    {
LABEL_16:
      sub_2345D835C(a1, v25, a3, -v15, a5 & 1);
      uint64_t v13 = (long long *)(v25 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_2345D8784((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else
  {
    sub_2345D8870((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
}

uint64_t sub_2345D8784(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        BOOL result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *(_OWORD *)v10;
          uint64_t v16 = *(void *)(v10 + 16);
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(void *)(v13 + 40) = *(void *)(v6 + v12 + 16);
            if (!v12) {
              break;
            }
            v12 -= 24;
            BOOL result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
        }
        uint64_t v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_2345D8870(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = result - 24;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        BOOL result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *(_OWORD *)v6;
          uint64_t v13 = *(void *)(v6 + 16);
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(void *)(v11 + 64) = *(void *)(v11 + 40);
            BOOL result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(void *)(v11 + 64) = v13;
        }
        uint64_t v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_2345D8940(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v16 = *((void *)a1 + 2);
    long long v17 = *a1;
    uint64_t v18 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v18;
    *a2 = v17;
    *((void *)a2 + 2) = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = *((void *)a1 + 2);
    long long v20 = *a1;
    uint64_t v21 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v21;
    *a2 = v20;
    *((void *)a2 + 2) = v19;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v22 = *((void *)a2 + 2);
    long long v23 = *a2;
    uint64_t v24 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v24;
    *a3 = v23;
    *((void *)a3 + 2) = v22;
    return 2;
  }
  uint64_t v10 = *((void *)a1 + 2);
  long long v11 = *a1;
  uint64_t v12 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v12;
  *a3 = v11;
  *((void *)a3 + 2) = v10;
  return 1;
}

long long *sub_2345D8A90(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v16 = *a1;
  uint64_t v17 = *((void *)a1 + 2);
  if ((*a3)(&v16, (long long *)((char *)a2 - 24)))
  {
    uint64_t v6 = a1;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (long long *)((char *)a1 + 24);
    do
    {
      uint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v16, v7);
      uint64_t v7 = (long long *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    long long v9 = *v6;
    uint64_t v19 = *((void *)v6 + 2);
    long long v18 = v9;
    long long v10 = *v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *uint64_t v6 = v10;
    long long v11 = v18;
    *((void *)v4 + 2) = v19;
    *uint64_t v4 = v11;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  uint64_t v12 = (long long *)((char *)v6 - 24);
  if ((long long *)((char *)v6 - 24) != a1)
  {
    long long v13 = *v12;
    *((void *)a1 + 2) = *((void *)v6 - 1);
    *a1 = v13;
  }
  long long v14 = v16;
  *((void *)v6 - 1) = v17;
  *uint64_t v12 = v14;
  return v6;
}

uint64_t sub_2345D8BF0(long long *a1, unint64_t a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  uint64_t v7 = (long long *)((char *)a1 + v6);
  uint64_t v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if ((unint64_t)v7 >= a2) {
        break;
      }
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if ((unint64_t)v7 < a2)
  {
    unint64_t v9 = a2;
    long long v10 = v7;
    do
    {
      long long v19 = *v10;
      long long v11 = v19;
      uint64_t v20 = *((void *)v10 + 2);
      uint64_t v12 = v20;
      uint64_t v13 = *(void *)(v9 + 16);
      *long long v10 = *(_OWORD *)v9;
      *((void *)v10 + 2) = v13;
      *(void *)(v9 + 16) = v12;
      *(_OWORD *)unint64_t v9 = v11;
      do
        long long v10 = (long long *)((char *)v10 + 24);
      while (((*a3)((char *)v10, &v17) & 1) != 0);
      do
        v9 -= 24;
      while (!(*a3)((char *)v9, &v17));
    }
    while ((unint64_t)v10 < v9);
    uint64_t v8 = (uint64_t)v10 - 24;
  }
  if ((long long *)v8 != a1)
  {
    long long v14 = *(_OWORD *)v8;
    *((void *)a1 + 2) = *(void *)(v8 + 16);
    *a1 = v14;
  }
  long long v15 = v17;
  *(void *)(v8 + 16) = v18;
  *(_OWORD *)uint64_t v8 = v15;
  return v8;
}

BOOL sub_2345D8D50(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *uint64_t v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_2345D8940((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_2345D8F60(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_2345D904C((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      sub_2345D8940((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_2345D8F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_2345D8940((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 sub_2345D904C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_2345D8F60((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *sub_2345D9170(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v7 = a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = sub_2345D93B8((uint64_t)a1, a4, v10, v13);
        uint64_t v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = a1[1].n128_u64[0];
          __n128 *v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = sub_2345D93B8((uint64_t)a1, a4, v10, a1);
        }
        long long v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      long long v29 = v14;
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        long long v30 = v7;
        uint64_t v20 = 0;
        __n128 v31 = *a1;
        unint64_t v32 = a1[1].n128_u64[0];
        uint64_t v21 = (uint64_t)a1;
        do
        {
          uint64_t v22 = v21 + 24 * v20 + 24;
          uint64_t v23 = (2 * v20) | 1;
          uint64_t v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            uint64_t v23 = v24;
          }
          long long v25 = *(_OWORD *)v22;
          *(void *)(v21 + 16) = *(void *)(v22 + 16);
          *(_OWORD *)uint64_t v21 = v25;
          uint64_t v21 = v22;
          uint64_t v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        uint64_t v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(void *)(v22 + 16) = v32;
          *(__n128 *)uint64_t v22 = v31;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)uint64_t v22 = v26;
          *uint64_t v7 = v31;
          v30[-1].n128_u64[1] = v32;
          sub_2345D9524((uint64_t)a1, v22 + 24, (uint64_t (**)(long long *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 sub_2345D93B8(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = (__n128 *)(a1 + 24 * v12);
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        uint64_t v13 = (__n128 *)((char *)v13 + 24);
        uint64_t v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        do
        {
          unint64_t v16 = v13;
          __n128 v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *uint64_t v7 = v17;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = (__n128 *)(a1 + 24 * v18);
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              uint64_t v13 = (__n128 *)((char *)v13 + 24);
              uint64_t v18 = v19;
            }
          }
          uint64_t v7 = v16;
          uint64_t v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }
  return result;
}

double sub_2345D9524(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 24 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 24);
    if ((*a3)(v10, (long long *)(a2 - 24)))
    {
      long long v15 = *v11;
      uint64_t v16 = *((void *)v11 + 2);
      do
      {
        uint64_t v13 = v10;
        long long v14 = *v10;
        *((void *)v11 + 2) = *((void *)v10 + 2);
        long long *v11 = v14;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 24 * v9);
        unint64_t v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      double result = *(double *)&v15;
      *uint64_t v13 = v15;
      *((void *)v13 + 2) = v16;
    }
  }
  return result;
}

uint64_t sub_2345D95F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_2345D9644(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_2345D8328();
  }
  return operator new(8 * a2);
}

float32x2_t *sub_2345D967C(void *a1, unint64_t *a2, __n128 a3)
{
  a3.n128_u64[0] = *a2;
  unint64_t v13 = *a2;
  unint64_t v4 = sub_2345D5C98(a3, 0.000001);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    float32x2_t v8 = (float32x2_t)v13;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
    float32x2_t v8 = (float32x2_t)v13;
  }
  i = *(float32x2_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (float32x2_t *)*i; i; i = (float32x2_t *)*i)
    {
      float32x2_t v10 = i[1];
      if (*(void *)&v10 == v4)
      {
        float32x2_t v11 = vsub_f32(i[2], v8);
        if (vaddv_f32(vmul_f32(v11, v11)) < 1.0e-12) {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (*(void *)&v10 >= *(void *)&v5) {
            *(void *)&v10 %= *(void *)&v5;
          }
        }
        else
        {
          *(void *)&v10 &= *(void *)&v5 - 1;
        }
        if (*(void *)&v10 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

float32x2_t *sub_2345D9784(uint64_t a1, unint64_t *a2, __n128 a3, uint64_t a4, float32x2_t **a5)
{
  a3.n128_u64[0] = *a2;
  unint64_t v27 = *a2;
  unint64_t v7 = sub_2345D5C98(a3, 0.000001);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v7;
      float32x2_t v12 = (float32x2_t)v27;
      if (v7 >= v9) {
        unint64_t v11 = v7 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & v7;
      float32x2_t v12 = (float32x2_t)v27;
    }
    unint64_t v13 = *(float32x2_t ***)(*(void *)a1 + 8 * v11);
    if (v13)
    {
      for (i = *v13; i; i = (float32x2_t *)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v7)
        {
          float32x2_t v16 = vsub_f32(i[2], v12);
          if (vaddv_f32(vmul_f32(v16, v16)) < 1.0e-12) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  i = (float32x2_t *)operator new(0x20uLL);
  float32x2_t *i = 0;
  i[1] = (float32x2_t)v8;
  i[2] = **a5;
  i[3].i32[0] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_2345D99E4(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v11 = v8 % v9;
      }
      else {
        unint64_t v11 = v8;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(float32x2_t ***)(*(void *)a1 + 8 * v11);
  if (v24)
  {
    float32x2_t *i = (float32x2_t)*v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }
  float32x2_t *i = *(float32x2_t *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v11) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (float32x2_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2345D99D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2345D99E4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_2345D9AD4(a1, prime);
    }
  }
}

void sub_2345D9AD4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_2345D8328();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_2345D9C30(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_2345D8328();
  }
  return operator new(16 * a2);
}

void *sub_2345D9C68(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_2345D9CE4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2345D9CC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2345D9CE4(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_2345D8238();
  }
  double result = (char *)sub_2345D9C30((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_2345D9D28(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_2345D9E40((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        uint8x8_t v9 = v6;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_2345D9DC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    unint64_t v3 = (void *)(a1 + 24);
    uint64_t v2 = *(atomic_ullong **)(a1 + 24);
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v4 = *(void (**)(void))(*v3 + 8);
        if (v4) {
          v4();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete((void *)(*(void *)(a1 + 32) - 16));
    }
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
}

void *sub_2345D9E40(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345D9ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345D9EE4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      int v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  return a1;
}

uint64_t sub_2345D9F38(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load(MEMORY[0x263F90520]);
  if (v2)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(void *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      int v3 = 2;
    }
    else
    {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

void sub_2345D9FAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2345D9FAC(a1, *a2);
    sub_2345D9FAC(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_2345DA000(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v6 = sub_2345DA08C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_2345DA234(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_2345DA08C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint8x8_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint8x8_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          float v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      float v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_2345DA234(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  double result = sub_2345DA28C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_2345DA28C(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unsigned __int8 v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint8x8_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint8x8_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint8x8_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            unsigned __int8 v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unsigned __int8 v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unsigned __int8 v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unsigned __int8 v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *int v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_2345DA424(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  sub_2345DA4A0((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *sub_2345DA4A0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_2345DA514(v6, a2);
  return v3;
}

uint64_t *sub_2345DA514(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        double result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    float v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      float v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      double result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  BOOL v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    float v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    BOOL v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_2345DA898(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1)) {
      sub_2345D9DC0((uint64_t)a1);
    }
    *a1 = 0;
  }
}

void sub_2345DA8E4(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2345D9E40((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_2345D9E40((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      uint64_t v16 = sub_2345D9E40((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t sub_2345DAAAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void *sub_2345DAAE4(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      sub_2345DABF4((uint64_t)&v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      a2[1] = 0;
      if (v9) {
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_2345DABDC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2345D8224(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2345DABF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    BOOL v4 = (~(_BYTE)v3 & 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
    }
  }
  return a1;
}

uint64_t sub_2345DAC58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_2345DACA8()
{
}

uint64_t sub_2345DAD08(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345DAD64(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345DADA8(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2345D9E40(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2345D9DC0(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_2345DB060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345DB090(void *a1, char *a2)
{
  BOOL v3 = a1;
  pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v3);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a2[23] < 0)
  {
    sub_2345DBA34(__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v8 = *((void *)a2 + 2);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = v9;
  if (v9)
  {
    uint64_t v5 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v6 = (std::__shared_weak_count *)v3[2];
    v3[1] = v4;
    v3[2] = v5;
    if (v6)
    {
      sub_2345DBAD4(v6);
      uint64_t v4 = v9;
    }
    v3[5] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else
  {
    if (a2[23] < 0) {
      a2 = *(char **)a2;
    }
    NSLog(&cfstr_WarningUnableT.isa, a2);
  }
  if (v10) {
    sub_2345DBAD4(v10);
  }
}

void sub_2345DB1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_2345DB2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2345DB49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  if (*(char *)(v21 - 41) < 0) {
    operator delete(*(void **)(v21 - 64));
  }

  _Unwind_Resume(a1);
}

id sub_2345DB554(id *a1)
{
  id result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_2345DBC38((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    BOOL v3 = (void *)pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return +[USKResource resourceWithPath:v5];
  }
  return result;
}

void sub_2345DB690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2345DB790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_2345DB968(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2345DBA1C();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    unint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_2345DBA1C()
{
}

void *sub_2345DBA34(unsigned char *__dst, void *__src, unint64_t a3)
{
  size_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2345DBA1C();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *size_t v5 = v8;
    size_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_2345DBAD4(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2345DBB48(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_2345DBB78(int a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this)
{
  if (!this) {
    return;
  }
  int v3 = *((_DWORD *)this + 2);
  if (v3 < 0)
  {
    if (v3 == -2)
    {
      uint64_t v5 = 4294967294;
    }
    else
    {
      uint64_t v5 = *((unsigned int *)this + 2);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)this + 2, (unsigned int *)&v5, v3 + 1, memory_order_release, memory_order_relaxed);
      if (v5 == v3)
      {
        if (v3 != -1) {
          return;
        }
        goto LABEL_4;
      }
    }
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(this, (const TfRefBase *)v5) & 1) == 0)return; {
    goto LABEL_4;
    }
  }
  if (atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xFFFFFFFF, memory_order_release) != 1) {
    return;
  }
LABEL_4:
  size_t v4 = *(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *))(*(void *)this + 8);
  v4(this);
}

unint64_t sub_2345DBC38(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      int v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 > result)
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result) {
            goto LABEL_10;
          }
        }
        id result = (unint64_t)v3;
      }
LABEL_10:
      ++result;
    }
  }
  return result;
}

uint64_t sub_2345DBC88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0(a1 + 16);
  return sub_2345DAC58(a1);
}

uint64_t sub_2345DBCF8(void *a1, __n128 *a2, uint64_t a3)
{
  v33[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  uint64_t v25 = a1 + 1;
  if (a1[2] == v4) {
    goto LABEL_9;
  }
  int v23 = a2;
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 1;
  char v8 = 1;
  do
  {
    MEMORY[0x237DC2530](v26, "normals");
    uint64_t v9 = *(void *)(v4 + 88 * v5 + 56);
    uint64_t v10 = (atomic_uint *)(v26[0] & 0xFFFFFFFFFFFFFFF8);
    if ((v26[0] & 7) != 0) {
      atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    v8 &= v11 != (void)v10;
    if ((atomic_uint *)v11 == v10) {
      unsigned int v6 = v7 - 1;
    }
    uint64_t v5 = v7;
    uint64_t v4 = a1[1];
  }
  while (0x2E8BA2E8BA2E8BA3 * ((a1[2] - v4) >> 3) > (unint64_t)v7++);
  a2 = v23;
  if (v8)
  {
LABEL_9:
    v33[0] = 0;
    v33[1] = 0;
    sub_2345DC114(v33, a2);
    sub_2345DDDA0(v26, v33);
    long long v13 = *(_OWORD *)(a3 + 16);
    long long v27 = *(_OWORD *)a3;
    long long v28 = v13;
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v29 = v14;
    if (v14)
    {
      uint64_t v15 = (atomic_ullong *)(v14 - 16);
      if (*((void *)&v28 + 1)) {
        uint64_t v15 = (atomic_ullong *)*((void *)&v28 + 1);
      }
      atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x237DC2530](v30, "normals");
    int v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v16) {
      int v16 = sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    v30[1] = *((void *)v16 + 77);
    MEMORY[0x237DC2530](&v31, "faceVarying");
    int v32 = 1;
    unint64_t v17 = a1[2];
    if (v17 >= a1[3])
    {
      uint64_t v18 = sub_2345DECA0(v25, (uint64_t)v26);
    }
    else
    {
      sub_2345DEC28((uint64_t)v25, (uint64_t)v26);
      uint64_t v18 = v17 + 88;
    }
    a1[2] = v18;
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v30[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_2345D9DC0((uint64_t)&v27);
    sub_2345DAC58((uint64_t)v26);
    return sub_2345DAC58((uint64_t)v33);
  }
  else
  {
    sub_2345DC114((uint64_t *)(v4 + 88 * v6), v23);
    sub_2345D7AE4(*v25 + 88 * v6 + 16, (long long *)a3);
    MEMORY[0x237DC2530](v26, "normals");
    uint64_t v20 = (void *)(*v25 + 88 * v6 + 56);
    if (v26 == v20)
    {
      if ((v26[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v20 = v26[0];
    }
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v21) {
      uint64_t v21 = sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    *(void *)(*v25 + 88 * v6 + 64) = *((void *)v21 + 77);
    uint64_t result = MEMORY[0x237DC2530](v26, "faceVarying");
    uint64_t v22 = (void *)(*v25 + 88 * v6 + 72);
    if (v26 == v22)
    {
      if ((v26[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v22 = v26[0];
    }
    *(_DWORD *)(*v25 + 88 * v6 + 80) = 1;
  }
  return result;
}

void sub_2345DC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0(v20);
  sub_2345DAC58((uint64_t)&a13);
  sub_2345DAC58(v21 - 104);
  _Unwind_Resume(a1);
}

__n128 sub_2345DC114(uint64_t *a1, __n128 *a2)
{
  if ((sub_2345DAAAC((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_2345DE29C((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_2345DEB3C(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2345DC1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2345DC1CC(uint64_t a1, int a2)
{
  uint64_t v58 = 0;
  memset(v57, 0, sizeof(v57));
  sub_2345D7A70((uint64_t)v57, *(unsigned int *)(a1 + 72));
  uint64_t v56 = 0;
  memset(v55, 0, sizeof(v55));
  uint64_t v4 = sub_2345D811C(*(uint64_t **)(a1 + 8));
  float v5 = 1.0;
  if (a2) {
    float v5 = -1.0;
  }
  float v52 = v5;
  unint64_t v6 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_43;
  }
  if (!atomic_load(v6)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_43:
    if (*(void *)(a1 + 32))
    {
      uint64_t v11 = 0;
      unsigned int v12 = 0;
      int v13 = 0;
      do
      {
        uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v11);
        if (v14)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(void *)(a1 + 104);
          uint64_t v17 = *(void *)(v4 + 32);
          v18.i64[0] = 0;
          v18.i32[2] = 0;
          float v19 = 1.0;
          do
          {
            unsigned int v20 = ((int)v14 - 1 + (int)v15) % v14 + v13;
            BOOL v21 = v14 - 1 == v15;
            uint64_t v22 = v17 + 12 * *(int *)(v16 + 4 * (v13 + v15));
            v9.i64[0] = *(void *)v22;
            v9.i32[2] = *(_DWORD *)(v22 + 8);
            ++v15;
            uint64_t v23 = v17 + 12 * *(int *)(v16 + 4 * v20);
            v8.i64[0] = *(void *)v23;
            v8.i32[2] = *(_DWORD *)(v23 + 8);
            if (v21) {
              int v24 = 0;
            }
            else {
              int v24 = v15;
            }
            float32x4_t v25 = vsubq_f32(v8, v9);
            float32x4_t v26 = vmulq_f32(v25, v25);
            float v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
            float32x4_t v8 = 0uLL;
            if (v27 > COERCE_FLOAT(512))
            {
              float v28 = v27;
              float32x2_t v29 = vrsqrte_f32((float32x2_t)LODWORD(v27));
              float32x2_t v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)LODWORD(v28), vmul_f32(v29, v29)));
              float32x4_t v8 = vmulq_n_f32(v25, vmul_f32(v30, vrsqrts_f32((float32x2_t)LODWORD(v28), vmul_f32(v30, v30))).f32[0]);
            }
            uint64_t v31 = v17 + 12 * *(int *)(v16 + 4 * (v24 + v13));
            v25.i64[0] = *(void *)v31;
            v25.i32[2] = *(_DWORD *)(v31 + 8);
            float32x4_t v32 = vsubq_f32(v25, v9);
            float32x4_t v33 = vmulq_f32(v32, v32);
            float v34 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0];
            float32x4_t v35 = 0uLL;
            if (v34 > COERCE_FLOAT(512))
            {
              float v36 = v34;
              float32x2_t v37 = vrsqrte_f32((float32x2_t)LODWORD(v34));
              float32x2_t v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v37, v37)));
              float32x4_t v35 = vmulq_n_f32(v32, vmul_f32(v38, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v38, v38))).f32[0]);
            }
            float32x4_t v39 = vmulq_f32(v8, v8);
            float32x4_t v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)));
            if (sqrtf(v9.f32[0]) != 0.0)
            {
              float32x4_t v40 = vmulq_f32(v35, v35);
              BOOL v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]) == 0.0;
              float32x4_t v41 = vmulq_f32(v8, v35);
              float32x4_t v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)));
              v9.f32[0] = fabsf(v9.f32[0]);
              if (!v21 && v9.f32[0] < v19)
              {
                int32x4_t v43 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v35)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL));
                float32x4_t v44 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), (int8x16_t)v43, 0xCuLL), v52);
                float32x4_t v18 = vmulq_f32(v44, v44);
                float32x4_t v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)));
                v18.i64[0] = 0;
                v18.i32[2] = 0;
                if (v8.f32[0] > COERCE_FLOAT(512))
                {
                  unsigned __int32 v45 = v8.i32[0];
                  float32x2_t v46 = vrsqrte_f32((float32x2_t)v8.u32[0]);
                  float32x2_t v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45, vmul_f32(v46, v46)));
                  float32x4_t v18 = vmulq_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45, vmul_f32(v47, v47))).f32[0]);
                }
                float v19 = v9.f32[0];
              }
            }
          }
          while (v14 != v15);
        }
        else
        {
          v18.i64[0] = 0;
          v18.i32[2] = 0;
        }
        uint64_t v53 = v18.i64[0];
        __int32 v54 = v18.i32[2];
        sub_2345DF2A4((uint64_t)v55, &v53);
        uint64_t v48 = v14;
        unsigned int v49 = v13;
        if (v14)
        {
          do
          {
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
            *(_DWORD *)(v58 + 4 * v49++) = v12;
            --v48;
          }
          while (v48);
        }
        v13 += v14;
        uint64_t v11 = ++v12;
      }
      while (*(void *)(a1 + 32) > (unint64_t)v12);
    }
    sub_2345DBCF8((void *)a1, v55, (uint64_t)v57);
  }
  else
  {
    unint64_t v50 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v50)
    {
      uint64_t v51 = (const char *)(v50 + 16);
      if (*(char *)(v50 + 39) < 0) {
        uint64_t v51 = *(const char **)v51;
      }
    }
    else
    {
      uint64_t v51 = "";
    }
    printf("Mesh %s does contain valid position data. Skipping normal computation.\n", v51);
  }
  sub_2345D9DC0((uint64_t)v55);
  sub_2345D9DC0((uint64_t)v57);
}

void sub_2345DC5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2345DC5D4(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 8) + 32);
}

uint64_t sub_2345DC5E4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (*(void *)(v2 + 32) <= (unint64_t)a2) {
    sub_234637660();
  }
  return *(unsigned int *)(*(void *)(v2 + 64) + 4 * a2);
}

float sub_2345DC61C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v6 = *(void *)(sub_2345D811C(*(uint64_t **)(v5 + 8)) + 32)
     + 12 * *(int *)(*(void *)(v5 + 104) + 4 * (3 * a3 + a4));
  *(_DWORD *)a2 = *(_DWORD *)v6;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v6 + 4);
  float result = *(float *)(v6 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2345DC690(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(result + 8);
  unsigned int v6 = *(_DWORD *)(v5 + 4);
  if (v6 == -1)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return result;
  }
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = sub_2345D811C((uint64_t *)(*(void *)(v9 + 8) + 88 * v6));
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = v11 + 88 * v6;
  uint64_t v13 = *(void *)(v12 + 72);
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  float result = MEMORY[0x237DC2530](&v25, "faceVarying");
  int v14 = 3 * a3;
  uint64_t v15 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = (v14 + a4);
  float32x4_t v18 = (void *)(v12 + 16);
  if (v15 == v16)
  {
    if (!*v18)
    {
      int v24 = (_DWORD *)(*(void *)(v10 + 32) + 12 * v17);
      goto LABEL_29;
    }
    LODWORD(v23) = *(_DWORD *)(*(void *)(v11 + 88 * v6 + 48) + 4 * v17);
    goto LABEL_25;
  }
  float result = MEMORY[0x237DC2530](&v25, "vertex");
  float v19 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v19)
  {
    unint64_t v23 = *(int *)(*(void *)(v9 + 104) + 4 * v17);
    if (!*v18) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float result = MEMORY[0x237DC2530](&v25, "uniform");
  unsigned int v20 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v20)
  {
    unint64_t v23 = v17 / 3uLL;
    if (!*v18)
    {
      int v24 = (_DWORD *)(*(void *)(v10 + 32) + 12 * v23);
      goto LABEL_29;
    }
LABEL_24:
    LODWORD(v23) = *(_DWORD *)(*(void *)(v11 + 88 * v6 + 48) + 4 * v23);
LABEL_25:
    int v24 = (_DWORD *)(*(void *)(v10 + 32) + 12 * (int)v23);
    goto LABEL_29;
  }
  float result = MEMORY[0x237DC2530](&v25, "constant");
  BOOL v21 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 != v21)
  {
    *(void *)a2 = 0;
    int v22 = 0;
    goto LABEL_30;
  }
  int v24 = *(_DWORD **)(v10 + 32);
LABEL_29:
  *(_DWORD *)a2 = *v24;
  *(_DWORD *)(a2 + 4) = v24[1];
  int v22 = v24[2];
LABEL_30:
  *(_DWORD *)(a2 + 8) = v22;
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2345DC8CC(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2345DC8F0(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(unsigned int **)(result + 8);
  unsigned int v6 = *v5;
  if (*v5 == -1)
  {
    *(void *)a2 = 0;
    return result;
  }
  uint64_t v9 = *((void *)v5 + 1);
  uint64_t v10 = sub_2345DCB24((uint64_t *)(*(void *)(v9 + 8) + 88 * v6));
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = v11 + 88 * v6;
  uint64_t v13 = *(void *)(v12 + 72);
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  float result = MEMORY[0x237DC2530](&v25, "faceVarying");
  int v14 = 3 * a3;
  uint64_t v15 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = (v14 + a4);
  float32x4_t v18 = (void *)(v12 + 16);
  if (v15 == v16)
  {
    if (!*v18)
    {
      int v24 = (_DWORD *)(*(void *)(v10 + 32) + 8 * v17);
      goto LABEL_26;
    }
    unint64_t v23 = *(int *)(*(void *)(v11 + 88 * v6 + 48) + 4 * v17);
    goto LABEL_25;
  }
  float result = MEMORY[0x237DC2530](&v25, "vertex");
  float v19 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v19)
  {
    unint64_t v23 = *(int *)(*(void *)(v9 + 104) + 4 * v17);
    goto LABEL_23;
  }
  float result = MEMORY[0x237DC2530](&v25, "uniform");
  unsigned int v20 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v20)
  {
    unint64_t v23 = v17 / 3uLL;
LABEL_23:
    if (*v18) {
      unint64_t v23 = *(int *)(*(void *)(v11 + 88 * v6 + 48) + 4 * v23);
    }
LABEL_25:
    int v24 = (_DWORD *)(*(void *)(v10 + 32) + 8 * v23);
    goto LABEL_26;
  }
  float result = MEMORY[0x237DC2530](&v25, "constant");
  BOOL v21 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 != v21)
  {
    *(_DWORD *)a2 = 0;
    int v22 = 0;
    goto LABEL_27;
  }
  int v24 = *(_DWORD **)(v10 + 32);
LABEL_26:
  *(_DWORD *)a2 = *v24;
  int v22 = v24[1];
LABEL_27:
  *(_DWORD *)(a2 + 4) = v22;
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2345DCB00(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2345DCB24(uint64_t *a1)
{
  if (sub_2345DF4E8((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345DF5DC(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void sub_2345DCBC8(uint64_t a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = 3 * a3 + a4;
  int v9 = *a2;
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(void *)(v7 + 48) + 16 * v8) = v9;
  int v10 = a2[1];
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(void *)(v7 + 48) + 16 * v8 + 4) = v10;
  int v11 = a2[2];
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(void *)(v7 + 48) + 16 * v8 + 8) = v11;
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(float *)(*(void *)(v7 + 48) + 16 * v8 + 12) = a5;
}

void sub_2345DCC68(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6)
{
  int v9 = *(void **)(a1 + 8);
  uint64_t v10 = (3 * a5 + a6);
  int v11 = *a2;
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10) = v11;
  int v12 = a2[1];
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 4) = v12;
  int v13 = a2[2];
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 8) = v13;
  if (a4) {
    float v14 = 1.0;
  }
  else {
    float v14 = -1.0;
  }
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(float *)(v9[6] + 16 * v10 + 12) = v14;
  int v15 = *a3;
  sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  uint64_t v16 = v10 + 2 * v10;
  *(_DWORD *)(v9[11] + 4 * v16) = v15;
  int v17 = a3[1];
  sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 4) = v17;
  int v18 = a3[2];
  sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 8) = v18;
}

uint64_t sub_2345DCD78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = -1;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) == v5)
  {
    if (*(_DWORD *)(a1 + 4) != -1)
    {
LABEL_51:
      unint64_t v25 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v25)
      {
        float32x4_t v26 = (const char *)(v25 + 16);
        if (*(char *)(v25 + 39) < 0) {
          float32x4_t v26 = *(const char **)v26;
        }
      }
      else
      {
        float32x4_t v26 = "";
      }
      NSLog(&cfstr_MeshSDoesNotCo_0.isa, v26);
      return 0;
    }
LABEL_54:
    unint64_t v27 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v27)
    {
      float v28 = (const char *)(v27 + 16);
      if (*(char *)(v27 + 39) < 0) {
        float v28 = *(const char **)v28;
      }
    }
    else
    {
      float v28 = "";
    }
    NSLog(&cfstr_MeshSDoesNotCo.isa, v28);
    return 0;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  int v9 = -1;
  do
  {
    uint64_t v10 = v5 + 88 * v7;
    MEMORY[0x237DC2530](&v29, "normals");
    uint64_t v11 = v29;
    if ((*(void *)(v10 + 56) & 0xFFFFFFFFFFFFFFF8) == (v29 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v13 = 1;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      MEMORY[0x237DC2530](&v32, "primvars:normals");
      BOOL v13 = (*(void *)(v12 + 88 * v7 + 56) & 0xFFFFFFFFFFFFFFF8) == (v32 & 0xFFFFFFFFFFFFFFF8);
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v11 = v29;
    }
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v13)
    {
      *(_DWORD *)(a1 + 4) = v8;
      goto LABEL_32;
    }
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      if (!atomic_load(MEMORY[0x263F90560])) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_32;
      }
    }
    if (v9 == -1) {
      int v9 = v8;
    }
    uint64_t v16 = *(void *)(a2 + 8) + 88 * v7;
    MEMORY[0x237DC2540](&v29, a3);
    int v17 = (atomic_uint *)(*(void *)(v16 + 56) & 0xFFFFFFFFFFFFFFF8);
    if (v17 == (atomic_uint *)(v29 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
      }
LABEL_31:
      *(_DWORD *)a1 = v8;
      goto LABEL_32;
    }
    if (*((char *)a3 + 23) < 0)
    {
      if (a3[1])
      {
LABEL_23:
        char v18 = 0;
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)a3 + 23))
    {
      goto LABEL_23;
    }
    char v18 = 1;
LABEL_28:
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v18) {
      goto LABEL_31;
    }
LABEL_32:
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v7 = ++v8;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((*(void *)(a2 + 16) - v5) >> 3) > (unint64_t)v8);
  int v19 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == -1 && v9 != -1)
  {
    unint64_t v20 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      BOOL v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0) {
        BOOL v21 = *(const char **)v21;
      }
    }
    else
    {
      BOOL v21 = "";
    }
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    NSLog(&cfstr_WarningMeshSUn.isa, v21, a3);
    *(_DWORD *)a1 = v9;
    int v19 = v9;
  }
  if (*(_DWORD *)(a1 + 4) == -1) {
    goto LABEL_54;
  }
  if (v19 == -1) {
    goto LABEL_51;
  }
  sub_2345DD190((uint64_t)&v29, *(unsigned int *)(a2 + 72));
  if ((long long *)(a1 + 16) != &v29)
  {
    sub_2345D9DC0(a1 + 16);
    long long v22 = v30;
    *(_OWORD *)(a1 + 16) = v29;
    *(_OWORD *)(a1 + 32) = v22;
    long long v29 = 0u;
    long long v30 = 0u;
    *(void *)(a1 + 48) = v31;
    uint64_t v31 = 0;
  }
  sub_2345D9DC0((uint64_t)&v29);
  sub_2345DD204((uint64_t)&v29, *(unsigned int *)(a2 + 72));
  if ((long long *)(a1 + 56) != &v29)
  {
    sub_2345D9DC0(a1 + 56);
    long long v23 = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 72) = v23;
    long long v29 = 0u;
    long long v30 = 0u;
    *(void *)(a1 + 88) = v31;
    uint64_t v31 = 0;
  }
  sub_2345D9DC0((uint64_t)&v29);
  *(void *)(a1 + 8) = a2;
  return 1;
}

void sub_2345DD13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2345D9DC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345DD190(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2345DA898((void *)a1);
  unsigned int v6 = v5;
  sub_2345DF800((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345DD1EC(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2345DD204(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = 0;
  uint64_t v5 = 0;
  sub_2345DA898((void *)a1);
  uint64_t v7 = &v5;
  sub_2345DF9C8((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_2345DD264(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345DD27C(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = a2[1];
  id v48 = v9;
  unsigned int v49 = a2 + 1;
  if (a2[2] == v10)
  {
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
  }
  else
  {
    float32x2_t v46 = a1;
    uint64_t v11 = 0;
    int v12 = -1;
    unsigned int v13 = 1;
    do
    {
      id v14 = v8;
      uint64_t v18 = objc_msgSend_UTF8String(v14, v15, v16, v17);
      MEMORY[0x237DC2530](v53, v18);
      uint64_t v19 = *(void *)(v10 + 88 * v11 + 56);
      unint64_t v20 = (atomic_uint *)(v53[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v53[0] & 7) != 0) {
        atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v19 & 0xFFFFFFFFFFFFFFF8) == v20) {
        int v12 = v13 - 1;
      }
      uint64_t v11 = v13;
      uint64_t v10 = a2[1];
    }
    while (0x2E8BA2E8BA2E8BA3 * ((a2[2] - v10) >> 3) > (unint64_t)v13++);
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    a1 = v46;
    if (v12 != -1)
    {
      sub_2345DD6C8((void *)(v10 + 88 * v12), v46);
      sub_2345D7AE4(*v49 + 88 * v12 + 16, &v50);
      id v22 = v14;
      uint64_t v26 = objc_msgSend_UTF8String(v22, v23, v24, v25);
      MEMORY[0x237DC2530](v53, v26);
      unint64_t v27 = (void *)(*v49 + 88 * v12 + 56);
      if (v53 == v27)
      {
        if ((v53[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v53[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *unint64_t v27 = v53[0];
      }
      *(void *)(*v49 + 88 * v12 + 64) = a5;
      id v40 = v48;
      uint64_t v44 = objc_msgSend_UTF8String(v40, v41, v42, v43);
      MEMORY[0x237DC2530](v53, v44);
      unsigned __int32 v45 = (void *)(*v49 + 88 * v12 + 72);
      if (v53 == v45)
      {
        if ((v53[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v53[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v45 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        void *v45 = v53[0];
      }
      *(_DWORD *)(*v49 + 88 * v12 + 80) = 1;
      goto LABEL_31;
    }
  }
  sub_2345DDDA0(v53, a1);
  v54[0] = v50;
  v54[1] = v51;
  uint64_t v55 = v52;
  id v28 = v8;
  uint64_t v32 = objc_msgSend_UTF8String(v28, v29, v30, v31);
  MEMORY[0x237DC2530](v56, v32);
  v56[1] = a5;
  id v33 = v48;
  uint64_t v37 = objc_msgSend_UTF8String(v33, v34, v35, v36);
  MEMORY[0x237DC2530](&v57, v37);
  int v58 = 1;
  unint64_t v38 = a2[2];
  if (v38 >= a2[3])
  {
    uint64_t v39 = sub_2345DECA0(v49, (uint64_t)v53);
  }
  else
  {
    sub_2345DEC28((uint64_t)v49, (uint64_t)v53);
    uint64_t v39 = v38 + 88;
  }
  a2[2] = v39;
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v56[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0((uint64_t)v54);
  sub_2345DAC58((uint64_t)v53);
LABEL_31:
  sub_2345D9DC0((uint64_t)&v50);
}

void sub_2345DD628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2345D9DC0((uint64_t)va);

  _Unwind_Resume(a1);
}

void *sub_2345DD6C8(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1[1])
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_2345DABF4((uint64_t)&v14, (uint64_t)&v12);
    uint64_t v4 = a1[1];
    int v5 = ~*((_DWORD *)a1 + 2);
    uint64_t v13 = v4;
    if ((v5 & 3) != 0) {
      (*(void (**)(void *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a1, &v12);
    }
    else {
      uint64_t v12 = *a1;
    }
    a1[1] = 0;
    if (v15) {
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
    }
    int v6 = a2 + 1;
    if (!a2[1])
    {
      uint64_t v8 = a1[1];
      if (v8 && (a1[1] & 3) != 3) {
        (*(void (**)(void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
      goto LABEL_19;
    }
  }
  else
  {
    int v6 = a2 + 1;
    if (!a2[1]) {
      return a1;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_2345DABF4((uint64_t)&v14, (uint64_t)a1);
  uint64_t v7 = *v6;
  a1[1] = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0) {
    (*(void (**)(void *, void *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
  }
  else {
    *a1 = *a2;
  }
  *int v6 = 0;
  if (v15) {
    (*(void (**)(uint64_t *))(v15 + 32))(&v14);
  }
LABEL_19:
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_2345DABF4((uint64_t)&v14, (uint64_t)a2);
    uint64_t v9 = v13;
    char v10 = ~(_BYTE)v13;
    *int v6 = v13;
    if ((v10 & 3) != 0) {
      (*(void (**)(uint64_t *, void *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    }
    else {
      *a2 = v12;
    }
    uint64_t v13 = 0;
    if (v15) {
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
    }
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3) {
      (*(void (**)(void *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    }
    *int v6 = 0;
  }
  sub_2345DAC58((uint64_t)&v12);
  return a1;
}

void sub_2345DD8D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2345D8224(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2345DD920(void *a1, int a2, uint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2345DBA34(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v25 = *(void *)(a3 + 16);
  }
  int v7 = sub_2345DCD78((uint64_t)&v26, (uint64_t)a1, (uint64_t *)__p);
  int v8 = v7;
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_30;
    }
  }
  else if (!v7)
  {
    goto LABEL_30;
  }
  *(void *)&long long v28 = sub_2345DC5D4;
  *((void *)&v28 + 1) = sub_2345DC5E4;
  *(void *)&long long v29 = sub_2345DC61C;
  *((void *)&v29 + 1) = sub_2345DC690;
  *(void *)&long long v30 = sub_2345DC8F0;
  if (a2) {
    uint64_t v9 = sub_2345DCBC8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a2) {
    char v10 = 0;
  }
  else {
    char v10 = sub_2345DCC68;
  }
  *((void *)&v30 + 1) = v9;
  uint64_t v31 = v10;
  v23[0] = &v28;
  v23[1] = &v26;
  float v11 = 3.1416;
  if (a4 <= 3.1416) {
    float v11 = a4;
  }
  if (v11 < 0.0) {
    float v11 = 0.0;
  }
  if (sub_234624298((uint64_t)v23, v11) == 1)
  {
    if (a2)
    {
      id v33 = &off_26E7626E0;
      sub_2345DEAC0();
    }
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    sub_2345DD204((uint64_t)v21, *(unint64_t *)&v27[0]);
    if (*(void *)&v27[0])
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27);
        int v17 = *(_DWORD *)(*(void *)&v27[2] + v15);
        sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27);
        int v18 = *(_DWORD *)(*(void *)&v27[2] + v15 + 4);
        sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27);
        int v19 = *(_DWORD *)(*(void *)&v27[2] + v15 + 8);
        sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
        unint64_t v20 = (_DWORD *)(v22 + v14);
        *unint64_t v20 = v17;
        v20[1] = v18;
        v20[2] = v19;
        ++v16;
        v15 += 16;
        v14 += 12;
      }
      while (*(void *)&v27[0] > v16);
    }
    uint64_t v32 = &off_26E762600;
    sub_2345DEAC0();
  }
  unint64_t v12 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    uint64_t v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
  }
  else
  {
    uint64_t v13 = "";
  }
  NSLog(&cfstr_FailedToGenera.isa, v13);
LABEL_30:
  sub_2345D9DC0((uint64_t)&v27[2] + 8);
  sub_2345D9DC0((uint64_t)v27);
}

void sub_2345DDCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  sub_2345DAC58(v26 - 136);
  sub_2345D9DC0((uint64_t)&a11);
  sub_2345DDD64((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_2345DDD64(uint64_t a1)
{
  return a1;
}

void *sub_2345DDDA0(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_2345DABF4((uint64_t)&v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    if (v7) {
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
    }
  }
  return a1;
}

void sub_2345DDE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2345DDEA0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)*a1;
  *a1 += 4;
  return MEMORY[0x270F987A8](a2, v3);
}

void *sub_2345DDEB8(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x237DC3160](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      char v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_2345DE060(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x237DC3170](v13);
  return a1;
}

void sub_2345DDFF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x237DC3170](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2345DDFD8);
}

void sub_2345DE04C(_Unwind_Exception *a1)
{
}

uint64_t sub_2345DE060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      sub_2345DE1F0(__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_2345DE1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2345DE1F0(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_2345DBA1C();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_2345DE29C(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_2345DABF4((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26E762600;
  sub_2345DEAC0();
}

void sub_2345DE334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2345DE370(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345DE390(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345DE638(a1);
}

uint64_t sub_2345DE3A0(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345DE3BC(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)sub_2345DAD64(a1);
  return sub_2345DE6A0((uint64_t)&v3, v1);
}

BOOL sub_2345DE3E8(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345DAD64(a1);
  uint64_t v4 = sub_2345DAD64(a2);
  return sub_2345DE848(v3, v4);
}

BOOL sub_2345DE430(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345DAD64(a1);
  return sub_2345DE848(v3, a2);
}

uint64_t sub_2345DE46C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345DE48C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_2345DE4E4(uint64_t *a1)
{
  return &unk_26E7625E8;
}

uint64_t sub_2345DE504(uint64_t *a1)
{
  return 1;
}

void *sub_2345DE520(uint64_t *a1)
{
  return &unk_26E7626B8;
}

uint64_t sub_2345DE544(uint64_t *a1)
{
  return *(void *)sub_2345DAD64(a1);
}

BOOL sub_2345DE560(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345DE5A4(uint64_t *a1)
{
  sub_2345DAD64(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E7625E8, v1);
}

void *sub_2345DE5CC(uint64_t *a1)
{
  return &unk_26E7625E8;
}

void sub_2345DE5F0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345DAD64(a1);
  *(void *)(a2 + 8) = &off_26E762600;
  sub_2345DEAC0();
}

uint64_t *sub_2345DE638(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345DE6A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (float *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      sub_2345DE718((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345DE718(uint64_t a1, float *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_2345DE798((uint64_t)v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2345DE798(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4 = *a2;
  if (*a2 == 0.0) {
    float v4 = 0.0;
  }
  unint64_t v5 = LODWORD(v4);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v5 = ((*(void *)a1 + LODWORD(v4) + (*(void *)a1 + LODWORD(v4)) * (*(void *)a1 + (unint64_t)LODWORD(v4))) >> 1)
  }
       + LODWORD(v4);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2345DE7E4(a1, a3, a4);
}

uint64_t sub_2345DE7E4(uint64_t result, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  unint64_t v4 = LODWORD(v3);
  if (*(unsigned char *)(result + 8)) {
    unint64_t v4 = ((*(void *)result
  }
         + LODWORD(v3)
         + (*(void *)result + LODWORD(v3)) * (*(void *)result + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v4;
  float v5 = *a3;
  if (*a3 == 0.0) {
    float v5 = 0.0;
  }
  *(void *)uint64_t result = LODWORD(v5) + ((v4 + LODWORD(v5) + (v4 + LODWORD(v5)) * (v4 + LODWORD(v5))) >> 1);
  return result;
}

BOOL sub_2345DE848(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  float v5 = (float *)a1[4];
  uint64_t v6 = &v5[3 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

BOOL sub_2345DE910(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unint64_t v4 = (const void *)(a1 + 8);
  int v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12)) {
      int v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    }
    else {
      int v7 = 2;
    }
  }
  else
  {
    int v7 = 1;
  }
  size_t v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12)) {
      int v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    }
    else {
      int v9 = 2;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 != v9) {
    return 0;
  }
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      BOOL v10 = *(_DWORD *)(a1 + 16) == 0;
      uint64_t v11 = 3;
      if (!v10) {
        uint64_t v11 = 4;
      }
    }
    else
    {
      uint64_t v11 = 2;
    }
  }
  else
  {
    uint64_t v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t sub_2345DE9F0(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345DAD64(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345DAD64(a1);
}

uint64_t sub_2345DEAA8(void *a1, uint64_t a2)
{
  *a1 += 12;
  return MEMORY[0x270FA3F48](a2);
}

void sub_2345DEAC0()
{
}

uint64_t sub_2345DEB3C(uint64_t *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345DE9F0(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_2345DEBD0(atomic_ullong *a1)
{
  BOOL result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x237DC2300]();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
      MEMORY[0x237DC3290]();
    }
    return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

double sub_2345DEC28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_2345DEE00(*(void **)(a1 + 8), (void *)a2);
  long long v5 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 2) = v5;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v4[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  v4[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  v4[8] = *(void *)(a2 + 64);
  v4[9] = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *((_DWORD *)v4 + 20) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 8) = v4 + 11;
  return result;
}

uint64_t sub_2345DECA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_2345D8238();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_2345DEF58(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = &v10[88 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[88 * v9];
  sub_2345DEE00(v11, (void *)a2);
  long long v12 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v11 + 2) = v12;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *((_DWORD *)v11 + 20) = *(_DWORD *)(a2 + 80);
  v15[2] = v11 + 88;
  sub_2345DEEE0(a1, v15);
  uint64_t v13 = a1[1];
  sub_2345DF228(v15);
  return v13;
}

void sub_2345DEDEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DF228((void **)va);
  _Unwind_Resume(a1);
}

void *sub_2345DEE00(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_2345DABF4((uint64_t)&v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    a2[1] = 0;
    if (v7) {
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
    }
  }
  return a1;
}

void sub_2345DEEC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2345D8224(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2345DEEE0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2345DEFA4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2345DEF58(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_2345D8328();
  }
  return operator new(88 * a2);
}

uint64_t sub_2345DEFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  uint64_t v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 88;
      sub_2345DF06C(a1, (void *)(v7 - 88), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 88;
      *((void *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_2345DF12C((uint64_t)v13);
  return v11;
}

void sub_2345DF058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2345DF06C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_2345DDDA0(a2, (void *)a3);
  long long v5 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)result + 2) = v5;
  uint64_t v6 = *(void *)(a3 + 48);
  result[6] = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (result[5]) {
      uint64_t v7 = (atomic_ullong *)result[5];
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a3 + 56);
  result[7] = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[7] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[8] = *(void *)(a3 + 64);
  uint64_t v9 = *(void *)(a3 + 72);
  result[9] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[9] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 80);
  return result;
}

uint64_t sub_2345DF12C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2345DF164((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2345DF164(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_2345DF1B8(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_2345DF1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 72);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a2 + 56);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0(a2 + 16);
  return sub_2345DAC58(a2);
}

void **sub_2345DF228(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_2345DF25C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 88;
      uint64_t result = sub_2345DF1B8(v4, v1 - 88);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_2345DF2A4(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v10 = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v11 = *(uint64_t **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    uint64_t v14 = sub_2345DF43C(a1, v13);
    long long v15 = v14;
    if (v4)
    {
      uint64_t v16 = 12 * v4;
      int v17 = v14;
      do
      {
        uint64_t v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *int v17 = v18;
        int v17 = (void *)((char *)v17 + 12);
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    uint64_t v19 = *a2;
    unint64_t v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v20 = v19;
    sub_2345D9DC0(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void *sub_2345DF43C(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x1555555555555553) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 12 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345DF4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345DF4E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_2345DF520()
{
}

uint64_t sub_2345DF580(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345DF5DC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345DF620(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      unint64_t v6 = sub_2345DF6B8((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        uint64_t v9 = v6;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345DF6B8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345DF740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2345DF758(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      unint64_t v6 = sub_2345DF43C((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 12 * v5;
        uint64_t v9 = v6;
        do
        {
          uint64_t v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *uint64_t v9 = v10;
          uint64_t v9 = (void *)((char *)v9 + 12);
          uint64_t v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_2345DF800(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2345DF6B8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      unint64_t v20 = sub_2345DF6B8((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        uint64_t v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      uint64_t v16 = sub_2345DF6B8((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

void sub_2345DF9C8(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2345DF43C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = (char *)v10 + v11;
                  uint64_t v13 = *(void *)(v9 + v11);
                  *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                  *(void *)uint64_t v12 = v13;
                  v11 += 12;
                }
                while (12 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 12 * v3;
            do
            {
              uint64_t v16 = (char *)v7 + v15;
              uint64_t v17 = *v14;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
              *(void *)uint64_t v16 = v17;
              v15 += 12;
            }
            while (12 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_2345DF43C((uint64_t)a1, a2);
      uint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 12 * v24;
        unint64_t v27 = v25;
        do
        {
          uint64_t v28 = *v7;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
          *unint64_t v27 = v28;
          unint64_t v27 = (void *)((char *)v27 + 12);
          uint64_t v7 = (void *)((char *)v7 + 12);
          v26 -= 12;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        long long v29 = *a3;
        uint64_t v30 = 12 * v3;
        do
        {
          uint64_t v31 = (char *)v25 + v30;
          uint64_t v32 = *v29;
          *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
          *(void *)uint64_t v31 = v32;
          v30 += 12;
        }
        while (12 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x1555555555555556)
    {
      unint64_t v19 = sub_2345DF43C((uint64_t)a1, a2);
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = (char *)v19 + v20;
        uint64_t v23 = *v21;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
        *(void *)uint64_t v22 = v23;
        v20 += 12;
      }
      while (12 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345DFBF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345DFC14(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345DFEBC(a1);
}

uint64_t sub_2345DFC24(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345DFC40(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)sub_2345DFF24(a1);
  return sub_2345DFF68((uint64_t)&v3, v1);
}

BOOL sub_2345DFC6C(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345DFF24(a1);
  uint64_t v4 = sub_2345DFF24(a2);
  return sub_2345E00B4(v3, v4);
}

BOOL sub_2345DFCB4(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345DFF24(a1);
  return sub_2345E00B4(v3, a2);
}

uint64_t sub_2345DFCF0(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345DFD10(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_2345DFD68(uint64_t *a1)
{
  return &unk_26E762798;
}

uint64_t sub_2345DFD88(uint64_t *a1)
{
  return 1;
}

void *sub_2345DFDA4(uint64_t *a1)
{
  return &unk_26E7627B0;
}

uint64_t sub_2345DFDC8(uint64_t *a1)
{
  return *(void *)sub_2345DFF24(a1);
}

BOOL sub_2345DFDE4(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345DFE28(uint64_t *a1)
{
  sub_2345DFF24(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E762798, v1);
}

void *sub_2345DFE50(uint64_t *a1)
{
  return &unk_26E762798;
}

void sub_2345DFE74(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345DFF24(a1);
  *(void *)(a2 + 8) = &off_26E7626E0;
  sub_2345DEAC0();
}

uint64_t *sub_2345DFEBC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

uint64_t sub_2345DFF24(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

unint64_t sub_2345DFF68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (float *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 4;
      sub_2345DFFE0((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345DFFE0(uint64_t a1, float *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_2345E0064((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2345E0064(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5 = *a2;
  if (*a2 == 0.0) {
    float v5 = 0.0;
  }
  unint64_t v6 = LODWORD(v5);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v6 = ((*(void *)a1 + LODWORD(v5) + (*(void *)a1 + LODWORD(v5)) * (*(void *)a1 + (unint64_t)LODWORD(v5))) >> 1)
  }
       + LODWORD(v5);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return sub_2345DE798(a1, a3, a4, a5);
}

BOOL sub_2345E00B4(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  float v5 = (float *)a1[4];
  unint64_t v6 = &v5[4 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2345E0188(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345DFF24(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345DFF24(a1);
}

uint64_t sub_2345E0240(void *a1, uint64_t a2)
{
  *a1 += 16;
  return MEMORY[0x270FA3F68](a2);
}

void sub_2345E02D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E03C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E0460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E0640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void *sub_2345E0670(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      sub_2345DABF4((uint64_t)&v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      if (v9) {
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_2345E0764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345E08AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_2345E09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_2345E0B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_2345E0D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2345E0D64(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EC3A0((uint64_t)a1))
  {
    uint64_t v4 = (void *)sub_2345EC3D8((uint64_t)a1);
    sub_2345EC46C(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627C0, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v8 = sub_2345EC4C0((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (void *)sub_2345EC3D8((uint64_t)&v11);
        sub_2345EC46C(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E0E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E11A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  *(void *)(v16 - 56) = &__p;
  sub_2345EC2C4((void ***)(v16 - 56));
  sub_2345E1614((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E11F4(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  BOOL v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2345E14A4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x237DC3250](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E14CC(uint64_t *a1)
{
  if (sub_2345EC5D8((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EC794(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345E1570(uint64_t *a1)
{
  if (sub_2345EC7D8((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EC90C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345E1614(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x237DC3250](a1 + 128);
  return a1;
}

void sub_2345E17F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E1810(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345EC950((uint64_t)a1))
  {
    *a2 = *(void *)sub_2345EC9D4((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627F0, v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ECA68((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(void *)sub_2345EC9D4((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E18EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E198C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E19A8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unsigned char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ECB68((uint64_t)a1))
  {
    *a2 = *(unsigned char *)sub_2345ECB9C((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C230], v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ECC30((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(unsigned char *)sub_2345ECB9C((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E1A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E1B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E1B40(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ECD30((uint64_t)a1))
  {
    *a2 = *(_DWORD *)sub_2345ECD68((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C258], v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ECDFC((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(_DWORD *)sub_2345ECD68((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E1C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E1CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E1CD8(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ECEFC((uint64_t)a1))
  {
    *a2 = *(_DWORD *)sub_2345ECF34((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C260], v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ECFC8((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(_DWORD *)sub_2345ECF34((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E1DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E1E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E1E74(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ED0C8((uint64_t)a1))
  {
    *a2 = *(_DWORD *)sub_2345ED100((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C248], v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ED194((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(_DWORD *)sub_2345ED100((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E1F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E1FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E2014(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ED294((uint64_t)a1))
  {
    *a2 = *(void *)sub_2345ED2CC((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762800, v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ED360((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(void *)sub_2345ED2CC((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E20F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E21A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E21BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (sub_2345ED3EC((uint64_t)a1))
  {
    uint64_t v4 = sub_2345ED424(a1);
    int v5 = *(_DWORD *)(v4 + 8);
    *(void *)a2 = *(void *)v4;
    *(_DWORD *)(a2 + 8) = v5;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7626B8, v8))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v9 = sub_2345ED4C8((uint64_t)a1);
      sub_2345DDDA0(&v13, v9);
      BOOL v6 = v14 != 0;
      if (v14)
      {
        uint64_t v10 = sub_2345ED424(&v13);
        uint64_t v11 = *(void *)v10;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(v10 + 8);
        *(void *)a2 = v11;
      }
      sub_2345DAC58((uint64_t)&v13);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2345E22A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E2350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E236C(uint64_t *a1, _OWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ED598((uint64_t)a1))
  {
    *a2 = *(_OWORD *)sub_2345ED5D0(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627B0, v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = sub_2345ED674((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(_OWORD *)sub_2345ED5D0(&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E2448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E255C(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E2578(uint64_t *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (sub_2345ED744((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345ED77C(a1);
    long long v5 = v4[3];
    long long v7 = *v4;
    long long v6 = v4[1];
    a2[2] = v4[2];
    a2[3] = v5;
    *a2 = v7;
    a2[1] = v6;
    long long v8 = v4[7];
    long long v10 = v4[4];
    long long v9 = v4[5];
    a2[6] = v4[6];
    a2[7] = v8;
    a2[4] = v10;
    a2[5] = v9;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762810, v13))
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v14 = sub_2345ED820((uint64_t)a1);
      sub_2345DDDA0(&v23, v14);
      BOOL v11 = v24 != 0;
      if (v24)
      {
        uint64_t v15 = (long long *)sub_2345ED77C(&v23);
        long long v16 = *v15;
        long long v17 = v15[1];
        long long v18 = v15[3];
        a2[2] = v15[2];
        a2[3] = v18;
        *a2 = v16;
        a2[1] = v17;
        long long v19 = v15[4];
        long long v20 = v15[5];
        long long v21 = v15[7];
        a2[6] = v15[6];
        a2[7] = v21;
        a2[4] = v19;
        a2[5] = v20;
      }
      sub_2345DAC58((uint64_t)&v23);
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void sub_2345E2684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E2728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E2744(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345ED8F0((uint64_t)a1))
  {
    *a2 = *(void *)sub_2345ED928((uint64_t)a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C240], v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v7 = sub_2345ED9BC((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(void *)sub_2345ED928((uint64_t)&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E2820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E28C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E28E4(uint64_t *a1, _OWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345EDABC((uint64_t)a1))
  {
    *a2 = *(_OWORD *)sub_2345EDAF4(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762820, v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v7 = sub_2345EDB98((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(_OWORD *)sub_2345EDAF4(&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E29C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E2A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E2AAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (sub_2345EDC68((uint64_t)a1))
  {
    uint64_t v4 = sub_2345EDCA0(a1);
    uint64_t v5 = *(void *)(v4 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = v5;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762830, v8))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v9 = sub_2345EDD44((uint64_t)a1);
      sub_2345DDDA0(&v13, v9);
      BOOL v6 = v14 != 0;
      if (v14)
      {
        uint64_t v10 = sub_2345EDCA0(&v13);
        long long v11 = *(_OWORD *)v10;
        *(void *)(a2 + 16) = *(void *)(v10 + 16);
        *(_OWORD *)a2 = v11;
      }
      sub_2345DAC58((uint64_t)&v13);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2345E2B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E2C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E2C74(uint64_t *a1, _OWORD *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (sub_2345EDE14((uint64_t)a1))
  {
    uint64_t v4 = (_OWORD *)sub_2345EDE4C(a1);
    long long v5 = v4[1];
    *a2 = *v4;
    a2[1] = v5;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762840, v8))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v9 = sub_2345EDEF0((uint64_t)a1);
      sub_2345DDDA0(&v13, v9);
      BOOL v6 = v14 != 0;
      if (v14)
      {
        uint64_t v10 = (_OWORD *)sub_2345EDE4C(&v13);
        long long v11 = v10[1];
        *a2 = *v10;
        a2[1] = v11;
      }
      sub_2345DAC58((uint64_t)&v13);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2345E2D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E2E64(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1 - 40);
  _Unwind_Resume(a1);
}

void sub_2345E2F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E2F28(uint64_t *a1, _OWORD *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (sub_2345EDFC0((uint64_t)a1))
  {
    *a2 = *(_OWORD *)sub_2345EDFF8(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762850, v6))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v7 = sub_2345EE09C((uint64_t)a1);
      sub_2345DDDA0(&v9, v7);
      BOOL v4 = v10 != 0;
      if (v10) {
        *a2 = *(_OWORD *)sub_2345EDFF8(&v9);
      }
      sub_2345DAC58((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2345E3004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E3144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2345E318C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EE16C((uint64_t)a1))
  {
    BOOL v4 = (_DWORD *)sub_2345EE1F0((uint64_t)a1);
    sub_2345EE430(a2, v4);
    sub_2345EE488(a2 + 4, v4 + 1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762860, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EE284((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (_DWORD *)sub_2345EE1F0((uint64_t)&v11);
        sub_2345EE430(a2, v9);
        sub_2345EE488(a2 + 4, v9 + 1);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E3298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E32B4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10(a1);
}

void sub_2345E341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2345E357C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E3454(uint64_t *a1, std::string *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EC5D8((uint64_t)a1))
  {
    BOOL v4 = (const std::string *)sub_2345E14CC(a1);
    std::string::operator=(a2, v4);
    std::string::operator=(a2 + 1, v4 + 1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627D0, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EE4D4((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (const std::string *)sub_2345E14CC(&v11);
        std::string::operator=(a2, v9);
        std::string::operator=(a2 + 1, v9 + 1);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E3560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_2345E357C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2345E3720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2345E357C((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_2345E3870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E38C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EE560((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345EE598(a1);
    sub_2345D7AE4(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762870, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EE63C((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345EE598(&v11);
        sub_2345D7AE4(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E39A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E3AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E3B14(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EE7C8((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345EE800(a1);
    sub_2345EE8A4(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762888, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EE958((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345EE800(&v11);
        sub_2345EE8A4(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E3BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E3CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E3D30(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EEAE4((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345EEB1C(a1);
    sub_2345EEBC0(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7628A0, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EEC74((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345EEB1C(&v11);
        sub_2345EEBC0(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E3E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E3F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2345E3F34(uint64_t *a1)
{
  if (sub_2345EEF38((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EF02C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void sub_2345E40F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2345E4134(uint64_t *a1)
{
  if (sub_2345EF070((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EF164(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void sub_2345E4310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E44C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2345E4510(uint64_t *a1)
{
  if (sub_2345EF1A8((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EF2E8(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void sub_2345E46B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E4704(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EF32C((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345EF364(a1);
    sub_2345EF408(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762900, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EF4BC((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345EF364(&v11);
        sub_2345EF408(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E47E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E48E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E4920(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345DF4E8((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345DCB24(a1);
    sub_2345EF648(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7626C8, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EF6FC((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345DCB24(&v11);
        sub_2345EF648(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E4A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E4B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E4B48(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345DAAAC((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345D811C(a1);
    sub_2345EF8C4(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7625E8, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345D8090((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345D811C(&v11);
        sub_2345EF8C4(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E4C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E4D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E4D64(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EF978((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345EF9B0(a1);
    sub_2345EFA54(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762798, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EFB08((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345EF9B0(&v11);
        sub_2345EFA54(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E4E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E4F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E4FD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345EFC50((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345EFC88(a1);
    sub_2345EFD2C(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762918, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345EFDE0((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345EFC88(&v11);
        sub_2345EFD2C(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E50B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E51CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E5220(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345F00C4((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345F00FC(a1);
    sub_2345F01A0(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762930, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345F0254((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345F00FC(&v11);
        sub_2345F01A0(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E5304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E53FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E543C(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345F03E0((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345F0418(a1);
    sub_2345F04BC(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762948, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345F0570((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345F0418(&v11);
        sub_2345F04BC(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E5520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E562C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E566C(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345F0834((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345F086C(a1);
    sub_2345F0910(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762960, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345F09C4((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345F086C(&v11);
        sub_2345F0910(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E5750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E5860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E58A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (sub_2345F0CA4((uint64_t)a1))
  {
    BOOL v4 = (long long *)sub_2345F0CDC(a1);
    sub_2345F0D80(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762978, v7))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v8 = sub_2345F0E34((uint64_t)a1);
      sub_2345DDDA0(&v11, v8);
      BOOL v5 = v12 != 0;
      if (v12)
      {
        uint64_t v9 = (long long *)sub_2345F0CDC(&v11);
        sub_2345F0D80(a2, v9);
      }
      sub_2345DAC58((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2345E5984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_2345E5AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345E5D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E5F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_2345DAC58((uint64_t)&a24);
  sub_2345E357C((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2345E6088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E630C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E6430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_2345DAC58(v16 - 40);
  sub_2345E357C((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2345E6568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_2345DAC58(v17 - 40);
  sub_2345E357C((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_2345E662C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E66B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E68CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6C58(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1 - 40);
  _Unwind_Resume(a1);
}

void sub_2345E6D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2345E6DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345E6F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E6F44(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2345DA898((void *)a1);
  BOOL v6 = &v5;
  sub_2345F5524((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E6FA0(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E7080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E70C4(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2345DA898((void *)a1);
  BOOL v6 = &v5;
  sub_2345F5C58((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_2345E711C(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E762C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2345E77BC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  sub_2345F63FC((void *)a1);
  long long v7 = __p;
  sub_2345F6484((unint64_t *)a1, a2, (long long **)&v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_2345E782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2345F662C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E7854(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2345F6FA8((void *)a1);
  uint64_t v6 = &v5;
  sub_2345F702C((uint64_t *)a1, a2, &v6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_2345E78C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345F724C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E78F8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  sub_2345F7964((void *)a1);
  uint64_t v6 = &v5;
  sub_2345F79EC((unint64_t *)a1, a2, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v5);
  return a1;
}

void sub_2345E7990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2345E32B4((uint64_t)&a9);
  sub_2345F7B80(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2345E79B0(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v5);
  sub_2345F8368((void *)a1);
  uint64_t v9 = v5;
  sub_2345F8404((unint64_t *)a1, a2, (long long **)&v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return a1;
}

void sub_2345E7A34(_Unwind_Exception *a1)
{
  sub_2345F85B8(v1);
  _Unwind_Resume(a1);
}

void sub_2345E7BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345E7E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345E7F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E7F98(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2345DA898((void *)a1);
  char v6 = &v5;
  sub_2345F8FF0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E7FF4(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E80EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E8134(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2345DA898((void *)a1);
  char v6 = &v5;
  sub_2345F985C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E8190(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E829C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345E83C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345E84D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E8518(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2345DA898((void *)a1);
  char v6 = &v5;
  sub_2345F9FB0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E8574(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E86B4(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2345DA898((void *)a1);
  char v6 = v5;
  sub_2345FA7A0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E8710(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E8864(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2345DA898((void *)a1);
  char v6 = (long long *)v5;
  sub_2345FAEF4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E88C4(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E89CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E8A14(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2345DA898((void *)a1);
  char v6 = v5;
  sub_2345FB6E0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E8A70(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E8BC0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

uint64_t sub_2345E8C08(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2345DA898((void *)a1);
  char v6 = v5;
  sub_2345FBE8C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2345E8C70(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_2345E8DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E8EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E8FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E90BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E91A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E928C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E93C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E9538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_2345E357C((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2345E96D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2345E357C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_2345E97EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E98D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E99EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E9B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E9BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E9D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E9E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345E9F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345EA0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345EA1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345EA314(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345EA470(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345EA5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EA7A8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2345D8224(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2345EA9CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2345D8224(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2345EAC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345EADE8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345EAF5C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EB0F4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EB26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EB3CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345EB540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EB6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EB86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EBA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_2345EBB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_2345EBBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 == 0) == (v3 == 0);
  }
  if (v2 == v3) {
    return (*(uint64_t (**)(void))((v2 & 0xFFFFFFFFFFFFFFF8) + 64))();
  }
  return MEMORY[0x270FA4FA0]();
}

_DWORD *sub_2345EBC84(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()+ 8), 1u, memory_order_relaxed);
  }
  return a1;
}

_DWORD *sub_2345EBCD0(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  }
  return a1;
}

uint64_t sub_2345EBD10(uint64_t a1)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = (atomic_uint *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    if ((atomic_fetch_add(Ptr + 2, 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
      sub_2345EBD64((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)Ptr);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Sdf_PathNode *sub_2345EBD64(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *result)
{
  switch(*((unsigned char *)result + 14))
  {
    case 0:
      uint64_t v1 = sub_2345EBE38(result);
      goto LABEL_5;
    case 1:
      uint64_t v1 = (uint64_t *)MEMORY[0x237DC2150]();
      goto LABEL_5;
    case 2:
      uint64_t v1 = (uint64_t *)MEMORY[0x237DC23C0]();
LABEL_5:
      return (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)MEMORY[0x270FA37B0](v1);
    case 3:
      uint64_t v2 = MEMORY[0x237DC2340]();
      goto LABEL_14;
    case 4:
      uint64_t v2 = MEMORY[0x237DC2240]();
      goto LABEL_14;
    case 5:
      uint64_t v2 = MEMORY[0x237DC2230]();
      goto LABEL_14;
    case 6:
      uint64_t v2 = MEMORY[0x237DC2400]();
      goto LABEL_14;
    case 7:
      uint64_t v2 = MEMORY[0x237DC22B0]();
      goto LABEL_14;
    case 8:
      uint64_t v2 = MEMORY[0x237DC22F0]();
LABEL_14:
      BOOL result = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)MEMORY[0x270FA37B8](v2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_2345EBE38(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0) {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(this);
  }
  return sub_2345EBE80((uint64_t *)this);
}

uint64_t *sub_2345EBE80(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
    sub_2345EBD64();
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_2345EBECC(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v7[2] = *MEMORY[0x263EF8340];
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
  if (strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*((void *)a2 + 1) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v7, a2, (const std::type_info *)a1, v5);
    sub_2345DAAE4(a1, v7);
    sub_2345DAC58((uint64_t)v7);
  }
  return a1;
}

uint64_t sub_2345EBF68(uint64_t a1, int *a2)
{
  int v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
  sub_2345EBD10((uint64_t)&v4);
  return a1;
}

uint64_t sub_2345EBFC0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

_DWORD *sub_2345EC01C(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

_DWORD *sub_2345EC058(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

void *sub_2345EC094(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    sub_2345EC11C(result, a4);
    BOOL result = sub_2345EC160((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2345EC0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2345EC2C4(&a9);
  _Unwind_Resume(a1);
}

char *sub_2345EC11C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_2345D8238();
  }
  BOOL result = (char *)sub_2345D9644((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_DWORD *sub_2345EC160(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      sub_2345EBC84(v4, v6);
      sub_2345EBCD0(v4 + 1, v6 + 1);
      v6 += 2;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  sub_2345EC1F8((uint64_t)v8);
  return v4;
}

uint64_t sub_2345EC1F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2345EC230((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2345EC230(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 8;
      BOOL result = (uint64_t *)sub_2345EC284(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_2345EC284(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10(a2);
}

void sub_2345EC2C4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_2345EC284((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2345EC35C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EC3A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EC3D8(uint64_t a1)
{
  if (sub_2345EC3A0(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void *sub_2345EC46C(void *result, void *a2)
{
  if (a2 != result)
  {
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t result = *a2;
  }
  return result;
}

std::type_info *sub_2345EC4C0(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EC3A0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7627C0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EC54C()
{
}

void *sub_2345EC5A4(void *result)
{
  if (result)
  {
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EC5D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E7627D0);
}

void sub_2345EC660()
{
}

void sub_2345EC6B4()
{
}

void sub_2345EC704(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t sub_2345EC728(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 47) < 0) {
      operator delete(*(void **)(result + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EC794(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EC7D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E7627E0);
}

void sub_2345EC85C()
{
}

void **sub_2345EC8B8(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result;
    sub_2345EC2C4(&v2);
    return (void **)MEMORY[0x237DC3290](v1, 0x20C40960023A9);
  }
  return result;
}

uint64_t sub_2345EC90C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EC950(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E7627F0);
}

uint64_t sub_2345EC9D4(uint64_t a1)
{
  if (sub_2345EC950(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ECA68(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EC950(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7627F0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345ECAF4()
{
}

uint64_t sub_2345ECB4C(uint64_t result)
{
  if (result) {
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345ECB68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16)) {
    return 1;
  }
  if ((v1 & 4) == 0) {
    return 0;
  }
  return MEMORY[0x270FA4F90]();
}

uint64_t sub_2345ECB9C(uint64_t a1)
{
  if (sub_2345ECB68(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ECC30(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ECB68(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C230], v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345ECCBC()
{
}

uint64_t sub_2345ECD14(uint64_t result)
{
  if (result) {
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345ECD30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 5) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ECD68(uint64_t a1)
{
  if (sub_2345ECD30(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ECDFC(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ECD30(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C258], v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345ECE88()
{
}

uint64_t sub_2345ECEE0(uint64_t result)
{
  if (result) {
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345ECEFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 6) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ECF34(uint64_t a1)
{
  if (sub_2345ECEFC(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ECFC8(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ECEFC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C260], v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345ED054()
{
}

uint64_t sub_2345ED0AC(uint64_t result)
{
  if (result) {
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345ED0C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ED100(uint64_t a1)
{
  if (sub_2345ED0C8(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ED194(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ED0C8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C248], v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345ED220()
{
}

uint64_t sub_2345ED278(uint64_t result)
{
  if (result) {
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345ED294(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ED2CC(uint64_t a1)
{
  if (sub_2345ED294(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ED360(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ED294(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762800, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345ED3EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ED424(uint64_t *a1)
{
  if (sub_2345ED3EC((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345ED554(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ED4C8(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ED3EC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7626B8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345ED554(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345ED598(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ED5D0(uint64_t *a1)
{
  if (sub_2345ED598((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345ED700(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ED674(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ED598(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7627B0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345ED700(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345ED744(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ED77C(uint64_t *a1)
{
  if (sub_2345ED744((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345ED8AC(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ED820(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ED744(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762810, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345ED8AC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345ED8F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345ED928(uint64_t a1)
{
  if (sub_2345ED8F0(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345ED9BC(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345ED8F0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C240], v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EDA48()
{
}

uint64_t sub_2345EDAA0(uint64_t result)
{
  if (result) {
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EDABC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EDAF4(uint64_t *a1)
{
  if (sub_2345EDABC((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EDC24(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345EDB98(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EDABC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762820, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345EDC24(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EDC68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EDCA0(uint64_t *a1)
{
  if (sub_2345EDC68((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EDDD0(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345EDD44(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EDC68(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762830, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345EDDD0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EDE14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EDE4C(uint64_t *a1)
{
  if (sub_2345EDE14((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EDF7C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345EDEF0(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EDE14(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762840, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345EDF7C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EDFC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EDFF8(uint64_t *a1)
{
  if (sub_2345EDFC0((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EE128(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345EE09C(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EDFC0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762850, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345EE128(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EE16C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E762860);
}

uint64_t sub_2345EE1F0(uint64_t a1)
{
  if (sub_2345EE16C(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345EE284(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EE16C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762860, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EE314()
{
}

void sub_2345EE368()
{
}

uint64_t sub_2345EE3CC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10(v1);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EE430(uint64_t a1, _DWORD *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==() & 1) == 0)
  {
    sub_2345EBC84(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    sub_2345EBD10((uint64_t)&v5);
  }
  return a1;
}

uint64_t sub_2345EE488(uint64_t a1, _DWORD *a2)
{
  sub_2345EBCD0(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

std::type_info *sub_2345EE4D4(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EC5D8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7627D0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2345EE560(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EE598(uint64_t *a1)
{
  if (sub_2345EE560((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EE784(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_2345EE63C(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EE560(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762870, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EE6C8()
{
}

uint64_t sub_2345EE728(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EE784(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EE7C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EE800(uint64_t *a1)
{
  if (sub_2345EE7C8((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EEAA0(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345EE8A4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EE93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345EE958(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EE7C8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762888, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EE9E4()
{
}

uint64_t sub_2345EEA44(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EEAA0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EEAE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EEB1C(uint64_t *a1)
{
  if (sub_2345EEAE4((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EEDBC(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345EEBC0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EEC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345EEC74(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EEAE4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7628A0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EED00()
{
}

uint64_t sub_2345EED60(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EEDBC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345EEE00(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_2345EEE98((uint64_t)this, *(void *)this);
      long long v7 = v6;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        long long v9 = v6;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345EEE98(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345EEF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345EEF38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 59) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_2345EEF70()
{
}

void *sub_2345EEFD0(void *result)
{
  if (result)
  {
    sub_2345F662C(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EF02C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EF070(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_2345EF0A8()
{
}

void *sub_2345EF108(void *result)
{
  if (result)
  {
    sub_2345F724C(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EF164(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EF1A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E7628E8);
}

void sub_2345EF22C()
{
}

void *sub_2345EF28C(void *result)
{
  if (result)
  {
    sub_2345F85B8(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EF2E8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EF32C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EF364(uint64_t *a1)
{
  if (sub_2345EF32C((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EF604(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345EF408(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EF4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345EF4BC(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EF32C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762900, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EF548()
{
}

uint64_t sub_2345EF5A8(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EF604(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345EF648(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345EF6FC(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345DF4E8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E7626C8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EF788(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_2345EF820((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        long long v9 = v6;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345EF820(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345EF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345EF8C4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EF95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345EF978(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EF9B0(uint64_t *a1)
{
  if (sub_2345EF978((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345DFF24(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345EFA54(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EFAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345EFB08(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EF978(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762798, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EFB94()
{
}

uint64_t sub_2345EFBF4(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EFC50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345EFC88(uint64_t *a1)
{
  if (sub_2345EFC50((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345EFF28(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345EFD2C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345EFDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345EFDE0(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345EFC50(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762918, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345EFE6C()
{
}

uint64_t sub_2345EFECC(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345EFF28(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345EFF6C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_2345F0024((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = v5 << 7;
        long long v9 = v6;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          long long v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *long long v9 = v10;
          v9[1] = v11;
          long long v13 = v4[4];
          long long v14 = v4[5];
          long long v15 = v4[7];
          v9[6] = v4[6];
          v9[7] = v15;
          v9[4] = v13;
          v9[5] = v14;
          v4 += 8;
          v9 += 8;
          v8 -= 128;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345F0024(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 >> 57) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 7) | 0x10;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F00AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345F00C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345F00FC(uint64_t *a1)
{
  if (sub_2345F00C4((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345F039C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345F01A0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345F0238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345F0254(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345F00C4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762930, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345F02E0()
{
}

uint64_t sub_2345F0340(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345F039C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

uint64_t sub_2345F03E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 25) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345F0418(uint64_t *a1)
{
  if (sub_2345F03E0((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345F06B8(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345F04BC(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345F0554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345F0570(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345F03E0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762948, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345F05FC()
{
}

uint64_t sub_2345F065C(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345F06B8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345F06FC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2d]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_2345F0794((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        long long v9 = v6;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345F0794(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345F0834(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345F086C(uint64_t *a1)
{
  if (sub_2345F0834((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345F0B0C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345F0910(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345F09A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345F09C4(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345F0834(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762960, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345F0A50()
{
}

uint64_t sub_2345F0AB0(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345F0B0C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345F0B50(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_2345F0BF8((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 24 * v5;
        long long v9 = v6;
        do
        {
          long long v10 = *v4;
          v9[2] = *((void *)v4 + 2);
          *(_OWORD *)long long v9 = v10;
          v9 += 3;
          uint64_t v4 = (long long *)((char *)v4 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345F0BF8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F0C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345F0CA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 23) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_2345F0CDC(uint64_t *a1)
{
  if (sub_2345F0CA4((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345F0F7C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

uint64_t sub_2345F0D80(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2345D9DC0(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2345D9DC0((uint64_t)&v8);
  }
  return a1;
}

void sub_2345F0E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::type_info *sub_2345F0E34(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_2345F0CA4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762978, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_2345F0EC0()
{
}

uint64_t sub_2345F0F20(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_2345F0F7C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_2345F0FC0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4d]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_2345F1058((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 32 * v5;
        long long v9 = v6;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          v4 += 2;
          *long long v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_2345F1058(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F10E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2345F10F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *sub_2345F1128(void *result)
{
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2345F1144(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F1154()
{
  return 1;
}

unint64_t sub_2345F115C(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_2345F1180(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_2345F119C(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_2345F11BC()
{
  return 0;
}

uint64_t sub_2345F11C8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F88](a2, a1);
}

void *sub_2345F11D8()
{
  return &unk_26E7627C0;
}

uint64_t sub_2345F11E4()
{
  return 0;
}

uint64_t sub_2345F11EC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F11F8()
{
  return 0;
}

uint64_t sub_2345F1200()
{
  return 0;
}

BOOL sub_2345F1208(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F123C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7627C0, a2);
}

void *sub_2345F1260()
{
  return &unk_26E7627C0;
}

atomic_uint **sub_2345F1270@<X0>(atomic_uint **result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  a2[1] = (atomic_uint *)((char *)&off_26E762990 + 1);
  if ((v2 & 7) != 0)
  {
    size_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

void sub_2345F12A4(uint64_t a1, char **a2)
{
  sub_2345DB968(&__p, *a2);
  *(void *)(a1 + 8) = &off_26E762A48;
  sub_2345F185C();
}

void sub_2345F1300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2345F131C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F133C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F1630(a1);
}

uint64_t sub_2345F134C(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F1368(uint64_t *a1)
{
  uint64_t v1 = sub_2345F169C(a1);
  v4[0] = 0;
  v4[1] = 0;
  if (*(char *)(v1 + 23) >= 0) {
    uint64_t v2 = (const char *)v1;
  }
  else {
    uint64_t v2 = *(const char **)v1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4[0]);
}

BOOL sub_2345F13C8(uint64_t *a1, uint64_t *a2)
{
  size_t v3 = (unsigned __int8 *)sub_2345F169C(a1);
  uint64_t v4 = (unsigned __int8 *)sub_2345F169C(a2);
  return sub_2345F16E0(v3, v4);
}

BOOL sub_2345F1410(uint64_t *a1, unsigned __int8 *a2)
{
  size_t v3 = (unsigned __int8 *)sub_2345F169C(a1);
  return sub_2345F16E0(v3, a2);
}

uint64_t sub_2345F144C(uint64_t *a1)
{
  return 0;
}

void *sub_2345F146C(uint64_t *a1, void *a2)
{
  uint64_t v3 = sub_2345F169C(a1);
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  return sub_2345DDEB8(a2, v5, v6);
}

void *sub_2345F14BC(uint64_t *a1)
{
  return &unk_26E762B00;
}

uint64_t sub_2345F14DC(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F14F8(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F1518(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F1534(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F1550(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000023463B2A3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F159C(uint64_t *a1)
{
  sub_2345F169C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E762B00, v1);
}

void *sub_2345F15C4(uint64_t *a1)
{
  return &unk_26E762B00;
}

void sub_2345F15E8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345F169C(a1);
  *(void *)(a2 + 8) = &off_26E762A48;
  sub_2345F185C();
}

uint64_t *sub_2345F1630(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x237DC3290](v2, 0x1012C405C87E9CELL);
  }
  return a1;
}

uint64_t sub_2345F169C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

BOOL sub_2345F16E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_2345F1784(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345F169C(a1) + 24));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345F169C(a1);
}

void sub_2345F1838(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_2345F185C()
{
}

void sub_2345F18E0(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

_DWORD *sub_2345F1904(_DWORD *a1, _DWORD *a2)
{
  sub_2345EBC84(a2, a1);
  return sub_2345EBCD0(a2 + 1, a1 + 1);
}

uint64_t sub_2345F194C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10(a1);
}

uint64_t sub_2345F198C(_DWORD *a1, _DWORD *a2)
{
  sub_2345EC01C(a2, a1);
  sub_2345EC058(a2 + 1, a1 + 1);
  return sub_2345F194C((uint64_t)a1);
}

uint64_t sub_2345F19DC()
{
  return 1;
}

unint64_t sub_2345F19E4(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1)));
}

BOOL sub_2345F1A10(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F1A24(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F1A3C()
{
  return 0;
}

uint64_t sub_2345F1A48(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F80](a2, a1);
}

void *sub_2345F1A58()
{
  return &unk_26E762860;
}

uint64_t sub_2345F1A64()
{
  return 0;
}

uint64_t sub_2345F1A6C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F1A78()
{
  return 0;
}

uint64_t sub_2345F1A80()
{
  return 0;
}

BOOL sub_2345F1A88(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F1ABC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762860, a2);
}

void *sub_2345F1AE0()
{
  return &unk_26E762860;
}

_DWORD *sub_2345F1AF0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E762B10 + 1;
  uint64_t v3 = sub_2345EBC84((_DWORD *)a2, a1) + 1;
  return sub_2345EBCD0(v3, a1 + 1);
}

uint64_t *sub_2345F1B44(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F1B64(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F1E34(a1);
}

uint64_t sub_2345F1B74(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F1B90(uint64_t *a1)
{
  uint64_t v1 = (const char *)sub_2345EC794(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2345F1EB0((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, v1, (uint64_t)(v1 + 24));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_2345F1BE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (unsigned __int8 *)sub_2345EC794(a1);
  uint64_t v4 = (unsigned __int8 *)sub_2345EC794(a2);
  return sub_2345F1F1C(v3, v4);
}

uint64_t sub_2345F1C30(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (unsigned __int8 *)sub_2345EC794(a1);
  return sub_2345F1F1C(v3, a2);
}

uint64_t sub_2345F1C6C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F1C8C(uint64_t *a1, uint64_t a2)
{
  sub_2345EC794(a1);
  return MEMORY[0x270FA3EE0](a2);
}

std::type_info *sub_2345F1CC8(uint64_t *a1)
{
  return &stru_26E7627D0;
}

uint64_t sub_2345F1CE8(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F1D04(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F1D24(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F1D40(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F1D5C(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F1DA0(uint64_t *a1)
{
  sub_2345EC794(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7627D0, v1);
}

std::type_info *sub_2345F1DC8(uint64_t *a1)
{
  return &stru_26E7627D0;
}

void sub_2345F1DEC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EC794(a1);
  *(void *)(a2 + 8) = &off_26E762BC8;
  sub_2345F21A0();
}

uint64_t *sub_2345F1E34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x237DC3290](v2, 0x1012C402F9EB439);
  }
  return a1;
}

uint64_t sub_2345F1EB0(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2, uint64_t a3)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  if (*(char *)(a3 + 23) >= 0) {
    int v5 = (const char *)a3;
  }
  else {
    int v5 = *(const char **)a3;
  }
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5);
}

uint64_t sub_2345F1F1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    int v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  BOOL v13 = (const void **)(a1 + 24);
  uint64_t v16 = (unsigned __int8 *)*((void *)v6 + 3);
  long long v15 = v6 + 24;
  BOOL v14 = v16;
  if (v12 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    BOOL v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    uint64_t result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t sub_2345F2048(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EC794(a1) + 48));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EC794(a1);
}

void sub_2345F20DC(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

char *sub_2345F2100(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2345DBA34(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  int v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_2345DBA34(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)int v5 = v6;
  }
  atomic_store(0, (unsigned int *)__dst + 12);
  return __dst;
}

void sub_2345F2184(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2345F21A0()
{
}

void sub_2345F2200(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

void *sub_2345F2224(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2345F2234(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2345F2240()
{
  return 1;
}

unint64_t sub_2345F2248(double *a1)
{
  unint64_t v1 = 0x9E3779B97F4A7C55 * *(void *)a1;
  if (*a1 == 0.0) {
    unint64_t v1 = 0;
  }
  return bswap64(v1);
}

BOOL sub_2345F2274(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F2288(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F22A0()
{
  return 0;
}

uint64_t sub_2345F22AC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3ED8](a2, a1);
}

void *sub_2345F22BC()
{
  return &unk_26E7627F0;
}

uint64_t sub_2345F22C8()
{
  return 0;
}

uint64_t sub_2345F22D0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F22DC()
{
  return 0;
}

uint64_t sub_2345F22E4()
{
  return 0;
}

BOOL sub_2345F22EC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F2320(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7627F0, a2);
}

void *sub_2345F2344()
{
  return &unk_26E7627F0;
}

void *sub_2345F2354@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26E762C80 + 1;
  return result;
}

unsigned char *sub_2345F236C(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_2345F237C(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2345F2388()
{
  return 1;
}

unint64_t sub_2345F2390(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2345F23B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F23C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F23DC()
{
  return 0;
}

uint64_t sub_2345F23EC()
{
  return MEMORY[0x263F8C230];
}

uint64_t sub_2345F23F8()
{
  return 0;
}

uint64_t sub_2345F2400()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F240C()
{
  return 0;
}

uint64_t sub_2345F2414()
{
  return 0;
}

BOOL sub_2345F241C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F2454(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2);
}

uint64_t sub_2345F2478()
{
  return MEMORY[0x263F8C230];
}

unsigned char *sub_2345F2488@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26E762D3B;
  *(unsigned char *)a2 = *result;
  return result;
}

_DWORD *sub_2345F24A4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2345F24B4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2345F24C0()
{
  return 1;
}

unint64_t sub_2345F24C8(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2345F24E8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F24FC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F2514()
{
  return 0;
}

uint64_t sub_2345F2520(unsigned int *a1, uint64_t a2)
{
  return MEMORY[0x270F987A8](a2, *a1);
}

uint64_t sub_2345F2530()
{
  return MEMORY[0x263F8C258];
}

uint64_t sub_2345F253C()
{
  return 0;
}

uint64_t sub_2345F2544()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F2550()
{
  return 0;
}

uint64_t sub_2345F2558()
{
  return 0;
}

BOOL sub_2345F2560(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F2598(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2);
}

uint64_t sub_2345F25BC()
{
  return MEMORY[0x263F8C258];
}

_DWORD *sub_2345F25CC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26E762DF3;
  *(_DWORD *)a2 = *result;
  return result;
}

_DWORD *sub_2345F25E8(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2345F25F8(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2345F2604()
{
  return 1;
}

unint64_t sub_2345F260C(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2345F262C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F2640(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F2658()
{
  return 0;
}

uint64_t sub_2345F2664(unsigned int *a1, uint64_t a2)
{
  return MEMORY[0x270F987B0](a2, *a1);
}

uint64_t sub_2345F2674()
{
  return MEMORY[0x263F8C260];
}

uint64_t sub_2345F2680()
{
  return 0;
}

uint64_t sub_2345F2688()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F2694()
{
  return 0;
}

uint64_t sub_2345F269C()
{
  return 0;
}

BOOL sub_2345F26A4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F26DC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], a2);
}

uint64_t sub_2345F2700()
{
  return MEMORY[0x263F8C260];
}

_DWORD *sub_2345F2710@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26E762EAB;
  *(_DWORD *)a2 = *result;
  return result;
}

float sub_2345F272C(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_2345F273C(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_2345F2748()
{
  return 1;
}

unint64_t sub_2345F2750(float *a1)
{
  float v1 = *a1;
  if (*a1 == 0.0) {
    float v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * LODWORD(v1));
}

BOOL sub_2345F2780(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F2794(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F27AC()
{
  return 0;
}

uint64_t sub_2345F27BC()
{
  return MEMORY[0x263F8C248];
}

uint64_t sub_2345F27C8()
{
  return 0;
}

uint64_t sub_2345F27D0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F27DC()
{
  return 0;
}

uint64_t sub_2345F27E4()
{
  return 0;
}

BOOL sub_2345F27EC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F2824(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], a2);
}

uint64_t sub_2345F2848()
{
  return MEMORY[0x263F8C248];
}

float sub_2345F2858@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26E762F63;
  float result = *a1;
  *(float *)a2 = *a1;
  return result;
}

void *sub_2345F2874(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2345F2884(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2345F2890()
{
  return 1;
}

unint64_t sub_2345F2898(int8x8_t *a1)
{
  int8x8_t v1 = vbic_s8(*a1, (int8x8_t)vceqz_f32((float32x2_t)*a1));
  v2.i64[0] = v1.u32[0];
  v2.i64[1] = v1.u32[1];
  uint64_t v3 = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.u32[1]
                                                                      + ((unint64_t)(v3 + v3 * v3) >> 1))));
}

BOOL sub_2345F28E0(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_2345F28FC(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_2345F291C()
{
  return 0;
}

uint64_t sub_2345F2928(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F28](a2, a1);
}

void *sub_2345F2938()
{
  return &unk_26E762800;
}

uint64_t sub_2345F2944()
{
  return 0;
}

uint64_t sub_2345F294C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F2958()
{
  return 0;
}

uint64_t sub_2345F2960()
{
  return 0;
}

BOOL sub_2345F2968(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F299C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762800, a2);
}

void *sub_2345F29C0()
{
  return &unk_26E762800;
}

void *sub_2345F29D0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26E763018 + 3;
  return result;
}

uint64_t *sub_2345F29E8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F2A04(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F2A3C(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F2A4C(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F2A68(uint64_t *a1)
{
  int8x8_t v1 = (float *)sub_2345ED554(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2345DE798((uint64_t)v3, v1, v1 + 1, v1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2345F2AC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (float *)sub_2345ED554(a1);
  long long v4 = (float *)sub_2345ED554(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2];
}

BOOL sub_2345F2B2C(uint64_t *a1, float *a2)
{
  uint64_t v3 = (float *)sub_2345ED554(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2];
}

uint64_t sub_2345F2B8C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F2BAC(uint64_t *a1, uint64_t a2)
{
  sub_2345ED554(a1);
  return MEMORY[0x270FA3F48](a2);
}

std::type_info *sub_2345F2BE8(uint64_t *a1)
{
  return &stru_26E7626B8;
}

uint64_t sub_2345F2C08(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F2C24(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F2C44(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F2C60(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F2C7C(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F2CC0(uint64_t *a1)
{
  sub_2345ED554(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7626B8, v1);
}

std::type_info *sub_2345F2CE8(uint64_t *a1)
{
  return &stru_26E7626B8;
}

void sub_2345F2D0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E7630D0 + 2;
  operator new();
}

uint64_t sub_2345F2D80(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345ED554(a1) + 12));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345ED554(a1);
}

uint64_t *sub_2345F2E44(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F2E60(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F2E98(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F2EA8(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F2EC4(uint64_t *a1)
{
  int8x8_t v1 = (float *)sub_2345ED700(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2345E0064((uint64_t)v3, v1, v1 + 1, v1 + 2, v1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2345F2F24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (float *)sub_2345ED700(a1);
  long long v4 = (float *)sub_2345ED700(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2] && v3[3] == v4[3];
}

BOOL sub_2345F2F9C(uint64_t *a1, float *a2)
{
  uint64_t v3 = (float *)sub_2345ED700(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2] && v3[3] == a2[3];
}

uint64_t sub_2345F300C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F302C(uint64_t *a1, uint64_t a2)
{
  sub_2345ED700(a1);
  return MEMORY[0x270FA3F68](a2);
}

std::type_info *sub_2345F3068(uint64_t *a1)
{
  return &stru_26E7627B0;
}

uint64_t sub_2345F3088(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F30A4(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F30C4(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F30E0(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F30FC(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F3140(uint64_t *a1)
{
  sub_2345ED700(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7627B0, v1);
}

std::type_info *sub_2345F3168(uint64_t *a1)
{
  return &stru_26E7627B0;
}

void sub_2345F318C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E763188 + 2;
  operator new();
}

uint64_t sub_2345F31F8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345ED700(a1) + 16));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345ED700(a1);
}

double sub_2345F32B4(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_2345F32C4(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_2345F32D0()
{
  return 1;
}

unint64_t sub_2345F32D8(double *a1)
{
  double v1 = *a1;
  if (*a1 == 0.0) {
    double v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * *(void *)&v1);
}

BOOL sub_2345F3308(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2345F331C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2345F3334()
{
  return 0;
}

uint64_t sub_2345F3344()
{
  return MEMORY[0x263F8C240];
}

uint64_t sub_2345F3350()
{
  return 0;
}

uint64_t sub_2345F3358()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F3364()
{
  return 0;
}

uint64_t sub_2345F336C()
{
  return 0;
}

BOOL sub_2345F3374(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F33AC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], a2);
}

uint64_t sub_2345F33D0()
{
  return MEMORY[0x263F8C240];
}

double sub_2345F33E0@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  a2[1] = &unk_26E763243;
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t *sub_2345F33FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F3418(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F3450(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F3460(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F347C(uint64_t *a1)
{
  double v1 = (int8x16_t *)sub_2345EDC24(a1);
  int64x2_t v2 = (int64x2_t)vbicq_s8(*v1, (int8x16_t)vceqzq_f64(*(float64x2_t *)v1));
  v2.i64[0] = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v2.i64[1] + ((unint64_t)(v2.i64[0] + v2.i64[0] * v2.i64[0]) >> 1))));
}

BOOL sub_2345F34D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (double *)sub_2345EDC24(a1);
  long long v4 = (double *)sub_2345EDC24(a2);
  return v3[1] == v4[1] && *v3 == *v4;
}

BOOL sub_2345F351C(uint64_t *a1, double *a2)
{
  uint64_t v3 = (double *)sub_2345EDC24(a1);
  return v3[1] == a2[1] && *v3 == *a2;
}

uint64_t sub_2345F355C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F357C(uint64_t *a1, uint64_t a2)
{
  sub_2345EDC24(a1);
  return MEMORY[0x270FA3F20](a2);
}

std::type_info *sub_2345F35B8(uint64_t *a1)
{
  return &stru_26E762820;
}

uint64_t sub_2345F35D8(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F35F4(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F3614(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3630(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F364C(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F3690(uint64_t *a1)
{
  sub_2345EDC24(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762820, v1);
}

std::type_info *sub_2345F36B8(uint64_t *a1)
{
  return &stru_26E762820;
}

void sub_2345F36DC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E7632F8 + 2;
  operator new();
}

uint64_t sub_2345F3748(uint64_t result, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = v3;
  if (*(unsigned char *)(result + 8)) {
    *(void *)&double v4 = *(void *)&v3
  }
                   + ((*(void *)result
                     + *(void *)&v3
                     + (*(void *)result + *(void *)&v3) * (*(void *)result + *(void *)&v3)) >> 1);
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(double *)uint64_t result = v4;
  double v5 = *a3;
  if (*a3 == 0.0) {
    double v5 = 0.0;
  }
  *(void *)uint64_t result = *(void *)&v5
                    + ((*(void *)&v4
                      + *(void *)&v5
                      + (*(void *)&v4 + *(void *)&v5) * (*(void *)&v4 + *(void *)&v5)) >> 1);
  return result;
}

uint64_t sub_2345F37A8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EDC24(a1) + 16));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EDC24(a1);
}

uint64_t *sub_2345F3864(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F3880(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F38B8(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F38C8(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F38E4(uint64_t *a1)
{
  double v1 = (double *)sub_2345EDDD0(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2345F3BFC((uint64_t)v3, v1, v1 + 1, v1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2345F3940(uint64_t *a1, uint64_t *a2)
{
  double v3 = (double *)sub_2345EDDD0(a1);
  double v4 = (double *)sub_2345EDDD0(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2];
}

BOOL sub_2345F39A8(uint64_t *a1, double *a2)
{
  double v3 = (double *)sub_2345EDDD0(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2];
}

uint64_t sub_2345F3A08(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3A28(uint64_t *a1, uint64_t a2)
{
  sub_2345EDDD0(a1);
  return MEMORY[0x270FA3F40](a2);
}

std::type_info *sub_2345F3A64(uint64_t *a1)
{
  return &stru_26E762830;
}

uint64_t sub_2345F3A84(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3AA0(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F3AC0(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3ADC(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F3AF8(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F3B3C(uint64_t *a1)
{
  sub_2345EDDD0(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762830, v1);
}

std::type_info *sub_2345F3B64(uint64_t *a1)
{
  return &stru_26E762830;
}

void sub_2345F3B88(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E7633B0 + 2;
  operator new();
}

uint64_t sub_2345F3BFC(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4 = *a2;
  if (*a2 == 0.0) {
    double v4 = 0.0;
  }
  double v5 = v4;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v5 = *(void *)&v4
  }
                   + ((*(void *)a1
                     + *(void *)&v4
                     + (*(void *)a1 + *(void *)&v4) * (*(void *)a1 + *(void *)&v4)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v5;
  return sub_2345F3748(a1, a3, a4);
}

uint64_t sub_2345F3C44(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EDDD0(a1) + 24));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EDDD0(a1);
}

uint64_t *sub_2345F3D08(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F3D24(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F3D5C(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F3D6C(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F3D88(uint64_t *a1)
{
  double v1 = (double *)sub_2345EDF7C(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2345F40BC((uint64_t)v3, v1, v1 + 1, v1 + 2, v1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2345F3DE8(uint64_t *a1, uint64_t *a2)
{
  double v3 = (double *)sub_2345EDF7C(a1);
  double v4 = (double *)sub_2345EDF7C(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2] && v3[3] == v4[3];
}

BOOL sub_2345F3E60(uint64_t *a1, double *a2)
{
  double v3 = (double *)sub_2345EDF7C(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2] && v3[3] == a2[3];
}

uint64_t sub_2345F3ED0(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3EF0(uint64_t *a1, uint64_t a2)
{
  sub_2345EDF7C(a1);
  return MEMORY[0x270FA3F60](a2);
}

std::type_info *sub_2345F3F2C(uint64_t *a1)
{
  return &stru_26E762840;
}

uint64_t sub_2345F3F4C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3F68(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F3F88(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F3FA4(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F3FC0(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F4004(uint64_t *a1)
{
  sub_2345EDF7C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762840, v1);
}

std::type_info *sub_2345F402C(uint64_t *a1)
{
  return &stru_26E762840;
}

void sub_2345F4050(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E763468 + 2;
  operator new();
}

uint64_t sub_2345F40BC(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5 = *a2;
  if (*a2 == 0.0) {
    double v5 = 0.0;
  }
  double v6 = v5;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v6 = *(void *)&v5
  }
                   + ((*(void *)a1
                     + *(void *)&v5
                     + (*(void *)a1 + *(void *)&v5) * (*(void *)a1 + *(void *)&v5)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v6;
  return sub_2345F3BFC(a1, a3, a4, a5);
}

uint64_t sub_2345F4108(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EDF7C(a1) + 32));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EDF7C(a1);
}

uint64_t *sub_2345F41C4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 128), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F41E0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 128), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F4218(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F4228(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F4244(uint64_t *a1)
{
  double v1 = (double *)sub_2345ED8AC(a1);
  return sub_2345F44F8((uint64_t)&v3, v1);
}

uint64_t sub_2345F4270(uint64_t *a1, uint64_t *a2)
{
  sub_2345ED8AC(a1);
  sub_2345ED8AC(a2);
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_2345F42B8(uint64_t *a1)
{
  sub_2345ED8AC(a1);
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_2345F42F4(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F4314(uint64_t *a1, uint64_t a2)
{
  sub_2345ED8AC(a1);
  return MEMORY[0x270FA3EC0](a2);
}

std::type_info *sub_2345F4350(uint64_t *a1)
{
  return &stru_26E762810;
}

uint64_t sub_2345F4370(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F438C(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F43AC(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F43C8(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F43E4(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F4428(uint64_t *a1)
{
  sub_2345ED8AC(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762810, v1);
}

std::type_info *sub_2345F4450(uint64_t *a1)
{
  return &stru_26E762810;
}

void sub_2345F4474(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E763520 + 2;
  operator new();
}

unint64_t sub_2345F44F8(uint64_t a1, double *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_2345F4594((uint64_t)v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_2345F4594(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  double v17 = *a2;
  if (*a2 == 0.0) {
    double v17 = 0.0;
  }
  double v18 = v17;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v18 = *(void *)&v17
  }
                    + ((*(void *)a1
                      + *(void *)&v17
                      + (*(void *)a1 + *(void *)&v17) * (*(void *)a1 + *(void *)&v17)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v18;
  return sub_2345F4614(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_2345F4614(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16 = *a2;
  if (*a2 == 0.0) {
    double v16 = 0.0;
  }
  double v17 = v16;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v17 = *(void *)&v16
  }
                    + ((*(void *)a1
                      + *(void *)&v16
                      + (*(void *)a1 + *(void *)&v16) * (*(void *)a1 + *(void *)&v16)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v17;
  return sub_2345F4690(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_2345F4690(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15 = *a2;
  if (*a2 == 0.0) {
    double v15 = 0.0;
  }
  double v16 = v15;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v16 = *(void *)&v15
  }
                    + ((*(void *)a1
                      + *(void *)&v15
                      + (*(void *)a1 + *(void *)&v15) * (*(void *)a1 + *(void *)&v15)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v16;
  return sub_2345F4708(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_2345F4708(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14)
{
  double v14 = *a2;
  if (*a2 == 0.0) {
    double v14 = 0.0;
  }
  double v15 = v14;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v15 = *(void *)&v14
  }
                    + ((*(void *)a1
                      + *(void *)&v14
                      + (*(void *)a1 + *(void *)&v14) * (*(void *)a1 + *(void *)&v14)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v15;
  return sub_2345F477C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_2345F477C(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13 = *a2;
  if (*a2 == 0.0) {
    double v13 = 0.0;
  }
  double v14 = v13;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v14 = *(void *)&v13
  }
                    + ((*(void *)a1
                      + *(void *)&v13
                      + (*(void *)a1 + *(void *)&v13) * (*(void *)a1 + *(void *)&v13)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v14;
  return sub_2345F47EC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_2345F47EC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12 = *a2;
  if (*a2 == 0.0) {
    double v12 = 0.0;
  }
  double v13 = v12;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v13 = *(void *)&v12
  }
                    + ((*(void *)a1
                      + *(void *)&v12
                      + (*(void *)a1 + *(void *)&v12) * (*(void *)a1 + *(void *)&v12)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v13;
  return sub_2345F4858(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_2345F4858(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v11 = *a2;
  if (*a2 == 0.0) {
    double v11 = 0.0;
  }
  double v12 = v11;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v12 = *(void *)&v11
  }
                    + ((*(void *)a1
                      + *(void *)&v11
                      + (*(void *)a1 + *(void *)&v11) * (*(void *)a1 + *(void *)&v11)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v12;
  return sub_2345F48C0(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2345F48C0(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10 = *a2;
  if (*a2 == 0.0) {
    double v10 = 0.0;
  }
  double v11 = v10;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v11 = *(void *)&v10
  }
                    + ((*(void *)a1
                      + *(void *)&v10
                      + (*(void *)a1 + *(void *)&v10) * (*(void *)a1 + *(void *)&v10)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v11;
  return sub_2345F4924(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2345F4924(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v9 = *a2;
  if (*a2 == 0.0) {
    double v9 = 0.0;
  }
  double v10 = v9;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v10 = *(void *)&v9
  }
                    + ((*(void *)a1
                      + *(void *)&v9
                      + (*(void *)a1 + *(void *)&v9) * (*(void *)a1 + *(void *)&v9)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v10;
  return sub_2345F4984(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2345F4984(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v8 = *a2;
  if (*a2 == 0.0) {
    double v8 = 0.0;
  }
  double v9 = v8;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v9 = *(void *)&v8
  }
                   + ((*(void *)a1
                     + *(void *)&v8
                     + (*(void *)a1 + *(void *)&v8) * (*(void *)a1 + *(void *)&v8)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v9;
  return sub_2345F49DC(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2345F49DC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7 = *a2;
  if (*a2 == 0.0) {
    double v7 = 0.0;
  }
  double v8 = v7;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v8 = *(void *)&v7
  }
                   + ((*(void *)a1
                     + *(void *)&v7
                     + (*(void *)a1 + *(void *)&v7) * (*(void *)a1 + *(void *)&v7)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v8;
  return sub_2345F4A30(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2345F4A30(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6 = *a2;
  if (*a2 == 0.0) {
    double v6 = 0.0;
  }
  double v7 = v6;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v7 = *(void *)&v6
  }
                   + ((*(void *)a1
                     + *(void *)&v6
                     + (*(void *)a1 + *(void *)&v6) * (*(void *)a1 + *(void *)&v6)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v7;
  return sub_2345F40BC(a1, a3, a4, a5, a6);
}

uint64_t sub_2345F4A80(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345ED8AC(a1) + 128));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345ED8AC(a1);
}

uint64_t *sub_2345F4B54(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2345F4B70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void *sub_2345F4BA8(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2345F4BB8(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F4BD4(uint64_t *a1)
{
  uint64_t v1 = sub_2345EE128(a1);
  int v3 = *(_DWORD *)(v1 + 12);
  v4[0] = 0;
  v4[1] = 0;
  sub_2345F4F04((uint64_t)v4, (float *)&v3, (float *)v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4[0]));
}

BOOL sub_2345F4C34(uint64_t *a1, uint64_t *a2)
{
  int v3 = (float *)sub_2345EE128(a1);
  double v4 = (float *)sub_2345EE128(a2);
  return v3[3] == v4[3] && *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2];
}

BOOL sub_2345F4CAC(uint64_t *a1, float *a2)
{
  int v3 = (float *)sub_2345EE128(a1);
  return v3[3] == a2[3] && *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2];
}

uint64_t sub_2345F4D1C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F4D3C(uint64_t *a1, uint64_t a2)
{
  sub_2345EE128(a1);
  return MEMORY[0x270FA3F10](a2);
}

std::type_info *sub_2345F4D78(uint64_t *a1)
{
  return &stru_26E762850;
}

uint64_t sub_2345F4D98(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F4DB4(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2345F4DD4(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F4DF0(uint64_t *a1)
{
  return 0;
}

BOOL sub_2345F4E0C(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F4E50(uint64_t *a1)
{
  sub_2345EE128(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762850, v1);
}

std::type_info *sub_2345F4E78(uint64_t *a1)
{
  return &stru_26E762850;
}

void sub_2345F4E9C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &off_26E7635D8;
  operator new();
}

uint64_t sub_2345F4F04(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  unint64_t v4 = LODWORD(v3);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v4 = ((*(void *)a1 + LODWORD(v3) + (*(void *)a1 + LODWORD(v3)) * (*(void *)a1 + (unint64_t)LODWORD(v3))) >> 1)
  }
       + LODWORD(v3);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2345DE718(a1, a3);
}

uint64_t sub_2345F4F4C(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EE128(a1) + 16));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EE128(a1);
}

uint64_t *sub_2345F5008(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F5028(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F5300(a1);
}

uint64_t sub_2345F5038(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F5054(uint64_t *a1)
{
  uint64_t v1 = sub_2345EE784(a1);
  v3[1] = 1;
  v3[0] = *(void *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_2345F50B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_2345EE784(a1);
  uint64_t v4 = sub_2345EE784(a2);
  return sub_2345F5368(v3, v4);
}

uint64_t sub_2345F50F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_2345EE784(a1);
  return sub_2345F5368(v3, a2);
}

uint64_t sub_2345F5134(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F5154(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345F51AC(uint64_t *a1)
{
  return &stru_26E762870;
}

uint64_t sub_2345F51CC(uint64_t *a1)
{
  return 1;
}

uint64_t sub_2345F51E8(uint64_t *a1)
{
  return MEMORY[0x263F8C258];
}

uint64_t sub_2345F520C(uint64_t *a1)
{
  return *(void *)sub_2345EE784(a1);
}

BOOL sub_2345F5228(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F526C(uint64_t *a1)
{
  sub_2345EE784(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762870, v1);
}

std::type_info *sub_2345F5294(uint64_t *a1)
{
  return &stru_26E762870;
}

void sub_2345F52B8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EE784(a1);
  *(void *)(a2 + 8) = &off_26E763690;
  sub_2345F54A8();
}

uint64_t *sub_2345F5300(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t sub_2345F5368(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_2345DE910(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_2345DE910(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_2345F53F0(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EE784(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EE784(a1);
}

void sub_2345F54A8()
{
}

void sub_2345F5524(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    double v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_2345F56EC((uint64_t)a1, a2);
              double v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            double v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          double v14 = v7;
          goto LABEL_31;
        }
        double v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = sub_2345F56EC((uint64_t)a1, a2);
      double v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        int v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          double v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)int v22 = v23;
          int v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        BOOL v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      double v16 = sub_2345F56EC((uint64_t)a1, a2);
      double v14 = v16;
      uint64_t v17 = 0;
      double v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

void *sub_2345F56EC(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F5778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2345F5790(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      double v6 = sub_2345F56EC((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        unint64_t v9 = v6;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2345F5828(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F5848(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F5B20(a1);
}

uint64_t sub_2345F5858(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F5874(uint64_t *a1)
{
  uint64_t v1 = sub_2345EEAA0(a1);
  v3[1] = 1;
  v3[0] = *(void *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_2345F58D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_2345EEAA0(a1);
  uint64_t v4 = sub_2345EEAA0(a2);
  return sub_2345F5368(v3, v4);
}

uint64_t sub_2345F5918(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_2345EEAA0(a1);
  return sub_2345F5368(v3, a2);
}

uint64_t sub_2345F5954(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F5974(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345F59CC(uint64_t *a1)
{
  return &stru_26E762888;
}

uint64_t sub_2345F59EC(uint64_t *a1)
{
  return 1;
}

uint64_t sub_2345F5A08(uint64_t *a1)
{
  return MEMORY[0x263F8C260];
}

uint64_t sub_2345F5A2C(uint64_t *a1)
{
  return *(void *)sub_2345EEAA0(a1);
}

BOOL sub_2345F5A48(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F5A8C(uint64_t *a1)
{
  sub_2345EEAA0(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762888, v1);
}

std::type_info *sub_2345F5AB4(uint64_t *a1)
{
  return &stru_26E762888;
}

void sub_2345F5AD8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EEAA0(a1);
  *(void *)(a2 + 8) = &off_26E763748;
  sub_2345F54A8();
}

uint64_t *sub_2345F5B20(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t sub_2345F5B88(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EEAA0(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EEAA0(a1);
}

uint64_t sub_2345F5C40(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)*a1;
  *a1 += 4;
  return MEMORY[0x270F987B0](a2, v3);
}

void sub_2345F5C58(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_2345EEE98((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            double v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          double v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = sub_2345EEE98((uint64_t)a1, a2);
      double v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        int v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)int v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        BOOL v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      double v16 = sub_2345EEE98((uint64_t)a1, a2);
      double v14 = v16;
      unint64_t v17 = 0;
      double v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345F5E20(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F5E40(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F60E8(a1);
}

uint64_t sub_2345F5E50(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F5E6C(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)sub_2345EEDBC(a1);
  return sub_2345F6150((uint64_t)&v3, v1);
}

BOOL sub_2345F5E98(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345EEDBC(a1);
  uint64_t v4 = sub_2345EEDBC(a2);
  return sub_2345F6250(v3, v4);
}

BOOL sub_2345F5EE0(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345EEDBC(a1);
  return sub_2345F6250(v3, a2);
}

uint64_t sub_2345F5F1C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F5F3C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345F5F94(uint64_t *a1)
{
  return &stru_26E7628A0;
}

uint64_t sub_2345F5FB4(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345F5FD0(uint64_t *a1)
{
  return &stru_26E762850;
}

uint64_t sub_2345F5FF4(uint64_t *a1)
{
  return *(void *)sub_2345EEDBC(a1);
}

BOOL sub_2345F6010(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F6054(uint64_t *a1)
{
  sub_2345EEDBC(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7628A0, v1);
}

std::type_info *sub_2345F607C(uint64_t *a1)
{
  return &stru_26E7628A0;
}

void sub_2345F60A0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EEDBC(a1);
  *(void *)(a2 + 8) = off_26E763800;
  sub_2345DEAC0();
}

uint64_t *sub_2345F60E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345F6150(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    uint64_t v3 = a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 16;
      sub_2345F61C8((uint64_t)v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345F61C8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 12);
  v6[0] = 0;
  v6[1] = 0;
  uint64_t result = sub_2345F4F04((uint64_t)v6, (float *)&v5, (float *)a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2345F6250(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  int v5 = (float *)(a1[4] + 8);
  uint64_t v6 = 16 * *a1;
  for (i = (float *)(*(void *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2345F632C(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EEDBC(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EEDBC(a1);
}

uint64_t sub_2345F63E4(void *a1, uint64_t a2)
{
  *a1 += 16;
  return MEMORY[0x270FA3F10](a2);
}

void sub_2345F63FC(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2345F662C(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = 24 * *a1;
      do
      {
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2345F6484(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 3 * a2;
            do
            {
              if (SHIBYTE(v7[v13 + 2]) < 0) {
                operator delete((void *)v7[v13]);
              }
              v13 += 3;
            }
            while (3 * v3 != v13);
            goto LABEL_25;
          }
          uint64_t v9 = a1[4];
          if (*(void *)(v9 - 8) < a2)
          {
            uint64_t v7 = sub_2345F66E8((uint64_t)a1, a2);
            sub_2345F6848(v9, v9 + 24 * v3, (uint64_t)v7);
          }
LABEL_19:
          uint64_t v10 = (uint64_t)&v7[3 * v3];
          goto LABEL_20;
        }
        uint64_t v7 = (void *)a1[4];
      }
      uint64_t v11 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2345F66E8((uint64_t)a1, a2);
      sub_2345F6848(v11, v11 + 24 * v12, (uint64_t)v7);
      if (v3 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    if (a2 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v7 = sub_2345F66E8((uint64_t)a1, a2);
      uint64_t v10 = (uint64_t)v7;
LABEL_20:
      sub_2345F6794(a3, v10, (uint64_t)&v7[3 * a2]);
LABEL_25:
      if (v7 != (void *)a1[4])
      {
        sub_2345F662C(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345F63FC(a1);
}

void sub_2345F662C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    unint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          v5 += 24;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void *sub_2345F66E8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

long long **sub_2345F6794(long long **result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    do
    {
      BOOL result = (long long **)(a2 + v5);
      if (*((char *)v6 + 23) < 0)
      {
        BOOL result = (long long **)sub_2345DBA34(result, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        result[2] = (long long *)*((void *)v6 + 2);
        *(_OWORD *)BOOL result = v7;
      }
      v5 += 24;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_2345F6808(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_2345F6834(_Unwind_Exception *a1)
{
}

uint64_t sub_2345F6848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = (long long *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        sub_2345DBA34((unsigned char *)v7, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(_OWORD *)uint64_t v7 = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2345F68C8(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_2345F68F4(_Unwind_Exception *a1)
{
}

void sub_2345F6908(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique() [T = std::string]");
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_2345F66E8((uint64_t)this, *(void *)this);
      sub_2345F6848(v4, v4 + 24 * v5, (uint64_t)v6);
      sub_2345F662C(this);
      *((void *)this + 4) = v6;
    }
  }
}

uint64_t *sub_2345F6998(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F69B8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F6C8C(a1);
}

uint64_t sub_2345F69C8(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F69E4(uint64_t *a1)
{
  uint64_t v1 = sub_2345EF02C(a1);
  v3[1] = 1;
  v3[0] = *(void *)v1;
  sub_2345F6CF4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(uint64_t **)(v1 + 32), v3[0]);
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_2345F6A3C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (uint64_t *)sub_2345EF02C(a1);
  uint64_t v4 = sub_2345EF02C(a2);
  return sub_2345F6D58(v3, v4);
}

uint64_t sub_2345F6A84(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)sub_2345EF02C(a1);
  return sub_2345F6D58(v3, a2);
}

uint64_t sub_2345F6AC0(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F6AE0(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_2345F6B38(uint64_t *a1)
{
  return &unk_26E7628B8;
}

uint64_t sub_2345F6B58(uint64_t *a1)
{
  return 1;
}

void *sub_2345F6B74(uint64_t *a1)
{
  return &unk_26E762B00;
}

uint64_t sub_2345F6B98(uint64_t *a1)
{
  return *(void *)sub_2345EF02C(a1);
}

BOOL sub_2345F6BB4(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F6BF8(uint64_t *a1)
{
  sub_2345EF02C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E7628B8, v1);
}

void *sub_2345F6C20(uint64_t *a1)
{
  return &unk_26E7628B8;
}

void sub_2345F6C44(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EF02C(a1);
  *(void *)(a2 + 8) = &off_26E7638B8;
  sub_2345DEAC0();
}

uint64_t *sub_2345F6C8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345F662C((void *)v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_HashState *sub_2345F6CF4(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = this;
    do
    {
      --v3;
      uint64_t v5 = a2 + 3;
      if (*((char *)a2 + 23) < 0) {
        a2 = (uint64_t *)*a2;
      }
      this = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(v4, (const char *)a2);
      a2 = v5;
    }
    while (v3);
  }
  return this;
}

uint64_t sub_2345F6D58(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (unsigned __int8 *)a1[4];
  uint64_t v7 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v8 = 24 * v5 - 24;
  do
  {
    uint64_t result = sub_2345F6E18((uint64_t)&v10, v6, v7);
    if (!result) {
      break;
    }
    v6 += 24;
    v7 += 24;
    uint64_t v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_2345F6E18(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t sub_2345F6EC0(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EF02C(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EF02C(a1);
}

void *sub_2345F6F78(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 24;
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  return sub_2345DDEB8(a2, v5, v6);
}

void sub_2345F6FA8(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2345F724C(a1);
    }
    else if (*a1)
    {
      int v4 = (void *)a1[4];
      uint64_t v5 = 8 * *a1;
      do
      {
        if ((*v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2345F702C(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v23 = a2;
            do
            {
              uint64_t v24 = v7[v23];
              if ((v24 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              ++v23;
            }
            while (v3 != v23);
          }
          else
          {
            int v9 = (uint64_t *)a1[4];
            if (*(v9 - 1) < a2) {
              int v7 = sub_2345F73A4((uint64_t)a1, v9, a2, *a1);
            }
            int v10 = *a3;
            uint64_t v11 = v3;
            do
            {
              uint64_t v12 = *v10;
              v7[v11] = *v10;
              if ((v12 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v7[v11] &= 0xFFFFFFFFFFFFFFF8;
              }
              ++v11;
            }
            while (a2 != v11);
          }
LABEL_40:
          if (v7 != (uint64_t *)a1[4])
          {
            sub_2345F724C(a1);
            a1[4] = (uint64_t)v7;
          }
          *a1 = a2;
          return;
        }
        int v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = *a1;
      }
      unint64_t v19 = sub_2345F73A4((uint64_t)a1, v7, a2, v18);
      int v7 = v19;
      if (v3 < a2)
      {
        int v20 = *a3;
        uint64_t v21 = v3;
        do
        {
          uint64_t v22 = *v20;
          v19[v21] = *v20;
          if ((v22 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v19[v21] &= 0xFFFFFFFFFFFFFFF8;
          }
          ++v21;
        }
        while (a2 != v21);
      }
      goto LABEL_40;
    }
    uint64_t v13 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      BOOL v14 = sub_2345F7300((uint64_t)a1, a2);
      int v7 = v14;
      unint64_t v15 = 0;
      double v16 = *a3;
      do
      {
        uint64_t v17 = *v16;
        v14[v15 / 8] = *v16;
        if ((v17 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v14[v15 / 8] &= 0xFFFFFFFFFFFFFFF8;
        }
        v15 += 8;
      }
      while (v13 != v15);
      goto LABEL_40;
    }
  }
  sub_2345F6FA8(a1);
}

void sub_2345F724C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    unint64_t v3 = a1 + 3;
    unsigned int v2 = (atomic_ullong *)a1[3];
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v6 = *(void (**)(void))(*v3 + 8);
        if (v6) {
          v6();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      int v4 = (void *)a1[4];
      if (*a1)
      {
        uint64_t v5 = 8 * *a1;
        do
        {
          if ((*v4 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
        int v4 = (void *)a1[4];
      }
      operator delete(v4 - 2);
    }
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
}

void *sub_2345F7300(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  int v4 = operator new(v3);
  *int v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F738C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2345F73A4(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = sub_2345F7300(a1, a3);
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *a2;
      *uint64_t v8 = *a2;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void sub_2345F7418(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]");
      int v4 = sub_2345F73A4((uint64_t)this, *((uint64_t **)this + 4), *(void *)this, *(void *)this);
      sub_2345F724C(this);
      *((void *)this + 4) = v4;
    }
  }
}

uint64_t *sub_2345F748C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F74AC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F7784(a1);
}

uint64_t sub_2345F74BC(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F74D8(uint64_t *a1)
{
  uint64_t v1 = (unint64_t *)sub_2345EF164(a1);
  unint64_t v2 = *v1;
  if (*v1)
  {
    unint64_t v3 = (uint64_t *)v1[4];
    unint64_t v4 = *v1;
    do
    {
      uint64_t v5 = *v3++;
      unint64_t v2 = (v5 & 0xFFFFFFFFFFFFFFF8)
         + (((v5 & 0xFFFFFFFFFFFFFFF8) + v2 + ((v5 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v5 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2345F7534(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (void *)sub_2345EF164(a1);
  uint64_t v4 = sub_2345EF164(a2);
  return sub_2345F77EC(v3, v4);
}

BOOL sub_2345F757C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (void *)sub_2345EF164(a1);
  return sub_2345F77EC(v3, a2);
}

uint64_t sub_2345F75B8(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F75D8(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_2345F7630(uint64_t *a1)
{
  return &unk_26E7628D0;
}

uint64_t sub_2345F7650(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345F766C(uint64_t *a1)
{
  return &stru_26E7627C0;
}

uint64_t sub_2345F7690(uint64_t *a1)
{
  return *(void *)sub_2345EF164(a1);
}

BOOL sub_2345F76AC(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F76F0(uint64_t *a1)
{
  sub_2345EF164(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E7628D0, v1);
}

void *sub_2345F7718(uint64_t *a1)
{
  return &unk_26E7628D0;
}

void sub_2345F773C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EF164(a1);
  *(void *)(a2 + 8) = &off_26E763970;
  sub_2345DEAC0();
}

uint64_t *sub_2345F7784(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345F724C((void *)v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL sub_2345F77EC(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)a1[4];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    uint64_t v8 = *v5++;
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = *v6++;
    BOOL result = v9 == (v10 & 0xFFFFFFFFFFFFFFF8);
    BOOL v11 = v9 != (v10 & 0xFFFFFFFFFFFFFFF8) || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2345F7894(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EF164(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EF164(a1);
}

uint64_t sub_2345F794C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F88](a2, v3);
}

void sub_2345F7964(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2345F7B80(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = 8 * *a1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2345EBD10(v4);
        v4 += 8;
        v5 -= 8;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2345F79EC(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 8 * v3;
            uint64_t v14 = 8 * a2;
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_2345EBD10((uint64_t)&v7[(unint64_t)v14 / 8]);
              v14 += 8;
            }
            while (v13 != v14);
LABEL_23:
            if (v7 != (void *)a1[4])
            {
              sub_2345F7B80(a1);
              a1[4] = (unint64_t)v7;
            }
            *a1 = a2;
            return;
          }
          unint64_t v9 = (_DWORD *)a1[4];
          if (*((void *)v9 - 1) < a2)
          {
            uint64_t v7 = sub_2345F7C3C((uint64_t)a1, a2);
            sub_2345F7D44(v9, &v9[2 * v3], v7);
          }
          goto LABEL_19;
        }
        uint64_t v7 = (void *)a1[4];
      }
      BOOL v11 = v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2345F7C3C((uint64_t)a1, a2);
      sub_2345F7D44(v11, &v11[2 * v12], v7);
      if (v3 >= a2) {
        goto LABEL_23;
      }
LABEL_19:
      uint64_t v10 = &v7[v3];
      goto LABEL_20;
    }
    if (8 * a2 / a2 == 8)
    {
      uint64_t v7 = sub_2345F7C3C((uint64_t)a1, a2);
      uint64_t v10 = v7;
LABEL_20:
      sub_2345F7CE0(a3, v10, &v7[a2]);
      goto LABEL_23;
    }
  }
  sub_2345F7964(a1);
}

void sub_2345F7B80(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    unint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 8 * *a1;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_2345EBD10(v5);
          v5 += 8;
          v6 -= 8;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void *sub_2345F7C3C(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F7CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_2345F7CE0(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = *(_DWORD **)result;
    uint64_t v6 = (_DWORD *)(*(void *)result + 4);
    do
    {
      sub_2345EBC84(v4, v5);
      BOOL result = sub_2345EBCD0(v4 + 1, v6);
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

_DWORD *sub_2345F7D44(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      sub_2345EBC84(a3, v5);
      sub_2345EBCD0(a3 + 1, v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_2345F7DA8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfPath]");
      uint64_t v4 = (_DWORD *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_2345F7C3C((uint64_t)this, *(void *)this);
      sub_2345F7D44(v4, &v4[2 * v5], v6);
      sub_2345F7B80(this);
      *((void *)this + 4) = v6;
    }
  }
}

uint64_t *sub_2345F7E34(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F7E54(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F80FC(a1);
}

uint64_t sub_2345F7E64(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F7E80(uint64_t *a1)
{
  uint64_t v1 = (unint64_t *)sub_2345F8164(a1);
  return sub_2345F81A8((uint64_t)&v3, v1);
}

BOOL sub_2345F7EAC(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345F8164(a1);
  uint64_t v4 = sub_2345F8164(a2);
  return sub_2345F81F8(v3, v4);
}

BOOL sub_2345F7EF4(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345F8164(a1);
  return sub_2345F81F8(v3, a2);
}

uint64_t sub_2345F7F30(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F7F50(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_2345F7FA8(uint64_t *a1)
{
  return &unk_26E763AE0;
}

uint64_t sub_2345F7FC8(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345F7FE4(uint64_t *a1)
{
  return &stru_26E762860;
}

uint64_t sub_2345F8008(uint64_t *a1)
{
  return *(void *)sub_2345F8164(a1);
}

BOOL sub_2345F8024(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7SdfPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F8068(uint64_t *a1)
{
  sub_2345F8164(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E763AE0, v1);
}

void *sub_2345F8090(uint64_t *a1)
{
  return &unk_26E763AE0;
}

void sub_2345F80B4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345F8164(a1);
  *(void *)(a2 + 8) = &off_26E763A28;
  sub_2345DEAC0();
}

uint64_t *sub_2345F80FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345F7B80((void *)v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

uint64_t sub_2345F8164(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

unint64_t sub_2345F81A8(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    char v3 = (unsigned int *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      unint64_t v7 = v2 + v5 + (v2 + v5) * (v2 + v5);
      unint64_t v2 = v6 + ((v6 + v5 + (v7 >> 1) + (v6 + v5 + (v7 >> 1)) * (v6 + v5 + (v7 >> 1))) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2345F81F8(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)a1[4];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    uint64_t v9 = *v5++;
    uint64_t v8 = v9;
    uint64_t v10 = *v6++;
    BOOL result = v8 == v10;
    BOOL v11 = v8 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2345F8298(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345F8164(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345F8164(a1);
}

uint64_t sub_2345F8350(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F80](a2, v3);
}

void sub_2345F8368(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2345F85B8(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = 48 * *a1;
      uint64_t v5 = (char *)(a1[4] + 23);
      do
      {
        if (v5[24] < 0) {
          operator delete(*(void **)(v5 + 1));
        }
        if (*v5 < 0) {
          operator delete(*(void **)(v5 - 23));
        }
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void sub_2345F8404(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 48 * v3;
            uint64_t v14 = 48 * a2;
            do
            {
              unint64_t v15 = &v7[(unint64_t)v14 / 8];
              if (SHIBYTE(v7[(unint64_t)v14 / 8 + 5]) < 0) {
                operator delete((void *)v15[3]);
              }
              if (*((char *)v15 + 23) < 0) {
                operator delete((void *)v7[(unint64_t)v14 / 8]);
              }
              v14 += 48;
            }
            while (v13 != v14);
            goto LABEL_27;
          }
          uint64_t v9 = a1[4];
          if (*(void *)(v9 - 8) < a2)
          {
            uint64_t v7 = sub_2345F8688((uint64_t)a1, a2);
            sub_2345F8898(v9, v9 + 48 * v3, (uint64_t)v7);
          }
LABEL_19:
          uint64_t v10 = &v7[6 * v3];
          goto LABEL_20;
        }
        uint64_t v7 = (void *)a1[4];
      }
      uint64_t v11 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2345F8688((uint64_t)a1, a2);
      sub_2345F8898(v11, v11 + 48 * v12, (uint64_t)v7);
      if (v3 >= a2) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (a2 <= 0x555555555555555)
    {
      uint64_t v10 = sub_2345F8688((uint64_t)a1, a2);
      uint64_t v7 = v10;
LABEL_20:
      sub_2345F8730((uint64_t)v10, (uint64_t)&v7[6 * a2], *a3);
LABEL_27:
      if (v7 != (void *)a1[4])
      {
        sub_2345F85B8(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345F8368(a1);
}

void sub_2345F85B8(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    unint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        unint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 48 * *a1;
        uint64_t v7 = (char *)(v5 + 23);
        do
        {
          if (v7[24] < 0) {
            operator delete(*(void **)(v7 + 1));
          }
          if (*v7 < 0) {
            operator delete(*(void **)(v7 - 23));
          }
          v7 += 48;
          v6 -= 48;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
}

void *sub_2345F8688(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x555555555555554) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 48 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F8718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2345F8730(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (long long *)((char *)a3 + 24);
    do
    {
      uint64_t v8 = v3 + v6;
      if (*((char *)a3 + 23) < 0)
      {
        sub_2345DBA34((unsigned char *)v8, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v9 = *a3;
        *(void *)(v8 + 16) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }
      uint64_t v10 = (unsigned char *)(v3 + v6 + 24);
      if (*((char *)a3 + 47) < 0)
      {
        sub_2345DBA34(v10, *((void **)a3 + 3), *((void *)a3 + 4));
      }
      else
      {
        long long v11 = *v7;
        *(void *)(v3 + v6 + 40) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v10 = v11;
      }
      v6 += 48;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_2345F87E4(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_2345F8840(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_2345F882C(_Unwind_Exception *a1)
{
}

void sub_2345F8840(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_2345F8898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = a3 + v6;
    uint64_t v8 = (long long *)(a1 + v6);
    if (*(char *)(a1 + v6 + 23) < 0)
    {
      sub_2345DBA34((unsigned char *)v7, *(void **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      *(void *)(v7 + 16) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v7 = v9;
    }
    uint64_t v10 = (unsigned char *)(a3 + v6 + 24);
    long long v11 = (void **)(a1 + v6 + 24);
    if (*(char *)(a1 + v6 + 47) < 0)
    {
      sub_2345DBA34(v10, *v11, *(void *)(a1 + v6 + 32));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      *(void *)(a3 + v6 + 40) = *(void *)(a1 + v6 + 40);
      *(_OWORD *)uint64_t v10 = v12;
    }
    v6 += 48;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_2345F895C(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_2345F8840(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_2345F89A4(_Unwind_Exception *a1)
{
}

void sub_2345F89B8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]");
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_2345F8688((uint64_t)this, *(void *)this);
      sub_2345F8898(v4, v4 + 48 * v5, (uint64_t)v6);
      sub_2345F85B8(this);
      *((void *)this + 4) = v6;
    }
  }
}

uint64_t *sub_2345F8A48(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F8A68(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F8D10(a1);
}

uint64_t sub_2345F8A78(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F8A94(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)sub_2345EF2E8(a1);
  return sub_2345F8D78((uint64_t)&v3, v1);
}

uint64_t sub_2345F8AC0(uint64_t *a1, uint64_t *a2)
{
  char v3 = (uint64_t *)sub_2345EF2E8(a1);
  uint64_t v4 = sub_2345EF2E8(a2);
  return sub_2345F8E6C(v3, v4);
}

uint64_t sub_2345F8B08(uint64_t *a1, uint64_t a2)
{
  char v3 = (uint64_t *)sub_2345EF2E8(a1);
  return sub_2345F8E6C(v3, a2);
}

uint64_t sub_2345F8B44(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F8B64(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void *sub_2345F8BBC(uint64_t *a1)
{
  return &unk_26E7628E8;
}

uint64_t sub_2345F8BDC(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345F8BF8(uint64_t *a1)
{
  return &stru_26E7627D0;
}

uint64_t sub_2345F8C1C(uint64_t *a1)
{
  return *(void *)sub_2345EF2E8(a1);
}

BOOL sub_2345F8C38(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F8C7C(uint64_t *a1)
{
  sub_2345EF2E8(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E7628E8, v1);
}

void *sub_2345F8CA4(uint64_t *a1)
{
  return &unk_26E7628E8;
}

void sub_2345F8CC8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EF2E8(a1);
  *(void *)(a2 + 8) = &off_26E763AF8;
  sub_2345DEAC0();
}

uint64_t *sub_2345F8D10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345F85B8((void *)v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345F8D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (const char *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 48;
      sub_2345F8DF0((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345F8DF0(uint64_t a1, const char *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_2345F1EB0((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v5, a2, (uint64_t)(a2 + 24));
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2345F8E6C(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (unsigned __int8 *)a1[4];
  uint64_t v7 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v8 = 48 * v5 - 48;
  do
  {
    uint64_t result = sub_2345F1F1C(v6, v7);
    if (!result) {
      break;
    }
    v6 += 48;
    v7 += 48;
    uint64_t v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

uint64_t sub_2345F8F20(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EF2E8(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EF2E8(a1);
}

uint64_t sub_2345F8FD8(void *a1, uint64_t a2)
{
  *a1 += 48;
  return MEMORY[0x270FA3EE0](a2);
}

void sub_2345F8FF0(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2345F91B8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = sub_2345F91B8((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      double v16 = sub_2345F91B8((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

void *sub_2345F91B8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345F9244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2345F925C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]");
      unint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_2345F91B8((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        unint64_t v9 = v6;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2345F92F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F9314(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F95B8(a1);
}

uint64_t sub_2345F9324(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F9340(uint64_t *a1)
{
  uint64_t v1 = (unint64_t *)sub_2345EF604(a1);
  return sub_2345F9620(v1);
}

BOOL sub_2345F9368(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (void *)sub_2345EF604(a1);
  uint64_t v4 = sub_2345EF604(a2);
  return sub_2345F9674(v3, v4);
}

BOOL sub_2345F93B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (void *)sub_2345EF604(a1);
  return sub_2345F9674(v3, a2);
}

uint64_t sub_2345F93EC(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F940C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345F9464(uint64_t *a1)
{
  return &stru_26E762900;
}

uint64_t sub_2345F9484(uint64_t *a1)
{
  return 1;
}

uint64_t sub_2345F94A0(uint64_t *a1)
{
  return MEMORY[0x263F8C248];
}

uint64_t sub_2345F94C4(uint64_t *a1)
{
  return *(void *)sub_2345EF604(a1);
}

BOOL sub_2345F94E0(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIfEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F9524(uint64_t *a1)
{
  sub_2345EF604(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762900, v1);
}

std::type_info *sub_2345F954C(uint64_t *a1)
{
  return &stru_26E762900;
}

void sub_2345F9570(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EF604(a1);
  *(void *)(a2 + 8) = &off_26E763BB0;
  sub_2345F97E0();
}

uint64_t *sub_2345F95B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x10A0C407A159F4ELL);
  }
  return a1;
}

unint64_t sub_2345F9620(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (float *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      float v4 = *v2++;
      float v5 = v4;
      if (v4 == 0.0) {
        float v5 = 0.0;
      }
      unint64_t v1 = LODWORD(v5) + ((v1 + LODWORD(v5) + (v1 + LODWORD(v5)) * (v1 + LODWORD(v5))) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2345F9674(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  float v5 = (float *)a1[4];
  uint64_t v6 = *(float **)(a2 + 32);
  uint64_t v7 = 4 * *a1 - 4;
  do
  {
    float v8 = *v5++;
    float v9 = v8;
    float v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

uint64_t sub_2345F9714(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EF604(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EF604(a1);
}

uint64_t sub_2345F97CC(void *a1)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_2345F97E0()
{
}

void sub_2345F985C(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2345EF820((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = sub_2345EF820((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      double v16 = sub_2345EF820((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345F9A24(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345F9A44(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345F9CEC(a1);
}

uint64_t sub_2345F9A54(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345F9A70(uint64_t *a1)
{
  unint64_t v1 = (uint64_t *)sub_2345DF5DC(a1);
  return sub_2345F9D54((uint64_t)&v3, v1);
}

BOOL sub_2345F9A9C(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345DF5DC(a1);
  uint64_t v4 = sub_2345DF5DC(a2);
  return sub_2345F9E3C(v3, v4);
}

BOOL sub_2345F9AE4(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345DF5DC(a1);
  return sub_2345F9E3C(v3, a2);
}

uint64_t sub_2345F9B20(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345F9B40(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345F9B98(uint64_t *a1)
{
  return &stru_26E7626C8;
}

uint64_t sub_2345F9BB8(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345F9BD4(uint64_t *a1)
{
  return &stru_26E762800;
}

uint64_t sub_2345F9BF8(uint64_t *a1)
{
  return *(void *)sub_2345DF5DC(a1);
}

BOOL sub_2345F9C14(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345F9C58(uint64_t *a1)
{
  sub_2345DF5DC(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E7626C8, v1);
}

std::type_info *sub_2345F9C80(uint64_t *a1)
{
  return &stru_26E7626C8;
}

void sub_2345F9CA4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345DF5DC(a1);
  *(void *)(a2 + 8) = off_26E763C68;
  sub_2345DEAC0();
}

uint64_t *sub_2345F9CEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345F9D54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (float *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 2;
      sub_2345F9DCC((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345F9DCC(uint64_t result, float *a2)
{
  float v2 = *a2;
  if (*a2 == 0.0) {
    float v2 = 0.0;
  }
  uint64_t v3 = LODWORD(v2);
  if (a2[1] == 0.0) {
    float v4 = 0.0;
  }
  else {
    float v4 = a2[1];
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v4) + ((LODWORD(v4) + v3 + (LODWORD(v4) + v3) * ((unint64_t)LODWORD(v4) + v3)) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v5 += (*(void *)result + v5 + (*(void *)result + v5) * (*(void *)result + v5)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)BOOL result = v5;
  return result;
}

BOOL sub_2345F9E3C(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (float *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  uint64_t v7 = *(float **)(a2 + 32);
  do
  {
    float v8 = *v5;
    float v9 = v5[1];
    v5 += 2;
    float v10 = *v7;
    float v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2345F9EE0(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345DF5DC(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345DF5DC(a1);
}

uint64_t sub_2345F9F98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F28](a2, v3);
}

void sub_2345F9FB0(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2345FA178((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = sub_2345FA178((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      double v16 = sub_2345FA178((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

void *sub_2345FA178(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  float v4 = operator new(v3);
  *float v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2345FA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2345FA21C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]");
      float v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_2345FA178((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        unint64_t v9 = v6;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2345FA2B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345FA2D4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345FA578(a1);
}

uint64_t sub_2345FA2E4(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345FA300(uint64_t *a1)
{
  uint64_t v1 = (unint64_t *)sub_2345F039C(a1);
  return sub_2345FA5E0(v1);
}

BOOL sub_2345FA328(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (void *)sub_2345F039C(a1);
  uint64_t v4 = sub_2345F039C(a2);
  return sub_2345FA634(v3, v4);
}

BOOL sub_2345FA370(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (void *)sub_2345F039C(a1);
  return sub_2345FA634(v3, a2);
}

uint64_t sub_2345FA3AC(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345FA3CC(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345FA424(uint64_t *a1)
{
  return &stru_26E762930;
}

uint64_t sub_2345FA444(uint64_t *a1)
{
  return 1;
}

uint64_t sub_2345FA460(uint64_t *a1)
{
  return MEMORY[0x263F8C240];
}

uint64_t sub_2345FA484(uint64_t *a1)
{
  return *(void *)sub_2345F039C(a1);
}

BOOL sub_2345FA4A0(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIdEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345FA4E4(uint64_t *a1)
{
  sub_2345F039C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762930, v1);
}

std::type_info *sub_2345FA50C(uint64_t *a1)
{
  return &stru_26E762930;
}

void sub_2345FA530(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345F039C(a1);
  *(void *)(a2 + 8) = &off_26E763D20;
  sub_2345F97E0();
}

uint64_t *sub_2345FA578(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x10A0C407A159F4ELL);
  }
  return a1;
}

unint64_t sub_2345FA5E0(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (double *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      double v4 = *v2++;
      double v5 = v4;
      if (v4 == 0.0) {
        double v5 = 0.0;
      }
      unint64_t v1 = *(void *)&v5 + ((v1 + *(void *)&v5 + (v1 + *(void *)&v5) * (v1 + *(void *)&v5)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2345FA634(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  double v5 = (double *)a1[4];
  uint64_t v6 = *(double **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2345FA6D4(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345F039C(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345F039C(a1);
}

uint64_t sub_2345FA78C(void *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_2345FA7A0(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_2345F0794((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      int v20 = sub_2345F0794((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        uint64_t v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      double v16 = sub_2345F0794((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345FA968(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345FA988(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345FAC30(a1);
}

uint64_t sub_2345FA998(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345FA9B4(uint64_t *a1)
{
  unint64_t v1 = (uint64_t *)sub_2345F06B8(a1);
  return sub_2345FAC98((uint64_t)&v3, v1);
}

BOOL sub_2345FA9E0(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345F06B8(a1);
  uint64_t v4 = sub_2345F06B8(a2);
  return sub_2345FAD80(v3, v4);
}

BOOL sub_2345FAA28(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345F06B8(a1);
  return sub_2345FAD80(v3, a2);
}

uint64_t sub_2345FAA64(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345FAA84(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345FAADC(uint64_t *a1)
{
  return &stru_26E762948;
}

uint64_t sub_2345FAAFC(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345FAB18(uint64_t *a1)
{
  return &stru_26E762820;
}

uint64_t sub_2345FAB3C(uint64_t *a1)
{
  return *(void *)sub_2345F06B8(a1);
}

BOOL sub_2345FAB58(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345FAB9C(uint64_t *a1)
{
  sub_2345F06B8(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762948, v1);
}

std::type_info *sub_2345FABC4(uint64_t *a1)
{
  return &stru_26E762948;
}

void sub_2345FABE8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345F06B8(a1);
  *(void *)(a2 + 8) = off_26E763DD8;
  sub_2345DEAC0();
}

uint64_t *sub_2345FAC30(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345FAC98(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 2;
      sub_2345FAD10((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345FAD10(uint64_t result, double *a2)
{
  double v2 = *a2;
  if (*a2 == 0.0) {
    double v2 = 0.0;
  }
  double v3 = v2;
  if (a2[1] == 0.0) {
    double v4 = 0.0;
  }
  else {
    double v4 = a2[1];
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (*(void *)&v4+ ((*(void *)&v4 + *(void *)&v3 + (*(void *)&v4 + *(void *)&v3) * (*(void *)&v4 + *(void *)&v3)) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v5 += (*(void *)result + v5 + (*(void *)result + v5) * (*(void *)result + v5)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)BOOL result = v5;
  return result;
}

BOOL sub_2345FAD80(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  uint64_t v7 = *(double **)(a2 + 32);
  do
  {
    double v8 = *v5;
    double v9 = v5[1];
    v5 += 2;
    double v10 = *v7;
    double v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2345FAE24(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345F06B8(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345F06B8(a1);
}

uint64_t sub_2345FAEDC(void *a1, uint64_t a2)
{
  *a1 += 16;
  return MEMORY[0x270FA3F20](a2);
}

void sub_2345FAEF4(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_2345F0BF8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8);
                  v12[2] = *(void *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)long long v12 = v13;
                  v11 += 3;
                }
                while (3 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 3 * v3;
            do
            {
              double v16 = &v7[v15];
              long long v17 = *v14;
              v16[2] = *((void *)v14 + 2);
              *(_OWORD *)double v16 = v17;
              v15 += 3;
            }
            while (3 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_2345F0BF8((uint64_t)a1, a2);
      uint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 24 * v24;
        unint64_t v27 = v25;
        do
        {
          long long v28 = *(_OWORD *)v7;
          v27[2] = v7[2];
          *(_OWORD *)unint64_t v27 = v28;
          v27 += 3;
          v7 += 3;
          v26 -= 24;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        long long v29 = *a3;
        uint64_t v30 = 3 * v3;
        do
        {
          uint64_t v31 = &v25[v30];
          long long v32 = *v29;
          v31[2] = *((void *)v29 + 2);
          *(_OWORD *)uint64_t v31 = v32;
          v30 += 3;
        }
        while (3 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0xAAAAAAAAAAAAAABLL)
    {
      unint64_t v19 = sub_2345F0BF8((uint64_t)a1, a2);
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = &v19[v20];
        long long v23 = *v21;
        v22[2] = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        v20 += 3;
      }
      while (3 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345FB120(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345FB140(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345FB3E8(a1);
}

uint64_t sub_2345FB150(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345FB16C(uint64_t *a1)
{
  unint64_t v1 = (uint64_t *)sub_2345F0B0C(a1);
  return sub_2345FB450((uint64_t)&v3, v1);
}

BOOL sub_2345FB198(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345F0B0C(a1);
  uint64_t v4 = sub_2345F0B0C(a2);
  return sub_2345FB548(v3, v4);
}

BOOL sub_2345FB1E0(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345F0B0C(a1);
  return sub_2345FB548(v3, a2);
}

uint64_t sub_2345FB21C(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345FB23C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345FB294(uint64_t *a1)
{
  return &stru_26E762960;
}

uint64_t sub_2345FB2B4(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345FB2D0(uint64_t *a1)
{
  return &stru_26E762830;
}

uint64_t sub_2345FB2F4(uint64_t *a1)
{
  return *(void *)sub_2345F0B0C(a1);
}

BOOL sub_2345FB310(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345FB354(uint64_t *a1)
{
  sub_2345F0B0C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762960, v1);
}

std::type_info *sub_2345FB37C(uint64_t *a1)
{
  return &stru_26E762960;
}

void sub_2345FB3A0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345F0B0C(a1);
  *(void *)(a2 + 8) = off_26E763E90;
  sub_2345DEAC0();
}

uint64_t *sub_2345FB3E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345FB450(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      sub_2345FB4C8((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345FB4C8(uint64_t a1, double *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_2345F3BFC((uint64_t)v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2345FB548(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  uint64_t v6 = &v5[3 * *a1];
  for (uint64_t i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2345FB610(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345F0B0C(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345F0B0C(a1);
}

uint64_t sub_2345FB6C8(void *a1, uint64_t a2)
{
  *a1 += 24;
  return MEMORY[0x270FA3F40](a2);
}

void sub_2345FB6E0(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_2345F1058((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)long long v12 = *(_OWORD *)(v9 + v11 * 8);
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 4 * v3;
            do
            {
              double v16 = &v7[v15];
              long long v17 = v14[1];
              *(_OWORD *)double v16 = *v14;
              *((_OWORD *)v16 + 1) = v17;
              v15 += 4;
            }
            while (4 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = *a1;
      }
      uint64_t v26 = sub_2345F1058((uint64_t)a1, a2);
      uint64_t v18 = v26;
      if (v25)
      {
        uint64_t v27 = 32 * v25;
        long long v28 = v26;
        do
        {
          long long v29 = *(_OWORD *)v7;
          long long v30 = *((_OWORD *)v7 + 1);
          v7 += 4;
          *(_OWORD *)long long v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v28 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (v3 < a2)
      {
        uint64_t v31 = *a3;
        uint64_t v32 = 4 * v3;
        do
        {
          id v33 = &v26[v32];
          long long v34 = v31[1];
          *(_OWORD *)id v33 = *v31;
          *((_OWORD *)v33 + 1) = v34;
          v32 += 4;
        }
        while (4 * a2 != v32);
      }
      goto LABEL_31;
    }
    uint64_t v19 = 32 * a2;
    if (32 * a2 / a2 == 32)
    {
      uint64_t v20 = sub_2345F1058((uint64_t)a1, a2);
      uint64_t v18 = v20;
      unint64_t v21 = 0;
      uint64_t v22 = *a3;
      do
      {
        long long v23 = &v20[v21 / 8];
        long long v24 = v22[1];
        *(_OWORD *)long long v23 = *v22;
        *((_OWORD *)v23 + 1) = v24;
        v21 += 32;
      }
      while (v19 != v21);
LABEL_31:
      if (v18 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345FB8BC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345FB8DC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345FBB84(a1);
}

uint64_t sub_2345FB8EC(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345FB908(uint64_t *a1)
{
  unint64_t v1 = (uint64_t *)sub_2345F0F7C(a1);
  return sub_2345FBBEC((uint64_t)&v3, v1);
}

BOOL sub_2345FB934(uint64_t *a1, uint64_t *a2)
{
  char v3 = (void *)sub_2345F0F7C(a1);
  uint64_t v4 = sub_2345F0F7C(a2);
  return sub_2345FBCE8(v3, v4);
}

BOOL sub_2345FB97C(uint64_t *a1, uint64_t a2)
{
  char v3 = (void *)sub_2345F0F7C(a1);
  return sub_2345FBCE8(v3, a2);
}

uint64_t sub_2345FB9B8(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345FB9D8(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345FBA30(uint64_t *a1)
{
  return &stru_26E762978;
}

uint64_t sub_2345FBA50(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345FBA6C(uint64_t *a1)
{
  return &stru_26E762840;
}

uint64_t sub_2345FBA90(uint64_t *a1)
{
  return *(void *)sub_2345F0F7C(a1);
}

BOOL sub_2345FBAAC(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345FBAF0(uint64_t *a1)
{
  sub_2345F0F7C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762978, v1);
}

std::type_info *sub_2345FBB18(uint64_t *a1)
{
  return &stru_26E762978;
}

void sub_2345FBB3C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345F0F7C(a1);
  *(void *)(a2 + 8) = off_26E763F48;
  sub_2345DEAC0();
}

uint64_t *sub_2345FBB84(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345FBBEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 4;
      sub_2345FBC64((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345FBC64(uint64_t a1, double *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_2345F40BC((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2345FBCE8(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  uint64_t v6 = &v5[4 * *a1];
  for (uint64_t i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2345FBDBC(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345F0F7C(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345F0F7C(a1);
}

uint64_t sub_2345FBE74(void *a1, uint64_t a2)
{
  *a1 += 32;
  return MEMORY[0x270FA3F60](a2);
}

void sub_2345FBE8C(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_2345F0024((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)long long v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  long long v16 = *(_OWORD *)(v9 + v11 + 64);
                  long long v17 = *(_OWORD *)(v9 + v11 + 80);
                  long long v18 = *(_OWORD *)(v9 + v11 + 112);
                  *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                  *((_OWORD *)v12 + 7) = v18;
                  *((_OWORD *)v12 + 4) = v16;
                  *((_OWORD *)v12 + 5) = v17;
                  v11 += 128;
                }
                while (v3 << 7 != v11);
              }
            }
            uint64_t v19 = *a3;
            unint64_t v20 = v3 << 7;
            do
            {
              unint64_t v21 = (_OWORD *)((char *)v7 + v20);
              long long v22 = *v19;
              long long v23 = v19[1];
              long long v24 = v19[3];
              _OWORD v21[2] = v19[2];
              v21[3] = v24;
              *unint64_t v21 = v22;
              v21[1] = v23;
              long long v25 = v19[4];
              long long v26 = v19[5];
              long long v27 = v19[7];
              v21[6] = v19[6];
              v21[7] = v27;
              v21[4] = v25;
              v21[5] = v26;
              v20 += 128;
            }
            while (a2 << 7 != v20);
          }
          long long v28 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v40 = a2;
      }
      else {
        unint64_t v40 = *a1;
      }
      float32x4_t v41 = sub_2345F0024((uint64_t)a1, a2);
      long long v28 = v41;
      if (v40)
      {
        unint64_t v42 = v40 << 7;
        uint64_t v43 = v41;
        do
        {
          long long v44 = *(_OWORD *)v7;
          long long v45 = *((_OWORD *)v7 + 1);
          long long v46 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v43 + 3) = v46;
          *(_OWORD *)uint64_t v43 = v44;
          *((_OWORD *)v43 + 1) = v45;
          long long v47 = *((_OWORD *)v7 + 4);
          long long v48 = *((_OWORD *)v7 + 5);
          long long v49 = *((_OWORD *)v7 + 7);
          *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
          *((_OWORD *)v43 + 7) = v49;
          *((_OWORD *)v43 + 4) = v47;
          *((_OWORD *)v43 + 5) = v48;
          v7 += 16;
          v43 += 16;
          v42 -= 128;
        }
        while (v42);
      }
      if (v3 < a2)
      {
        long long v50 = *a3;
        unint64_t v51 = v3 << 7;
        do
        {
          uint64_t v52 = (_OWORD *)((char *)v41 + v51);
          long long v53 = *v50;
          long long v54 = v50[1];
          long long v55 = v50[3];
          v52[2] = v50[2];
          v52[3] = v55;
          _OWORD *v52 = v53;
          v52[1] = v54;
          long long v56 = v50[4];
          long long v57 = v50[5];
          long long v58 = v50[7];
          v52[6] = v50[6];
          v52[7] = v58;
          v52[4] = v56;
          v52[5] = v57;
          v51 += 128;
        }
        while (a2 << 7 != v51);
      }
      goto LABEL_31;
    }
    unint64_t v29 = a2 << 7;
    if ((a2 << 7) / a2 == 128)
    {
      long long v30 = sub_2345F0024((uint64_t)a1, a2);
      long long v28 = v30;
      unint64_t v31 = 0;
      uint64_t v32 = *a3;
      do
      {
        id v33 = &v30[v31 / 8];
        long long v34 = *v32;
        long long v35 = v32[1];
        long long v36 = v32[3];
        *((_OWORD *)v33 + 2) = v32[2];
        *((_OWORD *)v33 + 3) = v36;
        *(_OWORD *)id v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        long long v37 = v32[4];
        long long v38 = v32[5];
        long long v39 = v32[7];
        *((_OWORD *)v33 + 6) = v32[6];
        *((_OWORD *)v33 + 7) = v39;
        *((_OWORD *)v33 + 4) = v37;
        *((_OWORD *)v33 + 5) = v38;
        v31 += 128;
      }
      while (v29 != v31);
LABEL_31:
      if (v28 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v28;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

uint64_t *sub_2345FC0E8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2345FC108(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2345FC3B0(a1);
}

uint64_t sub_2345FC118(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2345FC134(uint64_t *a1)
{
  unint64_t v1 = (uint64_t *)sub_2345EFF28(a1);
  return sub_2345FC418((uint64_t)&v3, v1);
}

uint64_t sub_2345FC160(uint64_t *a1, uint64_t *a2)
{
  char v3 = (uint64_t *)sub_2345EFF28(a1);
  uint64_t v4 = sub_2345EFF28(a2);
  return sub_2345FC558(v3, v4);
}

uint64_t sub_2345FC1A8(uint64_t *a1, uint64_t a2)
{
  char v3 = (uint64_t *)sub_2345EFF28(a1);
  return sub_2345FC558(v3, a2);
}

uint64_t sub_2345FC1E4(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2345FC204(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_2345FC25C(uint64_t *a1)
{
  return &stru_26E762918;
}

uint64_t sub_2345FC27C(uint64_t *a1)
{
  return 1;
}

std::type_info *sub_2345FC298(uint64_t *a1)
{
  return &stru_26E762810;
}

uint64_t sub_2345FC2BC(uint64_t *a1)
{
  return *(void *)sub_2345EFF28(a1);
}

BOOL sub_2345FC2D8(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2345FC31C(uint64_t *a1)
{
  sub_2345EFF28(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E762918, v1);
}

std::type_info *sub_2345FC344(uint64_t *a1)
{
  return &stru_26E762918;
}

void sub_2345FC368(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EFF28(a1);
  *(void *)(a2 + 8) = off_26E764000;
  sub_2345DEAC0();
}

uint64_t *sub_2345FC3B0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_2345FC418(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 16;
      sub_2345FC490((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2345FC490(uint64_t a1, double *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_2345F4594((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2345FC558(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (v5 << 7) - 128;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
    if (!result) {
      break;
    }
    v6 += 128;
    v7 += 128;
    uint64_t v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t sub_2345FC608(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EFF28(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EFF28(a1);
}

uint64_t sub_2345FC6C0(void *a1, uint64_t a2)
{
  *a1 += 128;
  return MEMORY[0x270FA3EC0](a2);
}

void sub_2345FC77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345FC804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2345FC904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2345FD3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v30 = 480;
  while (1)
  {

    uint64_t v31 = *(void *)(v28 + v30 - 16);
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v30 -= 16;
    if (!v30)
    {
      if ((a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v32 = v27[1];
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v33 = v27[2];
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v34 = v27[3];
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v35 = v27[4];
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v36 = v27[5];
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v37 = v27[6];
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v38 = v27[7];
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v39 = v27[8];
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v40 = v27[9];
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v41 = v27[10];
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v42 = v27[11];
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v43 = v27[12];
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x237DC3290](v26, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_2687AA530);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2345FDDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v26 = 0;
  while (1)
  {

    uint64_t v27 = *(void *)(v24 + v26 + 192);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v26 -= 16;
    if (v26 == -208)
    {
      if ((a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x237DC3290](v23, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_2687AA540);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2345FE34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18 = 0;
  while (1)
  {

    uint64_t v19 = *(void *)(v16 + v18 + 64);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v18 -= 16;
    if (v18 == -80)
    {
      if ((a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x237DC3290](v15, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_2687AA550);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2345FF384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v29 = 704;
  while (1)
  {

    uint64_t v30 = *(void *)(v27 + v29 - 16);
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v29 -= 16;
    if (!v29)
    {
      if ((a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v31 = v26[1];
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v32 = v26[2];
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v33 = v26[3];
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v34 = v26[4];
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v35 = v26[5];
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v36 = v26[6];
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v37 = v26[7];
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v38 = v26[8];
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v39 = v26[9];
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v40 = v26[10];
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v41 = v26[11];
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v42 = v26[12];
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v43 = v26[13];
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v44 = v26[14];
      if ((v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v45 = v26[15];
      if ((v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v46 = v26[16];
      if ((v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v47 = v26[17];
      if ((v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v48 = v26[18];
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v49 = v26[19];
      if ((v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v50 = v26[20];
      if ((v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v51 = v26[21];
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v52 = v26[22];
      if ((v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v53 = v26[23];
      if ((v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v54 = v26[24];
      if ((v54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v55 = v26[25];
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v56 = v26[26];
      if ((v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v57 = v26[27];
      if ((v57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x237DC3290](v25, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_2687AA560);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2345FFBE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2687AA578);

  _Unwind_Resume(a1);
}

void sub_2345FFC3C()
{
  v0 = [USKToken alloc];
  MEMORY[0x237DC2530](&v185, "Mesh");
  char v3 = objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v185, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v4, (uint64_t)v3, @"Mesh");

  if ((v185 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = [USKToken alloc];
  MEMORY[0x237DC2530](&v184, "Points");
  uint64_t v8 = objc_msgSend_initWithTfToken_(v5, v6, (uint64_t)&v184, v7);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v9, (uint64_t)v8, @"Points");

  if ((v184 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double v10 = [USKToken alloc];
  MEMORY[0x237DC2530](&v183, "BasisCurves");
  long long v13 = objc_msgSend_initWithTfToken_(v10, v11, (uint64_t)&v183, v12);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v14, (uint64_t)v13, @"BasisCurves");

  if ((v183 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = [USKToken alloc];
  MEMORY[0x237DC2530](&v182, "GeomSubset");
  uint64_t v18 = objc_msgSend_initWithTfToken_(v15, v16, (uint64_t)&v182, v17);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v19, (uint64_t)v18, @"GeomSubset");

  if ((v182 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v20 = [USKToken alloc];
  MEMORY[0x237DC2530](&v181, "Xform");
  uint64_t v23 = objc_msgSend_initWithTfToken_(v20, v21, (uint64_t)&v181, v22);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v24, (uint64_t)v23, @"Xform");

  if ((v181 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = [USKToken alloc];
  MEMORY[0x237DC2530](&v180, "Scope");
  uint64_t v28 = objc_msgSend_initWithTfToken_(v25, v26, (uint64_t)&v180, v27);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v29, (uint64_t)v28, @"Scope");

  if ((v180 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = [USKToken alloc];
  MEMORY[0x237DC2530](&v179, "Material");
  uint64_t v33 = objc_msgSend_initWithTfToken_(v30, v31, (uint64_t)&v179, v32);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v34, (uint64_t)v33, @"Material");

  if ((v179 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = [USKToken alloc];
  MEMORY[0x237DC2530](&v178, "Shader");
  uint64_t v38 = objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v178, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v39, (uint64_t)v38, @"Shader");

  if ((v178 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = [USKToken alloc];
  MEMORY[0x237DC2530](&v177, "Skeleton");
  uint64_t v43 = objc_msgSend_initWithTfToken_(v40, v41, (uint64_t)&v177, v42);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v44, (uint64_t)v43, @"Skeleton");

  if ((v177 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = [USKToken alloc];
  MEMORY[0x237DC2530](&v176, "SkelRoot");
  uint64_t v48 = objc_msgSend_initWithTfToken_(v45, v46, (uint64_t)&v176, v47);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v49, (uint64_t)v48, @"SkelRoot");

  if ((v176 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = [USKToken alloc];
  MEMORY[0x237DC2530](&v175, "SkelAnimation");
  uint64_t v53 = objc_msgSend_initWithTfToken_(v50, v51, (uint64_t)&v175, v52);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v54, (uint64_t)v53, @"SkelAnimation");

  if ((v175 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = [USKToken alloc];
  MEMORY[0x237DC2530](&v174, "BlendShape");
  long long v58 = objc_msgSend_initWithTfToken_(v55, v56, (uint64_t)&v174, v57);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v59, (uint64_t)v58, @"BlendShape");

  if ((v174 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = [USKToken alloc];
  MEMORY[0x237DC2530](&v173, "Cube");
  v63 = objc_msgSend_initWithTfToken_(v60, v61, (uint64_t)&v173, v62);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v64, (uint64_t)v63, @"Cube");

  if ((v173 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v173 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v65 = [USKToken alloc];
  MEMORY[0x237DC2530](&v172, "Cone");
  v68 = objc_msgSend_initWithTfToken_(v65, v66, (uint64_t)&v172, v67);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v69, (uint64_t)v68, @"Cone");

  if ((v172 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v70 = [USKToken alloc];
  MEMORY[0x237DC2530](&v171, "Capsule");
  uint64_t v73 = objc_msgSend_initWithTfToken_(v70, v71, (uint64_t)&v171, v72);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v74, (uint64_t)v73, @"Capsule");

  if ((v171 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v171 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v75 = [USKToken alloc];
  MEMORY[0x237DC2530](&v170, "Cylinder");
  uint64_t v78 = objc_msgSend_initWithTfToken_(v75, v76, (uint64_t)&v170, v77);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v79, (uint64_t)v78, @"Cylinder");

  if ((v170 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v80 = [USKToken alloc];
  MEMORY[0x237DC2530](&v169, "Sphere");
  float32x4_t v83 = objc_msgSend_initWithTfToken_(v80, v81, (uint64_t)&v169, v82);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v84, (uint64_t)v83, @"Sphere");

  if ((v169 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v85 = [USKToken alloc];
  MEMORY[0x237DC2530](&v168, "Camera");
  float32x4_t v88 = objc_msgSend_initWithTfToken_(v85, v86, (uint64_t)&v168, v87);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v89, (uint64_t)v88, @"Camera");

  if ((v168 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v90 = [USKToken alloc];
  MEMORY[0x237DC2530](&v167, "SpatialAudio");
  uint64_t v93 = objc_msgSend_initWithTfToken_(v90, v91, (uint64_t)&v167, v92);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v94, (uint64_t)v93, @"SpatialAudio");

  if ((v167 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v95 = [USKToken alloc];
  MEMORY[0x237DC2530](&v166, "PhysicsScene");
  float32x2_t v98 = objc_msgSend_initWithTfToken_(v95, v96, (uint64_t)&v166, v97);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v99, (uint64_t)v98, @"PhysicsScene");

  if ((v166 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v100 = [USKToken alloc];
  MEMORY[0x237DC2530](&v165, "PhysicsCollisionGroup");
  float32x2_t v103 = objc_msgSend_initWithTfToken_(v100, v101, (uint64_t)&v165, v102);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v104, (uint64_t)v103, @"PhysicsCollisionGroup");

  if ((v165 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v165 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int32x4_t v105 = [USKToken alloc];
  MEMORY[0x237DC2530](&v164, "Preliminary_Text");
  float32x4_t v108 = objc_msgSend_initWithTfToken_(v105, v106, (uint64_t)&v164, v107);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v109, (uint64_t)v108, @"Preliminary_Text");

  if ((v164 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int32x4_t v110 = [USKToken alloc];
  MEMORY[0x237DC2530](&v163, "Preliminary_ReferenceImage");
  uint64_t v113 = objc_msgSend_initWithTfToken_(v110, v111, (uint64_t)&v163, v112);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v114, (uint64_t)v113, @"Preliminary_ReferenceImage");

  if ((v163 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int32x4_t v115 = [USKToken alloc];
  MEMORY[0x237DC2530](&v162, "Preliminary_PhysicsForce");
  int32x4_t v118 = objc_msgSend_initWithTfToken_(v115, v116, (uint64_t)&v162, v117);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v119, (uint64_t)v118, @"Preliminary_PhysicsForce");

  if ((v162 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v120 = [USKToken alloc];
  MEMORY[0x237DC2530](&v161, "Preliminary_PhysicsGravitationalForce");
  uint64_t v123 = objc_msgSend_initWithTfToken_(v120, v121, (uint64_t)&v161, v122);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v124, (uint64_t)v123, @"Preliminary_PhysicsGravitationalForce");

  if ((v161 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v161 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v125 = [USKToken alloc];
  MEMORY[0x237DC2530](&v160, "Preliminary_InfiniteColliderPlane");
  int v128 = objc_msgSend_initWithTfToken_(v125, v126, (uint64_t)&v160, v127);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v129, (uint64_t)v128, @"Preliminary_InfiniteColliderPlane");

  if ((v160 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v130 = [USKToken alloc];
  MEMORY[0x237DC2530](&v159, "Preliminary_Behavior");
  int v133 = objc_msgSend_initWithTfToken_(v130, v131, (uint64_t)&v159, v132);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v134, (uint64_t)v133, @"Preliminary_Behavior");

  if ((v159 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v159 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v135 = [USKToken alloc];
  MEMORY[0x237DC2530](&v158, "Preliminary_Trigger");
  int v138 = objc_msgSend_initWithTfToken_(v135, v136, (uint64_t)&v158, v137);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v139, (uint64_t)v138, @"Preliminary_Trigger");

  if ((v158 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v140 = [USKToken alloc];
  MEMORY[0x237DC2530](&v157, "Preliminary_Action");
  uint64_t v143 = objc_msgSend_initWithTfToken_(v140, v141, (uint64_t)&v157, v142);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v144, (uint64_t)v143, @"Preliminary_Action");

  if ((v157 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v145 = [USKToken alloc];
  uint64_t v156 = 0;
  int v148 = objc_msgSend_initWithTfToken_(v145, v146, (uint64_t)&v156, v147);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v149, (uint64_t)v148, (uint64_t)&stru_26E764AB8);

  if ((v156 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v150 = [USKToken alloc];
  uint64_t v155 = 0;
  int v153 = objc_msgSend_initWithTfToken_(v150, v151, (uint64_t)&v155, v152);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA570, v154, (uint64_t)v153, @"Unknown");

  if ((v155 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2346007E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = v10;

  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_234600CD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2687AA590);

  _Unwind_Resume(a1);
}

void sub_234600D2C()
{
  v0 = [USKToken alloc];
  MEMORY[0x237DC2530](&v35, "Color");
  char v3 = objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v35, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA588, v4, (uint64_t)v3, @"Color");

  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = [USKToken alloc];
  MEMORY[0x237DC2530](&v34, "Normal");
  uint64_t v8 = objc_msgSend_initWithTfToken_(v5, v6, (uint64_t)&v34, v7);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA588, v9, (uint64_t)v8, @"Normal");

  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double v10 = [USKToken alloc];
  MEMORY[0x237DC2530](&v33, "TextureCoordinate");
  long long v13 = objc_msgSend_initWithTfToken_(v10, v11, (uint64_t)&v33, v12);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA588, v14, (uint64_t)v13, @"TextureCoordinate");

  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = [USKToken alloc];
  MEMORY[0x237DC2530](&v32, "Point");
  uint64_t v18 = objc_msgSend_initWithTfToken_(v15, v16, (uint64_t)&v32, v17);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA588, v19, (uint64_t)v18, @"Point");

  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v20 = [USKToken alloc];
  MEMORY[0x237DC2530](&v31, "Vector");
  uint64_t v23 = objc_msgSend_initWithTfToken_(v20, v21, (uint64_t)&v31, v22);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA588, v24, (uint64_t)v23, @"Vector");

  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = [USKToken alloc];
  uint64_t v30 = 0;
  uint64_t v28 = objc_msgSend_initWithTfToken_(v25, v26, (uint64_t)&v30, v27);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA588, v29, (uint64_t)v28, @"None");

  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_234600F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v10 = v9;

  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_2346011BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2687AA5A8);

  _Unwind_Resume(a1);
}

void sub_234601214()
{
  v0 = [USKToken alloc];
  MEMORY[0x237DC2530](&v281, "double");
  char v3 = objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v281, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v4, (uint64_t)v3, @"double");

  if ((v281 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v281 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = [USKToken alloc];
  MEMORY[0x237DC2530](&v280, "double2");
  uint64_t v8 = objc_msgSend_initWithTfToken_(v5, v6, (uint64_t)&v280, v7);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v9, (uint64_t)v8, @"double2");

  if ((v280 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v280 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double v10 = [USKToken alloc];
  MEMORY[0x237DC2530](&v279, "double3");
  long long v13 = objc_msgSend_initWithTfToken_(v10, v11, (uint64_t)&v279, v12);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v14, (uint64_t)v13, @"double3");

  if ((v279 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v279 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = [USKToken alloc];
  MEMORY[0x237DC2530](&v278, "double4");
  uint64_t v18 = objc_msgSend_initWithTfToken_(v15, v16, (uint64_t)&v278, v17);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v19, (uint64_t)v18, @"double4");

  if ((v278 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v278 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v20 = [USKToken alloc];
  MEMORY[0x237DC2530](&v277, "matrix4d");
  uint64_t v23 = objc_msgSend_initWithTfToken_(v20, v21, (uint64_t)&v277, v22);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v24, (uint64_t)v23, @"double4x4");

  if ((v277 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v277 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = [USKToken alloc];
  MEMORY[0x237DC2530](&v276, "double[]");
  uint64_t v28 = objc_msgSend_initWithTfToken_(v25, v26, (uint64_t)&v276, v27);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v29, (uint64_t)v28, @"double[]");

  if ((v276 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v276 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = [USKToken alloc];
  MEMORY[0x237DC2530](&v275, "double2[]");
  uint64_t v33 = objc_msgSend_initWithTfToken_(v30, v31, (uint64_t)&v275, v32);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v34, (uint64_t)v33, @"double2[]");

  if ((v275 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v275 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = [USKToken alloc];
  MEMORY[0x237DC2530](&v274, "double3[]");
  uint64_t v38 = objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v274, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v39, (uint64_t)v38, @"double3[]");

  if ((v274 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v274 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = [USKToken alloc];
  MEMORY[0x237DC2530](&v273, "double4[]");
  uint64_t v43 = objc_msgSend_initWithTfToken_(v40, v41, (uint64_t)&v273, v42);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v44, (uint64_t)v43, @"double4[]");

  if ((v273 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v273 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = [USKToken alloc];
  MEMORY[0x237DC2530](&v272, "matrix4d[]");
  uint64_t v48 = objc_msgSend_initWithTfToken_(v45, v46, (uint64_t)&v272, v47);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v49, (uint64_t)v48, @"double4x4[]");

  if ((v272 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v272 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = [USKToken alloc];
  MEMORY[0x237DC2530](&v271, "half");
  uint64_t v53 = objc_msgSend_initWithTfToken_(v50, v51, (uint64_t)&v271, v52);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v54, (uint64_t)v53, @"half");

  if ((v271 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v271 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = [USKToken alloc];
  MEMORY[0x237DC2530](&v270, "half2");
  long long v58 = objc_msgSend_initWithTfToken_(v55, v56, (uint64_t)&v270, v57);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v59, (uint64_t)v58, @"half2");

  if ((v270 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v270 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = [USKToken alloc];
  MEMORY[0x237DC2530](&v269, "half3");
  v63 = objc_msgSend_initWithTfToken_(v60, v61, (uint64_t)&v269, v62);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v64, (uint64_t)v63, @"half3");

  if ((v269 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v269 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v65 = [USKToken alloc];
  MEMORY[0x237DC2530](&v268, "half4");
  v68 = objc_msgSend_initWithTfToken_(v65, v66, (uint64_t)&v268, v67);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v69, (uint64_t)v68, @"half4");

  if ((v268 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v268 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v70 = [USKToken alloc];
  MEMORY[0x237DC2530](&v267, "half[]");
  uint64_t v73 = objc_msgSend_initWithTfToken_(v70, v71, (uint64_t)&v267, v72);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v74, (uint64_t)v73, @"half[]");

  if ((v267 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v267 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v75 = [USKToken alloc];
  MEMORY[0x237DC2530](&v266, "half2[]");
  uint64_t v78 = objc_msgSend_initWithTfToken_(v75, v76, (uint64_t)&v266, v77);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v79, (uint64_t)v78, @"half2[]");

  if ((v266 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v266 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v80 = [USKToken alloc];
  MEMORY[0x237DC2530](&v265, "half3[]");
  float32x4_t v83 = objc_msgSend_initWithTfToken_(v80, v81, (uint64_t)&v265, v82);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v84, (uint64_t)v83, @"half3[]");

  if ((v265 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v265 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v85 = [USKToken alloc];
  MEMORY[0x237DC2530](&v264, "half4[]");
  float32x4_t v88 = objc_msgSend_initWithTfToken_(v85, v86, (uint64_t)&v264, v87);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v89, (uint64_t)v88, @"half4[]");

  if ((v264 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v264 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v90 = [USKToken alloc];
  MEMORY[0x237DC2530](&v263, "float");
  uint64_t v93 = objc_msgSend_initWithTfToken_(v90, v91, (uint64_t)&v263, v92);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v94, (uint64_t)v93, @"float");

  if ((v263 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v263 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v95 = [USKToken alloc];
  MEMORY[0x237DC2530](&v262, "float2");
  float32x2_t v98 = objc_msgSend_initWithTfToken_(v95, v96, (uint64_t)&v262, v97);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v99, (uint64_t)v98, @"float2");

  if ((v262 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v262 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float32x4_t v100 = [USKToken alloc];
  MEMORY[0x237DC2530](&v261, "float3");
  float32x2_t v103 = objc_msgSend_initWithTfToken_(v100, v101, (uint64_t)&v261, v102);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v104, (uint64_t)v103, @"float3");

  if ((v261 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v261 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int32x4_t v105 = [USKToken alloc];
  MEMORY[0x237DC2530](&v260, "float4");
  float32x4_t v108 = objc_msgSend_initWithTfToken_(v105, v106, (uint64_t)&v260, v107);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v109, (uint64_t)v108, @"float4");

  if ((v260 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v260 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int32x4_t v110 = [USKToken alloc];
  MEMORY[0x237DC2530](&v259, "matrix4f");
  uint64_t v113 = objc_msgSend_initWithTfToken_(v110, v111, (uint64_t)&v259, v112);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v114, (uint64_t)v113, @"float4x4");

  if ((v259 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v259 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int32x4_t v115 = [USKToken alloc];
  MEMORY[0x237DC2530](&v258, "float[]");
  int32x4_t v118 = objc_msgSend_initWithTfToken_(v115, v116, (uint64_t)&v258, v117);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v119, (uint64_t)v118, @"float[]");

  if ((v258 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v258 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v120 = [USKToken alloc];
  MEMORY[0x237DC2530](&v257, "float2[]");
  uint64_t v123 = objc_msgSend_initWithTfToken_(v120, v121, (uint64_t)&v257, v122);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v124, (uint64_t)v123, @"float2[]");

  if ((v257 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v257 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v125 = [USKToken alloc];
  MEMORY[0x237DC2530](&v256, "float3[]");
  int v128 = objc_msgSend_initWithTfToken_(v125, v126, (uint64_t)&v256, v127);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v129, (uint64_t)v128, @"float3[]");

  if ((v256 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v256 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v130 = [USKToken alloc];
  MEMORY[0x237DC2530](&v255, "float4[]");
  int v133 = objc_msgSend_initWithTfToken_(v130, v131, (uint64_t)&v255, v132);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v134, (uint64_t)v133, @"float4[]");

  if ((v255 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v255 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v135 = [USKToken alloc];
  MEMORY[0x237DC2530](&v254, "matrix4f[]");
  int v138 = objc_msgSend_initWithTfToken_(v135, v136, (uint64_t)&v254, v137);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v139, (uint64_t)v138, @"float4x4[]");

  if ((v254 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v254 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v140 = [USKToken alloc];
  MEMORY[0x237DC2530](&v253, "int");
  uint64_t v143 = objc_msgSend_initWithTfToken_(v140, v141, (uint64_t)&v253, v142);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v144, (uint64_t)v143, @"int");

  if ((v253 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v253 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v145 = [USKToken alloc];
  MEMORY[0x237DC2530](&v252, "int[]");
  int v148 = objc_msgSend_initWithTfToken_(v145, v146, (uint64_t)&v252, v147);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v149, (uint64_t)v148, @"int[]");

  if ((v252 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v252 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v150 = [USKToken alloc];
  MEMORY[0x237DC2530](&v251, "BOOL");
  int v153 = objc_msgSend_initWithTfToken_(v150, v151, (uint64_t)&v251, v152);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v154, (uint64_t)v153, @"BOOL");

  if ((v251 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v251 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v155 = [USKToken alloc];
  MEMORY[0x237DC2530](&v250, "BOOL[]");
  uint64_t v158 = objc_msgSend_initWithTfToken_(v155, v156, (uint64_t)&v250, v157);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v159, (uint64_t)v158, @"BOOL[]");

  if ((v250 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v250 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v160 = [USKToken alloc];
  MEMORY[0x237DC2530](&v249, "uint");
  uint64_t v163 = objc_msgSend_initWithTfToken_(v160, v161, (uint64_t)&v249, v162);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v164, (uint64_t)v163, @"uint");

  if ((v249 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v249 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v165 = [USKToken alloc];
  MEMORY[0x237DC2530](&v248, "uint[]");
  uint64_t v168 = objc_msgSend_initWithTfToken_(v165, v166, (uint64_t)&v248, v167);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v169, (uint64_t)v168, @"uint[]");

  if ((v248 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v248 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v170 = [USKToken alloc];
  MEMORY[0x237DC2530](&v247, "timecode");
  uint64_t v173 = objc_msgSend_initWithTfToken_(v170, v171, (uint64_t)&v247, v172);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v174, (uint64_t)v173, @"timecode");

  if ((v247 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v247 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v175 = [USKToken alloc];
  MEMORY[0x237DC2530](&v246, "token");
  uint64_t v178 = objc_msgSend_initWithTfToken_(v175, v176, (uint64_t)&v246, v177);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v179, (uint64_t)v178, @"token");

  if ((v246 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v246 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v180 = [USKToken alloc];
  MEMORY[0x237DC2530](&v245, "token[]");
  uint64_t v183 = objc_msgSend_initWithTfToken_(v180, v181, (uint64_t)&v245, v182);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v184, (uint64_t)v183, @"token[]");

  if ((v245 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v245 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v185 = [USKToken alloc];
  MEMORY[0x237DC2530](&v244, "string");
  v188 = objc_msgSend_initWithTfToken_(v185, v186, (uint64_t)&v244, v187);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v189, (uint64_t)v188, @"string");

  if ((v244 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v244 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v190 = [USKToken alloc];
  MEMORY[0x237DC2530](&v243, "string[]");
  v193 = objc_msgSend_initWithTfToken_(v190, v191, (uint64_t)&v243, v192);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v194, (uint64_t)v193, @"string[]");

  if ((v243 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v243 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v195 = [USKToken alloc];
  MEMORY[0x237DC2530](&v242, "quatf");
  v198 = objc_msgSend_initWithTfToken_(v195, v196, (uint64_t)&v242, v197);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v199, (uint64_t)v198, @"quatf");

  if ((v242 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v242 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v200 = [USKToken alloc];
  MEMORY[0x237DC2530](&v241, "quatf[]");
  v203 = objc_msgSend_initWithTfToken_(v200, v201, (uint64_t)&v241, v202);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v204, (uint64_t)v203, @"quatf[]");

  if ((v241 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v241 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v205 = [USKToken alloc];
  MEMORY[0x237DC2530](&v240, "rel");
  v208 = objc_msgSend_initWithTfToken_(v205, v206, (uint64_t)&v240, v207);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v209, (uint64_t)v208, @"rel");

  if ((v240 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v240 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v210 = [USKToken alloc];
  MEMORY[0x237DC2530](&v239, "rel");
  v213 = objc_msgSend_initWithTfToken_(v210, v211, (uint64_t)&v239, v212);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v214, (uint64_t)v213, @"rel");

  if ((v239 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v239 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v215 = [USKToken alloc];
  MEMORY[0x237DC2530](&v238, "asset[]");
  v218 = objc_msgSend_initWithTfToken_(v215, v216, (uint64_t)&v238, v217);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v219, (uint64_t)v218, @"asset[]");

  if ((v238 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v238 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v220 = [USKToken alloc];
  MEMORY[0x237DC2530](&v237, "asset");
  v223 = objc_msgSend_initWithTfToken_(v220, v221, (uint64_t)&v237, v222);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v224, (uint64_t)v223, @"asset");

  if ((v237 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v237 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v225 = [USKToken alloc];
  MEMORY[0x237DC2530](&v236, "asset");
  v228 = objc_msgSend_initWithTfToken_(v225, v226, (uint64_t)&v236, v227);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v229, (uint64_t)v228, @"asset");

  if ((v236 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v236 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v230 = [USKToken alloc];
  uint64_t v235 = 0;
  v233 = objc_msgSend_initWithTfToken_(v230, v231, (uint64_t)&v235, v232);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5A0, v234, (uint64_t)v233, @"unknown");

  if ((v235 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v235 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2346023D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = v10;

  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_234602A80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2687AA5C0);

  _Unwind_Resume(a1);
}

void sub_234602AD8()
{
  v0 = [USKToken alloc];
  MEMORY[0x237DC2530](&v77, "BindingAPI");
  char v3 = objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v77, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v4, (uint64_t)v3, @"BindingAPI");

  if ((v77 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = [USKToken alloc];
  MEMORY[0x237DC2530](&v76, "Preliminary_AnchoringAPI");
  uint64_t v8 = objc_msgSend_initWithTfToken_(v5, v6, (uint64_t)&v76, v7);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v9, (uint64_t)v8, @"Preliminary_AnchoringAPI");

  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double v10 = [USKToken alloc];
  MEMORY[0x237DC2530](&v75, "MaterialBindingAPI");
  long long v13 = objc_msgSend_initWithTfToken_(v10, v11, (uint64_t)&v75, v12);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v14, (uint64_t)v13, @"MaterialBindingAPI");

  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = [USKToken alloc];
  MEMORY[0x237DC2530](&v74, "PhysicsRigidBodyAPI");
  uint64_t v18 = objc_msgSend_initWithTfToken_(v15, v16, (uint64_t)&v74, v17);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v19, (uint64_t)v18, @"PhysicsRigidBodyAPI");

  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v20 = [USKToken alloc];
  MEMORY[0x237DC2530](&v73, "PhysicsMassAPI");
  uint64_t v23 = objc_msgSend_initWithTfToken_(v20, v21, (uint64_t)&v73, v22);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v24, (uint64_t)v23, @"PhysicsMassAPI");

  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = [USKToken alloc];
  MEMORY[0x237DC2530](&v72, "PhysicsCollisionAPI");
  uint64_t v28 = objc_msgSend_initWithTfToken_(v25, v26, (uint64_t)&v72, v27);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v29, (uint64_t)v28, @"PhysicsCollisionAPI");

  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = [USKToken alloc];
  MEMORY[0x237DC2530](&v71, "PhysicsMeshCollisionAPI");
  uint64_t v33 = objc_msgSend_initWithTfToken_(v30, v31, (uint64_t)&v71, v32);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v34, (uint64_t)v33, @"PhysicsMeshCollisionAPI");

  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = [USKToken alloc];
  MEMORY[0x237DC2530](&v70, "PhysicsMaterialAPI");
  uint64_t v38 = objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v70, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v39, (uint64_t)v38, @"PhysicsMaterialAPI");

  if ((v70 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = [USKToken alloc];
  MEMORY[0x237DC2530](&v69, "PhysicsFilteredPairsAPI");
  uint64_t v43 = objc_msgSend_initWithTfToken_(v40, v41, (uint64_t)&v69, v42);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v44, (uint64_t)v43, @"PhysicsFilteredPairsAPI");

  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = [USKToken alloc];
  MEMORY[0x237DC2530](&v68, "Preliminary_PhysicsColliderAPI");
  uint64_t v48 = objc_msgSend_initWithTfToken_(v45, v46, (uint64_t)&v68, v47);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v49, (uint64_t)v48, @"Preliminary_PhysicsColliderAPI");

  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = [USKToken alloc];
  MEMORY[0x237DC2530](&v67, "Preliminary_PhysicsMaterialAPI");
  uint64_t v53 = objc_msgSend_initWithTfToken_(v50, v51, (uint64_t)&v67, v52);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v54, (uint64_t)v53, @"Preliminary_PhysicsMaterialAPI");

  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = [USKToken alloc];
  MEMORY[0x237DC2530](&v66, "Preliminary_PhysicsRigidBodyAPI");
  long long v58 = objc_msgSend_initWithTfToken_(v55, v56, (uint64_t)&v66, v57);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v59, (uint64_t)v58, @"Preliminary_PhysicsRigidBodyAPI");

  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = [USKToken alloc];
  uint64_t v65 = 0;
  v63 = objc_msgSend_initWithTfToken_(v60, v61, (uint64_t)&v65, v62);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2687AA5B8, v64, (uint64_t)v63, @"Unknown");

  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_234602FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = v10;

  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_234603270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2346032CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_23460334C((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_234603334(_Unwind_Exception *a1)
{
  sub_234603750(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_23460334C(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = sub_2346033DC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    sub_2346036F4(v7 + 4, a4);
    sub_2345DA234(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_2346033DC(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_234603628((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if (!sub_234603628((uint64_t)(a1 + 2), a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_234603628((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_234603628((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return sub_234603588((uint64_t)a1, a3, a5);
}

void *sub_234603588(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = v4 + 4;
        if (!sub_234603628(v7, a3, v4 + 4)) {
          break;
        }
        unint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_234603628(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_234603628(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v3) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 0;
    }
    return !v6;
  }
  else
  {
    if (v3 == v4) {
      return 0;
    }
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 < v11) {
      return 1;
    }
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      long long v14 = *(const void **)(v9 + 16);
      unint64_t v12 = v9 + 16;
      uint64_t v13 = v14;
      int v15 = *(char *)(v12 + 23);
      uint64_t v18 = *(const void **)(v8 + 16);
      unint64_t v16 = v8 + 16;
      BOOL v17 = v18;
      int v19 = *(char *)(v16 + 23);
      if (v19 >= 0) {
        size_t v20 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        size_t v20 = *(void *)(v16 + 8);
      }
      if (v19 >= 0) {
        unint64_t v21 = (const void *)v16;
      }
      else {
        unint64_t v21 = v17;
      }
      if (v15 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v22 = *(void *)(v12 + 8);
      }
      if (v15 >= 0) {
        uint64_t v23 = (const void *)v12;
      }
      else {
        uint64_t v23 = v13;
      }
      if (v22 >= v20) {
        size_t v24 = v20;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v21, v23, v24);
      if (v25) {
        return v25 < 0;
      }
      else {
        return v20 < v22;
      }
    }
  }
}

uint64_t *sub_2346036F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = (uint64_t)(id)a2[1];
  return a1;
}

void sub_234603750(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_234603750(a1, *a2);
    sub_234603750(a1, a2[1]);

    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void *sub_2346037C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  BOOL v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_234603628(v5, v3 + 4, a2);
    unint64_t v8 = v3 + 1;
    if (!v7)
    {
      unint64_t v8 = v3;
      BOOL v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_234603628(v5, a2, v6 + 4)) {
    return v2;
  }
  return v6;
}

uint64_t *sub_234603854(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v9 = 0;
  BOOL v6 = (uint64_t **)sub_234603588((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_2346038F8((uint64_t)a1, a4, v8);
    sub_2345DA234(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void *sub_2346038F8@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = operator new(0x30uLL);
  *a3 = result;
  a3[1] = v5;
  uint64_t v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_234603A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234603B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234603BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_234603D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234603EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_2345E32B4((uint64_t)va);
  sub_2345E32B4((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_234604074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345E32B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2346041CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2346043F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a17, __int16 a18, char a19, char a20)
{
  sub_2345DBB48(&a10);
  sub_2345DBB48(&a17);
  sub_23460A164((uint64_t)&a18);

  _Unwind_Resume(a1);
}

id sub_234604468()
{
  if (qword_2687AA5D0 != -1) {
    dispatch_once(&qword_2687AA5D0, &unk_26E764138);
  }
  v0 = (void *)qword_2687AA5C8;
  return v0;
}

void sub_234604760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  sub_2345DBB48(&a13);
  sub_2345DBB48(&a14);
  sub_234609474(&a21);
  sub_23460A164((uint64_t)&a22);
  __p = &a26;
  sub_2346090C8((void ***)&__p);
  if (*(char *)(v29 - 49) < 0) {
    operator delete(*(void **)(v29 - 72));
  }

  _Unwind_Resume(a1);
}

void sub_234604984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DBB48((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);

  _Unwind_Resume(a1);
}

void sub_234604B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15, __int16 a16, char a17, char a18)
{
  sub_2345DBB48(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_23460A164((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_234604EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void **a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_2345DBB48(&a12);
  uint64_t v40 = a14;
  if (a14 && atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  sub_234609474(&a19);
  sub_23460A164((uint64_t)&a20);
  a13 = &a24;
  sub_2346090C8(&a13);
  if (a35 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_234605118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2346051F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_23460964C((uint64_t)&a9, a10);
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_2346052BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_2346376C0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2346052D4(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_2346096A8(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_2345DBC38((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

void sub_234605560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(a1);
}

void sub_234605844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(a1);
}

void sub_234605B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_234605B54((uint64_t)va);
  sub_234605B54((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t sub_234605B54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

void sub_234605DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_234605EFC((uint64_t)va);
  sub_234605EFC((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t sub_234605E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)a1;
  if (*(int *)a1 < 2)
  {
    *(_DWORD *)a2 = 2;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    return sub_23460972C(a2, v3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  return result;
}

uint64_t sub_234605EA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

uint64_t sub_234605EFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

void sub_2346062A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_234605EFC((uint64_t)&a9);
  sub_234605EFC((uint64_t)&a13);
  sub_234605B54((uint64_t)&a21);
  sub_234605EA0(v22 - 80);

  _Unwind_Resume(a1);
}

uint64_t sub_234606334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 1)
  {
    return sub_23460972C(a2, 1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void sub_234606948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_234606BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_234606D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, atomic_uint *a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19)
  {
    if (atomic_fetch_add_explicit(a19 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a19 + 8))(a19);
    }
  }

  _Unwind_Resume(a1);
}

void sub_234606FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_2345DBAD4(a17);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_234607038(uint64_t a1)
{
  if (!sub_234609864(a1)) {
    return 0;
  }
  unint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(unint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

void *sub_2346070B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_2346098DC(a1);
  unint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3);
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (v4) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_234607280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_234607830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  sub_234609D58(v25 - 176, *(void **)(v25 - 168));

  _Unwind_Resume(a1);
}

void sub_234607BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_234607EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_2346080EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23460830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2346087E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_2345DAC58(v35 - 168);
  sub_2345DAC58(v35 - 104);

  _Unwind_Resume(a1);
}

void sub_234608B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_234608C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_2346376C0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_234608D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    sub_2346376C0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_234608ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_234608FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)USKScene;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_234608FD4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  uint64_t v3 = 0;
  sub_2345DBB78((int)a1, v1);
  return sub_2345DBB48(&v3);
}

void sub_234609010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DBB48((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_234609084()
{
  qword_2687AA5C8 = (uint64_t)os_log_create("com.apple.usdkit", "uskscene");
  return MEMORY[0x270F9A758]();
}

void sub_2346090C8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_23460911C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_23460911C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    int v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_2345DBAD4(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_234609168(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    return 0;
  }
  if (*(_DWORD *)this == 1) {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this);
  if (*(_DWORD *)this != 3 || result != 1) {
    return *(_DWORD *)this == 4 && result == 8;
  }
  return result;
}

uint64_t sub_2346091F8(uint64_t result)
{
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 48), 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  if (result && add_explicit == 1)
  {
    MEMORY[0x237DC1F90]();
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t *sub_234609250(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2345DDDA0(a1 + 1, a2 + 1);
  return a1;
}

void sub_2346092C8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_23460931C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_23460931C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_23460936C()
{
}

void sub_2346093C4()
{
}

void sub_234609404(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x60C40DF8E1979);
  _Unwind_Resume(a1);
}

uint64_t sub_234609428(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    int v2 = *(_DWORD *)(result + 8);
    if (v2 < 0)
    {
      if (v2 == -1) {
        return MEMORY[0x270FA39F8]();
      }
      int v3 = *(_DWORD *)(result + 8);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 8), (unsigned int *)&v3, v2 - 1, memory_order_relaxed, memory_order_relaxed);
      if (v3 != v2) {
        return MEMORY[0x270FA39F8]();
      }
    }
    else
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_234609474(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t *sub_2346094A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_23460958C((unint64_t *)(v3 + 16), &v7);
    int v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    unint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      unint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_234609574(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_2346376C0(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_23460958C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = atomic_load(a1);
  if (!result) {
    operator new();
  }
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
  return result;
}

void sub_23460964C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_23460964C(a1, *a2);
    sub_23460964C(a1, a2[1]);
    sub_2345F8840((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_2346096A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    int v2 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_2345DBC38((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return sub_23460972C(v3);
  }
  return result;
}

uint64_t sub_23460972C(uint64_t a1, int a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  *(_DWORD *)a1 = a2;
  uint64_t v8 = *a3;
  *(void *)(a1 + 8) = *a3;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)(a1 + 16);
  sub_2345EBC84((_DWORD *)(a1 + 16), a4);
  sub_2345EBCD0((_DWORD *)(a1 + 20), a4 + 1);
  uint64_t v10 = *a5;
  *(void *)(a1 + 24) = *a5;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11 && (*(unsigned char *)(v11 + 57) & 8) == 0 && *(void *)(v11 + 16) == *v9) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  return a1;
}

void sub_23460982C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345E32B4(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    sub_2346091F8(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_234609864(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(*(void *)a1 + 8)))
  {
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return 0;
  }
  return 1;
}

uint64_t sub_2346098DC(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(*(void *)a1 + 8)))
  {
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return 0;
  }
  return 1;
}

void *sub_234609954(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v11 = result;
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    uint64_t v12 = 0;
    sub_2346099EC(result, a4);
    long long v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
    long long v7 = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
    return sub_234609A40(v6, &v9, &v7);
  }
  return result;
}

void sub_2346099D8(_Unwind_Exception *a1)
{
  sub_2346092C8((void ***)(v1 - 48));
  _Unwind_Resume(a1);
}

char *sub_2346099EC(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2345D8238();
  }
  uint64_t result = (char *)sub_2345D82E0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_234609A40(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t result = sub_234609AAC(a1 + 16, (uint64_t)&v8, (uint64_t)&v6, v4);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_234609AA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_234609AAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v11 = a4;
  uint64_t v9 = 0;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  while (!sub_234609B58(a2, a3))
  {
    sub_234609BD8(*(uint64_t **)(a2 + 8), *(void *)(a2 + 16), v11);
    ++*(void *)(a2 + 16);
    v11 += 3;
  }
  LOBYTE(v9) = 1;
  long long v6 = v11;
  sub_234609CD8((uint64_t)v8);
  return v6;
}

void sub_234609B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_234609B58(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  return 0;
}

void *sub_234609BD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (void *)sub_234609864((uint64_t)a1);
  if (result)
  {
    uint64_t v7 = *a1;
    return sub_234609C48(v7, a2, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void *sub_234609C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *result + 24 * a2;
  if (*(char *)(v6 + 23) < 0)
  {
    long long v8 = *(void **)v6;
    unint64_t v9 = *(void *)(v6 + 8);
    return sub_2345DBA34((unsigned char *)a3, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *(void *)(a3 + 16) = *(void *)(v6 + 16);
    *(_OWORD *)a3 = v7;
  }
  return result;
}

uint64_t sub_234609CD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_234609D10(a1);
  }
  return a1;
}

void sub_234609D10(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void sub_234609D58(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_234609D58(a1, *a2);
    sub_234609D58(a1, a2[1]);
    sub_2345DAC58((uint64_t)(a2 + 5));
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t sub_234609DCC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

void sub_234609E10(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        long long v7 = (uint64_t *)a1;
      }
      else {
        long long v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = v5 + 48 * v4;
      long long v10 = *a2;
      *(void *)(v9 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      long long v11 = *(long long *)((char *)a2 + 24);
      *(void *)(v9 + 40) = *((void *)a2 + 5);
      *(_OWORD *)(v9 + 24) = v11;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 1;
    do
    {
      unint64_t v14 = v13;
      v13 *= 2;
    }
    while (v14 < v4 + 1);
    int v15 = sub_2345F8688(a1, v14);
    uint64_t v16 = 3 * v4;
    sub_2345F8898(v12, v12 + 16 * v16, (uint64_t)v15);
    uint64_t v17 = *((void *)a2 + 2);
    uint64_t v18 = &v15[2 * v16];
    *(_OWORD *)uint64_t v18 = *a2;
    v18[2] = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    v18[5] = *((void *)a2 + 5);
    *(_OWORD *)(v18 + 3) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    sub_2345F85B8((void *)a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

uint64_t *sub_234609FCC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_23460958C((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    unint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      unint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_23460A09C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_2346376C0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23460A0B4(uint64_t result)
{
  return result;
}

void sub_23460A0C8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void *sub_23460A0F0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_26E764168;
  a1[1] = 0;
  uint64_t v5 = objc_msgSend_array(MEMORY[0x263EFF980], a2, a3, a4);
  unint64_t v6 = (void *)a1[1];
  a1[1] = v5;

  return a1;
}

void sub_23460A14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_23460A164(uint64_t a1)
{
  return a1;
}

void sub_23460A190(uint64_t a1)
{
  JUMPOUT(0x237DC3290);
}

uint64_t sub_23460A1DC()
{
  if (!atomic_load((unint64_t *)off_264BF46E8)) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  return MEMORY[0x270FA3530]();
}

uint64_t sub_23460A22C()
{
  if (!atomic_load((unint64_t *)off_264BF46E8)) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  return MEMORY[0x270FA3538]();
}

id sub_23460A27C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_firstObject(*(void **)(a1 + 8), a2, a3, a4);
  if ((unint64_t)objc_msgSend_count(*(void **)(a1 + 8), v6, v7, v8) >= 2)
  {
    uint64_t v12 = objc_msgSend_userInfo(v5, v9, v10, v11);
    uint64_t v16 = objc_msgSend_mutableCopy(v12, v13, v14, v15);

    uint64_t v17 = *(void **)(a1 + 8);
    uint64_t v21 = objc_msgSend_count(v17, v18, v19, v20);
    uint64_t v23 = objc_msgSend_subarrayWithRange_(v17, v22, 1, v21 - 1);
    objc_msgSend_setObject_forKey_(v16, v24, (uint64_t)v23, @"AdditionalErrors");
    uint64_t v25 = (void *)MEMORY[0x263F087E8];
    uint64_t v29 = objc_msgSend_domain(v5, v26, v27, v28);
    uint64_t v33 = objc_msgSend_code(v5, v30, v31, v32);
    uint64_t v37 = objc_msgSend_copy(v16, v34, v35, v36);
    uint64_t v39 = objc_msgSend_errorWithDomain_code_userInfo_(v25, v38, (uint64_t)v29, v33, v37);

    uint64_t v5 = (void *)v39;
  }
  return v5;
}

void sub_23460A3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23460A3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23460A488(*(_DWORD *)(a2 + 72), a2 + 40, a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = *(id *)(a1 + 8);
  objc_sync_enter(v5);
  objc_msgSend_addObject_(*(void **)(a1 + 8), v6, (uint64_t)v8, v7);
  objc_sync_exit(v5);
}

void sub_23460A468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

id sub_23460A488(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) >= 0) {
    objc_msgSend_stringWithUTF8String_(NSString, (const char *)a2, a2, a4);
  }
  else {
    objc_msgSend_stringWithUTF8String_(NSString, (const char *)a2, *(void *)a2, a4);
  }
  id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    id v8 = v5;
    int hasPrefix = objc_msgSend_hasPrefix_(v5, v6, @"Usd crate file version mismatch", v7);
  }
  else
  {
    id v8 = @"Unkown error.";
    int hasPrefix = objc_msgSend_hasPrefix_(@"Unkown error.", v6, @"Usd crate file version mismatch", v7);
  }
  int v11 = hasPrefix;
  uint64_t v16 = *MEMORY[0x263F08320];
  v17[0] = v8;
  uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v10, (uint64_t)v17, (uint64_t)&v16, 1);
  if (v11) {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], v12, @"USDKitErrorDomain", 1001, v13);
  }
  else {
  uint64_t v14 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x263F087E8], v12, @"USDKitErrorDomain", a1, v13);
  }

  return v14;
}

void sub_23460A5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23460A5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23460A488(4, a3, a3, a4);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = *(id *)(a1 + 8);
  objc_sync_enter(v5);
  objc_msgSend_addObject_(*(void **)(a1 + 8), v6, (uint64_t)v8, v7);
  objc_sync_exit(v5);
}

void sub_23460A644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_23460A81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v18 - 56) = &a17;
  sub_234612BE8((void ***)(v18 - 56));
  MEMORY[0x237DC21B0](v18 - 80);

  _Unwind_Resume(a1);
}

void sub_23460AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a33 = (void **)(v34 - 104);
  sub_234612BE8(&a33);
  MEMORY[0x237DC21B0](v34 - 72);

  _Unwind_Resume(a1);
}

uint64_t sub_23460AAF4(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  if (!*((unsigned char *)a1 + 132))
  {
    sub_234612C6C((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
  v2[1] = (uint64_t)"usdGeom/xformOp.h";
  v2[2] = (uint64_t)"Set";
  void v2[3] = 399;
  v2[4] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = pxrInte"
                   "rnal__aapl__pxrReserved__::GfMatrix4d]";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(v2, a1);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  if ((v2[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

void sub_23460AD60(_Unwind_Exception *a1)
{
  MEMORY[0x237DC2180](v2 - 120);
  sub_234605B54(v2 - 96);

  _Unwind_Resume(a1);
}

void sub_23460AFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23460B19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_234605B54((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_23460B268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23460B430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_23460B484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 3)
  {
    return sub_23460972C(a2, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t sub_23460B508(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

uint64_t sub_23460B564(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

void sub_23460B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_23460B564((uint64_t)va);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x237DC20E0](va1);

  _Unwind_Resume(a1);
}

uint64_t sub_23460B9A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_2345EBC84((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
  sub_2345EBCD0((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v5;
  unint64_t v6 = (void *)(a2 + 24);
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v24 = 0u;
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[8] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  memset(&v23[24], 0, 24);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v23[32], (const UsdPrim *)v23);
  *((void *)&v24 + 1) = 0;
  *(void *)&v23[32] = MEMORY[0x263F90790] + 16;
  if ((v23[24] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v23[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v23[16]);
  if (*(void *)&v23[8]) {
    sub_2346091F8(*(uint64_t *)&v23[8]);
  }
  uint64_t v22 = 0;
  int v21 = 0;
  while (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
  {
    if (v21 == 2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(&v17, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v23[32], (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
      sub_23460BECC((uint64_t)&v17, (uint64_t)v23);
      *(_DWORD *)a2 = *(_DWORD *)v23;
      uint64_t v10 = *(void *)&v23[8];
      *(void *)&v23[8] = 0;
      uint64_t v11 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v10;
      if (v11) {
        sub_2346091F8(v11);
      }
      sub_2345EBF68(a2 + 16, (int *)&v23[16]);
      sub_2345EBFC0(a2 + 20);
      if (v23 == (unsigned char *)a2)
      {
        uint64_t v12 = *(void *)&v23[24];
      }
      else
      {
        if ((*v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v12 = 0;
        *unint64_t v6 = *(void *)&v23[24];
        *(void *)&v23[24] = 0;
      }
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)&v23[16]);
      if (*(void *)&v23[8]) {
        sub_2346091F8(*(uint64_t *)&v23[8]);
      }
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v21 == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((uint64_t *)v23, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v23[32], (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
        *(_DWORD *)a2 = *(_DWORD *)v23;
        uint64_t v7 = *(void *)&v23[8];
        if (*(void *)&v23[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v23[8] + 48), 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v7;
        if (v8) {
          sub_2346091F8(v8);
        }
        sub_2345EE430(a2 + 16, &v23[16]);
        sub_2345EE488(a2 + 20, &v23[20]);
        sub_2345EC46C((void *)(a2 + 24), &v23[24]);
        if ((v23[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v23[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2345EBD10((uint64_t)&v23[16]);
        uint64_t v9 = *(void *)&v23[8];
        if (!*(void *)&v23[8]) {
          goto LABEL_51;
        }
LABEL_50:
        sub_2346091F8(v9);
        goto LABEL_51;
      }
      sub_2346128E8((uint64_t)&v17, (uint64_t *)&v23[40], &v24);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)v23, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
      *(_DWORD *)a2 = *(_DWORD *)v23;
      uint64_t v13 = *(void *)&v23[8];
      *(void *)&v23[8] = 0;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v13;
      if (v14) {
        sub_2346091F8(v14);
      }
      sub_2345EBF68(a2 + 16, (int *)&v23[16]);
      sub_2345EBFC0(a2 + 20);
      if (v23 == (unsigned char *)a2)
      {
        uint64_t v15 = *(void *)&v23[24];
      }
      else
      {
        if ((*v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v15 = 0;
        *unint64_t v6 = *(void *)&v23[24];
        *(void *)&v23[24] = 0;
      }
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)&v23[16]);
      if (*(void *)&v23[8]) {
        sub_2346091F8(*(uint64_t *)&v23[8]);
      }
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v19);
    uint64_t v9 = v18;
    if (v18) {
      goto LABEL_50;
    }
LABEL_51:
    if ((sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) == 0) {
      break;
    }
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return MEMORY[0x237DC2330](&v23[32]);
}

void sub_23460BDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_234605B54((uint64_t)va);
  sub_23460B564(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_23460BE70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

_DWORD *sub_23460BECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_2345EBC84((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
  uint64_t result = sub_2345EBCD0((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_23460BF54@<X0>(UsdPrim *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v9, a1);
  uint64_t v9 = MEMORY[0x263F90740] + 16;
  if (v10
    && (*(unsigned char *)(v10 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t))(MEMORY[0x263F90740] + 48))(v3))
  {
    memset(&v8, 0, 32);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr((uint64_t *)&v6[32], (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v9);
    MEMORY[0x237DC20C0](&v8, &v6[32]);
    if ((BYTE8(v7) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v7 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v7);
    if (*(void *)&v6[40]) {
      sub_2346091F8(*(uint64_t *)&v6[40]);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      *(_OWORD *)&v6[32] = 0u;
      long long v7 = 0u;
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)&v6[8] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *(void *)&v6[24] = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6[32], (const UsdPrim *)v6);
      *((void *)&v7 + 1) = 0;
      *(void *)&v6[32] = MEMORY[0x263F90790] + 16;
      if ((v6[24] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v6[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)&v6[16]);
      if (*(void *)&v6[8]) {
        sub_2346091F8(*(uint64_t *)&v6[8]);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      if (*(void *)&v6[40]
        && (*(unsigned char *)(*(void *)&v6[40] + 57) & 8) == 0
        && (*(unsigned int (**)(unsigned char *))(*(void *)&v6[32] + 32))(&v6[32]))
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader();
        uint64_t v4 = *((void *)a2 + 1);
        if (v4
          && (*(unsigned char *)(v4 + 57) & 8) == 0
          && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(void *)a2 + 32))(a2))
        {
          memset(v6, 0, 32);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)v6, a2);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        MEMORY[0x237DC20E0](a2);
      }
      MEMORY[0x237DC2330](&v6[32]);
    }
    if (((uint64_t)v8._proxyPrimPath._propPart._poolHandle & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8._proxyPrimPath._propPart._poolHandle & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v8._proxyPrimPath);
    if (v8._prim._p.px) {
      sub_2346091F8((uint64_t)v8._prim._p.px);
    }
  }
  v8._type = 1;
  v8._prim._p.px = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v8._proxyPrimPath._propPart._poolHandle = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, &v8);
  *(void *)a2 = MEMORY[0x263F906F0] + 16;
  if (((uint64_t)v8._proxyPrimPath._propPart._poolHandle & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8._proxyPrimPath._propPart._poolHandle & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v8._proxyPrimPath);
  if (v8._prim._p.px) {
    sub_2346091F8((uint64_t)v8._prim._p.px);
  }
  return MEMORY[0x237DC21C0](&v9);
}

void sub_23460C364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  sub_23460B564((uint64_t)va);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x237DC20E0](v5);
  if ((a5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x237DC2330]((uint64_t *)va1);
  sub_23460B508((uint64_t)va2);
  MEMORY[0x237DC21C0](v6 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_23460C434@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  MEMORY[0x237DC2530](a2, "unknown");
  uint64_t result = sub_234609168(a1);
  if (result)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6, (const UsdPrim *)a1);
    uint64_t v6 = MEMORY[0x263F906F0] + 16;
    if (v7
      && (*(unsigned char *)(v7 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t *))(MEMORY[0x263F906F0] + 48))(&v6))
    {
      long long v4 = 0u;
      long long v5 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v6);
      if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
      if ((BYTE8(v5) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v5 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)&v5);
      if (*((void *)&v4 + 1)) {
        sub_2346091F8(*((uint64_t *)&v4 + 1));
      }
    }
    return MEMORY[0x237DC20E0](&v6);
  }
  return result;
}

void sub_23460C564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x237DC20E0](va);
  if ((*v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

id sub_23460C5B0(uint64_t a1, void *a2)
{
  v74[2] = *MEMORY[0x263EF8340];
  v74[0] = 0;
  v74[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  int v4 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 == 1)
    {
      unsigned int v7 = *(unsigned __int8 *)*a2 - 98;
      BOOL v8 = v7 > 0x10;
      int v9 = (1 << v7) & 0x10021;
      if (!v8 && v9 != 0) {
        goto LABEL_46;
      }
      uint64_t v6 = a2[1];
      if (v6 == 1)
      {
        if (*(unsigned char *)*a2 == 97) {
          goto LABEL_46;
        }
        if ((v4 & 0x80) == 0) {
          goto LABEL_38;
        }
      }
    }
    if (v6 == 3)
    {
      if (*(_WORD *)*a2 == 26482 && *(unsigned char *)(*a2 + 2) == 98) {
        goto LABEL_46;
      }
      uint64_t v6 = a2[1];
    }
    if (v6 != 4) {
      goto LABEL_38;
    }
    long long v5 = (_DWORD *)*a2;
LABEL_37:
    if (*v5 != 1633838962) {
      goto LABEL_38;
    }
LABEL_46:
    v55[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
    int v21 = (unint64_t *)MEMORY[0x263F90560];
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v55, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
      unint64_t v31 = v55[0] & 0xFFFFFFFFFFFFFFF8;
      if ((v55[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v32 = (const char *)(v31 + 16);
        if (*(char *)(v31 + 39) < 0) {
          uint64_t v32 = *(const char **)v32;
        }
      }
      else
      {
        uint64_t v32 = "";
      }
      if (*((char *)a2 + 23) < 0) {
        a2 = (void *)*a2;
      }
      NSLog(&cfstr_WarningIncorre.isa, v32, a2);
      if ((v55[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_73;
    }
    uint64_t v23 = (int *)sub_2345ED5D0(v74);
    int v24 = *v23;
    int v25 = v23[1];
    int v26 = v23[2];
    int v27 = v23[3];
    int v28 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v28 != 1)
      {
        if (v28 != 3) {
          goto LABEL_108;
        }
LABEL_104:
        if (*(_WORD *)a2 == 26482 && *((unsigned char *)a2 + 2) == 98)
        {
          uint64_t v54 = [USKData alloc];
          v65[3] = (char *)&off_26E7630D0 + 2;
          operator new();
        }
        goto LABEL_108;
      }
      int v35 = *(unsigned __int8 *)a2;
      if (v35 != 98)
      {
        if (v35 != 103)
        {
          if (v35 == 114) {
            goto LABEL_77;
          }
          if (v35 != 97) {
            goto LABEL_108;
          }
LABEL_96:
          uint64_t v45 = [USKData alloc];
          uint64_t v67 = &unk_26E762F63;
          int v66 = v27;
          uint64_t v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v21);
          if (!v46) {
            uint64_t v46 = sub_2345DEBD0(MEMORY[0x263F90560]);
          }
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v59, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v46 + 56));
          uint64_t v19 = objc_msgSend_initWithVtValue_typeName_(v45, v47, (uint64_t)&v66, (uint64_t)&v59);
          if ((v59 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v20 = &v66;
          goto LABEL_115;
        }
LABEL_87:
        uint64_t v42 = [USKData alloc];
        uint64_t v71 = &unk_26E762F63;
        int v70 = v25;
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v21);
        if (!v43) {
          uint64_t v43 = sub_2345DEBD0(MEMORY[0x263F90560]);
        }
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v61, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v43 + 56));
        uint64_t v19 = objc_msgSend_initWithVtValue_typeName_(v42, v44, (uint64_t)&v70, (uint64_t)&v61);
        if ((v61 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v20 = &v70;
        goto LABEL_115;
      }
LABEL_82:
      uint64_t v39 = [USKData alloc];
      uint64_t v69 = &unk_26E762F63;
      int v68 = v26;
      uint64_t v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v21);
      if (!v40) {
        uint64_t v40 = sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v60, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v40 + 56));
      uint64_t v19 = objc_msgSend_initWithVtValue_typeName_(v39, v41, (uint64_t)&v68, (uint64_t)&v60);
      if ((v60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v20 = &v68;
      goto LABEL_115;
    }
    uint64_t v33 = a2[1];
    if (v33 != 1) {
      goto LABEL_102;
    }
    int v34 = *(unsigned __int8 *)*a2;
    switch(v34)
    {
      case 'b':
        goto LABEL_82;
      case 'g':
        goto LABEL_87;
      case 'r':
LABEL_77:
        uint64_t v36 = [USKData alloc];
        uint64_t v73 = &unk_26E762F63;
        int v72 = v24;
        uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v21);
        if (!v37) {
          uint64_t v37 = sub_2345DEBD0(MEMORY[0x263F90560]);
        }
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v62, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v37 + 56));
        uint64_t v19 = objc_msgSend_initWithVtValue_typeName_(v36, v38, (uint64_t)&v72, (uint64_t)&v62);
        if ((v62 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v20 = &v72;
        goto LABEL_115;
    }
    uint64_t v33 = a2[1];
    if (v33 != 1) {
      goto LABEL_102;
    }
    if (*(unsigned char *)*a2 == 97) {
      goto LABEL_96;
    }
    if ((v28 & 0x80) != 0)
    {
LABEL_102:
      if (v33 == 3)
      {
        a2 = (void *)*a2;
        goto LABEL_104;
      }
    }
LABEL_108:
    uint64_t v49 = [USKData alloc];
    sub_2345DDDA0(v65, v74);
    uint64_t v50 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_264BF46F0);
    if (!v50) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
    Type = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    uint64_t v57 = 0;
    v55[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v50, Type, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v58, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v55);
    uint64_t v19 = objc_msgSend_initWithVtValue_typeName_(v49, v52, (uint64_t)v65, (uint64_t)&v58);
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v20 = (int *)v65;
    goto LABEL_115;
  }
  if (v4 == 1)
  {
    int v11 = *(unsigned __int8 *)a2;
    BOOL v12 = (v11 - 98) > 0x10 || ((1 << (v11 - 98)) & 0x10021) == 0;
    if (!v12 || v11 == 97) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v4 != 3)
    {
      long long v5 = a2;
      if (v4 != 4) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    if (*(_WORD *)a2 == 26482 && *((unsigned char *)a2 + 2) == 98) {
      goto LABEL_46;
    }
  }
LABEL_38:
  if (!sub_23460CF88(a2, "result"))
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (void *)*a2;
    }
    sub_2346128E8((uint64_t)v55, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    unint64_t v29 = *(void *)sub_23460D01C(v55) & 0xFFFFFFFFFFFFFFF8;
    if (v29)
    {
      uint64_t v30 = (const char *)(v29 + 16);
      if (*(char *)(v29 + 39) < 0) {
        uint64_t v30 = *(const char **)v30;
      }
    }
    else
    {
      uint64_t v30 = "";
    }
    NSLog(&cfstr_UnrecognizedOu.isa, a2, v30);
    sub_234605B54((uint64_t)v55);
LABEL_73:
    uint64_t v19 = 0;
    goto LABEL_116;
  }
  uint64_t v15 = [USKData alloc];
  sub_2345DDDA0(v64, v74);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_264BF46F0);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  uint64_t v17 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  uint64_t v57 = 0;
  v55[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v16, v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v56, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v55);
  uint64_t v19 = objc_msgSend_initWithVtValue_typeName_(v15, v18, (uint64_t)v64, (uint64_t)&v56);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = (int *)v64;
LABEL_115:
  sub_2345DAC58((uint64_t)v20);
LABEL_116:
  sub_2345DAC58((uint64_t)v74);
  return v19;
}

void sub_23460CDB0(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1 - 152);
  sub_2345DAC58(v1 - 88);
  _Unwind_Resume(a1);
}

BOOL sub_23460CF88(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_2346135F0();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_23460D01C(_DWORD *a1)
{
  if (*a1 != 1) {
    return (uint64_t)(a1 + 6);
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2346129F8((uint64_t)a1);
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v1);
}

void sub_23460D7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a31 < 0) {
    operator delete(__p);
  }

  sub_23460B564((uint64_t)&a33);
  MEMORY[0x237DC20E0](&a38);
  sub_23460B564(v42 - 208);
  uint64_t v44 = (void ***)sub_23460BE70(v42 - 144);
  *(void *)(v42 - 144) = v42 - 168;
  sub_234612D18(v44);
  MEMORY[0x237DC20E0](v42 - 112);

  _Unwind_Resume(a1);
}

void sub_23460DE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  MEMORY[0x237DC20E0](v11 - 112);

  _Unwind_Resume(a1);
}

void sub_23460DFDC()
{
}

void sub_23460E434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  MEMORY[0x237DC20E0](v11 - 112);

  _Unwind_Resume(a1);
}

void sub_23460F13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_2345DAC58(v68 - 120);
  sub_23460B564((uint64_t)&a40);
  sub_23460BE70((uint64_t)&a44);
  if ((a49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_234605B54((uint64_t)&a50);
  sub_234605B54((uint64_t)&a54);
  sub_23460B564((uint64_t)&a58);
  sub_23460B564((uint64_t)&a62);
  sub_234605B54((uint64_t)&a66);
  sub_23460B564(v68 - 240);
  int v70 = (void ***)sub_23460BE70(v68 - 176);
  *(void *)(v68 - 176) = v68 - 200;
  sub_234612D18(v70);

  MEMORY[0x237DC20E0](v68 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_23460F38C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_2346091F8(v5);
  }
  sub_2345EE430(a1 + 16, (_DWORD *)(a2 + 16));
  sub_2345EE488(a1 + 20, (_DWORD *)(a2 + 20));
  sub_2345EC46C((void *)(a1 + 24), (void *)(a2 + 24));
  return a1;
}

uint64_t sub_23460F404(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_23460F43C(uint64_t *a1)
{
  if (sub_23460F404((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_2345F169C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_23460F4E0(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((sub_23460F404(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E762B00, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

void sub_23460FDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345DAC58((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_234610430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2346106AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_234610738(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  int v9 = objc_msgSend_property_(v5, v7, (uint64_t)v6, v8);
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v13 = objc_msgSend_data(v9, v10, v11, v12);
  uint64_t v17 = v13;
  if (v13)
  {
    objc_msgSend_value(v13, v14, v15, v16);
  }
  else
  {
    uint64_t v110 = 0;
    uint64_t v111 = 0;
  }

  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v20 = objc_msgSend_stringByAppendingString_(v6, v18, @":indices", v19);
  uint64_t v23 = objc_msgSend_property_(v5, v21, (uint64_t)v20, v22);
  BOOL v24 = v23 == 0;

  if (!v24)
  {
    int v28 = objc_msgSend_stringByAppendingString_(v6, v25, @":indices", v27);
    unint64_t v31 = objc_msgSend_property_(v5, v29, (uint64_t)v28, v30);
    int v35 = objc_msgSend_data(v31, v32, v33, v34);
    uint64_t v39 = v35;
    if (v35)
    {
      objc_msgSend_value(v35, v36, v37, v38);
    }
    else
    {
      v109[0] = 0;
      v109[1] = 0;
    }
    sub_234610EB4(v109, (uint64_t)&v101);
    sub_2345D9DC0((uint64_t)&v98);
    long long v98 = v101;
    long long v99 = v102;
    long long v101 = 0u;
    long long v102 = 0u;
    uint64_t v100 = v103;
    *(void *)&long long v103 = 0;
    sub_2345D9DC0((uint64_t)&v101);
    sub_2345DAC58((uint64_t)v109);
  }
  uint64_t v40 = objc_msgSend_metadata(v9, v25, v26, v27);
  v109[0] = 0;
  MEMORY[0x237DC2530](v109, "constant");
  uint64_t v43 = objc_msgSend_objectForKeyedSubscript_(v40, v41, @"interpolation", v42);
  BOOL v44 = v43 == 0;

  if (!v44)
  {
    uint64_t v47 = objc_msgSend_objectForKeyedSubscript_(v40, v45, @"interpolation", v46);
    uint64_t v51 = v47;
    if (v47) {
      objc_msgSend_value(v47, v48, v49, v50);
    }
    else {
      long long v101 = 0uLL;
    }
    sub_234610F50(&v101, &v97);
    if ((v109[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v109[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v109[0] = v97;
    uint64_t v97 = 0;
    sub_2345DAC58((uint64_t)&v101);
  }
  uint64_t v52 = objc_msgSend_objectForKeyedSubscript_(v40, v45, @"elementSize", v46);
  BOOL v53 = v52 == 0;

  if (v53)
  {
    int v61 = 1;
  }
  else
  {
    uint64_t v56 = objc_msgSend_objectForKeyedSubscript_(v40, v54, @"elementSize", v55);
    uint64_t v60 = v56;
    if (v56) {
      objc_msgSend_value(v56, v57, v58, v59);
    }
    else {
      long long v101 = 0uLL;
    }
    int v61 = sub_234610FE4(&v101);
    sub_2345DAC58((uint64_t)&v101);
  }
  uint64_t v97 = 0;
  uint64_t v62 = objc_msgSend_objectForKeyedSubscript_(v40, v54, @"typeName", v55);
  BOOL v63 = v62 == 0;

  if (!v63)
  {
    int v66 = objc_msgSend_objectForKeyedSubscript_(v40, v64, @"typeName", v65);
    int v70 = v66;
    if (v66) {
      objc_msgSend_value(v66, v67, v68, v69);
    }
    else {
      long long v101 = 0uLL;
    }
    sub_234610F50(&v101, &v96);
    if ((v97 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v71 = v96;
    uint64_t v96 = 0;
    uint64_t v97 = v71;
    sub_2345DAC58((uint64_t)&v101);
  }
  uint64_t v96 = 0;
  id v72 = v6;
  uint64_t v76 = objc_msgSend_UTF8String(v72, v73, v74, v75);
  MEMORY[0x237DC2530](&v96, v76);
  if (objc_msgSend_hasPrefix_(v72, v77, @"primvars:", v78))
  {
    uint64_t v82 = objc_msgSend_length(@"primvars:", v79, v80, v81);
    objc_msgSend_substringFromIndex_(v72, v83, v82, v84);
    id v85 = objc_claimAutoreleasedReturnValue();
    uint64_t v89 = objc_msgSend_UTF8String(v85, v86, v87, v88);
    MEMORY[0x237DC2530](&v101, v89);
    if ((v96 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v96 = v101;
    *(void *)&long long v101 = 0;
  }
  sub_2345DDDA0(&v101, &v110);
  long long v102 = v98;
  long long v103 = v99;
  uint64_t v104 = v100;
  if (v100)
  {
    unint64_t v90 = (atomic_ullong *)(v100 - 16);
    if (*((void *)&v103 + 1)) {
      unint64_t v90 = (atomic_ullong *)*((void *)&v103 + 1);
    }
    atomic_fetch_add_explicit(v90, 1uLL, memory_order_relaxed);
  }
  uint64_t v105 = v96;
  if ((v96 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v91 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_264BF46F0);
  if (!v91) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v91, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v97);
  uint64_t v93 = a1 + 1;
  uint64_t v106 = Type;
  uint64_t v107 = v109[0];
  if ((v109[0] & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v109[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v108 = v61;
  unint64_t v94 = a1[2];
  if (v94 >= a1[3])
  {
    uint64_t v95 = sub_2345DECA0(v93, (uint64_t)&v101);
  }
  else
  {
    sub_2345DEC28((uint64_t)v93, (uint64_t)&v101);
    uint64_t v95 = v94 + 88;
  }
  a1[2] = v95;
  if ((v107 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v105 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0((uint64_t)&v102);
  sub_2345DAC58((uint64_t)&v101);
  if ((v96 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v97 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v109[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  sub_2345D9DC0((uint64_t)&v98);
  sub_2345DAC58((uint64_t)&v110);
}

void sub_234610CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(v8 - 120);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  sub_2345D9DC0((uint64_t)va);
  sub_2345DAC58(v8 - 104);

  _Unwind_Resume(a1);
}

uint64_t sub_234610EB4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_2345EE560((uint64_t)a1))
  {
    return sub_234613020(a1, a2);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    long long v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_OWORD *)(a2 + 16) = v5;
    uint64_t v6 = *(void *)(result + 32);
    *(void *)(a2 + 32) = v6;
    if (v6)
    {
      unsigned int v7 = (atomic_ullong *)(v6 - 16);
      if (*(void *)(a2 + 24)) {
        unsigned int v7 = *(atomic_ullong **)(a2 + 24);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t *sub_234610F50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (sub_2345EC3A0((uint64_t)a1))
  {
    return sub_234613698(a1, a2);
  }
  else
  {
    uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    uint64_t v5 = *result;
    *a2 = *result;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v6;
      }
    }
  }
  return result;
}

uint64_t sub_234610FE4(void *a1)
{
  if ((sub_2345ECD30((uint64_t)a1) & 1) == 0) {
    return *(unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
  return sub_2346137AC(a1);
}

uint64_t sub_234611050(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_inheritedProperty_(v3, v4, @"primvars:normals", v5);

  if (v6)
  {
    int v9 = @"primvars:normals";
  }
  else
  {
    uint64_t v10 = objc_msgSend_property_(v3, v7, @"normals", v8);

    if (!v10)
    {
      uint64_t v11 = 0;
      goto LABEL_6;
    }
    int v9 = @"normals";
  }
  sub_234610738(a1, v3, v9);
  uint64_t v11 = 1;
LABEL_6:

  return v11;
}

void sub_2346110F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_234611100(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = objc_msgSend_inheritedProperty_(v3, v4, @"primvars:tangent", v5);

  if (v6) {
    sub_234610738(a1, v3, @"primvars:tangent");
  }

  return v6 != 0;
}

void sub_234611170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234611FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  STACK[0x3E0] = (unint64_t)&a43;
  sub_234612F60((void ***)&STACK[0x3E0]);
  MEMORY[0x237DC2390](&a46);
  STACK[0x3E0] = (unint64_t)&a59;
  sub_234612B94((void ***)&STACK[0x3E0]);
  sub_2345DAC58(v62 - 248);
  sub_2346124C4((uint64_t)&a62);
  sub_234605B54((uint64_t)&STACK[0x260]);

  _Unwind_Resume(a1);
}

uint64_t sub_234612380(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_2345D8238();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)sub_23461336C(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    long long v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
    *((_OWORD *)v15 + 1) = v16;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *((void *)v15 + 4) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    void v17[2] = v15 + 40;
    sub_2346132F4(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_234613574((uint64_t)v17);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(v7 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_2346124B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_234613574((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2346124C4(uint64_t a1)
{
  id v3 = (void **)(a1 + 112);
  sub_234612AF0(&v3);
  sub_2345D9DC0(a1 + 72);
  sub_2345D9DC0(a1 + 32);
  id v3 = (void **)(a1 + 8);
  sub_234612A58(&v3);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_234612540(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  sub_234612588(a1, a2);
  return a1;
}

void sub_234612574(_Unwind_Exception *a1)
{
  sub_23461288C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_234612588(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 120);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26E7641D0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 120) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 120);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26E7641E0 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

uint64_t sub_234612618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_2346091F8(result);
  }
  return result;
}

void *sub_234612688(uint64_t a1, void *a2)
{
  return sub_234612690(a2);
}

void *sub_234612690(void *a1)
{
  uint64_t v4 = a1[14];
  uint64_t v2 = a1 + 14;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_234612790((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)(a1 + 12));
  uint64_t v5 = (atomic_uint *)a1[7];
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  char v6 = (atomic_uint *)a1[5];
  if (v6 && atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[3];
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)(a1 + 2));
  uint64_t v8 = a1[1];
  if (v8) {
    sub_2346091F8(v8);
  }
  return a1;
}

void sub_234612790(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_2345DBAD4(v2);
    }
    JUMPOUT(0x237DC3290);
  }
}

uint64_t sub_2346127E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_234612800(a2, a3);
}

void sub_2346127F4()
{
}

uint64_t sub_234612800(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_2345EBC84((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_2345EBCD0((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t sub_23461288C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26E7641D0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_2346128E8(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v5 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  char v6 = (void *)(a1 + 16);
  sub_2345EBC84((_DWORD *)(a1 + 16), a3);
  sub_2345EBCD0((_DWORD *)(a1 + 20), a3 + 1);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && *(void *)(v7 + 16) == *v6) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  return a1;
}

void sub_2346129C0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345E32B4(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    sub_2346091F8(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2346129F8(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
    return v2;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    return v3 + 16;
  }
  return MEMORY[0x270FA3B58]();
}

void sub_234612A58(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_2345DF1B8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_234612AF0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_234612B44((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_234612B44(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; sub_2345D9DC0(i))
    i -= 40;
  *(void *)(a1 + 8) = a2;
}

void sub_234612B94(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_234612BE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_23461288C(v4 - 136);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_234612C6C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 120);
  if (v1 == -1) {
    sub_234612CB8();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26E7641F0[v1])(&v4, a1);
}

void sub_234612CB8()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_234612D08(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_234612D10(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA48E8](a2);
}

void sub_234612D18(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_234612DB0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_234612DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_2346091F8(result);
  }
  return result;
}

uint64_t sub_234612E20(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2345DBA1C();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_234612EA8()
{
}

uint64_t sub_234612F04(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void sub_234612F60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 24;
      uint64_t v7 = v4 - 24;
      uint64_t v8 = v4 - 24;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_234613020@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2346130D4(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_2346130BC(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2346130D4(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345F53F0(a1);
}

char *sub_234613168(char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_2345D8238();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v24 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_2345D9644(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v21 = 0;
  v22.i64[0] = 0;
  unint64_t v11 = &v10[8 * v4];
  unint64_t v12 = &v10[8 * v9];
  uint64_t v23 = v12;
  uint64_t v13 = *a2;
  *(void *)unint64_t v11 = *a2;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = v11 + 8;
  v22.i64[1] = (uint64_t)(v11 + 8);
  long long v16 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64((unint64_t)v15);
  }
  else
  {
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v11 - 1) = v17;
      v11 -= 8;
      *(void *)uint64_t v15 = 0;
    }
    while (v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
    uint64_t v14 = (char *)v22.i64[1];
    unint64_t v12 = v23;
  }
  *a1 = v11;
  a1[1] = v14;
  int64x2_t v22 = v18;
  uint64_t v19 = a1[2];
  a1[2] = v12;
  uint64_t v23 = v19;
  uint64_t v21 = v18.i64[0];
  sub_234613290((uint64_t)&v21);
  return v14;
}

uint64_t sub_234613290(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_2346132F4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2346133B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_23461336C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_2345D8328();
  }
  return operator new(40 * a2);
}

uint64_t sub_2346133B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  uint64_t v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      uint64_t v9 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        uint64_t v10 = (atomic_ullong *)(v9 - 16);
        if (*(void *)(v7 - 16)) {
          uint64_t v10 = *(atomic_ullong **)(v7 - 16);
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v16 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((void *)&v16 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_234613470((uint64_t)v13);
  return v11;
}

uint64_t sub_234613470(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2346134A8((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_2346134A8(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_234613520(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_234613520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    sub_2345D9DC0(result);
    uint64_t result = *(void *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_234613574(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2346135AC(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 40;
    sub_2345D9DC0(v4 - 40);
  }
}

void sub_2346135F0()
{
}

void sub_234613608(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_234613664(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264BF4788, MEMORY[0x263F8C068]);
}

void sub_234613650(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_234613664(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t *sub_234613698@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t result = sub_23461371C(a1);
  uint64_t v5 = *result;
  *uint64_t result = 0;
  *a2 = v5;
  uint64_t v6 = a1[1];
  if (v6) {
    BOOL v7 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void *sub_23461371C(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_2346137AC(void *a1)
{
  uint64_t v2 = sub_234613804(a1);
  uint64_t v3 = *v2;
  *uint64_t v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

void *sub_234613804(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return a1;
}

void sub_234613910(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2346139B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234613A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_234613B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_234613BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234613CCC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v1 = 0uLL;
  operator new();
}

void sub_234613D64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_2345DBAD4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_234613D80(uint64_t a1)
{
}

void sub_234613DB8(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v2) {
      sub_2345DBAD4(v2);
    }
    uint64_t v6 = v4[7];
    uint64_t v5 = v4[8];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v7 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
    if (v7) {
      sub_2345DBAD4(v7);
    }
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v8 = v4 + 3;
    uint64_t v9 = (void *)v4[3];
    uint64_t v10 = v3;
    if (v9)
    {
      uint64_t v11 = v3;
      do
      {
        uint64_t v12 = v9;
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v12 = (void *)*v8;
        }
        uint64_t v10 = (std::__shared_weak_count *)v4[4];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v11)
        {
          sub_2345DBAD4(v11);
          sub_2345DBAD4(v11);
        }
        long long v8 = v12 + 3;
        uint64_t v9 = (void *)v12[3];
        uint64_t v11 = v10;
        uint64_t v4 = v12;
      }
      while (v9);
    }
    uint64_t v13 = *(void *)(a1 + 8);
    if (v10) {
      sub_2345DBAD4(v10);
    }
    uint64_t v2 = v3;
    if (!v13)
    {
      long long v14 = 0uLL;
      operator new();
    }
  }
}

void sub_234613F30(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2345DBAD4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_234613F4C()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_2346144BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12)
  {
    sub_2345DBAD4(a12);
    if (!v15)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  sub_2345DBAD4(v15);
  if (!v14)
  {
LABEL_5:
    if (a14) {
      sub_2345DBAD4(a14);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_4:
  sub_2345DBAD4(v14);
  goto LABEL_5;
}

void sub_234614520(uint64_t a1, uint64_t a2)
{
  BOOL v24 = 0;
  int v25 = 0;
  sub_23461477C(a1, a2, &v24);
  uint64_t v3 = v24;
  if (v24)
  {
    uint64_t v4 = v25;
    uint64_t v5 = v25;
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v3[2];
      if (v6)
      {
        BOOL v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7 ? v3[1] : 0;
      }
      else
      {
        uint64_t v8 = 0;
        BOOL v7 = 0;
      }
      if (v8 == *(void *)(a1 + 8) && !v3[3])
      {
        uint64_t v21 = *(void *)(v8 + 56);
        if (v21) {
          break;
        }
      }
      uint64_t v9 = (std::__shared_weak_count *)v3[2];
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10) {
          uint64_t v11 = v3[1];
        }
        else {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
      uint64_t v13 = v3[3];
      uint64_t v12 = v3[4];
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      long long v14 = *(std::__shared_weak_count **)(v11 + 32);
      *(void *)(v11 + 24) = v13;
      *(void *)(v11 + 32) = v12;
      if (v14) {
        sub_2345DBAD4(v14);
      }
      uint64_t v15 = v3[3];
      if (v15)
      {
        uint64_t v17 = v3[1];
        uint64_t v16 = v3[2];
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = *(std::__shared_weak_count **)(v15 + 16);
        *(void *)(v15 + 8) = v17;
        *(void *)(v15 + 16) = v16;
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      uint64_t v19 = (void *)v3[7];
      if (!v19)
      {
        int v20 = 3;
        if (!v10) {
          goto LABEL_37;
        }
LABEL_36:
        sub_2345DBAD4(v10);
        goto LABEL_37;
      }
      uint64_t v4 = (std::__shared_weak_count *)v3[8];
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v25 = v4;
      if (v5) {
        sub_2345DBAD4(v5);
      }
      if (v4)
      {
        sub_2345DBAD4(v4);
        int v20 = 0;
LABEL_31:
        uint64_t v5 = v4;
        goto LABEL_35;
      }
      uint64_t v5 = 0;
      int v20 = 0;
LABEL_35:
      uint64_t v3 = v19;
      if (v10) {
        goto LABEL_36;
      }
LABEL_37:
      if (v7) {
        sub_2345DBAD4(v7);
      }
      if (v20 == 3) {
        goto LABEL_56;
      }
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 64);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int64x2_t v22 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = v10;
    if (v22)
    {
      sub_2345DBAD4(v22);
      uint64_t v21 = *(void *)(a1 + 8);
    }
    uint64_t v23 = *(std::__shared_weak_count **)(v21 + 48);
    *(void *)(v21 + 40) = 0;
    *(void *)(v21 + 48) = 0;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v19 = (void *)v3[7];
    uint64_t v4 = (std::__shared_weak_count *)v3[8];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v25 = v4;
    if (v5) {
      sub_2345DBAD4(v5);
    }
    --*(_DWORD *)a1;
    if (v4) {
      sub_2345DBAD4(v4);
    }
    int v20 = 2;
    goto LABEL_31;
  }
  uint64_t v4 = v25;
LABEL_56:
  if (v4)
  {
    sub_2345DBAD4(v4);
  }
}

void sub_23461477C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  while (1)
  {
    while (1)
    {
      BOOL v7 = v6;
      if (*(_DWORD *)(v5 + 72) == -1 || *(float *)(*(void *)v5 + 4) < *(float *)(a2 + 4)) {
        break;
      }
      if (*(void *)v5 == a2)
      {
        *a3 = v5;
        a3[1] = v6;
        return;
      }
      uint64_t v9 = *(std::__shared_weak_count **)(v5 + 16);
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          uint64_t v11 = *(void *)(v5 + 8);
          if (!v7) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v11 = 0;
          if (!v7) {
            goto LABEL_20;
          }
        }
LABEL_19:
        sub_2345DBAD4(v7);
        goto LABEL_20;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      if (v7) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v5 = *(void *)(v11 + 56);
      if (!v5) {
        goto LABEL_29;
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v11 + 64);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v7 = v10;
      uint64_t v8 = v5;
      if (v10)
      {
LABEL_24:
        sub_2345DBAD4(v7);
        uint64_t v5 = v8;
      }
    }
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      break;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 32);
    if (v6) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v5 = v8;
    if (v7) {
      goto LABEL_24;
    }
  }
  uint64_t v8 = *(void *)(v5 + 56);
  if (v8)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 64);
    if (!v6) {
      goto LABEL_8;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
  uint64_t v10 = v6;
LABEL_29:
  *a3 = 0;
  a3[1] = 0;
  if (v10)
  {
    sub_2345DBAD4(v10);
  }
}

void *sub_2346148E8(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_23461477C(a1, a2, &v10);
  uint64_t v2 = v10;
  if (!v10)
  {
    BOOL v7 = v11;
    if (!v11) {
      return v2;
    }
    goto LABEL_21;
  }
  uint64_t v3 = (void *)v10[7];
  if (v3)
  {
    uint64_t v4 = v11;
    do
    {
      uint64_t v5 = (std::__shared_weak_count *)v2[8];
      uint64_t v2 = v3;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        sub_2345DBAD4(v4);
      }
      uint64_t v3 = (void *)v2[7];
      uint64_t v4 = v5;
    }
    while (v3);
    uint64_t v11 = v5;
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[2];
  if (v6)
  {
    BOOL v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = v2[1];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    BOOL v7 = 0;
  }
  if (v11) {
    sub_2345DBAD4(v11);
  }
  if (*(_DWORD *)(v8 + 72) == -1)
  {
    uint64_t v2 = 0;
    if (!v7) {
      return v2;
    }
    goto LABEL_21;
  }
  uint64_t v2 = *(void **)v8;
  if (v7) {
LABEL_21:
  }
    sub_2345DBAD4(v7);
  return v2;
}

void *sub_2346149D4(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_23461477C(a1, a2, &v8);
  uint64_t v2 = v8;
  if (v8)
  {
    uint64_t v3 = (void *)v8[7];
    if (v3)
    {
      uint64_t v4 = v9;
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)v2[8];
        uint64_t v2 = v3;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v4) {
          sub_2345DBAD4(v4);
        }
        uint64_t v3 = (void *)v2[7];
        uint64_t v4 = v5;
      }
      while (v3);
      uint64_t v9 = v5;
    }
    uint64_t v6 = (void *)v2[3];
    if (v6) {
      uint64_t v2 = (void *)*v6;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  if (v9) {
    sub_2345DBAD4(v9);
  }
  return v2;
}

void sub_234614A74(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_234614AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_234614C6C((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_234614B04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DC3290);
}

void *sub_234614B3C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    sub_234614BC8(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_234614B84(uint64_t a1, uint64_t a2)
{
  if (sub_234614C1C(a2, (uint64_t)&unk_26E764260)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_234614BC8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_2345DBAD4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_2345DBAD4(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

BOOL sub_234614C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_234614C6C(void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_234614BC8(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

void sub_234614E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_234614F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23461505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_234615104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2346151F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23461530C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23461542C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2346154F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23461558C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2346155A8@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  v8[2] = *MEMORY[0x263EF8340];
  if (*result != 3)
  {
LABEL_17:
    a2[1] = 0;
    return result;
  }
  long long v6 = 0u;
  long long v7 = 0u;
  sub_23460B484((uint64_t)result, (uint64_t)&v6);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6))
  {
    v8[0] = 0;
    v8[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      sub_2345DDDA0(a2, v8);
      sub_2345DAC58((uint64_t)v8);
      char v3 = 0;
      goto LABEL_12;
    }
    sub_2345DAC58((uint64_t)v8);
  }
  else
  {
    unint64_t v4 = *(void *)sub_23460D01C(&v6) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      uint64_t v5 = (const char *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0) {
        uint64_t v5 = *(const char **)v5;
      }
    }
    else
    {
      uint64_t v5 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v5);
  }
  char v3 = 1;
LABEL_12:
  if ((BYTE8(v7) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v7 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v7);
  uint64_t result = (_DWORD *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1)) {
    uint64_t result = (_DWORD *)sub_2346091F8(*((uint64_t *)&v6 + 1));
  }
  if (v3) {
    goto LABEL_17;
  }
  return result;
}

void sub_2346156FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va1);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2346157B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461591C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345E32B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_234615930@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_2345EBC84(a2, v4);
      uint64_t v5 = a2 + 1;
      uint64_t v6 = (_DWORD *)(a1 + 20);
LABEL_7:
      return (uint64_t *)sub_2345EBCD0(v5, v6);
    }
    uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    uint64_t v10 = (uint64_t *)a2;
    uint64_t v11 = v4;
LABEL_15:
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v11, v9);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_2345EBC84(a2, (_DWORD *)(v7 + 16));
      uint64_t v5 = a2 + 1;
      uint64_t v6 = (_DWORD *)(v7 + 20);
      goto LABEL_7;
    }
    uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    uint64_t v10 = (uint64_t *)a2;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
    goto LABEL_15;
  }
  *(void *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  return (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
}

void sub_234615FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  sub_234609D58(v25 - 176, *(void **)(v25 - 168));

  _Unwind_Resume(a1);
}

void sub_234616334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_23461666C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_23461686C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234616A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_234616CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_234616F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_23461716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_2345E32B4((uint64_t)&a9);
  *(void *)(v13 - 40) = &a10;
  sub_2345EC2C4((void ***)(v13 - 40));
  sub_23460B564((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_234617364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  sub_2345EC2C4(&a18);
  sub_23460B564((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2346175DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_234617650(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_2345D8238();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2345D9644((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    uint64_t v7[3] = (char *)v7[0] + 8 * v6;
    sub_234622480(a1, v7);
    return sub_234622638(v7);
  }
  return result;
}

void sub_2346176D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_234622638((void **)va);
  _Unwind_Resume(a1);
}

void sub_234617774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_234617934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_234617A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_234617AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 4)
  {
    return sub_23460972C(a2, 4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 4;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t sub_234617B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

void sub_234617E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2345DAC58(v7 - 64);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2346181B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2345DAC58(v7 - 56);
  sub_23460B564((uint64_t)va);
  sub_23460B564((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_234618310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_234618524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234618934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2346189E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_2345F00C4((uint64_t)a1))
  {
    return sub_234622C3C(a1, a2);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    long long v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_OWORD *)(a2 + 16) = v5;
    uint64_t v6 = *(void *)(result + 32);
    *(void *)(a2 + 32) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)(v6 - 16);
      if (*(void *)(a2 + 24)) {
        uint64_t v7 = *(atomic_ullong **)(a2 + 24);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

_DWORD *sub_234618B28@<X0>(_DWORD *result@<X0>, atomic_uint **a2@<X8>)
{
  v19[2] = *MEMORY[0x263EF8340];
  if (*result != 3)
  {
LABEL_28:
    *a2 = 0;
    return result;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  sub_23460B484((uint64_t)result, (uint64_t)&v15);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v15))
  {
    v19[0] = 0;
    v19[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345EC3A0((uint64_t)v19))
      {
        uint64_t v3 = (atomic_uint **)sub_2345EC3D8((uint64_t)v19);
        uint64_t v4 = *v3;
        *a2 = *v3;
        if ((v4 & 7) != 0)
        {
          long long v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
            *a2 = v5;
          }
        }
LABEL_19:
        sub_2345DAC58((uint64_t)v19);
        char v14 = 0;
        goto LABEL_23;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627C0, v9))
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v10 = sub_2345EC4C0((uint64_t)v19);
        sub_2345DDDA0(&v17, v10);
        if (v18)
        {
          uint64_t v11 = (atomic_uint **)sub_2345EC3D8((uint64_t)&v17);
          uint64_t v12 = *v11;
          *a2 = *v11;
          if ((v12 & 7) != 0)
          {
            uint64_t v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
            if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
              *a2 = v13;
            }
          }
          sub_2345DAC58((uint64_t)&v17);
          goto LABEL_19;
        }
        sub_2345DAC58((uint64_t)&v17);
      }
    }
    sub_2345DAC58((uint64_t)v19);
  }
  else
  {
    unint64_t v6 = *(void *)sub_23460D01C(&v15) & 0xFFFFFFFFFFFFFFF8;
    if (v6)
    {
      uint64_t v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
    }
    else
    {
      uint64_t v7 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v7);
  }
  char v14 = 1;
LABEL_23:
  if ((BYTE8(v16) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v16 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v16);
  uint64_t result = (_DWORD *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)) {
    uint64_t result = (_DWORD *)sub_2346091F8(*((uint64_t *)&v15 + 1));
  }
  if (v14) {
    goto LABEL_28;
  }
  return result;
}

void sub_234618D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_234618EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2345E357C((uint64_t)&a9);
  sub_23460B564((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2346190D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2345E357C((uint64_t)&a18);
  sub_23460B564(v18 - 48);
  _Unwind_Resume(a1);
}

void sub_234619344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_2345F85B8(&a18);
  sub_23460B564((uint64_t)&a24);

  _Unwind_Resume(a1);
}

double sub_234619418(_DWORD *a1, double a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v10);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
  {
    v14[0] = 0;
    v14[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345EC950((uint64_t)v14))
      {
        a2 = *(double *)sub_2345EC9D4((uint64_t)v14);
LABEL_14:
        sub_2345DAC58((uint64_t)v14);
        char v8 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627F0, v6))
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v7 = sub_2345ECA68((uint64_t)v14);
        sub_2345DDDA0(&v12, v7);
        if (v13)
        {
          a2 = *(double *)sub_2345EC9D4((uint64_t)&v12);
          sub_2345DAC58((uint64_t)&v12);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v12);
      }
    }
    sub_2345DAC58((uint64_t)v14);
  }
  else
  {
    unint64_t v3 = *(void *)sub_23460D01C(&v10) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      uint64_t v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0) {
        uint64_t v4 = *(const char **)v4;
      }
    }
    else
    {
      uint64_t v4 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v4);
  }
  char v8 = 1;
LABEL_18:
  if ((BYTE8(v11) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v11);
  if (*((void *)&v10 + 1)) {
    sub_2346091F8(*((uint64_t *)&v10 + 1));
  }
  if (v8) {
    return 0.0;
  }
  return a2;
}

void sub_2346195C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58(v3 - 56);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_234619630(_DWORD *a1)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v10);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
  {
    v14[0] = 0;
    v14[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ECB68((uint64_t)v14))
      {
        int v2 = *(unsigned __int8 *)sub_2345ECB9C((uint64_t)v14);
LABEL_14:
        BOOL v1 = v2 != 0;
        sub_2345DAC58((uint64_t)v14);
        char v8 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C230], v6))
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v7 = sub_2345ECC30((uint64_t)v14);
        sub_2345DDDA0(&v12, v7);
        if (v13)
        {
          int v2 = *(unsigned __int8 *)sub_2345ECB9C((uint64_t)&v12);
          sub_2345DAC58((uint64_t)&v12);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v12);
      }
    }
    sub_2345DAC58((uint64_t)v14);
  }
  else
  {
    unint64_t v3 = *(void *)sub_23460D01C(&v10) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      uint64_t v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0) {
        uint64_t v4 = *(const char **)v4;
      }
    }
    else
    {
      uint64_t v4 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v4);
  }
  char v8 = 1;
LABEL_18:
  if ((BYTE8(v11) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v11);
  if (*((void *)&v10 + 1)) {
    sub_2346091F8(*((uint64_t *)&v10 + 1));
  }
  if (v8) {
    return 0;
  }
  return v1;
}

void sub_2346197F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_234619858(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ECD30((uint64_t)v13))
      {
        uint64_t v1 = *(unsigned int *)sub_2345ECD68((uint64_t)v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C258], v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345ECDFC((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          uint64_t v1 = *(unsigned int *)sub_2345ECD68((uint64_t)&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      unint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        unint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      unint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0;
  }
  return v1;
}

void sub_234619A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_234619A78(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ECEFC((uint64_t)v13))
      {
        uint64_t v1 = *(unsigned int *)sub_2345ECF34((uint64_t)v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C260], v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345ECFC8((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          uint64_t v1 = *(unsigned int *)sub_2345ECF34((uint64_t)&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      unint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        unint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      unint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0;
  }
  return v1;
}

void sub_234619C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_234619CA8(_DWORD *a1, double a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v10);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
  {
    v14[0] = 0;
    v14[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ED8F0((uint64_t)v14))
      {
        a2 = *(double *)sub_2345ED928((uint64_t)v14);
LABEL_14:
        sub_2345DAC58((uint64_t)v14);
        char v8 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C240], v6))
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v7 = sub_2345ED9BC((uint64_t)v14);
        sub_2345DDDA0(&v12, v7);
        if (v13)
        {
          a2 = *(double *)sub_2345ED928((uint64_t)&v12);
          sub_2345DAC58((uint64_t)&v12);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v12);
      }
    }
    sub_2345DAC58((uint64_t)v14);
  }
  else
  {
    unint64_t v3 = *(void *)sub_23460D01C(&v10) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      uint64_t v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0) {
        uint64_t v4 = *(const char **)v4;
      }
    }
    else
    {
      uint64_t v4 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v4);
  }
  char v8 = 1;
LABEL_18:
  if ((BYTE8(v11) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v11);
  if (*((void *)&v10 + 1)) {
    sub_2346091F8(*((uint64_t *)&v10 + 1));
  }
  if (v8) {
    return 0.0;
  }
  return a2;
}

void sub_234619E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58(v3 - 56);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_234619EE8(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345EDABC((uint64_t)v13))
      {
        double v1 = *(double *)sub_2345EDAF4(v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762820, v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345EDB98((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          double v1 = *(double *)sub_2345EDAF4(&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0.0;
  }
  return v1;
}

void sub_23461A0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58(v3 - 56);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_23461A158(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345EDC68((uint64_t)v13))
      {
        double v1 = *(double *)sub_2345EDCA0(v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762830, v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345EDD44((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          double v1 = *(double *)sub_2345EDCA0(&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0.0;
  }
  return v1;
}

void sub_23461A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_23461A3F4(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345EDE14((uint64_t)v13))
      {
        double v1 = *(double *)sub_2345EDE4C(v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762840, v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345EDEF0((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          double v1 = *(double *)sub_2345EDE4C(&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0.0;
  }
  return v1;
}

void sub_23461A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_23461A6F0@<X0>(_DWORD *result@<X0>, _OWORD *a2@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  if (*result != 3)
  {
LABEL_23:
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  sub_23460B484((uint64_t)result, (uint64_t)&v19);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19))
  {
    v23[0] = 0;
    v23[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ED744((uint64_t)v23))
      {
        uint64_t v3 = (_OWORD *)sub_2345ED77C(v23);
        long long v4 = v3[5];
        a2[4] = v3[4];
        a2[5] = v4;
        long long v5 = v3[7];
        a2[6] = v3[6];
        a2[7] = v5;
        long long v6 = v3[1];
        *a2 = *v3;
        a2[1] = v6;
        long long v7 = v3[3];
        a2[2] = v3[2];
        a2[3] = v7;
LABEL_14:
        sub_2345DAC58((uint64_t)v23);
        char v18 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762810, v11))
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v12 = sub_2345ED820((uint64_t)v23);
        sub_2345DDDA0(&v21, v12);
        if (v22)
        {
          uint64_t v13 = (_OWORD *)sub_2345ED77C(&v21);
          long long v14 = v13[5];
          a2[4] = v13[4];
          a2[5] = v14;
          long long v15 = v13[7];
          a2[6] = v13[6];
          a2[7] = v15;
          long long v16 = v13[1];
          *a2 = *v13;
          a2[1] = v16;
          long long v17 = v13[3];
          a2[2] = v13[2];
          a2[3] = v17;
          sub_2345DAC58((uint64_t)&v21);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v21);
      }
    }
    sub_2345DAC58((uint64_t)v23);
  }
  else
  {
    unint64_t v8 = *(void *)sub_23460D01C(&v19) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      uint64_t v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        uint64_t v9 = *(const char **)v9;
      }
    }
    else
    {
      uint64_t v9 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v9);
  }
  char v18 = 1;
LABEL_18:
  if ((BYTE8(v20) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v20 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v20);
  uint64_t result = (_DWORD *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)) {
    uint64_t result = (_DWORD *)sub_2346091F8(*((uint64_t *)&v19 + 1));
  }
  if (v18) {
    goto LABEL_23;
  }
  return result;
}

void sub_23461A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_23461A9E8(_DWORD *a1, float a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v10);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
  {
    v14[0] = 0;
    v14[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ED0C8((uint64_t)v14))
      {
        a2 = *(float *)sub_2345ED100((uint64_t)v14);
LABEL_14:
        sub_2345DAC58((uint64_t)v14);
        char v8 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C248], v6))
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v7 = sub_2345ED194((uint64_t)v14);
        sub_2345DDDA0(&v12, v7);
        if (v13)
        {
          a2 = *(float *)sub_2345ED100((uint64_t)&v12);
          sub_2345DAC58((uint64_t)&v12);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v12);
      }
    }
    sub_2345DAC58((uint64_t)v14);
  }
  else
  {
    unint64_t v3 = *(void *)sub_23460D01C(&v10) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      uint64_t v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0) {
        uint64_t v4 = *(const char **)v4;
      }
    }
    else
    {
      uint64_t v4 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v4);
  }
  char v8 = 1;
LABEL_18:
  if ((BYTE8(v11) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v11);
  if (*((void *)&v10 + 1)) {
    sub_2346091F8(*((uint64_t *)&v10 + 1));
  }
  if (v8) {
    return 0.0;
  }
  return a2;
}

void sub_23461AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58(v3 - 56);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_23461AC28(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ED294((uint64_t)v13))
      {
        float v1 = *(float *)sub_2345ED2CC((uint64_t)v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762800, v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345ED360((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          float v1 = *(float *)sub_2345ED2CC((uint64_t)&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0.0;
  }
  return v1;
}

void sub_23461ADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58(v3 - 56);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_23461AE8C(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ED3EC((uint64_t)v13))
      {
        float v1 = *(float *)sub_2345ED424(v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7626B8, v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345ED4C8((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          float v1 = *(float *)sub_2345ED424(&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0.0;
  }
  return v1;
}

void sub_23461B05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_23461B110(_DWORD *a1)
{
  void v13[2] = *MEMORY[0x263EF8340];
  if (*a1 != 3) {
    return 0.0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v9);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    v13[0] = 0;
    v13[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2345ED598((uint64_t)v13))
      {
        float v1 = *(float *)sub_2345ED5D0(v13);
LABEL_14:
        sub_2345DAC58((uint64_t)v13);
        char v7 = 0;
        goto LABEL_18;
      }
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7627B0, v5))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v6 = sub_2345ED674((uint64_t)v13);
        sub_2345DDDA0(&v11, v6);
        if (v12)
        {
          float v1 = *(float *)sub_2345ED5D0(&v11);
          sub_2345DAC58((uint64_t)&v11);
          goto LABEL_14;
        }
        sub_2345DAC58((uint64_t)&v11);
      }
    }
    sub_2345DAC58((uint64_t)v13);
  }
  else
  {
    unint64_t v2 = *(void *)sub_23460D01C(&v9) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    NSLog(&cfstr_WarningInvalid_0.isa, v3);
  }
  char v7 = 1;
LABEL_18:
  if ((BYTE8(v10) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  if (*((void *)&v9 + 1)) {
    sub_2346091F8(*((uint64_t *)&v9 + 1));
  }
  if (v7) {
    return 0.0;
  }
  return v1;
}

void sub_23461B2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_23461B3A0(_DWORD *a1)
{
  v12[2] = *MEMORY[0x263EF8340];
  if (*a1 == 3)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    sub_23460B484((uint64_t)a1, (uint64_t)&v8);
    if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8))
    {
      v12[0] = 0;
      v12[1] = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
      {
        if (sub_2345EDFC0((uint64_t)v12))
        {
          float v1 = *(float *)sub_2345EDFF8(v12);
        }
        else
        {
          uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
          if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762850, v5))
          {
            uint64_t v10 = 0;
            uint64_t v11 = 0;
            uint64_t v6 = sub_2345EE09C((uint64_t)v12);
            sub_2345DDDA0(&v10, v6);
            if (v11) {
              float v1 = *(float *)sub_2345EDFF8(&v10);
            }
            sub_2345DAC58((uint64_t)&v10);
          }
        }
      }
      sub_2345DAC58((uint64_t)v12);
    }
    else
    {
      unint64_t v2 = *(void *)sub_23460D01C(&v8) & 0xFFFFFFFFFFFFFFF8;
      if (v2)
      {
        uint64_t v3 = (const char *)(v2 + 16);
        if (*(char *)(v2 + 39) < 0) {
          uint64_t v3 = *(const char **)v3;
        }
      }
      else
      {
        uint64_t v3 = "";
      }
      NSLog(&cfstr_WarningInvalid_0.isa, v3);
    }
    if ((BYTE8(v9) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v9 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v9);
    if (*((void *)&v8 + 1)) {
      sub_2346091F8(*((uint64_t *)&v8 + 1));
    }
  }
  return v1;
}

void sub_23461B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_2345DAC58((uint64_t)va1);
  sub_2345DAC58((uint64_t)va2);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_23461B604(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345EE560((uint64_t)v14))
    {
      uint64_t v7 = sub_2345EE598(v14);
      memcpy(a2, *(const void **)(v7 + 32), 4 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762870, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234622D84(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345EE598(v13);
        memcpy(a2, *(const void **)(v10 + 32), 4 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461B78C(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345EE7C8((uint64_t)v14))
    {
      uint64_t v7 = sub_2345EE800(v14);
      memcpy(a2, *(const void **)(v7 + 32), 4 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762888, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234622DD0(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345EE800(v13);
        memcpy(a2, *(const void **)(v10 + 32), 4 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461B8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461B914(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345EEAE4((uint64_t)v14))
    {
      uint64_t v7 = sub_2345EEB1C(v14);
      memcpy(a2, *(const void **)(v7 + 32), 16 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7628A0, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234622E1C(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345EEB1C(v13);
        memcpy(a2, *(const void **)(v10 + 32), 16 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461BA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23461BC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461BE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461BFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461C1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461C370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_2345E32B4((uint64_t)&a9);
  *(void *)(v13 - 40) = &a10;
  sub_2345EC2C4((void ***)(v13 - 40));
  sub_234617B24((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_23461C56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_2345F7B80((void ***)va);
  va_copy((va_list)v4, va1);
  sub_2345EC2C4((void ***)va);
  sub_234617B24((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_23461C844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_234605EFC((uint64_t)&a9);
  sub_234605EA0((uint64_t)&a19);
  a19 = (void **)(v19 - 72);
  sub_2345EC2C4(&a19);
  sub_234617B24(v19 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_23461C8F8(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_2346096A8(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_2345DBC38((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

unint64_t sub_23461C9B8(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345EF32C((uint64_t)v14))
    {
      uint64_t v7 = sub_2345EF364(v14);
      memcpy(a2, *(const void **)(v7 + 32), 4 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762900, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234622E68(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345EF364(v13);
        memcpy(a2, *(const void **)(v10 + 32), 4 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461CAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461CB40(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345DF4E8((uint64_t)v14))
    {
      uint64_t v7 = sub_2345DCB24(v14);
      memcpy(a2, *(const void **)(v7 + 32), 8 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7626C8, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234622EB4(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345DCB24(v13);
        memcpy(a2, *(const void **)(v10 + 32), 8 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461CC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461CCC8(_DWORD *a1, _OWORD *a2, unint64_t a3)
{
  v20[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v20);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v20[1])
  {
    if (sub_2345DAAAC((uint64_t)v20))
    {
      uint64_t v7 = sub_2345D811C(v20);
      if (a3)
      {
        uint64_t v9 = 0;
        do
        {
          uint64_t v10 = *(void *)(v7 + 32) + v9;
          *(void *)&long long v8 = *(void *)v10;
          DWORD2(v8) = *(_DWORD *)(v10 + 8);
          *a2++ = v8;
          v9 += 12;
          --a3;
        }
        while (a3);
      }
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E7625E8, v12))
      {
        v19[0] = 0;
        v19[1] = 0;
        sub_234622F00(v20, v18);
        sub_2345DAAE4(v19, v18);
        sub_2345DAC58((uint64_t)v18);
        uint64_t v13 = sub_2345D811C(v19);
        if (a3)
        {
          uint64_t v15 = 0;
          do
          {
            uint64_t v16 = *(void *)(v13 + 32) + v15;
            *(void *)&long long v14 = *(void *)v16;
            DWORD2(v14) = *(_DWORD *)(v16 + 8);
            *a2++ = v14;
            v15 += 12;
            --a3;
          }
          while (a3);
        }
        sub_2345DAC58((uint64_t)v19);
      }
    }
  }
  sub_2345DAC58((uint64_t)v20);
  return v6;
}

void sub_23461CE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461CE7C(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345EF978((uint64_t)v14))
    {
      uint64_t v7 = sub_2345EF9B0(v14);
      memcpy(a2, *(const void **)(v7 + 32), 16 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762798, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234622F4C(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345EF9B0(v13);
        memcpy(a2, *(const void **)(v10 + 32), 16 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461CF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461D004(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_234622F98((uint64_t)v14))
    {
      uint64_t v7 = sub_234622FD0(v14);
      memcpy(a2, *(const void **)(v7 + 32), a3 << 6);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E764330, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234623074(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_234622FD0(v13);
        memcpy(a2, *(const void **)(v10 + 32), a3 << 6);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461D120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461D18C(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345F00C4((uint64_t)v14))
    {
      uint64_t v7 = sub_2345F00FC(v14);
      memcpy(a2, *(const void **)(v7 + 32), 8 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762930, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_23462324C(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345F00FC(v13);
        memcpy(a2, *(const void **)(v10 + 32), 8 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461D314(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345F03E0((uint64_t)v14))
    {
      uint64_t v7 = sub_2345F0418(v14);
      memcpy(a2, *(const void **)(v7 + 32), 16 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762948, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234623298(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345F0418(v13);
        memcpy(a2, *(const void **)(v10 + 32), 16 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461D430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461D49C(_DWORD *a1, _OWORD *a2, unint64_t a3)
{
  v20[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v20);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v20[1])
  {
    if (sub_2345F0834((uint64_t)v20))
    {
      uint64_t v7 = sub_2345F086C(v20);
      if (a3)
      {
        uint64_t v9 = 0;
        do
        {
          uint64_t v10 = *(void *)(v7 + 32) + v9;
          *(void *)&long long v8 = *(void *)(v10 + 16);
          *a2 = *(_OWORD *)v10;
          a2[1] = v8;
          a2 += 2;
          v9 += 24;
          --a3;
        }
        while (a3);
      }
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762960, v12))
      {
        v19[0] = 0;
        v19[1] = 0;
        sub_2346232E4(v20, v18);
        sub_2345DAAE4(v19, v18);
        sub_2345DAC58((uint64_t)v18);
        uint64_t v13 = sub_2345F086C(v19);
        if (a3)
        {
          uint64_t v15 = 0;
          do
          {
            uint64_t v16 = *(void *)(v13 + 32) + v15;
            *(void *)&long long v14 = *(void *)(v16 + 16);
            *a2 = *(_OWORD *)v16;
            a2[1] = v14;
            a2 += 2;
            v15 += 24;
            --a3;
          }
          while (a3);
        }
        sub_2345DAC58((uint64_t)v19);
      }
    }
  }
  sub_2345DAC58((uint64_t)v20);
  return v6;
}

void sub_23461D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461D660(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345F0CA4((uint64_t)v14))
    {
      uint64_t v7 = sub_2345F0CDC(v14);
      memcpy(a2, *(const void **)(v7 + 32), 32 * a3);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762978, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_234623330(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345F0CDC(v13);
        memcpy(a2, *(const void **)(v10 + 32), 32 * a3);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461D77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_23461D7E8(_DWORD *a1, void *a2, unint64_t a3)
{
  v14[2] = *MEMORY[0x263EF8340];
  sub_2346155A8(a1, v14);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  unint64_t v6 = NumElements;
  if (NumElements < a3) {
    a3 = NumElements;
  }
  if (v14[1])
  {
    if (sub_2345EFC50((uint64_t)v14))
    {
      uint64_t v7 = sub_2345EFC88(v14);
      memcpy(a2, *(const void **)(v7 + 32), a3 << 7);
    }
    else
    {
      uint64_t Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_26E762918, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_23462337C(v14, v12);
        sub_2345DAAE4(v13, v12);
        sub_2345DAC58((uint64_t)v12);
        uint64_t v10 = sub_2345EFC88(v13);
        memcpy(a2, *(const void **)(v10 + 32), a3 << 7);
        sub_2345DAC58((uint64_t)v13);
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
  }
  sub_2345DAC58((uint64_t)v14);
  return v6;
}

void sub_23461D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23461D950(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v25[2] = *MEMORY[0x263EF8340];
  if (*a1 == 4)
  {
    NSLog(&cfstr_CanTSetDataOnR.isa);
    return;
  }
  if (*a1 != 3) {
    return;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  sub_23460B484((uint64_t)a1, (uint64_t)&v23);
  if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23))
  {
    uint64_t v22 = 0;
    v25[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v23);
    uint64_t v22 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v25);
    if (v22 == pxrInternal__aapl__pxrReserved__::VtValue::GetType(a2))
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      goto LABEL_25;
    }
    uint64_t Typeid = (const std::type_info *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v22);
    int v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a2);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(v4, Typeid, v5))
    {
      unint64_t v6 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v22);
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(v25, a2, v6, v7);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      sub_2345DAC58((uint64_t)v25);
      goto LABEL_25;
    }
    v25[0] = 0;
    long long v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_264BF46F0);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    uint64_t v19 = 0;
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a2);
    uint64_t v21 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v8, (const pxrInternal__aapl__pxrReserved__::TfType *)&Type, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v25, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v21);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v18 = v25[0];
    if ((v25[0] & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = objc_msgSend_dataTypeWithTfToken_(USKToken, v9, (uint64_t)&v18, v10);
    uint64_t v12 = NSString;
    unint64_t v15 = *(void *)sub_23460D01C(&v23) & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
      {
        objc_msgSend_stringWithUTF8String_(v12, v13, *v16, v14);
        long long v17 = LABEL_21:;
        NSLog(&cfstr_CanTSetDataTyp.isa, v11, v17);

        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v25[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)"";
    }
    objc_msgSend_stringWithUTF8String_(v12, v13, (uint64_t)v16, v14);
    goto LABEL_21;
  }
LABEL_25:
  if ((BYTE8(v24) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v24);
  if (*((void *)&v23 + 1)) {
    sub_2346091F8(*((uint64_t *)&v23 + 1));
  }
}

void sub_23461DC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_23460B564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461DD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23461DE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23461DF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23461E2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_2345E357C((uint64_t)&a11);
  sub_23460B564((uint64_t)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_2345DAC58(v27 - 56);

  _Unwind_Resume(a1);
}

void sub_23461E430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461E97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461EA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461EC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461ED14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461EE44(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1 - 40);
  _Unwind_Resume(a1);
}

void sub_23461EF78(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_23461F014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F0AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F1E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2345DAC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23461F72C(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345D7A70((uint64_t)v5, a3);
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 4 * a3);
  uint64_t v7 = &off_26E763690;
  sub_2345F54A8();
}

void sub_23461F804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_23461F880(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E6F44((uint64_t)v5, a3);
  sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 4 * a3);
  uint64_t v7 = &off_26E763748;
  sub_2345F54A8();
}

void sub_23461F958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_23461F9D4(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E70C4((uint64_t)v5, a3);
  sub_2345EEE00((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 16 * a3);
  uint64_t v7 = off_26E763800;
  sub_2345DEAC0();
}

void sub_23461FAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_23461FC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23461FC94(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = sub_2345E3F34(a1);
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v38 = *(_OWORD *)v3;
  long long v39 = v4;
  uint64_t v5 = *(long long **)(v3 + 32);
  uint64_t v40 = v5;
  if (v5)
  {
    unint64_t v6 = (atomic_ullong *)(v5 - 1);
    if (*((void *)&v39 + 1)) {
      unint64_t v6 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  if (*a2 == 3)
  {
    *(_OWORD *)__p = 0uLL;
    long long v37 = 0uLL;
    sub_23460B484((uint64_t)a2, (uint64_t)__p);
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p);
    uint64_t v7 = (unint64_t *)MEMORY[0x263F90560];
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
    }
    else
    {
      if (!atomic_load(v7)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        *(_OWORD *)unint64_t v29 = 0u;
        memset(v30, 0, sizeof(v30));
        sub_2345E7854((uint64_t)v29, v38);
        if ((void)v38)
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          unint64_t v18 = 0;
          do
          {
            sub_2345F6908((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
            MEMORY[0x237DC2540](&v32, (char *)v40 + v16);
            sub_2345F7418((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v29);
            uint64_t v19 = (void *)(*(void *)&v30[16] + v17);
            if ((long long *)(*(void *)&v30[16] + v17) == &v32)
            {
              uint64_t v20 = v32;
            }
            else
            {
              if ((*v19 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v20 = 0;
              *uint64_t v19 = v32;
              *(void *)&long long v32 = 0;
            }
            if ((v20 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            ++v18;
            v17 += 8;
            v16 += 24;
          }
          while ((unint64_t)v38 > v18);
        }
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
      }
      if (!atomic_load(v7)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        uint64_t v34 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        sub_2345E79B0((uint64_t)&v32, v38);
        if ((void)v38)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          do
          {
            sub_2345F6908((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
            MEMORY[0x237DC1F40](v29, (char *)v40 + v22);
            sub_2345F89B8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v32);
            uint64_t v25 = v34 + v23;
            if (*(char *)(v34 + v23 + 23) < 0) {
              operator delete(*(void **)v25);
            }
            long long v26 = *(_OWORD *)v29;
            *(void *)(v25 + 16) = *(void *)v30;
            *(_OWORD *)uint64_t v25 = v26;
            v30[7] = 0;
            LOBYTE(v29[0]) = 0;
            uint64_t v27 = (void **)(v25 + 24);
            if (*(char *)(v25 + 47) < 0) {
              operator delete(*v27);
            }
            long long v28 = *(_OWORD *)&v30[8];
            *(void *)(v25 + 40) = v31;
            *(_OWORD *)uint64_t v27 = v28;
            HIBYTE(v31) = 0;
            v30[8] = 0;
            if ((v30[7] & 0x80000000) != 0) {
              operator delete(v29[0]);
            }
            ++v24;
            v23 += 48;
            v22 += 24;
          }
          while ((unint64_t)v38 > v24);
        }
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>();
      }
    }
    if ((BYTE8(v37) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v37);
    uint64_t v14 = __p[1];
    if (__p[1]) {
LABEL_56:
    }
      sub_2346091F8((uint64_t)v14);
  }
  else
  {
    *(_OWORD *)unint64_t v29 = 0uLL;
    *(_OWORD *)uint64_t v30 = 0uLL;
    sub_234617AA0((uint64_t)a2, (uint64_t)v29);
    if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)v29))
    {
      long long v32 = 0uLL;
      *(void *)&long long v33 = 0;
      sub_2345F6908((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
      uint64_t v9 = v40;
      sub_2345F6908((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
      for (i = (long long *)((char *)v40 + 24 * v38); v9 != i; uint64_t v9 = (long long *)((char *)v9 + 24))
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v37 = 0;
        if (*((char *)v9 + 23) < 0)
        {
          sub_2345DBA34(__p, *(void **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v11 = *v9;
          *(void *)&long long v37 = *((void *)v9 + 2);
          *(_OWORD *)__p = v11;
        }
        MEMORY[0x237DC2500](&TypeName, __p);
        uint64_t v12 = *((void *)&v32 + 1);
        if (*((void *)&v32 + 1) >= (unint64_t)v33)
        {
          uint64_t v13 = sub_234622390((uint64_t *)&v32, &TypeName);
        }
        else
        {
          sub_2345EC01C(*((_DWORD **)&v32 + 1), &TypeName);
          sub_2345EC058((_DWORD *)(v12 + 4), (_DWORD *)&TypeName + 1);
          uint64_t v13 = v12 + 8;
        }
        *((void *)&v32 + 1) = v13;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2345EBD10((uint64_t)&TypeName);
        if (SBYTE7(v37) < 0) {
          operator delete(__p[0]);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets();
      __p[0] = &v32;
      sub_2345EC2C4((void ***)__p);
    }
    if ((v30[8] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v30[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)v30);
    uint64_t v14 = v29[1];
    if (v29[1]) {
      goto LABEL_56;
    }
  }
  sub_2345F662C(&v38);
}

void sub_234620130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
}

void sub_23462036C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_234620550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_234620760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_234620800(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E7F98((uint64_t)v5, a3);
  sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 4 * a3);
  uint64_t v7 = &off_26E763BB0;
  sub_2345F97E0();
}

void sub_2346208D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234620954(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E8134((uint64_t)v5, a3);
  sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 8 * a3);
  uint64_t v7 = off_26E763C68;
  sub_2345DEAC0();
}

void sub_234620A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234620AA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  sub_2345DD204((uint64_t)v10, a3);
  if (v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (_DWORD *)(a2 + 8);
    do
    {
      uint64_t v7 = *((void *)v6 - 1);
      int v8 = *v6;
      sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
      uint64_t v9 = v11 + v5;
      *(void *)uint64_t v9 = v7;
      *(_DWORD *)(v9 + 8) = v8;
      v6 += 4;
      v5 += 12;
      --v3;
    }
    while (v3);
  }
  uint64_t v12 = &off_26E762600;
  sub_2345DEAC0();
}

void sub_234620BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234620C2C(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345DD190((uint64_t)v5, a3);
  sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 16 * a3);
  uint64_t v7 = &off_26E7626E0;
  sub_2345DEAC0();
}

void sub_234620D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234620D80(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2346233C8((uint64_t)v5, a3);
  sub_2346236E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, a3 << 6);
  uint64_t v7 = &off_26E764348;
  sub_2345DEAC0();
}

void sub_234620E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234620ED4(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E8518((uint64_t)v5, a3);
  sub_2345FA21C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 8 * a3);
  uint64_t v7 = &off_26E763D20;
  sub_2345F97E0();
}

void sub_234620FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234621028(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E86B4((uint64_t)v5, a3);
  sub_2345F06FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 16 * a3);
  uint64_t v7 = off_26E763DD8;
  sub_2345DEAC0();
}

void sub_234621100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_23462117C(uint64_t a1, long long *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  sub_2345E8864((uint64_t)v9, a3);
  if (v3)
  {
    uint64_t v5 = 0;
    do
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      sub_2345F0B50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v9);
      uint64_t v6 = v10 + v5;
      *(_OWORD *)uint64_t v6 = v7;
      *(void *)(v6 + 16) = v8;
      a2 += 2;
      v5 += 24;
      --v3;
    }
    while (v3);
  }
  uint64_t v11 = off_26E763E90;
  sub_2345DEAC0();
}

void sub_234621280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234621300(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E8A14((uint64_t)v5, a3);
  sub_2345F0FC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, 32 * a3);
  long long v7 = off_26E763F48;
  sub_2345DEAC0();
}

void sub_2346213D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234621454(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __dst = 0;
  memset(v5, 0, sizeof(v5));
  sub_2345E8C08((uint64_t)v5, a3);
  sub_2345EFF6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  memcpy(__dst, a2, a3 << 7);
  long long v7 = off_26E764000;
  sub_2345DEAC0();
}

void sub_23462152C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_2345D8224(exception_object);
}

void sub_234621784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a18;
  sub_2345EC2C4(&a25);
  sub_234617B24((uint64_t)&a21);

  _Unwind_Resume(a1);
}

void sub_234621928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2345E32B4(v3 - 40);
  *(void *)(v3 - 40) = va;
  sub_2345EC2C4((void ***)(v3 - 40));
  sub_234617B24((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_234621AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2345DAC58(v16 - 64);
  sub_2345E357C((uint64_t)&a9);
  sub_23460B564((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_234621CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2345DAC58(v16 - 48);
  sub_2345E357C((uint64_t)&a9);
  sub_23460B564((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_234621F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_234622104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_234622270(uint64_t a1, unsigned int *a2, void *a3, unsigned int *a4, void *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2346222AC(a1, a3, a4, a5);
}

uint64_t sub_2346222AC(uint64_t a1, void *a2, unsigned int *a3, void *a4)
{
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * *a2);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2346222FC(a1, a3, a4);
}

uint64_t sub_2346222FC(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t result = sub_234622354(a1, a2);
  unint64_t v6 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return result;
}

uint64_t sub_234622354(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v2 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  return result;
}

uint64_t sub_234622390(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_2345D8238();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_2345D9644(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[8 * v4];
  uint64_t v16 = &v10[8 * v9];
  sub_2345EC01C(v14, a2);
  sub_2345EC058((_DWORD *)v14 + 1, a2 + 1);
  unint64_t v15 = v14 + 8;
  sub_234622480(a1, &v13);
  uint64_t v11 = a1[1];
  sub_234622638(&v13);
  return v11;
}

void sub_23462246C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_234622638((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_234622480(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2346224F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2346224F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      sub_2345EC01C((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      sub_2345EC058((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      uint64_t v7 = *((void *)&v15 + 1) - 8;
      *((void *)&v15 + 1) -= 8;
      v9 -= 8;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_2346225AC((uint64_t)v12);
  return v10;
}

uint64_t sub_2346225AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2346225E4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2346225E4(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_2345EC284(v3, v1);
      v1 += 8;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_234622638(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_23462266C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 8;
      uint64_t result = sub_2345EC284(v4, v1 - 8);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t *sub_2346226B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2346226D4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2346229F4(a1);
}

uint64_t sub_2346226E4(uint64_t *a1)
{
  return 1;
}

unint64_t sub_234622700(uint64_t *a1)
{
  uint64_t v1 = (unsigned int **)sub_2345EC90C(a1);
  return sub_234622A64((uint64_t)&v3, v1);
}

BOOL sub_23462272C(uint64_t *a1, uint64_t *a2)
{
  char v3 = (uint64_t *)sub_2345EC90C(a1);
  uint64_t v4 = sub_2345EC90C(a2);
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = *(uint64_t **)v4;
  if (v5 - *v3 != *(void *)(v4 + 8) - *(void *)v4) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 8;
  do
  {
    uint64_t v9 = *v7++;
    BOOL result = *(void *)(v8 - 8) == v9;
    BOOL v11 = *(void *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL sub_2346227AC(uint64_t *a1, uint64_t a2)
{
  char v3 = (uint64_t *)sub_2345EC90C(a1);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = *(uint64_t **)a2;
  if (v4 - *v3 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v5 == v4) {
    return 1;
  }
  uint64_t v7 = v5 + 8;
  do
  {
    uint64_t v8 = *v6++;
    BOOL result = *(void *)(v7 - 8) == v8;
    BOOL v10 = *(void *)(v7 - 8) != v8 || v7 == v4;
    v7 += 8;
  }
  while (!v10);
  return result;
}

uint64_t sub_234622824(uint64_t *a1)
{
  return 0;
}

uint64_t sub_234622844(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_2345EC90C(a1);
  return MEMORY[0x270FA3778](&unk_26E7627E0, v3, a2);
}

void *sub_234622888(uint64_t *a1)
{
  return &unk_26E7627E0;
}

uint64_t sub_2346228A8(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2346228C4(uint64_t *a1)
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2346228E4(uint64_t *a1)
{
  return 0;
}

uint64_t sub_234622900(uint64_t *a1)
{
  return 0;
}

BOOL sub_23462291C(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_234622960(uint64_t *a1)
{
  sub_2345EC90C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E7627E0, v1);
}

void *sub_234622988(uint64_t *a1)
{
  return &unk_26E7627E0;
}

void sub_2346229AC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2345EC90C(a1);
  *(void *)(a2 + 8) = &off_26E764278;
  sub_234622BA4();
}

uint64_t *sub_2346229F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)v2;
    sub_2345EC2C4(&v4);
    MEMORY[0x237DC3290](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

unint64_t sub_234622A64(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = (char *)*a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = (char *)v3 - (char *)*a2;
  if (v3 == *a2)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = v4 >> 3;
    do
    {
      uint64_t v8 = *(unsigned int *)v2;
      if (v6) {
        v8 += (v5 + v8 + (v5 + v8) * (v5 + v8)) >> 1;
      }
      else {
        int v6 = 1;
      }
      unint64_t v5 = *((unsigned int *)v2 + 1)
         + ((v8
           + *((unsigned int *)v2 + 1)
           + (v8 + *((unsigned int *)v2 + 1)) * (v8 + (unint64_t)*((unsigned int *)v2 + 1))) >> 1);
      v2 += 8;
      --v7;
    }
    while (v7);
    unint64_t v9 = 0x9E3779B97F4A7C55 * v5;
  }
  return bswap64(v9);
}

uint64_t sub_234622AD8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_2345EC90C(a1) + 24));
  if (v2 != 1) {
    operator new();
  }
  return sub_2345EC90C(a1);
}

void sub_234622B80(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

void sub_234622BA4()
{
}

void sub_234622C18(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t sub_234622C3C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_234622CF0(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_234622CD8(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_234622CF0(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345FA6D4(a1);
}

std::type_info *sub_234622D84@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EE63C((uint64_t)a2);
}

void sub_234622DBC(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234622DD0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EE958((uint64_t)a2);
}

void sub_234622E08(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234622E1C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EEC74((uint64_t)a2);
}

void sub_234622E54(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234622E68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EF4BC((uint64_t)a2);
}

void sub_234622EA0(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234622EB4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EF6FC((uint64_t)a2);
}

void sub_234622EEC(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234622F00@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345D8090((uint64_t)a2);
}

void sub_234622F38(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234622F4C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EFB08((uint64_t)a2);
}

void sub_234622F84(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_234622F98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 26) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_234622FD0(uint64_t *a1)
{
  if (sub_234622F98((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return sub_23462317C(a1);
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *sub_234623074@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2346231C0((uint64_t)a2);
}

void sub_2346230AC(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

void sub_2346230C0()
{
}

uint64_t sub_234623120(uint64_t result)
{
  if (result)
  {
    sub_2345D9DC0(result);
    JUMPOUT(0x237DC3290);
  }
  return result;
}

uint64_t sub_23462317C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  }
  return result;
}

std::type_info *sub_2346231C0(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  void v4[2] = *MEMORY[0x263EF8340];
  if ((sub_234622F98(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26E764330, v1, v2);
    uint64_t v1 = (std::type_info *)sub_2345DAAE4(v1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return v1;
}

std::type_info *sub_23462324C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345F0254((uint64_t)a2);
}

void sub_234623284(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234623298@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345F0570((uint64_t)a2);
}

void sub_2346232D0(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2346232E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345F09C4((uint64_t)a2);
}

void sub_23462331C(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_234623330@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345F0E34((uint64_t)a2);
}

void sub_234623368(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_23462337C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_2345DDDA0(a2, a1);
  return sub_2345EFDE0((uint64_t)a2);
}

void sub_2346233B4(_Unwind_Exception *a1)
{
  sub_2345DAC58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2346233C8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2345DA898((void *)a1);
  uint64_t v6 = v5;
  sub_234623440((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_234623428(_Unwind_Exception *a1)
{
  sub_2345D9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_234623440(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    long long v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_234623648((uint64_t)a1, a2);
              long long v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)uint64_t v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  v11 += 64;
                }
                while (v3 << 6 != v11);
              }
            }
            uint64_t v16 = *a3;
            unint64_t v17 = v3 << 6;
            do
            {
              unint64_t v18 = (_OWORD *)((char *)v7 + v17);
              long long v19 = *v16;
              long long v20 = v16[1];
              long long v21 = v16[3];
              void v18[2] = v16[2];
              v18[3] = v21;
              *unint64_t v18 = v19;
              v18[1] = v20;
              v17 += 64;
            }
            while (a2 << 6 != v17);
          }
          uint64_t v22 = v7;
          goto LABEL_31;
        }
        long long v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v31 = a2;
      }
      else {
        unint64_t v31 = *a1;
      }
      long long v32 = sub_234623648((uint64_t)a1, a2);
      uint64_t v22 = v32;
      if (v31)
      {
        unint64_t v33 = v31 << 6;
        uint64_t v34 = v32;
        do
        {
          long long v35 = *(_OWORD *)v7;
          long long v36 = *((_OWORD *)v7 + 1);
          long long v37 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v34 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v34 + 3) = v37;
          *(_OWORD *)uint64_t v34 = v35;
          *((_OWORD *)v34 + 1) = v36;
          v34 += 8;
          v7 += 8;
          v33 -= 64;
        }
        while (v33);
      }
      if (v3 < a2)
      {
        long long v38 = *a3;
        unint64_t v39 = v3 << 6;
        do
        {
          uint64_t v40 = (_OWORD *)((char *)v32 + v39);
          long long v41 = *v38;
          long long v42 = v38[1];
          long long v43 = v38[3];
          v40[2] = v38[2];
          v40[3] = v43;
          *uint64_t v40 = v41;
          v40[1] = v42;
          v39 += 64;
        }
        while (a2 << 6 != v39);
      }
      goto LABEL_31;
    }
    unint64_t v23 = a2 << 6;
    if ((a2 << 6) / a2 == 64)
    {
      unint64_t v24 = sub_234623648((uint64_t)a1, a2);
      uint64_t v22 = v24;
      unint64_t v25 = 0;
      long long v26 = *a3;
      do
      {
        uint64_t v27 = &v24[v25 / 8];
        long long v28 = *v26;
        long long v29 = v26[1];
        long long v30 = v26[3];
        *((_OWORD *)v27 + 2) = v26[2];
        *((_OWORD *)v27 + 3) = v30;
        *(_OWORD *)uint64_t v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        v25 += 64;
      }
      while (v23 != v25);
LABEL_31:
      if (v22 != (unint64_t *)a1[4])
      {
        sub_2345D9DC0((uint64_t)a1);
        a1[4] = (unint64_t)v22;
      }
      *a1 = a2;
      return;
    }
  }
  sub_2345DA898(a1);
}

void *sub_234623648(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_2345D9F38((uint64_t)&v7);
  if (a2 >> 58) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 6) | 0x10;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2346236D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2346236E8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_234623648((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = v5 << 6;
        unint64_t v9 = v6;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          long long v12 = v4[3];
          _OWORD v9[2] = v4[2];
          v9[3] = v12;
          *unint64_t v9 = v10;
          v9[1] = v11;
          v9 += 4;
          v4 += 4;
          v8 -= 64;
        }
        while (v8);
      }
      sub_2345D9DC0((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t *sub_23462378C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2346237AC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_234623A54(a1);
}

uint64_t sub_2346237BC(uint64_t *a1)
{
  return 1;
}

unint64_t sub_2346237D8(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)sub_23462317C(a1);
  return sub_234623ABC((uint64_t)&v3, v1);
}

uint64_t sub_234623804(uint64_t *a1, uint64_t *a2)
{
  char v3 = (uint64_t *)sub_23462317C(a1);
  uint64_t v4 = sub_23462317C(a2);
  return sub_234624118(v3, v4);
}

uint64_t sub_23462384C(uint64_t *a1, uint64_t a2)
{
  char v3 = (uint64_t *)sub_23462317C(a1);
  return sub_234624118(v3, a2);
}

uint64_t sub_234623888(uint64_t *a1)
{
  return 0;
}

uint64_t sub_2346238A8(uint64_t *a1, uint64_t a2)
{
  return a2;
}

std::type_info *sub_234623900(uint64_t *a1)
{
  return &stru_26E764330;
}

uint64_t sub_234623920(uint64_t *a1)
{
  return 1;
}

void *sub_23462393C(uint64_t *a1)
{
  return &unk_26E764400;
}

uint64_t sub_234623960(uint64_t *a1)
{
  return *(void *)sub_23462317C(a1);
}

BOOL sub_23462397C(uint64_t *a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2346239C0(uint64_t *a1)
{
  sub_23462317C(a1);
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26E764330, v1);
}

std::type_info *sub_2346239E8(uint64_t *a1)
{
  return &stru_26E764330;
}

void sub_234623A0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_23462317C(a1);
  *(void *)(a2 + 8) = &off_26E764348;
  sub_2345DEAC0();
}

uint64_t *sub_234623A54(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2345D9DC0(v2);
    MEMORY[0x237DC3290](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_234623ABC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    char v3 = (float *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 16;
      sub_234623B34((uint64_t)v7, v3);
      char v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_234623B34(uint64_t a1, float *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_234623BFC((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_234623BFC(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16, float *a17)
{
  float v17 = *a2;
  if (*a2 == 0.0) {
    float v17 = 0.0;
  }
  unint64_t v18 = LODWORD(v17);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v18 = ((*(void *)a1
  }
          + LODWORD(v17)
          + (*(void *)a1 + LODWORD(v17)) * (*(void *)a1 + (unint64_t)LODWORD(v17))) >> 1)
        + LODWORD(v17);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v18;
  return sub_234623C80(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_234623C80(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  float v16 = *a2;
  if (*a2 == 0.0) {
    float v16 = 0.0;
  }
  unint64_t v17 = LODWORD(v16);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v17 = ((*(void *)a1
  }
          + LODWORD(v16)
          + (*(void *)a1 + LODWORD(v16)) * (*(void *)a1 + (unint64_t)LODWORD(v16))) >> 1)
        + LODWORD(v16);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v17;
  return sub_234623D00(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_234623D00(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15)
{
  float v15 = *a2;
  if (*a2 == 0.0) {
    float v15 = 0.0;
  }
  unint64_t v16 = LODWORD(v15);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v16 = ((*(void *)a1
  }
          + LODWORD(v15)
          + (*(void *)a1 + LODWORD(v15)) * (*(void *)a1 + (unint64_t)LODWORD(v15))) >> 1)
        + LODWORD(v15);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v16;
  return sub_234623D7C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_234623D7C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14)
{
  float v14 = *a2;
  if (*a2 == 0.0) {
    float v14 = 0.0;
  }
  unint64_t v15 = LODWORD(v14);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v15 = ((*(void *)a1
  }
          + LODWORD(v14)
          + (*(void *)a1 + LODWORD(v14)) * (*(void *)a1 + (unint64_t)LODWORD(v14))) >> 1)
        + LODWORD(v14);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v15;
  return sub_234623DF4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_234623DF4(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13)
{
  float v13 = *a2;
  if (*a2 == 0.0) {
    float v13 = 0.0;
  }
  unint64_t v14 = LODWORD(v13);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v14 = ((*(void *)a1
  }
          + LODWORD(v13)
          + (*(void *)a1 + LODWORD(v13)) * (*(void *)a1 + (unint64_t)LODWORD(v13))) >> 1)
        + LODWORD(v13);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v14;
  return sub_234623E68(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_234623E68(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12 = *a2;
  if (*a2 == 0.0) {
    float v12 = 0.0;
  }
  unint64_t v13 = LODWORD(v12);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v13 = ((*(void *)a1
  }
          + LODWORD(v12)
          + (*(void *)a1 + LODWORD(v12)) * (*(void *)a1 + (unint64_t)LODWORD(v12))) >> 1)
        + LODWORD(v12);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v13;
  return sub_234623ED8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_234623ED8(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  float v11 = *a2;
  if (*a2 == 0.0) {
    float v11 = 0.0;
  }
  unint64_t v12 = LODWORD(v11);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v12 = ((*(void *)a1
  }
          + LODWORD(v11)
          + (*(void *)a1 + LODWORD(v11)) * (*(void *)a1 + (unint64_t)LODWORD(v11))) >> 1)
        + LODWORD(v11);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v12;
  return sub_234623F44(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_234623F44(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  float v10 = *a2;
  if (*a2 == 0.0) {
    float v10 = 0.0;
  }
  unint64_t v11 = LODWORD(v10);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v11 = ((*(void *)a1
  }
          + LODWORD(v10)
          + (*(void *)a1 + LODWORD(v10)) * (*(void *)a1 + (unint64_t)LODWORD(v10))) >> 1)
        + LODWORD(v10);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v11;
  return sub_234623FAC(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_234623FAC(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float v9 = *a2;
  if (*a2 == 0.0) {
    float v9 = 0.0;
  }
  unint64_t v10 = LODWORD(v9);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v10 = ((*(void *)a1 + LODWORD(v9) + (*(void *)a1 + LODWORD(v9))
  }
                                        * (*(void *)a1 + (unint64_t)LODWORD(v9))) >> 1)
        + LODWORD(v9);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v10;
  return sub_234624010(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_234624010(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8 = *a2;
  if (*a2 == 0.0) {
    float v8 = 0.0;
  }
  unint64_t v9 = LODWORD(v8);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v9 = ((*(void *)a1 + LODWORD(v8) + (*(void *)a1 + LODWORD(v8)) * (*(void *)a1 + (unint64_t)LODWORD(v8))) >> 1)
  }
       + LODWORD(v8);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v9;
  return sub_23462406C(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23462406C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7 = *a2;
  if (*a2 == 0.0) {
    float v7 = 0.0;
  }
  unint64_t v8 = LODWORD(v7);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v8 = ((*(void *)a1 + LODWORD(v7) + (*(void *)a1 + LODWORD(v7)) * (*(void *)a1 + (unint64_t)LODWORD(v7))) >> 1)
  }
       + LODWORD(v7);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2346240C4(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2346240C4(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = *a2;
  if (*a2 == 0.0) {
    float v6 = 0.0;
  }
  unint64_t v7 = LODWORD(v6);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v7 = ((*(void *)a1 + LODWORD(v6) + (*(void *)a1 + LODWORD(v6)) * (*(void *)a1 + (unint64_t)LODWORD(v6))) >> 1)
  }
       + LODWORD(v6);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return sub_2345E0064(a1, a3, a4, a5, a6);
}

uint64_t sub_234624118(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2345DE910((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2345DE910((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (v5 << 6) - 64;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
    if (!result) {
      break;
    }
    v6 += 64;
    v7 += 64;
    uint64_t v9 = v8;
    v8 -= 64;
  }
  while (v9);
  return result;
}

uint64_t sub_2346241C8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(sub_23462317C(a1) + 40));
  if (v2 != 1) {
    operator new();
  }
  return sub_23462317C(a1);
}

uint64_t sub_234624280(void *a1, uint64_t a2)
{
  *a1 += 64;
  return MEMORY[0x270FA3EC8](a2);
}

uint64_t sub_234624298(uint64_t a1, float a2)
{
  uint64_t v357 = *MEMORY[0x263EF8340];
  int v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
  double v5 = cos((float)((float)(a2 * 3.1416) / 180.0));
  uint64_t v6 = *(uint64_t (***)(void))a1;
  if (!**(void **)a1 || !v6[1] || !v6[2] || !v6[3] || !v6[4] || v4 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  float v9 = v5;
  float v323 = v9;
  do
  {
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v7);
    if (v10 == 4)
    {
      v8 += 2;
    }
    else if (v10 == 3)
    {
      ++v8;
    }
    uint64_t v7 = (v7 + 1);
  }
  while (v4 != v7);
  if ((int)v8 < 1) {
    return 0;
  }
  unint64_t v11 = malloc_type_malloc(12 * v8, 0x38CB402uLL);
  unint64_t v12 = malloc_type_malloc(88 * v8, 0x1020040F04E29DEuLL);
  unint64_t v13 = v12;
  if (!v11 || !v12)
  {
    if (v11) {
      free(v11);
    }
    if (!v13) {
      return 0;
    }
    goto LABEL_336;
  }
  size_t v337 = 12 * v8;
  int v322 = v8 - 1;
  v332 = v11;
  int v320 = v4;
  int v324 = v8;
  v331 = v12;
  if ((**(int (***)(uint64_t))a1)(a1) < 1)
  {
    int v15 = 0;
  }
  else
  {
    int v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    signed int v17 = 0;
    do
    {
      int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v16);
      if ((v18 - 5) >= 0xFFFFFFFE)
      {
        int v19 = v18;
        long long v20 = (char *)&v13[22 * v17];
        *((_DWORD *)v20 + 18) = v16;
        *((_DWORD *)v20 + 20) = v15;
        if (v18 == 3)
        {
          long long v21 = (char *)&v13[22 * v17];
          *((_WORD *)v21 + 42) = 256;
          v21[86] = 2;
          int v22 = 3 * v17;
          unint64_t v23 = v332;
          v332[3 * v17] = v14;
          v332[3 * v17 + 1] = v14 + 1;
          int v24 = v14 + 2;
          int v25 = 1;
        }
        else
        {
          int v26 = 4 * v16;
          uint64_t v27 = (char *)&v13[22 * v17 + 22];
          *((_DWORD *)v27 + 18) = v16;
          *((_DWORD *)v27 + 20) = v15;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v351, (v14 >> 2), 0);
          uint64_t v28 = v351;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 32))(a1, &v351, (v14 >> 2), 1);
          uint64_t v29 = v351;
          *(void *)&long long v351 = 0;
          char v30 = 2;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 32))(a1, &v351, (v14 >> 2), 2);
          uint64_t v31 = v351;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 32))(a1, &v351, (v14 >> 2), 3);
          float v32 = (float)((float)(*((float *)&v31 + 1) - *((float *)&v28 + 1))
                      * (float)(*((float *)&v31 + 1) - *((float *)&v28 + 1)))
              + (float)((float)(*(float *)&v31 - *(float *)&v28) * (float)(*(float *)&v31 - *(float *)&v28));
          float v33 = (float)((float)(*((float *)&v351 + 1) - *((float *)&v29 + 1))
                      * (float)(*((float *)&v351 + 1) - *((float *)&v29 + 1)))
              + (float)((float)(*(float *)&v351 - *(float *)&v29) * (float)(*(float *)&v351 - *(float *)&v29));
          if (v32 < v33) {
            goto LABEL_25;
          }
          if (v33 < v32) {
            goto LABEL_24;
          }
          DWORD2(v351) = 0;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v14 >> 2), 0);
          float v34 = *((float *)&v351 + 1);
          float v340 = *(float *)&v351;
          float v35 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 16))(a1, &v351, (v14 >> 2), 1);
          uint64_t v36 = v351;
          float v37 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 16))(a1, &v351, (v14 >> 2), 2);
          uint64_t v38 = v351;
          float v39 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 16))(a1, &v351, (v14 >> 2), 3);
          if ((float)((float)((float)((float)(*((float *)&v351 + 1) - *((float *)&v36 + 1))
                                     * (float)(*((float *)&v351 + 1) - *((float *)&v36 + 1)))
                             + (float)((float)(*(float *)&v351 - *(float *)&v36)
                                     * (float)(*(float *)&v351 - *(float *)&v36)))
                     + (float)((float)(*((float *)&v351 + 2) - v37) * (float)(*((float *)&v351 + 2) - v37))) >= (float)((float)((float)((float)(*((float *)&v38 + 1) - v34) * (float)(*((float *)&v38 + 1) - v34)) + (float)((float)(*(float *)&v38 - v340) * (float)(*(float *)&v38 - v340))) + (float)((float)(v39 - v35) * (float)(v39 - v35))))
          {
LABEL_25:
            char v42 = 0;
            int v40 = v14;
            uint64_t v43 = v17 + 1;
            int v41 = (4 * v16) | 2;
          }
          else
          {
LABEL_24:
            int v40 = v26 | 1;
            int v41 = v14 + 3;
            char v42 = 1;
            char v30 = 3;
            uint64_t v43 = v17 + 1;
          }
          int v24 = v26 | 3;
          BOOL v44 = &v331[22 * v17];
          *((_WORD *)v44 + 42) = 256;
          *((unsigned char *)v44 + 86) = v30;
          unint64_t v13 = v331;
          unint64_t v23 = v332;
          v332[3 * v17] = v14;
          uint64_t v45 = (char *)&v332[3 * v17];
          *((_DWORD *)v45 + 1) = v14 + 1;
          *((_DWORD *)v45 + 2) = v41;
          uint64_t v46 = &v331[22 * v43];
          *((unsigned char *)v46 + 84) = v42;
          *(_WORD *)((char *)v46 + 85) = 770;
          int v22 = 3 * v43;
          v332[3 * v43] = v40;
          v332[3 * (int)v43 + 1] = v14 + 2;
          int v25 = 2;
          unsigned int v8 = v324;
        }
        v23[v22 + 2] = v24;
        v17 += v25;
        if (v17 > (int)v8) {
          sub_234637808();
        }
        v15 += v19;
      }
      uint64_t v16 = (v16 + 1);
      v14 += 4;
    }
    while ((int)v16 < (**(int (***)(uint64_t))a1)(a1));
  }
  uint64_t v47 = v8;
  uint64_t v48 = 19;
  uint64_t v327 = v8;
  do
  {
    v13[v48] = 0;
    v48 += 22;
    --v47;
  }
  while (v47);
  DWORD2(v351) = 0;
  *(void *)&long long v351 = 0;
  (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, 0, 0);
  float v49 = *((float *)&v351 + 1);
  float v50 = *(float *)&v351;
  int v51 = 3 * v8;
  if ((int)(3 * v8) <= 2) {
    unsigned int v52 = 2;
  }
  else {
    unsigned int v52 = 3 * v8;
  }
  float v53 = *((float *)&v351 + 2);
  uint64_t v54 = 4 * v52;
  uint64_t v55 = 4;
  float v56 = *((float *)&v351 + 2);
  float v57 = *((float *)&v351 + 1);
  float v58 = *(float *)&v351;
  uint64_t v59 = (uint64_t)v332;
  do
  {
    int v60 = v332[(unint64_t)v55 / 4];
    DWORD2(v351) = 0;
    *(void *)&long long v351 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v60 >> 2), v60 & 3);
    if (v50 < *(float *)&v351) {
      float v61 = *(float *)&v351;
    }
    else {
      float v61 = v50;
    }
    if (v58 <= *(float *)&v351) {
      float v50 = v61;
    }
    else {
      float v58 = *(float *)&v351;
    }
    if (v49 < *((float *)&v351 + 1)) {
      float v62 = *((float *)&v351 + 1);
    }
    else {
      float v62 = v49;
    }
    if (v57 <= *((float *)&v351 + 1)) {
      float v49 = v62;
    }
    else {
      float v57 = *((float *)&v351 + 1);
    }
    if (v56 <= *((float *)&v351 + 2))
    {
      if (v53 < *((float *)&v351 + 2)) {
        float v53 = *((float *)&v351 + 2);
      }
    }
    else
    {
      float v56 = *((float *)&v351 + 2);
    }
    v55 += 4;
  }
  while (v54 != v55);
  float v63 = v50 - v58;
  float v64 = v53 - v56;
  BOOL v65 = (float)(v49 - v57) > (float)(v53 - v56) && (float)(v49 - v57) > (float)(v50 - v58);
  BOOL v66 = v64 <= v63;
  if (v64 > v63) {
    float v67 = v56;
  }
  else {
    float v67 = v58;
  }
  if (v66) {
    float v68 = v50;
  }
  else {
    float v68 = v53;
  }
  int v69 = v66;
  if (v65) {
    float v70 = v57;
  }
  else {
    float v70 = v67;
  }
  if (v65) {
    float v71 = v49;
  }
  else {
    float v71 = v68;
  }
  if (v65) {
    int v72 = 0;
  }
  else {
    int v72 = v69;
  }
  uint64_t v73 = (char *)malloc_type_malloc(v337, 0xDC00542EuLL);
  uint64_t v74 = malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  uint64_t v75 = (int *)malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  uint64_t v76 = (int *)malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  uint64_t v77 = v76;
  int v321 = v15;
  if (v73 && v74 && v75 && v76)
  {
    v326 = v73;
    bzero(v74, 0x2000uLL);
    bzero(v77, 0x2000uLL);
    uint64_t v78 = 0;
    if (v51 <= 1) {
      uint64_t v79 = 1;
    }
    else {
      uint64_t v79 = v51;
    }
    uint64_t v346 = v79;
    uint64_t v80 = 4 * v79;
    do
    {
      int v81 = *(_DWORD *)(v59 + v78);
      DWORD2(v351) = 0;
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v81 >> 2), v81 & 3);
      uint64_t v82 = (float *)&v351 + 1;
      if (!v65) {
        uint64_t v82 = (float *)&v351 + 2;
      }
      uint64_t v59 = (uint64_t)v332;
      if (v72) {
        uint64_t v82 = (float *)&v351;
      }
      int v83 = sub_234627094(v70, v71, *v82);
      ++*((_DWORD *)v74 + v83);
      v78 += 4;
    }
    while (v80 != v78);
    uint64_t v84 = 0;
    int v85 = 0;
    *uint64_t v75 = 0;
    do
    {
      v85 += *((_DWORD *)v74 + v84);
      v75[++v84] = v85;
    }
    while (v84 != 2047);
    uint64_t v86 = 0;
    v328 = v74;
    do
    {
      int v87 = v332[v86];
      DWORD2(v351) = 0;
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v87 >> 2), v87 & 3);
      uint64_t v88 = (float *)&v351 + 1;
      if (!v65) {
        uint64_t v88 = (float *)&v351 + 2;
      }
      uint64_t v89 = v328;
      if (v72) {
        uint64_t v88 = (float *)&v351;
      }
      int v90 = sub_234627094(v70, v71, *v88);
      uint64_t v91 = v77[v90];
      if ((int)v91 >= v328[v90]) {
        sub_2346377DC();
      }
      *(_DWORD *)&v73[4 * v75[v90] + 4 * v91] = v86;
      ++v77[v90];
      ++v86;
    }
    while (v346 != v86);
    for (uint64_t i = 0; i != 2048; ++i)
    {
      if (v77[i] != v328[i]) {
        sub_2346377B0();
      }
    }
    v325 = v75;
    free(v77);
    int v93 = *v328;
    for (uint64_t j = 1; j != 2048; ++j)
    {
      if (v93 <= v328[j]) {
        int v93 = v328[j];
      }
    }
    uint64_t v95 = (char *)malloc_type_malloc(16 * v93, 0x1000040451B5BE8uLL);
    uint64_t v96 = 0;
    do
    {
      uint64_t v329 = v96;
      uint64_t v97 = v89[v96];
      if ((int)v97 >= 2)
      {
        long long v98 = &v326[4 * v325[v96]];
        if (v95)
        {
          uint64_t v99 = 0;
          do
          {
            uint64_t v100 = *(int *)v98;
            v98 += 4;
            int v101 = *(_DWORD *)(v59 + 4 * v100);
            DWORD2(v351) = 0;
            *(void *)&long long v351 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v101 >> 2), v101 & 3);
            int v102 = DWORD2(v351);
            long long v103 = &v95[v99];
            *(void *)long long v103 = v351;
            *((_DWORD *)v103 + 2) = v102;
            *((_DWORD *)v103 + 3) = v100;
            v99 += 16;
          }
          while (16 * v97 != v99);
          sub_2346270B8(v59, (uint64_t)v95, a1, 0, (v97 - 1));
        }
        else
        {
          for (uint64_t k = 0; k != v97; ++k)
          {
            uint64_t v105 = *(int *)&v98[4 * k];
            int v106 = *(_DWORD *)(v59 + 4 * v105);
            DWORD2(v351) = 0;
            *(void *)&long long v351 = 0;
            uint64_t v107 = v106 & 3;
            uint64_t v108 = (v106 >> 2);
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v351, v108, v107);
            uint64_t v109 = v351;
            float v347 = *((float *)&v351 + 2);
            DWORD2(v351) = 0;
            *(void *)&long long v351 = 0;
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v351, v108, v107);
            float v341 = *((float *)&v351 + 1);
            float v343 = *(float *)&v351;
            float v338 = *((float *)&v351 + 2);
            *(void *)&long long v351 = 0;
            uint64_t v110 = v108;
            uint64_t v59 = (uint64_t)v332;
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v351, v110, v107);
            if (k)
            {
              uint64_t v111 = 0;
              float v333 = *((float *)&v351 + 1);
              float v335 = *(float *)&v351;
              while (1)
              {
                uint64_t v112 = *(int *)&v98[4 * v111];
                int v113 = *(_DWORD *)(v59 + 4 * v112);
                DWORD2(v351) = 0;
                *(void *)&long long v351 = 0;
                uint64_t v114 = v113 & 3;
                uint64_t v115 = (v113 >> 2);
                (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v351, v115, v114);
                uint64_t v116 = v351;
                float v117 = *((float *)&v351 + 2);
                DWORD2(v351) = 0;
                *(void *)&long long v351 = 0;
                (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v351, v115, v114);
                uint64_t v118 = v351;
                float v119 = *((float *)&v351 + 2);
                *(void *)&long long v351 = 0;
                (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v351, v115, v114);
                if (*(float *)&v109 == *(float *)&v116
                  && *((float *)&v109 + 1) == *((float *)&v116 + 1)
                  && v347 == v117
                  && v343 == *(float *)&v118
                  && v341 == *((float *)&v118 + 1)
                  && v338 == v119
                  && v335 == *(float *)&v351
                  && v333 == *((float *)&v351 + 1))
                {
                  break;
                }
                ++v111;
                uint64_t v59 = (uint64_t)v332;
                if (k == v111) {
                  goto LABEL_129;
                }
              }
              uint64_t v59 = (uint64_t)v332;
              v332[v105] = v332[v112];
            }
LABEL_129:
            ;
          }
        }
      }
      uint64_t v89 = v328;
      uint64_t v96 = v329 + 1;
    }
    while (v329 != 2047);
    if (v95) {
      free(v95);
    }
    free(v326);
    free(v328);
    free(v325);
  }
  else
  {
    if (v73) {
      free(v73);
    }
    if (v74) {
      free(v74);
    }
    if (v75) {
      free(v75);
    }
    if (v77) {
      free(v77);
    }
    uint64_t v120 = 0;
    uint64_t v121 = 1;
    do
    {
      uint64_t v122 = 0;
      uint64_t v330 = v120;
      uint64_t v123 = 3 * v120;
      do
      {
        int v124 = *(_DWORD *)(v59 + 4 * (v122 + v123));
        DWORD2(v351) = 0;
        *(void *)&long long v351 = 0;
        uint64_t v125 = v124 & 3;
        uint64_t v126 = (v124 >> 2);
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v351, v126, v125);
        uint64_t v127 = v351;
        float v348 = *((float *)&v351 + 2);
        DWORD2(v351) = 0;
        *(void *)&long long v351 = 0;
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v351, v126, v125);
        float v342 = *((float *)&v351 + 1);
        float v344 = *(float *)&v351;
        float v339 = *((float *)&v351 + 2);
        *(void *)&long long v351 = 0;
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v351, v126, v125);
        uint64_t v128 = 0;
        float v334 = *((float *)&v351 + 1);
        float v336 = *(float *)&v351;
        uint64_t v129 = v59;
LABEL_145:
        uint64_t v130 = 0;
        while (1)
        {
          int v131 = *(_DWORD *)(v129 + v130);
          DWORD2(v351) = 0;
          *(void *)&long long v351 = 0;
          uint64_t v132 = v131 & 3;
          uint64_t v133 = (v131 >> 2);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v351, v133, v132);
          uint64_t v134 = v351;
          float v135 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v351, v133, v132);
          uint64_t v136 = v351;
          float v137 = *((float *)&v351 + 2);
          *(void *)&long long v351 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v351, v133, v132);
          if (*(float *)&v127 == *(float *)&v134
            && *((float *)&v127 + 1) == *((float *)&v134 + 1)
            && v348 == v135
            && v344 == *(float *)&v136
            && v342 == *((float *)&v136 + 1)
            && v339 == v137
            && v336 == *(float *)&v351
            && v334 == *((float *)&v351 + 1))
          {
            break;
          }
          v130 += 4;
          if (v130 == 12)
          {
            ++v128;
            v129 += 12;
            if (v128 == v121) {
              sub_234637700();
            }
            goto LABEL_145;
          }
        }
        uint64_t v59 = (uint64_t)v332;
        v332[v122 + v123] = -1;
        ++v122;
      }
      while (v122 != 3);
      uint64_t v120 = v330 + 1;
      ++v121;
    }
    while (v330 + 1 != v327);
  }
  uint64_t v138 = 0;
  int v139 = 0;
  uint64_t v140 = 19;
  do
  {
    int v141 = *(_DWORD *)(v59 + v138);
    int v142 = *(_DWORD *)(v59 + v138 + 4);
    int v143 = *(_DWORD *)(v59 + v138 + 8);
    DWORD2(v351) = 0;
    *(void *)&long long v351 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v141 >> 2), v141 & 3);
    uint64_t v144 = v351;
    float v145 = *((float *)&v351 + 2);
    DWORD2(v351) = 0;
    *(void *)&long long v351 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v142 >> 2), v142 & 3);
    uint64_t v146 = v351;
    float v147 = *((float *)&v351 + 2);
    DWORD2(v351) = 0;
    *(void *)&long long v351 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v143 >> 2), v143 & 3);
    if (*(float *)&v144 == *(float *)&v146 && *((float *)&v144 + 1) == *((float *)&v146 + 1) && v145 == v147
      || *(float *)&v144 == *(float *)&v351
      && *((float *)&v144 + 1) == *((float *)&v351 + 1)
      && v145 == *((float *)&v351 + 2)
      || *(float *)&v146 == *(float *)&v351
      && *((float *)&v146 + 1) == *((float *)&v351 + 1)
      && v147 == *((float *)&v351 + 2))
    {
      v331[v140] |= 1u;
      ++v139;
    }
    v138 += 12;
    v140 += 22;
  }
  while (12 * v327 != v138);
  uint64_t v148 = (v324 - v139);
  unint64_t v13 = v331;
  if (v324 > 1)
  {
    int v149 = 0;
    do
    {
      int v150 = v149;
      uint64_t v151 = v149 + 1;
      if (v331[22 * v149 + 18] == v331[22 * v149 + 40])
      {
        uint64_t v152 = &v331[22 * v149];
        int v155 = v152[19];
        int v153 = v152 + 19;
        int v154 = v155;
        uint64_t v156 = &v331[22 * v151];
        int v159 = v156[19];
        uint64_t v157 = v156 + 19;
        int v158 = v159;
        if ((v159 ^ v154))
        {
          *int v153 = v154 | 2;
          int *v157 = v158 | 2;
        }
        LODWORD(v151) = v150 + 2;
      }
      int v149 = v151;
    }
    while ((int)v151 < v322);
  }
  if ((int)v148 < 1)
  {
    if (v324 != v139) {
      sub_234637784();
    }
  }
  else
  {
    unsigned int v160 = 0;
    uint64_t v161 = 0;
    LODWORD(v162) = 1;
    do
    {
      uint64_t v163 = &v331[22 * v161];
      if (v163[19])
      {
        if ((int)v162 >= v324)
        {
          if ((int)v162 > (int)v161) {
LABEL_365:
          }
            sub_23463772C();
LABEL_366:
          sub_234637758();
        }
        uint64_t v165 = v59 + 4 * v160;
        do
        {
          uint64_t v166 = v331[22 * (int)v162 + 19] & 1;
          uint64_t v162 = v166 + (int)v162;
          if (v166) {
            BOOL v167 = (int)v162 < v324;
          }
          else {
            BOOL v167 = 0;
          }
        }
        while (v167);
        if (v161 >= v162) {
          goto LABEL_366;
        }
        if (v166) {
          goto LABEL_365;
        }
        uint64_t v168 = 0;
        int v164 = v162 + 1;
        uint64_t v169 = v59 + 12 * v162;
        do
        {
          int v170 = *(_DWORD *)(v165 + v168);
          *(_DWORD *)(v165 + v168) = *(_DWORD *)(v169 + v168);
          *(_DWORD *)(v169 + v168) = v170;
          v168 += 4;
        }
        while (v168 != 12);
        long long v353 = *((_OWORD *)v163 + 2);
        long long v354 = *((_OWORD *)v163 + 3);
        long long v355 = *((_OWORD *)v163 + 4);
        uint64_t v356 = *((void *)v163 + 10);
        long long v351 = *(_OWORD *)v163;
        long long v352 = *((_OWORD *)v163 + 1);
        uint64_t v171 = &v331[22 * v162];
        long long v172 = *((_OWORD *)v171 + 1);
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v171;
        *((_OWORD *)v163 + 1) = v172;
        long long v174 = *((_OWORD *)v171 + 3);
        long long v173 = *((_OWORD *)v171 + 4);
        long long v175 = *((_OWORD *)v171 + 2);
        *((void *)v163 + 10) = *((void *)v171 + 10);
        *((_OWORD *)v163 + 3) = v174;
        *((_OWORD *)v163 + 4) = v173;
        *((_OWORD *)v163 + 2) = v175;
        *(_OWORD *)uint64_t v171 = v351;
        *((void *)v171 + 10) = v356;
        *((_OWORD *)v171 + 4) = v355;
        *((_OWORD *)v171 + 3) = v354;
        *((_OWORD *)v171 + 2) = v353;
        *((_OWORD *)v171 + 1) = v352;
      }
      else if ((int)v162 <= (int)v161 + 2)
      {
        int v164 = v161 + 2;
      }
      else
      {
        int v164 = v162;
      }
      ++v161;
      v160 += 3;
      LODWORD(v162) = v164;
    }
    while (v161 != v148);
    uint64_t v176 = v331 + 19;
    uint64_t v177 = (v324 - v139);
    do
    {
      *(void *)(v176 - 19) = -1;
      *(v176 - 17) = -1;
      *(void *)(v176 - 15) = 0;
      *(void *)(v176 - 11) = 0;
      *(void *)(v176 - 13) = 0;
      *v176 |= 4u;
      *(_OWORD *)(v176 - 9) = 0uLL;
      *(_OWORD *)(v176 - 5) = 0uLL;
      v176 += 22;
      --v177;
    }
    while (v177);
    uint64_t v178 = 0;
    uint64_t v179 = v332 + 2;
    do
    {
      int v180 = *(v179 - 2);
      DWORD2(v351) = 0;
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v180 >> 2), v180 & 3);
      float v181 = *((float *)&v351 + 2);
      float32x2_t v182 = (float32x2_t)v351;
      int v183 = *(v179 - 1);
      DWORD2(v351) = 0;
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v183 >> 2), v183 & 3);
      float32x2_t v349 = (float32x2_t)v351;
      float v345 = *((float *)&v351 + 2);
      int v184 = *v179;
      DWORD2(v351) = 0;
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v351, (v184 >> 2), v184 & 3);
      float32x2_t v185 = (float32x2_t)v351;
      float v186 = *((float *)&v351 + 2);
      int v187 = *(v179 - 2);
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v351, (v187 >> 2), v187 & 3);
      uint64_t v188 = v351;
      int v189 = *(v179 - 1);
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v351, (v189 >> 2), v189 & 3);
      uint64_t v190 = v351;
      int v191 = *v179;
      *(void *)&long long v351 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v351, (v191 >> 2), v191 & 3);
      float v192 = *(float *)&v190 - *(float *)&v188;
      float v193 = *((float *)&v190 + 1) - *((float *)&v188 + 1);
      float v194 = *(float *)&v351 - *(float *)&v188;
      float v195 = *((float *)&v351 + 1) - *((float *)&v188 + 1);
      float v196 = (float)((float)(*(float *)&v190 - *(float *)&v188) * (float)(*((float *)&v351 + 1) - *((float *)&v188 + 1)))
           - (float)((float)(*((float *)&v190 + 1) - *((float *)&v188 + 1)) * (float)(*(float *)&v351 - *(float *)&v188));
      int v197 = v331[v178 + 19] | (8 * (v196 > 0.0));
      v331[v178 + 19] = v197;
      float v198 = fabsf(v196);
      if (v198 > 1.1755e-38)
      {
        float32x2_t v199 = vsub_f32(v349, v182);
        float32x2_t v200 = vsub_f32(v185, v182);
        float32x2_t v201 = vsub_f32(vmul_n_f32(v199, v195), vmul_n_f32(v200, v193));
        float v202 = (float)((float)(v345 - v181) * v195) - (float)((float)(v186 - v181) * v193);
        float v203 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v201, v201).i32[1]), v201.f32[0], v201.f32[0]) + (float)(v202 * v202));
        float v204 = 1.0;
        if ((v197 & 8) == 0) {
          float v204 = -1.0;
        }
        if (fabsf(v203) > 1.1755e-38)
        {
          v205 = (float32x2_t *)&v331[v178];
          v205[5] = vmul_n_f32(v201, v204 / v203);
          v205[6].f32[0] = v202 * (float)(v204 / v203);
        }
        float v206 = (float)(v186 - v181) * v192;
        float32x2_t v207 = vsub_f32(vmul_n_f32(v200, v192), vmul_n_f32(v199, v194));
        float v208 = v206 - (float)((float)(v345 - v181) * v194);
        float v209 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v207, v207).i32[1]), v207.f32[0], v207.f32[0]) + (float)(v208 * v208));
        if (fabsf(v209) > 1.1755e-38)
        {
          v210 = &v331[v178];
          *(float32x2_t *)(v210 + 13) = vmul_n_f32(v207, v204 / v209);
          *((float *)v210 + 15) = v208 * (float)(v204 / v209);
        }
        float v211 = v203 / v198;
        uint64_t v212 = (float *)&v331[v178];
        float v213 = v209 / v198;
        v212[16] = v211;
        v212[17] = v213;
        float v214 = fabsf(v213);
        if (fabsf(v211) > 1.1755e-38 && v214 > 1.1755e-38) {
          v331[v178 + 19] = v197 & 0xFFFFFFFB;
        }
      }
      v179 += 3;
      v178 += 22;
    }
    while (22 * v148 != v178);
    uint64_t v59 = (uint64_t)v332;
    if ((int)v148 >= 2)
    {
      int v216 = 0;
      do
      {
        uint64_t v217 = v216;
        uint64_t v218 = v216 + 1;
        if (v331[22 * v216 + 18] == v331[22 * v216 + 40])
        {
          int v219 = v331[22 * v216 + 19];
          int v220 = v331[22 * v218 + 19];
          if (((v219 | v220) & 1) == 0 && ((v220 ^ v219) & 8) != 0)
          {
            if ((v220 & 4) != 0
              || (sub_234627600(a1, &v332[3 * v217]),
                  float v222 = v221,
                  sub_234627600(a1, &v332[3 * v218]),
                  v222 >= v223))
            {
              uint64_t v224 = v217;
            }
            else
            {
              uint64_t v224 = v217 + 1;
              uint64_t v218 = v217;
            }
            v225 = &v331[22 * v218];
            unsigned int v226 = v225[19] & 0xFFFFFFF7;
            v225[19] = v226;
            v225[19] = v331[22 * v224 + 19] & 8 | v226;
          }
          LODWORD(v218) = v217 + 2;
        }
        int v216 = v218;
      }
      while ((int)v218 < (int)v148 - 1);
    }
  }
  uint64_t v227 = (char *)malloc_type_malloc(36 * (int)v148, 0x1954726DuLL);
  if (v227)
  {
    v228 = v227;
    if ((int)v148 <= 0)
    {
      sub_234627700((uint64_t)v227, 0, (3 * v148 - 1), 0, 0x26065CAu);
    }
    else
    {
      uint64_t v229 = 0;
      v230 = v227 + 8;
      uint64_t v231 = v59;
      do
      {
        uint64_t v232 = 0;
        v233 = v230;
        do
        {
          int v234 = *(_DWORD *)(v231 + 4 * v232);
          if (v232 == 2) {
            uint64_t v235 = 0;
          }
          else {
            uint64_t v235 = v232 + 1;
          }
          uint64_t v236 = v232 + 1;
          int v237 = *(_DWORD *)(v59 + 4 * (v235 + 3 * v229));
          if (v234 >= v237) {
            int v238 = *(_DWORD *)(v59 + 4 * (v235 + 3 * v229));
          }
          else {
            int v238 = v234;
          }
          if (v234 > v237) {
            int v237 = v234;
          }
          *(v233 - 2) = v238;
          *(v233 - 1) = v237;
          _DWORD *v233 = v229;
          v233 += 3;
          uint64_t v232 = v236;
        }
        while (v236 != 3);
        ++v229;
        v231 += 12;
        v230 += 9;
      }
      while (v229 != v148);
      int v239 = 3 * v148;
      sub_234627700((uint64_t)v227, 0, (3 * v148 - 1), 0, 0x26065CAu);
      int v240 = 0;
      if (3 * (int)v148 <= 2) {
        uint64_t v241 = 2;
      }
      else {
        uint64_t v241 = v239;
      }
      int v242 = 1;
      uint64_t v243 = 3;
      do
      {
        if (v228[3 * v240] != v228[v243])
        {
          sub_234627700((uint64_t)v228, v240, (v242 - 1), 1, 0x26065CAu);
          int v240 = v242;
        }
        v243 += 3;
        ++v242;
      }
      while (v241 + 2 * v241 != v243);
      uint64_t v244 = 0;
      int v245 = 0;
      uint64_t v246 = v241 - 1;
      uint64_t v247 = v228 + 4;
      unint64_t v13 = v331;
      do
      {
        uint64_t v248 = &v228[3 * v245];
        if (*v248 != *(v247 - 1) || v248[1] != *v247)
        {
          sub_234627700((uint64_t)v228, v245, v244, 2, 0x26065CAu);
          int v245 = v244 + 1;
          unint64_t v13 = v331;
        }
        ++v244;
        v247 += 3;
      }
      while (v246 != v244);
      uint64_t v249 = 0;
      if (v239 <= 1) {
        uint64_t v250 = 1;
      }
      else {
        uint64_t v250 = v239;
      }
      do
      {
        uint64_t v251 = &v228[3 * v249];
        int v252 = *v251;
        int v253 = v251[1];
        int v254 = v251[2];
        uint64_t v255 = &v332[3 * v254];
        int v256 = *v255;
        uint64_t v257 = v255 + 1;
        int v258 = v255[1];
        if (*v255 == v252 || v256 == v253)
        {
          if (v258 == v252 || v258 == v253)
          {
            uint64_t v261 = 0;
          }
          else
          {
            int v256 = v255[2];
            uint64_t v261 = 2;
            uint64_t v257 = &v332[3 * v254];
          }
        }
        else
        {
          uint64_t v257 = v255 + 2;
          int v256 = v255[1];
          uint64_t v261 = 1;
        }
        uint64_t v262 = (char *)&v13[22 * v254];
        ++v249;
        if (*(_DWORD *)&v262[4 * v261] == -1 && v249 < v239)
        {
          uint64_t v264 = &v228[3 * (int)v249];
          if (v252 == *v264 && v253 == v264[1])
          {
            int v265 = *v257;
            uint64_t v266 = (int)v249;
            int v267 = v249;
            do
            {
              int v268 = v228[3 * v266 + 2];
              uint64_t v269 = &v332[3 * v268];
              int v270 = *v269;
              uint64_t v271 = v269 + 1;
              int v272 = v269[1];
              if (*v269 == v252 || v270 == v253)
              {
                if (v272 == v252 || v272 == v253)
                {
                  uint64_t v275 = 0;
                }
                else
                {
                  int v270 = v269[2];
                  uint64_t v275 = 2;
                  uint64_t v271 = &v332[3 * v268];
                }
              }
              else
              {
                uint64_t v271 = v269 + 2;
                uint64_t v275 = 1;
                int v270 = v269[1];
              }
              if (v256 == *v271
                && ((int v276 = v13[22 * v268 + v275], v265 == v270) ? (v277 = v276 == -1) : (v277 = 0), v277))
              {
                char v279 = 0;
                int v278 = 1;
              }
              else
              {
                int v278 = 0;
                ++v267;
                char v279 = 1;
              }
              uint64_t v280 = &v228[3 * v267];
              if (v267 >= v239 || v252 != *v280) {
                break;
              }
              uint64_t v266 = v267;
              char v281 = v279 ^ 1;
              if (v253 != v280[1]) {
                char v281 = 1;
              }
            }
            while ((v281 & 1) == 0);
            if (v278)
            {
              int v282 = v280[2];
              *(_DWORD *)&v262[4 * v261] = v282;
              v13[22 * v282 + v275] = v254;
            }
          }
        }
      }
      while (v249 != v250);
    }
    free(v228);
    int v283 = v321;
  }
  else
  {
    int v283 = v321;
    if ((int)v148 >= 1)
    {
      for (uint64_t m = 0; m != v148; ++m)
      {
        unint64_t v285 = 0;
        v286 = &v331[22 * m];
        uint64_t v287 = (3 * m);
        do
        {
          if (v286[v285] == -1)
          {
            unsigned int v289 = 0;
            uint64_t v290 = 0;
            unint64_t v288 = v285 + 1;
            if (v285 >= 2) {
              int v291 = 0;
            }
            else {
              int v291 = v285 + 1;
            }
            int v292 = *(_DWORD *)(v59 + 4 * (v291 + v287));
            v293 = v331;
            while (m == v290)
            {
LABEL_318:
              ++v290;
              v293 += 22;
              v289 += 3;
              if (v290 == v148) {
                goto LABEL_321;
              }
            }
            unint64_t v294 = 0;
            while (1)
            {
              unint64_t v295 = v294 + 1;
              int v296 = v294 >= 2 ? 0 : v294 + 1;
              if (*(_DWORD *)(v59 + 4 * (v285 + v287)) == *(_DWORD *)(v59 + 4 * (v296 + 3 * v290))
                && v292 == *(_DWORD *)(v59 + 4 * v289 + 4 * v294))
              {
                break;
              }
              ++v294;
              if (v295 == 3) {
                goto LABEL_318;
              }
            }
            v286[v285] = v290;
            v293[v294] = m;
          }
          else
          {
            unint64_t v288 = v285 + 1;
          }
LABEL_321:
          unint64_t v285 = v288;
        }
        while (v288 != 3);
      }
    }
  }
  v297 = malloc_type_malloc(72 * v148, 0x101004035137979uLL);
  v298 = malloc_type_malloc(12 * (int)v148, 0x21F0E3D7uLL);
  v299 = v298;
  if (v297) {
    BOOL v300 = v298 == 0;
  }
  else {
    BOOL v300 = 1;
  }
  if (v300)
  {
    if (v297) {
      free(v297);
    }
    if (v299) {
      free(v299);
    }
    free(v332);
LABEL_336:
    v301 = v13;
LABEL_337:
    free(v301);
    return 0;
  }
  int v303 = sub_234625D20((uint64_t)v13, (uint64_t)v297, (uint64_t)v298, (uint64_t)v332, v148);
  v304 = malloc_type_malloc(40 * v283, 0x10000400A747E1EuLL);
  if (!v304)
  {
    free(v332);
    free(v13);
    free(v297);
    v301 = v299;
    goto LABEL_337;
  }
  uint64_t v305 = (uint64_t)v304;
  bzero(v304, 40 * v283);
  if (v283 >= 1)
  {
    uint64_t v306 = v283;
    v307 = (_OWORD *)(v305 + 16);
    do
    {
      *(v307 - 1) = xmmword_23463B5D0;
      _OWORD *v307 = xmmword_23463B5E0;
      v307 = (_OWORD *)((char *)v307 + 40);
      --v306;
    }
    while (v306);
  }
  int v308 = sub_234625F38(v305, (uint64_t)v13, (int *)v297, v303, (uint64_t)v332, a1, v323);
  free(v297);
  free(v299);
  if (!v308)
  {
    free(v13);
    free(v332);
    v301 = (void *)v305;
    goto LABEL_337;
  }
  v309 = (void *)v305;
  sub_234626DC8(v305, (uint64_t)v13, (uint64_t)v332, a1, v148, v324);
  free(v13);
  free(v332);
  int v310 = 0;
  uint64_t v311 = 0;
  do
  {
    int v312 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v311);
    if ((v312 - 3) <= 1)
    {
      int v314 = v312;
      uint64_t v315 = 0;
      uint64_t v316 = (uint64_t)v309 + 40 * v310 + 20;
      do
      {
        *(void *)&long long v351 = *(void *)(v316 - 20);
        DWORD2(v351) = *(_DWORD *)(v316 - 12);
        v350[0] = *(_DWORD *)(v316 - 4);
        v350[1] = *(_DWORD *)v316;
        v350[2] = *(_DWORD *)(v316 + 4);
        uint64_t v317 = *(void *)a1;
        v318 = *(void (**)(uint64_t, long long *, _DWORD *, void, uint64_t, uint64_t, float, float))(*(void *)a1 + 48);
        if (v318)
        {
          v318(a1, &v351, v350, *(unsigned int *)(v316 + 16), v311, v315, *(float *)(v316 - 8), *(float *)(v316 + 8));
          uint64_t v317 = *(void *)a1;
        }
        v319 = *(void (**)(uint64_t, long long *, uint64_t, uint64_t, __n128))(v317 + 40);
        if (v319)
        {
          if (*(_DWORD *)(v316 + 16) == 1) {
            v313.n128_f32[0] = 1.0;
          }
          else {
            v313.n128_f32[0] = -1.0;
          }
          v319(a1, &v351, v311, v315, v313);
        }
        uint64_t v315 = (v315 + 1);
        v316 += 40;
      }
      while (v314 != v315);
      v310 += v315;
    }
    uint64_t v311 = (v311 + 1);
  }
  while (v311 != v320);
  free(v309);
  return 1;
}

uint64_t sub_234625D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 < 1) {
    return 0;
  }
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  uint64_t result = 0;
  int v9 = 0;
  uint64_t v10 = a1;
  int v11 = 3 * a5;
  uint64_t v27 = a5;
  uint64_t v36 = a1;
  int v29 = 3 * a5;
  do
  {
    uint64_t v12 = 0;
    unsigned int v28 = v6;
    uint64_t v33 = a4 + 4 * v6;
    uint64_t v32 = a1 + 88 * v7;
    unint64_t v13 = (unsigned int *)(v32 + 76);
    uint64_t v14 = 0xFFFFFFFF00000000;
    do
    {
      unsigned int v15 = *v13;
      if ((*v13 & 4) == 0)
      {
        uint64_t v16 = v10 + 8 * v12;
        if (!*(void *)(v16 + 16))
        {
          if ((int)result >= v11) {
            sub_2346378B8();
          }
          int v17 = *(_DWORD *)(v33 + 4 * v12);
          int v35 = result;
          uint64_t v18 = a2 + 24 * (int)result;
          *(void *)(v16 + 16) = v18;
          *(_DWORD *)(v18 + 16) = v17;
          *(_DWORD *)(v18 + 20) = (v15 >> 3) & 1;
          *(_DWORD *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = a3 + 4 * v9;
          uint64_t v19 = *(void *)(v16 + 16);
          uint64_t v20 = v7;
          *(_DWORD *)(*(void *)(v19 + 8) + 4 * (int)(*(_DWORD *)v19)++) = v7;
          unsigned int v21 = *(_DWORD *)(v10 + 4 * v12);
          int v22 = (*v13 >> 3) & 1;
          uint64_t v23 = v14 >> 32;
          if (!v12) {
            uint64_t v23 = 2;
          }
          unsigned int v24 = *(_DWORD *)(v32 + 4 * v23);
          if ((v21 & 0x80000000) == 0)
          {
            int v25 = sub_2346278B4(a4, v36, *(_DWORD *)(v10 + 4 * v12), v19);
            a1 = v36;
            if (!v25 && v22 == ((*(_DWORD *)(v36 + 88 * v21 + 76) >> 3) & 1)) {
              sub_234637834();
            }
            uint64_t v19 = *(void *)(v16 + 16);
          }
          if ((v24 & 0x80000000) == 0)
          {
            int v26 = sub_2346278B4(a4, v36, v24, v19);
            a1 = v36;
            if (!v26 && v22 == ((*(_DWORD *)(v36 + 88 * v24 + 76) >> 3) & 1)) {
              sub_234637860();
            }
            uint64_t v19 = *(void *)(v16 + 16);
          }
          v9 += *(_DWORD *)v19;
          int v11 = v29;
          if (v9 > v29) {
            sub_23463788C();
          }
          uint64_t v7 = v20;
          uint64_t result = (v35 + 1);
        }
      }
      ++v12;
      v14 += 0x100000000;
    }
    while (v12 != 3);
    ++v7;
    unsigned int v6 = v28 + 3;
    v10 += 88;
  }
  while (v7 != v27);
  return result;
}

uint64_t sub_234625F38(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v287 = *MEMORY[0x263EF8340];
  if (a4 < 1) {
    return 1;
  }
  unsigned int v11 = 0;
  uint64_t v12 = a4;
  uint64_t v247 = a4;
  unint64_t v13 = a3;
  do
  {
    int v15 = *v13;
    v13 += 6;
    unsigned int v14 = v15;
    if ((int)v11 <= v15) {
      unsigned int v11 = v14;
    }
    --v12;
  }
  while (v12);
  if (!v11) {
    return 1;
  }
  uint64_t v16 = (char *)malloc_type_malloc(40 * v11, 0x10000400A747E1EuLL);
  int v17 = (void **)malloc_type_malloc(16 * v11, 0x101004082113244uLL);
  uint64_t v18 = (int *)malloc_type_malloc(4 * v11, 0x100004052888210uLL);
  uint64_t v19 = v18;
  if (v16) {
    BOOL v20 = v17 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20 && v18 != 0)
  {
    uint64_t v23 = 0;
    uint64_t v246 = v17 + 1;
    float v24 = 1.0;
    float v260 = a7;
    uint64_t v279 = a2;
    uint64_t v280 = a5;
    uint64_t v250 = v16;
    uint64_t v251 = a1;
    int v252 = v17;
    while (1)
    {
      uint64_t v249 = v23;
      int v25 = &a3[6 * v23];
      if (*v25 < 1) {
        goto LABEL_212;
      }
      uint64_t v26 = 0;
      int v27 = 0;
      unsigned int v28 = &a3[6 * v23];
      uint64_t v255 = v28 + 4;
      int v256 = (uint64_t *)(v28 + 2);
      uint64_t v259 = v28 + 5;
      int v254 = v25;
      do
      {
        int v29 = *(_DWORD *)(*v256 + 4 * v26);
        if (*(int **)(a2 + 88 * v29 + 16) == v25)
        {
          int v30 = 0;
        }
        else if (*(int **)(a2 + 88 * v29 + 24) == v25)
        {
          int v30 = 1;
        }
        else
        {
          if (*(int **)(a2 + 88 * v29 + 32) != v25) {
            sub_234637A18();
          }
          int v30 = 2;
        }
        int v31 = *(_DWORD *)(a5 + 4 * (v30 + 3 * v29));
        if (v31 != *v255) {
          sub_2346379EC();
        }
        unsigned int v258 = v30;
        uint64_t v257 = v26;
        int v283 = v27;
        float v286 = 0.0;
        uint64_t v285 = 0;
        int v282 = v29;
        (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)a6 + 24))(a6, &v285, (v31 >> 2), v31 & 3);
        int v32 = v282;
        uint64_t v33 = v285;
        float v34 = v286;
        int v35 = (float *)(a2 + 88 * v282);
        float v36 = v35[10];
        float v37 = v35[11];
        float v38 = v35[12];
        float v39 = (float)((float)(*((float *)&v285 + 1) * v37) + (float)(*(float *)&v285 * v36)) + (float)(v286 * v38);
        float v40 = *(float *)&v285 * v39;
        float v41 = *((float *)&v285 + 1) * v39;
        float v42 = v286 * v39;
        float v43 = v36 - (float)(*(float *)&v285 * v39);
        float v44 = v37 - v41;
        float v45 = v38 - v42;
        float v46 = vabds_f32(v37, v41);
        float v47 = vabds_f32(v38, v42);
        if (vabds_f32(v36, v40) > 1.1755e-38 || v46 > 1.1755e-38 || v47 > 1.1755e-38)
        {
          float v50 = v24 / sqrtf((float)((float)(v44 * v44) + (float)(v43 * v43)) + (float)(v45 * v45));
          float v43 = v43 * v50;
          float v44 = v44 * v50;
          float v45 = v45 * v50;
        }
        float v51 = v35[13];
        float v52 = v35[14];
        float v53 = v35[15];
        float v54 = (float)((float)(*((float *)&v285 + 1) * v52) + (float)(*(float *)&v285 * v51)) + (float)(v286 * v53);
        float v55 = v51 - (float)(*(float *)&v285 * v54);
        float v56 = v52 - (float)(*((float *)&v285 + 1) * v54);
        float v57 = v53 - (float)(v286 * v54);
        float v58 = fabsf(v56);
        float v59 = fabsf(v57);
        BOOL v61 = fabsf(v55) <= 1.1755e-38 && v58 <= 1.1755e-38 && v59 <= 1.1755e-38;
        int v27 = v283;
        if (!v61)
        {
          float v62 = v24 / sqrtf((float)((float)(v56 * v56) + (float)(v55 * v55)) + (float)(v57 * v57));
          float v55 = v55 * v62;
          float v56 = v56 * v62;
          float v57 = v57 * v62;
        }
        int v63 = *v25;
        if (*v25 < 1)
        {
          LODWORD(v65) = 0;
        }
        else
        {
          uint64_t v64 = 0;
          LODWORD(v65) = 0;
          int v66 = *(_DWORD *)(a2 + 88 * v282 + 72);
          uint64_t v67 = *v256;
          do
          {
            int v68 = *(_DWORD *)(v67 + 4 * v64);
            uint64_t v69 = a2 + 88 * v68;
            float v70 = *(float *)(v69 + 40);
            float v71 = *(float *)(v69 + 44);
            float v72 = *(float *)(v69 + 48);
            float v73 = (float)((float)(*((float *)&v33 + 1) * v71) + (float)(*(float *)&v33 * v70)) + (float)(v34 * v72);
            float v74 = *(float *)&v33 * v73;
            float v75 = *((float *)&v33 + 1) * v73;
            float v76 = v34 * v73;
            float v77 = v70 - (float)(*(float *)&v33 * v73);
            float v78 = v71 - v75;
            float v79 = v72 - v76;
            float v80 = vabds_f32(v71, v75);
            float v81 = vabds_f32(v72, v76);
            if (vabds_f32(v70, v74) > 1.1755e-38 || v80 > 1.1755e-38 || v81 > 1.1755e-38)
            {
              float v84 = v24 / sqrtf((float)((float)(v78 * v78) + (float)(v77 * v77)) + (float)(v79 * v79));
              float v77 = v77 * v84;
              float v78 = v78 * v84;
              float v79 = v79 * v84;
            }
            float v85 = *(float *)(v69 + 52);
            float v86 = *(float *)(v69 + 56);
            float v87 = *(float *)(v69 + 60);
            float v88 = (float)((float)(*((float *)&v33 + 1) * v86) + (float)(*(float *)&v33 * v85)) + (float)(v34 * v87);
            float v89 = v34 * v88;
            float v90 = v85 - (float)(*(float *)&v33 * v88);
            float v91 = v86 - (float)(*((float *)&v33 + 1) * v88);
            float v92 = v87 - v89;
            float v93 = fabsf(v91);
            float v94 = fabsf(v87 - v89);
            if (fabsf(v90) > 1.1755e-38 || v93 > 1.1755e-38 || v94 > 1.1755e-38)
            {
              float v97 = v24 / sqrtf((float)((float)(v91 * v91) + (float)(v90 * v90)) + (float)(v92 * v92));
              float v90 = v90 * v97;
              float v91 = v91 * v97;
              float v92 = v92 * v97;
            }
            int v98 = *(_DWORD *)(v69 + 72);
            if (v282 == v68 && v66 != v98) {
              sub_2346379C0();
            }
            if (((*(_DWORD *)(a2 + 88 * v282 + 76) | *(_DWORD *)(a2 + 88 * v68 + 76)) & 4) != 0
              || v66 == v98
              || ((float)((float)((float)(v44 * v78) + (float)(v43 * v77)) + (float)(v45 * v79)) > a7
                ? (BOOL v99 = (float)((float)((float)(v56 * v91) + (float)(v55 * v90)) + (float)(v57 * v92)) <= a7)
                : (BOOL v99 = 1),
                  !v99))
            {
              v19[(int)v65] = v68;
              int v63 = *v25;
              LODWORD(v65) = v65 + 1;
            }
            ++v64;
          }
          while (v64 < v63);
          if ((int)v65 > 1)
          {
            sub_234627A2C((uint64_t)v19, 0, v65 - 1, 0x26065CAu);
            int v32 = v282;
            int v27 = v283;
          }
        }
        if (v27 < 1)
        {
          int v100 = 0;
          char v103 = 0;
LABEL_91:
          if (v100 != v27) {
            sub_234637994();
          }
          goto LABEL_92;
        }
        int v100 = 0;
        while (1)
        {
          if (v65 == LODWORD(v17[2 * v100]))
          {
            if ((int)v65 < 1) {
              goto LABEL_175;
            }
            unsigned int v101 = 0;
            do
            {
              BOOL v102 = v19[v101] == *((_DWORD *)v17[2 * v100 + 1] + v101);
              if (v19[v101] != *((_DWORD *)v17[2 * v100 + 1] + v101)) {
                break;
              }
              v101 += v19[v101] == *((_DWORD *)v17[2 * v100 + 1] + v101);
            }
            while ((int)v101 < (int)v65);
            if (v102) {
              break;
            }
          }
          char v103 = 0;
          if (++v100 >= v27) {
            goto LABEL_88;
          }
        }
        char v103 = 1;
LABEL_88:
        if ((v103 & 1) == 0) {
          goto LABEL_91;
        }
LABEL_92:
        if ((v103 & 1) == 0)
        {
          uint64_t v104 = malloc_type_malloc(4 * (int)v65, 0x100004052888210uLL);
          int v253 = v104;
          if (v104)
          {
            uint64_t v105 = (char *)&v252[2 * v283];
            *(_DWORD *)uint64_t v105 = v65;
            *((void *)v105 + 1) = v104;
            memcpy(v104, v19, 4 * (int)v65);
            float v106 = 0.0;
            if ((int)v65 < 1)
            {
              float v108 = 0.0;
              float v109 = 0.0;
              float v111 = 0.0;
              float v112 = 0.0;
              float v113 = 0.0;
              float v114 = 0.0;
              float v115 = 0.0;
              float v116 = 0.0;
              int v117 = v283;
              int v32 = v282;
            }
            else
            {
              int v107 = *v255;
              float v108 = 0.0;
              float v109 = 0.0;
              uint64_t v65 = v65;
              uint64_t v110 = v19;
              float v111 = 0.0;
              float v112 = 0.0;
              float v113 = 0.0;
              float v114 = 0.0;
              float v115 = 0.0;
              float v116 = 0.0;
              int v117 = v283;
              int v32 = v282;
              int v281 = *v255;
              do
              {
                uint64_t v119 = *v110++;
                uint64_t v118 = v119;
                if ((*(unsigned char *)(a2 + 88 * (int)v119 + 76) & 4) == 0)
                {
                  uint64_t v120 = 3 * (int)v118;
                  int v121 = *(_DWORD *)(a5 + 4 * v120);
                  float v277 = v108;
                  float v278 = v106;
                  float v275 = v111;
                  float v276 = v109;
                  float v273 = v113;
                  float v274 = v112;
                  float v271 = v115;
                  float v272 = v114;
                  float v270 = v116;
                  uint64_t v269 = v110;
                  if (v121 == v107)
                  {
                    unsigned int v122 = 0;
                    int v261 = 1;
                  }
                  else if (*(_DWORD *)(a5 + 12 * v118 + 4) == v107)
                  {
                    int v261 = 1;
                    unsigned int v122 = 1;
                  }
                  else
                  {
                    if (*(_DWORD *)(a5 + 4 * v120 + 8) != v107) {
                      sub_234637968();
                    }
                    int v261 = 0;
                    unsigned int v122 = 2;
                  }
                  uint64_t v123 = v120 + v122;
                  int v124 = *(_DWORD *)(v280 + 4 * v123);
                  float v286 = 0.0;
                  uint64_t v285 = 0;
                  (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)a6 + 24))(a6, &v285, (v124 >> 2), v124 & 3);
                  uint64_t v125 = v285;
                  float v126 = v286;
                  uint64_t v127 = (float *)(v279 + 88 * (int)v118);
                  float v128 = v127[10];
                  float v129 = v127[11];
                  float v130 = v127[12];
                  float v131 = (float)((float)(*((float *)&v285 + 1) * v129) + (float)(*(float *)&v285 * v128))
                       + (float)(v286 * v130);
                  float v132 = *(float *)&v285 * v131;
                  float v133 = *((float *)&v285 + 1) * v131;
                  float v134 = v286 * v131;
                  float v135 = v128 - v132;
                  float v136 = v129 - v133;
                  float v137 = v130 - v134;
                  float v138 = vabds_f32(v129, v133);
                  float v139 = vabds_f32(v130, v134);
                  if (vabds_f32(v128, v132) > 1.1755e-38 || v138 > 1.1755e-38 || v139 > 1.1755e-38)
                  {
                    float v142 = v24 / sqrtf((float)((float)(v136 * v136) + (float)(v135 * v135)) + (float)(v137 * v137));
                    float v135 = v135 * v142;
                    float v136 = v136 * v142;
                    float v137 = v137 * v142;
                  }
                  float v143 = v127[13];
                  float v144 = v127[14];
                  float v145 = v127[15];
                  float v146 = (float)((float)(*((float *)&v285 + 1) * v144) + (float)(*(float *)&v285 * v143))
                       + (float)(v286 * v145);
                  float v147 = v143 - (float)(*(float *)&v285 * v146);
                  float v148 = v144 - (float)(*((float *)&v285 + 1) * v146);
                  float v149 = v145 - (float)(v286 * v146);
                  float v150 = fabsf(v148);
                  float v151 = fabsf(v149);
                  BOOL v153 = fabsf(v147) <= 1.1755e-38 && v150 <= 1.1755e-38 && v151 <= 1.1755e-38;
                  float v267 = v136;
                  float v268 = v137;
                  float v266 = v135;
                  if (v153)
                  {
                    float v263 = v143 - (float)(*(float *)&v285 * v146);
                    float v264 = v148;
                  }
                  else
                  {
                    float v154 = v24 / sqrtf((float)((float)(v148 * v148) + (float)(v147 * v147)) + (float)(v149 * v149));
                    float v263 = v147 * v154;
                    float v264 = v148 * v154;
                    float v149 = v149 * v154;
                  }
                  float v265 = v149;
                  a2 = v279;
                  if (v261) {
                    unsigned int v155 = v122 + 1;
                  }
                  else {
                    unsigned int v155 = 0;
                  }
                  int v156 = *(_DWORD *)(v280 + 4 * (int)(v155 + v120));
                  int v157 = *(_DWORD *)(v280 + 4 * v123);
                  int v158 = v122 - 1;
                  a5 = v280;
                  if (v121 == v281) {
                    int v158 = 2;
                  }
                  int v159 = *(_DWORD *)(v280 + 4 * (v158 + (int)v120));
                  float v286 = 0.0;
                  uint64_t v285 = 0;
                  uint64_t v160 = a6;
                  (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)a6 + 16))(a6, &v285, (v159 >> 2), v159 & 3);
                  uint64_t v161 = v285;
                  float v262 = v286;
                  float v286 = 0.0;
                  uint64_t v285 = 0;
                  (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v160 + 16))(v160, &v285, (v157 >> 2), v157 & 3);
                  uint64_t v162 = v285;
                  float v163 = v286;
                  float v286 = 0.0;
                  uint64_t v285 = 0;
                  (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v160 + 16))(v160, &v285, (v156 >> 2), v156 & 3);
                  float v164 = (float)((float)(*((float *)&v125 + 1) * (float)(*((float *)&v161 + 1) - *((float *)&v162 + 1)))
                               + (float)(*(float *)&v125 * (float)(*(float *)&v161 - *(float *)&v162)))
                       + (float)(v126 * (float)(v262 - v163));
                  float v165 = *(float *)&v125 * v164;
                  float v166 = *((float *)&v125 + 1) * v164;
                  float v167 = v126 * v164;
                  float v168 = (float)(*(float *)&v161 - *(float *)&v162) - (float)(*(float *)&v125 * v164);
                  float v169 = (float)(*((float *)&v161 + 1) - *((float *)&v162 + 1)) - v166;
                  float v170 = (float)(v262 - v163) - v167;
                  float v171 = vabds_f32(*((float *)&v161 + 1) - *((float *)&v162 + 1), v166);
                  float v172 = vabds_f32(v262 - v163, v167);
                  BOOL v174 = vabds_f32(*(float *)&v161 - *(float *)&v162, v165) <= 1.1755e-38
                      && v171 <= 1.1755e-38
                      && v172 <= 1.1755e-38;
                  float v24 = 1.0;
                  if (!v174)
                  {
                    float v175 = 1.0 / sqrtf((float)((float)(v169 * v169) + (float)(v168 * v168)) + (float)(v170 * v170));
                    float v168 = v168 * v175;
                    float v169 = v169 * v175;
                    float v170 = v170 * v175;
                  }
                  float v176 = (float)((float)(*((float *)&v125 + 1) * (float)(*((float *)&v285 + 1) - *((float *)&v162 + 1)))
                               + (float)(*(float *)&v125 * (float)(*(float *)&v285 - *(float *)&v162)))
                       + (float)(v126 * (float)(v286 - v163));
                  float v177 = *(float *)&v125 * v176;
                  float v178 = *((float *)&v125 + 1) * v176;
                  float v179 = v126 * v176;
                  float v180 = (float)(*(float *)&v285 - *(float *)&v162) - (float)(*(float *)&v125 * v176);
                  float v181 = (float)(*((float *)&v285 + 1) - *((float *)&v162 + 1)) - v178;
                  float v182 = (float)(v286 - v163) - v179;
                  float v183 = vabds_f32(*((float *)&v285 + 1) - *((float *)&v162 + 1), v178);
                  float v184 = vabds_f32(v286 - v163, v179);
                  if (vabds_f32(*(float *)&v285 - *(float *)&v162, v177) > 1.1755e-38
                    || v183 > 1.1755e-38
                    || v184 > 1.1755e-38)
                  {
                    float v187 = 1.0 / sqrtf((float)((float)(v181 * v181) + (float)(v180 * v180)) + (float)(v182 * v182));
                    float v180 = v180 * v187;
                    float v181 = v181 * v187;
                    float v182 = v182 * v187;
                  }
                  a7 = v260;
                  float v188 = (float)((float)(v169 * v181) + (float)(v168 * v180)) + (float)(v170 * v182);
                  float v189 = -1.0;
                  if (v188 >= -1.0) {
                    float v189 = v188;
                  }
                  if (v188 <= 1.0) {
                    float v190 = v189;
                  }
                  else {
                    float v190 = 1.0;
                  }
                  float v191 = acos(v190);
                  uint64_t v192 = v279 + 88 * (int)v118;
                  float v106 = v278 + (float)(v266 * v191);
                  float v108 = v277 + (float)(v267 * v191);
                  float v109 = v276 + (float)(v268 * v191);
                  float v112 = v274 + (float)(v263 * v191);
                  float v113 = v273 + (float)(v264 * v191);
                  float v114 = v272 + (float)(v265 * v191);
                  float v111 = v275 + (float)(v191 * *(float *)(v192 + 64));
                  float v115 = v271 + (float)(v191 * *(float *)(v192 + 68));
                  float v116 = v270 + v191;
                  int v117 = v283;
                  int v32 = v282;
                  int v107 = v281;
                  uint64_t v110 = v269;
                }
                --v65;
              }
              while (v65);
            }
            float v196 = fabsf(v108);
            float v197 = fabsf(v109);
            if (fabsf(v106) > 1.1755e-38 || v196 > 1.1755e-38 || v197 > 1.1755e-38)
            {
              float v200 = v24 / sqrtf((float)((float)(v108 * v108) + (float)(v106 * v106)) + (float)(v109 * v109));
              float v106 = v106 * v200;
              float v108 = v108 * v200;
              float v109 = v109 * v200;
            }
            float v201 = fabsf(v113);
            float v202 = fabsf(v114);
            BOOL v204 = fabsf(v112) <= 1.1755e-38 && v201 <= 1.1755e-38 && v202 <= 1.1755e-38;
            uint64_t v16 = v250;
            a1 = v251;
            int v17 = v252;
            if (!v204)
            {
              float v205 = v24 / sqrtf((float)((float)(v113 * v113) + (float)(v112 * v112)) + (float)(v114 * v114));
              float v112 = v112 * v205;
              float v113 = v113 * v205;
              float v114 = v114 * v205;
            }
            if (v116 > 0.0)
            {
              float v111 = v111 / v116;
              float v115 = v115 / v116;
            }
            float v206 = (float *)&v250[40 * v117];
            float *v206 = v106;
            v206[1] = v108;
            v206[2] = v109;
            v206[3] = v111;
            v206[4] = v112;
            v206[5] = v113;
            v206[6] = v114;
            v206[7] = v115;
            *((void *)v206 + 4) = 0;
            int v27 = v117 + 1;
          }
          else
          {
            if (v283 >= 1)
            {
              uint64_t v193 = v283;
              float v194 = v246;
              do
              {
                float v195 = *v194;
                v194 += 2;
                free(v195);
                --v193;
              }
              while (v193);
            }
            int v17 = v252;
            free(v252);
            free(v19);
            uint64_t v16 = v250;
            free(v250);
            a1 = v251;
            int v27 = v283;
            int v32 = v282;
          }
          if (!v253) {
            return 0;
          }
        }
LABEL_175:
        int v207 = *(_DWORD *)(a2 + 88 * v32 + 80) + *(unsigned __int8 *)(a2 + 88 * v32 + v258 + 84);
        float v208 = (float32x2_t *)(a1 + 40 * v207);
        int v209 = v208[4].i32[0];
        if (v209 > 1) {
          sub_2346378E4();
        }
        if (((*(_DWORD *)(a2 + 88 * v32 + 76) >> 3) & 1) != *v259) {
          sub_23463793C();
        }
        if (v209 == 1)
        {
          int v210 = v100;
          float v211 = (float *)&v16[40 * v100];
          uint64_t v212 = a1 + 40 * v207;
          float v213 = *(float *)(v212 + 12);
          float v214 = v211[3];
          float v215 = *(float *)(v212 + 28);
          float v216 = v211[7];
          if (v213 == v214)
          {
            float v217 = v208->f32[0];
            float v218 = *v211;
            int v25 = v254;
            if (v215 != v216) {
              goto LABEL_195;
            }
            float v219 = v208->f32[1];
            float v220 = v208[1].f32[0];
            BOOL v221 = v217 == v218 && v219 == v211[1];
            BOOL v222 = v221 && v220 == v211[2];
            if (!v222
              || (float v223 = (float32x2_t *)(a1 + 40 * v207),
                  uint64_t v224 = (float32x2_t *)&v16[40 * v210],
                  float32x2_t v225 = v223[2],
                  int8x8_t v226 = vmvn_s8((int8x8_t)vceq_f32(v225, v224[2])),
                  (v226.i8[0] & 1) != 0)
              || (v226.i8[4] & 1) != 0
              || (float v227 = v223[3].f32[0], v227 != v224[3].f32[0]))
            {
LABEL_195:
              float v217 = v218 + v217;
              float v219 = v208->f32[1] + v211[1];
              float v220 = v208[1].f32[0] + v211[2];
              float v233 = fabsf(v219);
              float v234 = fabsf(v220);
              if (fabsf(v217) > 1.1755e-38 || v233 > 1.1755e-38 || v234 > 1.1755e-38)
              {
                float v237 = v24 / sqrtf((float)((float)(v219 * v219) + (float)(v217 * v217)) + (float)(v220 * v220));
                float v217 = v217 * v237;
                float v219 = v219 * v237;
                float v220 = v220 * v237;
              }
              float v213 = (float)(v213 + v214) * 0.5;
              float v215 = (float)(v215 + v216) * 0.5;
              int v238 = (float32x2_t *)(a1 + 40 * v207);
              int v239 = (float32x2_t *)&v16[40 * v210];
              float32x2_t v225 = vadd_f32(v238[2], v239[2]);
              float v227 = v238[3].f32[0] + v239[3].f32[0];
              if (fabsf(v225.f32[0]) > 1.1755e-38
                || (v240.i32[1] = v225.i32[1],
                    v240.f32[0] = v238[3].f32[0] + v239[3].f32[0],
                    int8x8_t v241 = vmvn_s8((int8x8_t)vcgt_f32(vabs_f32(v240), (float32x2_t)0x80000000800000)),
                    (v241.i8[4] & 1) == 0)
                || (v241.i8[0] & 1) == 0)
              {
                float v242 = v24
                     / sqrtf((float)(COERCE_FLOAT(vmul_f32(v225, v225).i32[1]) + (float)(v225.f32[0] * v225.f32[0]))+ (float)(v227 * v227));
                float32x2_t v225 = vmul_n_f32(v225, v242);
                float v227 = v227 * v242;
              }
            }
            uint64_t v232 = v257;
            v208->f32[0] = v217;
            v208->f32[1] = v219;
            v208[1].f32[0] = v220;
            v208[1].f32[1] = v213;
            v208[2] = v225;
            v208[3].f32[0] = v227;
            v208[3].f32[1] = v215;
            int v231 = 2;
            v208[4] = 0;
            goto LABEL_208;
          }
          float v217 = v208->f32[0];
          float v218 = *v211;
          int v25 = v254;
          goto LABEL_195;
        }
        if (v209) {
          sub_234637910();
        }
        v228 = &v16[40 * v100];
        long long v229 = *(_OWORD *)v228;
        long long v230 = *((_OWORD *)v228 + 1);
        v208[4] = *(float32x2_t *)(v228 + 32);
        *(_OWORD *)v208->f32 = v229;
        *(_OWORD *)v208[2].f32 = v230;
        int v231 = 1;
        int v25 = v254;
        uint64_t v232 = v257;
LABEL_208:
        v208[4].i32[0] = v231;
        *(_DWORD *)(a1 + 40 * v207 + 36) = *v259;
        uint64_t v26 = v232 + 1;
      }
      while (v26 < *v25);
      if (v27 >= 1)
      {
        uint64_t v243 = v27;
        uint64_t v244 = v246;
        do
        {
          int v245 = *v244;
          v244 += 2;
          free(v245);
          --v243;
        }
        while (v243);
      }
LABEL_212:
      uint64_t v23 = v249 + 1;
      if (v249 + 1 == v247)
      {
        free(v17);
        free(v19);
        free(v16);
        return 1;
      }
    }
  }
  if (v16) {
    free(v16);
  }
  if (v17) {
    free(v17);
  }
  if (v19) {
    free(v19);
  }
  return 0;
}

uint64_t sub_234626DC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8 = result;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a5 < a6)
  {
    uint64_t v9 = a5;
    do
    {
      if ((*(unsigned char *)(a2 + 88 * v9 + 76) & 2) == 0)
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          if (a5 >= 1)
          {
            unsigned int v11 = 0;
            uint64_t result = *(unsigned int *)(a3 + 4 * (i + 3 * v9));
            do
              int v12 = *(_DWORD *)(a3 + 4 * v11);
            while (result != v12 && (int)++v11 < 3 * a5);
            if (result == v12)
            {
              uint64_t v14 = v8
                  + 40
                  * (*(_DWORD *)(a2 + 88 * (v11 / 3) + 80) + *(unsigned __int8 *)(a2 + 88 * (v11 / 3) + v11 % 3 + 84));
              long long v15 = *(_OWORD *)v14;
              long long v16 = *(_OWORD *)(v14 + 16);
              uint64_t result = v8 + 40 * (*(_DWORD *)(a2 + 88 * v9 + 80) + *(unsigned __int8 *)(a2 + 88 * v9 + i + 84));
              *(void *)(result + 32) = *(void *)(v14 + 32);
              *(_OWORD *)uint64_t result = v15;
              *(_OWORD *)(result + 16) = v16;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != a6);
  }
  if (a5 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (unsigned __int8 *)(a2 + 84);
    uint64_t v19 = a5;
    uint64_t v37 = a5;
    do
    {
      if ((*(unsigned char *)(a2 + 88 * v17 + 76) & 2) != 0)
      {
        int v20 = (1 << *(unsigned char *)(a2 + 88 * v17 + 85)) | (1 << *(unsigned char *)(a2 + 88 * v17 + 84)) | (1 << *(unsigned char *)(a2 + 88 * v17 + 86));
        if ((v20 & 8) != 0) {
          unsigned int v21 = 0;
        }
        else {
          unsigned int v21 = 3;
        }
        if ((v20 & 4) == 0) {
          unsigned int v21 = 2;
        }
        if ((v20 & 2) != 0) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 1;
        }
        int v23 = *(_DWORD *)(a2 + 88 * v17 + 72);
        if (v23 < 0) {
          sub_234637A44();
        }
        int v24 = 4 * v23;
        float v40 = 0.0;
        uint64_t v39 = 0;
        (*(void (**)(uint64_t, uint64_t *, void, uint64_t))(*(void *)a4 + 16))(a4, &v39, ((4 * v23) >> 2), v22);
        uint64_t v25 = v39;
        float v26 = v40;
        float v38 = (_DWORD *)(a2 + 88 * v17 + 80);
        int v27 = -1;
        unsigned int v28 = v18;
        while (1)
        {
          unsigned int v30 = *v28++;
          unsigned int v29 = v30;
          if (v30 >= 4) {
            sub_234637A44();
          }
          float v40 = 0.0;
          uint64_t v39 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, void, void))(*(void *)a4 + 16))(a4, &v39, ((int)(v24 | v29) >> 2), v29 & 3);
          BOOL v31 = *(float *)&v39 == *(float *)&v25 && *((float *)&v39 + 1) == *((float *)&v25 + 1);
          if (v31 && v40 == v26) {
            break;
          }
          if (++v27 >= 2) {
            sub_234637A70();
          }
        }
        uint64_t v19 = v37;
        uint64_t v33 = v8 + 40 * (int)(*v38 + v29);
        long long v34 = *(_OWORD *)v33;
        long long v35 = *(_OWORD *)(v33 + 16);
        uint64_t v36 = v8 + 40 * (*v38 + (int)v22);
        *(void *)(v36 + 32) = *(void *)(v33 + 32);
        *(_OWORD *)uint64_t v36 = v34;
        *(_OWORD *)(v36 + 16) = v35;
      }
      ++v17;
      v18 += 88;
    }
    while (v17 != v19);
  }
  return result;
}

uint64_t sub_234627094(float a1, float a2, float a3)
{
  int v3 = vcvts_n_s32_f32((float)(a3 - a1) / (float)(a2 - a1), 0xBuLL);
  int v4 = v3 & ~(v3 >> 31);
  if (v4 >= 2047) {
    return 2047;
  }
  else {
    return v4;
  }
}

uint64_t sub_2346270B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (2)
  {
    uint64_t v5 = a5;
    int v6 = a4;
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    uint64_t v56 = result;
    uint64_t v71 = *MEMORY[0x263EF8340];
    uint64_t v9 = (float *)(a2 + 16 * (int)a4);
    uint64_t v69 = *(void *)v9;
    uint64_t v10 = (int)a4;
    float v70 = v9[2];
    uint64_t v67 = v69;
    float v68 = v70;
    if ((int)a4 >= (int)a5) {
      goto LABEL_10;
    }
    uint64_t v11 = a2 + 16 * (int)a4 + 16;
    uint64_t v12 = (int)a4;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      ++v12;
      do
      {
        float v15 = *(float *)(v11 + v13);
        if (*(float *)((char *)&v69 + v13) <= v15)
        {
          long long v16 = (float *)((char *)&v67 + v13);
          if (*(float *)((char *)&v67 + v13) >= v15) {
            goto LABEL_8;
          }
        }
        else
        {
          long long v16 = (float *)&v69 + v14;
        }
        float *v16 = v15;
LABEL_8:
        ++v14;
        v13 += 4;
      }
      while (v13 != 12);
      v11 += 16;
    }
    while (v12 != (int)a5);
LABEL_10:
    float v17 = v68 - v70;
    if ((float)(*((float *)&v67 + 1) - *((float *)&v69 + 1)) <= (float)(*(float *)&v67 - *(float *)&v69)
      || (float)(*((float *)&v67 + 1) - *((float *)&v69 + 1)) <= v17)
    {
      if (v17 <= (float)(*(float *)&v67 - *(float *)&v69)) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = 2;
      }
    }
    else
    {
      uint64_t v19 = 1;
    }
    float v20 = *((float *)&v67 + v19);
    float v21 = *((float *)&v69 + v19);
    float v22 = (float)(v20 + v21) * 0.5;
    if (v22 < v20 && v22 > v21)
    {
      if ((int)a4 >= (int)a5) {
        sub_234637B78();
      }
      uint64_t v41 = a2 + 4 * v19;
      LODWORD(v42) = a4;
      while (1)
      {
        if ((int)v42 < (int)a4 || (int)v42 > (int)v5) {
          sub_234637A9C();
        }
        float v43 = *(float *)(v41 + 16 * (int)v42);
        if (v43 >= v22) {
          uint64_t v42 = v42;
        }
        else {
          uint64_t v42 = (v42 + 1);
        }
        if (v43 >= v22 || (int)v42 >= (int)a5)
        {
          if ((int)v42 < (int)a5)
          {
            do
            {
              if ((int)a5 < (int)a4 || (int)a5 > (int)v5) {
                sub_234637AF4();
              }
              float v45 = *(float *)(v41 + 16 * (int)a5);
              LODWORD(a5) = a5 - (v45 >= v22);
            }
            while (v45 >= v22 && (int)v42 < (int)a5);
            BOOL v47 = v43 >= v22;
            if (v45 >= v22) {
              BOOL v47 = 0;
            }
            if ((int)v42 >= (int)a5 && v47) {
              sub_234637B20();
            }
            if (v47)
            {
              float v49 = (long long *)(a2 + 16 * (int)v42);
              long long v66 = *v49;
              if ((int)v42 >= (int)a5) {
                sub_234637B4C();
              }
              *float v49 = *(_OWORD *)(a2 + 16 * (int)a5);
              *(_OWORD *)(a2 + 16 * (int)a5) = v66;
              uint64_t v42 = (v42 + 1);
              LODWORD(a5) = a5 - 1;
            }
          }
          if ((int)v42 >= (int)a5) {
            break;
          }
        }
      }
      if (v42 != a5 && v42 != a5 + 1) {
        sub_234637AC8();
      }
      if (v42 == a5)
      {
        float v51 = *(float *)(a2 + 16 * (int)v42 + 4 * v19);
        LODWORD(a5) = v42 - (v51 >= v22);
        if (v51 >= v22) {
          uint64_t v52 = v42;
        }
        else {
          uint64_t v52 = (v42 + 1);
        }
        uint64_t v42 = v52;
      }
      if ((int)a5 > (int)a4) {
        uint64_t result = sub_2346270B8(result, a2, a3, a4);
      }
      if ((int)v42 < (int)v5)
      {
        uint64_t result = v56;
        a2 = v8;
        a3 = v7;
        a4 = v42;
        a5 = v5;
        continue;
      }
    }
    else if ((int)a4 <= (int)a5)
    {
      int v24 = a5 + 1;
      uint64_t v25 = (int)a4;
      uint64_t v54 = (int)a4;
      int v53 = a5 + 1;
      do
      {
        uint64_t v55 = *(int *)(v8 + 16 * v25 + 12);
        int v26 = *(_DWORD *)(v56 + 4 * v55);
        DWORD2(v66) = 0;
        *(void *)&long long v66 = 0;
        uint64_t v27 = v26 & 3;
        uint64_t v28 = (v26 >> 2);
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, &v66, v28, v27);
        uint64_t v59 = v66;
        unsigned int v63 = DWORD2(v66);
        DWORD2(v66) = 0;
        *(void *)&long long v66 = 0;
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, &v66, v28, v27);
        unsigned int v61 = v66;
        uint64_t v57 = *(void *)((char *)&v66 + 4);
        *(void *)&long long v66 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, &v66, v28, v27);
        if (v25 > v10)
        {
          v29.i64[0] = v59;
          v29.i64[1] = __PAIR64__(v61, v63);
          v30.i64[0] = v57;
          v30.i64[1] = v66;
          int v31 = v6;
          float32x4_t v58 = v30;
          float32x4_t v60 = v29;
          do
          {
            uint64_t v32 = *(int *)(v8 + 16 * v31 + 12);
            int v33 = *(_DWORD *)(v56 + 4 * v32);
            DWORD2(v66) = 0;
            *(void *)&long long v66 = 0;
            uint64_t v34 = v33 & 3;
            uint64_t v35 = (v33 >> 2);
            __n128 v36 = ((__n128 (*)(uint64_t, long long *, uint64_t, uint64_t))*(void *)(*(void *)v7 + 16))(v7, &v66, v35, v34);
            v36.n128_u64[0] = v66;
            v36.n128_u32[2] = DWORD2(v66);
            __n128 v64 = v36;
            DWORD2(v66) = 0;
            *(void *)&long long v66 = 0;
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, &v66, v35, v34);
            uint64_t v62 = *(void *)((char *)&v66 + 4);
            __n128 v37 = v64;
            v37.n128_u32[3] = v66;
            float32x4_t v65 = (float32x4_t)v37;
            *(void *)&long long v66 = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, &v66, v35, v34);
            v38.i64[0] = v62;
            v38.i64[1] = v66;
            int8x8_t v39 = vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(v60, v65), (int16x8_t)vceqq_f32(v58, v38))), 7uLL));
            int8x8_t v40 = vand_s8(v39, (int8x8_t)0x8040201008040201);
            v40.i8[0] = vaddv_s8(v40);
            v31 += (vminv_u8((uint8x8_t)v39) & 1) == 0;
          }
          while (v25 > v31 && v40.i32[0] != 255);
          uint64_t v10 = v54;
          int v24 = v53;
          if (v40.i32[0] == 255) {
            *(_DWORD *)(v56 + 4 * v55) = *(_DWORD *)(v56 + 4 * v32);
          }
        }
        ++v25;
      }
      while (v24 != v25);
    }
    return result;
  }
}

uint64_t sub_234627600(uint64_t a1, int *a2)
{
  v8[1] = *MEMORY[0x263EF8340];
  int v4 = *a2;
  v8[0] = 0;
  (*(void (**)(uint64_t, void *, void, void))(*(void *)a1 + 32))(a1, v8, (v4 >> 2), v4 & 3);
  int v5 = a2[1];
  v8[0] = 0;
  (*(void (**)(uint64_t, void *, void, void))(*(void *)a1 + 32))(a1, v8, (v5 >> 2), v5 & 3);
  int v6 = a2[2];
  v8[0] = 0;
  return (*(uint64_t (**)(uint64_t, void *, void, void))(*(void *)a1 + 32))(a1, v8, (v6 >> 2), v6 & 3);
}

uint64_t sub_234627700(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  while ((int)a3 - a2 >= 1)
  {
    uint64_t v5 = a4;
    uint64_t v6 = a3;
    uint64_t v7 = result;
    if (a3 - a2 == 1)
    {
      uint64_t v8 = result + 12 * a2;
      uint64_t v9 = result + 12 * (int)a3;
      if (*(_DWORD *)(v8 + 4 * a4) > *(_DWORD *)(v9 + 4 * a4))
      {
        uint64_t v10 = *(void *)v8;
        int v11 = *(_DWORD *)(v8 + 8);
        int v12 = *(_DWORD *)(v9 + 8);
        *(void *)uint64_t v8 = *(void *)v9;
        *(_DWORD *)(v8 + 8) = v12;
        *(void *)uint64_t v9 = v10;
        *(_DWORD *)(v9 + 8) = v11;
      }
      return result;
    }
    unsigned int v13 = a5 + __ROR4__(a5, -(char)a5) + 3;
    int v14 = *(_DWORD *)(result + 12 * (int)(v13 % ((int)a3 - a2 + 1) + a2) + 4 * a4);
    int v15 = a2;
    do
    {
      uint64_t v16 = result + 12 * v15;
      do
      {
        int v17 = *(_DWORD *)(v16 + 4 * a4);
        ++v15;
        v16 += 12;
      }
      while (v17 < v14);
      uint64_t v18 = v16 - 12;
      uint64_t v19 = result + 12 * (int)a3;
      do
      {
        int v20 = *(_DWORD *)(v19 + 4 * a4);
        LODWORD(a3) = a3 - 1;
        v19 -= 12;
      }
      while (v20 > v14);
      if (v15 - 1 <= (int)a3 + 1)
      {
        uint64_t v21 = v19 + 12;
        uint64_t v22 = *(void *)v18;
        int v24 = *(_DWORD *)(v18 + 8);
        int v23 = *(_DWORD *)(v21 + 8);
        *(void *)uint64_t v18 = *(void *)v21;
        *(_DWORD *)(v18 + 8) = v23;
        *(void *)uint64_t v21 = v22;
        *(_DWORD *)(v21 + 8) = v24;
      }
      else
      {
        --v15;
        LODWORD(a3) = a3 + 1;
      }
    }
    while (v15 <= (int)a3);
    if ((int)a3 > a2) {
      uint64_t result = sub_234627700(result);
    }
    if (v15 >= (int)v6) {
      return result;
    }
    uint64_t result = v7;
    a2 = v15;
    a3 = v6;
    a4 = v5;
    a5 = v13;
  }
  return result;
}

uint64_t sub_2346278B4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  LOBYTE(v8) = 0;
  while (1)
  {
    char v9 = v8;
    int v10 = *(_DWORD *)(a4 + 16);
    int v11 = (int *)(a1 + 4 * (int)(3 * a3));
    int v12 = *v11;
    if (*v11 == v10)
    {
      unsigned int v13 = 0;
    }
    else if (v11[1] == v10)
    {
      unsigned int v13 = 1;
    }
    else
    {
      if (v11[2] != v10) {
        sub_234637BA4();
      }
      unsigned int v13 = 2;
    }
    int v14 = (void *)(a2 + 88 * a3 + 16);
    int v15 = &v14[v13];
    if (*v15 == a4) {
      break;
    }
    if (*v15) {
      goto LABEL_23;
    }
    uint64_t v16 = a2 + 88 * a3;
    unsigned int v19 = *(_DWORD *)(v16 + 76);
    uint64_t v18 = (unsigned int *)(v16 + 76);
    unsigned int v17 = v19;
    if ((v19 & 4) != 0 && !*v14 && !*(void *)(a2 + 88 * a3 + 24) && !*(void *)(a2 + 88 * a3 + 32))
    {
      unsigned int v17 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(a4 + 20) != 0));
      *uint64_t v18 = v17;
    }
    if (((v17 >> 3) & 1) != *(_DWORD *)(a4 + 20))
    {
LABEL_23:
      unsigned int v8 = 0;
      goto LABEL_25;
    }
    uint64_t v20 = a2 + 88 * a3;
    *(_DWORD *)(*(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)a4)++) = a3;
    int v21 = *(_DWORD *)(v20 + 4 * v13);
    void *v15 = a4;
    int v22 = v13 - 1;
    if (v12 == v10) {
      int v23 = 2;
    }
    else {
      int v23 = v22;
    }
    a3 = *(_DWORD *)(v20 + 4 * v23);
    if ((v21 & 0x80000000) == 0) {
      sub_2346278B4(a1, a2);
    }
    unsigned int v8 = 1;
    if ((a3 & 0x80000000) != 0) {
      goto LABEL_25;
    }
  }
  unsigned int v8 = 1;
LABEL_25:
  if (v9) {
    return 1;
  }
  else {
    return v8;
  }
}

uint64_t sub_234627A2C(uint64_t result, int a2, int a3, unsigned int a4)
{
  uint64_t v6 = result;
  uint64_t v7 = result + 4;
  do
  {
    if (a3 - a2 <= -2) {
      sub_234637BD0();
    }
    a4 += __ROR4__(a4, -(char)a4) + 3;
    int v8 = *(_DWORD *)(v6 + 4 * (int)(a4 % (a3 - a2 + 1) + a2));
    int v9 = a2;
    int v10 = a3;
    do
    {
      int v11 = (int *)(v6 + 4 * v9);
      int v12 = v9;
      do
      {
        int v14 = *v11++;
        int v13 = v14;
        ++v12;
      }
      while (v14 < v8);
      int v9 = v12 - 1;
      int v15 = (_DWORD *)(v7 + 4 * v10);
      int v16 = v10;
      do
      {
        int v18 = *--v15;
        int v17 = v18;
        --v16;
      }
      while (v18 > v8);
      int v10 = v16 + 1;
      if (v9 <= v16 + 1)
      {
        *(v11 - 1) = v17;
        _DWORD *v15 = v13;
        int v9 = v12;
        int v10 = v16;
      }
    }
    while (v9 <= v10);
    if (v10 > a2) {
      uint64_t result = sub_234627A2C(v6);
    }
    a2 = v9;
  }
  while (v9 < a3);
  return result;
}

void sub_234627B1C()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  sub_234627B90((uint64_t)&v0, v1[0]);
  dword_2687AA5D8 = *MEMORY[0x263F90578];
}

void sub_234627B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_234627B90(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_234627B90(a1, *(void *)a2);
    sub_234627B90(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_234627CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234627DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23462828C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  sub_234605B54((uint64_t)va);
  MEMORY[0x237DC1FE0]((uint64_t *)va1);
  sub_2345D9DC0((uint64_t)va2);
  MEMORY[0x237DC2180](v7 - 104);

  _Unwind_Resume(a1);
}

void sub_234628574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MEMORY[0x237DC2180](va);
  _Unwind_Resume(a1);
}

void sub_234628844(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v13 = *(void *)(v11 - 88);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x237DC2180](va);

  _Unwind_Resume(a1);
}

void sub_234628AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_234628D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_234628ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_23460B564((uint64_t)va);
  MEMORY[0x237DC1FE0](v3 - 40);
  _Unwind_Resume(a1);
}

void sub_2346291CC(_Unwind_Exception *a1)
{
  sub_234605B54(v2 - 80);

  _Unwind_Resume(a1);
}

void sub_2346292D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234629850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  sub_234609D58(v25 - 176, *(void **)(v25 - 168));

  _Unwind_Resume(a1);
}

void sub_234629B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_234629EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_23462A0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23462A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_23462A550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_23462A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2345DAC58((uint64_t)va);
  sub_2345DAC58((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_23462AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_23462AADC((uint64_t)&a18);

  _Unwind_Resume(a1);
}

uint64_t sub_23462AADC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

void sub_23462ACFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_23462AADC((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void sub_23462AF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_23462AADC((uint64_t)&a13);
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_23462B020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23462B144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_23462B1E8((uint64_t)&a15);

  _Unwind_Resume(a1);
}

uint64_t sub_23462B17C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

uint64_t sub_23462B1E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_2346091F8(v3);
  }
  return a1;
}

void sub_23462B47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_23462B17C((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void sub_23462B660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_23462B1E8((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_23462B7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_23462B1E8((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_23462BA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_23462B17C((uint64_t)&a20);

  _Unwind_Resume(a1);
}

void sub_23462BD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  sub_23462B17C((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void sub_23462C130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23462C248(uint64_t a1)
{
  sub_2346307C4(a1 + 32);
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_23462C4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_23462B17C((uint64_t)&a23);

  _Unwind_Resume(a1);
}

void sub_23462C6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_234605B54((uint64_t)va);
  MEMORY[0x237DC21C0](v2 - 40);
  _Unwind_Resume(a1);
}

void sub_23462C82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_234605B54((uint64_t)va);
  MEMORY[0x237DC2130](v2 - 40);
  _Unwind_Resume(a1);
}

void sub_23462C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_234605B54((uint64_t)&a9);
  sub_234605B54(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_23462CC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_234605EFC((uint64_t)va);
  sub_23462CC90((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void *sub_23462CC90(void *a1)
{
  uint64_t v2 = a1[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[3];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)(a1 + 2));
  uint64_t v4 = a1[1];
  if (v4) {
    sub_2346091F8(v4);
  }
  return a1;
}

void sub_23462D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  sub_234631FE0(&a17);
  _Unwind_Resume(a1);
}

void sub_23462D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_234605EFC((uint64_t)&a9);
  sub_234605EFC((uint64_t)&a13);
  uint64_t v16 = *(void *)(v14 - 56);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_23462D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  *(void *)(v7 - 56) = v6;
  sub_2345EC2C4((void ***)(v7 - 56));
  sub_234617B24((uint64_t)va);
  sub_234605EFC((uint64_t)va1);
  uint64_t v9 = *(void *)(v7 - 64);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_23462D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_23462D684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    sub_2346128E8(a2, (uint64_t *)(a1 + 8), &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return sub_2345EBD10((uint64_t)&v5);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void sub_23462D73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345E32B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23462D7AC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  JUMPOUT(0x237DC2990);
}

void sub_23462D898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_23462D8AC(uint64_t a1)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (v2) {
    sub_234630850(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 312));
  }
  sub_23460936C();
}

id sub_23462D944(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, void *a2, pxrInternal__aapl__pxrReserved__ *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  id v7 = a2;
  MEMORY[0x237DC2530](&v47, "rel");
  unint64_t v9 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (atomic_uint *)(v47 & 0xFFFFFFFFFFFFFFF8);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v9 == v10)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    id v22 = v7;
    uint64_t v26 = objc_msgSend_UTF8String(v22, v23, v24, v25);
    MEMORY[0x237DC2530](&v50, v26);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
    LODWORD(v47) = v42;
    *((void *)&v47 + 1) = v43;
    uint64_t v43 = 0;
    LODWORD(v48) = v44;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    DWORD1(v48) = v45;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    *((void *)&v48 + 1) = v46;
    uint64_t v46 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v44);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47))
    {
      uint64_t v27 = [USKProperty alloc];
      int v31 = v47;
      uint64_t v32 = *((void *)&v47 + 1);
      if (*((void *)&v47 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 48), 1uLL, memory_order_relaxed);
      }
      sub_2345EBC84(&v33, &v48);
      sub_2345EBCD0(&v34, (_DWORD *)&v48 + 1);
      uint64_t v35 = *((void *)&v48 + 1);
      if ((BYTE8(v48) & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v35 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v21 = objc_msgSend_initWithUsdProperty_(v27, v28, (uint64_t)&v31, v29);
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)&v33);
      if (v32) {
        sub_2346091F8(v32);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    if ((BYTE8(v48) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  else
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_264BF46F0);
    if (!v11) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    uint64_t v50 = 0;
    TypeForValueuint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfGetTypeForValueTypeName(a3, v8);
    uint64_t Type = 0;
    uint64_t v50 = TypeForValueTypeName;
    uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v11, (const pxrInternal__aapl__pxrReserved__::TfType *)&v50, a4);
    long long v47 = 0u;
    long long v48 = 0u;
    id v13 = v7;
    uint64_t v17 = objc_msgSend_UTF8String(v13, v14, v15, v16);
    MEMORY[0x237DC2530](&v41, v17);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
    LODWORD(v47) = v42;
    *((void *)&v47 + 1) = v43;
    uint64_t v43 = 0;
    LODWORD(v48) = v44;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    DWORD1(v48) = v45;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    *((void *)&v48 + 1) = v46;
    uint64_t v46 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v44);
    if (v43) {
      sub_2346091F8(v43);
    }
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (sub_234609168((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47))
    {
      uint64_t v18 = [USKProperty alloc];
      int v36 = v47;
      uint64_t v37 = *((void *)&v47 + 1);
      if (*((void *)&v47 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 48), 1uLL, memory_order_relaxed);
      }
      sub_2345EBC84(&v38, &v48);
      sub_2345EBCD0(&v39, (_DWORD *)&v48 + 1);
      uint64_t v40 = *((void *)&v48 + 1);
      if ((BYTE8(v48) & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v40 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v21 = objc_msgSend_initWithUsdProperty_(v18, v19, (uint64_t)&v36, v20);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)&v38);
      if (v37) {
        sub_2346091F8(v37);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    if ((BYTE8(v48) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  sub_2345EBD10((uint64_t)&v48);
  if (*((void *)&v47 + 1)) {
    sub_2346091F8(*((uint64_t *)&v47 + 1));
  }

  return v21;
}

void sub_23462DDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_234605EFC((uint64_t)va);
  sub_234605EFC((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_23462E49C(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_234605EFC((uint64_t)va);
  sub_234605EFC(v12 - 144);
  MEMORY[0x237DC2510](v12 - 104);
  uint64_t v14 = *(void *)(v12 - 96);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_23462E5D4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(*(void *)(v2 + 24) + 56), memory_order_acquire);
  if (explicit) {
    return explicit;
  }
  return MEMORY[0x270FA4700]();
}

pxrInternal__aapl__pxrReserved__::SdfSpec *sub_23462E638(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  uint64_t v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    void v7[2] = 96;
    uint64_t v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::op"
            "erator->() const [T = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__15SdfPropertySpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", (const char *)v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v1;
}

void sub_23462E6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23462E8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_234605B54((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_23462EAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2345E32B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23462ECE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  char v6 = va_arg(va1, void **);
  sub_234631FE0((void ***)va);
  sub_234631F5C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23462EE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_23462EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_23462F114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23462F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_23462F310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  uint64_t v7 = 0;
  char v8 = (atomic_ullong *)v4;
  sub_2345EBC84(&v7, (_DWORD *)(a1 + 16));
  sub_2345EBCD0((_DWORD *)&v7 + 1, (_DWORD *)(a1 + 20));
  sub_234630C04((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  char v6 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 6, 1uLL, memory_order_relaxed);
  }
  sub_2346128E8(a2, (uint64_t *)&v6, &v7);
  if (v6) {
    sub_2346091F8((uint64_t)v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10((uint64_t)&v7);
}

void sub_23462F3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_2346091F8(a3);
  }
  sub_2345E32B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23462F500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_23462F7A8(uint64_t a1)
{
  return a1;
}

void sub_23462F8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_23462F8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23462F8C4(uint64_t a1)
{
  return a1;
}

void sub_23462F9C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_23462F8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23462FBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23462FDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_23462FE04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  sub_2345EBC84(&v7, (_DWORD *)a1 + 4);
  sub_2345EBCD0(&v8, (_DWORD *)a1 + 5);
  int v5 = *((_DWORD *)a1 + 12);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = a1;
  sub_2345EBC84((_DWORD *)(a2 + 16), &v7);
  sub_2345EBCD0((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10((uint64_t)&v7);
}

uint64_t sub_23462FEA0(uint64_t a1)
{
  return a1;
}

void sub_23462FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_23462FFAC((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_23462FFAC(uint64_t a1)
{
  return a1;
}

void sub_234630088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_23462FFAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23463014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_23462FFAC((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_234630210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_23462FFAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_234630424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_234630460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_2346128E8(a2, &v6, (_DWORD *)(a1 + 16));
  uint64_t result = v6;
  if (v6) {
    return sub_2346091F8(v6);
  }
  return result;
}

void sub_2346304BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_2346091F8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_234630628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_234630774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2346307C4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 > 2)
  {
    int v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5) {
      sub_2345DBAD4(v5);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = v2 - 1;
    if (v2)
    {
      uint64_t v3 = a1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2345EBD10(v3 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2345EBD10(v3);
        v3 += 16;
        int v4 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v4 - 1;
      }
      while (v4);
    }
  }
  return a1;
}

void sub_234630850(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_2346308F0(uint64_t a1, uint64_t a2)
{
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = (char *)&off_26E764468 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_234630954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t result = sub_234630B80(a2);
  if (result)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

_DWORD *sub_2346309B8(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2346309C8(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2346309D4()
{
  return 1;
}

unint64_t sub_2346309DC(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2346309FC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_234630A10(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_234630A28()
{
  return 0;
}

void *sub_234630A38()
{
  return &unk_26E764410;
}

uint64_t sub_234630A44()
{
  return 0;
}

uint64_t sub_234630A4C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_234630A58()
{
  return 0;
}

uint64_t sub_234630A60()
{
  return 0;
}

BOOL sub_234630A68(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_234630A9C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26E764410, a2);
}

void *sub_234630AC0()
{
  return &unk_26E764410;
}

_DWORD *sub_234630AD0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26E764468 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_234630AEC(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_2345DDEB8(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_234630B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_234630B80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E764410);
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *sub_234630C04(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v8, a2);
    sub_2345EBF68((uint64_t)a2, (int *)v8);
    sub_2345EBFC0((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_2345EBD10((uint64_t)v8);
    uint64_t v5 = *a1;
    if (*a1)
    {
      if ((*((unsigned char *)v5 + 57) & 0x10) != 0)
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if (result)
        {
          uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, (const SdfPath *)a2);
          *a1 = result;
          if (!result)
          {
            v8[0] = (uint64_t)"usd/primData.h";
            v8[1] = (uint64_t)"Usd_MoveToParent";
            void v8[2] = 527;
            void v8[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimData"
                             "Ptr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            char v9 = 0;
            uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, Text);
            uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
            if (!result) {
              return result;
            }
            uint64_t result = *a1;
          }
          if (*((void *)result + 2) == *(void *)a2)
          {
            v8[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            sub_2345EBF68((uint64_t)a2, (int *)v8);
            sub_2345EBFC0((uint64_t)a2 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            return (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_2345EBD10((uint64_t)v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_234630D88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  uint64_t v14 = 0;
  uint64_t v15 = v6;
  sub_2345EBC84(&v14, (_DWORD *)(a1 + 16));
  sub_2345EBCD0((_DWORD *)&v14 + 1, (_DWORD *)(a1 + 20));
  if (!sub_234630F44(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, 0, a2))
  {
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    sub_2345EBF68((uint64_t)&v14, (int *)&v13);
    sub_2345EBFC0((uint64_t)&v14 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)&v13);
  }
  sub_2346314D4((uint64_t)v11, &v15, &v14, (long long *)a2);
  uint64_t v13 = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  sub_2346314D4((uint64_t)v9, &v13, &v8, (long long *)a2);
  sub_23463165C(a3, (uint64_t)v11, (uint64_t)v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10((uint64_t)&v14);
}

void sub_234630F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2345E32B4((uint64_t)&a9);
  sub_23462F7A8((uint64_t)&a15);
  sub_2345E32B4(v15 - 64);
  _Unwind_Resume(a1);
}

BOOL sub_234630F44(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (*((unsigned char *)*a1 + 57))
  {
    uint64_t v9 = *(void *)(pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(*a1) + 32);
    if (v9) {
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v9 = *((void *)*a1 + 4);
  if (!v9) {
    return 0;
  }
  if (!v8)
  {
    int v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16);
  }
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 16));
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v14, v11, NameToken);
  sub_2345EBF68((uint64_t)a2, (int *)&v14);
  sub_2345EBFC0((uint64_t)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10((uint64_t)&v14);
  int v10 = 1;
LABEL_10:
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
  return sub_234631384(a4, (uint64_t)a1, v10) || !sub_234631070(a1, a2, a3, a4);
}

BOOL sub_234631070(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v9 = *((void *)*a1 + 5);
  if ((v9 & 7) != 0) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (v10) {
    BOOL v11 = v10 == (void)a3;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v12 = v8;
    do
    {
      BOOL v13 = sub_234631384(a4, (uint64_t)&v28, v12);
      unint64_t v10 = (unint64_t)v28;
      if (v13) {
        break;
      }
      *a1 = v28;
      uint64_t v14 = *(void *)(v10 + 40);
      unint64_t v10 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
    }
    while (v10 && v10 != (void)a3);
  }
  if (!v10)
  {
    uint64_t v16 = *((void *)*a1 + 5);
    if ((v16 & 7) != 0) {
      unint64_t v10 = v16 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*a1 == a3)
    {
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      sub_2345EBF68((uint64_t)a2, (int *)v25);
      sub_2345EBFC0((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_32:
      unsigned int v19 = v25;
LABEL_34:
      sub_2345EBD10((uint64_t)v19);
      goto LABEL_35;
    }
    if (*a1 == v28)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v27, a2);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, NameToken);
      sub_2345EBF68((uint64_t)a2, (int *)v25);
      sub_2345EBFC0((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2345EBD10((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      unsigned int v19 = &v27;
      goto LABEL_34;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v25, a2);
    sub_2345EBF68((uint64_t)a2, (int *)v25);
    sub_2345EBFC0((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2345EBD10((uint64_t)v25);
    uint64_t v17 = *a1;
    if (!*a1
      || (*((unsigned char *)v17 + 57) & 0x10) == 0
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v17 + 16)))
    {
      goto LABEL_35;
    }
    PrimDataAtPathOrInPrototype = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, (const SdfPath *)a2);
    *a1 = PrimDataAtPathOrInPrototype;
    if (PrimDataAtPathOrInPrototype)
    {
LABEL_29:
      if (*((void *)PrimDataAtPathOrInPrototype + 2) != *(void *)a2) {
        goto LABEL_35;
      }
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      sub_2345EBF68((uint64_t)a2, (int *)v25);
      sub_2345EBFC0((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      goto LABEL_32;
    }
    v25[0] = (uint64_t)"usd/primData.h";
    v25[1] = (uint64_t)"Usd_MoveToNextSiblingOrParent";
    v25[2] = 576;
    uint64_t v25[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent(PrimDataPtr &, SdfPath &, Pri"
                      "mDataPtr, const Usd_PrimFlagsPredicate &) [PrimDataPtr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
    char v26 = 0;
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v24, Text);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper())
    {
      PrimDataAtPathOrInPrototype = *a1;
      goto LABEL_29;
    }
  }
LABEL_35:
  if (v28) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = *a1 == 0;
  }
  return !v21;
}

void sub_234631368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2345E32B4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_234631384(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0x2000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *(void *)(*(void *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v9 = *a1 & v4;
  uint64_t v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != sub_234631408(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t sub_234631408(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_2346314D4(uint64_t a1, void *a2, _DWORD *a3, long long *a4)
{
  *(void *)a1 = *a2;
  sub_2345EBC84((_DWORD *)(a1 + 8), a3);
  sub_2345EBCD0((_DWORD *)(a1 + 12), a3 + 1);
  long long v7 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  if (*(void *)a1 && !sub_234631574((uint64_t *)(a1 + 16), a1)) {
    sub_2346315C0(a1);
  }
  return a1;
}

void sub_234631560(_Unwind_Exception *a1)
{
  sub_2345E32B4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_234631574(uint64_t *a1, uint64_t a2)
{
  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_234631384(a1, a2, v4);
}

uint64_t sub_2346315C0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t result = sub_234631070((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), 0, (uint64_t *)(a1 + 16));
  if (result)
  {
    *(void *)a1 = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    sub_2345EBF68(v2, (int *)&v4);
    sub_2345EBFC0(a1 + 12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return sub_2345EBD10((uint64_t)&v4);
  }
  return result;
}

uint64_t sub_23463165C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  sub_2345EBC84((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_2345EBCD0((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  long long v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 40) = *(void *)a3;
  sub_2345EBC84((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 8));
  sub_2345EBCD0((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 12));
  long long v7 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 72) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t sub_2346316E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_234631408((void *)a1, 0, a1, 0xFu, (void *)a2);
  if (result)
  {
    uint64_t result = sub_234631408((void *)(a1 + 8), 0, a1 + 8, 0xFu, (void *)(a2 + 8));
    if (result) {
      return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
    }
  }
  return result;
}

uint64_t sub_234631760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_2346128E8(a2, &v6, (_DWORD *)(a1 + 8));
  uint64_t result = v6;
  if (v6) {
    return sub_2346091F8(v6);
  }
  return result;
}

void sub_2346317BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_2346091F8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2346317D4(uint64_t a1)
{
  *(void *)a1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_23463183C(uint64_t a1, uint64_t a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(v6 + 40) & 7;
  unint64_t v8 = *(void *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    goto LABEL_21;
  }
  if (!v7 || v8 == 0)
  {
LABEL_20:
    unint64_t v8 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v8 + 40);
    unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 7) == 0 && v8 != 0) {
      break;
    }
    if (v8) {
      BOOL v13 = (v11 & 7) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_21:
  sub_23463190C(a1, v6, v8, (_DWORD *)(a2 + 16), a3);
  return a1;
}

void sub_2346318F8(_Unwind_Exception *a1)
{
  sub_2345E32B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23463190C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  sub_2345EE430(a1 + 16, a4);
  sub_2345EE488(a1 + 20, a4 + 1);
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  if (*(void *)a1)
  {
    uint64_t v10 = a5[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((unsigned char *)a5 + 16);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_23462FE04((uint64_t *)a1, (uint64_t)&v12);
  if ((void)v12 != *(void *)(a1 + 8) && !sub_234631574((uint64_t *)(a1 + 24), (uint64_t)&v12))
  {
    BYTE12(v13) = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v12);
    sub_234631A38(a1, (uint64_t)&v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2345EBD10((uint64_t)&v13);
}

void sub_234631A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_234631A38(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 29)) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  *(void *)a1 = *(void *)a2;
  sub_2345EE430(a1 + 16, (_DWORD *)(a2 + 16));
  uint64_t result = sub_2345EE488(a1 + 20, (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

void sub_234631AD4()
{
}

void sub_234631B2C()
{
}

void sub_234631B6C(_Unwind_Exception *a1)
{
  MEMORY[0x237DC3290](v1, 0x60C4005C00B59);
  _Unwind_Resume(a1);
}

uint64_t sub_234631B90(uint64_t a1)
{
  uint64_t v40 = (void **)(a1 + 304);
  sub_234612B94(&v40);
  uint64_t v2 = *(void *)(a1 + 296);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 288);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 272);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 264);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 256);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 248);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 240);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 232);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 224);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 216);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 208);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 200);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 192);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 184);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 176);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 168);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 160);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 152);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 136);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 128);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 120);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 112);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 104);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 88);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 80);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 72);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 64);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 56);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 48);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 40);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 32);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 24);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 16);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 8);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void *sub_234631F5C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_234631FE0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_234632078((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_234632078(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2345EBD10(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_2346091F8(result);
  }
  return result;
}

uint64_t sub_2346320E8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata();
}

uint64_t sub_23463218C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  if (sub_2345EC3A0(a2))
  {
    uint64_t v4 = v2[1];
    if ((v4 & 4) != 0) {
      uint64_t v2 = (void *)(*(uint64_t (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    sub_2345EC46C(*(void **)(a1 + 8), v2);
    return 1;
  }
  else
  {
    uint64_t result = sub_2346322D0((uint64_t)v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_234632210(uint64_t a1, void *a2)
{
  if (sub_2345EC3A0((uint64_t)a2))
  {
    sub_234613698(a2, &v6);
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    if (&v6 == v4)
    {
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v4 = v6;
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_2346322D0((uint64_t)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_2346322D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfValueBlockE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  return MEMORY[0x270FA4F90](a1, &unk_26E764568);
}

uint64_t sub_234632354(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_2346324A8((void **)a1);
    if (a4 >> 59) {
      sub_2345D8238();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_234632518((void *)a1, v12);
    uint64_t result = sub_23463255C(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_234632718((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t result = sub_23463255C(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_234632718((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      uint64_t result = sub_234632078(v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_234632498(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2346324A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2346324A8(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_234632078((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_234632518(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_2345D8238();
  }
  uint64_t result = (char *)sub_2346327C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t sub_23463255C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_234632604(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_23463268C((uint64_t)v9);
  return v4;
}

void sub_2346325F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_234632604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_2345EBC84((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  uint64_t result = sub_2345EBCD0((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a2 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_23463268C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2346326C4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2346326C4(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 32;
      uint64_t result = (uint64_t *)sub_234632078(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_234632718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v7;
    if (v8) {
      sub_2346091F8(v8);
    }
    sub_2345EE430(a4 + 16, (_DWORD *)(v5 + 16));
    sub_2345EE488(a4 + 20, (_DWORD *)(v5 + 20));
    sub_2345EC46C((void *)(a4 + 24), (void *)(v5 + 24));
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

void *sub_2346327C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_2345D8328();
  }
  return operator new(32 * a2);
}

void sub_2346327F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, unsigned int *a3)
{
  uint64_t v3 = (long long *)a3;
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  sub_2345D7A70((uint64_t)&v74, *a3);
  uint64_t v6 = MEMORY[0x237DC2530](&v73, "constant");
  uint64_t v7 = (uint64_t *)(a1 + 72);
  unint64_t v8 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (atomic_uint *)(v73 & 0xFFFFFFFFFFFFFFF8);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v8 == v9)
  {
    if (*(void *)v3)
    {
      unint64_t v20 = 0;
      do
      {
        sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
        *(_DWORD *)(v76 + 4 * v20++) = 0;
      }
      while (*(void *)v3 > v20);
    }
  }
  else
  {
    uint64_t v10 = MEMORY[0x237DC2530](v6, "vertex");
    unint64_t v11 = *v7 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = (atomic_uint *)(v73 & 0xFFFFFFFFFFFFFFF8);
    if ((v73 & 7) != 0) {
      atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v11 == v12)
    {
      if (!*(void *)(a1 + 16))
      {
LABEL_35:
        sub_2345D7AE4((uint64_t)&v74, v3);
        goto LABEL_36;
      }
      if (*(void *)v3)
      {
        unint64_t v21 = 0;
        do
        {
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3);
          uint64_t v22 = *(int *)(*((void *)v3 + 4) + 4 * v21);
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
          LODWORD(v22) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v22);
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
          *(_DWORD *)(v76 + 4 * v21++) = v22;
        }
        while (*(void *)v3 > v21);
      }
    }
    else
    {
      uint64_t v13 = MEMORY[0x237DC2530](v10, "uniform");
      unint64_t v14 = *v7 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v15 = (atomic_uint *)(v73 & 0xFFFFFFFFFFFFFFF8);
      if ((v73 & 7) != 0) {
        atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v14 == v15)
      {
        uint64_t v23 = *(void *)a2;
        if (*(void *)(a1 + 16))
        {
          if (v23)
          {
            unint64_t v24 = 0;
            LODWORD(i) = 0;
            do
            {
              int v26 = 0;
              for (uint64_t i = (int)i; ; ++i)
              {
                sub_2345D9D28(a2);
                if (v26 >= *(_DWORD *)(*((void *)a2 + 4) + 4 * v24)) {
                  break;
                }
                sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
                int v27 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v24);
                sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
                *(_DWORD *)(v76 + 4 * i) = v27;
                ++v26;
              }
              ++v24;
            }
            while (*(void *)a2 > v24);
          }
        }
        else if (v23)
        {
          unint64_t v39 = 0;
          LODWORD(j) = 0;
          do
          {
            int v41 = 0;
            for (uint64_t j = (int)j; ; ++j)
            {
              sub_2345D9D28(a2);
              if (v41 >= *(_DWORD *)(*((void *)a2 + 4) + 4 * v39)) {
                break;
              }
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
              *(_DWORD *)(v76 + 4 * j) = v39;
              ++v41;
            }
            ++v39;
          }
          while (*(void *)a2 > v39);
        }
      }
      else
      {
        MEMORY[0x237DC2530](v13, "faceVarying");
        unint64_t v16 = *v7 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v17 = (atomic_uint *)(v73 & 0xFFFFFFFFFFFFFFF8);
        if ((v73 & 7) != 0) {
          atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v16 != v17)
        {
          unint64_t v18 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
          if (v18)
          {
            char v19 = (const char *)(v18 + 16);
            if (*(char *)(v18 + 39) < 0) {
              char v19 = *(const char **)v19;
            }
          }
          else
          {
            char v19 = "";
          }
          unint64_t v37 = *v7 & 0xFFFFFFFFFFFFFFF8;
          if (v37)
          {
            uint64_t v38 = (const char *)(v37 + 16);
            if (*(char *)(v37 + 39) < 0) {
              uint64_t v38 = *(const char **)v38;
            }
          }
          else
          {
            uint64_t v38 = "";
          }
          NSLog(&cfstr_WarningMeshAtt.isa, v19, v38);
          goto LABEL_68;
        }
        if (*(void *)(a1 + 16))
        {
          uint64_t v3 = (long long *)(a1 + 16);
          goto LABEL_35;
        }
        if (*(void *)v3)
        {
          unint64_t v42 = 0;
          do
          {
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
            *(_DWORD *)(v76 + 4 * v42) = v42;
            ++v42;
          }
          while (*(void *)v3 > v42);
        }
      }
    }
  }
LABEL_36:
  uint64_t v28 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_42;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_42:
    long long v70 = v74;
    long long v71 = v75;
    uint64_t v72 = v76;
    if (v76)
    {
      uint64_t v32 = (atomic_ullong *)(v76 - 16);
      if (*((void *)&v71 + 1)) {
        uint64_t v32 = (atomic_ullong *)*((void *)&v71 + 1);
      }
      atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
    }
    sub_234633054((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v70, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v70);
LABEL_61:
    MEMORY[0x237DC2530](&v73, "vertex");
    if (&v73 == v7)
    {
      if ((v73 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v7 = v73;
    }
    sub_2345DA898((void *)(a1 + 16));
    goto LABEL_68;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_56;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_56;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_56:
    long long v67 = v74;
    long long v68 = v75;
    uint64_t v69 = v76;
    if (v76)
    {
      uint64_t v36 = (atomic_ullong *)(v76 - 16);
      if (*((void *)&v68 + 1)) {
        uint64_t v36 = (atomic_ullong *)*((void *)&v68 + 1);
      }
      atomic_fetch_add_explicit(v36, 1uLL, memory_order_relaxed);
    }
    sub_2346331BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v67, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v67);
    goto LABEL_61;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    long long v64 = v74;
    long long v65 = v75;
    uint64_t v66 = v76;
    if (v76)
    {
      int v44 = (atomic_ullong *)(v76 - 16);
      if (*((void *)&v65 + 1)) {
        int v44 = (atomic_ullong *)*((void *)&v65 + 1);
      }
      atomic_fetch_add_explicit(v44, 1uLL, memory_order_relaxed);
    }
    sub_234633338((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v64, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v64);
    goto LABEL_61;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    long long v61 = v74;
    long long v62 = v75;
    uint64_t v63 = v76;
    if (v76)
    {
      uint64_t v46 = (atomic_ullong *)(v76 - 16);
      if (*((void *)&v62 + 1)) {
        uint64_t v46 = (atomic_ullong *)*((void *)&v62 + 1);
      }
      atomic_fetch_add_explicit(v46, 1uLL, memory_order_relaxed);
    }
    sub_234633498((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v61, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v61);
    goto LABEL_61;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    long long v58 = v74;
    long long v59 = v75;
    uint64_t v60 = v76;
    if (v76)
    {
      long long v48 = (atomic_ullong *)(v76 - 16);
      if (*((void *)&v59 + 1)) {
        long long v48 = (atomic_ullong *)*((void *)&v59 + 1);
      }
      atomic_fetch_add_explicit(v48, 1uLL, memory_order_relaxed);
    }
    sub_234633600((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v58, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v58);
    goto LABEL_61;
  }
  if (!atomic_load(v28)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    long long v55 = v74;
    long long v56 = v75;
    uint64_t v57 = v76;
    if (v76)
    {
      uint64_t v50 = (atomic_ullong *)(v76 - 16);
      if (*((void *)&v56 + 1)) {
        uint64_t v50 = (atomic_ullong *)*((void *)&v56 + 1);
      }
      atomic_fetch_add_explicit(v50, 1uLL, memory_order_relaxed);
    }
    sub_234633768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v55, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v55);
    goto LABEL_61;
  }
  unint64_t v51 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
  if (v51)
  {
    uint64_t v52 = (const char *)(v51 + 16);
    if (*(char *)(v51 + 39) < 0) {
      uint64_t v52 = *(const char **)v52;
    }
  }
  else
  {
    uint64_t v52 = "";
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v73, v30);
  unint64_t v53 = v73 & 0xFFFFFFFFFFFFFFF8;
  if ((v73 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v54 = (const char *)(v53 + 16);
    if (*(char *)(v53 + 39) < 0) {
      uint64_t v54 = *(const char **)v54;
    }
  }
  else
  {
    uint64_t v54 = "";
  }
  NSLog(&cfstr_WarningMeshAtt_0.isa, v52, v54);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_68:
  sub_2345D9DC0((uint64_t)&v74);
}

void sub_234632F5C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 136);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_234633054(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_2345E8134((uint64_t)v19, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_2345DCB24(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v16 = *(_OWORD *)v6;
  long long v17 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v18 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v17 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a2)
      {
        uint64_t v13 = 0;
        do
        {
          sub_2345D9D28(a1);
          uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
          sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
          uint64_t v15 = v18;
          sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
          *(void *)(v20 + 8 * v12 + 8 * v13) = *(void *)(v15 + 8 * (v13 + v14 * a2));
          ++v13;
        }
        while (a2 != v13);
        v12 += v13;
        unint64_t v10 = *(void *)a1;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  sub_234636794(a3, v19);
  sub_2345D9DC0((uint64_t)&v16);
  sub_2345D9DC0((uint64_t)v19);
}

void sub_23463318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_2346331BC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  sub_2345DD204((uint64_t)v23, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_2345D811C(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v20 = *(_OWORD *)v6;
  long long v21 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v22 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v21 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v21 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 12 * v12;
        do
        {
          sub_2345D9D28(a1);
          uint64_t v15 = *(int *)(*((void *)a1 + 4) + 4 * v11);
          sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
          uint64_t v16 = v22;
          sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23);
          long long v17 = (uint64_t *)(v16 + 12 * (v13 + v15 * a2));
          uint64_t v18 = v24 + v14;
          uint64_t v19 = *v17;
          *(_DWORD *)(v18 + 8) = *((_DWORD *)v17 + 2);
          *(void *)uint64_t v18 = v19;
          ++v13;
          v14 += 12;
        }
        while (a2 != v13);
        v12 += v13;
        unint64_t v10 = *(void *)a1;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  sub_2345DC114(a3, v23);
  sub_2345D9DC0((uint64_t)&v20);
  sub_2345D9DC0((uint64_t)v23);
}

void sub_234633308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_234633338(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_2345D7A70((uint64_t)v18, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_2345EE598(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v15 = *(_OWORD *)v6;
  long long v16 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v17 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v16 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a2)
      {
        uint64_t v13 = 0;
        do
        {
          sub_2345D9D28(a1);
          uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
          LODWORD(v14) = *(_DWORD *)(v17 + 4 * (v13 + v14 * a2));
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
          *(_DWORD *)(v19 + 4 * v12 + 4 * v13++) = v14;
        }
        while (a2 != v13);
        v12 += v13;
        unint64_t v10 = *(void *)a1;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  sub_2346369B4(a3, v18);
  sub_2345D9DC0((uint64_t)&v15);
  sub_2345D9DC0((uint64_t)v18);
}

void sub_234633468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_234633498(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_2345DD190((uint64_t)v20, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_2345EF9B0(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v17 = *(_OWORD *)v6;
  long long v18 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v19 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v18 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 16 * v12;
        do
        {
          sub_2345D9D28(a1);
          uint64_t v15 = *(int *)(*((void *)a1 + 4) + 4 * v11);
          sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
          uint64_t v16 = v19;
          sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
          *(_OWORD *)(v21 + v14) = *(_OWORD *)(v16 + 16 * (v13 + v15 * a2));
          ++v13;
          v14 += 16;
        }
        while (a2 != v13);
        v12 += v13;
        unint64_t v10 = *(void *)a1;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  sub_234636B40(a3, v20);
  sub_2345D9DC0((uint64_t)&v17);
  sub_2345D9DC0((uint64_t)v20);
}

void sub_2346335D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_234633600(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_2345E7F98((uint64_t)v19, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_2345EF364(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v16 = *(_OWORD *)v6;
  long long v17 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v18 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v17 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a2)
      {
        uint64_t v13 = 0;
        do
        {
          sub_2345D9D28(a1);
          uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
          sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
          int v15 = *(_DWORD *)(v18 + 4 * (v13 + v14 * a2));
          sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
          *(_DWORD *)(v20 + 4 * v12 + 4 * v13++) = v15;
        }
        while (a2 != v13);
        v12 += v13;
        unint64_t v10 = *(void *)a1;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  sub_234636D60(a3, v19);
  sub_2345D9DC0((uint64_t)&v16);
  sub_2345D9DC0((uint64_t)v19);
}

void sub_234633738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_234633768(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_2345E6F44((uint64_t)v18, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_2345EE800(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v15 = *(_OWORD *)v6;
  long long v16 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v17 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v16 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a2)
      {
        uint64_t v13 = 0;
        do
        {
          sub_2345D9D28(a1);
          uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
          sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
          LODWORD(v14) = *(_DWORD *)(v17 + 4 * (v13 + v14 * a2));
          sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
          *(_DWORD *)(v19 + 4 * v12 + 4 * v13++) = v14;
        }
        while (a2 != v13);
        v12 += v13;
        unint64_t v10 = *(void *)a1;
      }
      ++v11;
    }
    while (v10 > v11);
  }
  sub_234636F80(a3, v18);
  sub_2345D9DC0((uint64_t)&v15);
  sub_2345D9DC0((uint64_t)v18);
}

void sub_234633898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_2346338C8(uint64_t a1, unsigned int a2)
{
  long long v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_2345D7A70((uint64_t)&v46, a2);
  sub_2345D9D28(v3);
  uint64_t v4 = v48;
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v46);
  uint64_t v5 = &v48[4 * v46] - v4;
  if (v5 >= 1) {
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  uint64_t v6 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_9;
  }
  if (!atomic_load(v6)) {
    sub_2345DEBD0(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_9:
    long long v43 = v46;
    long long v44 = v47;
    int v45 = v48;
    if (v48)
    {
      unint64_t v10 = (atomic_ullong *)(v48 - 16);
      if (*((void *)&v44 + 1)) {
        unint64_t v10 = (atomic_ullong *)*((void *)&v44 + 1);
      }
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
    sub_234633054((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43, *(int *)(a1 + 80), (uint64_t *)a1);
    sub_2345D9DC0((uint64_t)&v43);
  }
  else
  {
    if (!atomic_load(v6)) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_23;
    }
    if (!atomic_load(v6)) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_23;
    }
    if (!atomic_load(v6)) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_23:
      long long v40 = v46;
      long long v41 = v47;
      unint64_t v42 = v48;
      if (v48)
      {
        uint64_t v14 = (atomic_ullong *)(v48 - 16);
        if (*((void *)&v41 + 1)) {
          uint64_t v14 = (atomic_ullong *)*((void *)&v41 + 1);
        }
        atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
      }
      sub_2346331BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40, *(int *)(a1 + 80), (uint64_t *)a1);
      sub_2345D9DC0((uint64_t)&v40);
    }
    else
    {
      if (!atomic_load(v6)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        long long v37 = v46;
        long long v38 = v47;
        unint64_t v39 = v48;
        if (v48)
        {
          long long v16 = (atomic_ullong *)(v48 - 16);
          if (*((void *)&v38 + 1)) {
            long long v16 = (atomic_ullong *)*((void *)&v38 + 1);
          }
          atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
        }
        sub_234633338((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37, *(int *)(a1 + 80), (uint64_t *)a1);
        sub_2345D9DC0((uint64_t)&v37);
      }
      else
      {
        if (!atomic_load(v6)) {
          sub_2345DEBD0(MEMORY[0x263F90560]);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          long long v34 = v46;
          long long v35 = v47;
          uint64_t v36 = v48;
          if (v48)
          {
            uint64_t v18 = (atomic_ullong *)(v48 - 16);
            if (*((void *)&v35 + 1)) {
              uint64_t v18 = (atomic_ullong *)*((void *)&v35 + 1);
            }
            atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
          }
          sub_234633498((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34, *(int *)(a1 + 80), (uint64_t *)a1);
          sub_2345D9DC0((uint64_t)&v34);
        }
        else
        {
          if (!atomic_load(v6)) {
            sub_2345DEBD0(MEMORY[0x263F90560]);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            long long v31 = v46;
            long long v32 = v47;
            uint64_t v33 = v48;
            if (v48)
            {
              uint64_t v20 = (atomic_ullong *)(v48 - 16);
              if (*((void *)&v32 + 1)) {
                uint64_t v20 = (atomic_ullong *)*((void *)&v32 + 1);
              }
              atomic_fetch_add_explicit(v20, 1uLL, memory_order_relaxed);
            }
            sub_234633600((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31, *(int *)(a1 + 80), (uint64_t *)a1);
            sub_2345D9DC0((uint64_t)&v31);
          }
          else
          {
            if (!atomic_load(v6)) {
              sub_2345DEBD0(MEMORY[0x263F90560]);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              long long v28 = v46;
              long long v29 = v47;
              uint64_t v30 = v48;
              if (v48)
              {
                uint64_t v22 = (atomic_ullong *)(v48 - 16);
                if (*((void *)&v29 + 1)) {
                  uint64_t v22 = (atomic_ullong *)*((void *)&v29 + 1);
                }
                atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
              }
              sub_234633768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v28, *(int *)(a1 + 80), (uint64_t *)a1);
              sub_2345D9DC0((uint64_t)&v28);
            }
            else
            {
              unint64_t v23 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
              if (v23)
              {
                uint64_t v24 = (const char *)(v23 + 16);
                if (*(char *)(v23 + 39) < 0) {
                  uint64_t v24 = *(const char **)v24;
                }
              }
              else
              {
                uint64_t v24 = "";
              }
              pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v27, v8);
              unint64_t v25 = v27 & 0xFFFFFFFFFFFFFFF8;
              if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                int v26 = (const char *)(v25 + 16);
                if (*(char *)(v25 + 39) < 0) {
                  int v26 = *(const char **)v26;
                }
              }
              else
              {
                int v26 = "";
              }
              NSLog(&cfstr_WarningMeshAtt_0.isa, v24, v26);
              if ((v27 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
          }
        }
      }
    }
  }
  sub_2345D9DC0((uint64_t)&v46);
}

void sub_234633D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2345D9DC0(v12 - 96);
  _Unwind_Resume(a1);
}

void sub_234633DE4(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4, uint64_t *a5)
{
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1;
  unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
  int v59 = 0;
  *(void *)&long long v56 = &v59;
  sub_2345DA8E4(a1, v10, (_DWORD **)&v56);
  sub_234634354(a5, (uint64_t)a4);
  uint64_t v11 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v12 = 0;
    int v13 = -1;
    long long v55 = v9;
    do
    {
      uint64_t v14 = v11 + 88 * v12;
      MEMORY[0x237DC2530](&v56, "vertex");
      uint64_t v15 = *(void *)(v14 + 72);
      long long v16 = (atomic_uint *)(v56 & 0xFFFFFFFFFFFFFFF8);
      if ((v56 & 7) != 0) {
        atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v18 = *a2;
      if ((atomic_uint *)v17 == v16)
      {
        if (*(void *)(v18 + 88 * v12 + 16))
        {
          uint64_t v58 = 0;
          long long v56 = 0u;
          long long v57 = 0u;
          sub_2345D7A70((uint64_t)&v56, *(unsigned int *)a4);
          if (*(void *)a4)
          {
            unint64_t v34 = 0;
            do
            {
              sub_2345D9D28(a4);
              uint64_t v35 = *(int *)(*((void *)a4 + 4) + 4 * v34);
              uint64_t v36 = *a2;
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 88 * v12 + 16));
              LODWORD(v36) = *(_DWORD *)(*(void *)(v36 + 88 * v12 + 48) + 4 * v35);
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
              *(_DWORD *)(v58 + 4 * v34) = v36;
              uint64_t v38 = *a5;
              uint64_t v37 = a5[1];
              sub_2345D9D28(v55);
              int v39 = -858993459 * ((unint64_t)(v37 - v38) >> 3);
              uint64_t v9 = v55;
              *(_DWORD *)(*((void *)v55 + 4) + 4 * v12) = v39;
              ++v34;
            }
            while (*(void *)a4 > v34);
          }
          sub_234634354(a5, (uint64_t)&v56);
          sub_2345D9DC0((uint64_t)&v56);
        }
        else
        {
          sub_2345D9D28(v9);
          *(_DWORD *)(*((void *)v9 + 4) + 4 * v12) = 0;
        }
      }
      else
      {
        uint64_t v19 = v18 + 88 * v12;
        MEMORY[0x237DC2530](&v56, "uniform");
        uint64_t v20 = *(void *)(v19 + 72);
        uint64_t v21 = (atomic_uint *)(v56 & 0xFFFFFFFFFFFFFFF8);
        if ((v56 & 7) != 0) {
          atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v23 = *a2;
        if ((atomic_uint *)v22 == v21)
        {
          if (*(void *)(v23 + 88 * v12 + 16))
          {
            int v54 = v13;
            uint64_t v58 = 0;
            long long v56 = 0u;
            long long v57 = 0u;
            sub_2345D7A70((uint64_t)&v56, *(unsigned int *)a4);
            if (*(void *)a3)
            {
              unint64_t v40 = 0;
              LODWORD(i) = 0;
              do
              {
                int v42 = 0;
                for (uint64_t i = (int)i; ; ++i)
                {
                  sub_2345D9D28(a3);
                  if (v42 >= *(_DWORD *)(*((void *)a3 + 4) + 4 * v40)) {
                    break;
                  }
                  uint64_t v43 = *a2;
                  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 88 * v12 + 16));
                  LODWORD(v43) = *(_DWORD *)(*(void *)(v43 + 88 * v12 + 48) + 4 * v40);
                  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
                  *(_DWORD *)(v58 + 4 * i) = v43;
                  ++v42;
                }
                ++v40;
              }
              while (*(void *)a3 > v40);
            }
            uint64_t v45 = *a5;
            uint64_t v44 = a5[1];
            uint64_t v9 = v55;
            sub_2345D9D28(v55);
            *(_DWORD *)(*((void *)v55 + 4) + 4 * v12) = -858993459 * ((unint64_t)(v44 - v45) >> 3);
            sub_234634354(a5, (uint64_t)&v56);
            sub_2345D9DC0((uint64_t)&v56);
            int v13 = v54;
          }
          else
          {
            if (v13 == -1)
            {
              uint64_t v58 = 0;
              long long v56 = 0u;
              long long v57 = 0u;
              sub_2345D7A70((uint64_t)&v56, *(unsigned int *)a4);
              if (*(void *)a3)
              {
                unint64_t v47 = 0;
                LODWORD(j) = 0;
                do
                {
                  int v49 = 0;
                  for (uint64_t j = (int)j; ; ++j)
                  {
                    sub_2345D9D28(a3);
                    if (v49 >= *(_DWORD *)(*((void *)a3 + 4) + 4 * v47)) {
                      break;
                    }
                    sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
                    *(_DWORD *)(v58 + 4 * j) = v47;
                    ++v49;
                  }
                  ++v47;
                }
                while (*(void *)a3 > v47);
              }
              sub_234634354(a5, (uint64_t)&v56);
              uint64_t v51 = *a5;
              uint64_t v50 = a5[1];
              sub_2345D9DC0((uint64_t)&v56);
              int v13 = -1 - 858993459 * ((unint64_t)(v50 - v51) >> 3);
            }
            uint64_t v9 = v55;
            sub_2345D9D28(v55);
            *(_DWORD *)(*((void *)v55 + 4) + 4 * v12) = v13;
          }
        }
        else
        {
          uint64_t v24 = v23 + 88 * v12;
          MEMORY[0x237DC2530](&v56, "constant");
          uint64_t v25 = *(void *)(v24 + 72);
          int v26 = (atomic_uint *)(v56 & 0xFFFFFFFFFFFFFFF8);
          if ((v56 & 7) != 0) {
            atomic_fetch_add_explicit(v26, 0xFFFFFFFE, memory_order_release);
          }
          if ((atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8) != v26)
          {
            uint64_t v27 = *a2 + 88 * v12;
            MEMORY[0x237DC2530](&v56, "faceVarying");
            uint64_t v28 = *(void *)(v27 + 72);
            long long v29 = (atomic_uint *)(v56 & 0xFFFFFFFFFFFFFFF8);
            if ((v56 & 7) != 0) {
              atomic_fetch_add_explicit(v29, 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v31 = *a2;
            if ((atomic_uint *)v30 == v29)
            {
              if (!*(void *)(v31 + 88 * v12 + 16)) {
                sub_234637BFC();
              }
              int v46 = -858993459 * ((unint64_t)(a5[1] - *a5) >> 3);
              sub_2345D9D28(v9);
              *(_DWORD *)(*((void *)v9 + 4) + 4 * v12) = v46;
              sub_234634354(a5, *a2 + 88 * v12 + 16);
            }
            else
            {
              unint64_t v32 = *(void *)(v31 + 88 * v12 + 56) & 0xFFFFFFFFFFFFFFF8;
              if (v32)
              {
                uint64_t v33 = (const char *)(v32 + 16);
                if (*(char *)(v32 + 39) < 0) {
                  uint64_t v33 = *(const char **)v33;
                }
              }
              else
              {
                uint64_t v33 = "";
              }
              unint64_t v52 = *(void *)(v31 + 88 * v12 + 72) & 0xFFFFFFFFFFFFFFF8;
              if (v52)
              {
                unint64_t v53 = (const char *)(v52 + 16);
                if (*(char *)(v52 + 39) < 0) {
                  unint64_t v53 = *(const char **)v53;
                }
              }
              else
              {
                unint64_t v53 = "";
              }
              NSLog(&cfstr_WarningMeshAtt.isa, v33, v53);
            }
          }
        }
      }
      ++v12;
      uint64_t v11 = *a2;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3) > v12);
  }
}

void sub_234634300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2345D9DC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_234634354(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666) {
      sub_2345D8238();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v15 = 0x666666666666666;
    }
    else {
      unint64_t v15 = v13;
    }
    v22[4] = result;
    long long v16 = (char *)sub_23461336C(result, v15);
    unint64_t v17 = &v16[40 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[40 * v18];
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v19;
    uint64_t v20 = *(void *)(a2 + 32);
    *((void *)v17 + 4) = v20;
    if (v20)
    {
      uint64_t v21 = (atomic_ullong *)(v20 - 16);
      if (*((void *)v17 + 3)) {
        uint64_t v21 = (atomic_ullong *)*((void *)v17 + 3);
      }
      atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
    }
    v22[2] = v17 + 40;
    sub_2346371A0(a1, v22);
    uint64_t v11 = a1[1];
    uint64_t result = sub_2346373D8((uint64_t)v22);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(v7 + 32) = v9;
    if (v9)
    {
      unint64_t v10 = (atomic_ullong *)(v9 - 16);
      if (*(void *)(v7 + 24)) {
        unint64_t v10 = *(atomic_ullong **)(v7 + 24);
      }
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v11;
  return result;
}

void sub_234634498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2346373D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2346344AC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, void *a3, uint64_t **a4, unint64_t a5, int *a6)
{
  unint64_t v6 = a5;
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4);
  uint64_t v11 = **a4;
  unint64_t v64 = (int)v10;
  LODWORD(v77[0]) = 0;
  *(void *)&v79[0] = v77;
  sub_2345DA8E4(a2, (int)v10 * a5, (_DWORD **)v79);
  sub_2345D9D28(a1);
  unint64_t v12 = (void *)*((void *)a1 + 4);
  sub_2345D9D28(a1);
  uint64_t v13 = *((void *)a1 + 4) + 4 * *(void *)a1 - (void)v12;
  if (v13 >= 1) {
    memset(v12, 255, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  unint64_t v15 = a2 + 4;
  unint64_t v14 = (void *)a2[4];
  sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  uint64_t v16 = a2[4] + 4 * *a2 - (void)v14;
  if (v16 >= 1) {
    memset(v14, 255, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  }
  float v80 = 0;
  memset(v79, 0, sizeof(v79));
  sub_2345D7A70((uint64_t)v79, v10);
  uint64_t v78 = 0;
  memset(v77, 0, sizeof(v77));
  sub_2345D7A70((uint64_t)v77, v10);
  uint64_t v17 = (int)v10 + 1;
  uint64_t v76 = 0;
  memset(v75, 0, sizeof(v75));
  sub_2345D7A70((uint64_t)v75, (v10 + 1));
  uint64_t v18 = v11 << 32;
  *a6 = 0;
  if (v11 << 32)
  {
    uint64_t v19 = 0;
    long long v65 = a1;
    unint64_t v66 = v10 << 32;
    unint64_t v20 = (int)v11;
    uint64_t v21 = (int)v10 - 1;
    uint64_t v70 = v17;
    long long v71 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3;
    if (v64 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v64;
    }
    uint64_t v23 = 2;
    if (v64 > 2) {
      uint64_t v23 = v64;
    }
    uint64_t v68 = v23;
    uint64_t v69 = a3 + 4;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    unint64_t v63 = v20;
    unint64_t v61 = v6;
    uint64_t v60 = 4 * v17;
    do
    {
      if (v66)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 4;
        do
        {
          int v26 = *(_DWORD *)((*a4)[v25] + 4 * v19);
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          v80[v24++] = v26;
          v25 += 5;
        }
        while (v22 != v24);
      }
      sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
      int v27 = *v80;
      sub_2345D9D28(v65);
      int v28 = v27;
      *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = -1;
      if (v66)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
          int v30 = *(_DWORD *)(*v15 + 4 * v64 * v27 + 4 * i);
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          *(_DWORD *)(v78 + 4 * i) = v30;
        }
      }
      sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
      int v31 = *(_DWORD *)(v78 + 4 * v21);
      sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
      uint64_t v67 = (int)v64 * (uint64_t)v27;
      if (*(_DWORD *)(*v15 + 4 * v67) == -1)
      {
        if (v66)
        {
          for (uint64_t j = 0; j != v22; ++j)
          {
            if (v21 == j)
            {
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (v21 + v67)) = -1;
            }
            else
            {
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              int v44 = v80[j + 1];
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (j + v67)) = v44;
            }
          }
        }
        sub_2345D9D28(v65);
        *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v28;
        ++*a6;
      }
      else
      {
        int v32 = v27;
        uint64_t v33 = 0;
        do
        {
          if (v21 == v33)
          {
            sub_2345D9D28(v65);
            *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v32;
            goto LABEL_54;
          }
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          int v34 = v80[v33 + 1];
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          int v35 = *(_DWORD *)(v78 + 4 * v33++);
          BOOL v36 = v34 == v35;
          int v32 = v27;
        }
        while (v36);
        int v37 = v31;
        if (v31 < 0)
        {
          int v38 = -1;
        }
        else
        {
          while (1)
          {
            int v38 = v37;
            if (v70)
            {
              for (uint64_t k = 0; k != v70; ++k)
              {
                sub_2345D9D28(v71);
                int v40 = *(_DWORD *)(*v69 + v60 * v38 + 4 * k);
                sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
                *(_DWORD *)(v76 + 4 * k) = v40;
              }
            }
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
            if (v66 < 0x100000001) {
              break;
            }
            int v37 = *(_DWORD *)(v76 + 4 * v64);
            uint64_t v41 = 1;
            while (1)
            {
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              int v42 = v80[v41];
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
              if (v42 != *(_DWORD *)(v76 + 4 * v41)) {
                break;
              }
              if (v68 == ++v41) {
                goto LABEL_45;
              }
            }
            if (v37 < 0) {
              goto LABEL_46;
            }
          }
          int v38 = v31;
LABEL_45:
          sub_2345D9D28(v65);
          *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v38 + v61;
        }
LABEL_46:
        sub_2345D9D28(v65);
        if (*(_DWORD *)(*((void *)v65 + 4) + 4 * v19) == -1)
        {
          unint64_t v45 = *(int *)v71;
          if (v31 < 0)
          {
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
            uint64_t v48 = v21 + v67;
            int v46 = a2 + 4;
            unint64_t v47 = v70;
          }
          else
          {
            sub_2345D9D28(v71);
            int v46 = v69;
            unint64_t v47 = v70;
            uint64_t v48 = v47 + v47 * v38 - 1;
          }
          unint64_t v49 = v45 / v47;
          *(_DWORD *)(*v46 + 4 * v48) = v45 / v47;
          sub_2345D9D28(v65);
          *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v49 + v61;
          if (v66)
          {
            uint64_t v50 = 0;
            uint64_t v51 = v22;
            do
            {
              sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              sub_2345DADA8((uint64_t)v71, &v80[v50++]);
              --v51;
            }
            while (v51);
          }
          LODWORD(v73[0]) = -1;
          sub_234637454((uint64_t)v71, v73);
        }
      }
LABEL_54:
      ++v19;
    }
    while (v19 != v63);
    uint64_t v18 = *a6;
    unint64_t v6 = v61;
    a1 = v65;
  }
  if (v18 != v6)
  {
    uint64_t v74 = 0;
    memset(v73, 0, sizeof(v73));
    sub_2345D7A70((uint64_t)v73, v6);
    if (v6)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      int v54 = 0;
      do
      {
        sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (*(_DWORD *)(*v15 + v52) != -1)
        {
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          *(_DWORD *)(v74 + 4 * v53) = v54++;
        }
        ++v53;
        v52 += 4 * v64;
      }
      while (v6 != v53);
    }
    if (*(void *)a1)
    {
      unint64_t v55 = 0;
      do
      {
        sub_2345D9D28(a1);
        unint64_t v56 = *(int *)(*((void *)a1 + 4) + 4 * v55);
        if (v56 >= v6)
        {
          sub_2345D9D28(a1);
          int v58 = *(_DWORD *)(*((void *)a1 + 4) + 4 * v55);
          int v59 = *a6;
          sub_2345D9D28(a1);
          *(_DWORD *)(*((void *)a1 + 4) + 4 * v55) = v58 - v6 + v59;
        }
        else
        {
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          int v57 = *(_DWORD *)(v74 + 4 * v56);
          sub_2345D9D28(a1);
          *(_DWORD *)(*((void *)a1 + 4) + 4 * v55) = v57;
        }
        ++v55;
      }
      while (*(void *)a1 > v55);
    }
    sub_2345D9DC0((uint64_t)v73);
  }
  sub_2345D9DC0((uint64_t)v75);
  sub_2345D9DC0((uint64_t)v77);
  sub_2345D9DC0((uint64_t)v79);
}

void sub_234634B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2345D9DC0((uint64_t)&a29);
  sub_2345D9DC0(v29 - 176);
  sub_2345D9DC0(v29 - 128);
  _Unwind_Resume(a1);
}

void sub_234634C10(uint64_t a1, int a2, int a3, unsigned int a4, unint64_t a5, long long *a6, long long *a7)
{
  MEMORY[0x237DC2530](&v104, "constant");
  unint64_t v14 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (atomic_uint *)(v104 & 0xFFFFFFFFFFFFFFF8);
  if ((v104 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v14 == v15)
  {
    sub_2346338C8(a1, a4);
  }
  else
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64);
    uint64_t v17 = (unint64_t *)MEMORY[0x263F90560];
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_10;
    }
    if (!atomic_load(v17)) {
      sub_2345DEBD0(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_10:
      long long v20 = a6[1];
      long long v101 = *a6;
      long long v102 = v20;
      uint64_t v21 = *((void *)a6 + 4);
      uint64_t v103 = v21;
      if (v21)
      {
        uint64_t v22 = (atomic_ullong *)(v21 - 16);
        if (*((void *)&v102 + 1)) {
          uint64_t v22 = (atomic_ullong *)*((void *)&v102 + 1);
        }
        atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
      }
      long long v23 = a7[1];
      long long v98 = *a7;
      long long v99 = v23;
      uint64_t v24 = *((void *)a7 + 4);
      uint64_t v100 = v24;
      if (v24)
      {
        uint64_t v25 = (atomic_ullong *)(v24 - 16);
        if (*((void *)&v99 + 1)) {
          uint64_t v25 = (atomic_ullong *)*((void *)&v99 + 1);
        }
        atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
      }
      sub_23463534C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v101, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v98, a3, a4, a2, a5, (uint64_t *)a1, *(_DWORD *)(a1 + 80));
      sub_2345D9DC0((uint64_t)&v98);
      sub_2345D9DC0((uint64_t)&v101);
    }
    else
    {
      if (!atomic_load(v17)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_32;
      }
      if (!atomic_load(v17)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_32;
      }
      if (!atomic_load(v17)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_32;
      }
      if (!atomic_load(v17)) {
        sub_2345DEBD0(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
LABEL_32:
        long long v30 = a6[1];
        long long v95 = *a6;
        long long v96 = v30;
        uint64_t v31 = *((void *)a6 + 4);
        uint64_t v97 = v31;
        if (v31)
        {
          int v32 = (atomic_ullong *)(v31 - 16);
          if (*((void *)&v96 + 1)) {
            int v32 = (atomic_ullong *)*((void *)&v96 + 1);
          }
          atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
        }
        long long v33 = a7[1];
        long long v92 = *a7;
        long long v93 = v33;
        uint64_t v34 = *((void *)a7 + 4);
        uint64_t v94 = v34;
        if (v34)
        {
          int v35 = (atomic_ullong *)(v34 - 16);
          if (*((void *)&v93 + 1)) {
            int v35 = (atomic_ullong *)*((void *)&v93 + 1);
          }
          atomic_fetch_add_explicit(v35, 1uLL, memory_order_relaxed);
        }
        sub_2346355D8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v95, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v92, a3, a4, a2, a5, (uint64_t *)a1, *(_DWORD *)(a1 + 80));
        sub_2345D9DC0((uint64_t)&v92);
        sub_2345D9DC0((uint64_t)&v95);
      }
      else
      {
        if (!atomic_load(v17)) {
          sub_2345DEBD0(MEMORY[0x263F90560]);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          long long v37 = a6[1];
          long long v89 = *a6;
          long long v90 = v37;
          uint64_t v38 = *((void *)a6 + 4);
          uint64_t v91 = v38;
          if (v38)
          {
            int v39 = (atomic_ullong *)(v38 - 16);
            if (*((void *)&v90 + 1)) {
              int v39 = (atomic_ullong *)*((void *)&v90 + 1);
            }
            atomic_fetch_add_explicit(v39, 1uLL, memory_order_relaxed);
          }
          long long v40 = a7[1];
          long long v86 = *a7;
          long long v87 = v40;
          uint64_t v41 = *((void *)a7 + 4);
          uint64_t v88 = v41;
          if (v41)
          {
            int v42 = (atomic_ullong *)(v41 - 16);
            if (*((void *)&v87 + 1)) {
              int v42 = (atomic_ullong *)*((void *)&v87 + 1);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          sub_234635894((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v89, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v86, a3, a4, a2, a5, (uint64_t *)a1, *(_DWORD *)(a1 + 80));
          sub_2345D9DC0((uint64_t)&v86);
          sub_2345D9DC0((uint64_t)&v89);
        }
        else
        {
          if (!atomic_load(v17)) {
            sub_2345DEBD0(MEMORY[0x263F90560]);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            long long v44 = a6[1];
            long long v83 = *a6;
            long long v84 = v44;
            uint64_t v45 = *((void *)a6 + 4);
            uint64_t v85 = v45;
            if (v45)
            {
              int v46 = (atomic_ullong *)(v45 - 16);
              if (*((void *)&v84 + 1)) {
                int v46 = (atomic_ullong *)*((void *)&v84 + 1);
              }
              atomic_fetch_add_explicit(v46, 1uLL, memory_order_relaxed);
            }
            long long v47 = a7[1];
            long long v80 = *a7;
            long long v81 = v47;
            uint64_t v48 = *((void *)a7 + 4);
            uint64_t v82 = v48;
            if (v48)
            {
              unint64_t v49 = (atomic_ullong *)(v48 - 16);
              if (*((void *)&v81 + 1)) {
                unint64_t v49 = (atomic_ullong *)*((void *)&v81 + 1);
              }
              atomic_fetch_add_explicit(v49, 1uLL, memory_order_relaxed);
            }
            sub_234635B20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v83, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v80, a3, a4, a2, a5, (uint64_t *)a1, *(_DWORD *)(a1 + 80));
            sub_2345D9DC0((uint64_t)&v80);
            sub_2345D9DC0((uint64_t)&v83);
          }
          else
          {
            if (!atomic_load(v17)) {
              sub_2345DEBD0(MEMORY[0x263F90560]);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              long long v51 = a6[1];
              long long v77 = *a6;
              long long v78 = v51;
              uint64_t v52 = *((void *)a6 + 4);
              uint64_t v79 = v52;
              if (v52)
              {
                uint64_t v53 = (atomic_ullong *)(v52 - 16);
                if (*((void *)&v78 + 1)) {
                  uint64_t v53 = (atomic_ullong *)*((void *)&v78 + 1);
                }
                atomic_fetch_add_explicit(v53, 1uLL, memory_order_relaxed);
              }
              long long v54 = a7[1];
              long long v74 = *a7;
              long long v75 = v54;
              uint64_t v55 = *((void *)a7 + 4);
              uint64_t v76 = v55;
              if (v55)
              {
                unint64_t v56 = (atomic_ullong *)(v55 - 16);
                if (*((void *)&v75 + 1)) {
                  unint64_t v56 = (atomic_ullong *)*((void *)&v75 + 1);
                }
                atomic_fetch_add_explicit(v56, 1uLL, memory_order_relaxed);
              }
              sub_234635DAC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v77, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74, a3, a4, a2, a5, (uint64_t *)a1, *(_DWORD *)(a1 + 80));
              sub_2345D9DC0((uint64_t)&v74);
              sub_2345D9DC0((uint64_t)&v77);
            }
            else
            {
              if (!atomic_load(v17)) {
                sub_2345DEBD0(MEMORY[0x263F90560]);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                long long v58 = a6[1];
                long long v71 = *a6;
                long long v72 = v58;
                uint64_t v59 = *((void *)a6 + 4);
                uint64_t v73 = v59;
                if (v59)
                {
                  uint64_t v60 = (atomic_ullong *)(v59 - 16);
                  if (*((void *)&v72 + 1)) {
                    uint64_t v60 = (atomic_ullong *)*((void *)&v72 + 1);
                  }
                  atomic_fetch_add_explicit(v60, 1uLL, memory_order_relaxed);
                }
                long long v61 = a7[1];
                long long v68 = *a7;
                long long v69 = v61;
                uint64_t v62 = *((void *)a7 + 4);
                uint64_t v70 = v62;
                if (v62)
                {
                  unint64_t v63 = (atomic_ullong *)(v62 - 16);
                  if (*((void *)&v69 + 1)) {
                    unint64_t v63 = (atomic_ullong *)*((void *)&v69 + 1);
                  }
                  atomic_fetch_add_explicit(v63, 1uLL, memory_order_relaxed);
                }
                sub_234636038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v71, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68, a3, a4, a2, a5, (uint64_t *)a1, *(_DWORD *)(a1 + 80));
                sub_2345D9DC0((uint64_t)&v68);
                sub_2345D9DC0((uint64_t)&v71);
              }
              else
              {
                unint64_t v64 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
                if (v64)
                {
                  long long v65 = (const char *)(v64 + 16);
                  if (*(char *)(v64 + 39) < 0) {
                    long long v65 = *(const char **)v65;
                  }
                }
                else
                {
                  long long v65 = "";
                }
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v104, v16);
                unint64_t v66 = v104 & 0xFFFFFFFFFFFFFFF8;
                if ((v104 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  uint64_t v67 = (const char *)(v66 + 16);
                  if (*(char *)(v66 + 39) < 0) {
                    uint64_t v67 = *(const char **)v67;
                  }
                }
                else
                {
                  uint64_t v67 = "";
                }
                NSLog(&cfstr_WarningMeshAtt_1.isa, v65, v67);
                if ((v104 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v104 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_234635238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v60 = *(void *)(v59 - 88);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_23463534C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  sub_2345E8134((uint64_t)v37, (a4 * a8));
  int v32 = a7;
  uint64_t v13 = sub_2345DCB24(a7);
  long long v14 = *(_OWORD *)(v13 + 16);
  long long v34 = *(_OWORD *)v13;
  long long v35 = v14;
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v36 = v15;
  if (v15)
  {
    uint64_t v16 = (atomic_ullong *)(v15 - 16);
    if (*((void *)&v35 + 1)) {
      uint64_t v16 = (atomic_ullong *)*((void *)&v35 + 1);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 >= a6)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      sub_2345D9D28(a1);
      if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v17 * a6) != -1)
      {
        if (a5)
        {
          sub_2345D9D28(a1);
          int v19 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (a5 - 1 + v17 * a6));
        }
        else
        {
          int v19 = v17;
        }
        if (a8 >= 1)
        {
          uint64_t v20 = 8 * v18 * a8;
          uint64_t v21 = 8 * v19 * a8;
          uint64_t v22 = a8;
          do
          {
            sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
            uint64_t v23 = v36;
            sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
            *(void *)(v38 + v20) = *(void *)(v23 + v21);
            v20 += 8;
            v21 += 8;
            --v22;
          }
          while (v22);
        }
        ++v18;
      }
      ++v17;
    }
    while (*(void *)a1 / a6 > v17);
  }
  unint64_t v24 = a6 + 1;
  if (a6 + 1 <= *(void *)a2)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 8 * a8 * (uint64_t)a3;
    do
    {
      sub_2345D9D28(a2);
      if (a8 >= 1)
      {
        uint64_t v27 = a8;
        uint64_t v28 = 8 * *(_DWORD *)(*((void *)a2 + 4) + 4 * (a5 + v25 * v24)) * a8;
        uint64_t v29 = v26;
        do
        {
          sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
          uint64_t v30 = v36;
          sub_2345EF788((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
          *(void *)(v38 + v29) = *(void *)(v30 + v28);
          v29 += 8;
          v28 += 8;
          --v27;
        }
        while (v27);
      }
      ++v25;
      v26 += 8 * a8;
    }
    while (*(void *)a2 / v24 > v25);
  }
  sub_234636794(v32, v37);
  sub_2345D9DC0((uint64_t)&v34);
  sub_2345D9DC0((uint64_t)v37);
}

void sub_234635598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2346355D8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  sub_2345DD204((uint64_t)v42, (a4 * a8));
  long long v37 = a7;
  uint64_t v13 = sub_2345D811C(a7);
  long long v14 = *(_OWORD *)(v13 + 16);
  long long v39 = *(_OWORD *)v13;
  long long v40 = v14;
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v41 = v15;
  if (v15)
  {
    uint64_t v16 = (atomic_ullong *)(v15 - 16);
    if (*((void *)&v40 + 1)) {
      uint64_t v16 = (atomic_ullong *)*((void *)&v40 + 1);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 >= a6)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      sub_2345D9D28(a1);
      if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v17 * a6) != -1)
      {
        if (a5)
        {
          sub_2345D9D28(a1);
          int v19 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (a5 - 1 + v17 * a6));
        }
        else
        {
          int v19 = v17;
        }
        if (a8 >= 1)
        {
          uint64_t v20 = 12 * v18 * a8;
          uint64_t v21 = 12 * v19 * a8;
          uint64_t v22 = a8;
          do
          {
            sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39);
            uint64_t v23 = v41;
            sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v42);
            uint64_t v24 = v43 + v20;
            uint64_t v25 = *(void *)(v23 + v21);
            *(_DWORD *)(v24 + 8) = *(_DWORD *)(v23 + v21 + 8);
            *(void *)uint64_t v24 = v25;
            v20 += 12;
            v21 += 12;
            --v22;
          }
          while (v22);
        }
        ++v18;
      }
      ++v17;
    }
    while (*(void *)a1 / a6 > v17);
  }
  unint64_t v26 = a6 + 1;
  if (a6 + 1 <= *(void *)a2)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 12 * a8;
    uint64_t v29 = v28 * a3;
    do
    {
      sub_2345D9D28(a2);
      if (a8 >= 1)
      {
        uint64_t v30 = a8;
        uint64_t v31 = 12 * *(int *)(*((void *)a2 + 4) + 4 * (a5 + v27 * v26)) * (uint64_t)a8;
        uint64_t v32 = v29;
        do
        {
          sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39);
          uint64_t v33 = v41;
          sub_2345DF758((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v42);
          uint64_t v34 = v43 + v32;
          uint64_t v35 = *(void *)(v33 + v31);
          *(_DWORD *)(v34 + 8) = *(_DWORD *)(v33 + v31 + 8);
          *(void *)uint64_t v34 = v35;
          v32 += 12;
          v31 += 12;
          --v30;
        }
        while (v30);
      }
      ++v27;
      v29 += v28;
    }
    while (*(void *)a2 / v26 > v27);
  }
  sub_2345DC114(v37, v42);
  sub_2345D9DC0((uint64_t)&v39);
  sub_2345D9DC0((uint64_t)v42);
}

void sub_234635854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_234635894(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  sub_2345D7A70((uint64_t)v37, (a4 * a8));
  uint64_t v32 = a7;
  uint64_t v13 = sub_2345EE598(a7);
  long long v14 = *(_OWORD *)(v13 + 16);
  long long v34 = *(_OWORD *)v13;
  long long v35 = v14;
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v36 = v15;
  if (v15)
  {
    uint64_t v16 = (atomic_ullong *)(v15 - 16);
    if (*((void *)&v35 + 1)) {
      uint64_t v16 = (atomic_ullong *)*((void *)&v35 + 1);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 >= a6)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      sub_2345D9D28(a1);
      if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v17 * a6) != -1)
      {
        if (a5)
        {
          sub_2345D9D28(a1);
          int v19 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (a5 - 1 + v17 * a6));
        }
        else
        {
          int v19 = v17;
        }
        if (a8 >= 1)
        {
          uint64_t v20 = 4 * v18 * a8;
          uint64_t v21 = 4 * v19 * a8;
          uint64_t v22 = a8;
          do
          {
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
            int v23 = *(_DWORD *)(v36 + v21);
            sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
            *(_DWORD *)(v38 + v20) = v23;
            v20 += 4;
            v21 += 4;
            --v22;
          }
          while (v22);
        }
        ++v18;
      }
      ++v17;
    }
    while (*(void *)a1 / a6 > v17);
  }
  unint64_t v24 = a6 + 1;
  if (a6 + 1 <= *(void *)a2)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 4 * a8 * (uint64_t)a3;
    do
    {
      sub_2345D9D28(a2);
      if (a8 >= 1)
      {
        uint64_t v27 = a8;
        uint64_t v28 = 4 * *(_DWORD *)(*((void *)a2 + 4) + 4 * (a5 + v25 * v24)) * a8;
        uint64_t v29 = v26;
        do
        {
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
          int v30 = *(_DWORD *)(v36 + v28);
          sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
          *(_DWORD *)(v38 + v29) = v30;
          v29 += 4;
          v28 += 4;
          --v27;
        }
        while (v27);
      }
      ++v25;
      v26 += 4 * a8;
    }
    while (*(void *)a2 / v24 > v25);
  }
  sub_2346369B4(v32, v37);
  sub_2345D9DC0((uint64_t)&v34);
  sub_2345D9DC0((uint64_t)v37);
}

void sub_234635AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_234635B20(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  sub_2345DD190((uint64_t)v37, (a4 * a8));
  uint64_t v32 = a7;
  uint64_t v13 = sub_2345EF9B0(a7);
  long long v14 = *(_OWORD *)(v13 + 16);
  long long v34 = *(_OWORD *)v13;
  long long v35 = v14;
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v36 = v15;
  if (v15)
  {
    uint64_t v16 = (atomic_ullong *)(v15 - 16);
    if (*((void *)&v35 + 1)) {
      uint64_t v16 = (atomic_ullong *)*((void *)&v35 + 1);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 >= a6)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      sub_2345D9D28(a1);
      if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v17 * a6) != -1)
      {
        if (a5)
        {
          sub_2345D9D28(a1);
          int v19 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (a5 - 1 + v17 * a6));
        }
        else
        {
          int v19 = v17;
        }
        if (a8 >= 1)
        {
          uint64_t v20 = 16 * v18 * a8;
          uint64_t v21 = 16 * v19 * a8;
          uint64_t v22 = a8;
          do
          {
            sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
            uint64_t v23 = v36;
            sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
            *(_OWORD *)(v38 + v20) = *(_OWORD *)(v23 + v21);
            v20 += 16;
            v21 += 16;
            --v22;
          }
          while (v22);
        }
        ++v18;
      }
      ++v17;
    }
    while (*(void *)a1 / a6 > v17);
  }
  unint64_t v24 = a6 + 1;
  if (a6 + 1 <= *(void *)a2)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 16 * a8 * (uint64_t)a3;
    do
    {
      sub_2345D9D28(a2);
      if (a8 >= 1)
      {
        uint64_t v27 = a8;
        uint64_t v28 = 16 * *(_DWORD *)(*((void *)a2 + 4) + 4 * (a5 + v25 * v24)) * a8;
        uint64_t v29 = v26;
        do
        {
          sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
          uint64_t v30 = v36;
          sub_2345DF620((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
          *(_OWORD *)(v38 + v29) = *(_OWORD *)(v30 + v28);
          v29 += 16;
          v28 += 16;
          --v27;
        }
        while (v27);
      }
      ++v25;
      v26 += 16 * a8;
    }
    while (*(void *)a2 / v24 > v25);
  }
  sub_234636B40(v32, v37);
  sub_2345D9DC0((uint64_t)&v34);
  sub_2345D9DC0((uint64_t)v37);
}

void sub_234635D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_234635DAC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_2345E7F98((uint64_t)v38, (a4 * a8));
  uint64_t v33 = a7;
  uint64_t v14 = sub_2345EF364(a7);
  long long v15 = *(_OWORD *)(v14 + 16);
  long long v35 = *(_OWORD *)v14;
  long long v36 = v15;
  uint64_t v16 = *(void *)(v14 + 32);
  uint64_t v37 = v16;
  if (v16)
  {
    unint64_t v17 = (atomic_ullong *)(v16 - 16);
    if (*((void *)&v36 + 1)) {
      unint64_t v17 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v17, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 >= a6)
  {
    unint64_t v18 = 0;
    int v19 = 0;
    do
    {
      sub_2345D9D28(a1);
      if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v18 * a6) != -1)
      {
        if (a5)
        {
          sub_2345D9D28(a1);
          int v20 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (a5 - 1 + v18 * a6));
        }
        else
        {
          int v20 = v18;
        }
        if (a8 >= 1)
        {
          uint64_t v21 = 4 * v19 * a8;
          uint64_t v22 = 4 * v20 * a8;
          uint64_t v23 = a8;
          do
          {
            sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
            int v24 = *(_DWORD *)(v37 + v22);
            sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
            *(_DWORD *)(v39 + v21) = v24;
            v21 += 4;
            v22 += 4;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      ++v18;
    }
    while (*(void *)a1 / a6 > v18);
  }
  unint64_t v25 = a6 + 1;
  if (a6 + 1 <= *(void *)a2)
  {
    unint64_t v26 = 0;
    uint64_t v34 = a5;
    uint64_t v27 = 4 * a8 * (uint64_t)a3;
    do
    {
      sub_2345D9D28(a2);
      if (a8 >= 1)
      {
        uint64_t v28 = 4 * *(_DWORD *)(*((void *)a2 + 4) + 4 * (v34 + v26 * v25)) * a8;
        uint64_t v29 = a8;
        uint64_t v30 = v27;
        do
        {
          sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          int v31 = *(_DWORD *)(v37 + v28);
          sub_2345F925C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
          *(_DWORD *)(v39 + v30) = v31;
          v30 += 4;
          v28 += 4;
          --v29;
        }
        while (v29);
      }
      ++v26;
      v27 += 4 * a8;
    }
    while (*(void *)a2 / v25 > v26);
  }
  sub_234636D60(v33, v38);
  sub_2345D9DC0((uint64_t)&v35);
  sub_2345D9DC0((uint64_t)v38);
}

void sub_234635FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_234636038(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  sub_2345E6F44((uint64_t)v37, (a4 * a8));
  uint64_t v32 = a7;
  uint64_t v13 = sub_2345EE800(a7);
  long long v14 = *(_OWORD *)(v13 + 16);
  long long v34 = *(_OWORD *)v13;
  long long v35 = v14;
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v36 = v15;
  if (v15)
  {
    uint64_t v16 = (atomic_ullong *)(v15 - 16);
    if (*((void *)&v35 + 1)) {
      uint64_t v16 = (atomic_ullong *)*((void *)&v35 + 1);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 >= a6)
  {
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      sub_2345D9D28(a1);
      if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v17 * a6) != -1)
      {
        if (a5)
        {
          sub_2345D9D28(a1);
          int v19 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (a5 - 1 + v17 * a6));
        }
        else
        {
          int v19 = v17;
        }
        if (a8 >= 1)
        {
          uint64_t v20 = 4 * v18 * a8;
          uint64_t v21 = 4 * v19 * a8;
          uint64_t v22 = a8;
          do
          {
            sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
            int v23 = *(_DWORD *)(v36 + v21);
            sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
            *(_DWORD *)(v38 + v20) = v23;
            v20 += 4;
            v21 += 4;
            --v22;
          }
          while (v22);
        }
        ++v18;
      }
      ++v17;
    }
    while (*(void *)a1 / a6 > v17);
  }
  unint64_t v24 = a6 + 1;
  if (a6 + 1 <= *(void *)a2)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 4 * a8 * (uint64_t)a3;
    do
    {
      sub_2345D9D28(a2);
      if (a8 >= 1)
      {
        uint64_t v27 = a8;
        uint64_t v28 = 4 * *(_DWORD *)(*((void *)a2 + 4) + 4 * (a5 + v25 * v24)) * a8;
        uint64_t v29 = v26;
        do
        {
          sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
          int v30 = *(_DWORD *)(v36 + v28);
          sub_2345F5790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37);
          *(_DWORD *)(v38 + v29) = v30;
          v29 += 4;
          v28 += 4;
          --v27;
        }
        while (v27);
      }
      ++v25;
      v26 += 4 * a8;
    }
    while (*(void *)a2 / v24 > v25);
  }
  sub_234636F80(v32, v37);
  sub_2345D9DC0((uint64_t)&v34);
  sub_2345D9DC0((uint64_t)v37);
}

void sub_234636284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2345D9DC0((uint64_t)va);
  sub_2345D9DC0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2346362C4(uint64_t a1)
{
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8);
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 16);
  unint64_t v5 = (uint64_t *)(a1 + 8);
  if (v4 == v3) {
    return;
  }
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v3);
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v7) {
    goto LABEL_12;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    MEMORY[0x237DC2530](v46, "faceVarying");
    uint64_t v10 = (atomic_uint *)(*(void *)(v7 + v8 + 72) & 0xFFFFFFFFFFFFFFF8);
    if (v10 == (atomic_uint *)(v46[0] & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    if ((v46[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v7 = *v5;
LABEL_11:
    ++v9;
    v8 += 88;
    if (0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 16) - v7) >> 3) <= v9) {
      goto LABEL_12;
    }
  }
  uint64_t v7 = *v5;
  uint64_t v11 = *(void *)(*v5 + v8 + 16);
  if ((v46[0] & 7) != 0)
  {
    atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
    uint64_t v7 = *v5;
  }
  if (v11) {
    goto LABEL_11;
  }
  for (uint64_t i = *(void *)(a1 + 16); v7 != i; v7 += 88)
    sub_2346327F8(v7, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32), (unsigned int *)(a1 + 72));
  if (*(void *)(a1 + 72))
  {
    unint64_t v35 = 0;
    do
    {
      sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 72));
      *(_DWORD *)(*(void *)(a1 + 104) + 4 * v35) = v35;
      ++v35;
    }
    while (*(void *)(a1 + 72) > v35);
  }
LABEL_12:
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v36 = (unint64_t *)(a1 + 72);
  sub_234633DE4(v46, v5, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 72), (uint64_t *)&v43);
  if (v44 - (void)v43 == 40)
  {
    unsigned int v12 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)*v5);
    uint64_t v13 = *(unsigned char **)(a1 + 8);
    uint64_t v14 = *(unsigned char **)(a1 + 16);
    if (v13 != v14)
    {
      unsigned int v15 = v12;
      uint64_t v16 = v13 + 72;
      do
      {
        MEMORY[0x237DC2530](v42, "constant");
        uint64_t v17 = *(void *)v16;
        int v18 = (atomic_uint *)(*(void *)v42 & 0xFFFFFFFFFFFFFFF8);
        if ((v42[0] & 7) != 0) {
          atomic_fetch_add_explicit(v18, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v17 & 0xFFFFFFFFFFFFFFF8) == v18) {
          sub_2346338C8((uint64_t)(v16 - 72), v15);
        }
        MEMORY[0x237DC2530](v42, "vertex");
        if (v16 == v42)
        {
          uint64_t v19 = *(void *)v42;
        }
        else
        {
          if ((*(void *)v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v19 = 0;
          *(void *)uint64_t v16 = *(void *)v42;
          *(void *)int v42 = 0;
        }
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_2345DA898((void *)v16 - 7);
        uint64_t v20 = v16 + 16;
        v16 += 88;
      }
      while (v20 != v14);
    }
  }
  else
  {
    memset(v42, 0, sizeof(v42));
    sub_2345D7A70((uint64_t)v42, *v36);
    uint64_t v41 = 0;
    memset(v40, 0, sizeof(v40));
    uint64_t v39 = 0;
    memset(v38, 0, sizeof(v38));
    int v37 = 0;
    sub_2346344AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v42, (unint64_t *)v40, v38, &v43, NumElements, &v37);
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = *(_DWORD ***)(a1 + 16);
    if ((_DWORD **)v21 != v22)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (uint64_t)v43) >> 3);
      uint64_t v25 = *(void *)&v38[0] / (v24 + 1) + v37;
      unint64_t v26 = (int)v24;
      uint64_t v27 = (unint64_t *)(v21 + 72);
      do
      {
        sub_2345D9D28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
        sub_234634C10((uint64_t)(v27 - 9), *(_DWORD *)(v47 + v23), v37, v25, v26, v40, v38);
        MEMORY[0x237DC2530](v49, "vertex");
        if (v27 == (unint64_t *)v49)
        {
          unint64_t v28 = (unint64_t)v49[0];
        }
        else
        {
          if ((*v27 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v28 = 0;
          *uint64_t v27 = (unint64_t)v49[0];
          v49[0] = 0;
        }
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_2345DA898(v27 - 7);
        v23 += 4;
        uint64_t v29 = (_DWORD **)(v27 + 2);
        v27 += 11;
      }
      while (v29 != v22);
    }
    unint64_t v30 = *v36;
    int v48 = 0;
    v49[0] = &v48;
    sub_2345DA8E4((unint64_t *)v42, v30, v49);
    uint64_t v31 = *(void *)(a1 + 88);
    long long v32 = *(_OWORD *)v36;
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v42;
    *(void *)(a1 + 88) = *(void *)&v42[16];
    *(_OWORD *)int v42 = v32;
    *(void *)&v42[16] = v31;
    long long v33 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)&v42[24];
    *(_OWORD *)&v42[24] = v33;
    sub_2345D9DC0((uint64_t)v38);
    sub_2345D9DC0((uint64_t)v40);
    sub_2345D9DC0((uint64_t)v42);
  }
  *(void *)int v42 = &v43;
  sub_2346375BC((void ***)v42);
  sub_2345D9DC0((uint64_t)v46);
}

void sub_23463671C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  a23 = (void **)&a28;
  sub_2346375BC(&a23);
  sub_2345D9DC0((uint64_t)&a31);
  _Unwind_Resume(a1);
}

__n128 sub_234636794(uint64_t *a1, __n128 *a2)
{
  if ((sub_2345DF4E8((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_23463684C((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_234636920(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_234636834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23463684C(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_2345DABF4((uint64_t)v2, a1);
  *(void *)(a1 + 8) = off_26E763C68;
  sub_2345DEAC0();
}

void sub_2346368E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_234636920(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345F9EE0(a1);
}

__n128 sub_2346369B4(uint64_t *a1, __n128 *a2)
{
  if ((sub_2345EE560((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_234636A6C((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_2346130D4(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_234636A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_234636A6C(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_2345DABF4((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26E763690;
  sub_2345F54A8();
}

void sub_234636B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_234636B40(uint64_t *a1, __n128 *a2)
{
  if ((sub_2345EF978((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_234636BF8((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_234636CCC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_234636BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_234636BF8(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_2345DABF4((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26E7626E0;
  sub_2345DEAC0();
}

void sub_234636C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_234636CCC(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345E0188(a1);
}

__n128 sub_234636D60(uint64_t *a1, __n128 *a2)
{
  if ((sub_2345EF32C((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_234636E18((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_234636EEC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_234636E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_234636E18(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_2345DABF4((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26E763BB0;
  sub_2345F97E0();
}

void sub_234636EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_234636EEC(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345F9714(a1);
}

__n128 sub_234636F80(uint64_t *a1, __n128 *a2)
{
  if ((sub_2345EE7C8((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_234637038((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_23463710C(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_234637020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_234637038(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_2345DABF4((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26E763748;
  sub_2345F54A8();
}

void sub_2346370D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_2345D8224(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23463710C(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2345DAAE4(a1, v4);
    sub_2345DAC58((uint64_t)v4);
  }
  return sub_2345F5B88(a1);
}

uint64_t sub_2346371A0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_234637218((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_234637218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  uint64_t v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      uint64_t v9 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        long long v10 = (atomic_ullong *)(v9 - 16);
        if (*(void *)(v7 - 16)) {
          long long v10 = *(atomic_ullong **)(v7 - 16);
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v16 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((void *)&v16 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_2346372D4((uint64_t)v13);
  return v11;
}

uint64_t sub_2346372D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_23463730C((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_23463730C(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_234637384(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_234637384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    sub_2345D9DC0(result);
    uint64_t result = *(void *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_2346373D8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_234637410(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 40;
    sub_2345D9DC0(v4 - 40);
  }
}

void sub_234637454(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2345D9E40(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2345D9DC0(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_2346375BC(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_234637610((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_234637610(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; sub_2345D9DC0(i))
    i -= 40;
  *(void *)(a1 + 8) = a2;
}

void sub_234637660()
{
}

void sub_23463768C()
{
  sub_23460A0E4();
  sub_23460A0C8(&dword_2345D4000, v0, v1, "USDKit failed to initialize USD, cannot create a USKScene.", v2, v3, v4, v5, v6);
}

uint64_t sub_2346376C0(uint64_t a1)
{
  uint64_t result = sub_23460A0B4(a1);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_234637700()
{
}

void sub_23463772C()
{
}

void sub_234637758()
{
}

void sub_234637784()
{
  __assert_rtn("DegenPrologue", "mikktspace.c", 1808, "iNrTrianglesIn == t");
}

void sub_2346377B0()
{
  __assert_rtn("GenerateSharedVerticesIndexList", "mikktspace.c", 536, "piHashCount2[k] == piHashCount[k]");
}

void sub_2346377DC()
{
}

void sub_234637808()
{
  __assert_rtn("GenerateInitialVerticesIndexList", "mikktspace.c", 865, "iDstTriIndex<=iNrTrianglesIn");
}

void sub_234637834()
{
}

void sub_234637860()
{
}

void sub_23463788C()
{
  __assert_rtn("Build4RuleGroups", "mikktspace.c", 1117, "iOffset <= iNrMaxGroups");
}

void sub_2346378B8()
{
}

void sub_2346378E4()
{
}

void sub_234637910()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1337, "pTS_out->iCounter==0");
}

void sub_23463793C()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1328, "((pTriInfos[f].iFlag&ORIENT_PRESERVING)!=0) == pGroup->bOrientPreservering");
}

void sub_234637968()
{
  __assert_rtn("EvalTspace", "mikktspace.c", 1382, "i>=0 && i<3");
}

void sub_234637994()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1295, "bFound || l==iUniqueSubGroups");
}

void sub_2346379C0()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1270, "f!=t || bSameOrgFace");
}

void sub_2346379EC()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1236, "iVertIndex==pGroup->iVertexRepresentitive");
}

void sub_234637A18()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1233, "index>=0 && index<3");
}

void sub_234637A44()
{
  __assert_rtn("MakeIndex", "mikktspace.c", 174, "iVert>=0 && iVert<4 && iFace>=0");
}

void sub_234637A70()
{
}

void sub_234637A9C()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 648, "iL>=iL_in && iL<=iR_in");
}

void sub_234637AC8()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 670, "iL==(iR+1) || (iL==iR)");
}

void sub_234637AF4()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 654, "iR>=iL_in && iR<=iR_in");
}

void sub_234637B20()
{
}

void sub_234637B4C()
{
}

void sub_234637B78()
{
}

void sub_234637BA4()
{
  __assert_rtn("AssignRecur", "mikktspace.c", 1143, "i>=0 && i<3");
}

void sub_234637BD0()
{
  __assert_rtn("QuickSort", "mikktspace.c", 1458, "n>=0");
}

void sub_234637BFC()
{
}

void NSLog(NSString *format, ...)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double a2)
{
  return MEMORY[0x270FA3060](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  return MEMORY[0x270FA30E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End()
{
  return MEMORY[0x270FA3168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin()
{
  return MEMORY[0x270FA3170]();
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOut()
{
  return MEMORY[0x270FA31E0]();
}

{
  return MEMORY[0x270FA31E8]();
}

{
  return MEMORY[0x270FA31F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath()
{
  return MEMORY[0x270FA3208]();
}

{
  return MEMORY[0x270FA3210]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(pxrInternal__aapl__pxrReserved__::SdfAssetPath *this)
{
  return MEMORY[0x270FA3218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, const char *a2)
{
  return MEMORY[0x270FA3250](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x270FA32A0](this);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA32F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets()
{
  return MEMORY[0x270FA3398]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets()
{
  return MEMORY[0x270FA33A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateUniqueGeomSubset()
{
  return MEMORY[0x270FA33B8]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference()
{
  return MEMORY[0x270FA33C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::ClearReferences(pxrInternal__aapl__pxrReserved__::UsdReferences *this)
{
  return MEMORY[0x270FA33D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA33F0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  return MEMORY[0x270FA33F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
{
  return MEMORY[0x270FA3400]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant()
{
  return MEMORY[0x270FA3420]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection()
{
  return MEMORY[0x270FA3428]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x270FA3430](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this, double a2, double a3)
{
  return MEMORY[0x270FA3440](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext()
{
  return MEMORY[0x270FA3468]();
}

void pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext(pxrInternal__aapl__pxrReserved__::UsdEditContext *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
{
  return MEMORY[0x270FA3490]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput()
{
  return MEMORY[0x270FA34A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput()
{
  return MEMORY[0x270FA34B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader()
{
  return MEMORY[0x270FA34E0]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet()
{
  return MEMORY[0x270FA3510]();
}

uint64_t pxrInternal__aapl__pxrReserved__::usd_initialize()
{
  return MEMORY[0x270FA3518]();
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetDemangled(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  return MEMORY[0x270FA3580](this, a2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsRelativePath()
{
  return MEMORY[0x270FA35A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  return MEMORY[0x270FA3608](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery()
{
  return MEMORY[0x270FA3618]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return MEMORY[0x270FA3620](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOutArray()
{
  return MEMORY[0x270FA3660]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery()
{
  return MEMORY[0x270FA3688]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo()
{
  return MEMORY[0x270FA36D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const TfToken *a2)
{
  return MEMORY[0x270FA36E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA3710](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper()
{
  return MEMORY[0x270FA3750]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  return MEMORY[0x270FA3768](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper()
{
  return MEMORY[0x270FA3800]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x270FA3808](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver()
{
  return MEMORY[0x270FA3828]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *this)
{
  return MEMORY[0x270FA3838](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()
{
  return MEMORY[0x270FA3860]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA3928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetTypeForValueTypeName(pxrInternal__aapl__pxrReserved__ *this, const TfToken *a2)
{
  return MEMORY[0x270FA3940](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return MEMORY[0x270FA3968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA3988](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  return MEMORY[0x270FA39B0](this);
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage()
{
  return MEMORY[0x270FA39D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this, const TfRefBase *a2)
{
  return MEMORY[0x270FA3A00](this, a2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return MEMORY[0x270FA3A28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage()
{
  return MEMORY[0x270FA3A40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer()
{
  return MEMORY[0x270FA3A48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA3A60](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::~UsdInteractivePreliminary_AnchoringAPI(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError()
{
  return MEMORY[0x270FA3A70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA3A78](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::~UsdPhysicsPreliminary_PhysicsColliderAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA3A88](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::~UsdPhysicsPreliminary_PhysicsMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x270FA3A98](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::~UsdPhysicsPreliminary_PhysicsRigidBodyAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetName()
{
  return MEMORY[0x270FA3AA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x270FA3AC8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath()
{
  return MEMORY[0x270FA3B60]();
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  return MEMORY[0x270FA3B98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, const char *a2)
{
  return MEMORY[0x270FA3BA0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken()
{
  return MEMORY[0x270FA3BB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA3BB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf(pxrInternal__aapl__pxrReserved__::VtValue *this, const VtValue *a2, const VtValue *a3)
{
  return MEMORY[0x270FA3BC8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const std::type_info *a3)
{
  return MEMORY[0x270FA3BD0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA3BD8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const std::type_info *a3)
{
  return MEMORY[0x270FA3BE0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous()
{
  return MEMORY[0x270FA3C30]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2)
{
  return MEMORY[0x270FA3CA0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath()
{
  return MEMORY[0x270FA3CB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x270FA3D58]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x270FA3D60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x270FA3D68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x270FA3D70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x270FA3D78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x270FA3D80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA3DC0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const SdfPath *a2)
{
  return MEMORY[0x270FA3DE8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory()
{
  return MEMORY[0x270FA3E00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const SdfPath *a2)
{
  return MEMORY[0x270FA3E18](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open()
{
  return MEMORY[0x270FA3E38]();
}

{
  return MEMORY[0x270FA3E48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(pxrInternal__aapl__pxrReserved__::UsdStage *this, const Usd_PrimFlagsPredicate *a2)
{
  return MEMORY[0x270FA3E68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateNew()
{
  return MEMORY[0x270FA3E78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<()
{
  return MEMORY[0x270FA3F90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset()
{
  return MEMORY[0x270FA40A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset()
{
  return MEMORY[0x270FA40A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==()
{
  return MEMORY[0x270FA40E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==()
{
  return MEMORY[0x270FA40E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x270FA41E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  return MEMORY[0x270FA4238](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4268](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4270](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections()
{
  return MEMORY[0x270FA4298]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples()
{
  return MEMORY[0x270FA42A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections()
{
  return MEMORY[0x270FA42B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
{
  return MEMORY[0x270FA42F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set()
{
  return MEMORY[0x270FA4308]();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4310](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4318](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA4320](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4378](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSpecifier(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4380](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, const SdfPath *a2)
{
  return MEMORY[0x270FA4388](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4390](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath()
{
  return MEMORY[0x270FA4398]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2)
{
  return MEMORY[0x270FA43C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA43D0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA43E0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA43E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA43F0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA44E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA44F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA44F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x270FA4578](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariant()
{
  return MEMORY[0x270FA4580]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext()
{
  return MEMORY[0x270FA4598]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==()
{
  return MEMORY[0x270FA45B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  return MEMORY[0x270FA4608](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetConnectedSource()
{
  return MEMORY[0x270FA4640]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4680](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4688](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4690](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet()
{
  return MEMORY[0x270FA46A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::HasVariantSet()
{
  return MEMORY[0x270FA46A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  return MEMORY[0x270FA46C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x270FA46C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x270FA46D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x270FA46D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()
{
  return MEMORY[0x270FA4708]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets()
{
  return MEMORY[0x270FA4710]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  return MEMORY[0x270FA4718](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4758](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4780](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()
{
  return MEMORY[0x270FA47A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeLocalToWorldTransform()
{
  return MEMORY[0x270FA47F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation()
{
  return MEMORY[0x270FA4800]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp()
{
  return MEMORY[0x270FA4808]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples()
{
  return MEMORY[0x270FA4818]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, BOOL *a2)
{
  return MEMORY[0x270FA4820](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x270FA4840](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaPropertySpec(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4978](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA4A10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4A50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, const char *a2, ...)
{
  return MEMORY[0x270FA4A70](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4AF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4B00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3)
{
  return MEMORY[0x270FA4BA0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x270FA4C28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeid(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x270FA4C30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4C58](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C68](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4CB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x270FA4DF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x270FA4E10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E30](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E40](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute()
{
  return MEMORY[0x270FA4EB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4ED0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4EF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4F00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties()
{
  return MEMORY[0x270FA4F30]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
{
  return MEMORY[0x270FA4F60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return MEMORY[0x270FA4F68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4F88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4F98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FB0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_FailGet()
{
  return MEMORY[0x270FA4FC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString()
{
  return MEMORY[0x270FA5018]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5078](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA50B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Save(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x270FA5110](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x270FA5148]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x270FA5150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==()
{
  return MEMORY[0x270FA5158]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x270FA5160]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x270FA5168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA5170](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA5180](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5188](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA5198](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA51D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5208](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5210](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata()
{
  return MEMORY[0x270FA5258]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Export()
{
  return MEMORY[0x270FA5260]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA5290](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA5298](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA52A0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA52A8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5300](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5308](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5310](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5320](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5328](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98790]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void free(void *a1)
{
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}