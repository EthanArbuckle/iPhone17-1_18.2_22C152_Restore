uint64_t dispatch thunk of UsoEntityBuilder_appleWriting_WritingAttribute.definedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleWriting_WritingAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PointOfInterestType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PointOfInterestType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PointOfInterestType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterestType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterestType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterestType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterestType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterestType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterestType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_TimeZone()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_TimeZone(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_TimeZone);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.pointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.setPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeZone.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonRelationship()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PersonRelationship(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PersonRelationship);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.relationshipType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.setRelationshipType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.setRelationshipTypeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.toPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.setToPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.fromPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonRelationship.setFromPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ActivationValue()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ActivationValue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ActivationValue);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActivationValue.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActivationValue.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActivationValue.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActivationValue.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActivationValue.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailState()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_EmailState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_EmailState);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailState.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailState.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailState.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailState.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailState.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ResponseStatus()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ResponseStatus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ResponseStatus);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ResponseStatus.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ResponseStatus.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ResponseStatus.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ResponseStatus.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ResponseStatus.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Color()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Color(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Color);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Color.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Color.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Color.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Color.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Color.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Color.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Email()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Email(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Email);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.ccRecipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addCcRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addCcRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.sender.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setSender(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.recipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.stringContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setStringContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setStringContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.labels.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addLabels(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addLabelsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addLabelsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.emailLabels.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addEmailLabels(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addEmailLabelsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.bccRecipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addBccRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addBccRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.emailFolder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setEmailFolder(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.provider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setProvider(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setProviderAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.emailState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setEmailState(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.settings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addSettings(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.addSettingsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.folder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setFolder(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setFolderAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.subject.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setSubject(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Email.setSubjectAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DeviceCategory()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DeviceCategory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DeviceCategory);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DeviceCategory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DeviceCategory.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DeviceCategory.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DeviceCategory.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DeviceCategory.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DeviceCategory.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DateTime()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DateTime(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DateTime);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.direction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setDirection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.offsetReference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setOffsetReference(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setOffsetReferenceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.date.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setDate(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setDateAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.time.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.offsetValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setOffsetValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setOffsetValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTime.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ReminderListType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ReminderListType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ReminderListType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReminderListType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReminderListType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReminderListType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReminderListType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReminderListType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReminderListType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_apple_PhotoMemory()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_apple_PhotoMemory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_apple_PhotoMemory);
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.people.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.addPeople(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.addPeopleListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.author.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setAuthor(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.pointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_apple_PhotoMemory.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriPossession()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriPossession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriPossession);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriPossession.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriPossession.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriPossession.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriPossession.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriPossession.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriPossession.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonSocialAction()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PersonSocialAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PersonSocialAction);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.person.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.setPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonSocialAction.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Journey()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Journey(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Journey);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.endPointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setEndPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.totalDistance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setTotalDistance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setTotalDistanceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.elapsedDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setElapsedDuration(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setElapsedDurationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.remainingDistance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setRemainingDistance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setRemainingDistanceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.startPointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setStartPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.remainingDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setRemainingDuration(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setRemainingDurationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.elapsedDistance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setElapsedDistance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setElapsedDistanceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.totalDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setTotalDuration(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Journey.setTotalDurationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Politeness()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Politeness(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Politeness);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Politeness.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Politeness.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Politeness.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Politeness.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Politeness.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Photo()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Photo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Photo);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.people.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.addPeople(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.addPeopleListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.author.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.setAuthor(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.pointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.setPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Photo.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppSubSection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AppSubSection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AppSubSection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppSubSection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppSubSection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppSubSection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppSubSection.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppSubSection.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppSubSection.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SizeDirection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SizeDirection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SizeDirection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SizeDirection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SizeDirection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SizeDirection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SizeDirection.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SizeDirection.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonMessage_MessageAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonMessage_MessageAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonMessage_MessageAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonMessage_MessageAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonMessage_MessageAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonMessage_MessageAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Salutation()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Salutation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Salutation);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Salutation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Salutation.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Salutation.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Salutation.phrase.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Salutation.setPhrase(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Salutation.setPhraseAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AdjustmentDirection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AdjustmentDirection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AdjustmentDirection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentDirection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentDirection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentDirection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Organization()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Organization(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Organization);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.specifyingContactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.setSpecifyingContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Organization.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonArithmetic_ArithmeticAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonArithmetic_ArithmeticAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonArithmetic_ArithmeticAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonArithmetic_ArithmeticAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonArithmetic_ArithmeticAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonArithmetic_ArithmeticAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MultipliedNumber()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MultipliedNumber(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MultipliedNumber);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.multiplier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setMultiplier(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MultipliedNumber.setMultiplierAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementCategory()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MeasurementCategory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MeasurementCategory);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementCategory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementCategory.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementCategory.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementCategory.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementCategory.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementCategory.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CarSetting()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CarSetting(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CarSetting);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.device.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.setDevice(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.associatedSetting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.setAssociatedSetting(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarSetting.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_TimeUnit()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_TimeUnit(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_TimeUnit);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.secondaryUnit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.setSecondaryUnit(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TimeUnit.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AdjustmentType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AdjustmentType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AdjustmentType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AdjustmentType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SportsItemType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SportsItemType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SportsItemType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SportsItemType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SportsItemType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SportsItemType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SportsItemType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SportsItemType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SportsItemType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_OffsetDirection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_OffsetDirection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_OffsetDirection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDirection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDirection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDirection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDirection.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDirection.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Tapback()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Tapback(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Tapback);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tapback.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Interjection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Interjection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Interjection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.politeness.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.setPoliteness(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Interjection.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_FavoriteCategory()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_FavoriteCategory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_FavoriteCategory);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteCategory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteCategory.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteCategory.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteCategory.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteCategory.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteCategory.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Event()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Event(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Event);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.allDay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setAllDay(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.location.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setLocation(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.pointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Event.setPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MedicationEvent()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MedicationEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MedicationEvent);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.completionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setCompletionStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.medicationSchedule.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setMedicationSchedule(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationEvent.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_RecurringDateTime()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_RecurringDateTime(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_RecurringDateTime);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.totalNumberOfOccurrences.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setTotalNumberOfOccurrences(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setTotalNumberOfOccurrencesAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.recurrenceDateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setRecurrenceDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.contiguousToDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setContiguousToDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setContiguousToDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.contiguousFromDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setContiguousFromDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setContiguousFromDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.recurrenceDateTimes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.addRecurrenceDateTimes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.addRecurrenceDateTimesAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.addRecurrenceDateTimesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.recurrencePeriod.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setRecurrencePeriod(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setRecurrencePeriodAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecurringDateTime.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Date()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Date(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Date);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.dayOfWeek.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setDayOfWeek(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.weekOfYear.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setWeekOfYear(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setWeekOfYearAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.calendarEra.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setCalendarEra(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.calendarSystem.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setCalendarSystem(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.monthOfYear.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setMonthOfYear(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.year.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setYear(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setYearAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.partOfRecurringDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setPartOfRecurringDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.dateType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.addDateType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.addDateTypeListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.dayOfMonth.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setDayOfMonth(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setDayOfMonthAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Date.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MessageState()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MessageState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MessageState);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageState.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageState.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageState.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageState.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageState.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Message()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Message(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Message);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.ccRecipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addCcRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addCcRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.labels.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addLabels(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addLabelsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.messageState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setMessageState(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addAttachments(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addAttachmentsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.recipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.stringContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setStringContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setStringContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.tapbacks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addTapbacks(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addTapbacksListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.settings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addSettings(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addSettingsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.messageType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setMessageType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.summaryMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setSummaryMode(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.trigger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setTrigger(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.sender.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setSender(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.mode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setMode(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.folder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setFolder(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.messageLanguage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setMessageLanguage(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.bccRecipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addBccRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.addBccRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.subject.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setSubject(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 920))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Message.setSubjectAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MedicationSchedule()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MedicationSchedule(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MedicationSchedule);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.medications.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.addMedications(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.addMedicationsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.schedule.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setSchedule(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.person.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.active.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setActive(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.scheduleType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setScheduleType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MedicationSchedule.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_OffsetDate()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_OffsetDate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_OffsetDate);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.dayOfWeek.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setDayOfWeek(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.direction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setDirection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.weekOfYear.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setWeekOfYear(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setWeekOfYearAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.offsetReference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setOffsetReference(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setOffsetReferenceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.calendarEra.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setCalendarEra(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.calendarSystem.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setCalendarSystem(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.monthOfYear.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setMonthOfYear(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.year.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setYear(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setYearAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.partOfRecurringDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setPartOfRecurringDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.offsetValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setOffsetValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setOffsetValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.dateType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.addDateType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.addDateTypeListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.dayOfMonth.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setDayOfMonth(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDate.setDayOfMonthAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaCapture()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaCapture(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MediaCapture);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.mode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.setMode(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.settings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.addSettings(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCapture.addSettingsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Duration()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Duration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Duration);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.components.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.addComponents(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.addComponentsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.sign.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.setSign(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Duration.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Payment()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Payment(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Payment);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.sender.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setSender(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.payer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setPayer(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.recipient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setRecipient(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.memo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setMemo(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setMemoAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.payee.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setPayee(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.amount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setAmount(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setAmountAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.amountDue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setAmountDue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setAmountDueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.transactionDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setTransactionDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setTransactionDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.dueDate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setDueDate(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Payment.setDueDateAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AllDay()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AllDay(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AllDay);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AllDay.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AllDay.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AllDay.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AllDay.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AllDay.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_VoiceCommand()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_VoiceCommand(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_VoiceCommand);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailLabel()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_EmailLabel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_EmailLabel);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailLabel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailLabel.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailLabel.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailLabel.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailLabel.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailLabel.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Car()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Car(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Car);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.productCategories.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addProductCategories(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addProductCategoriesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.associatedUserEntities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addAssociatedUserEntities(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addAssociatedUserEntitiesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.deviceCategory.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setDeviceCategory(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.model.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setModel(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.setModelAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.properties.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addProperties(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addPropertiesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.types.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addTypes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Car.addTypesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MixedFraction()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MixedFraction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MixedFraction);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.numeratorValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setNumeratorValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setNumeratorValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.sign.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setSign(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.wholeValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setWholeValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setWholeValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.denominatorValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setDenominatorValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MixedFraction.setDenominatorValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ReferenceType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ReferenceType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ReferenceType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleAlarm_AlarmAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_appleAlarm_AlarmAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_appleAlarm_AlarmAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_appleAlarm_AlarmAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleAlarm_AlarmAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleAlarm_AlarmAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleAlarm_AlarmAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleAlarm_AlarmAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_FavoriteInstance()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_FavoriteInstance(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_FavoriteInstance);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteInstance.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteInstance.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteInstance.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteInstance.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteInstance.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FavoriteInstance.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Uri()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Uri(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Uri);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.label.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.setLabel(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Uri.setLabelAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriSocialAction()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriSocialAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriSocialAction);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriSocialAction.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriSocialAction.action.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriSocialAction.setAction(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriSocialAction.setActionAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriSocialAction.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriSocialAction.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MessageLabel()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MessageLabel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MessageLabel);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageLabel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageLabel.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageLabel.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageLabel.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageLabel.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageLabel.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CompletionStatus()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CompletionStatus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CompletionStatus);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CompletionStatus.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CompletionStatus.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CompletionStatus.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CompletionStatus.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CompletionStatus.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CurrencyAmount()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CurrencyAmount(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CurrencyAmount);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.currency.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setCurrency(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.amount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmount(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmountAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaItemType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaItemType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MediaItemType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailProvider()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_EmailProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_EmailProvider);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailProvider.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailProvider.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailProvider.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailProvider.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailProvider.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Geolocation()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Geolocation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Geolocation);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.containedIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.setContainedIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Geolocation.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonFindMy_DeviceAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonFindMy_DeviceAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonFindMy_DeviceAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonFindMy_DeviceAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonFindMy_DeviceAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonFindMy_DeviceAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Contact()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Contact(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Contact);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Contact.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Contact.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Contact.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Contact.contactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Contact.setContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEventTrigger_EventTriggerAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonCalendarEvent_CalendarEventAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonCalendarEvent_CalendarEventAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonCalendarEvent_CalendarEventAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonCalendarEvent_CalendarEventAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonCalendarEvent_CalendarEventAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonCalendarEvent_CalendarEventAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_VoiceCommandPayload(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_VoiceCommandPayload);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.appEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAppEntity(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.app.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setApp(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.number.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setNumber(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setNumberAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.agent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAgent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.currency.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setCurrency(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setCurrencyAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.userEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setUserEntity(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.measurement.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setMeasurement(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setMeasurementAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.stringValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.contactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.query.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setQuery(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setQueryAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppEntityType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AppEntityType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AppEntityType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppEntityType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppEntityType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppEntityType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppEntityType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppEntityType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppEntityType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PointOfInterest()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PointOfInterest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PointOfInterest);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.distance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setDistance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setDistanceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.containedIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setContainedIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.address.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.categories.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.addCategories(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.addCategoriesAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.addCategoriesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PointOfInterest.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SocialInterjection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SocialInterjection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SocialInterjection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialInterjection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialInterjection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialInterjection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialInterjection.phrase.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialInterjection.setPhrase(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialInterjection.setPhraseAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SafetySession()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SafetySession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SafetySession);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.completed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.setCompleted(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.trigger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.setTrigger(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.workout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.setWorkout(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SafetySession.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_KnowledgeQuestion()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_KnowledgeQuestion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_KnowledgeQuestion);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.question.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.setQuestion(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.setQuestionAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.arguments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.addArguments(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestion.addArgumentsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DateTimeRangeQualifier()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DateTimeRangeQualifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DateTimeRangeQualifier);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTimeRangeQualifier.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTimeRangeQualifier.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTimeRangeQualifier.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTimeRangeQualifier.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateTimeRangeQualifier.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailAddress()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_EmailAddress(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_EmailAddress);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.label.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setLabel(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setLabelAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CarProfile()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CarProfile(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CarProfile);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarProfile.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarProfile.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarProfile.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarProfile.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarProfile.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CarProfile.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Tag()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Tag(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Tag);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tag.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tag.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tag.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tag.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tag.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Tag.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaItemRelationshipType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaItemRelationshipType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MediaItemRelationshipType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemRelationshipType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemRelationshipType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemRelationshipType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemRelationshipType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemRelationshipType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_KnowledgeQuestionAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_KnowledgeQuestionAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_KnowledgeQuestionAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionAttribute.surfaceForm.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionAttribute.setSurfaceForm(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionAttribute.setSurfaceFormAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Measurement()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Measurement(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Measurement);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.components.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.addComponents(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.addComponentsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.sign.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.setSign(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Compass()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Compass(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Compass);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.bearing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setBearing(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setBearingAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.elevation.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setElevation(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setElevationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.heading.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setHeading(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setHeadingAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.geoCoordinates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setGeoCoordinates(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Compass.setGeoCoordinatesAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Reminder()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Reminder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Reminder);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.completionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setCompletionStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.childReminders.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addChildReminders(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addChildRemindersListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.stringContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setStringContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setStringContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.settings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addSettings(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addSettingsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.list.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setList(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addAttachments(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addAttachmentsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.assignee.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setAssignee(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.trigger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setTrigger(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.tags.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addTags(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.addTagsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Reminder.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Participant()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Participant(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Participant);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.person.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.setPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.role.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.setRole(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.responseStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.setResponseStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.requiredStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Participant.setRequiredStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_LocalBusiness()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_LocalBusiness(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_LocalBusiness);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.specifyingContactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setSpecifyingContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.containedIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setContainedIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.address.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.categories.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.addCategories(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.addCategoriesAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalBusiness.addCategoriesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppAction()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AppAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AppAction);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.associatedAppEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.setAssociatedAppEntity(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppAction.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_WorkoutClass()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_WorkoutClass(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_WorkoutClass);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.episodeNumber.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setEpisodeNumber(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setEpisodeNumberAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.equipment.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setEquipment(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.associatedMediaItem.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setAssociatedMediaItem(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.duration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setDuration(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setDurationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.instructor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setInstructor(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_WorkoutClass.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_FindMyStatus()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_FindMyStatus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_FindMyStatus);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FindMyStatus.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FindMyStatus.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FindMyStatus.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonNotebook_NotebookItemType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonNotebook_NotebookItemType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonNotebook_NotebookItemType);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookItemType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookItemType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookItemType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookItemType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookItemType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NotificationAction()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_NotificationAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_NotificationAction);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.associatedNotification.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.setAssociatedNotification(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationAction.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Language()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Language(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Language);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.associatedGeographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.setAssociatedGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Language.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementQualifier()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MeasurementQualifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MeasurementQualifier);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementQualifier.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementQualifier.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementQualifier.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementQualifier.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementQualifier.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonApp_AppAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonApp_AppAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonApp_AppAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonApp_AppAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonApp_AppAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Setting()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Setting(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Setting);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.device.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.setDevice(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.associatedSetting.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.setAssociatedSetting(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Setting.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_uso_NoEntity()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_uso_NoEntity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_uso_NoEntity);
}

uint64_t dispatch thunk of UsoEntityBuilder_uso_NoEntity.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_uso_NoEntity.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_uso_NoEntity.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_UserSocialAction()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_UserSocialAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_UserSocialAction);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserSocialAction.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserSocialAction.action.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserSocialAction.setAction(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserSocialAction.setActionAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserSocialAction.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserSocialAction.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Alarm()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Alarm(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Alarm);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.timeRemaining.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setTimeRemaining(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setTimeRemainingAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.endDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setEndDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setEndDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.recurringDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setRecurringDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Alarm.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SettingValueType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SettingValueType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SettingValueType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SettingValueType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SettingValueType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SettingValueType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SettingValueType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_UserProperty()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_UserProperty(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_UserProperty);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProperty.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProperty.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProperty.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProperty.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProperty.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProperty.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementUnitType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MeasurementUnitType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MeasurementUnitType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnitType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnitType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnitType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnitType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnitType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_StopWatch()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_StopWatch(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_StopWatch);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.lap.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.setLap(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_StopWatch.setLapAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MessageMode()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MessageMode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MessageMode);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageMode.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageMode.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageMode.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageMode.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageMode.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Note()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Note(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Note);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.completionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setCompletionStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.addAttachments(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.addAttachmentsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.stringContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setStringContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setStringContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.settings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.addSettings(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.addSettingsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.folder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setFolder(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.tags.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.addTags(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.addTagsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Note.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EasterEgg()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_EasterEgg(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_EasterEgg);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EasterEgg.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EasterEgg.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EasterEgg.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EasterEgg.phrase.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EasterEgg.setPhrase(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EasterEgg.setPhraseAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonUserEntity_UserEntityAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonUserEntity_UserEntityAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonUserEntity_UserEntityAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonUserEntity_UserEntityAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonUserEntity_UserEntityAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonUserEntity_UserEntityAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonUserEntity_UserEntityAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonUserEntity_UserEntityAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CalendarEvent()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CalendarEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CalendarEvent);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.allDay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setAllDay(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.attendees.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.addAttendees(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.addAttendeesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.pointOfInterest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setPointOfInterest(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.virtualLocation.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setVirtualLocation(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.note.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setNote(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setNoteAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.location.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setLocation(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.associatedCalendar.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setAssociatedCalendar(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.responseStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEvent.setResponseStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DailyBriefing()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DailyBriefing(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DailyBriefing);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.items.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.addItems(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.addItemsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DailyBriefing.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SpatialDirection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SpatialDirection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SpatialDirection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SpatialDirection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SpatialDirection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SpatialDirection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SpatialDirection.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SpatialDirection.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppIntent()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AppIntent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AppIntent);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppIntent.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppIntent.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppIntent.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppIntent.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppIntent.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppIntent.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ScheduleType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ScheduleType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ScheduleType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ScheduleType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ScheduleType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ScheduleType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ScheduleType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ScheduleType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MessageType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MessageType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MessageType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NotebookItem()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_NotebookItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_NotebookItem);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.notebookList.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setNotebookList(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.dateTimeCreated.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setDateTimeCreated(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setDateTimeCreatedAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.content.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.trigger.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setTrigger(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.dateTimeModified.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setDateTimeModified(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setDateTimeModifiedAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.itemType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookItem.setItemType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Writing()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Writing(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Writing);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.topics.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addTopics(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addTopicsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addTopicsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.identifyingVerseContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.setIdentifyingVerseContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.setIdentifyingVerseContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.authors.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addAuthors(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addAuthorsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Writing.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_OpinionTopic()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_OpinionTopic(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_OpinionTopic);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OpinionTopic.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OpinionTopic.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OpinionTopic.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OpinionTopic.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OpinionTopic.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OpinionTopic.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Age()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Age(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Age);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.referenceDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setReferenceDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setReferenceDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.unit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setUnit(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Age.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t type metadata accessor for UsoEntityBuilder_uso_NLv3UnknownEntity()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_uso_NLv3UnknownEntity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_uso_NLv3UnknownEntity);
}

uint64_t dispatch thunk of UsoEntityBuilder_uso_NLv3UnknownEntity.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_uso_NLv3UnknownEntity.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_uso_NLv3UnknownEntity.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Ingredient()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Ingredient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Ingredient);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.amount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.setAmount(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.setAmountAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Ingredient.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriAlias()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriAlias(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriAlias);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.alias.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.setAlias(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.setAliasAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriAlias.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_OffsetDateTime()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_OffsetDateTime(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_OffsetDateTime);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.direction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setDirection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.offsetReference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setOffsetReference(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setOffsetReferenceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.date.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setDate(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setDateAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.time.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.offsetValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setOffsetValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetDateTime.setOffsetValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Window()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Window(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Window);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Window.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Window.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Window.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Window.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Window.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Window.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Number()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Number(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Number);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Number.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_TapbackType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_TapbackType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_TapbackType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TapbackType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TapbackType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TapbackType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TapbackType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TapbackType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TapbackType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Quantifier()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Quantifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Quantifier);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.count.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.setCount(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.setCountAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Quantifier.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Size()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Size(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Size);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Size.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Size.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Size.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Size.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Size.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Size.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Translation()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Translation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Translation);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.targetString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.setTargetString(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.sourceString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Translation.setSourceString(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Locale()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Locale(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Locale);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Locale.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppGenre()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AppGenre(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AppGenre);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppGenre.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppGenre.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppGenre.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppGenre.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppGenre.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppGenre.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ActiveType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ActiveType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ActiveType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActiveType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActiveType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActiveType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActiveType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ActiveType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailFolder()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_EmailFolder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_EmailFolder);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.provider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailFolder.setProvider(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_RequiredStatus()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_RequiredStatus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_RequiredStatus);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RequiredStatus.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RequiredStatus.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RequiredStatus.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RequiredStatus.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RequiredStatus.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DateType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DateType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DateType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.religion.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.setReligion(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DateType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_OffsetTime()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_OffsetTime(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_OffsetTime);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.direction.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setDirection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.hour.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setHour(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setHourAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.offsetReference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setOffsetReference(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.second.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setSecond(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setSecondAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.timeZone.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setTimeZone(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.offsetValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setOffsetValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setOffsetValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.minute.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setMinute(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_OffsetTime.setMinuteAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaItem()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MediaItem);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.completionStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setCompletionStatus(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.timeRemaining.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setTimeRemaining(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setTimeRemainingAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.associatedMediaItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.addAssociatedMediaItems(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.addAssociatedMediaItemsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.lyrics.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setLyrics(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setLyricsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.mediaItemVersion.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setMediaItemVersion(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.relationshipType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setRelationshipType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.playbackState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setPlaybackState(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.mediaItemType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setMediaItemType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.totalDuration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setTotalDuration(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItem.setTotalDurationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Meridiem()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Meridiem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Meridiem);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Meridiem.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Meridiem.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Meridiem.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Meridiem.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Meridiem.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleNotebook_NotebookAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_appleNotebook_NotebookAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_appleNotebook_NotebookAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotebook_NotebookAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotebook_NotebookAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotebook_NotebookAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotebook_NotebookAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotebook_NotebookAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_QRCode()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_QRCode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_QRCode);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_QRCode.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_QRCode.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_QRCode.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_QRCode.qrCodeType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_QRCode.setQrCodeType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleEmail_EmailAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_appleEmail_EmailAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_appleEmail_EmailAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_appleEmail_EmailAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleEmail_EmailAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleEmail_EmailAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleEmail_EmailAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleEmail_EmailAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_UserProfile()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_UserProfile(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_UserProfile);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.person.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.setPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserProfile.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppState()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AppState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AppState);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppState.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppState.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppState.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppState.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AppState.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Communication()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Communication(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Communication);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.sender.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.setSender(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.recipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.addRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Communication.addRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DigitalFace()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DigitalFace(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DigitalFace);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DigitalFace.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DigitalFace.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DigitalFace.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DigitalFace.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DigitalFace.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DigitalFace.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PlaybackState()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PlaybackState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PlaybackState);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PlaybackState.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PlaybackState.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PlaybackState.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PlaybackState.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PlaybackState.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleNotification_NotificationAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_appleNotification_NotificationAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_appleNotification_NotificationAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotification_NotificationAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotification_NotificationAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotification_NotificationAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotification_NotificationAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleNotification_NotificationAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Device()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Device(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Device);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.productCategories.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.addProductCategories(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.addProductCategoriesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.deviceCategory.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setDeviceCategory(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.model.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setModel(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.setModelAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.properties.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.addProperties(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Device.addPropertiesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CalendarEventType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CalendarEventType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CalendarEventType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEventType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEventType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEventType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEventType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEventType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_HolidayPhrase()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_HolidayPhrase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_HolidayPhrase);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HolidayPhrase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HolidayPhrase.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HolidayPhrase.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HolidayPhrase.phrase.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HolidayPhrase.setPhrase(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HolidayPhrase.setPhraseAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaCaptureMode()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaCaptureMode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MediaCaptureMode);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCaptureMode.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCaptureMode.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCaptureMode.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCaptureMode.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaCaptureMode.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Announcement()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Announcement(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Announcement);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.content.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.setContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.setContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.recipients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.addRecipients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Announcement.addRecipientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_IngredientSubstitution()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_IngredientSubstitution(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_IngredientSubstitution);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.toIngredient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.setToIngredient(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.fromIngredient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_IngredientSubstitution.setFromIngredient(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_GeographicArea()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_GeographicArea(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_GeographicArea);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.containing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setContaining(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.areaType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setAreaType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setAreaTypeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.contains.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setContains(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.containedIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setContainedIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Agent()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Agent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Agent);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t _s12SiriOntology027UsoEntityBuilder_commonApp_G9AttributeC9usoSameAsAA0cde9Protocol_fg1_gH0_pSgvgTj_0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.specifyingContactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.setSpecifyingContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Agent.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_RadioBand()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_RadioBand(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_RadioBand);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioBand.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioBand.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioBand.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioBand.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioBand.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_RecipeStep()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_RecipeStep(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_RecipeStep);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.timeRemaining.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setTimeRemaining(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setTimeRemainingAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.timeRequired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setTimeRequired(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setTimeRequiredAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setDescription(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setDescriptionAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.ingredients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.addIngredients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.addIngredientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.associatedRecipe.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setAssociatedRecipe(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.substitutions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.addSubstitutions(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.addSubstitutionsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RecipeStep.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MicroGeographicArea()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MicroGeographicArea(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MicroGeographicArea);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.areaType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setAreaType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setAreaTypeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.contains.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setContains(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.containedIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setContainedIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.associatedPeople.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.addAssociatedPeople(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.addAssociatedPeopleListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MicroGeographicArea.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonStock_StockType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonStock_StockType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonStock_StockType);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_FormattedString()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_FormattedString(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_FormattedString);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FormattedString.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FormattedString.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FormattedString.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t _s12SiriOntology40UsoEntityBuilder_common_SettingValueTypeC07definedH0AA0c7DefinedhE0CSgvgTj_0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FormattedString.setStringContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_FormattedString.setStringContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_UserPossession()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_UserPossession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_UserPossession);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserPossession.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserPossession.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserPossession.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserPossession.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserPossession.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserPossession.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriContentTopic()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriContentTopic(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriContentTopic);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentTopic.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentTopic.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentTopic.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentTopic.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentTopic.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentTopic.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ZoomDirection()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ZoomDirection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ZoomDirection);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ZoomDirection.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ZoomDirection.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ZoomDirection.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ZoomDirection.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ZoomDirection.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CalendarEra()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CalendarEra(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CalendarEra);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEra.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEra.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEra.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEra.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEra.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarEra.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Time12HourClock()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Time12HourClock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Time12HourClock);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.meridiem.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setMeridiem(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.hour.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setHour(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setHourAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.second.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setSecond(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setSecondAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.timeZone.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setTimeZone(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.minute.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setMinute(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time12HourClock.setMinuteAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleArithmetic_ArithmeticAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_appleArithmetic_ArithmeticAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_appleArithmetic_ArithmeticAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_appleArithmetic_ArithmeticAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleArithmetic_ArithmeticAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleArithmetic_ArithmeticAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleArithmetic_ArithmeticAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleArithmetic_ArithmeticAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PaymentAccount()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PaymentAccount(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PaymentAccount);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.secondaryBalance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setSecondaryBalance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setSecondaryBalanceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.accountNumber.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setAccountNumber(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setAccountNumberAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.holder.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setHolder(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.number.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNumber(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNumberAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.accountType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setAccountType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.organization.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setOrganization(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setOrganizationAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.balance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setBalance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setBalanceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.nickname.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNickname(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setNicknameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.bank.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccount.setBank(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonWriting_WritingAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonWriting_WritingAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonWriting_WritingAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonWriting_WritingAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonWriting_WritingAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonWriting_WritingAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Arithmetic()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Arithmetic(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Arithmetic);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.mathExpression.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.setMathExpression(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Arithmetic.setMathExpressionAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_UserFavorite()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_UserFavorite(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_UserFavorite);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.category.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.setCategory(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.instance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.setInstance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_UserFavorite.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriFavorite()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriFavorite(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriFavorite);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.category.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.setCategory(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.instance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.setInstance(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriFavorite.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Time24HourClock()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Time24HourClock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Time24HourClock);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.hour.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setHour(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setHourAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.second.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setSecond(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setSecondAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.timeZone.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setTimeZone(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.minute.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setMinute(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time24HourClock.setMinuteAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_App()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_App(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_App);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.section.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setSection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.appSection.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setAppSection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.genre.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setGenre(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setState(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.developer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setDeveloper(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.associatedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setAssociatedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_App.setAssociatedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t type metadata accessor for UsoEntityBuilder_appleTimer_TimerAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_appleTimer_TimerAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_appleTimer_TimerAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_appleTimer_TimerAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleTimer_TimerAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleTimer_TimerAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleTimer_TimerAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_appleTimer_TimerAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonNotebook_NotebookAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonNotebook_NotebookAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonNotebook_NotebookAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonNotebook_NotebookAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Integer()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Integer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Integer);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.integerValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Recipe()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Recipe(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Recipe);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.cookTimeRequired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setCookTimeRequired(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setCookTimeRequiredAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.timeRemaining.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setTimeRemaining(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setTimeRemainingAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setDescription(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setDescriptionAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.author.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setAuthor(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setAddedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setAddedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.nutrients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addNutrients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addNutrientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.ingredients.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addIngredients(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addIngredientsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.uri.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setUri(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.substitutions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addSubstitutions(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addSubstitutionsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.lastUsedDateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setLastUsedDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setLastUsedDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.totalTimeRequired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setTotalTimeRequired(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setTotalTimeRequiredAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.recipeSteps.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addRecipeSteps(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.addRecipeStepsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.servings.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setServings(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setServingsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.prepTimeRequired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setPrepTimeRequired(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setPrepTimeRequiredAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.personalRating.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setPersonalRating(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.dateTimeRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setDateTimeRange(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.globalRating.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setGlobalRating(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Recipe.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ListPosition()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_ListPosition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_ListPosition);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.offsetToReference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setOffsetToReference(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setOffsetToReferenceAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.offsetDirection.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setOffsetDirection(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.referenceListPosition.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setReferenceListPosition(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ListPosition.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_applePhoneCall_PhoneCallAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_applePhoneCall_PhoneCallAttribute.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Calendar()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Calendar(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Calendar);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.owner.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setOwner(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.viewPeriod.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setViewPeriod(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.viewDate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setViewDate(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Calendar.setViewDateAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_HealthLog()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_HealthLog(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_HealthLog);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.valueCategory.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setValueCategory(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.geographicArea.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setGeographicArea(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.valueQualifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HealthLog.setValueQualifier(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonEmail_EmailAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonEmail_EmailAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonEmail_EmailAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEmail_EmailAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEmail_EmailAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonEmail_EmailAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Notification()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Notification(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Notification);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.associatedActions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.addAssociatedActions(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.addAssociatedActionsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.summaryMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.setSummaryMode(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Notification.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementComponent()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MeasurementComponent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MeasurementComponent);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.unit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setUnit(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriProperty()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriProperty(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriProperty);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriProperty.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriProperty.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriProperty.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriProperty.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriProperty.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PaymentAccountType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PaymentAccountType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PaymentAccountType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PaymentAccountType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SortOrder()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SortOrder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SortOrder);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortOrder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortOrder.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortOrder.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortOrder.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortOrder.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PhotoMemory()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PhotoMemory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PhotoMemory);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhotoMemory.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhotoMemory.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhotoMemory.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhotoMemory.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhotoMemory.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhotoMemory.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NavigationMenu()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_NavigationMenu(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_NavigationMenu);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.device.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.setDevice(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.userEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NavigationMenu.setUserEntity(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Medication()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Medication(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Medication);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.dosage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.setDosage(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.setDosageAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Medication.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_DayOfWeek()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_DayOfWeek(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_DayOfWeek);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DayOfWeek.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DayOfWeek.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DayOfWeek.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DayOfWeek.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_DayOfWeek.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Currency()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Currency(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Currency);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AttachmentType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_AttachmentType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_AttachmentType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_AttachmentType.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Website()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Website(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Website);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Website.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Website.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Website.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Website.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Website.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Website.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_JournalEntry()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_JournalEntry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_JournalEntry);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t _s12SiriOntology036UsoEntityBuilder_commonNotification_G9AttributeC9usoSameAsAA0cde9Protocol_fg1_gH0_pSgvgTj_0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.setDateTime(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.setDateTimeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.stringContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.setStringContent(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_JournalEntry.setStringContentAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Decimal()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Decimal(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Decimal);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setUsoSameAsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.canonicalString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setCanonicalString(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setCanonicalStringAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Decimal.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SocialConversation()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SocialConversation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SocialConversation);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.nextTurns.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.addNextTurns(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.addNextTurnsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.dialog.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.setDialog(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SocialConversation.setDialogAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MessageFolder()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MessageFolder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MessageFolder);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.associatedPerson.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.setAssociatedPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.provider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MessageFolder.setProvider(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Person(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Person);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.relationships.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addRelationships(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addRelationshipsAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addRelationshipsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.age.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setAge(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.specifyingContactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.birthdate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setBirthdate(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setBirthdateAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.associatedDate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setAssociatedDate(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setAssociatedDateAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.location.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setLocation(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.structuredName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.associatedOrganization.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setAssociatedOrganization(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.identifyingRelationship.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationship(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationshipAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.phoneticName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setPhoneticName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setPhoneticNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.phoneticStructuredName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setPhoneticStructuredName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Similarity()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Similarity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Similarity);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Similarity.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Similarity.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Similarity.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Similarity.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Similarity.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NotificationType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_NotificationType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_NotificationType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotificationType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_HomeEntity()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_HomeEntity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_HomeEntity);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HomeEntity.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HomeEntity.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HomeEntity.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HomeEntity.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HomeEntity.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_HomeEntity.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SearchObjectType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SearchObjectType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SearchObjectType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SearchObjectType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SearchObjectType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SearchObjectType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SearchObjectType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SearchObjectType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SearchObjectType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CalendarSystem()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CalendarSystem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CalendarSystem);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarSystem.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarSystem.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarSystem.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarSystem.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarSystem.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CalendarSystem.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.surfaceForm.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.setSurfaceForm(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.setSurfaceFormAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.person.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.setPerson(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_KnowledgeQuestionPersonAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_RadioStation()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_RadioStation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_RadioStation);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.frequencyName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setFrequencyName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setFrequencyNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.frequencyUnit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setFrequencyUnit(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.radioBand.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setRadioBand(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.genre.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setGenre(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.frequency.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setFrequency(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setFrequencyAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_RadioStation.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonApp_AppListingAttribute()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonApp_AppListingAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonApp_AppListingAttribute);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonApp_AppListingAttribute.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonApp_AppListingAttribute.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonApp_AppListingAttribute.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Word()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Word(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Word);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Word.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Word.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Word.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Word.stringValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Word.setStringValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Word.setStringValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Group()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Group(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Group);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.specifyingContactAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.setSpecifyingContactAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.addMembers(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Group.addMembersListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_TemperatureUnit()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_TemperatureUnit(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_TemperatureUnit);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.secondaryUnit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.setSecondaryUnit(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_TemperatureUnit.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t type metadata accessor for UsoEntityBuilder_commonStock_StockChangeState()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_commonStock_StockChangeState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_commonStock_StockChangeState);
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockChangeState.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockChangeState.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockChangeState.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockChangeState.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_commonStock_StockChangeState.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SiriContentType()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SiriContentType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SiriContentType);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentType.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentType.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentType.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentType.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentType.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SiriContentType.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Attachment()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Attachment(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Attachment);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.collaborationMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setCollaborationMode(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.sharedAppEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setSharedAppEntity(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.sharedApp.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setSharedApp(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.query.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setQuery(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setQueryAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Attachment.setType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaItemVersion()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_MediaItemVersion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_MediaItemVersion);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemVersion.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemVersion.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemVersion.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemVersion.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MediaItemVersion.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PostalAddress()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_PostalAddress(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_PostalAddress);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.province.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setProvince(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.city.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCity(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.neighborhood.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setNeighborhood(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.crossStreet.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCrossStreet(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.country.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCountry(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setValueAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.label.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setLabel(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setLabelAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.postalCode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setPostalCode(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setPostalCodeAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.street.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setStreet(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.subStreetAddress.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setSubStreetAddress(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setSubStreetAddressAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.streetNumber.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setStreetNumber(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setStreetNumberAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 720))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CollaborationMode()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_CollaborationMode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_CollaborationMode);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CollaborationMode.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CollaborationMode.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CollaborationMode.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CollaborationMode.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CollaborationMode.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_SortValue()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_SortValue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_SortValue);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortValue.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortValue.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t _s12SiriOntology024UsoEntityBuilder_common_A8PropertyC03setC6SameAs5valueyAA0cde9Protocol_f1_aG0_p_tFTj_0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortValue.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortValue.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_SortValue.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Time()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_Time(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_Time);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.occurringIn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setOccurringIn(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.hour.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setHour(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setHourAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.second.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setSecond(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setSecondAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.timeZone.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setTimeZone(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.minute.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setMinute(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setMinuteAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.definedValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Time.setDefinedValue(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_NotebookList()
{
  return self;
}

uint64_t method lookup function for UsoEntityBuilder_common_NotebookList(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UsoEntityBuilder_common_NotebookList);
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.notebookItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.addNotebookItems(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.addNotebookItemsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setName(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setNameAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.dateTimeCreated.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setDateTimeCreated(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setDateTimeCreatedAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.addParticipants(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.addParticipantsListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.dateTimeModified.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setDateTimeModified(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setDateTimeModifiedAsExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.usoSameAs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setUsoSameAs(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.addAttributes(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.addAttributesListExpression(operatorValue:operand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.itemType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_NotebookList.setItemType(value:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 16) = 0;
  type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DF460);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.init()@<X0>(void *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DF470);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.asrHypothesisIndex.getter()
{
  return *v0;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.asrHypothesisIndex.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.asrHypothesisIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.spans.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.spans.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.spans.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.nodeIndex.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.nodeIndex.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.nodeIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0) + 28);
  uint64_t v4 = sub_1CA3AFA20();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0) + 28);
  uint64_t v4 = sub_1CA3AFA20();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceAlignment.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startIndex.getter()
{
  return *v0;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startIndex.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.startIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endIndex.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endIndex.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.endIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startUnicodeScalarIndex.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startUnicodeScalarIndex.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.startUnicodeScalarIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endUnicodeScalarIndex.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endUnicodeScalarIndex.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.endUnicodeScalarIndex.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startMilliSeconds.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.startMilliSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.startMilliSeconds.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endMilliSeconds.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.endMilliSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.endMilliSeconds.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0) + 40);
  uint64_t v4 = sub_1CA3AFA20();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0) + 40);
  uint64_t v4 = sub_1CA3AFA20();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_UtteranceSpan.unknownFields.modify())(void)
{
  return nullsub_1;
}

unint64_t static Siri_Nl_Core_Protocol_UtteranceAlignment.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t sub_1CA24A0CC()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF3F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF3F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C1BA0;
  v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "asr_hypothesis_index";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA8];
  uint64_t v8 = sub_1CA3AFD50();
  v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)v10 = "spans";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "node_index";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Siri_Nl_Core_Protocol_UtteranceAlignment._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3D60, (uint64_t)qword_1EA5DF3F8, a1);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
        sub_1CA24B1D0(&qword_1EA5DF428, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
        sub_1CA3AFBE0();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      uint64_t result = sub_1CA3AFAB0();
    }
    sub_1CA3AFBC0();
    goto LABEL_11;
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_1CA3AFD10(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0),
          sub_1CA24B1D0(&qword_1EA5DF428, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan), uint64_t result = sub_1CA3AFD30(), !v1))
    {
      if (!*(_DWORD *)(v0 + 16) || (uint64_t result = sub_1CA3AFD10(), !v1))
      {
        type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
        return sub_1CA3AFA00();
      }
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceAlignment.hashValue.getter()
{
  return sub_1CA24AD70((void (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment, &qword_1EA5DF430, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1CA24A5BC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 16) = 0;
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA24A5F0()
{
  return 0xD000000000000028;
}

uint64_t sub_1CA24A60C()
{
  return Siri_Nl_Core_Protocol_UtteranceAlignment.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA24A624()
{
  return Siri_Nl_Core_Protocol_UtteranceAlignment.traverse<A>(visitor:)();
}

uint64_t sub_1CA24A63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA24B1D0(&qword_1EA5DF488, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA24A6B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3D60, (uint64_t)qword_1EA5DF3F8, a1);
}

uint64_t sub_1CA24A6DC(uint64_t a1)
{
  uint64_t v2 = sub_1CA24B1D0(&qword_1EA5DE298, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA24A748()
{
  sub_1CA24B1D0(&qword_1EA5DE298, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
  return sub_1CA3AFC40();
}

unint64_t static Siri_Nl_Core_Protocol_UtteranceSpan.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_1CA24A7E4()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF410);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF410);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C6470;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "start_index";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA8];
  uint64_t v8 = sub_1CA3AFD50();
  v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "end_index";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)v12 = "start_unicode_scalar_index";
  *((void *)v12 + 1) = 26;
  v12[16] = 2;
  v9();
  v13 = (void *)(v5 + 3 * v2);
  v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)v14 = "end_unicode_scalar_index";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  v15 = (void *)(v5 + 4 * v2);
  v16 = (char *)v15 + v1[14];
  void *v15 = 5;
  *(void *)v16 = "start_milli_seconds";
  *((void *)v16 + 1) = 19;
  v16[16] = 2;
  v9();
  v17 = (void *)(v5 + 5 * v2);
  v18 = (char *)v17 + v1[14];
  void *v17 = 6;
  *(void *)v18 = "end_milli_seconds";
  *((void *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Siri_Nl_Core_Protocol_UtteranceSpan._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3D68, (uint64_t)qword_1EA5DF410, a1);
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          sub_1CA3AFBC0();
          break;
        case 5:
        case 6:
          sub_1CA3AFB20();
          break;
        default:
          break;
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = sub_1CA3AFD10(), !v1))
  {
    if (!v0[1] || (uint64_t result = sub_1CA3AFD10(), !v1))
    {
      if (!v0[2] || (uint64_t result = sub_1CA3AFD10(), !v1))
      {
        if (!v0[3] || (uint64_t result = sub_1CA3AFD10(), !v1))
        {
          if (!v0[4] || (uint64_t result = sub_1CA3AFCC0(), !v1))
          {
            if (!v0[5] || (uint64_t result = sub_1CA3AFCC0(), !v1))
            {
              type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
              return sub_1CA3AFA00();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_UtteranceSpan.hashValue.getter()
{
  return sub_1CA24AD70((void (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan, &qword_1EA5DF438, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1CA24AD70(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA24ADF8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA24AE20()
{
  return 0xD000000000000023;
}

uint64_t sub_1CA24AE3C()
{
  return Siri_Nl_Core_Protocol_UtteranceSpan.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA24AE54()
{
  return Siri_Nl_Core_Protocol_UtteranceSpan.traverse<A>(visitor:)();
}

uint64_t sub_1CA24AE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA24B1D0(&qword_1EA5DF480, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA24AEE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3D68, (uint64_t)qword_1EA5DF410, a1);
}

uint64_t sub_1CA24AF0C(uint64_t a1)
{
  uint64_t v2 = sub_1CA24B1D0(&qword_1EA5DF428, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA24AF78()
{
  sub_1CA24B1D0(&qword_1EA5DF428, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
  return sub_1CA3AFC40();
}

uint64_t _s12SiriOntology0A36_Nl_Core_Protocol_UtteranceAlignmentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_1C9F4BA94(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) != 0
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    uint64_t v11 = type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment(0);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    sub_1CA24B1D0(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
    char v13 = sub_1CA3AFDD0();
    v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1CA24B1D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s12SiriOntology0A31_Nl_Core_Protocol_UtteranceSpanV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
    && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3)
    && *((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4)
    && *((_DWORD *)a1 + 5) == *((_DWORD *)a2 + 5))
  {
    uint64_t v11 = type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan(0);
    v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 40)], v4);
    v12(v8, &a2[*(int *)(v11 + 40)], v4);
    sub_1CA24B1D0(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
    char v13 = sub_1CA3AFDD0();
    v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1CA24B420()
{
  return sub_1CA24B1D0(&qword_1EA5DF440, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1CA24B468()
{
  return sub_1CA24B1D0(&qword_1EA5DE298, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1CA24B4B0()
{
  return sub_1CA24B1D0(&qword_1EA5DF430, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1CA24B4F8()
{
  return sub_1CA24B1D0(&qword_1EA5DF448, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceAlignment);
}

uint64_t sub_1CA24B540()
{
  return sub_1CA24B1D0(&qword_1EA5DF450, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1CA24B588()
{
  return sub_1CA24B1D0(&qword_1EA5DF428, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1CA24B5D0()
{
  return sub_1CA24B1D0(&qword_1EA5DF438, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

uint64_t sub_1CA24B618()
{
  return sub_1CA24B1D0(&qword_1EA5DF458, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UtteranceSpan);
}

void *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_1CA3AFA20();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA24BA58);
}

uint64_t sub_1CA24BA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1CA3AFA20();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA24BB1C);
}

uint64_t sub_1CA24BB1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1CA3AFA20();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1CA24BBC4()
{
  uint64_t result = sub_1CA3AFA20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 40);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_1CA3AFA20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 40);
  uint64_t v3 = sub_1CA3AFA20();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for Siri_Nl_Core_Protocol_UtteranceSpan(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA24BFF0);
}

uint64_t sub_1CA24BFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 40);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_UtteranceSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA24C074);
}

uint64_t sub_1CA24C074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 40);
  uint64_t v6 = sub_1CA3AFA20();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t sub_1CA24C0E8()
{
  uint64_t result = sub_1CA3AFA20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Graph.ComparisonOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static Graph.ComparisonOptions.payloads.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Graph.ComparisonOptions.normalizedStringPayloads.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Graph.ComparisonOptions.identifiers.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static Graph.ComparisonOptions.utteranceAlignments.getter(void *a1@<X8>)
{
  *a1 = 8;
}

uint64_t Graph.ComparisonOptions.rawValue.getter()
{
  return *(void *)v0;
}

void *sub_1CA24C1CC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1CA24C1D8(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1CA24C1E0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1CA24C1F4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1CA24C208@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1CA24C21C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1CA24C24C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1CA24C278@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1CA24C29C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1CA24C2B0(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1CA24C2C4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1CA24C2D8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1CA24C2EC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1CA24C300(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1CA24C314(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1CA24C328()
{
  return *v0 == 0;
}

uint64_t sub_1CA24C338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1CA24C350(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1CA24C364@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t Graph.isEquivalentTo(_:)(uint64_t a1)
{
  uint64_t v1 = unk_1F2460608;
  if ((unk_1F2460608 & ~qword_1F2460600) == 0) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1 | qword_1F2460600;
  uint64_t v4 = qword_1F2460610;
  uint64_t v3 = unk_1F2460618;
  if ((qword_1F2460610 & ~v2) == 0) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 | v2;
  if ((unk_1F2460618 & ~v5) == 0) {
    uint64_t v3 = 0;
  }
  uint64_t v7 = v3 | v5;
  return Graph.isEquivalentTo(_:comparisonOptions:)(a1, &v7) & 1;
}

uint64_t Graph.isEquivalentTo(_:comparisonOptions:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t result = swift_unownedRetainStrong();
  if (v6)
  {
    swift_retain();
    swift_unownedRetain();
    swift_release();
    v11[5] = v3;
    v11[6] = v6;
    swift_beginAccess();
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t result = swift_unownedRetainStrong();
    if (v8)
    {
      swift_retain();
      swift_unownedRetain();
      swift_release();
      v11[0] = a1;
      v11[1] = v8;
      uint64_t v10 = v5;
      char v9 = Node.isEquivalentTo(_:comparisonOptions:)(v11, &v10);
      swift_release();
      swift_unownedRelease();
      swift_release();
      swift_unownedRelease();
      return v9 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Node.isEquivalentTo(_:comparisonOptions:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v133 = *a2;
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D6B20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CA3C0440;
  *(_OWORD *)(inited + 32) = 0u;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_OWORD *)(inited + 80) = 0u;
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = v5;
  uint64_t v175 = inited;
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1CA3C0440;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 96) = v4;
  *(void *)(v8 + 104) = v3;
  uint64_t v174 = v8;
  uint64_t v9 = *(void *)(inited + 16);
  swift_retain();
  swift_unownedRetain();
  swift_retain();
  swift_unownedRetain();
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_77:
    uint64_t v118 = *(void *)(v8 + 16);
    swift_bridgeObjectRelease();
    return v118 == 0;
  }
  BOOL v10 = *(void *)(inited + 16) == 0;
  while (!v10)
  {
    uint64_t v12 = *(void *)(inited + 32);
    uint64_t v11 = *(void *)(inited + 40);
    uint64_t v14 = *(void *)(inited + 48);
    uint64_t v13 = *(void *)(inited + 56);
    uint64_t v16 = *(void *)(inited + 64);
    uint64_t v15 = *(void *)(inited + 72);
    uint64_t v18 = *(void *)(inited + 80);
    uint64_t v17 = *(void *)(inited + 88);
    v20 = *(void **)(inited + 96);
    v19 = *(void **)(inited + 104);
    v137 = (void *)v13;
    uint64_t v142 = v15;
    sub_1CA24DA98(v12, v11, v14, v13, v16);
    swift_retain();
    swift_unownedRetain();
    sub_1CA24D960(0, 1);
    if (!*(void *)(v8 + 16)) {
      goto LABEL_91;
    }
    uint64_t v143 = v17;
    uint64_t v144 = *(void *)(v8 + 32);
    uint64_t v141 = *(void *)(v8 + 40);
    uint64_t v21 = *(void *)(v8 + 48);
    uint64_t v152 = v21;
    uint64_t v153 = *(void *)(v8 + 56);
    uint64_t v135 = v16;
    uint64_t v136 = *(void *)(v8 + 64);
    uint64_t v139 = v12;
    uint64_t v151 = *(void *)(v8 + 72);
    uint64_t v148 = v18;
    uint64_t v23 = *(void *)(v8 + 80);
    uint64_t v22 = *(void *)(v8 + 88);
    uint64_t v145 = v11;
    v25 = *(void **)(v8 + 96);
    v24 = *(void **)(v8 + 104);
    sub_1CA24DA98(v144, v141, v21, v153, v136);
    swift_retain();
    swift_unownedRetain();
    sub_1CA24D960(0, 1);
    uint64_t v138 = v14;
    sub_1CA24DA98(v12, v11, v14, (uint64_t)v137, v135);
    swift_retain();
    swift_unownedRetain();
    v156 = v20;
    swift_release();
    v163 = v19;
    swift_unownedRelease();
    uint64_t v140 = v23;
    sub_1CA24DA98(v144, v141, v152, v153, v136);
    swift_retain();
    swift_unownedRetain();
    swift_release();
    v162 = v24;
    swift_unownedRelease();
    v157 = v25;
    uint64_t v26 = v11;
    if (v135)
    {
      if (!v136)
      {
        sub_1CA24DA98(v12, v11, v14, (uint64_t)v137, v135);
        sub_1CA24DA98(v12, v11, v14, (uint64_t)v137, v135);
        sub_1CA24DA98(v144, v141, v152, v153, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v120 = 0;
        uint64_t v121 = (uint64_t)v137;
        uint64_t v29 = v135;
        uint64_t v28 = (uint64_t)v137;
        goto LABEL_85;
      }
      v169 = v137;
      v170 = (void *)v135;
      uint64_t v171 = v142;
      uint64_t v172 = v148;
      uint64_t v173 = v143;
      uint64_t v164 = v153;
      uint64_t v165 = v136;
      uint64_t v166 = v151;
      uint64_t v167 = v140;
      uint64_t v168 = v22;
      sub_1CA24DA98(v12, v11, v14, (uint64_t)v137, v135);
      sub_1CA24DA98(v12, v11, v14, (uint64_t)v137, v135);
      char v27 = _s12SiriOntology4NameV2eeoiySbAC_ACtFZ_0(&v169, &v164);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v28 = (uint64_t)v137;
      uint64_t v29 = v135;
      sub_1CA24DAE8(v12, v145, v14, (uint64_t)v137, v135);
      uint64_t v30 = v141;
      if ((v27 & 1) == 0)
      {
        uint64_t v122 = v144;
        uint64_t v123 = v153;
        uint64_t v124 = v136;
        sub_1CA24DAE8(v144, v141, v152, v153, v136);
        uint64_t v125 = v14;
        uint64_t v126 = v145;
        uint64_t v127 = v139;
        goto LABEL_86;
      }
      uint64_t v31 = (uint64_t)v137;
      uint64_t v26 = v145;
      if (v152 != v14)
      {
        sub_1CA24DAE8(v144, v141, v152, v153, v136);
        sub_1CA24DAE8(v12, v145, v14, (uint64_t)v137, v135);
        sub_1CA24DAE8(v144, v141, v152, v153, v136);
        swift_release();
        swift_unownedRelease();
        uint64_t v128 = v12;
        uint64_t v129 = v145;
        uint64_t v130 = v14;
        uint64_t v131 = (uint64_t)v137;
        uint64_t v132 = v135;
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v31 = (uint64_t)v137;
      sub_1CA24DA98(v12, v11, v14, (uint64_t)v137, 0);
      if (v136)
      {
        uint64_t v28 = (uint64_t)v137;
        uint64_t v121 = 0;
        uint64_t v120 = v153;
LABEL_85:
        sub_1CA1C1DE4(v121, v29);
        sub_1CA1C1DE4(v120, v136);
        uint64_t v125 = v14;
        uint64_t v127 = v12;
        uint64_t v124 = v136;
        uint64_t v122 = v144;
        uint64_t v126 = v145;
        uint64_t v123 = v153;
LABEL_86:
        sub_1CA24DAE8(v127, v126, v125, v28, v29);
        sub_1CA24DAE8(v122, v141, v152, v123, v124);
        swift_release();
        swift_unownedRelease();
        uint64_t v128 = v127;
        uint64_t v129 = v145;
        uint64_t v130 = v14;
        uint64_t v131 = v28;
        uint64_t v132 = v29;
        goto LABEL_87;
      }
      uint64_t v30 = v141;
      sub_1CA24DA98(v144, v141, v152, v153, 0);
    }
    sub_1CA24DA98(v12, v26, v14, v31, v29);
    swift_retain();
    swift_unownedRetain();
    sub_1CA24DAE8(v12, v26, v14, v31, v29);
    sub_1CA24DA98(v144, v30, v152, v153, v136);
    swift_retain();
    swift_unownedRetain();
    sub_1CA24DAE8(v144, v30, v152, v153, v136);
    swift_unownedRetainStrong();
    v32 = (void *)v19[8];
    v33 = (void *)v163[9];
    uint64_t v35 = v163[10];
    uint64_t v34 = v163[11];
    uint64_t v36 = v163[12];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    v169 = v32;
    v170 = v33;
    uint64_t v171 = v35;
    uint64_t v172 = v34;
    uint64_t v173 = v36;
    swift_unownedRetainStrong();
    uint64_t v38 = v162[8];
    uint64_t v37 = v162[9];
    uint64_t v40 = v162[10];
    uint64_t v39 = v162[11];
    uint64_t v41 = v162[12];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v164 = v38;
    uint64_t v165 = v37;
    uint64_t v166 = v40;
    uint64_t v167 = v39;
    uint64_t v168 = v41;
    LOBYTE(v40) = _s12SiriOntology4NameV2eeoiySbAC_ACtFZ_0(&v169, &v164);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      swift_release();
      swift_unownedRelease();
      swift_release();
      swift_unownedRelease();
      sub_1CA24DAE8(v144, v141, v152, v153, v136);
      sub_1CA24DAE8(v139, v145, v14, (uint64_t)v137, v135);
      sub_1CA24DAE8(v144, v141, v152, v153, v136);
      swift_release();
      swift_unownedRelease();
      uint64_t v128 = v139;
      uint64_t v129 = v145;
      uint64_t v130 = v14;
      uint64_t v131 = (uint64_t)v137;
      uint64_t v132 = v135;
      goto LABEL_87;
    }
    uint64_t v43 = v152;
    uint64_t v42 = v153;
    if (v133)
    {
      v169 = v156;
      v170 = v163;
      uint64_t v44 = Node.stringValue.getter();
      uint64_t v46 = v45;
      v169 = v157;
      v170 = v162;
      uint64_t v47 = Node.stringValue.getter();
      if (v46)
      {
        if (!v48) {
          goto LABEL_20;
        }
        if (v44 == v47 && v46 == v48)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v49 = sub_1CA3B0560();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v49 & 1) == 0) {
            goto LABEL_78;
          }
        }
      }
      else if (v48)
      {
LABEL_20:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
      v169 = v156;
      v170 = v163;
      uint64_t v50 = Node.int64Value.getter();
      char v52 = v51;
      v169 = v157;
      v170 = v162;
      uint64_t v53 = Node.int64Value.getter();
      if (v52)
      {
        if ((v54 & 1) == 0) {
          goto LABEL_78;
        }
      }
      else if ((v54 & 1) != 0 || v50 != v53)
      {
        goto LABEL_78;
      }
    }
    if ((v133 & 2) != 0)
    {
      swift_unownedRetainStrong();
      unint64_t v56 = v163[8];
      unint64_t v55 = v163[9];
      swift_retain();
      swift_unownedRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      if (qword_1EBCA0FE8 != -1) {
        swift_once();
      }
      if (__PAIR128__(v55, v56) == xmmword_1EBCA0FC0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      char v57 = sub_1CA3B0560();
      swift_bridgeObjectRelease();
      if (v57)
      {
LABEL_33:
        swift_unownedRetainStrong();
        v58 = (void *)v163[6];
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        v58 = (void *)MEMORY[0x1E4FBC860];
      }
      swift_unownedRelease();
      swift_unownedRetainStrong();
      unint64_t v60 = v162[8];
      unint64_t v59 = v162[9];
      swift_retain();
      swift_unownedRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      if (__PAIR128__(v59, v60) == xmmword_1EBCA0FC0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      char v61 = sub_1CA3B0560();
      swift_bridgeObjectRelease();
      if (v61)
      {
LABEL_38:
        swift_unownedRetainStrong();
        v62 = (void *)v162[6];
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        v62 = (void *)MEMORY[0x1E4FBC860];
      }
      swift_unownedRelease();
      char v63 = sub_1C9F4B310(v58, v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0) {
        goto LABEL_78;
      }
    }
    if ((v133 & 4) != 0)
    {
      swift_unownedRetainStrong();
      uint64_t v64 = v163[13];
      swift_bridgeObjectRetain();
      swift_release();
      swift_unownedRetainStrong();
      uint64_t v65 = v162[13];
      swift_bridgeObjectRetain();
      swift_release();
      BOOL v66 = sub_1C9F4AF38(v64, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v66) {
        goto LABEL_78;
      }
    }
    if ((v133 & 8) != 0)
    {
      swift_unownedRetainStrong();
      uint64_t v67 = v163[14];
      swift_bridgeObjectRetain();
      swift_release();
      swift_unownedRetainStrong();
      uint64_t v68 = v162[14];
      swift_bridgeObjectRetain();
      swift_release();
      char v69 = sub_1C9F4B08C(v67, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0)
      {
LABEL_78:
        swift_release();
LABEL_79:
        swift_unownedRelease();
        swift_release();
        swift_unownedRelease();
        sub_1CA24DAE8(v144, v141, v152, v153, v136);
        sub_1CA24DAE8(v139, v145, v138, (uint64_t)v137, v135);
        sub_1CA24DAE8(v144, v141, v152, v153, v136);
        swift_release();
        swift_unownedRelease();
        uint64_t v128 = v139;
        uint64_t v129 = v145;
        uint64_t v130 = v138;
        uint64_t v131 = (uint64_t)v137;
        uint64_t v132 = v135;
LABEL_87:
        sub_1CA24DAE8(v128, v129, v130, v131, v132);
        swift_release();
        swift_unownedRelease();
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
    }
    swift_beginAccess();
    uint64_t v70 = v156[2];
    uint64_t v71 = *(void *)(v70 + 16);
    if (v71)
    {
      swift_bridgeObjectRetain();
      v154 = v156 + 3;
      swift_beginAccess();
      v72 = (int *)(v70 + 48);
      v149 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v74 = *((void *)v72 - 2);
        uint64_t v73 = *((void *)v72 - 1);
        int v160 = *v72;
        uint64_t v75 = *((void *)v72 + 2);
        uint64_t v158 = *((void *)v72 + 1);
        uint64_t v76 = *((void *)v72 + 3);
        uint64_t v77 = *((void *)v72 + 4);
        uint64_t v78 = *((void *)v72 + 5);
        swift_unownedRetainStrong();
        uint64_t v79 = v163[7];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_release();
        if (v74 == v79 && (uint64_t v80 = *v154, *(void *)(*v154 + 16)) && (v81 = sub_1C9F78198(v73), (v82 & 1) != 0))
        {
          uint64_t v83 = *(void *)(*(void *)(v80 + 56) + 8 * v81);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_unownedRetain();
          v84 = v149;
          uint64_t v146 = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v84 = sub_1C9F6FBBC(0, v149[2] + 1, 1, v149);
          }
          unint64_t v86 = v84[2];
          unint64_t v85 = v84[3];
          unint64_t v87 = v86 + 1;
          if (v86 >= v85 >> 1)
          {
            v89 = sub_1C9F6FBBC((void *)(v85 > 1), v86 + 1, 1, v84);
            unint64_t v87 = v86 + 1;
            v84 = v89;
          }
          v84[2] = v87;
          v149 = v84;
          v88 = &v84[10 * v86];
          v88[4] = v74;
          v88[5] = v73;
          *((_DWORD *)v88 + 12) = v160;
          v88[7] = v158;
          v88[8] = v75;
          v88[9] = v76;
          v88[10] = v77;
          v88[11] = v78;
          v88[12] = v156;
          v88[13] = v146;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v72 += 16;
        --v71;
      }
      while (v71);
      swift_bridgeObjectRelease();
      uint64_t v90 = (uint64_t)v149;
      uint64_t v43 = v152;
      uint64_t v42 = v153;
    }
    else
    {
      uint64_t v90 = MEMORY[0x1E4FBC860];
    }
    v91 = (void *)sub_1CA1AC754(v90);
    swift_bridgeObjectRelease();
    v169 = v91;
    swift_bridgeObjectRetain();
    sub_1C9FD091C(&v169);
    swift_bridgeObjectRelease();
    v92 = v169;
    swift_beginAccess();
    uint64_t v93 = v157[2];
    uint64_t v94 = *(void *)(v93 + 16);
    if (v94)
    {
      v134 = v92;
      swift_bridgeObjectRetain();
      v155 = v157 + 3;
      swift_beginAccess();
      v95 = (int *)(v93 + 48);
      v150 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v96 = *((void *)v95 - 2);
        uint64_t v97 = *((void *)v95 - 1);
        int v161 = *v95;
        uint64_t v98 = *((void *)v95 + 2);
        uint64_t v159 = *((void *)v95 + 1);
        uint64_t v99 = *((void *)v95 + 3);
        uint64_t v100 = *((void *)v95 + 4);
        uint64_t v101 = *((void *)v95 + 5);
        swift_unownedRetainStrong();
        uint64_t v102 = v162[7];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_release();
        if (v96 == v102 && (uint64_t v103 = *v155, *(void *)(*v155 + 16)) && (v104 = sub_1C9F78198(v97), (v105 & 1) != 0))
        {
          uint64_t v106 = *(void *)(*(void *)(v103 + 56) + 8 * v104);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v147 = v106;
          swift_unownedRetain();
          v107 = v150;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v107 = sub_1C9F6FBBC(0, v150[2] + 1, 1, v150);
          }
          unint64_t v109 = v107[2];
          unint64_t v108 = v107[3];
          unint64_t v110 = v109 + 1;
          if (v109 >= v108 >> 1)
          {
            v112 = sub_1C9F6FBBC((void *)(v108 > 1), v109 + 1, 1, v107);
            unint64_t v110 = v109 + 1;
            v107 = v112;
          }
          v107[2] = v110;
          v150 = v107;
          v111 = &v107[10 * v109];
          v111[4] = v96;
          v111[5] = v97;
          *((_DWORD *)v111 + 12) = v161;
          v111[7] = v159;
          v111[8] = v98;
          v111[9] = v99;
          v111[10] = v100;
          v111[11] = v101;
          v111[12] = v157;
          v111[13] = v147;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v95 += 16;
        --v94;
      }
      while (v94);
      swift_bridgeObjectRelease();
      uint64_t v113 = (uint64_t)v150;
      uint64_t v43 = v152;
      uint64_t v42 = v153;
      v92 = v134;
    }
    else
    {
      uint64_t v113 = MEMORY[0x1E4FBC860];
    }
    v114 = (void *)sub_1CA1AC754(v113);
    swift_bridgeObjectRelease();
    v169 = v114;
    swift_bridgeObjectRetain();
    sub_1C9FD091C(&v169);
    swift_bridgeObjectRelease();
    v115 = v169;
    v116 = (void *)sub_1CA1ACE04((uint64_t)v92);
    swift_release();
    sub_1C9FCD5C8(v116);
    v117 = (void *)sub_1CA1ACE04((uint64_t)v115);
    swift_release();
    sub_1C9FCD5C8(v117);
    sub_1CA24DAE8(v139, v145, v138, (uint64_t)v137, v135);
    swift_release();
    swift_unownedRelease();
    sub_1CA24DAE8(v144, v141, v43, v42, v136);
    swift_release();
    swift_unownedRelease();
    sub_1CA24DAE8(v139, v145, v138, (uint64_t)v137, v135);
    sub_1CA24DAE8(v144, v141, v152, v153, v136);
    swift_release();
    swift_unownedRelease();
    swift_release();
    swift_unownedRelease();
    uint64_t inited = v175;
    if (!*(void *)(v175 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v174;
      goto LABEL_77;
    }
    BOOL v10 = 0;
    uint64_t v8 = v174;
    if (!*(void *)(v174 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_88:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
LABEL_91:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t UsoEntity.isEquivalentTo(_:)(uint64_t a1)
{
  uint64_t v2 = unk_1F2460648;
  if ((unk_1F2460648 & ~qword_1F2460640) == 0) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | qword_1F2460640;
  uint64_t v5 = qword_1F2460650;
  uint64_t v4 = unk_1F2460658;
  if ((qword_1F2460650 & ~v3) == 0) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | v3;
  if ((unk_1F2460658 & ~v6) == 0) {
    uint64_t v4 = 0;
  }
  long long v7 = *(_OWORD *)(*(void *)(v1 + 48) + 16);
  v10[0] = *(_OWORD *)(*(void *)(a1 + 48) + 16);
  v10[1] = v7;
  uint64_t v9 = v4 | v6;
  return Node.isEquivalentTo(_:comparisonOptions:)((uint64_t *)v10, &v9) & 1;
}

uint64_t UsoEntity.isEquivalentTo(_:comparisonOptions:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(*(void *)(v2 + 48) + 16);
  v7[0] = *(_OWORD *)(*(void *)(a1 + 48) + 16);
  v7[1] = v4;
  uint64_t v6 = v3;
  return Node.isEquivalentTo(_:comparisonOptions:)((uint64_t *)v7, &v6) & 1;
}

uint64_t sub_1CA24D960(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  long long v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    long long v4 = sub_1C9F71C5C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    *(void *)uint64_t v2 = v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D6B28);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = v4[2];
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v15 = (char *)&v4[10 * a2 + 4];
  if (v6 != a2 || &v4[10 * v6 + 4] >= (void *)&v15[80 * v14]) {
    uint64_t result = (uint64_t)memmove(&v4[10 * v6 + 4], v15, 80 * v14);
  }
  uint64_t v16 = v4[2];
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    v4[2] = v17;
LABEL_19:
    *(void *)uint64_t v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1CA24DA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CA24DAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t sub_1CA24DB3C()
{
  unint64_t result = qword_1EA5DF490;
  if (!qword_1EA5DF490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF490);
  }
  return result;
}

unint64_t sub_1CA24DB94()
{
  unint64_t result = qword_1EA5DF498;
  if (!qword_1EA5DF498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF498);
  }
  return result;
}

unint64_t sub_1CA24DBEC()
{
  unint64_t result = qword_1EA5DF4A0;
  if (!qword_1EA5DF4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4A0);
  }
  return result;
}

unint64_t sub_1CA24DC44()
{
  unint64_t result = qword_1EA5DF4A8;
  if (!qword_1EA5DF4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Graph.ComparisonOptions()
{
  return &type metadata for Graph.ComparisonOptions;
}

uint64_t AddressOntologyNode.PersonPlaceReference.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1CA3B0390();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void *static AddressOntologyNode.PersonPlaceReference.allCases.getter()
{
  return &unk_1F2460660;
}

uint64_t AddressOntologyNode.PersonPlaceReference.rawValue.getter()
{
  if (*v0) {
    return 31085;
  }
  else {
    return 6647407;
  }
}

uint64_t sub_1CA24DD44(char *a1, char *a2)
{
  return sub_1C9F85AA8(*a1, *a2);
}

uint64_t sub_1CA24DD50()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA24DDC0()
{
  sub_1CA3AFE50();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA24DE1C()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA24DE88@<X0>(char *a1@<X8>)
{
  return AddressOntologyNode.PersonPlaceReference.init(rawValue:)(a1);
}

void sub_1CA24DE94(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6647407;
  if (*v1) {
    uint64_t v2 = 31085;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1CA24DEC0(void *a1@<X8>)
{
  *a1 = &unk_1F245FC18;
}

unint64_t sub_1CA24DED4()
{
  unint64_t result = qword_1EA5DF4B0;
  if (!qword_1EA5DF4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4B0);
  }
  return result;
}

unint64_t sub_1CA24DF28(uint64_t a1)
{
  unint64_t result = sub_1CA24DF50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1CA24DF50()
{
  unint64_t result = qword_1EA5DF4B8;
  if (!qword_1EA5DF4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4B8);
  }
  return result;
}

unint64_t sub_1CA24DFA8()
{
  unint64_t result = qword_1EA5DF4C0;
  if (!qword_1EA5DF4C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA5DF4C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4C0);
  }
  return result;
}

unint64_t sub_1CA24E004(uint64_t a1)
{
  unint64_t result = sub_1CA24E02C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1CA24E02C()
{
  unint64_t result = qword_1EA5DF4D0;
  if (!qword_1EA5DF4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4D0);
  }
  return result;
}

unsigned char *_s20PersonPlaceReferenceOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA24E14CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AddressOntologyNode.PersonPlaceReference()
{
  return &type metadata for AddressOntologyNode.PersonPlaceReference;
}

uint64_t sub_1CA24E184(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x1F4188790](v13);
  v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x1F4188790](v17);
  v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_1CA3B0120();
  if (!v20) {
    return sub_1CA3B0050();
  }
  uint64_t v21 = v20;
  char v27 = v15;
  uint64_t v43 = sub_1CA3B02C0();
  uint64_t v35 = sub_1CA3B02D0();
  sub_1CA3B02A0();
  uint64_t v41 = v19;
  uint64_t result = sub_1CA3B0110();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    v24 = v27;
    while (1)
    {
      v25 = (void (*)(char *, void))sub_1CA3B0140();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_1CA3B02B0();
      sub_1CA3B0130();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

double NonTerminalIntentNodeWrapper.traversableIntentNode.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(a1 + 16))(&v5);
  uint64_t v3 = v7;
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 24) = v3;
  return result;
}

uint64_t NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t IntentNodeTraversable.value<A>(forNode:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  v6.n128_f64[0] = IntentNodeTraversable.intentNode<A>(forOntologyNode:)((uint64_t)a1, a2, a3, __dst);
  uint64_t v7 = *((void *)&__dst[0] + 1);
  if (*((void *)&__dst[0] + 1))
  {
    uint64_t v8 = *(void *)&__dst[0];
    uint64_t v9 = *(void *)(*((void *)&__dst[1] + 1) + 16);
    if (v9)
    {
      memcpy(__dst, (const void *)(*((void *)&__dst[1] + 1) + 1344 * v9 - 1312), sizeof(__dst));
      sub_1C9F6C40C(__dst);
      sub_1C9FAE7C4(v8, v7);
      sub_1C9F467B0(__dst, sub_1C9F45BBC);
      sub_1C9F6C830(__dst);
      sub_1C9FAE814((uint64_t)__dst, (uint64_t)__src);
      if (sub_1C9F5CDD0((uint64_t)__src) != 1)
      {
        uint64_t v10 = *(void *)(v5 + 80);
        sub_1C9F5CDE4(__src, v13);
        (*(void (**)(unsigned char *, uint64_t))(*(void *)(v5 + 88) + 16))(v13, v10);
        return sub_1C9F467B0(__dst, sub_1C9F46BFC);
      }
    }
    else
    {
      sub_1C9FAE7C4(*(uint64_t *)&__dst[0], *((uint64_t *)&__dst[0] + 1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 56))(a4, 1, 1);
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(*(void *)(v5 + 80) - 8) + 56);
    return v12(a4, 1, 1, v6);
  }
}

double IntentNodeTraversable.intentNode(forOntologyNode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v10[3] = type metadata accessor for NonTerminalOntologyNode();
  v10[4] = &protocol witness table for NonTerminalOntologyNode;
  v10[0] = a1;
  swift_retain();
  uint64_t v8 = sub_1CA24EDE4(v10, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (*(void *)(v8 + 16))
  {
    sub_1C9F4544C(v8 + 32, (uint64_t)&v11);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
    sub_1C9FAEFA8((uint64_t)&v11);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double IntentNodeTraversable.intentNode<A>(forOntologyNode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  v10[3] = type metadata accessor for TerminalOntologyNode();
  v10[4] = &protocol witness table for TerminalOntologyNode<A>;
  v10[0] = a1;
  swift_retain();
  uint64_t v8 = sub_1CA24EDE4(v10, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (*(void *)(v8 + 16))
  {
    sub_1C9F4544C(v8 + 32, (uint64_t)&v11);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1))
  {
    sub_1C9FAEFA8((uint64_t)&v11);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t IntentNodeTraversable.values<A>(forNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IntentNodeTraversable.intentNodes<A>(forOntologyNode:)(a1, a2, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB70);
  sub_1CA24F598(&qword_1EA5CFB78, &qword_1EA5CFB70);
  uint64_t v3 = sub_1CA3AFF80();
  swift_bridgeObjectRelease();
  return v3;
}

char *IntentNodeTraversable.intentNodes<A>(forOntologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[3] = type metadata accessor for TerminalOntologyNode();
  v20[4] = &protocol witness table for TerminalOntologyNode<A>;
  v20[0] = a1;
  swift_retain();
  uint64_t v6 = sub_1CA24EDE4(v20, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      sub_1C9F4544C(v8, (uint64_t)v20);
      sub_1C9F4544C((uint64_t)v20, (uint64_t)v19);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
      if ((swift_dynamicCast() & 1) == 0) {
        memset((char *)&v19[2] + 8, 0, 32);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      if (*(void *)&v19[3])
      {
        long long v18 = v19[3];
        uint64_t v11 = *((void *)&v19[2] + 1);
        uint64_t v12 = *(void *)&v19[4];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1C9F70D1C(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v14 = *((void *)v9 + 2);
        unint64_t v13 = *((void *)v9 + 3);
        long long v15 = v18;
        if (v14 >= v13 >> 1)
        {
          uint64_t v16 = sub_1C9F70D1C((char *)(v13 > 1), v14 + 1, 1, v9);
          long long v15 = v18;
          uint64_t v9 = v16;
        }
        *((void *)v9 + 2) = v14 + 1;
        uint64_t v10 = &v9[32 * v14];
        *((void *)v10 + 4) = v11;
        *(_OWORD *)(v10 + 40) = v15;
        *((void *)v10 + 7) = v12;
      }
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v9;
}

uint64_t sub_1CA24ECF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  sub_1C9FAE814(v6 + 1344 * v7 - 1312, (uint64_t)v11);
  sub_1C9FAE814((uint64_t)v11, (uint64_t)__src);
  if (sub_1C9F5CDD0((uint64_t)__src) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  sub_1C9F5CDE4(__src, v10);
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 16))(v10, a2, a3);
}

uint64_t sub_1CA24EDE4(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v17, a2, a3);
  uint64_t v6 = v18;
  if (!v18) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = v17;
  uint64_t v9 = v19;
  uint64_t v8 = v20;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  unint64_t v13 = __swift_project_boxed_opaque_existential_1(a1, v11);
  unint64_t v14 = (void *)sub_1C9FEAE44((uint64_t)v13, v10, v11, v12);
  swift_release();
  if (!v14[2])
  {
    sub_1C9FAE7C4(v7, v6);
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v17 = v7;
  uint64_t v18 = v6;
  uint64_t v19 = v9;
  uint64_t v20 = v8;
  uint64_t v15 = sub_1CA1C374C(v14);
  swift_bridgeObjectRelease();
  sub_1C9FAE7C4(v7, v6);
  return v15;
}

uint64_t sub_1CA24EF10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA24ECF4(a1, *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

uint64_t IntentNodeTraversable.wrappedNonTerminalIntentNode<A>(forOntologyNode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *((void *)&v18 + 1) = type metadata accessor for NonTerminalOntologyNode();
  uint64_t v19 = &protocol witness table for NonTerminalOntologyNode;
  *(void *)&long long v17 = a1;
  swift_retain();
  uint64_t v12 = sub_1CA24EDE4(&v17, a2, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  if (*(void *)(v12 + 16))
  {
    sub_1C9F4544C(v12 + 32, (uint64_t)&v17);
  }
  else
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
    sub_1C9FAEFA8((uint64_t)&v17);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    uint64_t v13 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a6, v13, 1, a3);
  }
  long long v17 = v15;
  long long v18 = v16;
  (*(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a5 + 32))(&v17, a1, a3, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a6, v13, 1, a3);
}

char *IntentNodeTraversable.intentNodes(forOntologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[3] = type metadata accessor for NonTerminalOntologyNode();
  v20[4] = &protocol witness table for NonTerminalOntologyNode;
  v20[0] = a1;
  swift_retain();
  uint64_t v6 = sub_1CA24EDE4(v20, a2, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      sub_1C9F4544C(v8, (uint64_t)v20);
      sub_1C9F4544C((uint64_t)v20, (uint64_t)v19);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
      if ((swift_dynamicCast() & 1) == 0) {
        memset((char *)&v19[2] + 8, 0, 32);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      if (*(void *)&v19[3])
      {
        long long v18 = v19[3];
        uint64_t v11 = *((void *)&v19[2] + 1);
        uint64_t v12 = *(void *)&v19[4];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1C9F713E8(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v14 = *((void *)v9 + 2);
        unint64_t v13 = *((void *)v9 + 3);
        long long v15 = v18;
        if (v14 >= v13 >> 1)
        {
          long long v16 = sub_1C9F713E8((char *)(v13 > 1), v14 + 1, 1, v9);
          long long v15 = v18;
          uint64_t v9 = v16;
        }
        *((void *)v9 + 2) = v14 + 1;
        uint64_t v10 = &v9[32 * v14];
        *((void *)v10 + 4) = v11;
        *(_OWORD *)(v10 + 40) = v15;
        *((void *)v10 + 7) = v12;
      }
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v9;
}

uint64_t IntentNodeTraversable.wrappedNonTerminalIntentNodes<A>(forOntologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v35[3] = type metadata accessor for NonTerminalOntologyNode();
  v35[4] = &protocol witness table for NonTerminalOntologyNode;
  v35[0] = a1;
  swift_retain();
  uint64_t v10 = sub_1CA24EDE4(v35, a2, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v28 = a2;
    uint64_t v29 = a1;
    uint64_t v30 = a4;
    uint64_t v31 = a5;
    uint64_t v32 = a3;
    uint64_t v12 = v10 + 32;
    swift_bridgeObjectRetain();
    unint64_t v13 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      sub_1C9F4544C(v12, (uint64_t)v35);
      sub_1C9F4544C((uint64_t)v35, (uint64_t)v34);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
      if ((swift_dynamicCast() & 1) == 0) {
        memset(&v34[5], 0, 32);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      if (v34[6])
      {
        long long v33 = *(_OWORD *)&v34[6];
        uint64_t v15 = v34[5];
        uint64_t v16 = v34[8];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_1C9F713E8(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v18 = *((void *)v13 + 2);
        unint64_t v17 = *((void *)v13 + 3);
        long long v19 = v33;
        if (v18 >= v17 >> 1)
        {
          uint64_t v20 = sub_1C9F713E8((char *)(v17 > 1), v18 + 1, 1, v13);
          long long v19 = v33;
          unint64_t v13 = v20;
        }
        *((void *)v13 + 2) = v18 + 1;
        unint64_t v14 = &v13[32 * v18];
        *((void *)v14 + 4) = v15;
        *(_OWORD *)(v14 + 40) = v19;
        *((void *)v14 + 7) = v16;
      }
      v12 += 40;
      --v11;
    }
    while (v11);
    uint64_t v21 = swift_bridgeObjectRelease_n();
    a5 = v31;
    a3 = v32;
    a1 = v29;
    a4 = v30;
    a2 = v28;
  }
  else
  {
    uint64_t v21 = swift_bridgeObjectRelease();
    unint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  }
  v35[0] = v13;
  MEMORY[0x1F4188790](v21);
  v27[2] = a2;
  v27[3] = a3;
  v27[4] = a4;
  v27[5] = a5;
  v27[6] = a1;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF4D8);
  uint64_t v23 = sub_1CA24F598(&qword_1EA5DF4E0, &qword_1EA5DF4D8);
  uint64_t v25 = sub_1CA24E184((void (*)(char *, char *))sub_1CA24F530, (uint64_t)v27, v22, a3, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_1CA24F530(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v4 = a1[3];
  uint64_t v6 = *a1;
  long long v7 = *(_OWORD *)(a1 + 1);
  uint64_t v8 = v4;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 32))(&v6, v2);
}

uint64_t sub_1CA24F598(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of NonTerminalIntentNodeWrapper.intentNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NonTerminalIntentNodeWrapper.ontologyNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static NonTerminalIntentNodeWrapper.from(intentNode:ontologyNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of IntentNodeTraversable.traversableIntentNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IntentNodeTraversable.traversableOntologyNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

__n128 PlaceIntentNode.init(intentNode:ontologyNode:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)a3 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = a2;
  return result;
}

uint64_t PlaceIntentNode.intentNode.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t PlaceIntentNode.ontologyNode.getter()
{
  return swift_retain();
}

uint64_t static PlaceIntentNode.from(intentNode:ontologyNode:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = v4;
  a3[3] = v5;
  a3[4] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PlaceIntentNode.worldPlaceName.getter()
{
  return sub_1CA1A1BBC();
}

uint64_t PlaceIntentNode.domainObjectPlaceName.getter()
{
  return sub_1CA1A1BBC();
}

uint64_t PlaceIntentNode.neighborhoodPlaceName.getter()
{
  return sub_1CA1A1BBC();
}

double PlaceIntentNode.personPlace.getter@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v13 = *v1;
  long long v14 = v3;
  uint64_t v15 = *((void *)v1 + 4);
  if (qword_1EA5D3D50 != -1) {
    swift_once();
  }
  sub_1C9FAE510(&v10, qword_1EA5DF3E8);
  if ((void)v11)
  {
    long long v9 = v11;
    uint64_t v4 = v10;
    uint64_t v5 = v12;
    type metadata accessor for AddressOntologyNode.PersonPlaceNode();
    uint64_t v6 = swift_allocObject();
    if (qword_1EA5D3AA0 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_1EA5D7F20;
    *(void *)(v6 + 16) = 0x6C506E6F73726570;
    *(void *)(v6 + 24) = 0xEB00000000656361;
    *(unsigned char *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = v7;
    *(void *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v9;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceIntentNode()
{
  return &type metadata for PlaceIntentNode;
}

uint64_t NLIntent.init(rootNode:score:originalInput:allWordsMatched:primary:usingExplicitInput:intentRank:isNERBasedParse:intentID:nlState:mitigatorClassification:strippedVoiceTrigger:isInvalidVoiceTrigger:isSuggested:metaDomainActions:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, uint64_t a13, char a14, char *a15, char *a16, uint64_t a17, uint64_t a18, char a19, char a20,uint64_t a21)
{
  char v25 = *a15;
  char v26 = *a16;
  uint64_t result = sub_1C9F4578C(a1, a9);
  *(void *)(a9 + 40) = a2;
  *(unsigned char *)(a9 + 48) = a3 & 1;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(unsigned char *)(a9 + 72) = a6;
  *(unsigned char *)(a9 + 73) = a7;
  *(unsigned char *)(a9 + 74) = a8;
  *(void *)(a9 + 80) = a10;
  *(unsigned char *)(a9 + 88) = a11 & 1;
  *(unsigned char *)(a9 + 89) = a12;
  *(void *)(a9 + 96) = a13;
  *(unsigned char *)(a9 + 104) = a14 & 1;
  *(unsigned char *)(a9 + 105) = v25;
  *(unsigned char *)(a9 + 106) = v26;
  *(void *)(a9 + 112) = a17;
  *(void *)(a9 + 120) = a18;
  *(unsigned char *)(a9 + 128) = a19;
  *(unsigned char *)(a9 + 129) = a20;
  *(void *)(a9 + 136) = a21;
  return result;
}

__n128 NLIntent.domainNode.getter@<Q0>(uint64_t a1@<X8>)
{
  sub_1C9F4544C(v1, (uint64_t)&v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  if (!swift_dynamicCast()) {
    goto LABEL_20;
  }
  BOOL v4 = v14 == 0x6973734169726953 && v15.n128_u64[0] == 0xED0000746E617473;
  if (!v4 && (sub_1CA3B0560() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1CA250718(v5, 0x6E6F69746361, 0xE600000000000000);
  swift_bridgeObjectRelease();
  if (*((void *)v6 + 2) != 1)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v7 = *((void *)v6 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1CA250718(v7, 0x646E616D6D6F63, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (*((void *)v8 + 2) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v9 = *((void *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1CA250718(v9, 0x7463656A627573, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (*((void *)v10 + 2) != 1) {
    goto LABEL_15;
  }
  uint64_t v11 = *((void *)v10 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1CA250718(v11, 0x746E657665, 0xE500000000000000);
  swift_bridgeObjectRelease();
  if (*((void *)v12 + 2) == 1)
  {
    uint64_t v13 = *((void *)v12 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v13;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v11 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v11 + 16))
  {
    sub_1C9F4544C(v11 + 32, (uint64_t)&v17);
  }
  else
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v18 + 1))
  {
    sub_1C9F40EEC((uint64_t)&v17, &qword_1EA5CFB38);
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    result.n128_u64[0] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  __n128 result = v15;
  *(void *)a1 = v14;
  *(__n128 *)(a1 + 8) = v15;
  *(void *)(a1 + 24) = v16;
  return result;
}

uint64_t NLIntent.rootNode.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F4544C(v1, a1);
}

uint64_t NLIntent.score.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t NLIntent.originalInput.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NLIntent.allWordsMatched.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t NLIntent.primary.getter()
{
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t NLIntent.usingExplicitInput.getter()
{
  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t NLIntent.intentRank.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t NLIntent.isNERBasedParse.getter()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t NLIntent.intentID.getter()
{
  return *(void *)(v0 + 96);
}

void NLIntent.nlState.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 105);
}

void NLIntent.mitigatorClassification.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 106);
}

uint64_t NLIntent.strippedVoiceTrigger.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NLIntent.isInvalidVoiceTrigger.getter()
{
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t NLIntent.isSuggested.getter()
{
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t NLIntent.metaDomainActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NLIntent.intentSignature.getter()
{
  sub_1C9F4544C(v0, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D6B00);
  if (swift_dynamicCast())
  {
    sub_1C9F4578C(v5, (uint64_t)v8);
    v7[0] = 14906;
    v7[1] = 0xE200000000000000;
    uint64_t v1 = v9;
    uint64_t v2 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
    sub_1CA3AFE80();
    swift_bridgeObjectRelease();
    uint64_t v3 = v7[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return v3;
  }
  else
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5DF280);
    uint64_t result = sub_1CA3B0330();
    __break(1u);
  }
  return result;
}

unint64_t NLIntent.debugDescription.getter()
{
  v2[0] = 0;
  v2[1] = 0xE000000000000000;
  sub_1CA3B0240();
  swift_bridgeObjectRelease();
  unint64_t v3 = 0xD000000000000014;
  unint64_t v4 = 0x80000001CA456840;
  sub_1C9F4544C(v0, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  sub_1CA3AFE20();
  sub_1CA3AFE80();
  swift_bridgeObjectRelease();
  sub_1CA3AFE80();
  return v3;
}

uint64_t NLIntent.hash(into:)(uint64_t a1)
{
  sub_1C9F4544C(v1, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
  if (swift_dynamicCast())
  {
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    TerminalIntentNode.hash(into:)(a1);
  }
  else
  {
    sub_1C9F4544C(v1, (uint64_t)&v8);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    NonTerminalIntentNode.hash(into:)(a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_6:
  if (*(unsigned char *)(v1 + 48) == 1)
  {
    sub_1CA3B0630();
    if (*(void *)(v1 + 64))
    {
LABEL_8:
      sub_1CA3B0630();
      swift_bridgeObjectRetain();
      sub_1CA3AFE50();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  else
  {
    sub_1CA3B0630();
    sub_1CA3B0650();
    if (*(void *)(v1 + 64)) {
      goto LABEL_8;
    }
  }
  sub_1CA3B0630();
LABEL_11:
  sub_1CA3B0630();
  sub_1CA3B0630();
  sub_1CA3B0630();
  if (*(unsigned char *)(v1 + 88) == 1)
  {
    sub_1CA3B0630();
  }
  else
  {
    sub_1CA3B0630();
    sub_1CA3B0620();
  }
  sub_1CA3B0630();
  if (*(unsigned char *)(v1 + 104) == 1)
  {
    sub_1CA3B0630();
  }
  else
  {
    sub_1CA3B0630();
    sub_1CA3B0620();
  }
  return sub_1CA3B0630();
}

uint64_t NLIntent.hashValue.getter()
{
  sub_1CA3B0610();
  NLIntent.hash(into:)((uint64_t)v1);
  return sub_1CA3B0660();
}

uint64_t sub_1CA250314()
{
  sub_1CA3B0610();
  NLIntent.hash(into:)((uint64_t)v1);
  return sub_1CA3B0660();
}

uint64_t sub_1CA250358()
{
  sub_1CA3B0610();
  NLIntent.hash(into:)((uint64_t)v1);
  return sub_1CA3B0660();
}

uint64_t static NLState.== infix(_:_:)()
{
  return 1;
}

uint64_t NLState.hashValue.getter()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA2503DC()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA250414()
{
  return sub_1CA3B0660();
}

BOOL static MitigatorClassification.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MitigatorClassification.hash(into:)()
{
  return sub_1CA3B0620();
}

void *static MitigatorClassification.allCases.getter()
{
  return &unk_1F2460688;
}

uint64_t MitigatorClassification.hashValue.getter()
{
  return sub_1CA3B0660();
}

void sub_1CA2504DC(void *a1@<X8>)
{
  *a1 = &unk_1F24601A0;
}

BOOL static MetaDomainAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MetaDomainAction.hash(into:)()
{
  return sub_1CA3B0620();
}

void *static MetaDomainAction.allCases.getter()
{
  return &unk_1F24606B0;
}

uint64_t MetaDomainAction.hashValue.getter()
{
  return sub_1CA3B0660();
}

void sub_1CA250584(void *a1@<X8>)
{
  *a1 = &unk_1F2460178;
}

uint64_t _s12SiriOntology8NLIntentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)a1, v4);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a2, v4, v5) & 1) == 0) {
    return 0;
  }
  char v6 = *(unsigned char *)(a2 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    if (!*(unsigned char *)(a2 + 48)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a2 + 64);
  if (!v7)
  {
    if (v8) {
      return 0;
    }
    goto LABEL_15;
  }
  if (!v8) {
    return 0;
  }
  if (*(void *)(a1 + 56) == *(void *)(a2 + 56) && v7 == v8 || (v9 = sub_1CA3B0560(), uint64_t result = 0, (v9 & 1) != 0))
  {
LABEL_15:
    if (*(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
      || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
      || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74))
    {
      return 0;
    }
    char v11 = *(unsigned char *)(a2 + 88);
    if (*(unsigned char *)(a1 + 88))
    {
      if (!*(unsigned char *)(a2 + 88)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 80) != *(void *)(a2 + 80)) {
        char v11 = 1;
      }
      if (v11) {
        return 0;
      }
    }
    if (*(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89))
    {
      char v12 = *(unsigned char *)(a2 + 104);
      if (*(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(a2 + 104)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + 96) != *(void *)(a2 + 96)) {
          char v12 = 1;
        }
        if (v12) {
          return 0;
        }
      }
      if (*(unsigned char *)(a1 + 105))
      {
        if (*(unsigned char *)(a2 + 105)) {
          return 1;
        }
      }
      else if ((*(unsigned char *)(a2 + 105) & 1) == 0)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

char *sub_1CA250718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  char v6 = (void *)(a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v9 = v6[3];
    uint64_t v10 = v6[4];
    __swift_project_boxed_opaque_existential_1(v6, v9);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10) == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v13 = sub_1CA3B0560();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        goto LABEL_4;
      }
    }
    sub_1C9F4544C((uint64_t)v6, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB30);
    if (swift_dynamicCast() && (void)v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_1C9F713E8(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v15 = *((void *)v7 + 2);
      unint64_t v14 = *((void *)v7 + 3);
      long long v16 = v20;
      if (v15 >= v14 >> 1)
      {
        long long v17 = sub_1C9F713E8((char *)(v14 > 1), v15 + 1, 1, v7);
        long long v16 = v20;
        uint64_t v7 = v17;
      }
      *((void *)v7 + 2) = v15 + 1;
      uint64_t v8 = &v7[32 * v15];
      *((void *)v8 + 4) = v19;
      *(_OWORD *)(v8 + 40) = v16;
      *((void *)v8 + 7) = v21;
    }
LABEL_4:
    v6 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_1CA2508F4()
{
  unint64_t result = qword_1EA5DF4E8;
  if (!qword_1EA5DF4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4E8);
  }
  return result;
}

unint64_t sub_1CA25094C()
{
  unint64_t result = qword_1EA5DF4F0;
  if (!qword_1EA5DF4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4F0);
  }
  return result;
}

unint64_t sub_1CA2509A4()
{
  unint64_t result = qword_1EA5DF4F8;
  if (!qword_1EA5DF4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF4F8);
  }
  return result;
}

uint64_t sub_1CA2509F8()
{
  return sub_1C9F5F8F8(&qword_1EA5DF500, &qword_1EA5DF508);
}

unint64_t sub_1CA250A24()
{
  unint64_t result = qword_1EA5DF510;
  if (!qword_1EA5DF510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF510);
  }
  return result;
}

uint64_t sub_1CA250A78()
{
  return sub_1C9F5F8F8(&qword_1EA5DF518, &qword_1EA5DF520);
}

uint64_t destroy for NLIntent(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NLIntent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NLIntent(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  uint64_t v5 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v6 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for NLIntent(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NLIntent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NLIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NLIntent()
{
  return &type metadata for NLIntent;
}

ValueMetadata *type metadata accessor for NLState()
{
  return &type metadata for NLState;
}

unsigned char *storeEnumTagSinglePayload for MitigatorClassification(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA250F5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MitigatorClassification()
{
  return &type metadata for MitigatorClassification;
}

unsigned char *storeEnumTagSinglePayload for MetaDomainAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA251060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetaDomainAction()
{
  return &type metadata for MetaDomainAction;
}

BOOL Siri_Nl_Core_Protocol_NluResponse.hasRequestID.getter()
{
  return sub_1CA252118(&qword_1EA5D7080, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DF5C8);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.requestID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1EA5D7080);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1CA252C58((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1C9F40EEC((uint64_t)v5, &qword_1EA5D7080);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.requestID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_1EA5D7080);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1CA252C58((uint64_t)v5, (uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_1C9F40EEC((uint64_t)v5, &qword_1EA5D7080);
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DF5A8);
}

uint64_t sub_1CA2513EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC(a1 + *(int *)(v7 + 24), (uint64_t)v6, &qword_1EA5D7080);
  uint64_t v8 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return sub_1CA252C58((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v9 = (char *)a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_1C9F40EEC((uint64_t)v6, &qword_1EA5D7080);
}

uint64_t sub_1CA251560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CA25319C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  sub_1C9F40EEC(v8, &qword_1EA5D7080);
  sub_1CA252C58((uint64_t)v7, v8, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.requestID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  sub_1C9F40EEC(v3, &qword_1EA5D7080);
  sub_1CA252C58(a1, v3, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Siri_Nl_Core_Protocol_NluRequest.requestID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_1C9F3DBCC(v1 + v11, (uint64_t)v5, &qword_1EA5D7080);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    _OWORD v10[2] = 0;
    v10[3] = 0xE000000000000000;
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 28);
    uint64_t v13 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5D7080);
  }
  else
  {
    sub_1CA252C58((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  return sub_1CA251914;
}

void sub_1CA251914(uint64_t a1, char a2)
{
}

BOOL Siri_Nl_Core_Protocol_NluRequest.hasRequestID.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_1EA5D7080);
  uint64_t v5 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1C9F40EEC((uint64_t)v3, &qword_1EA5D7080);
  return v6;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluRequest.clearRequestID()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 24);
  sub_1C9F40EEC(v1, &qword_1EA5D7080);
  uint64_t v2 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.currentTurnInput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1EA5DF558);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1CA252C58((uint64_t)v5, a1, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1EA5D3B38 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1EA5DDD60;
  swift_retain();
  return sub_1C9F40EEC((uint64_t)v5, &qword_1EA5DF558);
}

uint64_t sub_1CA251C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC(a1 + *(int *)(v7 + 28), (uint64_t)v6, &qword_1EA5DF558);
  uint64_t v8 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return sub_1CA252C58((uint64_t)v6, a2, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v9 = *(int *)(v8 + 20);
  if (qword_1EA5D3B38 != -1) {
    swift_once();
  }
  *(void *)(a2 + v9) = qword_1EA5DDD60;
  swift_retain();
  return sub_1C9F40EEC((uint64_t)v6, &qword_1EA5DF558);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.currentTurnInput.setter(uint64_t a1)
{
  return sub_1CA252794(a1, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EA5DF558, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
}

void (*Siri_Nl_Core_Protocol_NluRequest.currentTurnInput.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1C9F3DBCC(v1 + v11, (uint64_t)v5, &qword_1EA5DF558);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_1EA5D3B38 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_1EA5DDD60;
    swift_retain();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5DF558);
  }
  else
  {
    sub_1CA252C58((uint64_t)v5, (uint64_t)v10, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  }
  return sub_1CA251F88;
}

void sub_1CA251F88(uint64_t a1, char a2)
{
}

void sub_1CA251FBC(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    sub_1CA25319C(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a4);
    sub_1C9F40EEC(v14, a3);
    sub_1CA252C58((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    sub_1CA2574B4((uint64_t)v10, a5);
  }
  else
  {
    sub_1C9F40EEC(**(void **)a1 + v8, a3);
    sub_1CA252C58((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);
  free(v7);
}

BOOL Siri_Nl_Core_Protocol_NluRequest.hasCurrentTurnInput.getter()
{
  return sub_1CA252118(&qword_1EA5DF558, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
}

BOOL sub_1CA252118(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_1C9F3DBCC(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_1C9F40EEC((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluRequest.clearCurrentTurnInput()()
{
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.previousTurnInputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.previousTurnInputs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_NluRequest.previousTurnInputs.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 20);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0) + 20);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_NluRequest.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  uint64_t v2 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t sub_1CA2524B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC(a1 + *(int *)(v7 + 28), (uint64_t)v6, &qword_1EA5D7080);
  uint64_t v8 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return sub_1CA252C58((uint64_t)v6, (uint64_t)a2, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  size_t v9 = (char *)a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_1C9F40EEC((uint64_t)v6, &qword_1EA5D7080);
}

uint64_t sub_1CA252628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t *a8)
{
  uint64_t v13 = a5(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v16 = (char *)&v19 - v15;
  sub_1CA25319C(a1, (uint64_t)&v19 - v15, a6);
  uint64_t v17 = a2 + *(int *)(a7(0) + 28);
  sub_1C9F40EEC(v17, a8);
  sub_1CA252C58((uint64_t)v16, v17, a6);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.requestID.setter(uint64_t a1)
{
  return sub_1CA252794(a1, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EA5D7080, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
}

uint64_t sub_1CA252794(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  sub_1C9F40EEC(v10, a3);
  sub_1CA252C58(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*Siri_Nl_Core_Protocol_NluResponse.requestID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_1C9F3DBCC(v1 + v11, (uint64_t)v5, &qword_1EA5D7080);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    _OWORD v10[2] = 0;
    v10[3] = 0xE000000000000000;
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 28);
    uint64_t v13 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5D7080);
  }
  else
  {
    sub_1CA252C58((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  }
  return sub_1CA251914;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluResponse.clearRequestID()()
{
}

uint64_t sub_1CA252A68(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  sub_1C9F40EEC(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t (*Siri_Nl_Core_Protocol_NluResponse.parses.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.responseStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1EA5DF560);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1CA252C58((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  return sub_1C9F40EEC((uint64_t)v5, &qword_1EA5DF560);
}

uint64_t sub_1CA252C58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CA252CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC(a1 + *(int *)(v7 + 32), (uint64_t)v6, &qword_1EA5DF560);
  uint64_t v8 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return sub_1CA252C58((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  return sub_1C9F40EEC((uint64_t)v6, &qword_1EA5DF560);
}

uint64_t sub_1CA252DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CA25319C(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  sub_1C9F40EEC(v8, &qword_1EA5DF560);
  sub_1CA252C58((uint64_t)v7, v8, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.responseStatus.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  sub_1C9F40EEC(v3, &qword_1EA5DF560);
  sub_1CA252C58(a1, v3, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Siri_Nl_Core_Protocol_NluResponse.responseStatus.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_1C9F3DBCC(v1 + v11, (uint64_t)v5, &qword_1EA5DF560);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(void *)uint64_t v10 = 0;
    v10[8] = 1;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = 0xE000000000000000;
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5DF560);
  }
  else
  {
    sub_1CA252C58((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  }
  return sub_1CA253168;
}

void sub_1CA253168(uint64_t a1, char a2)
{
}

uint64_t sub_1CA25319C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL Siri_Nl_Core_Protocol_NluResponse.hasResponseStatus.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC(v0 + *(int *)(v4 + 32), (uint64_t)v3, &qword_1EA5DF560);
  uint64_t v5 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1C9F40EEC((uint64_t)v3, &qword_1EA5DF560);
  return v6;
}

Swift::Void __swiftcall Siri_Nl_Core_Protocol_NluResponse.clearResponseStatus()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 32);
  sub_1C9F40EEC(v1, &qword_1EA5DF560);
  uint64_t v2 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.repetitionResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.repetitionResults.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Siri_Nl_Core_Protocol_NluResponse.repetitionResults.modify())()
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 24);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0) + 24);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Siri_Nl_Core_Protocol_NluResponse.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = v2;
  uint64_t v3 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 28);
  uint64_t v5 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  BOOL v6 = (char *)a1 + *(int *)(v3 + 32);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t static Siri_Nl_Core_Protocol_NluRequest.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_1CA253600()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF528);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF528);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "request_id";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA8];
  uint64_t v8 = sub_1CA3AFD50();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "current_turn_input";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "previous_turn_inputs";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Siri_Nl_Core_Protocol_NluRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3D70, (uint64_t)qword_1EA5DF528, a1);
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        sub_1CA253A0C();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        sub_1CA25395C();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = sub_1CA3AFAB0();
    }
    type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
    sub_1CA253F40(&qword_1EA5DE4A0, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    uint64_t v4 = v3;
    sub_1CA3AFBE0();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1CA25395C()
{
  return sub_1CA3AFBF0();
}

uint64_t sub_1CA253A0C()
{
  return sub_1CA3AFBF0();
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  uint64_t v24 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v22 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v21 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC(v5 + *(int *)(v23 + 24), (uint64_t)v12, &qword_1EA5D7080);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1C9F40EEC((uint64_t)v12, &qword_1EA5D7080);
    uint64_t v17 = v5;
    uint64_t v18 = v27;
  }
  else
  {
    sub_1CA252C58((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    sub_1CA253F40(&qword_1EA5DF318, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    sub_1CA3AFD40();
    uint64_t result = sub_1CA2574B4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    uint64_t v17 = v5;
    uint64_t v18 = v27;
    if (v4) {
      return result;
    }
  }
  sub_1C9F3DBCC(v17 + *(int *)(v23 + 28), (uint64_t)v8, &qword_1EA5DF558);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v18) == 1)
  {
    sub_1C9F40EEC((uint64_t)v8, &qword_1EA5DF558);
  }
  else
  {
    uint64_t v20 = v21;
    sub_1CA252C58((uint64_t)v8, v21, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    sub_1CA253F40(&qword_1EA5DE4A0, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    sub_1CA3AFD40();
    uint64_t result = sub_1CA2574B4(v20, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v17 + 16)) {
    return sub_1CA3AFA00();
  }
  sub_1CA253F40(&qword_1EA5DE4A0, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
  uint64_t result = sub_1CA3AFD30();
  if (!v4) {
    return sub_1CA3AFA00();
  }
  return result;
}

uint64_t sub_1CA253F40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_NluRequest.hashValue.getter()
{
  return sub_1CA254D60((void (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EA5DF568, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1CA253FD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x1E4FBC860];
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t sub_1CA2540B4()
{
  return 0xD000000000000020;
}

uint64_t sub_1CA2540D0()
{
  return Siri_Nl_Core_Protocol_NluRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA2540E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nl_Core_Protocol_NluRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1CA254100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA253F40(&qword_1EA5DF5E8, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA25417C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3D70, (uint64_t)qword_1EA5DF528, a1);
}

uint64_t sub_1CA2541A0(uint64_t a1)
{
  uint64_t v2 = sub_1CA253F40(&qword_1EA5DF580, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA25420C()
{
  sub_1CA253F40(&qword_1EA5DF580, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
  return sub_1CA3AFC40();
}

unint64_t static Siri_Nl_Core_Protocol_NluResponse.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t sub_1CA2542A8()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF540);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF540);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C1B90;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "request_id";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA8];
  uint64_t v8 = sub_1CA3AFD50();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "parses";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "response_status";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "repetition_results";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Siri_Nl_Core_Protocol_NluResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3D78, (uint64_t)qword_1EA5DF540, a1);
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          sub_1CA2546C0();
          goto LABEL_5;
        case 2:
          type metadata accessor for Siri_Nl_Core_Protocol_UserParse(0);
          sub_1CA253F40(&qword_1EA5DE510, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UserParse);
          goto LABEL_12;
        case 3:
          uint64_t v4 = v3;
          sub_1CA254770();
          goto LABEL_5;
        case 4:
          type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult(0);
          sub_1CA253F40(&qword_1EA5DE288, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult);
LABEL_12:
          uint64_t v4 = v3;
          sub_1CA3AFBE0();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t sub_1CA2546C0()
{
  return sub_1CA3AFBF0();
}

uint64_t sub_1CA254770()
{
  return sub_1CA3AFBF0();
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v24 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v21 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v20 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v19 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC((uint64_t)v3 + *(int *)(v23 + 28), (uint64_t)v10, &qword_1EA5D7080);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1C9F40EEC((uint64_t)v10, &qword_1EA5D7080);
  }
  else
  {
    sub_1CA252C58((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    sub_1CA253F40(&qword_1EA5DF318, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    sub_1CA3AFD40();
    uint64_t result = sub_1CA2574B4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*v3 + 16)
    || (type metadata accessor for Siri_Nl_Core_Protocol_UserParse(0),
        sub_1CA253F40(&qword_1EA5DE510, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_UserParse), uint64_t result = sub_1CA3AFD30(), !v4))
  {
    uint64_t v16 = v21;
    sub_1C9F3DBCC((uint64_t)v3 + *(int *)(v23 + 32), v21, &qword_1EA5DF560);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v22) == 1)
    {
      sub_1C9F40EEC(v16, &qword_1EA5DF560);
    }
    else
    {
      uint64_t v17 = v16;
      uint64_t v18 = v19;
      sub_1CA252C58(v17, v19, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      sub_1CA253F40(&qword_1EA5D7BF8, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      sub_1CA3AFD40();
      uint64_t result = sub_1CA2574B4(v18, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      if (v4) {
        return result;
      }
    }
    if (!*(void *)(v3[1] + 16)) {
      return sub_1CA3AFA00();
    }
    type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult(0);
    sub_1CA253F40(&qword_1EA5DE288, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RepetitionResult);
    uint64_t result = sub_1CA3AFD30();
    if (!v4) {
      return sub_1CA3AFA00();
    }
  }
  return result;
}

uint64_t Siri_Nl_Core_Protocol_NluResponse.hashValue.getter()
{
  return sub_1CA254D60((void (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EA5DF570, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1CA254D60(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA254DE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a2 = MEMORY[0x1E4FBC860];
  a2[1] = v4;
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v8 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v7, 1, 1, v8);
}

unint64_t sub_1CA254EC8()
{
  return 0xD000000000000021;
}

uint64_t sub_1CA254EE4()
{
  return Siri_Nl_Core_Protocol_NluResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA254EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nl_Core_Protocol_NluResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1CA254F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA253F40(&qword_1EA5DF5E0, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA254F90@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3D78, (uint64_t)qword_1EA5DF540, a1);
}

uint64_t sub_1CA254FB4(uint64_t a1)
{
  uint64_t v2 = sub_1CA253F40(&qword_1EA5DF598, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA255020()
{
  sub_1CA253F40(&qword_1EA5DF598, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
  return sub_1CA3AFC40();
}

uint64_t _s12SiriOntology0A29_Nl_Core_Protocol_NluResponseV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v2 = sub_1CA3AFA20();
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  char v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  v62 = (char *)&v61 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x1F4188790](v6);
  BOOL v66 = (uint64_t *)((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF5F0);
  MEMORY[0x1F4188790](v68);
  uint64_t v72 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v67 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v74 = (uint64_t)&v61 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v69 = (uint64_t)&v61 - v14;
  uint64_t v15 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF5F8);
  uint64_t v20 = v19 - 8;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v61 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v61 - v30;
  uint64_t v32 = type metadata accessor for Siri_Nl_Core_Protocol_NluResponse(0);
  sub_1C9F3DBCC((uint64_t)v75 + *(int *)(v32 + 28), (uint64_t)v31, &qword_1EA5D7080);
  uint64_t v73 = v32;
  sub_1C9F3DBCC((uint64_t)v76 + *(int *)(v32 + 28), (uint64_t)v29, &qword_1EA5D7080);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_1C9F3DBCC((uint64_t)v31, (uint64_t)v22, &qword_1EA5D7080);
  sub_1C9F3DBCC((uint64_t)v29, v33, &qword_1EA5D7080);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    sub_1C9F40EEC((uint64_t)v29, &qword_1EA5D7080);
    sub_1C9F40EEC((uint64_t)v31, &qword_1EA5D7080);
    if (v34(v33, 1, v15) == 1)
    {
      sub_1C9F40EEC((uint64_t)v22, &qword_1EA5D7080);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v35 = &qword_1EA5DF5F8;
    uint64_t v36 = (uint64_t)v22;
LABEL_7:
    sub_1C9F40EEC(v36, v35);
LABEL_19:
    char v58 = 0;
    return v58 & 1;
  }
  sub_1C9F3DBCC((uint64_t)v22, (uint64_t)v26, &qword_1EA5D7080);
  if (v34(v33, 1, v15) == 1)
  {
    sub_1C9F40EEC((uint64_t)v29, &qword_1EA5D7080);
    sub_1C9F40EEC((uint64_t)v31, &qword_1EA5D7080);
    sub_1CA2574B4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    goto LABEL_6;
  }
  sub_1CA252C58(v33, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  char v37 = static Siri_Nl_Core_Protocol_RequestID.== infix(_:_:)(v26, v18);
  sub_1CA2574B4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C9F40EEC((uint64_t)v29, &qword_1EA5D7080);
  sub_1C9F40EEC((uint64_t)v31, &qword_1EA5D7080);
  sub_1CA2574B4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C9F40EEC((uint64_t)v22, &qword_1EA5D7080);
  if ((v37 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v39 = v75;
  uint64_t v38 = v76;
  if ((sub_1C9F4C7A4(*v75, *v76) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v40 = v73;
  uint64_t v41 = v69;
  sub_1C9F3DBCC((uint64_t)v39 + *(int *)(v73 + 32), v69, &qword_1EA5DF560);
  uint64_t v42 = v74;
  sub_1C9F3DBCC((uint64_t)v38 + *(int *)(v40 + 32), v74, &qword_1EA5DF560);
  uint64_t v43 = v72;
  uint64_t v44 = v72 + *(int *)(v68 + 48);
  sub_1C9F3DBCC(v41, v72, &qword_1EA5DF560);
  sub_1C9F3DBCC(v42, v44, &qword_1EA5DF560);
  uint64_t v45 = v71;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v46(v43, 1, v71) == 1)
  {
    sub_1C9F40EEC(v42, &qword_1EA5DF560);
    sub_1C9F40EEC(v41, &qword_1EA5DF560);
    if (v46(v44, 1, v45) == 1)
    {
      sub_1C9F40EEC(v43, &qword_1EA5DF560);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v47 = v67;
  sub_1C9F3DBCC(v43, (uint64_t)v67, &qword_1EA5DF560);
  if (v46(v44, 1, v45) == 1)
  {
    sub_1C9F40EEC(v74, &qword_1EA5DF560);
    sub_1C9F40EEC(v41, &qword_1EA5DF560);
    sub_1CA2574B4((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
LABEL_15:
    uint64_t v35 = &qword_1EA5DF5F0;
    uint64_t v36 = v43;
    goto LABEL_7;
  }
  uint64_t v48 = v66;
  sub_1CA252C58(v44, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  char v49 = _s12SiriOntology0A32_Nl_Core_Protocol_ResponseStatusV2eeoiySbAC_ACtFZ_0(v47, v48);
  sub_1CA2574B4((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  sub_1C9F40EEC(v74, &qword_1EA5DF560);
  sub_1C9F40EEC(v41, &qword_1EA5DF560);
  sub_1CA2574B4((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
  sub_1C9F40EEC(v43, &qword_1EA5DF560);
  if ((v49 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_17:
  if ((sub_1C9F4C7F8(v39[1], v38[1]) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v50 = v73;
  char v51 = (char *)v39 + *(int *)(v73 + 24);
  uint64_t v53 = v64;
  uint64_t v52 = v65;
  char v54 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  unint64_t v55 = v62;
  v54(v62, v51, v65);
  unint64_t v56 = (char *)v38 + *(int *)(v50 + 24);
  char v57 = v63;
  v54(v63, v56, v52);
  sub_1CA253F40(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
  char v58 = sub_1CA3AFDD0();
  unint64_t v59 = *(void (**)(char *, uint64_t))(v53 + 8);
  v59(v57, v52);
  v59(v55, v52);
  return v58 & 1;
}

uint64_t _s12SiriOntology0A28_Nl_Core_Protocol_NluRequestV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v2 = sub_1CA3AFA20();
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  char v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  v62 = (char *)&v61 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v66 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF600);
  MEMORY[0x1F4188790](v68);
  uint64_t v72 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v74 = (uint64_t)&v61 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v69 = (uint64_t)&v61 - v14;
  uint64_t v15 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF5F8);
  uint64_t v20 = v19 - 8;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v61 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v61 - v30;
  uint64_t v32 = type metadata accessor for Siri_Nl_Core_Protocol_NluRequest(0);
  sub_1C9F3DBCC((uint64_t)v75 + *(int *)(v32 + 24), (uint64_t)v31, &qword_1EA5D7080);
  uint64_t v73 = v32;
  sub_1C9F3DBCC((uint64_t)v76 + *(int *)(v32 + 24), (uint64_t)v29, &qword_1EA5D7080);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_1C9F3DBCC((uint64_t)v31, (uint64_t)v22, &qword_1EA5D7080);
  sub_1C9F3DBCC((uint64_t)v29, v33, &qword_1EA5D7080);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    sub_1C9F40EEC((uint64_t)v29, &qword_1EA5D7080);
    sub_1C9F40EEC((uint64_t)v31, &qword_1EA5D7080);
    if (v34(v33, 1, v15) == 1)
    {
      sub_1C9F40EEC((uint64_t)v22, &qword_1EA5D7080);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v35 = &qword_1EA5DF5F8;
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    sub_1C9F40EEC(v36, v35);
    goto LABEL_15;
  }
  sub_1C9F3DBCC((uint64_t)v22, (uint64_t)v26, &qword_1EA5D7080);
  if (v34(v33, 1, v15) == 1)
  {
    sub_1C9F40EEC((uint64_t)v29, &qword_1EA5D7080);
    sub_1C9F40EEC((uint64_t)v31, &qword_1EA5D7080);
    sub_1CA2574B4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    goto LABEL_6;
  }
  sub_1CA252C58(v33, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  char v37 = static Siri_Nl_Core_Protocol_RequestID.== infix(_:_:)(v26, v18);
  sub_1CA2574B4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C9F40EEC((uint64_t)v29, &qword_1EA5D7080);
  sub_1C9F40EEC((uint64_t)v31, &qword_1EA5D7080);
  sub_1CA2574B4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
  sub_1C9F40EEC((uint64_t)v22, &qword_1EA5D7080);
  if ((v37 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v38 = v73;
  uint64_t v39 = v75;
  uint64_t v40 = v69;
  sub_1C9F3DBCC((uint64_t)v75 + *(int *)(v73 + 28), v69, &qword_1EA5DF558);
  uint64_t v41 = v76;
  uint64_t v42 = v74;
  sub_1C9F3DBCC((uint64_t)v76 + *(int *)(v38 + 28), v74, &qword_1EA5DF558);
  uint64_t v43 = v72;
  uint64_t v44 = v72 + *(int *)(v68 + 48);
  sub_1C9F3DBCC(v40, v72, &qword_1EA5DF558);
  sub_1C9F3DBCC(v42, v44, &qword_1EA5DF558);
  uint64_t v45 = v71;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  if (v46(v43, 1, v71) != 1)
  {
    uint64_t v47 = v67;
    sub_1C9F3DBCC(v43, v67, &qword_1EA5DF558);
    if (v46(v44, 1, v45) != 1)
    {
      uint64_t v50 = v66;
      sub_1CA252C58(v44, v66, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      char v51 = static Siri_Nl_Core_Protocol_TurnInput.== infix(_:_:)(v47, v50);
      sub_1CA2574B4(v50, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      sub_1C9F40EEC(v74, &qword_1EA5DF558);
      sub_1C9F40EEC(v40, &qword_1EA5DF558);
      sub_1CA2574B4(v47, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      sub_1C9F40EEC(v43, &qword_1EA5DF558);
      if ((v51 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    sub_1C9F40EEC(v74, &qword_1EA5DF558);
    sub_1C9F40EEC(v40, &qword_1EA5DF558);
    sub_1CA2574B4(v47, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    goto LABEL_13;
  }
  sub_1C9F40EEC(v42, &qword_1EA5DF558);
  sub_1C9F40EEC(v40, &qword_1EA5DF558);
  if (v46(v44, 1, v45) != 1)
  {
LABEL_13:
    uint64_t v35 = &qword_1EA5DF600;
    uint64_t v36 = v43;
    goto LABEL_14;
  }
  sub_1C9F40EEC(v43, &qword_1EA5DF558);
LABEL_18:
  if (sub_1C9F4CAA8(*v39, *v41))
  {
    uint64_t v52 = v73;
    uint64_t v53 = (char *)v39 + *(int *)(v73 + 20);
    uint64_t v55 = v64;
    uint64_t v54 = v65;
    unint64_t v56 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
    char v57 = v62;
    v56(v62, v53, v65);
    char v58 = (char *)v41 + *(int *)(v52 + 20);
    unint64_t v59 = v63;
    v56(v63, v58, v54);
    sub_1CA253F40(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
    char v48 = sub_1CA3AFDD0();
    unint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
    v60(v59, v54);
    v60(v57, v54);
    return v48 & 1;
  }
LABEL_15:
  char v48 = 0;
  return v48 & 1;
}

uint64_t sub_1CA256178()
{
  return sub_1CA253F40(&qword_1EA5DF578, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1CA2561C0()
{
  return sub_1CA253F40(&qword_1EA5DF580, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1CA256208()
{
  return sub_1CA253F40(&qword_1EA5DF568, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1CA256250()
{
  return sub_1CA253F40(&qword_1EA5DF588, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluRequest);
}

uint64_t sub_1CA256298()
{
  return sub_1CA253F40(&qword_1EA5DF590, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1CA2562E0()
{
  return sub_1CA253F40(&qword_1EA5DF598, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1CA256328()
{
  return sub_1CA253F40(&qword_1EA5DF570, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1CA256370()
{
  return sub_1CA253F40(&qword_1EA5DF5A0, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_NluResponse);
}

uint64_t sub_1CA2563C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA252628(a1, a2, a3, a4, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput, type metadata accessor for Siri_Nl_Core_Protocol_NluRequest, &qword_1EA5DF558);
}

uint64_t sub_1CA256424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA252628(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID, type metadata accessor for Siri_Nl_Core_Protocol_NluResponse, &qword_1EA5D7080);
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_NluRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1CA3AFA20();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v38 = v17;
      uint64_t v19 = v15[1];
      void *v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v11;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      uint64_t v22 = *(int *)(v16 + 24);
      uint64_t v40 = v12;
      uint64_t v23 = (char *)v14 + v22;
      uint64_t v39 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40(v23, v39, v20);
      uint64_t v24 = *(int *)(v16 + 28);
      uint64_t v25 = (_OWORD *)((char *)v14 + v24);
      uint64_t v26 = (_OWORD *)((char *)v15 + v24);
      uint64_t v27 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        _OWORD *v25 = *v26;
        *((void *)v25 + 2) = *((void *)v26 + 2);
        *((unsigned char *)v25 + 24) = *((unsigned char *)v26 + 24);
        v40((char *)v25 + *(int *)(v27 + 28), (char *)v26 + *(int *)(v27 + 28), v20);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v14, 0, 1, v16);
      uint64_t v11 = v20;
      uint64_t v12 = v40;
    }
    uint64_t v30 = a3[7];
    uint64_t v31 = (char *)v7 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v12(v31, v32, v11);
      *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
      uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
      swift_retain();
      v36(v31, 0, 1, v33);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nl_Core_Protocol_NluRequest(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 24), v5);
    uint64_t v9 = v7 + *(int *)(v8 + 28);
    uint64_t v10 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10)) {
      v6(v9 + *(int *)(v10 + 28), v5);
    }
  }
  uint64_t v11 = a1 + a2[7];
  uint64_t v12 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    v6(v11, v5);
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for Siri_Nl_Core_Protocol_NluRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(v3 + 24);
  uint64_t v12 = (void *)((char *)v5 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    char v37 = v5;
    uint64_t v38 = v3;
    uint64_t v17 = v13[1];
    void *v12 = *v13;
    v12[1] = v17;
    uint64_t v18 = v9;
    uint64_t v19 = v13[3];
    v12[2] = v13[2];
    v12[3] = v19;
    uint64_t v20 = *(int *)(v14 + 24);
    uint64_t v39 = v10;
    uint64_t v21 = (char *)v12 + v20;
    uint64_t v22 = (char *)v13 + v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39(v21, v22, v18);
    uint64_t v23 = *(int *)(v14 + 28);
    uint64_t v24 = (_OWORD *)((char *)v12 + v23);
    uint64_t v25 = (_OWORD *)((char *)v13 + v23);
    uint64_t v26 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      _OWORD *v24 = *v25;
      *((void *)v24 + 2) = *((void *)v25 + 2);
      *((unsigned char *)v24 + 24) = *((unsigned char *)v25 + 24);
      v39((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v18);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    uint64_t v9 = v18;
    uint64_t v10 = v39;
    uint64_t v3 = v38;
    uint64_t v5 = v37;
  }
  uint64_t v29 = *(int *)(v3 + 28);
  uint64_t v30 = (char *)v5 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v10(v30, v31, v9);
    *(void *)&v30[*(int *)(v32 + 20)] = *(void *)&v31[*(int *)(v32 + 20)];
    uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
    swift_retain();
    v35(v30, 0, 1, v32);
  }
  return v5;
}

void *assignWithCopy for Siri_Nl_Core_Protocol_NluRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v59 = *(void *)(v9 - 8);
  char v58 = *(void (**)(char *, char *, uint64_t))(v59 + 24);
  v58(v7, v8, v9);
  uint64_t v60 = a3;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = (char *)v4 + v10;
  uint64_t v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v11 + 2) = *((void *)v12 + 2);
      *((void *)v11 + 3) = *((void *)v12 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v58(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      uint64_t v33 = *(int *)(v13 + 28);
      uint64_t v34 = (uint64_t)&v11[v33];
      uint64_t v35 = &v12[v33];
      uint64_t v36 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1, v36);
      int v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *((void *)v35 + 1);
          uint64_t v41 = *((void *)v35 + 2);
          *(unsigned char *)(v34 + 24) = v35[24];
          *(void *)(v34 + 16) = v41;
          (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v34 + *(int *)(v36 + 28), &v35[*(int *)(v36 + 28)], v9);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *((void *)v35 + 1);
          uint64_t v54 = *((void *)v35 + 2);
          *(unsigned char *)(v34 + 24) = v35[24];
          *(void *)(v34 + 16) = v54;
          v58((char *)(v34 + *(int *)(v36 + 28)), &v35[*(int *)(v36 + 28)], v9);
          goto LABEL_14;
        }
        sub_1CA2574B4(v34, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
      }
      size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070) - 8) + 64);
      uint64_t v31 = (void *)v34;
      uint64_t v32 = v35;
LABEL_8:
      memcpy(v31, v32, v30);
      goto LABEL_14;
    }
    sub_1CA2574B4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080) - 8) + 64);
    uint64_t v31 = v11;
    uint64_t v32 = v12;
    goto LABEL_8;
  }
  if (v17) {
    goto LABEL_7;
  }
  uint64_t v55 = v5;
  unint64_t v56 = v4;
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  *((void *)v11 + 2) = *((void *)v12 + 2);
  *((void *)v11 + 3) = *((void *)v12 + 3);
  uint64_t v18 = *(int *)(v13 + 24);
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = v20;
  uint64_t v23 = v9;
  v21(v19, v22, v9);
  uint64_t v24 = *(int *)(v13 + 28);
  uint64_t v25 = &v11[v24];
  uint64_t v26 = &v12[v24];
  uint64_t v27 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v57 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = *((void *)v26 + 1);
    uint64_t v42 = *((void *)v26 + 2);
    v25[24] = v26[24];
    *((void *)v25 + 2) = v42;
    v21(&v25[*(int *)(v27 + 28)], &v26[*(int *)(v27 + 28)], v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v5 = v55;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  uint64_t v4 = v56;
  uint64_t v9 = v57;
LABEL_14:
  uint64_t v43 = *(int *)(v60 + 28);
  uint64_t v44 = (char *)v5 + v43;
  uint64_t v45 = (char *)v4 + v43;
  uint64_t v46 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v47 = *(void *)(v46 - 8);
  char v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1, v46);
  int v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (!v50)
    {
      v58(v44, v45, v9);
      *(void *)&v44[*(int *)(v46 + 20)] = *(void *)&v45[*(int *)(v46 + 20)];
      swift_retain();
      swift_release();
      return v5;
    }
    sub_1CA2574B4((uint64_t)v44, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    goto LABEL_19;
  }
  if (v50)
  {
LABEL_19:
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
    memcpy(v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
    return v5;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v44, v45, v9);
  *(void *)&v44[*(int *)(v46 + 20)] = *(void *)&v45[*(int *)(v46 + 20)];
  char v51 = *(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56);
  swift_retain();
  v51(v44, 0, 1, v46);
  return v5;
}

uint64_t sub_1CA2574B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for Siri_Nl_Core_Protocol_NluRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    _OWORD *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    uint64_t v18 = *(int *)(v14 + 28);
    __dst = (_OWORD *)((char *)v12 + v18);
    uint64_t v19 = (_OWORD *)((char *)v13 + v18);
    uint64_t v31 = v10;
    uint64_t v20 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      _OWORD *__dst = *v19;
      *((void *)__dst + 2) = *((void *)v19 + 2);
      *((unsigned char *)__dst + 24) = *((unsigned char *)v19 + 24);
      v31((char *)__dst + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    uint64_t v10 = v31;
  }
  uint64_t v23 = a3[7];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v10(v24, v25, v9);
    *(void *)&v24[*(int *)(v26 + 20)] = *(void *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

void *assignWithTake for Siri_Nl_Core_Protocol_NluRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v10 = (void (**)(char *, char *))(*(void *)(v9 - 8) + 40);
  uint64_t v54 = v9;
  char v51 = *v10;
  uint64_t v52 = *(void *)(v9 - 8);
  (*v10)(v7, v8);
  uint64_t v53 = a3;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      long long v19 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v19;
      int v49 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 32);
      v49(v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v54);
      uint64_t v20 = *(int *)(v14 + 28);
      __dst = (_OWORD *)(v12 + v20);
      uint64_t v21 = (_OWORD *)((char *)v13 + v20);
      uint64_t v22 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
        memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        _OWORD *__dst = *v21;
        *((void *)__dst + 2) = *((void *)v21 + 2);
        *((unsigned char *)__dst + 24) = *((unsigned char *)v21 + 24);
        v49((uint64_t)__dst + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v54);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v18)
  {
    sub_1CA2574B4(v12, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080) - 8) + 64);
    uint64_t v26 = (void *)v12;
    uint64_t v27 = v13;
LABEL_8:
    memcpy(v26, v27, v25);
LABEL_14:
    uint64_t v38 = v54;
    goto LABEL_15;
  }
  uint64_t v28 = v13[1];
  *(void *)uint64_t v12 = *v13;
  *(void *)(v12 + 8) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = v13[3];
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v29;
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, char *, uint64_t))v51)(v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v54);
  uint64_t v30 = *(int *)(v14 + 28);
  uint64_t v31 = v12 + v30;
  uint64_t v32 = (char *)v13 + v30;
  uint64_t v33 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35((uint64_t)v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *(void *)(v31 + 16) = *((void *)v32 + 2);
      *(unsigned char *)(v31 + 24) = v32[24];
      uint64_t v38 = v54;
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v31 + *(int *)(v33 + 28), &v32[*(int *)(v33 + 28)], v54);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v37)
  {
    sub_1CA2574B4(v31, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
LABEL_25:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070) - 8) + 64);
    uint64_t v26 = (void *)v31;
    uint64_t v27 = v32;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(void *)(v31 + 16) = *((void *)v32 + 2);
  *(unsigned char *)(v31 + 24) = v32[24];
  uint64_t v38 = v54;
  ((void (*)(uint64_t, char *, uint64_t))v51)(v31 + *(int *)(v33 + 28), &v32[*(int *)(v33 + 28)], v54);
LABEL_15:
  uint64_t v39 = *(int *)(v53 + 28);
  int v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = type metadata accessor for Siri_Nl_Core_Protocol_TurnInput(0);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      ((void (*)(char *, char *, uint64_t))v51)(v40, v41, v38);
      *(void *)&v40[*(int *)(v42 + 20)] = *(void *)&v41[*(int *)(v42 + 20)];
      swift_release();
      return a1;
    }
    sub_1CA2574B4((uint64_t)v40, type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
    goto LABEL_20;
  }
  if (v46)
  {
LABEL_20:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
    memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v40, v41, v38);
  *(void *)&v40[*(int *)(v42 + 20)] = *(void *)&v41[*(int *)(v42 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA257EC0);
}

uint64_t sub_1CA257EC0(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_1CA3AFA20();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  int v17 = &a1[a3[7]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA258054);
}

char *sub_1CA258054(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_1CA3AFA20();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF558);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  int v17 = &v5[a4[7]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_1CA2581D4()
{
  sub_1CA3AFA20();
  if (v0 <= 0x3F)
  {
    sub_1CA25A248(319, &qword_1EA5DF5B8, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    if (v1 <= 0x3F)
    {
      sub_1CA25A248(319, &qword_1EA5DF5C0, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_TurnInput);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nl_Core_Protocol_NluResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1CA3AFA20();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v43 = v17;
      uint64_t v19 = v15[1];
      void *v14 = *v15;
      v14[1] = v19;
      uint64_t v20 = v15[3];
      v14[2] = v15[2];
      v14[3] = v20;
      uint64_t v21 = *(int *)(v16 + 24);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v44 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v23 = v22;
      uint64_t v24 = v44;
      uint64_t v45 = v11;
      size_t v25 = v12;
      v12(v23, v24, v11);
      uint64_t v26 = *(int *)(v16 + 28);
      uint64_t v27 = (_OWORD *)((char *)v14 + v26);
      uint64_t v28 = (_OWORD *)((char *)v15 + v26);
      uint64_t v29 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        *uint64_t v27 = *v28;
        *((void *)v27 + 2) = *((void *)v28 + 2);
        *((unsigned char *)v27 + 24) = *((unsigned char *)v28 + 24);
        v25((char *)v27 + *(int *)(v29 + 28), (char *)v28 + *(int *)(v29 + 28), v45);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v14, 0, 1, v16);
      uint64_t v12 = v25;
      uint64_t v11 = v45;
    }
    uint64_t v32 = a3[8];
    uint64_t v33 = (uint64_t *)((char *)v7 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      void *v33 = *v34;
      *((unsigned char *)v33 + 8) = *((unsigned char *)v34 + 8);
      uint64_t v38 = v34[3];
      v33[2] = v34[2];
      v33[3] = v38;
      uint64_t v39 = *(int *)(v35 + 24);
      int v40 = (char *)v33 + v39;
      uint64_t v41 = (char *)v34 + v39;
      swift_bridgeObjectRetain();
      v12(v40, v41, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nl_Core_Protocol_NluResponse(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v6 + *(int *)(v7 + 24), v5);
    uint64_t v8 = v6 + *(int *)(v7 + 28);
    uint64_t v9 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
      v14(v8 + *(int *)(v9 + 28), v5);
    }
  }
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v10 + *(int *)(v11 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
  }
  return result;
}

void *initializeWithCopy for Siri_Nl_Core_Protocol_NluResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1CA3AFA20();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = v9;
  uint64_t v13 = a3;
  v11(v8, v12, v10);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v42 = v18;
    uint64_t v43 = v13;
    uint64_t v20 = v16[1];
    void *v15 = *v16;
    v15[1] = v20;
    uint64_t v21 = v16[3];
    v15[2] = v16[2];
    v15[3] = v21;
    uint64_t v22 = *(int *)(v17 + 24);
    uint64_t v23 = (char *)v15 + v22;
    uint64_t v45 = v11;
    uint64_t v24 = (char *)v16 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = v10;
    v45(v23, v24, v10);
    uint64_t v25 = *(int *)(v17 + 28);
    uint64_t v26 = (_OWORD *)((char *)v15 + v25);
    uint64_t v27 = (_OWORD *)((char *)v16 + v25);
    uint64_t v28 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      *uint64_t v26 = *v27;
      *((void *)v26 + 2) = *((void *)v27 + 2);
      *((unsigned char *)v26 + 24) = *((unsigned char *)v27 + 24);
      v45((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v44);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v17);
    uint64_t v10 = v44;
    uint64_t v11 = v45;
    uint64_t v13 = v43;
  }
  uint64_t v31 = *(int *)(v13 + 32);
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  uint64_t v34 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    void *v32 = *v33;
    *((unsigned char *)v32 + 8) = *((unsigned char *)v33 + 8);
    uint64_t v37 = v33[3];
    v32[2] = v33[2];
    v32[3] = v37;
    uint64_t v38 = *(int *)(v34 + 24);
    uint64_t v39 = (char *)v32 + v38;
    int v40 = (char *)v33 + v38;
    swift_bridgeObjectRetain();
    v11(v39, v40, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  return a1;
}

void *assignWithCopy for Siri_Nl_Core_Protocol_NluResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v62 + 24);
  v61(v7, v8, v9);
  uint64_t v63 = a3;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      *((void *)v11 + 1) = *((void *)v12 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v11 + 2) = *((void *)v12 + 2);
      *((void *)v11 + 3) = *((void *)v12 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v61(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      uint64_t v31 = *(int *)(v13 + 28);
      uint64_t v32 = (uint64_t)&v11[v31];
      uint64_t v33 = &v12[v31];
      uint64_t v34 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = *((void *)v33 + 1);
          uint64_t v39 = *((void *)v33 + 2);
          *(unsigned char *)(v32 + 24) = v33[24];
          *(void *)(v32 + 16) = v39;
          (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v32 + *(int *)(v34 + 28), &v33[*(int *)(v34 + 28)], v9);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v38)
        {
          *(void *)uint64_t v32 = *(void *)v33;
          *(void *)(v32 + 8) = *((void *)v33 + 1);
          uint64_t v57 = *((void *)v33 + 2);
          *(unsigned char *)(v32 + 24) = v33[24];
          *(void *)(v32 + 16) = v57;
          v61((char *)(v32 + *(int *)(v34 + 28)), &v33[*(int *)(v34 + 28)], v9);
          goto LABEL_14;
        }
        sub_1CA2574B4(v32, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
      }
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070) - 8) + 64);
      uint64_t v29 = (void *)v32;
      uint64_t v30 = v33;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    sub_1CA2574B4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080) - 8) + 64);
    uint64_t v29 = v11;
    uint64_t v30 = v12;
    goto LABEL_8;
  }
  if (v17) {
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  *((void *)v11 + 2) = *((void *)v12 + 2);
  *((void *)v11 + 3) = *((void *)v12 + 3);
  uint64_t v18 = *(int *)(v13 + 24);
  char v58 = &v12[v18];
  uint64_t v59 = &v11[v18];
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v59;
  uint64_t v60 = v9;
  v19(v20, v58, v9);
  uint64_t v21 = v19;
  uint64_t v22 = *(int *)(v13 + 28);
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  uint64_t v25 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = *((void *)v24 + 1);
    uint64_t v40 = *((void *)v24 + 2);
    v23[24] = v24[24];
    *((void *)v23 + 2) = v40;
    v21(&v23[*(int *)(v25 + 28)], &v24[*(int *)(v25 + 28)], v60);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  uint64_t v9 = v60;
LABEL_14:
  uint64_t v41 = *(int *)(v63 + 32);
  uint64_t v42 = (uint64_t)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v45 = *(void *)(v44 - 8);
  int v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46((uint64_t)v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      uint64_t v56 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = v43[8];
      *(void *)uint64_t v42 = v56;
      *(void *)(v42 + 16) = *((void *)v43 + 2);
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v61((char *)(v42 + *(int *)(v44 + 24)), &v43[*(int *)(v44 + 24)], v9);
      return a1;
    }
    sub_1CA2574B4(v42, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
    goto LABEL_19;
  }
  if (v48)
  {
LABEL_19:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
    memcpy((void *)v42, v43, *(void *)(*(void *)(v54 - 8) + 64));
    return a1;
  }
  uint64_t v49 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = v43[8];
  *(void *)uint64_t v42 = v49;
  *(void *)(v42 + 16) = *((void *)v43 + 2);
  *(void *)(v42 + 24) = *((void *)v43 + 3);
  uint64_t v50 = *(int *)(v44 + 24);
  uint64_t v51 = v42 + v50;
  uint64_t v52 = &v43[v50];
  uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 16);
  swift_bridgeObjectRetain();
  v53(v51, v52, v9);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  return a1;
}

_OWORD *initializeWithTake for Siri_Nl_Core_Protocol_NluResponse(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    _OWORD *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    uint64_t v18 = *(int *)(v14 + 28);
    __dst = (_OWORD *)((char *)v12 + v18);
    uint64_t v19 = (_OWORD *)((char *)v13 + v18);
    uint64_t v31 = v10;
    uint64_t v20 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      _OWORD *__dst = *v19;
      *((void *)__dst + 2) = *((void *)v19 + 2);
      *((unsigned char *)__dst + 24) = *((unsigned char *)v19 + 24);
      v31((char *)__dst + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    uint64_t v10 = v31;
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    void *v24 = *v25;
    *((unsigned char *)v24 + 8) = *((unsigned char *)v25 + 8);
    *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
    v10((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

void *assignWithTake for Siri_Nl_Core_Protocol_NluResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v10 = (void (**)(char *, char *))(*(void *)(v9 - 8) + 40);
  uint64_t v55 = v9;
  uint64_t v52 = *v10;
  uint64_t v53 = *(void *)(v9 - 8);
  (*v10)(v7, v8);
  uint64_t v54 = a3;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Siri_Nl_Core_Protocol_RequestID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      long long v19 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v19;
      uint64_t v50 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
      v50(v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v55);
      uint64_t v20 = *(int *)(v14 + 28);
      __dst = (_OWORD *)(v12 + v20);
      uint64_t v21 = (_OWORD *)((char *)v13 + v20);
      uint64_t v22 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070);
        memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        _OWORD *__dst = *v21;
        *((void *)__dst + 2) = *((void *)v21 + 2);
        *((unsigned char *)__dst + 24) = *((unsigned char *)v21 + 24);
        v50((uint64_t)__dst + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v55);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v18)
  {
    sub_1CA2574B4(v12, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080) - 8) + 64);
    uint64_t v26 = (void *)v12;
    uint64_t v27 = v13;
LABEL_8:
    memcpy(v26, v27, v25);
LABEL_14:
    uint64_t v38 = v55;
    goto LABEL_15;
  }
  uint64_t v28 = v13[1];
  *(void *)uint64_t v12 = *v13;
  *(void *)(v12 + 8) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = v13[3];
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v29;
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, char *, uint64_t))v52)(v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v55);
  uint64_t v30 = *(int *)(v14 + 28);
  uint64_t v31 = v12 + v30;
  uint64_t v32 = (char *)v13 + v30;
  uint64_t v33 = type metadata accessor for Siri_Nl_Core_Protocol_UUID();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35((uint64_t)v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *(void *)(v31 + 16) = *((void *)v32 + 2);
      *(unsigned char *)(v31 + 24) = v32[24];
      uint64_t v38 = v55;
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v31 + *(int *)(v33 + 28), &v32[*(int *)(v33 + 28)], v55);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v37)
  {
    sub_1CA2574B4(v31, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_UUID);
LABEL_25:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7070) - 8) + 64);
    uint64_t v26 = (void *)v31;
    uint64_t v27 = v32;
    goto LABEL_8;
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(void *)(v31 + 16) = *((void *)v32 + 2);
  *(unsigned char *)(v31 + 24) = v32[24];
  uint64_t v38 = v55;
  ((void (*)(uint64_t, char *, uint64_t))v52)(v31 + *(int *)(v33 + 28), &v32[*(int *)(v33 + 28)], v55);
LABEL_15:
  uint64_t v39 = *(int *)(v54 + 32);
  uint64_t v40 = (uint64_t)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44((uint64_t)v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      *(void *)uint64_t v40 = *(void *)v41;
      *(unsigned char *)(v40 + 8) = v41[8];
      uint64_t v49 = *((void *)v41 + 3);
      *(void *)(v40 + 16) = *((void *)v41 + 2);
      *(void *)(v40 + 24) = v49;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v52)(v40 + *(int *)(v42 + 24), &v41[*(int *)(v42 + 24)], v38);
      return a1;
    }
    sub_1CA2574B4(v40, (uint64_t (*)(void))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
    goto LABEL_20;
  }
  if (v46)
  {
LABEL_20:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
    memcpy((void *)v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v40 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = v41[8];
  *(_OWORD *)(v40 + 16) = *((_OWORD *)v41 + 1);
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v40 + *(int *)(v42 + 24), &v41[*(int *)(v42 + 24)], v38);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA259DE8);
}

uint64_t sub_1CA259DE8(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_1CA3AFA20();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  int v17 = &a1[a3[8]];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for Siri_Nl_Core_Protocol_NluResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA259F7C);
}

char *sub_1CA259F7C(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_1CA3AFA20();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7080);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF560);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  int v17 = &v5[a4[8]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_1CA25A0FC()
{
  sub_1CA3AFA20();
  if (v0 <= 0x3F)
  {
    sub_1CA25A248(319, &qword_1EA5DF5B8, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_RequestID);
    if (v1 <= 0x3F)
    {
      sub_1CA25A248(319, &qword_1EA5DF5D8, (void (*)(uint64_t))type metadata accessor for Siri_Nl_Core_Protocol_ResponseStatus);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1CA25A248(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1CA3B0170();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t AddressOntologyNode.OccupantNode.__allocating_init(name:multicardinal:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  if (qword_1EA5D3D80 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1EA5DF608;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 32) = a3 & 1;
  *(void *)(v6 + 40) = v7;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t static AddressOntologyNode.OccupantNode.occupantFirstNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantLastNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantFullNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantNickNameNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantRelationshipNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantSelfReferenceNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantNamePrefixNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB08);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantNamePostfixNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB10);
  return swift_initStaticObject();
}

uint64_t static AddressOntologyNode.OccupantNode.occupantCompanyNode.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  return swift_initStaticObject();
}

uint64_t sub_1CA25A534()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFBA0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CA3C3CF0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB20);
  uint64_t inited = swift_initStaticObject();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 32) = inited;
  uint64_t v3 = swift_initStaticObject();
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = swift_initStaticObject();
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 112) = v4;
  uint64_t v5 = swift_initStaticObject();
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 152) = v5;
  uint64_t v6 = swift_initStaticObject();
  *(void *)(v0 + 216) = v1;
  *(void *)(v0 + 224) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 192) = v6;
  uint64_t v7 = swift_initStaticObject();
  *(void *)(v0 + 256) = v1;
  *(void *)(v0 + 264) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 232) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB08);
  uint64_t v9 = swift_initStaticObject();
  *(void *)(v0 + 296) = v8;
  *(void *)(v0 + 304) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 272) = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB10);
  uint64_t v11 = swift_initStaticObject();
  *(void *)(v0 + 336) = v10;
  *(void *)(v0 + 344) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 312) = v11;
  uint64_t result = swift_initStaticObject();
  *(void *)(v0 + 376) = v1;
  *(void *)(v0 + 384) = &protocol witness table for TerminalOntologyNode<A>;
  *(void *)(v0 + 352) = result;
  qword_1EA5DF608 = v0;
  return result;
}

uint64_t static AddressOntologyNode.OccupantNode.childNodes.getter()
{
  if (qword_1EA5D3D80 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t AddressOntologyNode.OccupantNode.init(name:multicardinal:)(uint64_t a1, uint64_t a2, char a3)
{
  if (qword_1EA5D3D80 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1EA5DF608;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(unsigned char *)(v3 + 32) = a3 & 1;
  *(void *)(v3 + 40) = v7;
  swift_bridgeObjectRetain();
  return v3;
}

void AddressOntologyNode.OccupantNode.__allocating_init(name:multicardinal:childNodes:)()
{
}

void AddressOntologyNode.OccupantNode.init(name:multicardinal:childNodes:)()
{
}

uint64_t AddressOntologyNode.OccupantNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AddressOntologyNode.OccupantNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AddressOntologyNode.OccupantNode()
{
  return self;
}

uint64_t method lookup function for AddressOntologyNode.OccupantNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AddressOntologyNode.OccupantNode);
}

uint64_t dispatch thunk of AddressOntologyNode.OccupantNode.__allocating_init(name:multicardinal:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E4FBC860];
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, qword_1EBC9FD60);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25A9C4(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &qword_1EA5CF780, &qword_1EA5CF770, a1);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF858);
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchingSpan.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1CA26D1E0(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1CA265C8C) & 1;
}

uint64_t Com_Apple_Siri_Product_Proto_Value.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25A9C4(type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &qword_1EA5CF590, &qword_1EA5CF580, a1);
}

uint64_t sub_1CA25A9C4@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.label.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

BOOL Com_Apple_Siri_Product_Proto_MatchingSpan.hasSerializedValue.getter()
{
  return sub_1CA25B1AC(&qword_1EA5CF5D0, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25B484(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.input.getter()
{
  return sub_1CA25AB1C(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchedTerm.getter()
{
  return sub_1CA25AB1C(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

uint64_t sub_1CA25AB1C(void *a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1
                             + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

BOOL Com_Apple_Siri_Product_Proto_MatchingSpan.hasPrefix.getter()
{
  return sub_1CA25ABA8(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25ACC4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix, a1);
}

BOOL Com_Apple_Siri_Product_Proto_MatchingSpan.hasSuffix.getter()
{
  return sub_1CA25ABA8(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix);
}

BOOL sub_1CA25ABA8(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v7 = *(void *)(v1 + *(int *)(v6 + 20)) + *a1;
  swift_beginAccess();
  sub_1C9F3DBCC(v7, (uint64_t)v5, &qword_1EA5CF868);
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) != 1;
  sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF868);
  return v8;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25ACC4(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, a1);
}

uint64_t sub_1CA25ACC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v9 = *(void *)(v2 + *(int *)(v8 + 20)) + *a1;
  swift_beginAccess();
  sub_1C9F3DBCC(v9, (uint64_t)v7, &qword_1EA5CF868);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) != 1) {
    return sub_1CA26D0D8((uint64_t)v7, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v10 = *(int *)(v8 + 20);
  if (qword_1EA5CF780 != -1) {
    swift_once();
  }
  *(void *)(a2 + v10) = qword_1EA5CF770;
  swift_retain();
  return sub_1C9F40EEC((uint64_t)v7, &qword_1EA5CF868);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.start.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.end.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

uint64_t sub_1CA25AE60(void *a1)
{
  uint64_t v2 = (unsigned int *)(*(void *)(v1
                                  + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0)
                                           + 20))
                      + *a1);
  swift_beginAccess();
  return *v2;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.startWithoutPrefix.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.endWithoutSuffix.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.confidence.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefixSuffixConfidence.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.explicit.getter()
{
  return sub_1CA25AF00(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isSuffixVariableMatch.getter()
{
  return sub_1CA25AF00(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

uint64_t sub_1CA25AF00(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPrefixVariableMatch.getter()
{
  return sub_1CA25AF00(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPayloadVariableMatch.getter()
{
  return sub_1CA25AF00(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.locale.getter()
{
  return sub_1CA25AB1C(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.numWords.getter()
{
  return sub_1CA25AE60(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a1 = *(void *)v3;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.appID.getter()
{
  return sub_1CA25AB1C(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matcherNames.getter()
{
  return sub_1CA25B014();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.tags.getter()
{
  return sub_1CA25B014();
}

uint64_t sub_1CA25B014()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationConfidences.getter()
{
  return sub_1CA25B014();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationPhoneSequences.getter()
{
  return sub_1CA25B014();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.metadata.getter()
{
  return sub_1CA25B0A0(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesStartTime.getter()
{
  return sub_1CA25B0A0(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

uint64_t sub_1CA25B0A0(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20)) + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesEndTime.getter()
{
  return sub_1CA25B0A0(&OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  return sub_1C9F3DBCC(v3, a1, &qword_1EA5CF570);
}

BOOL Com_Apple_Siri_Product_Proto_ScalarValue.hasUnit.getter()
{
  return sub_1CA25B1AC(&qword_1EBCA0338, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

BOOL sub_1CA25B1AC(uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  sub_1C9F3DBCC(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  sub_1C9F40EEC((uint64_t)v11, a1);
  return v14;
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.unit.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EBCA0338);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1CA26D0D8((uint64_t)v5, (uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E4FBC860];
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  return sub_1C9F40EEC((uint64_t)v5, &qword_1EBCA0338);
}

BOOL Com_Apple_Siri_Product_Proto_ScalarValue.hasValue.getter()
{
  return sub_1CA25B1AC(&qword_1EA5CF5D0, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25B484(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, a1);
}

uint64_t sub_1CA25B484@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v9, &qword_1EA5CF5D0);
  uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return sub_1CA26D0D8((uint64_t)v9, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v12 = *(int *)(v11 + 20);
  if (qword_1EA5CF590 != -1) {
    swift_once();
  }
  *(void *)(a3 + v12) = qword_1EA5CF580;
  swift_retain();
  return sub_1C9F40EEC((uint64_t)v9, &qword_1EA5CF5D0);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.doubleValue.setter(double a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (double *)&v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v14, (uint64_t)v8, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v8, v12, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  *uint64_t v8 = a1;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(double *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C9F3DC30((uint64_t)v8, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v6, v17, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.floatValue.setter(float a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (float *)&v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v14, (uint64_t)v8, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v8, v12, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  *uint64_t v8 = a1;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(float *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C9F3DC30((uint64_t)v8, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v6, v17, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.intValue.setter(int a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v14, (uint64_t)v8, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v8, v12, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  *uint64_t v8 = a1;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C9F3DC30((uint64_t)v8, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v6, v17, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.longValue.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v14, (uint64_t)v8, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v8, v12, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  *uint64_t v8 = a1;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C9F3DC30((uint64_t)v8, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v17 = v15
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v6, v17, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.stringValue.setter(uint64_t a1, uint64_t a2)
{
  return sub_1CA25BFC0(a1, a2, 4);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.dateTimeValue.setter(uint64_t a1)
{
  return sub_1CA25C244(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, 5);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.scalarValue.setter(uint64_t a1)
{
  return sub_1CA25C244(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, 6);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticTagValue.setter(uint64_t a1, uint64_t a2)
{
  return sub_1CA25BFC0(a1, a2, 7);
}

uint64_t sub_1CA25BFC0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (void *)((char *)v24 - v11);
  uint64_t v13 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v14 = *(void *)(v3 + v13);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v15 = swift_allocObject();
    v24[3] = a3;
    uint64_t v16 = v15;
    uint64_t v17 = v15
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    uint64_t v19 = v14
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v19, (uint64_t)v12, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v12, v17, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v3 + v13) = v16;
    swift_release();
  }
  uint64_t v20 = *(void *)(v3 + v13);
  void *v12 = a1;
  v12[1] = a2;
  uint64_t v21 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 0, 1, v21);
  sub_1C9F3DC30((uint64_t)v12, (uint64_t)v10, &qword_1EA5CF570);
  uint64_t v22 = v20
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v10, v22, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticValue.setter(uint64_t a1)
{
  return sub_1CA25C244(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, 8);
}

uint64_t sub_1CA25C244(uint64_t a1, uint64_t (*a2)(void), int a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v24 - v11;
  uint64_t v13 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v14 = *(void *)(v3 + v13);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v15 = swift_allocObject();
    v24[3] = a3;
    uint64_t v16 = v15;
    uint64_t v17 = v15
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    uint64_t v19 = v14
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v19, (uint64_t)v12, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v12, v17, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v3 + v13) = v16;
    swift_release();
  }
  uint64_t v20 = *(void *)(v3 + v13);
  sub_1CA26D0D8(a1, (uint64_t)v12, a2);
  uint64_t v21 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 0, 1, v21);
  sub_1C9F3DC30((uint64_t)v12, (uint64_t)v10, &qword_1EA5CF570);
  uint64_t v22 = v20
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v10, v22, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA25A9C4(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &qword_1EA5D3DC0, &qword_1EA5DF678, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.value.setter(uint64_t a1)
{
  return sub_1CA25C568(a1, &qword_1EA5CF5D0, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value);
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.unit.setter(uint64_t a1)
{
  return sub_1CA25C568(a1, &qword_1EBCA0338, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit);
}

uint64_t sub_1CA25C568(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
    swift_allocObject();
    uint64_t v23 = v14;
    uint64_t v18 = swift_retain();
    uint64_t v14 = v23;
    *(void *)(v5 + v17) = sub_1CA26B328(v18);
    swift_release();
  }
  uint64_t v19 = *(void *)(v5 + v17);
  sub_1CA26D0D8(a1, (uint64_t)v16, a3);
  uint64_t v20 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v16, 0, 1, v20);
  sub_1C9F3DC30((uint64_t)v16, (uint64_t)v14, a2);
  uint64_t v21 = v19 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v14, v21, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_1CA26DB98(v7);
    swift_release();
    *(void *)(v3 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  swift_beginAccess();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v11 = swift_retain();
    uint64_t v12 = sub_1CA26DB98(v11);
    swift_release();
    *(void *)(v2 + v10) = v12;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_1CA26D0D8(a1, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_1C9F3DC30((uint64_t)v9, (uint64_t)v7, &qword_1EA5CF5D0);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v7, v15, &qword_1EA5CF5D0);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.input.setter(uint64_t a1, uint64_t a2)
{
  return sub_1CA25C9F4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchedTerm.setter(uint64_t a1, uint64_t a2)
{
  return sub_1CA25C9F4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

uint64_t sub_1CA25C9F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(v5 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = (void *)(*(void *)(v5 + v8) + *a3);
  swift_beginAccess();
  *uint64_t v11 = a1;
  v11[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.setter(uint64_t a1)
{
  return sub_1CA25CADC(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.setter(uint64_t a1)
{
  return sub_1CA25CADC(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix);
}

uint64_t sub_1CA25CADC(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v13 = *(int *)(v12 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v14 = swift_retain();
    uint64_t v15 = sub_1CA26DB98(v14);
    swift_release();
    *(void *)(v4 + v13) = v15;
    swift_release();
  }
  uint64_t v16 = *(void *)(v4 + v13);
  sub_1CA26D0D8(a1, (uint64_t)v11, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  sub_1C9F3DC30((uint64_t)v11, (uint64_t)v9, &qword_1EA5CF868);
  uint64_t v17 = v16 + *a2;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v9, v17, &qword_1EA5CF868);
  swift_endAccess();
  return swift_release();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.start.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.end.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

uint64_t sub_1CA25CCC0(int a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_1CA26DB98(v7);
    swift_release();
    *(void *)(v4 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = (_DWORD *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess();
  *uint64_t v9 = a1;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.startWithoutPrefix.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.endWithoutSuffix.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.confidence.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.prefixSuffixConfidence.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.explicit.setter(char a1)
{
  return sub_1CA25CDC4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isSuffixVariableMatch.setter(char a1)
{
  return sub_1CA25CDC4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

uint64_t sub_1CA25CDC4(char a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_1CA26DB98(v7);
    swift_release();
    *(void *)(v4 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = (unsigned char *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess();
  *uint64_t v9 = a1 & 1;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPrefixVariableMatch.setter(char a1)
{
  return sub_1CA25CDC4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.isPayloadVariableMatch.setter(char a1)
{
  return sub_1CA25CDC4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.locale.setter(uint64_t a1, uint64_t a2)
{
  return sub_1CA25C9F4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.numWords.setter(int a1)
{
  return sub_1CA25CCC0(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matchType.setter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    uint64_t v7 = sub_1CA26DB98(v6);
    swift_release();
    *(void *)(v2 + v5) = v7;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5)
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = v3;
  *(unsigned char *)(v8 + 8) = v4;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.appID.setter(uint64_t a1, uint64_t a2)
{
  return sub_1CA25C9F4(a1, a2, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.matcherNames.setter(uint64_t a1)
{
  return sub_1CA25CF9C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.tags.setter(uint64_t a1)
{
  return sub_1CA25CF9C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
}

uint64_t sub_1CA25CF9C(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_1CA26DB98(v7);
    swift_release();
    *(void *)(v4 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = (void *)(*(void *)(v4 + v6) + *a2);
  swift_beginAccess();
  *uint64_t v9 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationConfidences.setter(uint64_t a1)
{
  return sub_1CA25CF9C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationPhoneSequences.setter(uint64_t a1)
{
  return sub_1CA25CF9C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.metadata.setter(uint64_t a1)
{
  return sub_1CA25D090(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesStartTime.setter(uint64_t a1)
{
  return sub_1CA25D090(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

uint64_t sub_1CA25D090(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = swift_retain();
    uint64_t v8 = sub_1CA26DB98(v7);
    swift_release();
    *(void *)(v4 + v6) = v8;
    swift_release();
  }
  uint64_t v9 = (void *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess();
  *uint64_t v9 = a1;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesEndTime.setter(uint64_t a1)
{
  return sub_1CA25D090(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

void Com_Apple_Siri_Product_Proto_MatchType.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t Com_Apple_Siri_Product_Proto_MatchType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 0x10;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchType.rawValue.getter()
{
  return *(void *)v0;
}

unint64_t sub_1CA25D190@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Com_Apple_Siri_Product_Proto_MatchType.init(rawValue:)(*a1, a2);
}

uint64_t sub_1CA25D198@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Com_Apple_Siri_Product_Proto_MatchType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1CA25D1C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CA2712A8();
  return MEMORY[0x1F4157F40](a1, a2, v4);
}

void sub_1CA25D20C()
{
  qword_1EA5DF610 = (uint64_t)&unk_1F245F860;
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchType.allCases.getter()
{
  if (qword_1EA5D3D88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchType.allCases.setter(uint64_t a1)
{
  if (qword_1EA5D3D88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  qword_1EA5DF610 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Com_Apple_Siri_Product_Proto_MatchType.allCases.modify())()
{
  if (qword_1EA5D3D88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CA25D3A0@<X0>(void *a1@<X8>)
{
  if (qword_1EA5D3D88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a1 = qword_1EA5DF610;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA25D420@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA25D47C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    uint64_t v7 = sub_1CA26DB98(v6);
    swift_release();
    *(void *)(a2 + v5) = v7;
    swift_release();
  }
  uint64_t v8 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v3;
  return swift_bridgeObjectRelease();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.label.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1CA25D5CC;
}

void sub_1CA25D5CC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      uint64_t v8 = sub_1CA26DB98(v7);
      swift_release();
      *(void *)(v6 + v5) = v8;
      swift_release();
    }
    uint64_t v9 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      uint64_t v12 = swift_retain();
      uint64_t v13 = sub_1CA26DB98(v12);
      swift_release();
      *(void *)(v11 + v10) = v13;
      swift_release();
    }
    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v5, &qword_1EA5CF5D0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_1EA5CF590 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_1EA5CF580;
    swift_retain();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF5D0);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  return sub_1CA25D92C;
}

void sub_1CA25D92C(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_MatchingSpan.clearSerializedValue()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    uint64_t v7 = sub_1CA26DB98(v6);
    swift_release();
    *(void *)(v1 + v5) = v7;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v4, v10, &qword_1EA5CF5D0);
  swift_endAccess();
  swift_release();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.input.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1CA25DB70;
}

void sub_1CA25DB70(uint64_t *a1, char a2)
{
}

uint64_t sub_1CA25DB7C@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  swift_beginAccess();
  uint64_t v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA25DBEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1CA26DB98(v10);
    swift_release();
    *(void *)(a2 + v9) = v11;
    swift_release();
  }
  uint64_t v12 = (void *)(*(void *)(a2 + v9) + *a5);
  swift_beginAccess();
  void *v12 = v8;
  v12[1] = v7;
  return swift_bridgeObjectRelease();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.matchedTerm.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1CA25DD5C;
}

void sub_1CA25DD5C(uint64_t *a1, char a2)
{
}

void sub_1CA25DD68(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  uint64_t v6 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v7 = *(int *)(v4 + 96);
      uint64_t v8 = *(void *)(v4 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      uint64_t v9 = swift_retain();
      uint64_t v10 = sub_1CA26DB98(v9);
      swift_release();
      *(void *)(v8 + v7) = v10;
      swift_release();
    }
    uint64_t v11 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    *uint64_t v11 = v5;
    v11[1] = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v12 = *(int *)(v4 + 96);
      uint64_t v13 = *(void *)(v4 + 88);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      uint64_t v14 = swift_retain();
      uint64_t v15 = sub_1CA26DB98(v14);
      swift_release();
      *(void *)(v13 + v12) = v15;
      swift_release();
    }
    uint64_t v16 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess();
    void *v16 = v5;
    v16[1] = v6;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

uint64_t sub_1CA25DEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  sub_1CA26E724(a1, (uint64_t)&v14 - v11, a6);
  return a7(v12);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(v6 + 20))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v5, &qword_1EA5CF868);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_1EA5CF780 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_1EA5CF770;
    swift_retain();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF868);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  return sub_1CA25E180;
}

void sub_1CA25E180(uint64_t a1, char a2)
{
}

void sub_1CA25E1C0(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  size_t v8 = *(void **)(*(void *)a1 + 48);
  uint64_t v9 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_1CA26E724(*(void *)(*(void *)a1 + 48), (uint64_t)v7, a4);
    a3(v7);
    sub_1CA26E78C((uint64_t)v8, a5);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v8);
  free(v7);
  free(v9);
  free(v6);
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_MatchingSpan.clearPrefix()()
{
}

uint64_t sub_1CA25E27C@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  MEMORY[0x1F4188790](v6 - 8);
  size_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v10 = *(void *)(a1 + *(int *)(v9 + 20)) + *a2;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v8, &qword_1EA5CF868);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) != 1) {
    return sub_1CA26D0D8((uint64_t)v8, a3, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v11 = *(int *)(v9 + 20);
  if (qword_1EA5CF780 != -1) {
    swift_once();
  }
  *(void *)(a3 + v11) = qword_1EA5CF770;
  swift_retain();
  return sub_1C9F40EEC((uint64_t)v8, &qword_1EA5CF868);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(v6 + 20))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v5, &qword_1EA5CF868);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_1EA5CF780 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_1EA5CF770;
    swift_retain();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF868);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  return sub_1CA25E5E4;
}

void sub_1CA25E5E4(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_MatchingSpan.clearSuffix()()
{
}

uint64_t sub_1CA25E630(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v8 = *(int *)(v7 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(v3 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = *(void *)(v3 + v8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v12 = v11 + *a1;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v6, v12, &qword_1EA5CF868);
  swift_endAccess();
  return swift_release();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.start.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25E830;
}

void sub_1CA25E830(uint64_t *a1, char a2)
{
}

uint64_t sub_1CA25E83C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v7 = *a1;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(a2 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = (_DWORD *)(*(void *)(a2 + v8) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v11 = v7;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.end.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25E98C;
}

void sub_1CA25E98C(uint64_t *a1, char a2)
{
}

void sub_1CA25E998(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1CA26DB98(v10);
    swift_release();
    *(void *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = (_DWORD *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3);
  swift_beginAccess();
  _DWORD *v12 = v6;
  free((void *)v5);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.startWithoutPrefix.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25EB24;
}

void sub_1CA25EB24(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.endWithoutSuffix.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25EBC4;
}

void sub_1CA25EBC4(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.confidence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25EC64;
}

void sub_1CA25EC64(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.prefixSuffixConfidence.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25ED04;
}

void sub_1CA25ED04(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.explicit.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5;
  return sub_1CA25EDA4;
}

void sub_1CA25EDA4(uint64_t *a1, char a2)
{
}

uint64_t sub_1CA25EDB0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  char v7 = *a1;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(a2 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = (unsigned char *)(*(void *)(a2 + v8) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v11 = v7;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.isSuffixVariableMatch.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5;
  return sub_1CA25EF00;
}

void sub_1CA25EF00(uint64_t *a1, char a2)
{
}

void sub_1CA25EF0C(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  char v6 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 80);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1CA26DB98(v10);
    swift_release();
    *(void *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = (unsigned char *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess();
  unsigned char *v12 = v6;
  free((void *)v5);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.isPrefixVariableMatch.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5;
  return sub_1CA25F094;
}

void sub_1CA25F094(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.isPayloadVariableMatch.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5;
  return sub_1CA25F134;
}

void sub_1CA25F134(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.locale.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1CA25F1DC;
}

void sub_1CA25F1DC(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.numWords.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1CA25F27C;
}

void sub_1CA25F27C(uint64_t *a1, char a2)
{
}

uint64_t sub_1CA25F288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a2 = *(void *)v3;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1CA25F2F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    uint64_t v7 = sub_1CA26DB98(v6);
    swift_release();
    *(void *)(a2 + v5) = v7;
    swift_release();
  }
  uint64_t v8 = *(void *)(a2 + v5)
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = v3;
  *(unsigned char *)(v8 + 8) = v4;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.matchType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 8);
  v3[9] = *(void *)v5;
  *((unsigned char *)v3 + 80) = v6;
  return sub_1CA25F454;
}

void sub_1CA25F454(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(v8 + v7) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v11 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  swift_beginAccess();
  *(void *)uint64_t v11 = v4;
  *(unsigned char *)(v11 + 8) = v5;
  free((void *)v3);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.appID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  char v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_1CA25F5F0;
}

void sub_1CA25F5F0(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.matcherNames.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  char v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1CA25F698;
}

void sub_1CA25F698(uint64_t *a1, char a2)
{
}

uint64_t sub_1CA25F6A4@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CA25F714(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(a2 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = (void *)(*(void *)(a2 + v8) + *a5);
  swift_beginAccess();
  *uint64_t v11 = v7;
  return swift_bridgeObjectRelease();
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.tags.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  char v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1CA25F87C;
}

void sub_1CA25F87C(uint64_t *a1, char a2)
{
}

void sub_1CA25F888(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v6 = *(int *)(v4 + 88);
      uint64_t v7 = *(void *)(v4 + 80);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      uint64_t v8 = swift_retain();
      uint64_t v9 = sub_1CA26DB98(v8);
      swift_release();
      *(void *)(v7 + v6) = v9;
      swift_release();
    }
    uint64_t v10 = (void *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    void *v10 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v11 = *(int *)(v4 + 88);
      uint64_t v12 = *(void *)(v4 + 80);
      type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
      swift_allocObject();
      uint64_t v13 = swift_retain();
      uint64_t v14 = sub_1CA26DB98(v13);
      swift_release();
      *(void *)(v12 + v11) = v14;
      swift_release();
    }
    uint64_t v15 = (void *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    void *v15 = v5;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationConfidences.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1CA25FAB0;
}

void sub_1CA25FAB0(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.altInterpretationPhoneSequences.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1CA25FB58;
}

void sub_1CA25FB58(uint64_t *a1, char a2)
{
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.metadata.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_1CA25FBF8;
}

void sub_1CA25FBF8(uint64_t *a1, char a2)
{
}

uint64_t sub_1CA25FC04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(a2 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = (void *)(*(void *)(a2 + v8) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v11 = v7;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesStartTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_1CA25FD54;
}

void sub_1CA25FD54(uint64_t *a1, char a2)
{
}

void sub_1CA25FD60(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1CA26DB98(v10);
    swift_release();
    *(void *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = (void *)(*(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3);
  swift_beginAccess();
  void *v12 = v6;
  free((void *)v5);
}

void (*Com_Apple_Siri_Product_Proto_MatchingSpan.preItnphrasesEndTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_1CA25FEEC;
}

void sub_1CA25FEEC(uint64_t *a1, char a2)
{
}

uint64_t (*Com_Apple_Siri_Product_Proto_MatchingSpan.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CA25FF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  return sub_1C9F3DBCC(v3, a2, &qword_1EA5CF570);
}

uint64_t sub_1CA25FF90(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9F3DBCC(a1, (uint64_t)v4, &qword_1EA5CF570);
  return Com_Apple_Siri_Product_Proto_Value.value.setter((uint64_t)v4);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.value.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = *(void *)(v1 + v6);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = v8
       + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    uint64_t v11 = v7
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v11, (uint64_t)v5, &qword_1EA5CF570);
    swift_beginAccess();
    sub_1C9F3DC94((uint64_t)v5, v9, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v1 + v6) = v8;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v6)
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94(a1, v12, &qword_1EA5CF570);
  swift_endAccess();
  return swift_release();
}

void (*Com_Apple_Siri_Product_Proto_Value.value.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[12] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570) - 8) + 64);
  v3[13] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[14] = v5;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  *((_DWORD *)v3 + 30) = v6;
  uint64_t v7 = *(void *)(v1 + v6)
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v7, (uint64_t)v5, &qword_1EA5CF570);
  return sub_1CA2602D0;
}

void sub_1CA2602D0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    size_t v4 = *(void **)(v2 + 104);
    uint64_t v3 = *(void **)(v2 + 112);
    sub_1C9F3DBCC((uint64_t)v3, (uint64_t)v4, &qword_1EA5CF570);
    Com_Apple_Siri_Product_Proto_Value.value.setter((uint64_t)v4);
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 120);
      uint64_t v7 = *(void *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 104);
      uint64_t v8 = *(void *)(v7 + v5);
      type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
      uint64_t v9 = swift_allocObject();
      uint64_t v10 = v9
          + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
      uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
      uint64_t v12 = v8
          + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
      swift_beginAccess();
      sub_1C9F3DBCC(v12, v6, &qword_1EA5CF570);
      swift_beginAccess();
      sub_1C9F3DC94(v6, v10, &qword_1EA5CF570);
      swift_endAccess();
      *(void *)(v7 + v5) = v9;
      swift_release();
    }
    size_t v4 = *(void **)(v2 + 104);
    uint64_t v3 = *(void **)(v2 + 112);
    uint64_t v13 = *(void *)(*(void *)(v2 + 96) + *(int *)(v2 + 120))
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    swift_retain();
    sub_1C9F3DC94((uint64_t)v3, v13, &qword_1EA5CF570);
    swift_endAccess();
    swift_release();
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

float Com_Apple_Siri_Product_Proto_Value.floatValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v4, (uint64_t)v3, &qword_1EA5CF570);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
    return 0.0;
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    sub_1CA26E78C((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    return 0.0;
  }
  else
  {
    return *(float *)v3;
  }
}

uint64_t sub_1CA26061C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (int *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v7, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_1C9F40EEC((uint64_t)v6, &qword_1EA5CF570);
  }
  else
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (!result)
    {
      int v10 = *v6;
      goto LABEL_7;
    }
    uint64_t result = sub_1CA26E78C((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  int v10 = 0;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.floatValue.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = (int *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      int v8 = *v5;
      goto LABEL_7;
    }
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  int v8 = 0;
LABEL_7:
  *((_DWORD *)v3 + 10) = v8;
  return sub_1CA2608E0;
}

void sub_1CA2608E0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 32);
  Com_Apple_Siri_Product_Proto_Value.floatValue.setter(*(float *)(*(void *)a1 + 40));
  free(v2);
  free(v1);
}

double Com_Apple_Siri_Product_Proto_Value.doubleValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v4, (uint64_t)v3, &qword_1EA5CF570);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return *(double *)v3;
    }
    sub_1CA26E78C((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0.0;
}

uint64_t sub_1CA260A80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v7, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_1C9F40EEC((uint64_t)v6, &qword_1EA5CF570);
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    uint64_t result = sub_1CA26E78C((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v10 = *v6;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.doubleValue.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = (uint64_t *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[5] = v5;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v8 = *v5;
LABEL_7:
  v3[3] = v8;
  return sub_1CA260D4C;
}

void sub_1CA260D4C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 40);
  Com_Apple_Siri_Product_Proto_Value.doubleValue.setter(*(double *)(*(void *)a1 + 24));
  free(v2);
  free(v1);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.intValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (unsigned int *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v4, (uint64_t)v3, &qword_1EA5CF570);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return *v3;
    }
    sub_1CA26E78C((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

uint64_t sub_1CA260EEC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (int *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v7, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_1C9F40EEC((uint64_t)v6, &qword_1EA5CF570);
LABEL_6:
    int v10 = 0;
    goto LABEL_7;
  }
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 2)
  {
    uint64_t result = sub_1CA26E78C((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  int v10 = *v6;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.intValue.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = (int *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
LABEL_6:
    int v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  int v8 = *v5;
LABEL_7:
  *((_DWORD *)v3 + 10) = v8;
  return sub_1CA2611B8;
}

void sub_1CA2611B8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 32);
  Com_Apple_Siri_Product_Proto_Value.intValue.setter(*(_DWORD *)(*(void *)a1 + 40));
  free(v2);
  free(v1);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.longValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v4, (uint64_t)v3, &qword_1EA5CF570);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return *(void *)v3;
    }
    sub_1CA26E78C((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

uint64_t sub_1CA261358@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v7, (uint64_t)v6, &qword_1EA5CF570);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_1C9F40EEC((uint64_t)v6, &qword_1EA5CF570);
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 3)
  {
    uint64_t result = sub_1CA26E78C((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v10 = *v6;
LABEL_7:
  *a2 = v10;
  return result;
}

void (*Com_Apple_Siri_Product_Proto_Value.longValue.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = (uint64_t *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[5] = v5;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v8 = *v5;
LABEL_7:
  v3[3] = v8;
  return sub_1CA261624;
}

void sub_1CA261624(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 40);
  Com_Apple_Siri_Product_Proto_Value.longValue.setter(*(void *)(*(void *)a1 + 24));
  free(v2);
  free(v1);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.stringValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v4, (uint64_t)v3, &qword_1EA5CF570);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4) {
      return *(void *)v3;
    }
    sub_1CA26E78C((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

void (*Com_Apple_Siri_Product_Proto_Value.stringValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = (uint64_t *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[6] = v5;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
LABEL_6:
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v8 = *v5;
  unint64_t v9 = v5[1];
LABEL_7:
  v3[3] = v8;
  v3[4] = v9;
  return sub_1CA26193C;
}

void sub_1CA26193C(uint64_t a1, char a2)
{
}

uint64_t Com_Apple_Siri_Product_Proto_Value.dateTimeValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5) {
      return sub_1CA26D0D8((uint64_t)v5, a1, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    }
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0) + 20);
  if (qword_1EA5D3A28 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_1EA5D77B0;
  return swift_retain();
}

void (*Com_Apple_Siri_Product_Proto_Value.dateTimeValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v9, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      sub_1CA26D0D8((uint64_t)v5, (uint64_t)v8, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
      return sub_1CA261D28;
    }
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_1EA5D3A28 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_1EA5D77B0;
  swift_retain();
  return sub_1CA261D28;
}

void sub_1CA261D28(uint64_t a1, char a2)
{
}

uint64_t Com_Apple_Siri_Product_Proto_Value.scalarValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6) {
      return sub_1CA26D0D8((uint64_t)v5, a1, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    }
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v9 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if (qword_1EA5D3DC0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_1EA5DF678;
  return swift_retain();
}

void (*Com_Apple_Siri_Product_Proto_Value.scalarValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v9, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      sub_1CA26D0D8((uint64_t)v5, (uint64_t)v8, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
      return sub_1CA26213C;
    }
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_1EA5D3DC0 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_1EA5DF678;
  swift_retain();
  return sub_1CA26213C;
}

void sub_1CA26213C(uint64_t a1, char a2)
{
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticTagValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v4, (uint64_t)v3, &qword_1EA5CF570);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 7) {
      return *(void *)v3;
    }
    sub_1CA26E78C((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  return 0;
}

void (*Com_Apple_Siri_Product_Proto_Value.semanticTagValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = (uint64_t *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[6] = v5;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
LABEL_6:
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 7)
  {
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v8 = *v5;
  unint64_t v9 = v5[1];
LABEL_7:
  v3[3] = v8;
  v3[4] = v9;
  return sub_1CA262444;
}

void sub_1CA262444(uint64_t a1, char a2)
{
}

void sub_1CA26245C(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  uint64_t v6 = *(void **)(*(void *)a1 + 48);
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    swift_bridgeObjectRetain();
    a3(v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    a3(*(void *)(*(void *)a1 + 24), v7);
  }
  free(v6);
  free(v4);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.semanticValue.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v6, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8) {
      return sub_1CA26D0D8((uint64_t)v5, (uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    }
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E4FBC860];
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

void (*Com_Apple_Siri_Product_Proto_Value.semanticValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20))
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v8, (uint64_t)v5, &qword_1EA5CF570);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF570);
LABEL_6:
    *uint64_t v7 = 0;
    v7[1] = 0xE000000000000000;
    _OWORD v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    void v7[5] = 0xE000000000000000;
    v7[6] = MEMORY[0x1E4FBC860];
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    return sub_1CA262880;
  }
  if (swift_getEnumCaseMultiPayload() != 8)
  {
    sub_1CA26E78C((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    goto LABEL_6;
  }
  sub_1CA26D0D8((uint64_t)v5, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1CA262880;
}

void sub_1CA262880(uint64_t a1, char a2)
{
}

uint64_t (*Com_Apple_Siri_Product_Proto_Value.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t static Com_Apple_Siri_Product_Proto_ScalarValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1CA26D1E0(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26BD44) & 1;
}

uint64_t sub_1CA262938@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  sub_1C9F3DBCC(v11, (uint64_t)v10, &qword_1EA5CF5D0);
  uint64_t v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12) != 1) {
    return sub_1CA26D0D8((uint64_t)v10, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
  uint64_t v13 = *(int *)(v12 + 20);
  if (qword_1EA5CF590 != -1) {
    swift_once();
  }
  *(void *)(a4 + v13) = qword_1EA5CF580;
  swift_retain();
  return sub_1C9F40EEC((uint64_t)v10, &qword_1EA5CF5D0);
}

void (*Com_Apple_Siri_Product_Proto_ScalarValue.value.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20))
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v5, &qword_1EA5CF5D0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_1EA5CF590 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_1EA5CF580;
    swift_retain();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF5D0);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  return sub_1CA262CB8;
}

void sub_1CA262CB8(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_ScalarValue.clearValue()()
{
}

void (*Com_Apple_Siri_Product_Proto_ScalarValue.unit.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20))
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C9F3DBCC(v10, (uint64_t)v5, &qword_1EBCA0338);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = MEMORY[0x1E4FBC860];
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    sub_1C9F40EEC((uint64_t)v5, &qword_1EBCA0338);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  return sub_1CA262EE4;
}

void sub_1CA262EE4(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall Com_Apple_Siri_Product_Proto_ScalarValue.clearUnit()()
{
}

uint64_t sub_1CA262F4C(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
    swift_allocObject();
    uint64_t v11 = swift_retain();
    *(void *)(v3 + v10) = sub_1CA26B328(v11);
    swift_release();
  }
  uint64_t v12 = *(void *)(v3 + v10);
  uint64_t v13 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  uint64_t v14 = v12 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_1C9F3DC94((uint64_t)v9, v14, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t (*Com_Apple_Siri_Product_Proto_ScalarValue.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.semanticValueClassName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.semanticValueClassName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.semanticValueClassName.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.tags.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.tags.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Com_Apple_Siri_Product_Proto_SemanticValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t sub_1CA263404()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF618);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF618);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1CA3F1330;
  unint64_t v4 = v38 + v3;
  unint64_t v5 = v38 + v3 + v1[14];
  *(void *)(v38 + v3) = 0;
  *(void *)unint64_t v5 = "None";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4FA3BA0];
  uint64_t v7 = sub_1CA3AFD50();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "StemAndStop";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "StemAndStopSuffix";
  *((void *)v11 + 1) = 17;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 3;
  *(void *)uint64_t v13 = "SimpleStemAndStopSuffix";
  *((void *)v13 + 1) = 23;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "Stop";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "StopSuffix";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 6;
  *(void *)uint64_t v19 = "Stem";
  *((void *)v19 + 1) = 4;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 7;
  *(void *)uint64_t v21 = "StopWithoutSynonyms";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "CompareContains";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "ComparePrefix";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  size_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "Compare";
  *((void *)v26 + 1) = 7;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)uint64_t v28 = "Phonetic";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 12;
  *(void *)uint64_t v30 = "IdentityContains";
  *((void *)v30 + 1) = 16;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 13;
  *(void *)uint64_t v32 = "IdentityPrefix";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 14;
  *(void *)uint64_t v34 = "IdentitySynonym";
  *((void *)v34 + 1) = 15;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  int v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)int v36 = "Identity";
  *((void *)v36 + 1) = 8;
  v36[16] = 2;
  v8();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3D90, (uint64_t)qword_1EA5DF618, a1);
}

uint64_t sub_1CA263930@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3D90, (uint64_t)qword_1EA5DF618, a1);
}

unint64_t static Com_Apple_Siri_Product_Proto_MatchingSpan.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t sub_1CA263970()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF630);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF630);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1CA3F1340;
  unint64_t v4 = v59 + v3;
  unint64_t v5 = v59 + v3 + v1[14];
  *(void *)(v59 + v3) = 1;
  *(void *)unint64_t v5 = "label";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4FA3BA0];
  uint64_t v7 = sub_1CA3AFD50();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v59 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "serializedValue";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v59 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "input";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v59 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)uint64_t v13 = "matchedTerm";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v59 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "prefix";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v59 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "suffix";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v59 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 7;
  *(void *)uint64_t v19 = "start";
  *((void *)v19 + 1) = 5;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v59 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "end";
  *((void *)v21 + 1) = 3;
  v21[16] = 2;
  v8();
  uint64_t v22 = v59 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "startWithoutPrefix";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v59 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "endWithoutSuffix";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  size_t v25 = (void *)(v59 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "confidence";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v59 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "prefixSuffixConfidence";
  *((void *)v28 + 1) = 22;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v59 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "explicit";
  *((void *)v30 + 1) = 8;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v59 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)uint64_t v32 = "isSuffixVariableMatch";
  *((void *)v32 + 1) = 21;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v59 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 15;
  *(void *)uint64_t v34 = "isPrefixVariableMatch";
  *((void *)v34 + 1) = 21;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v59 + v3 + 15 * v2);
  int v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)int v36 = "isPayloadVariableMatch";
  *((void *)v36 + 1) = 22;
  v36[16] = 2;
  v8();
  uint64_t v37 = v59 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "locale";
  *(void *)(v37 + 8) = 6;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v59 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 18;
  *(void *)uint64_t v39 = "numWords";
  *((void *)v39 + 1) = 8;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v59 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "matchType";
  *((void *)v41 + 1) = 9;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v59 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 20;
  *(void *)uint64_t v43 = "appId";
  *((void *)v43 + 1) = 5;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v59 + v3 + 20 * v2);
  int v45 = (char *)v44 + v1[14];
  *uint64_t v44 = 21;
  *(void *)int v45 = "matcherNames";
  *((void *)v45 + 1) = 12;
  v45[16] = 2;
  v8();
  int v46 = (void *)(v59 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  *int v46 = 22;
  *(void *)uint64_t v47 = "tags";
  *((void *)v47 + 1) = 4;
  v47[16] = 2;
  v8();
  int v48 = (void *)(v59 + v3 + 22 * v2);
  uint64_t v49 = (char *)v48 + v1[14];
  *int v48 = 23;
  *(void *)uint64_t v49 = "altInterpretationConfidences";
  *((void *)v49 + 1) = 28;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v59 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)uint64_t v51 = "altInterpretationPhoneSequences";
  *((void *)v51 + 1) = 31;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v59 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 25;
  *(void *)uint64_t v53 = "metadata";
  *((void *)v53 + 1) = 8;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v59 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 26;
  *(void *)uint64_t v55 = "preITNPhrasesStartTime";
  *((void *)v55 + 1) = 22;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v59 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 27;
  *(void *)uint64_t v57 = "preITNPhrasesEndTime";
  *((void *)v57 + 1) = 20;
  v57[16] = 2;
  v8();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_MatchingSpan._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(qword_1EA5D3D98, (uint64_t)qword_1EA5DF630, a1);
}

uint64_t sub_1CA264140()
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
  swift_allocObject();
  uint64_t result = sub_1CA264180();
  qword_1EA5CF770 = result;
  return result;
}

uint64_t sub_1CA264180()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  uint64_t v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  unint64_t v3 = (void *)(v0
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  *unint64_t v3 = 0;
  v3[1] = 0xE000000000000000;
  unint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  *unint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, 1, 1, v6);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch) = 0;
  uint64_t v8 = (void *)(v0
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords) = 0;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = (void *)(v0
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  void *v10 = 0;
  v10[1] = 0xE000000000000000;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags) = v11;
  uint64_t v12 = OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences;
  *(void *)(v0 + v12) = sub_1C9F78658(v11);
  uint64_t v13 = OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences;
  *(void *)(v0 + v13) = sub_1C9F7876C(v11);
  *(void *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime) = 0;
  return v0;
}

uint64_t sub_1CA2643C8()
{
  swift_bridgeObjectRelease();
  sub_1C9F40EEC(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, &qword_1EA5CF5D0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C9F40EEC(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix, &qword_1EA5CF868);
  sub_1C9F40EEC(v0+ OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, &qword_1EA5CF868);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1CA2644C8()
{
  sub_1CA2643C8();
  return swift_deallocClassInstance();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1CA26DB98(v9);
    swift_release();
    *(void *)(v4 + v8) = v10;
    swift_release();
  }
  uint64_t v11 = swift_retain();
  sub_1CA2645EC(v11, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1CA2645EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    uint64_t result = sub_1CA3AFAB0();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        sub_1CA264910();
        continue;
      case 2:
        sub_1CA26B760();
        continue;
      case 3:
      case 4:
      case 17:
      case 20:
        sub_1C9F39240();
        continue;
      case 5:
        sub_1CA264990();
        continue;
      case 6:
        sub_1CA264A60();
        continue;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 18:
        sub_1CA264B30();
        continue;
      case 13:
      case 14:
      case 15:
      case 16:
        sub_1C9F39604();
        continue;
      case 19:
        sub_1CA264BB4();
        continue;
      case 21:
        uint64_t v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames;
        goto LABEL_15;
      case 22:
        uint64_t v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags;
LABEL_15:
        uint64_t v12 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FA3B90];
        goto LABEL_22;
      case 23:
        sub_1CA264C4C();
        continue;
      case 24:
        sub_1CA264D00();
        continue;
      case 25:
        uint64_t v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata;
        goto LABEL_21;
      case 26:
        uint64_t v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime;
        goto LABEL_21;
      case 27:
        uint64_t v11 = &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime;
LABEL_21:
        uint64_t v12 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FA3B98];
LABEL_22:
        sub_1CA264DA8(a2, a1, a3, a4, v11, v12);
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_1CA264910()
{
  return swift_endAccess();
}

uint64_t sub_1CA264990()
{
  return swift_endAccess();
}

uint64_t sub_1CA264A60()
{
  return swift_endAccess();
}

uint64_t sub_1CA264B30()
{
  return swift_endAccess();
}

uint64_t sub_1CA264BB4()
{
  return swift_endAccess();
}

uint64_t sub_1CA264C4C()
{
  return swift_endAccess();
}

uint64_t sub_1CA264D00()
{
  return swift_endAccess();
}

uint64_t sub_1CA264DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA269720(a1, a2, a3, (void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1CA264E74);
}

uint64_t sub_1CA264E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v89 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v81 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v82 = (uint64_t)&v79 - v8;
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v83 = *(void *)(v9 - 8);
  uint64_t v84 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v79 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v80 = (uint64_t)&v79 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v20 = *(void *)(a1 + 16);
  unint64_t v21 = *(void *)(a1 + 24);
  uint64_t v86 = a1;
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = v85;
    sub_1CA3AFD00();
    uint64_t v24 = v23;
    if (v23) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v85;
  }
  uint64_t v25 = v86
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  sub_1C9F3DBCC(v25, (uint64_t)v15, &qword_1EA5CF5D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1C9F40EEC((uint64_t)v15, &qword_1EA5CF5D0);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v15, (uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    sub_1CA26E7EC(&qword_1EA5CF5B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    sub_1CA3AFD40();
    if (v24) {
      return sub_1CA26E78C((uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    }
    sub_1CA26E78C((uint64_t)v19, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  }
  uint64_t v27 = v86;
  uint64_t v28 = (uint64_t *)(v86
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  swift_beginAccess();
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v31 = v29 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v84;
  if (v31)
  {
    swift_bridgeObjectRetain();
    sub_1CA3AFD00();
    if (!v24)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_17:
  uint64_t v33 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  swift_beginAccess();
  uint64_t v34 = *v33;
  unint64_t v35 = v33[1];
  uint64_t v36 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0) {
    uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (v36)
  {
    swift_bridgeObjectRetain();
    sub_1CA3AFD00();
    if (v24) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v37 = v27
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  swift_beginAccess();
  uint64_t v38 = v82;
  sub_1C9F3DBCC(v37, v82, &qword_1EA5CF868);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  if (v39(v38, 1, v32) == 1)
  {
    sub_1C9F40EEC(v38, &qword_1EA5CF868);
  }
  else
  {
    uint64_t v40 = v38;
    uint64_t v41 = v80;
    sub_1CA26D0D8(v40, v80, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1CA26E7EC(&qword_1EA5CF848, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1CA3AFD40();
    if (v24) {
      return sub_1CA26E78C(v41, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    }
    sub_1CA26E78C(v41, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  uint64_t v42 = v86
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  swift_beginAccess();
  uint64_t v43 = v42;
  uint64_t v44 = v81;
  sub_1C9F3DBCC(v43, v81, &qword_1EA5CF868);
  if (v39(v44, 1, v32) != 1)
  {
    uint64_t v45 = v44;
    uint64_t v41 = v79;
    sub_1CA26D0D8(v45, v79, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1CA26E7EC(&qword_1EA5CF848, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    sub_1CA3AFD40();
    if (!v24)
    {
      sub_1CA26E78C(v41, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
      goto LABEL_33;
    }
    return sub_1CA26E78C(v41, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  }
  sub_1C9F40EEC(v44, &qword_1EA5CF868);
LABEL_33:
  uint64_t v46 = v86;
  uint64_t v47 = (_DWORD *)(v86
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  swift_beginAccess();
  if (!*v47 || (uint64_t result = sub_1CA3AFD10(), !v24))
  {
    int v48 = (_DWORD *)(v46
                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
    swift_beginAccess();
    if (!*v48 || (uint64_t result = sub_1CA3AFD10(), !v24))
    {
      uint64_t v49 = (_DWORD *)(v46
                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
      swift_beginAccess();
      if (!*v49 || (uint64_t result = sub_1CA3AFD10(), !v24))
      {
        uint64_t v50 = (_DWORD *)(v46
                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
        swift_beginAccess();
        if (!*v50 || (uint64_t result = sub_1CA3AFD10(), !v24))
        {
          uint64_t v51 = (_DWORD *)(v46
                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
          swift_beginAccess();
          if (!*v51 || (uint64_t result = sub_1CA3AFD10(), !v24))
          {
            uint64_t v52 = (_DWORD *)(v46
                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
            swift_beginAccess();
            if (!*v52 || (uint64_t result = sub_1CA3AFD10(), !v24))
            {
              uint64_t v53 = (unsigned char *)(v46
                            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
              swift_beginAccess();
              if (*v53 != 1 || (uint64_t result = sub_1CA3AFC90(), !v24))
              {
                uint64_t v54 = (unsigned char *)(v46
                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
                swift_beginAccess();
                if (*v54 != 1 || (uint64_t result = sub_1CA3AFC90(), !v24))
                {
                  uint64_t v55 = (unsigned char *)(v46
                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
                  swift_beginAccess();
                  if (*v55 != 1 || (uint64_t result = sub_1CA3AFC90(), !v24))
                  {
                    uint64_t v56 = (unsigned char *)(v46
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
                    swift_beginAccess();
                    if (*v56 != 1 || (uint64_t result = sub_1CA3AFC90(), !v24))
                    {
                      uint64_t v57 = (uint64_t *)(v46
                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
                      swift_beginAccess();
                      uint64_t v58 = *v57;
                      unint64_t v59 = v57[1];
                      uint64_t v60 = HIBYTE(v59) & 0xF;
                      if ((v59 & 0x2000000000000000) == 0) {
                        uint64_t v60 = v58 & 0xFFFFFFFFFFFFLL;
                      }
                      if (v60)
                      {
                        swift_bridgeObjectRetain();
                        sub_1CA3AFD00();
                        if (v24) {
                          return swift_bridgeObjectRelease();
                        }
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v61 = (_DWORD *)(v46
                                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
                      swift_beginAccess();
                      if (!*v61 || (uint64_t result = sub_1CA3AFD10(), !v24))
                      {
                        uint64_t v62 = (uint64_t *)(v46
                                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType);
                        swift_beginAccess();
                        if (!*v62
                          || (char v63 = *((unsigned char *)v62 + 8),
                              uint64_t v87 = *v62,
                              char v88 = v63,
                              sub_1CA2712A8(),
                              uint64_t result = sub_1CA3AFCA0(),
                              !v24))
                        {
                          uint64_t v64 = (uint64_t *)(v46
                                          + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
                          swift_beginAccess();
                          uint64_t v65 = *v64;
                          unint64_t v66 = v64[1];
                          uint64_t v67 = HIBYTE(v66) & 0xF;
                          if ((v66 & 0x2000000000000000) == 0) {
                            uint64_t v67 = v65 & 0xFFFFFFFFFFFFLL;
                          }
                          if (v67)
                          {
                            swift_bridgeObjectRetain();
                            sub_1CA3AFD00();
                            if (v24) {
                              return swift_bridgeObjectRelease();
                            }
                            swift_bridgeObjectRelease();
                          }
                          uint64_t v68 = v46
                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames;
                          swift_beginAccess();
                          if (!*(void *)(*(void *)v68 + 16)
                            || (swift_bridgeObjectRetain(), sub_1CA3AFCE0(), uint64_t result = swift_bridgeObjectRelease(), !v24))
                          {
                            uint64_t v69 = v46
                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags;
                            swift_beginAccess();
                            if (!*(void *)(*(void *)v69 + 16)
                              || (swift_bridgeObjectRetain(), sub_1CA3AFCE0(),
                                                              uint64_t result = swift_bridgeObjectRelease(),
                                                              !v24))
                            {
                              uint64_t v70 = v46
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences;
                              swift_beginAccess();
                              if (*(void *)(*(void *)v70 + 16))
                              {
                                sub_1CA3AF9E0();
                                sub_1CA3AF9D0();
                                swift_bridgeObjectRetain();
                                sub_1CA3AFC60();
                                uint64_t result = swift_bridgeObjectRelease();
                                uint64_t v71 = v86;
                                if (v24) {
                                  return result;
                                }
                              }
                              else
                              {
                                uint64_t v71 = v86;
                              }
                              uint64_t v72 = v71
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences;
                              swift_beginAccess();
                              if (*(void *)(*(void *)v72 + 16))
                              {
                                sub_1CA3AF9E0();
                                swift_bridgeObjectRetain();
                                sub_1CA3AFC60();
                                uint64_t result = swift_bridgeObjectRelease();
                                uint64_t v73 = v86;
                                if (v24) {
                                  return result;
                                }
                              }
                              else
                              {
                                uint64_t v73 = v86;
                              }
                              uint64_t v74 = (void *)(v73
                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
                              swift_beginAccess();
                              if (*v74)
                              {
                                uint64_t result = sub_1CA3AFD20();
                                uint64_t v75 = v86;
                                if (v24) {
                                  return result;
                                }
                              }
                              else
                              {
                                uint64_t v75 = v86;
                              }
                              uint64_t v76 = (void *)(v75
                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
                              swift_beginAccess();
                              if (*v76)
                              {
                                uint64_t result = sub_1CA3AFD20();
                                uint64_t v77 = v86;
                                if (v24) {
                                  return result;
                                }
                              }
                              else
                              {
                                uint64_t v77 = v86;
                              }
                              uint64_t v78 = (uint64_t *)(v77
                                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
                              swift_beginAccess();
                              uint64_t result = *v78;
                              if (*v78) {
                                return sub_1CA3AFD20();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1CA265C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v154 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v156 = *(void *)(v154 - 8);
  MEMORY[0x1F4188790](v154);
  uint64_t v148 = (uint64_t)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(qword_1EA5DF760);
  uint64_t v5 = MEMORY[0x1F4188790](v155);
  uint64_t v7 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v152 = (uint64_t)&v145 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v147 = (uint64_t)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v150 = (uint64_t)&v145 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v149 = (uint64_t)&v145 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v151 = (uint64_t)&v145 - v16;
  uint64_t v17 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v153 = (uint64_t)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7568);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v157 = (uint64_t)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v145 - v26;
  swift_beginAccess();
  uint64_t v159 = a1;
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a1 + 24);
  swift_beginAccess();
  if (v28 == *(void *)(a2 + 16) && v29 == *(void *)(a2 + 24)
    || (v30 = sub_1CA3B0560(), BOOL result = 0, (v30 & 1) != 0))
  {
    uint64_t v146 = v7;
    uint64_t v158 = a2;
    uint64_t v32 = v159;
    uint64_t v33 = v159
        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
    swift_beginAccess();
    sub_1C9F3DBCC(v33, (uint64_t)v27, &qword_1EA5CF5D0);
    uint64_t v34 = v158;
    uint64_t v35 = v158
        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
    swift_beginAccess();
    uint64_t v36 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_1C9F3DBCC((uint64_t)v27, (uint64_t)v22, &qword_1EA5CF5D0);
    sub_1C9F3DBCC(v35, v36, &qword_1EA5CF5D0);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (v37((uint64_t)v22, 1, v17) == 1)
    {
      swift_retain();
      swift_retain();
      sub_1C9F40EEC((uint64_t)v27, &qword_1EA5CF5D0);
      uint64_t v38 = v32;
      if (v37(v36, 1, v17) == 1)
      {
        sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF5D0);
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v39 = v157;
      sub_1C9F3DBCC((uint64_t)v22, v157, &qword_1EA5CF5D0);
      if (v37(v36, 1, v17) != 1)
      {
        uint64_t v42 = v153;
        sub_1CA26D0D8(v36, v153, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
        uint64_t v38 = v159;
        swift_retain();
        swift_retain();
        char v43 = sub_1CA26D1E0(v39, v42, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26AA78);
        sub_1CA26E78C(v42, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
        sub_1C9F40EEC((uint64_t)v27, &qword_1EA5CF5D0);
        sub_1CA26E78C(v39, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
        sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF5D0);
        if ((v43 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v44 = (uint64_t *)(v38
                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
        swift_beginAccess();
        uint64_t v45 = *v44;
        uint64_t v46 = v44[1];
        uint64_t v47 = (void *)(v34
                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
        swift_beginAccess();
        if ((v45 != *v47 || v46 != v47[1]) && (sub_1CA3B0560() & 1) == 0) {
          goto LABEL_11;
        }
        int v48 = (uint64_t *)(v38
                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
        swift_beginAccess();
        uint64_t v49 = *v48;
        uint64_t v50 = v48[1];
        uint64_t v51 = (void *)(v34
                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
        swift_beginAccess();
        if ((v49 != *v51 || v50 != v51[1]) && (sub_1CA3B0560() & 1) == 0) {
          goto LABEL_11;
        }
        uint64_t v52 = v38
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
        swift_beginAccess();
        uint64_t v53 = v52;
        uint64_t v54 = v151;
        sub_1C9F3DBCC(v53, v151, &qword_1EA5CF868);
        uint64_t v55 = v54;
        uint64_t v56 = v34
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
        swift_beginAccess();
        uint64_t v57 = v152;
        uint64_t v58 = v152 + *(int *)(v155 + 48);
        sub_1C9F3DBCC(v55, v152, &qword_1EA5CF868);
        sub_1C9F3DBCC(v56, v58, &qword_1EA5CF868);
        uint64_t v60 = v156 + 48;
        unint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
        uint64_t v61 = v154;
        if (v59(v57, 1, v154) == 1)
        {
          sub_1C9F40EEC(v55, &qword_1EA5CF868);
          if (v59(v58, 1, v61) == 1)
          {
            uint64_t v156 = v60;
            sub_1C9F40EEC(v57, &qword_1EA5CF868);
LABEL_27:
            uint64_t v66 = v38
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
            swift_beginAccess();
            uint64_t v67 = v150;
            sub_1C9F3DBCC(v66, v150, &qword_1EA5CF868);
            uint64_t v68 = v34
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
            swift_beginAccess();
            uint64_t v69 = (uint64_t)v146;
            uint64_t v70 = (uint64_t)&v146[*(int *)(v155 + 48)];
            sub_1C9F3DBCC(v67, (uint64_t)v146, &qword_1EA5CF868);
            sub_1C9F3DBCC(v68, v70, &qword_1EA5CF868);
            if (v59(v69, 1, v61) == 1)
            {
              sub_1C9F40EEC(v67, &qword_1EA5CF868);
              if (v59(v70, 1, v61) == 1)
              {
                sub_1C9F40EEC(v69, &qword_1EA5CF868);
LABEL_34:
                uint64_t v74 = (int *)(v38
                            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
                swift_beginAccess();
                int v75 = *v74;
                uint64_t v76 = (_DWORD *)(v34
                               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
                swift_beginAccess();
                if (v75 == *v76)
                {
                  uint64_t v77 = (int *)(v38
                              + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
                  swift_beginAccess();
                  int v78 = *v77;
                  uint64_t v79 = (_DWORD *)(v34
                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
                  swift_beginAccess();
                  if (v78 == *v79)
                  {
                    uint64_t v80 = (int *)(v38
                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
                    swift_beginAccess();
                    int v81 = *v80;
                    uint64_t v82 = (_DWORD *)(v34
                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
                    swift_beginAccess();
                    if (v81 == *v82)
                    {
                      uint64_t v83 = (int *)(v38
                                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
                      swift_beginAccess();
                      int v84 = *v83;
                      uint64_t v85 = (_DWORD *)(v34
                                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
                      swift_beginAccess();
                      if (v84 == *v85)
                      {
                        uint64_t v86 = (int *)(v38
                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
                        swift_beginAccess();
                        int v87 = *v86;
                        char v88 = (_DWORD *)(v34
                                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
                        swift_beginAccess();
                        if (v87 == *v88)
                        {
                          uint64_t v89 = (int *)(v38
                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
                          swift_beginAccess();
                          int v90 = *v89;
                          v91 = (_DWORD *)(v34
                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
                          swift_beginAccess();
                          if (v90 == *v91)
                          {
                            v92 = (unsigned __int8 *)(v38
                                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
                            swift_beginAccess();
                            int v93 = *v92;
                            uint64_t v94 = (unsigned __int8 *)(v34
                                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
                            swift_beginAccess();
                            if (v93 == *v94)
                            {
                              v95 = (unsigned __int8 *)(v38
                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
                              swift_beginAccess();
                              int v96 = *v95;
                              uint64_t v97 = (unsigned __int8 *)(v34
                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
                              swift_beginAccess();
                              if (v96 == *v97)
                              {
                                uint64_t v98 = (unsigned __int8 *)(v38
                                                        + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
                                swift_beginAccess();
                                int v99 = *v98;
                                uint64_t v100 = (unsigned __int8 *)(v34
                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
                                swift_beginAccess();
                                if (v99 == *v100)
                                {
                                  uint64_t v101 = (unsigned __int8 *)(v38
                                                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
                                  swift_beginAccess();
                                  int v102 = *v101;
                                  uint64_t v103 = (unsigned __int8 *)(v34
                                                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
                                  swift_beginAccess();
                                  if (v102 == *v103)
                                  {
                                    if ((uint64_t v104 = (uint64_t *)(v159
                                                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale),
                                          swift_beginAccess(),
                                          uint64_t v105 = *v104,
                                          uint64_t v106 = v104[1],
                                          v107 = (void *)(v158
                                                          + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale),
                                          swift_beginAccess(),
                                          v105 == *v107)
                                      && v106 == v107[1]
                                      || (sub_1CA3B0560() & 1) != 0)
                                    {
                                      unint64_t v108 = (int *)(v159
                                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
                                      swift_beginAccess();
                                      int v109 = *v108;
                                      unint64_t v110 = (_DWORD *)(v158
                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
                                      swift_beginAccess();
                                      if (v109 == *v110)
                                      {
                                        uint64_t v111 = v159
                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
                                        swift_beginAccess();
                                        uint64_t v112 = *(void *)v111;
                                        uint64_t v113 = *(unsigned __int8 *)(v111 + 8);
                                        v114 = (uint64_t *)(v158
                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType);
                                        swift_beginAccess();
                                        if (sub_1C9FACCD0(v112, v113, *v114))
                                        {
                                          if ((v115 = (uint64_t *)(v159
                                                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID),
                                                swift_beginAccess(),
                                                uint64_t v116 = *v115,
                                                uint64_t v117 = v115[1],
                                                uint64_t v118 = (void *)(v158
                                                                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID),
                                                swift_beginAccess(),
                                                v116 == *v118)
                                            && v117 == v118[1]
                                            || (sub_1CA3B0560() & 1) != 0)
                                          {
                                            v119 = (void **)(v159
                                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
                                            swift_beginAccess();
                                            uint64_t v120 = *v119;
                                            uint64_t v121 = (void **)(v158
                                                             + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
                                            swift_beginAccess();
                                            if (sub_1C9F4B310(v120, *v121))
                                            {
                                              uint64_t v122 = (void **)(v159
                                                               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
                                              swift_beginAccess();
                                              uint64_t v123 = *v122;
                                              uint64_t v124 = (void **)(v158
                                                               + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
                                              swift_beginAccess();
                                              if (sub_1C9F4B310(v123, *v124))
                                              {
                                                uint64_t v125 = (uint64_t *)(v159
                                                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
                                                swift_beginAccess();
                                                uint64_t v126 = *v125;
                                                uint64_t v127 = (uint64_t *)(v158
                                                                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
                                                swift_beginAccess();
                                                uint64_t v128 = *v127;
                                                swift_bridgeObjectRetain();
                                                swift_bridgeObjectRetain();
                                                char v129 = sub_1C9F55BA8(v126, v128);
                                                swift_bridgeObjectRelease();
                                                swift_bridgeObjectRelease();
                                                if (v129)
                                                {
                                                  uint64_t v130 = (uint64_t *)(v159
                                                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
                                                  swift_beginAccess();
                                                  uint64_t v131 = *v130;
                                                  uint64_t v132 = (uint64_t *)(v158
                                                                   + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
                                                  swift_beginAccess();
                                                  uint64_t v133 = *v132;
                                                  swift_bridgeObjectRetain();
                                                  swift_bridgeObjectRetain();
                                                  char v134 = sub_1C9F55D48(v131, v133);
                                                  swift_bridgeObjectRelease();
                                                  swift_bridgeObjectRelease();
                                                  if (v134)
                                                  {
                                                    uint64_t v135 = (uint64_t *)(v159
                                                                     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
                                                    swift_beginAccess();
                                                    uint64_t v136 = *v135;
                                                    v137 = (void *)(v158
                                                                    + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
                                                    swift_beginAccess();
                                                    if (v136 == *v137)
                                                    {
                                                      uint64_t v138 = (uint64_t *)(v159
                                                                       + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
                                                      swift_beginAccess();
                                                      uint64_t v139 = *v138;
                                                      uint64_t v140 = (void *)(v158
                                                                      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
                                                      swift_beginAccess();
                                                      if (v139 == *v140)
                                                      {
                                                        uint64_t v141 = (uint64_t *)(v159
                                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
                                                        swift_beginAccess();
                                                        uint64_t v142 = *v141;
                                                        swift_release();
                                                        uint64_t v143 = (uint64_t *)(v158
                                                                         + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
                                                        swift_beginAccess();
                                                        uint64_t v144 = *v143;
                                                        swift_release();
                                                        return v142 == v144;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_11;
              }
            }
            else
            {
              uint64_t v71 = v147;
              sub_1C9F3DBCC(v69, v147, &qword_1EA5CF868);
              if (v59(v70, 1, v61) != 1)
              {
                uint64_t v72 = v148;
                sub_1CA26D0D8(v70, v148, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
                char v73 = sub_1CA26D1E0(v71, v72, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1CA265C8C);
                sub_1CA26E78C(v72, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
                sub_1C9F40EEC(v150, &qword_1EA5CF868);
                sub_1CA26E78C(v71, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
                sub_1C9F40EEC(v69, &qword_1EA5CF868);
                if (v73) {
                  goto LABEL_34;
                }
LABEL_11:
                swift_release();
                swift_release();
                return 0;
              }
              sub_1C9F40EEC(v150, &qword_1EA5CF868);
              sub_1CA26E78C(v71, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            }
            uint64_t v40 = qword_1EA5DF760;
            uint64_t v41 = v69;
LABEL_10:
            sub_1C9F40EEC(v41, v40);
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v62 = v149;
          sub_1C9F3DBCC(v57, v149, &qword_1EA5CF868);
          if (v59(v58, 1, v61) != 1)
          {
            uint64_t v156 = v60;
            uint64_t v63 = v55;
            uint64_t v64 = v148;
            sub_1CA26D0D8(v58, v148, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            char v65 = sub_1CA26D1E0(v62, v64, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1CA265C8C);
            sub_1CA26E78C(v64, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            sub_1C9F40EEC(v63, &qword_1EA5CF868);
            sub_1CA26E78C(v62, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
            uint64_t v61 = v154;
            sub_1C9F40EEC(v57, &qword_1EA5CF868);
            if ((v65 & 1) == 0) {
              goto LABEL_11;
            }
            goto LABEL_27;
          }
          sub_1C9F40EEC(v55, &qword_1EA5CF868);
          sub_1CA26E78C(v62, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
        }
        uint64_t v40 = qword_1EA5DF760;
        uint64_t v41 = v57;
        goto LABEL_10;
      }
      swift_retain();
      swift_retain();
      sub_1C9F40EEC((uint64_t)v27, &qword_1EA5CF5D0);
      sub_1CA26E78C(v39, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    }
    uint64_t v40 = &qword_1EA5D7568;
    uint64_t v41 = (uint64_t)v22;
    goto LABEL_10;
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MatchingSpan.hashValue.getter()
{
  return sub_1CA26CBC8((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &qword_1EA5DF6A8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1CA266F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA102938(a1, &qword_1EA5CF780, &qword_1EA5CF770, a2);
}

unint64_t sub_1CA266F68()
{
  return 0xD000000000000029;
}

uint64_t sub_1CA266F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MatchingSpan.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1CA266F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MatchingSpan.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1CA266FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA26E7EC(&qword_1EA5DF738, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA267030@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(qword_1EA5D3D98, (uint64_t)qword_1EA5DF630, a1);
}

uint64_t sub_1CA267054(uint64_t a1)
{
  uint64_t v2 = sub_1CA26E7EC(&qword_1EA5CF848, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA2670C0()
{
  sub_1CA26E7EC(&qword_1EA5CF848, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
  return sub_1CA3AFC40();
}

unint64_t static Com_Apple_Siri_Product_Proto_Value.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t sub_1CA26715C()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF648);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF648);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1CA3C3CF0;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 6;
  *(void *)unint64_t v5 = "floatValue";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4FA3BA0];
  uint64_t v7 = sub_1CA3AFD50();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 7;
  *(void *)unint64_t v9 = "doubleValue";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 8;
  *(void *)uint64_t v11 = "intValue";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 9;
  *(void *)uint64_t v13 = "longValue";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 10;
  *(void *)uint64_t v15 = "stringValue";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 11;
  *(void *)uint64_t v17 = "dateTimeValue";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 12;
  *(void *)uint64_t v19 = "scalarValue";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 13;
  *(void *)uint64_t v21 = "semanticTagValue";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 14;
  *(void *)uint64_t v22 = "semanticValue";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_Value._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(qword_1EA5D3DA8, (uint64_t)qword_1EA5DF648, a1);
}

uint64_t sub_1CA2674E8()
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  uint64_t v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_1EA5CF580 = v0;
  return result;
}

uint64_t sub_1CA267570()
{
  sub_1C9F40EEC(v0+ OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, &qword_1EA5CF570);
  return swift_deallocClassInstance();
}

uint64_t Com_Apple_Siri_Product_Proto_Value.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
    uint64_t v13 = swift_allocObject();
    uint64_t v25 = v4;
    uint64_t v14 = v13;
    uint64_t v24 = a1;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = v13
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    uint64_t v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    uint64_t v19 = v12
        + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
    swift_beginAccess();
    sub_1C9F3DBCC(v19, (uint64_t)v10, &qword_1EA5CF570);
    swift_beginAccess();
    uint64_t v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1C9F3DC94((uint64_t)v10, v20, &qword_1EA5CF570);
    swift_endAccess();
    *(void *)(v3 + v11) = v14;
    swift_release();
  }
  uint64_t v21 = swift_retain();
  sub_1CA2677B4(v21, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1CA2677B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    uint64_t result = sub_1CA3AFAB0();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 6:
        sub_1CA26794C(a1, a2, a3, a4);
        break;
      case 7:
        sub_1CA267BB4(a1, a2, a3, a4);
        break;
      case 8:
        sub_1CA267E1C(a1, a2, a3, a4);
        break;
      case 9:
        sub_1CA268084(a1, a2, a3, a4);
        break;
      case 10:
        uint64_t v11 = a1;
        uint64_t v12 = a2;
        uint64_t v13 = a3;
        uint64_t v14 = a4;
        int v15 = 4;
        goto LABEL_13;
      case 11:
        sub_1CA2682EC(a1, a2, a3, a4);
        break;
      case 12:
        sub_1CA2688C4(a1, a2, a3, a4);
        break;
      case 13:
        uint64_t v11 = a1;
        uint64_t v12 = a2;
        uint64_t v13 = a3;
        uint64_t v14 = a4;
        int v15 = 7;
LABEL_13:
        sub_1CA268E9C(v11, v12, v13, v14, v15);
        break;
      case 14:
        sub_1CA269108(a1, a2, a3, a4);
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_1CA26794C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v23 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v22 = (_DWORD *)((char *)&v21 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v13, (uint64_t)v12, &qword_1EA5CF570);
  uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  sub_1C9F40EEC((uint64_t)v12, &qword_1EA5CF570);
  if (v16 == 1 || (uint64_t result = sub_1CA3AFAC0(), !v4))
  {
    int v25 = 0;
    char v26 = 1;
    uint64_t result = sub_1CA3AFB00();
    if (!v4 && (v26 & 1) == 0)
    {
      uint64_t v18 = v22;
      *uint64_t v22 = v25;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      uint64_t v19 = (uint64_t)v18;
      uint64_t v20 = v23;
      sub_1C9F3DC30(v19, v23, &qword_1EA5CF570);
      swift_beginAccess();
      sub_1C9F3DC94(v20, v13, &qword_1EA5CF570);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1CA267BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v22 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v21 = (void **)((char *)&v21 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v13, (uint64_t)v12, &qword_1EA5CF570);
  uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  sub_1C9F40EEC((uint64_t)v12, &qword_1EA5CF570);
  if (v16 == 1 || (uint64_t result = sub_1CA3AFAC0(), !v4))
  {
    uint64_t v23 = 0;
    char v24 = 1;
    uint64_t result = sub_1CA3AFB70();
    if (!v4 && (v24 & 1) == 0)
    {
      uint64_t v18 = v21;
      *uint64_t v21 = v23;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      uint64_t v19 = (uint64_t)v18;
      uint64_t v20 = v22;
      sub_1C9F3DC30(v19, v22, &qword_1EA5CF570);
      swift_beginAccess();
      sub_1C9F3DC94(v20, v13, &qword_1EA5CF570);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1CA267E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v23 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v22 = (_DWORD *)((char *)&v21 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v13, (uint64_t)v12, &qword_1EA5CF570);
  uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  sub_1C9F40EEC((uint64_t)v12, &qword_1EA5CF570);
  if (v16 == 1 || (uint64_t result = sub_1CA3AFAC0(), !v4))
  {
    int v25 = 0;
    char v26 = 1;
    uint64_t result = sub_1CA3AFB10();
    if (!v4 && (v26 & 1) == 0)
    {
      uint64_t v18 = v22;
      *uint64_t v22 = v25;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      uint64_t v19 = (uint64_t)v18;
      uint64_t v20 = v23;
      sub_1C9F3DC30(v19, v23, &qword_1EA5CF570);
      swift_beginAccess();
      sub_1C9F3DC94(v20, v13, &qword_1EA5CF570);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1CA268084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v22 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v21 = (void **)((char *)&v21 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v13, (uint64_t)v12, &qword_1EA5CF570);
  uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
  sub_1C9F40EEC((uint64_t)v12, &qword_1EA5CF570);
  if (v16 == 1 || (uint64_t result = sub_1CA3AFAC0(), !v4))
  {
    uint64_t v23 = 0;
    char v24 = 1;
    uint64_t result = sub_1CA3AFB30();
    if (!v4 && (v24 & 1) == 0)
    {
      uint64_t v18 = v21;
      *uint64_t v21 = v23;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      uint64_t v19 = (uint64_t)v18;
      uint64_t v20 = v22;
      sub_1C9F3DC30(v19, v22, &qword_1EA5CF570);
      swift_beginAccess();
      sub_1C9F3DC94(v20, v13, &qword_1EA5CF570);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1CA2682EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a2;
  uint64_t v60 = a4;
  uint64_t v58 = a1;
  uint64_t v59 = a3;
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v50 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v54 = (char *)&v45 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v51 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v49 = (uint64_t)&v45 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF748);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v45 - v26;
  uint64_t v53 = v5;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v55 = v4;
  v28((char *)&v45 - v26, 1, 1, v4);
  uint64_t v29 = v58
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v29, (uint64_t)v15, &qword_1EA5CF570);
  uint64_t v48 = v17;
  char v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v58 = v16;
  int v31 = v30(v15, 1, v16);
  uint64_t v47 = v29;
  if (v31 == 1)
  {
    sub_1C9F40EEC((uint64_t)v15, &qword_1EA5CF570);
    uint64_t v32 = v55;
    uint64_t v33 = v57;
  }
  else
  {
    uint64_t v46 = v28;
    uint64_t v36 = (uint64_t)v54;
    sub_1CA26D0D8((uint64_t)v15, (uint64_t)v22, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    uint64_t v37 = v57;
    sub_1CA3AFAC0();
    uint64_t v33 = v37;
    if (v37)
    {
      sub_1CA26E78C((uint64_t)v22, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      goto LABEL_8;
    }
    sub_1CA26D0D8((uint64_t)v22, (uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v32 = v55;
    if (EnumCaseMultiPayload == 5)
    {
      sub_1C9F40EEC((uint64_t)v27, &qword_1EA5DF748);
      sub_1CA26D0D8((uint64_t)v20, v36, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
      sub_1CA26D0D8(v36, (uint64_t)v27, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
      v46(v27, 0, 1, v32);
    }
    else
    {
      sub_1CA26E78C((uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    }
  }
  sub_1CA26E7EC(&qword_1EA5D7A58, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
  sub_1CA3AFBF0();
  if (v33)
  {
LABEL_8:
    uint64_t v35 = (uint64_t)v27;
    return sub_1C9F40EEC(v35, &qword_1EA5DF748);
  }
  uint64_t v34 = v52;
  sub_1C9F3DC30((uint64_t)v27, v52, &qword_1EA5DF748);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v34, 1, v32) != 1)
  {
    uint64_t v40 = v50;
    sub_1CA26D0D8(v34, v50, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    uint64_t v41 = v49;
    sub_1CA26D0D8(v40, v49, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    uint64_t v42 = v58;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v41, 0, 1, v42);
    uint64_t v43 = v51;
    sub_1C9F3DC30(v41, v51, &qword_1EA5CF570);
    uint64_t v44 = v47;
    swift_beginAccess();
    sub_1C9F3DC94(v43, v44, &qword_1EA5CF570);
    return swift_endAccess();
  }
  uint64_t v35 = v34;
  return sub_1C9F40EEC(v35, &qword_1EA5DF748);
}

uint64_t sub_1CA2688C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a2;
  uint64_t v60 = a4;
  uint64_t v58 = a1;
  uint64_t v59 = a3;
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v50 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v54 = (char *)&v45 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v51 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v49 = (uint64_t)&v45 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF750);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v45 - v26;
  uint64_t v53 = v5;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v55 = v4;
  v28((char *)&v45 - v26, 1, 1, v4);
  uint64_t v29 = v58
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v29, (uint64_t)v15, &qword_1EA5CF570);
  uint64_t v48 = v17;
  char v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v58 = v16;
  int v31 = v30(v15, 1, v16);
  uint64_t v47 = v29;
  if (v31 == 1)
  {
    sub_1C9F40EEC((uint64_t)v15, &qword_1EA5CF570);
    uint64_t v32 = v55;
    uint64_t v33 = v57;
  }
  else
  {
    uint64_t v46 = v28;
    uint64_t v36 = (uint64_t)v54;
    sub_1CA26D0D8((uint64_t)v15, (uint64_t)v22, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    uint64_t v37 = v57;
    sub_1CA3AFAC0();
    uint64_t v33 = v37;
    if (v37)
    {
      sub_1CA26E78C((uint64_t)v22, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      goto LABEL_8;
    }
    sub_1CA26D0D8((uint64_t)v22, (uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v32 = v55;
    if (EnumCaseMultiPayload == 6)
    {
      sub_1C9F40EEC((uint64_t)v27, &qword_1EA5DF750);
      sub_1CA26D0D8((uint64_t)v20, v36, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
      sub_1CA26D0D8(v36, (uint64_t)v27, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
      v46(v27, 0, 1, v32);
    }
    else
    {
      sub_1CA26E78C((uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    }
  }
  sub_1CA26E7EC(&qword_1EA5DF6F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
  sub_1CA3AFBF0();
  if (v33)
  {
LABEL_8:
    uint64_t v35 = (uint64_t)v27;
    return sub_1C9F40EEC(v35, &qword_1EA5DF750);
  }
  uint64_t v34 = v52;
  sub_1C9F3DC30((uint64_t)v27, v52, &qword_1EA5DF750);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v34, 1, v32) != 1)
  {
    uint64_t v40 = v50;
    sub_1CA26D0D8(v34, v50, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    uint64_t v41 = v49;
    sub_1CA26D0D8(v40, v49, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    uint64_t v42 = v58;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v41, 0, 1, v42);
    uint64_t v43 = v51;
    sub_1C9F3DC30(v41, v51, &qword_1EA5CF570);
    uint64_t v44 = v47;
    swift_beginAccess();
    sub_1C9F3DC94(v43, v44, &qword_1EA5CF570);
    return swift_endAccess();
  }
  uint64_t v35 = v34;
  return sub_1C9F40EEC(v35, &qword_1EA5DF750);
}

uint64_t sub_1CA268E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v24 = a5;
  uint64_t v28 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v25 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v23 = (uint64_t *)((char *)&v22 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v14, (uint64_t)v13, &qword_1EA5CF570);
  uint64_t v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  sub_1C9F40EEC((uint64_t)v13, &qword_1EA5CF570);
  if (v17 == 1 || (uint64_t result = sub_1CA3AFAC0(), !v5))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    sub_1CA3AFB90();
    uint64_t result = v27;
    if (v5)
    {
      return swift_bridgeObjectRelease();
    }
    else if (v27)
    {
      uint64_t v19 = v23;
      *uint64_t v23 = v26;
      v19[1] = result;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      uint64_t v20 = (uint64_t)v19;
      uint64_t v21 = v25;
      sub_1C9F3DC30(v20, v25, &qword_1EA5CF570);
      swift_beginAccess();
      sub_1C9F3DC94(v21, v14, &qword_1EA5CF570);
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_1CA269108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a2;
  uint64_t v60 = a4;
  uint64_t v58 = a1;
  uint64_t v59 = a3;
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v50 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v54 = (char *)&v45 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v51 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v49 = (uint64_t)&v45 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v45 - v26;
  uint64_t v53 = v5;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v55 = v4;
  v28((char *)&v45 - v26, 1, 1, v4);
  uint64_t v29 = v58
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v29, (uint64_t)v15, &qword_1EA5CF570);
  uint64_t v48 = v17;
  char v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v58 = v16;
  int v31 = v30(v15, 1, v16);
  uint64_t v47 = v29;
  if (v31 == 1)
  {
    sub_1C9F40EEC((uint64_t)v15, &qword_1EA5CF570);
    uint64_t v32 = v55;
    uint64_t v33 = v57;
  }
  else
  {
    uint64_t v46 = v28;
    uint64_t v36 = (uint64_t)v54;
    sub_1CA26D0D8((uint64_t)v15, (uint64_t)v22, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    uint64_t v37 = v57;
    sub_1CA3AFAC0();
    uint64_t v33 = v37;
    if (v37)
    {
      sub_1CA26E78C((uint64_t)v22, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      goto LABEL_8;
    }
    sub_1CA26D0D8((uint64_t)v22, (uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v32 = v55;
    if (EnumCaseMultiPayload == 8)
    {
      sub_1C9F40EEC((uint64_t)v27, &qword_1EBCA0338);
      sub_1CA26D0D8((uint64_t)v20, v36, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      sub_1CA26D0D8(v36, (uint64_t)v27, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      v46(v27, 0, 1, v32);
    }
    else
    {
      sub_1CA26E78C((uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    }
  }
  sub_1CA26E7EC(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1CA3AFBF0();
  if (v33)
  {
LABEL_8:
    uint64_t v35 = (uint64_t)v27;
    return sub_1C9F40EEC(v35, &qword_1EBCA0338);
  }
  uint64_t v34 = v52;
  sub_1C9F3DC30((uint64_t)v27, v52, &qword_1EBCA0338);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v34, 1, v32) != 1)
  {
    uint64_t v40 = v50;
    sub_1CA26D0D8(v34, v50, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    uint64_t v41 = v49;
    sub_1CA26D0D8(v40, v49, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    uint64_t v42 = v58;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v41, 0, 1, v42);
    uint64_t v43 = v51;
    sub_1C9F3DC30(v41, v51, &qword_1EA5CF570);
    uint64_t v44 = v47;
    swift_beginAccess();
    sub_1C9F3DC94(v43, v44, &qword_1EA5CF570);
    return swift_endAccess();
  }
  uint64_t v35 = v34;
  return sub_1C9F40EEC(v35, &qword_1EBCA0338);
}

uint64_t Com_Apple_Siri_Product_Proto_Value.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA269720(a1, a2, a3, (void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1CA2697C0);
}

uint64_t sub_1CA269720(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4(0);
  uint64_t v10 = swift_retain();
  a5(v10, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v5) {
    return sub_1CA3AFA00();
  }
  return result;
}

uint64_t sub_1CA2697C0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6);
  if (result != 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        return sub_1CA269BF0(a1);
      case 2u:
        return sub_1CA269D64(a1);
      case 3u:
        return sub_1CA269ED8(a1);
      case 4u:
        sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
        return sub_1CA26A04C(a1);
      case 5u:
        sub_1CA26A1D4(a1);
        goto LABEL_13;
      case 6u:
        sub_1CA26A41C(a1);
        goto LABEL_13;
      case 7u:
        sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
        return sub_1CA26A664(a1);
      case 8u:
        sub_1CA26A7EC(a1);
LABEL_13:
        uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
        break;
      default:
        uint64_t result = sub_1CA269A80(a1);
        break;
    }
  }
  return result;
}

uint64_t sub_1CA269A80(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    return sub_1CA3AFCB0();
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA269BF0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    return sub_1CA3AFCF0();
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA269D64(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    return sub_1CA3AFCC0();
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA269ED8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    return sub_1CA3AFCD0();
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA26A04C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 4)
  {
    sub_1CA3AFD00();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA26A1D4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v8, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 5)
  {
    sub_1CA26D0D8((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    sub_1CA26E7EC(&qword_1EA5D7A58, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
    sub_1CA3AFD40();
    return sub_1CA26E78C((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA26A41C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v8, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 6)
  {
    sub_1CA26D0D8((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    sub_1CA26E7EC(&qword_1EA5DF6F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
    sub_1CA3AFD40();
    return sub_1CA26E78C((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA26A664(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v5, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 7)
  {
    sub_1CA3AFD00();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA26A7EC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1
     + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v8, (uint64_t)v4, &qword_1EA5CF570);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF570);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 8)
  {
    sub_1CA26D0D8((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1CA26E7EC(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1CA3AFD40();
    return sub_1CA26E78C((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  uint64_t result = sub_1CA26E78C((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t static Com_Apple_Siri_Product_Proto_Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1CA26D1E0(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26AA78) & 1;
}

BOOL sub_1CA26AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v25 = (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF740);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF570);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v17, (uint64_t)v16, &qword_1EA5CF570);
  uint64_t v18 = a2
      + OBJC_IVAR____TtCV12SiriOntology34Com_Apple_Siri_Product_Proto_ValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  uint64_t v19 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_1C9F3DBCC((uint64_t)v16, (uint64_t)v10, &qword_1EA5CF570);
  sub_1C9F3DBCC(v18, v19, &qword_1EA5CF570);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1, v4) == 1)
  {
    sub_1C9F40EEC((uint64_t)v16, &qword_1EA5CF570);
    if (v20(v19, 1, v4) == 1)
    {
      sub_1C9F40EEC((uint64_t)v10, &qword_1EA5CF570);
      return 1;
    }
    goto LABEL_6;
  }
  sub_1C9F3DBCC((uint64_t)v10, (uint64_t)v14, &qword_1EA5CF570);
  if (v20(v19, 1, v4) == 1)
  {
    sub_1C9F40EEC((uint64_t)v16, &qword_1EA5CF570);
    sub_1CA26E78C((uint64_t)v14, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
LABEL_6:
    sub_1C9F40EEC((uint64_t)v10, &qword_1EA5DF740);
    return 0;
  }
  uint64_t v21 = v25;
  sub_1CA26D0D8(v19, v25, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  char v22 = _s12SiriOntology010Com_Apple_A20_Product_Proto_ValueV06OneOf_G0O2eeoiySbAE_AEtFZ_0((uint64_t)v14, v21);
  sub_1CA26E78C(v21, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  sub_1C9F40EEC((uint64_t)v16, &qword_1EA5CF570);
  sub_1CA26E78C((uint64_t)v14, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  sub_1C9F40EEC((uint64_t)v10, &qword_1EA5CF570);
  return (v22 & 1) != 0;
}

uint64_t Com_Apple_Siri_Product_Proto_Value.hashValue.getter()
{
  return sub_1CA26CBC8((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_Value, &qword_1EA5DF6B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1CA26AE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA102938(a1, &qword_1EA5CF590, &qword_1EA5CF580, a2);
}

unint64_t sub_1CA26AE44()
{
  return 0xD000000000000022;
}

uint64_t sub_1CA26AE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_Value.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1CA26AE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_Value.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1CA26AE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA26E7EC(&qword_1EA5DF730, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA26AF0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(qword_1EA5D3DA8, (uint64_t)qword_1EA5DF648, a1);
}

uint64_t sub_1CA26AF30(uint64_t a1)
{
  uint64_t v2 = sub_1CA26E7EC(&qword_1EA5CF5B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA26AF9C()
{
  sub_1CA26E7EC(&qword_1EA5CF5B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  return sub_1CA3AFC40();
}

uint64_t sub_1CA26B018(uint64_t a1, uint64_t a2)
{
  return sub_1CA26D1E0(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26AA78) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_ScalarValue.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t sub_1CA26B078()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF660);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF660);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C0450;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "value";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA0];
  uint64_t v8 = sub_1CA3AFD50();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "unit";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_ScalarValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3DB8, (uint64_t)qword_1EA5DF660, a1);
}

uint64_t sub_1CA26B254()
{
  type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  uint64_t v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  qword_1EA5DF678 = v0;
  return result;
}

uint64_t sub_1CA26B328(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  uint64_t v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v13, (uint64_t)v8, &qword_1EA5CF5D0);
  swift_beginAccess();
  sub_1C9F3DC94((uint64_t)v8, v9, &qword_1EA5CF5D0);
  swift_endAccess();
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C9F3DBCC(v14, (uint64_t)v5, &qword_1EBCA0338);
  swift_release();
  swift_beginAccess();
  sub_1C9F3DC94((uint64_t)v5, v11, &qword_1EBCA0338);
  swift_endAccess();
  return v1;
}

uint64_t sub_1CA26B55C()
{
  sub_1C9F40EEC(v0+ OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, &qword_1EA5CF5D0);
  sub_1C9F40EEC(v0+ OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit, &qword_1EBCA0338);
  return swift_deallocClassInstance();
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = sub_1CA26B328(v2);
    swift_release();
  }
  swift_retain();
  sub_1CA26B6AC();
  return swift_release();
}

uint64_t sub_1CA26B6AC()
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1CA26B82C();
      }
      else if (result == 1)
      {
        sub_1CA26B760();
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t sub_1CA26B760()
{
  return swift_endAccess();
}

uint64_t sub_1CA26B82C()
{
  return swift_endAccess();
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA269720(a1, a2, a3, (void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1CA26B93C);
}

uint64_t sub_1CA26B93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  uint64_t v9 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v23 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1;
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v18, (uint64_t)v13, &qword_1EA5CF5D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1C9F40EEC((uint64_t)v13, &qword_1EA5CF5D0);
  }
  else
  {
    sub_1CA26D0D8((uint64_t)v13, (uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    sub_1CA26E7EC(&qword_1EA5CF5B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    sub_1CA3AFD40();
    uint64_t result = sub_1CA26E78C((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
    if (v4) {
      return result;
    }
  }
  uint64_t v20 = v24
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  sub_1C9F3DBCC(v20, (uint64_t)v8, &qword_1EBCA0338);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v25) == 1) {
    return sub_1C9F40EEC((uint64_t)v8, &qword_1EBCA0338);
  }
  uint64_t v21 = v23;
  sub_1CA26D0D8((uint64_t)v8, v23, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1CA26E7EC(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1CA3AFD40();
  return sub_1CA26E78C(v21, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

BOOL sub_1CA26BD44(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v44 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D6958);
  MEMORY[0x1F4188790](v47);
  uint64_t v51 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v45 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v48 = (uint64_t)&v44 - v9;
  uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v46 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D7568);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = a1;
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  sub_1C9F3DBCC(v24, (uint64_t)v22, &qword_1EA5CF5D0);
  uint64_t v25 = v52;
  uint64_t v26 = v52
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value;
  swift_beginAccess();
  uint64_t v27 = (uint64_t)&v16[*(int *)(v14 + 56)];
  sub_1C9F3DBCC((uint64_t)v22, (uint64_t)v16, &qword_1EA5CF5D0);
  sub_1C9F3DBCC(v26, v27, &qword_1EA5CF5D0);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v28((uint64_t)v16, 1, v10) != 1)
  {
    sub_1C9F3DBCC((uint64_t)v16, (uint64_t)v20, &qword_1EA5CF5D0);
    if (v28(v27, 1, v10) != 1)
    {
      uint64_t v29 = v27;
      uint64_t v30 = v46;
      sub_1CA26D0D8(v29, v46, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
      swift_retain();
      swift_retain();
      char v31 = sub_1CA26D1E0((uint64_t)v20, v30, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26AA78);
      sub_1CA26E78C(v30, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
      sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF5D0);
      sub_1CA26E78C((uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
      sub_1C9F40EEC((uint64_t)v16, &qword_1EA5CF5D0);
      if (v31) {
        goto LABEL_9;
      }
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF5D0);
    sub_1CA26E78C((uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
LABEL_6:
    sub_1C9F40EEC((uint64_t)v16, &qword_1EA5D7568);
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF5D0);
  if (v28(v27, 1, v10) != 1) {
    goto LABEL_6;
  }
  sub_1C9F40EEC((uint64_t)v16, &qword_1EA5CF5D0);
LABEL_9:
  uint64_t v32 = v23
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  uint64_t v33 = v48;
  sub_1C9F3DBCC(v32, v48, &qword_1EBCA0338);
  uint64_t v34 = v25
      + OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__unit;
  swift_beginAccess();
  uint64_t v35 = v51;
  uint64_t v36 = v51 + *(int *)(v47 + 48);
  sub_1C9F3DBCC(v33, v51, &qword_1EBCA0338);
  sub_1C9F3DBCC(v34, v36, &qword_1EBCA0338);
  uint64_t v37 = v50;
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v38(v35, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    sub_1C9F40EEC(v33, &qword_1EBCA0338);
    if (v38(v36, 1, v37) == 1)
    {
      sub_1C9F40EEC(v35, &qword_1EBCA0338);
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v39 = v45;
  sub_1C9F3DBCC(v35, v45, &qword_1EBCA0338);
  if (v38(v36, 1, v37) == 1)
  {
    swift_release();
    swift_release();
    sub_1C9F40EEC(v33, &qword_1EBCA0338);
    sub_1CA26E78C(v39, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
LABEL_14:
    sub_1C9F40EEC(v35, &qword_1EA5D6958);
    return 0;
  }
  uint64_t v41 = v36;
  uint64_t v42 = v44;
  sub_1CA26D0D8(v41, v44, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  char v43 = _s12SiriOntology010Com_Apple_A28_Product_Proto_SemanticValueV2eeoiySbAC_ACtFZ_0(v39, v42);
  swift_release();
  swift_release();
  sub_1CA26E78C(v42, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C9F40EEC(v33, &qword_1EBCA0338);
  sub_1CA26E78C(v39, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1C9F40EEC(v35, &qword_1EBCA0338);
  return (v43 & 1) != 0;
}

uint64_t Com_Apple_Siri_Product_Proto_ScalarValue.hashValue.getter()
{
  return sub_1CA26CBC8((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &qword_1EA5DF6B8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1CA26C4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA102938(a1, &qword_1EA5D3DC0, &qword_1EA5DF678, a2);
}

unint64_t sub_1CA26C4D0()
{
  return 0xD000000000000028;
}

uint64_t sub_1CA26C4EC()
{
  return Com_Apple_Siri_Product_Proto_ScalarValue.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA26C504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_ScalarValue.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1CA26C51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA26E7EC(&qword_1EA5DF728, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA26C598@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3DB8, (uint64_t)qword_1EA5DF660, a1);
}

uint64_t sub_1CA26C5BC(uint64_t a1)
{
  uint64_t v2 = sub_1CA26E7EC(&qword_1EA5DF6F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA26C628()
{
  sub_1CA26E7EC(&qword_1EA5DF6F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
  return sub_1CA3AFC40();
}

uint64_t sub_1CA26C6A4(uint64_t a1, uint64_t a2)
{
  return sub_1CA26D1E0(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26BD44) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_SemanticValue.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1CA26C704()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF680);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF680);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C1B90;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "ontologyNodePojoClassName";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA0];
  uint64_t v8 = sub_1CA3AFD50();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "serializedValue";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "semanticValueClassName";
  *((void *)v12 + 1) = 22;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "tags";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_SemanticValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(qword_1EA5D3DC8, (uint64_t)qword_1EA5DF680, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          sub_1CA3AFBA0();
          break;
        case 4:
          sub_1CA3AFB50();
          break;
        default:
          break;
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_1CA3AFD00(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = sub_1CA3AFD00(), !v1))
    {
      unint64_t v7 = v0[5];
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = sub_1CA3AFD00(), !v1))
      {
        if (!*(void *)(v0[6] + 16) || (uint64_t result = sub_1CA3AFCE0(), !v1))
        {
          type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
          return sub_1CA3AFA00();
        }
      }
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.hashValue.getter()
{
  return sub_1CA26CBC8((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, &qword_1EA5DF6C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1CA26CBC8(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA26CC50@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E4FBC860];
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA26CC8C()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1CA26CCA8()
{
  return Com_Apple_Siri_Product_Proto_SemanticValue.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA26CCC0()
{
  return Com_Apple_Siri_Product_Proto_SemanticValue.traverse<A>(visitor:)();
}

uint64_t sub_1CA26CCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA26E7EC(&qword_1EA5DF720, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA26CD54@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(qword_1EA5D3DC8, (uint64_t)qword_1EA5DF680, a1);
}

uint64_t sub_1CA26CD78(uint64_t a1)
{
  uint64_t v2 = sub_1CA26E7EC(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA26CDE4()
{
  sub_1CA26E7EC(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1CA3AFC40();
}

uint64_t _s12SiriOntology010Com_Apple_A28_Product_Proto_SemanticValueV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (sub_1CA3B0560() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (sub_1CA3B0560() & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v12 = 0, (sub_1CA3B0560() & 1) != 0))
      {
        if (sub_1C9F4B310(*(void **)(a1 + 48), *(void **)(a2 + 48)))
        {
          uint64_t v14 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
          uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v15(v10, a1 + *(int *)(v14 + 32), v4);
          v15(v8, a2 + *(int *)(v14 + 32), v4);
          sub_1CA26E7EC(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
          char v12 = sub_1CA3AFDD0();
          uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
          v16(v8, v4);
          v16(v10, v4);
        }
        else
        {
          char v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_1CA26D08C(uint64_t a1, uint64_t a2)
{
  return sub_1CA26D1E0(a1, a2, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(uint64_t, uint64_t))sub_1CA265C8C);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_Value(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF5C0);
}

uint64_t sub_1CA26D0D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF720);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF5A0);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF560);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DF710);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF838);
}

uint64_t sub_1CA26D1E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_1CA3AFA20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_1CA26E7EC(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
    char v20 = sub_1CA3AFDD0();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A20_Product_Proto_ValueV06OneOf_G0O2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v2 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v54 = (uint64_t)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v53 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v52 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v52 - v12);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v56 = (uint64_t)&v52 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v55 = (uint64_t)&v52 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  char v20 = (uint64_t *)((char *)&v52 - v19);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (uint64_t *)((char *)&v52 - v22);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (_DWORD *)((char *)&v52 - v25);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (double *)((char *)&v52 - v28);
  MEMORY[0x1F4188790](v27);
  char v31 = (float *)((char *)&v52 - v30);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF758);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  uint64_t v35 = (char *)&v52 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (uint64_t)&v35[*(int *)(v33 + 56)];
  sub_1CA26E724(v58, (uint64_t)v35, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  sub_1CA26E724(v59, v36, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1CA26E724((uint64_t)v35, (uint64_t)v29, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_41;
      }
      BOOL v37 = *v29 == *(double *)v36;
      goto LABEL_16;
    case 2u:
      sub_1CA26E724((uint64_t)v35, (uint64_t)v26, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_41;
      }
      BOOL v37 = *v26 == *(_DWORD *)v36;
      goto LABEL_16;
    case 3u:
      sub_1CA26E724((uint64_t)v35, (uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_41;
      }
      BOOL v37 = *v23 == *(void *)v36;
      goto LABEL_16;
    case 4u:
      sub_1CA26E724((uint64_t)v35, (uint64_t)v20, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      uint64_t v39 = *v20;
      uint64_t v38 = v20[1];
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_30;
      }
      if (v39 != *(void *)v36 || v38 != *(void *)(v36 + 8)) {
        goto LABEL_28;
      }
      goto LABEL_35;
    case 5u:
      uint64_t v42 = v55;
      sub_1CA26E724((uint64_t)v35, v55, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v43 = v52;
        sub_1CA26D0D8(v36, v52, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime);
        char v41 = _s12SiriOntology010Com_Apple_A23_Product_Proto_DateTimeV2eeoiySbAC_ACtFZ_0(v42, v43);
        uint64_t v44 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime;
        goto LABEL_33;
      }
      uint64_t v50 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime;
      goto LABEL_40;
    case 6u:
      uint64_t v42 = v56;
      sub_1CA26E724((uint64_t)v35, v56, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v43 = v53;
        sub_1CA26D0D8(v36, v53, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
        char v41 = sub_1CA26D1E0(v42, v43, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(uint64_t, uint64_t))sub_1CA26BD44);
        uint64_t v44 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue;
        goto LABEL_33;
      }
      uint64_t v50 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue;
      goto LABEL_40;
    case 7u:
      sub_1CA26E724((uint64_t)v35, (uint64_t)v13, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      uint64_t v46 = *v13;
      uint64_t v45 = v13[1];
      if (swift_getEnumCaseMultiPayload() != 7)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      if (v46 == *(void *)v36 && v45 == *(void *)(v36 + 8))
      {
LABEL_35:
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_28:
        char v48 = sub_1CA3B0560();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v48 & 1) == 0)
        {
          sub_1CA26E78C((uint64_t)v35, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
          goto LABEL_42;
        }
      }
      sub_1CA26E78C((uint64_t)v35, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      char v41 = 1;
      break;
    case 8u:
      uint64_t v42 = v57;
      sub_1CA26E724((uint64_t)v35, v57, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v43 = v54;
        sub_1CA26D0D8(v36, v54, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
        char v41 = _s12SiriOntology010Com_Apple_A28_Product_Proto_SemanticValueV2eeoiySbAC_ACtFZ_0(v42, v43);
        uint64_t v44 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue;
LABEL_33:
        uint64_t v49 = v44;
        sub_1CA26E78C(v43, v44);
        sub_1CA26E78C(v42, v49);
LABEL_34:
        sub_1CA26E78C((uint64_t)v35, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      }
      else
      {
        uint64_t v50 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue;
LABEL_40:
        sub_1CA26E78C(v42, v50);
LABEL_41:
        sub_1C9F40EEC((uint64_t)v35, &qword_1EA5DF758);
LABEL_42:
        char v41 = 0;
      }
      break;
    default:
      sub_1CA26E724((uint64_t)v35, (uint64_t)v31, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_41;
      }
      BOOL v37 = *v31 == *(float *)v36;
LABEL_16:
      char v41 = v37;
      goto LABEL_34;
  }
  return v41 & 1;
}

uint64_t sub_1CA26DB98(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF868);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v98 = (uint64_t)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF5D0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v93 = (uint64_t)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  uint64_t v92 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)(v1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v10 = (void *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  void *v10 = 0;
  v10[1] = 0xE000000000000000;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  uint64_t v94 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  uint64_t v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0);
  uint64_t v13 = *(void (**)(void))(*(void *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  uint64_t v95 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  v13();
  int v96 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start) = 0;
  uint64_t v97 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end) = 0;
  int v99 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix) = 0;
  uint64_t v100 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix) = 0;
  uint64_t v101 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence) = 0;
  int v102 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence) = 0;
  uint64_t v103 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit) = 0;
  uint64_t v104 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch) = 0;
  uint64_t v105 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch) = 0;
  uint64_t v106 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch) = 0;
  uint64_t v14 = (void *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  v107 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  void *v14 = 0;
  v14[1] = 0xE000000000000000;
  unint64_t v108 = (_DWORD *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords) = 0;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = (void *)(v1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  int v109 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  void *v16 = 0;
  v16[1] = 0xE000000000000000;
  uint64_t v111 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames) = MEMORY[0x1E4FBC860];
  uint64_t v112 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
  *(void *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags) = v17;
  uint64_t v18 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  uint64_t v113 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  unint64_t *v18 = sub_1C9F78658(v17);
  uint64_t v19 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  v114 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  unint64_t *v19 = sub_1C9F7876C(v17);
  v115 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
  *(void *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata) = 0;
  uint64_t v116 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
  *(void *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime) = 0;
  unint64_t v110 = (void *)(v1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
  *(void *)(v1
            + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime) = 0;
  swift_beginAccess();
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v20;
  *(void *)(v1 + 24) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue;
  swift_beginAccess();
  uint64_t v23 = v22;
  uint64_t v24 = v93;
  sub_1C9F3DBCC(v23, v93, &qword_1EA5CF5D0);
  uint64_t v25 = v92;
  swift_beginAccess();
  sub_1C9F3DC94(v24, v25, &qword_1EA5CF5D0);
  swift_endAccess();
  uint64_t v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
  swift_beginAccess();
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  swift_beginAccess();
  *uint64_t v9 = v28;
  v9[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
  swift_beginAccess();
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  swift_beginAccess();
  void *v10 = v31;
  v10[1] = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix;
  swift_beginAccess();
  uint64_t v33 = v98;
  sub_1C9F3DBCC(v32, v98, &qword_1EA5CF868);
  uint64_t v34 = v94;
  swift_beginAccess();
  sub_1C9F3DC94(v33, v34, &qword_1EA5CF868);
  swift_endAccess();
  uint64_t v35 = a1
      + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix;
  swift_beginAccess();
  sub_1C9F3DBCC(v35, v33, &qword_1EA5CF868);
  uint64_t v36 = v95;
  swift_beginAccess();
  sub_1C9F3DC94(v33, v36, &qword_1EA5CF868);
  swift_endAccess();
  BOOL v37 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
  swift_beginAccess();
  LODWORD(v37) = *v37;
  uint64_t v38 = v96;
  swift_beginAccess();
  *uint64_t v38 = v37;
  uint64_t v39 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
  swift_beginAccess();
  LODWORD(v39) = *v39;
  uint64_t v40 = v97;
  swift_beginAccess();
  *uint64_t v40 = v39;
  char v41 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
  swift_beginAccess();
  LODWORD(v41) = *v41;
  uint64_t v42 = v99;
  swift_beginAccess();
  *uint64_t v42 = v41;
  uint64_t v43 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
  swift_beginAccess();
  LODWORD(v43) = *v43;
  uint64_t v44 = v100;
  swift_beginAccess();
  *uint64_t v44 = v43;
  uint64_t v45 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
  swift_beginAccess();
  LODWORD(v45) = *v45;
  uint64_t v46 = v101;
  swift_beginAccess();
  *uint64_t v46 = v45;
  uint64_t v47 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
  swift_beginAccess();
  LODWORD(v47) = *v47;
  char v48 = v102;
  swift_beginAccess();
  *char v48 = v47;
  uint64_t v49 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
  swift_beginAccess();
  LOBYTE(v49) = *v49;
  uint64_t v50 = v103;
  swift_beginAccess();
  *uint64_t v50 = (_BYTE)v49;
  uint64_t v51 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
  swift_beginAccess();
  LOBYTE(v51) = *v51;
  uint64_t v52 = v104;
  swift_beginAccess();
  *uint64_t v52 = (_BYTE)v51;
  uint64_t v53 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
  swift_beginAccess();
  LOBYTE(v53) = *v53;
  uint64_t v54 = v105;
  swift_beginAccess();
  *uint64_t v54 = (_BYTE)v53;
  uint64_t v55 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
  swift_beginAccess();
  LOBYTE(v55) = *v55;
  uint64_t v56 = v106;
  swift_beginAccess();
  *uint64_t v56 = (_BYTE)v55;
  uint64_t v57 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
  swift_beginAccess();
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  uint64_t v60 = v107;
  swift_beginAccess();
  *uint64_t v60 = v59;
  v60[1] = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
  swift_beginAccess();
  LODWORD(v61) = *v61;
  uint64_t v62 = v108;
  swift_beginAccess();
  _DWORD *v62 = v61;
  uint64_t v63 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchType);
  swift_beginAccess();
  uint64_t v64 = *v63;
  LOBYTE(v63) = *((unsigned char *)v63 + 8);
  swift_beginAccess();
  *(void *)uint64_t v15 = v64;
  *(unsigned char *)(v15 + 8) = (_BYTE)v63;
  char v65 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
  swift_beginAccess();
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  uint64_t v68 = v109;
  swift_beginAccess();
  *uint64_t v68 = v67;
  v68[1] = v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v69 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
  swift_beginAccess();
  uint64_t v70 = *v69;
  uint64_t v71 = v111;
  swift_beginAccess();
  *uint64_t v71 = v70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
  swift_beginAccess();
  uint64_t v73 = *v72;
  uint64_t v74 = v112;
  swift_beginAccess();
  *uint64_t v74 = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v75 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
  swift_beginAccess();
  uint64_t v76 = *v75;
  uint64_t v77 = v113;
  swift_beginAccess();
  *uint64_t v77 = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v78 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
  swift_beginAccess();
  uint64_t v79 = *v78;
  uint64_t v80 = v114;
  swift_beginAccess();
  *uint64_t v80 = v79;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v81 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v82 = *v81;
  uint64_t v83 = v115;
  swift_beginAccess();
  *uint64_t v83 = v82;
  int v84 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
  swift_beginAccess();
  uint64_t v85 = *v84;
  uint64_t v86 = v116;
  swift_beginAccess();
  *uint64_t v86 = v85;
  int v87 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
  swift_beginAccess();
  uint64_t v88 = *v87;
  uint64_t v89 = v110;
  swift_beginAccess();
  void *v89 = v88;
  return v1;
}

uint64_t sub_1CA26E724(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CA26E78C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1CA26E7EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CA26E838()
{
  unint64_t result = qword_1EA5CF6C8;
  if (!qword_1EA5CF6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5CF6C8);
  }
  return result;
}

unint64_t sub_1CA26E890()
{
  unint64_t result = qword_1EA5CF6D8;
  if (!qword_1EA5CF6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5CF6D8);
  }
  return result;
}

unint64_t sub_1CA26E8E8()
{
  unint64_t result = qword_1EA5CF6D0;
  if (!qword_1EA5CF6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5CF6D0);
  }
  return result;
}

unint64_t sub_1CA26E940()
{
  unint64_t result = qword_1EA5DF6C8;
  if (!qword_1EA5DF6C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA5DF6D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF6C8);
  }
  return result;
}

uint64_t sub_1CA26E99C()
{
  return sub_1CA26E7EC(&qword_1EA5CF850, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1CA26E9E4()
{
  return sub_1CA26E7EC(&qword_1EA5CF848, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1CA26EA2C()
{
  return sub_1CA26E7EC(&qword_1EA5DF6A8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1CA26EA74()
{
  return sub_1CA26E7EC(&qword_1EA5DF6D8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
}

uint64_t sub_1CA26EABC()
{
  return sub_1CA26E7EC(&qword_1EA5CF5B8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1CA26EB04()
{
  return sub_1CA26E7EC(&qword_1EA5CF5B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1CA26EB4C()
{
  return sub_1CA26E7EC(&qword_1EA5DF6B0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1CA26EB94()
{
  return sub_1CA26E7EC(&qword_1EA5DF6E0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
}

uint64_t sub_1CA26EBDC()
{
  return sub_1CA26E7EC(&qword_1EA5DF6E8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1CA26EC24()
{
  return sub_1CA26E7EC(&qword_1EA5DF6F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1CA26EC6C()
{
  return sub_1CA26E7EC(&qword_1EA5DF6B8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1CA26ECB4()
{
  return sub_1CA26E7EC(&qword_1EA5DF6F8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue);
}

uint64_t sub_1CA26ECFC()
{
  return sub_1CA26E7EC(&qword_1EA5DF700, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1CA26ED44()
{
  return sub_1CA26E7EC(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1CA26ED8C()
{
  return sub_1CA26E7EC(&qword_1EA5DF6C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1CA26EDD4()
{
  return sub_1CA26E7EC(&qword_1EA5DF708, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
}

uint64_t sub_1CA26EE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA262938(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__serializedValue, a2);
}

uint64_t sub_1CA26EE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_MatchingSpan.serializedValue.setter);
}

uint64_t sub_1CA26EEAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25DB7C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input, a2);
}

uint64_t sub_1CA26EECC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DBEC(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__input);
}

uint64_t sub_1CA26EEEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25DB7C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm, a2);
}

uint64_t sub_1CA26EF0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DBEC(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matchedTerm);
}

uint64_t sub_1CA26EF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA25E27C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefix, a2);
}

uint64_t sub_1CA26EF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_MatchingSpan.prefix.setter);
}

uint64_t sub_1CA26EFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA25E27C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__suffix, a2);
}

uint64_t sub_1CA26EFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_MatchingSpan.suffix.setter);
}

uint64_t sub_1CA26F014@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start, a2);
}

uint64_t sub_1CA26F020(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__start);
}

uint64_t sub_1CA26F040@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end, a2);
}

uint64_t keypath_get_31Tm_1@<X0>(uint64_t a1@<X0>, void *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t v4 = (_DWORD *)(*(void *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1CA26F0B8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__end);
}

uint64_t sub_1CA26F0D8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix, a2);
}

uint64_t sub_1CA26F0E4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__startWithoutPrefix);
}

uint64_t sub_1CA26F104@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix, a2);
}

uint64_t sub_1CA26F110(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__endWithoutSuffix);
}

uint64_t sub_1CA26F130@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence, a2);
}

uint64_t sub_1CA26F13C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__confidence);
}

uint64_t sub_1CA26F15C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence, a2);
}

uint64_t sub_1CA26F168(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__prefixSuffixConfidence);
}

uint64_t sub_1CA26F188@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit, a2);
}

uint64_t sub_1CA26F194(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25EDB0(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__explicit);
}

uint64_t sub_1CA26F1B4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch, a2);
}

uint64_t keypath_get_43Tm@<X0>(uint64_t a1@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v4 = (unsigned char *)(*(void *)(a1
                           + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
               + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1CA26F22C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25EDB0(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isSuffixVariableMatch);
}

uint64_t sub_1CA26F24C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch, a2);
}

uint64_t sub_1CA26F258(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25EDB0(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPrefixVariableMatch);
}

uint64_t sub_1CA26F278@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch, a2);
}

uint64_t sub_1CA26F284(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25EDB0(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__isPayloadVariableMatch);
}

uint64_t sub_1CA26F2A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25DB7C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale, a2);
}

uint64_t sub_1CA26F2C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DBEC(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__locale);
}

uint64_t sub_1CA26F2E4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_31Tm_1(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords, a2);
}

uint64_t sub_1CA26F2F0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25E83C(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__numWords);
}

uint64_t sub_1CA26F318@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25DB7C(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID, a2);
}

uint64_t sub_1CA26F338(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DBEC(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__appID);
}

uint64_t sub_1CA26F358@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25F6A4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames, a2);
}

uint64_t sub_1CA26F378(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25F714(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__matcherNames);
}

uint64_t sub_1CA26F398@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25F6A4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags, a2);
}

uint64_t sub_1CA26F3B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25F714(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__tags);
}

uint64_t sub_1CA26F3D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25F6A4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences, a2);
}

uint64_t sub_1CA26F3F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25F714(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationConfidences);
}

uint64_t sub_1CA26F418@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1CA25F6A4(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences, a2);
}

uint64_t sub_1CA26F438(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25F714(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__altInterpretationPhoneSequences);
}

uint64_t sub_1CA26F458@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_67Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata, a2);
}

uint64_t sub_1CA26F464(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25FC04(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__metadata);
}

uint64_t sub_1CA26F484@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_67Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime, a2);
}

uint64_t keypath_get_67Tm@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(a1
                            + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan(0) + 20))
                + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1CA26F4FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25FC04(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesStartTime);
}

uint64_t sub_1CA26F51C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_67Tm(a1, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime, a2);
}

uint64_t sub_1CA26F528(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25FC04(a1, a2, a3, a4, &OBJC_IVAR____TtCV12SiriOntology41Com_Apple_Siri_Product_Proto_MatchingSpanP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__preItnphrasesEndTime);
}

uint64_t sub_1CA26F554(float *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.floatValue.setter(*a1);
}

uint64_t sub_1CA26F580(double *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.doubleValue.setter(*a1);
}

uint64_t sub_1CA26F5AC(int *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.intValue.setter(*a1);
}

uint64_t sub_1CA26F5D8(uint64_t *a1)
{
  return Com_Apple_Siri_Product_Proto_Value.longValue.setter(*a1);
}

uint64_t sub_1CA26F600@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Com_Apple_Siri_Product_Proto_Value.stringValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1CA26F62C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_84Tm(a1, a2, a3, a4, Com_Apple_Siri_Product_Proto_Value.stringValue.setter);
}

uint64_t sub_1CA26F644@<X0>(uint64_t a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_Value.dateTimeValue.getter(a1);
}

uint64_t sub_1CA26F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_Value.dateTimeValue.setter);
}

uint64_t sub_1CA26F6BC@<X0>(uint64_t a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_Value.scalarValue.getter(a1);
}

uint64_t sub_1CA26F6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_Value.scalarValue.setter);
}

uint64_t sub_1CA26F734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Com_Apple_Siri_Product_Proto_Value.semanticTagValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1CA26F760(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_84Tm(a1, a2, a3, a4, Com_Apple_Siri_Product_Proto_Value.semanticTagValue.setter);
}

uint64_t keypath_set_84Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_1CA26F7C0@<X0>(void *a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_Value.semanticValue.getter(a1);
}

uint64_t sub_1CA26F7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_Value.semanticValue.setter);
}

uint64_t sub_1CA26F838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CA262938(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue, &OBJC_IVAR____TtCV12SiriOntology40Com_Apple_Siri_Product_Proto_ScalarValueP33_FC4EE5074104C85BFB570AF81C8E8EC613_StorageClass__value, a2);
}

uint64_t sub_1CA26F86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, type metadata accessor for Com_Apple_Siri_Product_Proto_Value, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_ScalarValue.value.setter);
}

uint64_t sub_1CA26F8C0@<X0>(void *a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_ScalarValue.unit.getter(a1);
}

uint64_t sub_1CA26F8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CA25DEFC(a1, a2, a3, a4, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue, (uint64_t (*)(char *))Com_Apple_Siri_Product_Proto_ScalarValue.unit.setter);
}

ValueMetadata *type metadata accessor for Com_Apple_Siri_Product_Proto_MatchType()
{
  return &type metadata for Com_Apple_Siri_Product_Proto_MatchType;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MatchingSpan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1);
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MatchingSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1);
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
      case 7u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v10 = sub_1CA3AFA20();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
        *(uint64_t *)((char *)a1 + *(int *)(v11 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        uint64_t v12 = sub_1CA3AFA20();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
        *(uint64_t *)((char *)a1 + *(int *)(v13 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v13 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        uint64_t v15 = a2[3];
        a1[2] = a2[2];
        a1[3] = v15;
        uint64_t v16 = a2[5];
        a1[4] = a2[4];
        a1[5] = v16;
        a1[6] = a2[6];
        uint64_t v17 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        uint64_t v18 = (char *)a1 + v17;
        uint64_t v21 = (char *)a2 + v17;
        uint64_t v19 = sub_1CA3AFA20();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20(v18, v21, v19);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 4:
    case 7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      uint64_t v3 = sub_1CA3AFA20();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
      goto LABEL_7;
    case 6:
      uint64_t v4 = sub_1CA3AFA20();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
LABEL_7:
      uint64_t result = swift_release();
      break;
    case 8:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v6 = sub_1CA3AFA20();
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      uint64_t result = v7(v5, v6);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
    case 7u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 5u:
      uint64_t v7 = sub_1CA3AFA20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
      *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
      swift_retain();
      goto LABEL_7;
    case 6u:
      uint64_t v9 = sub_1CA3AFA20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
      *(void *)((char *)a1 + *(int *)(v10 + 20)) = *(void *)((char *)a2 + *(int *)(v10 + 20));
      swift_retain();
      goto LABEL_7;
    case 8u:
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      uint64_t v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      a1[6] = a2[6];
      uint64_t v14 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v19 = (char *)a2 + v14;
      uint64_t v16 = sub_1CA3AFA20();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(v15, v19, v16);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1CA26E78C((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 5u:
        uint64_t v6 = sub_1CA3AFA20();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
        *(void *)((char *)a1 + *(int *)(v7 + 20)) = *(void *)((char *)a2 + *(int *)(v7 + 20));
        swift_retain();
        goto LABEL_8;
      case 6u:
        uint64_t v8 = sub_1CA3AFA20();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
        *(void *)((char *)a1 + *(int *)(v9 + 20)) = *(void *)((char *)a2 + *(int *)(v9 + 20));
        swift_retain();
        goto LABEL_8;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v15 = (char *)a2 + v10;
        uint64_t v12 = sub_1CA3AFA20();
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13(v11, v15, v12);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 8:
      long long v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      a1[2] = a2[2];
      *((void *)a1 + 6) = *((void *)a2 + 6);
      uint64_t v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = sub_1CA3AFA20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
      break;
    case 6:
      uint64_t v14 = sub_1CA3AFA20();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      uint64_t v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
      *(void *)((char *)a1 + *(int *)(v15 + 20)) = *(void *)((char *)a2 + *(int *)(v15 + 20));
      swift_storeEnumTagMultiPayload();
      break;
    case 5:
      uint64_t v7 = sub_1CA3AFA20();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
      *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for Com_Apple_Siri_Product_Proto_Value.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1CA26E78C((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 8:
        long long v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        a1[2] = a2[2];
        *((void *)a1 + 6) = *((void *)a2 + 6);
        uint64_t v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = sub_1CA3AFA20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 6:
        uint64_t v14 = sub_1CA3AFA20();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(0);
        *(void *)((char *)a1 + *(int *)(v15 + 20)) = *(void *)((char *)a2 + *(int *)(v15 + 20));
        swift_storeEnumTagMultiPayload();
        break;
      case 5:
        uint64_t v7 = sub_1CA3AFA20();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(0);
        *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1CA2706D4()
{
  uint64_t result = type metadata accessor for Com_Apple_Siri_Product_Proto_DateTime(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_ScalarValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_3);
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_ScalarValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_3);
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = *(int *)(a3 + 32);
    long long v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    a1[6] = a2[6];
    uint64_t v11 = sub_1CA3AFA20();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Com_Apple_Siri_Product_Proto_SemanticValue(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  a1[6] = a2[6];
  uint64_t v10 = sub_1CA3AFA20();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

void *assignWithCopy for Com_Apple_Siri_Product_Proto_SemanticValue(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for Com_Apple_Siri_Product_Proto_SemanticValue(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA270D00);
}

uint64_t sub_1CA270D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1CA3AFA20();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_SemanticValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA270DC4);
}

uint64_t sub_1CA270DC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1CA3AFA20();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1CA270E6C()
{
  uint64_t result = sub_1CA3AFA20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CA270F14()
{
  return type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan._StorageClass(0);
}

void sub_1CA270F1C()
{
  sub_1CA271094(319, &qword_1EA5CF5D8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  if (v0 <= 0x3F)
  {
    sub_1CA271094(319, &qword_1EA5CF870, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MatchingSpan);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1CA271094(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1CA3B0170();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1CA2710E8()
{
  return type metadata accessor for Com_Apple_Siri_Product_Proto_Value._StorageClass(0);
}

void sub_1CA2710F0()
{
  sub_1CA271094(319, &qword_1EA5CF578, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value.OneOf_Value);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1CA27119C()
{
  return type metadata accessor for Com_Apple_Siri_Product_Proto_ScalarValue._StorageClass(0);
}

void sub_1CA2711A4()
{
  sub_1CA271094(319, &qword_1EA5CF5D8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_Value);
  if (v0 <= 0x3F)
  {
    sub_1CA271094(319, &qword_1EBCA0340, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unint64_t sub_1CA2712A8()
{
  unint64_t result = qword_1EA5CF6C0;
  if (!qword_1EA5CF6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5CF6C0);
  }
  return result;
}

__n128 StreetAddressIntentNode.init(intentNode:ontologyNode:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)a3 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = a2;
  return result;
}

uint64_t StreetAddressIntentNode.intentNode.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t StreetAddressIntentNode.ontologyNode.getter()
{
  return swift_retain();
}

uint64_t static StreetAddressIntentNode.from(intentNode:ontologyNode:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = v4;
  a3[3] = v5;
  a3[4] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t StreetAddressIntentNode.streetName.getter()
{
  return sub_1CA1A1BBC();
}

uint64_t StreetAddressIntentNode.streetNumber.getter()
{
  return sub_1CA1A1BBC();
}

uint64_t StreetAddressIntentNode.streetType.getter()
{
  return sub_1CA271470(&qword_1EA5D75D8, (uint64_t)&unk_1EA5D4680, (uint64_t (*)(uint64_t))sub_1CA1A16A4);
}

uint64_t StreetAddressIntentNode.crossStreetName.getter()
{
  return sub_1CA1A1BBC();
}

uint64_t StreetAddressIntentNode.crossStreetType.getter()
{
  return sub_1CA271470(&qword_1EA5D75D8, (uint64_t)&unk_1EA5D46E0, (uint64_t (*)(uint64_t))sub_1CA1A16A4);
}

uint64_t StreetAddressIntentNode.crossStreetJoin.getter()
{
  return sub_1CA271470(&qword_1EA5D75D0, (uint64_t)&unk_1EA5D4710, (uint64_t (*)(uint64_t))sub_1CA1A1820);
}

uint64_t sub_1CA271470(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t inited = swift_initStaticObject();
  return a3(inited);
}

ValueMetadata *type metadata accessor for StreetAddressIntentNode()
{
  return &type metadata for StreetAddressIntentNode;
}

uint64_t sub_1CA2714E4(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  return OntologyNode<>.isEqualTo(_:)(a1, a2);
}

uint64_t OntologyNode<>.isEqualTo(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA3B0170();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v17[-v7 - 8];
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1C9F4544C(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CFB28);
  int v12 = swift_dynamicCast();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v12)
  {
    v13(v8, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, a2);
    char v14 = sub_1CA3AFDD0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  }
  else
  {
    v13(v8, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t dispatch thunk of OntologyNode.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of OntologyNode.multicardinal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of OntologyNode.isEqualTo(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1CA27179C(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  return OntologyNode<>.isEqualTo(_:)(a1, a2);
}

uint64_t sub_1CA2717FC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyOntologyNode()
{
  return self;
}

uint64_t sub_1CA271858()
{
  unint64_t v1 = (void *)*v0;
  sub_1CA3B0610();
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  sub_1CA3B0630();
  return sub_1CA3B0660();
}

uint64_t sub_1CA271934()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)(*v0 + 16);
  uint64_t v3 = *(void *)(*v0 + 40);
  uint64_t v4 = *(void *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  return sub_1CA3B0630();
}

uint64_t sub_1CA2719F8()
{
  sub_1CA3B0610();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)(*v0 + 16);
  uint64_t v3 = *(void *)(*v0 + 40);
  uint64_t v4 = *(void *)(*v0 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  sub_1CA3B0630();
  return sub_1CA3B0660();
}

uint64_t sub_1CA271AD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(*(void *)a1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)a1 + 16), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v2 + 16, v3, v4) & 1;
}

unint64_t sub_1CA271B38()
{
  unint64_t result = qword_1EA5CFA50;
  if (!qword_1EA5CFA50)
  {
    type metadata accessor for AnyOntologyNode();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5CFA50);
  }
  return result;
}

uint64_t sub_1CA271B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for AnyOntologyNode();
  uint64_t v7 = swift_allocObject();
  sub_1C9F4578C(&v9, v7 + 16);
  return v7;
}

uint64_t sub_1CA271C18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_1CA3B0560();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  long long v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1CA3B0560() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

double Entity<A>.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 24))
  {
    sub_1C9F4544C(a1, (uint64_t)v7);
    uint64_t v4 = type metadata accessor for Entity();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    sub_1C9F4578C(v7, (uint64_t)v8);
    sub_1C9F4578C(v8, a2);
  }
  else
  {
    type metadata accessor for Entity();
    uint64_t v6 = sub_1CA3B0170();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t type metadata accessor for Entity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Entity.rawString.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t Entity.rawInt64.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t Entity.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1C9F4544C(v1, (uint64_t)v4);
  return sub_1CA0C0B30(v4, a1);
}

double Entity.init(entityName:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = (uint64_t)&type metadata for BuilderNode;
  a3[4] = (uint64_t)&off_1F24698D8;
  uint64_t v6 = swift_allocObject();
  *a3 = v6;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = 0x797469746E45;
  *(void *)(v6 + 40) = 0xE600000000000000;
  double result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(unsigned char *)(v6 + 80) = 1;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 88) = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 96) = v8;
  *(void *)(v6 + 104) = v8;
  *(void *)(v6 + 112) = v8;
  return result;
}

uint64_t sub_1CA271F80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 120, 7);
}

double Entity<A>.init(entityName:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = (uint64_t)&type metadata for BuilderNode;
  a3[4] = (uint64_t)&off_1F24698D8;
  uint64_t v6 = swift_allocObject();
  *a3 = v6;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = 0x797469746E45;
  *(void *)(v6 + 40) = 0xE600000000000000;
  double result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(unsigned char *)(v6 + 80) = 1;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 88) = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 96) = v8;
  *(void *)(v6 + 104) = v8;
  *(void *)(v6 + 112) = v8;
  return result;
}

double Entity<A>.init<A>(_:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Entity();
  uint64_t v9 = sub_1CA3B0170();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, a1, v9);
  if (v16[3])
  {
    sub_1C9F4544C((uint64_t)v16, (uint64_t)&v17);
    (*(void (**)(void *, uint64_t))(*(void *)(v8 - 8) + 8))(v16, v8);
    sub_1C9F4578C(&v17, (uint64_t)v20);
    sub_1C9F4544C((uint64_t)v20, (uint64_t)v16);
    double v11 = sub_1CA1D4FA8(v16, a2, a3, (uint64_t)&v17);
    (*(void (**)(void *, uint64_t, double))(v10 + 8))(a1, v9, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (*((void *)&v18 + 1))
    {
      double result = *(double *)&v17;
      long long v13 = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = v13;
      *(void *)(a4 + 32) = v19;
      return result;
    }
    type metadata accessor for Entity();
    uint64_t v15 = sub_1CA3B0170();
    (*(void (**)(long long *, uint64_t))(*(void *)(v15 - 8) + 8))(&v17, v15);
  }
  else
  {
    char v14 = *(void (**)(void *, uint64_t))(v10 + 8);
    v14(v16, v9);
    v14(a1, v9);
  }
  *(void *)(a4 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t AddressOntologyNode.AddressReference.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1CA3B0390();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void *static AddressOntologyNode.AddressReference.allCases.getter()
{
  return &unk_1F24606D8;
}

uint64_t AddressOntologyNode.AddressReference.rawValue.getter()
{
  if (*v0) {
    return 0x79627261656ELL;
  }
  else {
    return 6647407;
  }
}

uint64_t sub_1CA27230C(char *a1, char *a2)
{
  return sub_1C9F85B6C(*a1, *a2);
}

uint64_t sub_1CA272318()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA272390()
{
  sub_1CA3AFE50();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA2723F4()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA272468@<X0>(char *a1@<X8>)
{
  return AddressOntologyNode.AddressReference.init(rawValue:)(a1);
}

void sub_1CA272474(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6647407;
  if (*v1) {
    uint64_t v2 = 0x79627261656ELL;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1CA2724A8(void *a1@<X8>)
{
  *a1 = &unk_1F245F9D0;
}

unint64_t sub_1CA2724BC()
{
  unint64_t result = qword_1EA5DF7E8;
  if (!qword_1EA5DF7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF7E8);
  }
  return result;
}

unint64_t sub_1CA272510(uint64_t a1)
{
  unint64_t result = sub_1CA272538();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1CA272538()
{
  unint64_t result = qword_1EA5DF7F0;
  if (!qword_1EA5DF7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF7F0);
  }
  return result;
}

unint64_t sub_1CA272590()
{
  unint64_t result = qword_1EA5DF7F8;
  if (!qword_1EA5DF7F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA5DF800);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF7F8);
  }
  return result;
}

unint64_t sub_1CA2725EC(uint64_t a1)
{
  unint64_t result = sub_1CA272614();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1CA272614()
{
  unint64_t result = qword_1EA5DF808;
  if (!qword_1EA5DF808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF808);
  }
  return result;
}

unsigned char *_s16AddressReferenceOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA272734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AddressOntologyNode.AddressReference()
{
  return &type metadata for AddressOntologyNode.AddressReference;
}

uint64_t UsoEntitySpan.overlaps(_:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 132) & 1) != 0 || (*(unsigned char *)(v1 + 140)) {
    return 0;
  }
  uint64_t v3 = 0;
  if ((*(unsigned char *)(a1 + 132) & 1) == 0)
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 128) < *(_DWORD *)(a1 + 136) && *(_DWORD *)(a1 + 128) < *(_DWORD *)(v1 + 136);
    if (*(unsigned char *)(a1 + 140)) {
      return 0;
    }
    else {
      return v3;
    }
  }
  return v3;
}

uint64_t UsoEntitySpan.indexesMatch(_:)(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 140);
  int v3 = *(unsigned __int8 *)(v1 + 132);
  unsigned int v4 = *(unsigned __int8 *)(v1 + 140);
  if (*(unsigned char *)(a1 + 132))
  {
    if ((v3 ^ 1 | v2)) {
      return v3 & v4;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 128) != *(_DWORD *)(v1 + 128)) {
      int v3 = 1;
    }
    if ((v3 | v2)) {
      return v4 & ~v3;
    }
  }
  return (*(_DWORD *)(a1 + 136) == *(_DWORD *)(v1 + 136)) & ~v4;
}

SiriOntology::UsoEntitySpan::SpanSource_optional __swiftcall UsoEntitySpan.SpanSource.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 7;
  if ((unint64_t)rawValue < 7) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriOntology::UsoEntitySpan::SpanSource_optional)rawValue;
}

void __swiftcall AsrAlternative.init(value:probability:)(SiriOntology::AsrAlternative *__return_ptr retstr, Swift::String value, Swift::Float_optional *probability)
{
  retstr->value = value;
  LODWORD(retstr->probability.value) = probability;
  retstr->probability.is_nil = BYTE4(probability) & 1;
}

uint64_t SpanProperty.init(key:valueString:valueInt:valueFloat:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(_DWORD *)(a7 + 32) = a5;
  *(unsigned char *)(a7 + 36) = BYTE4(a5) & 1;
  *(_DWORD *)(a7 + 40) = a6;
  *(unsigned char *)(a7 + 44) = BYTE4(a6) & 1;
  return result;
}

__n128 UsoEntitySpan.init(originAppId:sourceComponent:label:matchInfo:properties:startIndex:endIndex:alternatives:originEntityId:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, __n128 a12, uint64_t a13)
{
  long long v13 = a6[1];
  *(_OWORD *)(a9 + 40) = *a6;
  *(_OWORD *)(a9 + 56) = v13;
  long long v14 = a6[3];
  *(_OWORD *)(a9 + 72) = a6[2];
  __n128 result = a12;
  char v16 = *a3;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = v16;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 88) = v14;
  *(_OWORD *)(a9 + 104) = a6[4];
  *(void *)(a9 + 120) = a7;
  *(_DWORD *)(a9 + 128) = a8;
  *(unsigned char *)(a9 + 132) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 136) = a10;
  *(unsigned char *)(a9 + 140) = a11 & 1;
  *(__n128 *)(a9 + 144) = a12;
  *(void *)(a9 + 160) = a13;
  *(unsigned char *)(a9 + 168) = 3;
  *(void *)(a9 + 176) = 0;
  *(unsigned char *)(a9 + 184) = 1;
  return result;
}

BOOL MatchInfo.hasMatchSignals(_:)(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1CA272918@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1CA272970@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

__n128 UsoEntitySpan.init(originAppId:sourceComponent:label:matchInfo:properties:startIndex:endIndex:alternatives:originEntityId:payloadAttachmentInfo:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, __n128 a12, uint64_t a13, char *a14)
{
  long long v14 = a6[1];
  *(_OWORD *)(a9 + 40) = *a6;
  *(_OWORD *)(a9 + 56) = v14;
  long long v15 = a6[3];
  *(_OWORD *)(a9 + 72) = a6[2];
  __n128 result = a12;
  char v17 = *a3;
  char v18 = *a14;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = v17;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(_OWORD *)(a9 + 88) = v15;
  *(_OWORD *)(a9 + 104) = a6[4];
  *(void *)(a9 + 120) = a7;
  *(_DWORD *)(a9 + 128) = a8;
  *(unsigned char *)(a9 + 132) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 136) = a10;
  *(unsigned char *)(a9 + 140) = a11 & 1;
  *(__n128 *)(a9 + 144) = a12;
  *(void *)(a9 + 160) = a13;
  *(unsigned char *)(a9 + 168) = v18;
  *(void *)(a9 + 176) = 0;
  *(unsigned char *)(a9 + 184) = 1;
  return result;
}

_DWORD *MatchInfo.init(matchSignals:matchScore:maxTokenCount:matchedTokenCount:maxStopWordCount:matchedStopWordCount:editDistance:maxAliasCount:matchedAliasCount:matchedAliasTypes:)@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12)
{
  *(_DWORD *)a9 = *result;
  *(_DWORD *)(a9 + 4) = a2;
  *(unsigned char *)(a9 + 8) = BYTE4(a2) & 1;
  *(_DWORD *)(a9 + 12) = a3;
  *(unsigned char *)(a9 + 16) = BYTE4(a3) & 1;
  *(_DWORD *)(a9 + 20) = a4;
  *(unsigned char *)(a9 + 24) = BYTE4(a4) & 1;
  *(_DWORD *)(a9 + 28) = a5;
  *(unsigned char *)(a9 + 32) = BYTE4(a5) & 1;
  *(_DWORD *)(a9 + 36) = a6;
  *(unsigned char *)(a9 + 40) = BYTE4(a6) & 1;
  *(_DWORD *)(a9 + 44) = a7;
  *(unsigned char *)(a9 + 48) = BYTE4(a7) & 1;
  *(_DWORD *)(a9 + 52) = a8;
  *(unsigned char *)(a9 + 56) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 60) = a10;
  *(unsigned char *)(a9 + 64) = a11 & 1;
  *(void *)(a9 + 72) = a12;
  return result;
}

uint64_t MatchInfo.init(matchSignalBitSet:matchScore:maxTokenCount:matchedTokenCount:maxStopWordCount:matchedStopWordCount:editDistance:maxAliasCount:matchedAliasCount:matchedAliasTypes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12)
{
  *(_DWORD *)a9 = result;
  *(_DWORD *)(a9 + 4) = a2;
  *(unsigned char *)(a9 + 8) = BYTE4(a2) & 1;
  *(_DWORD *)(a9 + 12) = a3;
  *(unsigned char *)(a9 + 16) = BYTE4(a3) & 1;
  *(_DWORD *)(a9 + 20) = a4;
  *(unsigned char *)(a9 + 24) = BYTE4(a4) & 1;
  *(_DWORD *)(a9 + 28) = a5;
  *(unsigned char *)(a9 + 32) = BYTE4(a5) & 1;
  *(_DWORD *)(a9 + 36) = a6;
  *(unsigned char *)(a9 + 40) = BYTE4(a6) & 1;
  *(_DWORD *)(a9 + 44) = a7;
  *(unsigned char *)(a9 + 48) = BYTE4(a7) & 1;
  *(_DWORD *)(a9 + 52) = a8;
  *(unsigned char *)(a9 + 56) = BYTE4(a8) & 1;
  *(_DWORD *)(a9 + 60) = a10;
  *(unsigned char *)(a9 + 64) = a11 & 1;
  *(void *)(a9 + 72) = a12;
  return result;
}

SiriOntology::PayloadAttachmentInfo __swiftcall PayloadAttachmentInfo.init(attachmentType:)(SiriOntology::PayloadAttachmentInfo attachmentType)
{
  unsigned char *v1 = *(unsigned char *)attachmentType.attachmentType.value;
  return attachmentType;
}

uint64_t UsoEntitySpan.SpanSource.rawValue.getter()
{
  return *v0;
}

SiriOntology::UsoEntitySpan::SpanSource_optional sub_1CA272B50(Swift::Int *a1)
{
  return UsoEntitySpan.SpanSource.init(rawValue:)(*a1);
}

uint64_t sub_1CA272B58()
{
  return sub_1CA3AFFE0();
}

uint64_t sub_1CA272BB8()
{
  return sub_1CA3AFFC0();
}

uint64_t UsoEntitySpan.originAppId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void UsoEntitySpan.sourceComponent.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t UsoEntitySpan.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UsoEntitySpan.matchInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v2 = *(void *)(v1 + 112);
  long long v4 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t UsoEntitySpan.properties.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t UsoEntitySpan.startIndex.getter()
{
  return *(unsigned int *)(v0 + 128) | ((unint64_t)*(unsigned __int8 *)(v0 + 132) << 32);
}

unint64_t UsoEntitySpan.endIndex.getter()
{
  return *(unsigned int *)(v0 + 136) | ((unint64_t)*(unsigned __int8 *)(v0 + 140) << 32);
}

uint64_t UsoEntitySpan.alternatives.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UsoEntitySpan.originEntityId.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

void UsoEntitySpan.payloadAttachmentInfo.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 168);
}

uint64_t UsoEntitySpan.appBundleSemantic.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v3 = v1[1];
  if (v3)
  {
    uint64_t v4 = *v1;
    swift_bridgeObjectRetain();
    a1 = v2;
    uint64_t v5 = v4;
    uint64_t v6 = v3;
  }
  else
  {
    uint64_t v5 = 0x6E776F6E6B6E75;
    uint64_t v6 = 0xE700000000000000;
  }
  return sub_1C9F2EFD0(v5, v6, a1);
}

uint64_t UsoEntitySpan.hash(into:)(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 112);
  uint64_t v6 = *(void *)(v1 + 120);
  int v9 = *(unsigned __int8 *)(v1 + 132);
  int v10 = *(unsigned __int8 *)(v1 + 140);
  uint64_t v8 = *(void *)(v1 + 144);
  uint64_t v11 = *(void *)(v1 + 160);
  int v12 = *(unsigned __int8 *)(v1 + 168);
  char v13 = *(unsigned char *)(v1 + 184);
  if (*(void *)(v1 + 8))
  {
    sub_1CA3B0630();
    swift_bridgeObjectRetain();
    sub_1CA3AFE50();
    swift_bridgeObjectRelease();
    if (v3 == 7) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1CA3B0630();
    if (v3 == 7)
    {
LABEL_3:
      sub_1CA3B0630();
      if (v4) {
        goto LABEL_4;
      }
LABEL_8:
      sub_1CA3B0630();
      if (v5) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  sub_1CA3B0630();
  sub_1CA3B0620();
  if (!v4) {
    goto LABEL_8;
  }
LABEL_4:
  sub_1CA3B0630();
  swift_bridgeObjectRetain();
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_5:
    sub_1CA3B0630();
    MatchInfo.hash(into:)();
    goto LABEL_10;
  }
LABEL_9:
  sub_1CA3B0630();
LABEL_10:
  swift_bridgeObjectRetain();
  sub_1C9F5B054(a1, v6);
  swift_bridgeObjectRelease();
  if (v9)
  {
    sub_1CA3B0630();
    if (!v10)
    {
LABEL_12:
      sub_1CA3B0630();
      sub_1CA3B0640();
      goto LABEL_15;
    }
  }
  else
  {
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v10) {
      goto LABEL_12;
    }
  }
  sub_1CA3B0630();
LABEL_15:
  swift_bridgeObjectRetain();
  sub_1C9F5AF9C(a1, v8);
  swift_bridgeObjectRelease();
  if (v11)
  {
    sub_1CA3B0630();
    swift_bridgeObjectRetain();
    sub_1CA3AFE50();
    swift_bridgeObjectRelease();
    if (v12 == 3) {
      goto LABEL_20;
    }
  }
  else
  {
    sub_1CA3B0630();
    if (v12 == 3) {
      goto LABEL_20;
    }
  }
  sub_1CA3B0630();
  if (v12 != 2)
  {
    sub_1CA3B0630();
    sub_1CA3B0620();
    if (v13) {
      return sub_1CA3B0630();
    }
    goto LABEL_23;
  }
LABEL_20:
  sub_1CA3B0630();
  if (v13) {
    return sub_1CA3B0630();
  }
LABEL_23:
  sub_1CA3B0630();
  return sub_1CA3B0620();
}

unint64_t sub_1CA273130(char a1)
{
  unint64_t result = 0x70416E696769726FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F43656372756F73;
      break;
    case 2:
      unint64_t result = 0x6C6562616CLL;
      break;
    case 3:
      unint64_t result = 0x666E49686374616DLL;
      break;
    case 4:
      unint64_t result = 0x69747265706F7270;
      break;
    case 5:
      unint64_t result = 0x646E497472617473;
      break;
    case 6:
      unint64_t result = 0x7865646E49646E65;
      break;
    case 7:
      unint64_t result = 0x74616E7265746C61;
      break;
    case 8:
      unint64_t result = 0x6E456E696769726FLL;
      break;
    case 9:
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1CA2732B4()
{
  return sub_1CA273130(*v0);
}

uint64_t sub_1CA2732BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1CA279F2C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CA2732E4(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1CA2732F0(uint64_t a1)
{
  unint64_t v2 = sub_1CA2779D0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1CA27332C(uint64_t a1)
{
  unint64_t v2 = sub_1CA2779D0();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t UsoEntitySpan.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FD40);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v54 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v41 = *(void *)(v1 + 32);
  uint64_t v42 = v7;
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v39 = *(void *)(v1 + 48);
  uint64_t v40 = v8;
  uint64_t v30 = *(void *)(v1 + 56);
  uint64_t v31 = *(void *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  uint64_t v36 = *(void *)(v1 + 80);
  uint64_t v37 = v9;
  uint64_t v10 = *(void *)(v1 + 88);
  uint64_t v34 = *(void *)(v1 + 96);
  uint64_t v35 = v10;
  uint64_t v33 = *(void *)(v1 + 104);
  uint64_t v32 = *(void *)(v1 + 112);
  uint64_t v29 = *(void *)(v1 + 120);
  uint64_t v28 = *(unsigned int *)(v1 + 128);
  int v27 = *(unsigned __int8 *)(v1 + 132);
  uint64_t v26 = *(unsigned int *)(v1 + 136);
  int v25 = *(unsigned __int8 *)(v1 + 140);
  uint64_t v24 = *(void *)(v1 + 144);
  uint64_t v22 = *(void *)(v1 + 152);
  uint64_t v23 = *(void *)(v1 + 160);
  HIDWORD(v21) = *(unsigned __int8 *)(v1 + 168);
  uint64_t v38 = *(void *)(v1 + 176);
  int v11 = *(unsigned __int8 *)(v1 + 184);
  uint64_t v12 = a1[3];
  char v13 = a1;
  uint64_t v15 = v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  sub_1CA2779D0();
  sub_1CA3B0680();
  LOBYTE(v44) = 0;
  char v16 = v6;
  uint64_t v17 = v43;
  sub_1CA3B0470();
  if (!v17)
  {
    uint64_t v18 = v39;
    uint64_t v19 = v40;
    LODWORD(v43) = v11;
    LOBYTE(v44) = v54;
    char v55 = 1;
    sub_1CA277A24();
    sub_1CA3B04B0();
    LOBYTE(v44) = 2;
    sub_1CA3B0470();
    uint64_t v44 = v19;
    uint64_t v45 = v18;
    uint64_t v46 = v30;
    uint64_t v47 = v31;
    uint64_t v48 = v37;
    uint64_t v49 = v36;
    uint64_t v50 = v35;
    uint64_t v51 = v34;
    uint64_t v52 = v33;
    uint64_t v53 = v32;
    char v55 = 3;
    sub_1CA277A78();
    sub_1CA3B04B0();
    uint64_t v44 = v29;
    char v55 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FCA8);
    sub_1CA277E14(&qword_1EBC9FCB0, &qword_1EBC9FCA8, (void (*)(void))sub_1CA277ACC);
    sub_1CA3B04F0();
    LOBYTE(v44) = 5;
    char v55 = v27;
    sub_1CA3B04D0();
    LOBYTE(v44) = 6;
    char v55 = v25;
    sub_1CA3B04D0();
    uint64_t v44 = v24;
    char v55 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FCD8);
    sub_1CA277E14(&qword_1EBC9FCE0, &qword_1EBC9FCD8, (void (*)(void))sub_1CA277B20);
    sub_1CA3B04F0();
    LOBYTE(v44) = 8;
    sub_1CA3B0470();
    LOBYTE(v44) = BYTE4(v21);
    char v55 = 9;
    sub_1CA277B74();
    sub_1CA3B04B0();
    LOBYTE(v44) = 10;
    sub_1CA3B04A0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v16, v15);
}

uint64_t UsoEntitySpan.hashValue.getter()
{
  sub_1CA3B0610();
  UsoEntitySpan.hash(into:)((uint64_t)v1);
  return sub_1CA3B0660();
}

uint64_t UsoEntitySpan.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FD30);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v114 = 1;
  uint64_t v9 = a1[3];
  uint64_t v123 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_1CA2779D0();
  sub_1CA3B0670();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
  }
  uint64_t v10 = v6;
  uint64_t v69 = a2;
  LOBYTE(v82) = 0;
  uint64_t v11 = sub_1CA3B03A0();
  uint64_t v13 = v12;
  LOBYTE(v71) = 1;
  sub_1CA277BC8();
  swift_bridgeObjectRetain();
  sub_1CA3B03E0();
  uint64_t v68 = v13;
  LODWORD(v13) = v82;
  LOBYTE(v82) = 2;
  uint64_t v14 = sub_1CA3B03A0();
  uint64_t v65 = v11;
  uint64_t v66 = v14;
  int v67 = v13;
  LOBYTE(v71) = 3;
  uint64_t v16 = v15;
  sub_1CA277C1C();
  swift_bridgeObjectRetain();
  sub_1CA3B03E0();
  uint64_t v70 = v16;
  uint64_t v63 = v83;
  uint64_t v64 = v82;
  uint64_t v61 = v85;
  uint64_t v62 = v84;
  uint64_t v59 = v87;
  uint64_t v60 = v86;
  uint64_t v17 = v90;
  uint64_t v57 = v89;
  uint64_t v58 = v88;
  uint64_t v18 = v91;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FCA8);
  LOBYTE(v71) = 4;
  sub_1CA277E14(&qword_1EBC9FCB8, &qword_1EBC9FCA8, (void (*)(void))sub_1CA277C70);
  swift_bridgeObjectRetain();
  sub_1CA3B0420();
  uint64_t v56 = v17;
  uint64_t v19 = v82;
  LOBYTE(v82) = 5;
  swift_bridgeObjectRetain();
  unint64_t v54 = sub_1CA3B0400();
  uint64_t v55 = v19;
  uint64_t v20 = HIDWORD(v54) & 1;
  char v121 = BYTE4(v54) & 1;
  LOBYTE(v82) = 6;
  unint64_t v21 = sub_1CA3B0400();
  uint64_t v52 = v20;
  unint64_t v53 = v21;
  uint64_t v22 = HIDWORD(v21) & 1;
  char v118 = BYTE4(v21) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FCD8);
  LOBYTE(v71) = 7;
  sub_1CA277E14(&qword_1EBC9FCE8, &qword_1EBC9FCD8, (void (*)(void))sub_1CA277CC4);
  sub_1CA3B0420();
  uint64_t v48 = v22;
  uint64_t v50 = v18;
  uint64_t v23 = v82;
  LOBYTE(v82) = 8;
  uint64_t v24 = v23;
  swift_bridgeObjectRetain();
  uint64_t v49 = 0;
  uint64_t v25 = sub_1CA3B03A0();
  uint64_t v27 = v26;
  uint64_t v28 = v25;
  LODWORD(v18) = v54;
  uint64_t v47 = v24;
  LOBYTE(v71) = 9;
  sub_1CA277D18();
  uint64_t v51 = v27;
  swift_bridgeObjectRetain();
  sub_1CA3B03E0();
  int v45 = v82;
  char v113 = 10;
  uint64_t v46 = sub_1CA3B03D0();
  LOBYTE(v27) = v29;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  char v30 = v27 & 1;
  char v114 = v27 & 1;
  uint64_t v31 = v68;
  *(void *)&long long v71 = v65;
  *((void *)&v71 + 1) = v68;
  LOBYTE(v72) = v67;
  uint64_t v32 = v70;
  *((void *)&v72 + 1) = v66;
  *(void *)&long long v73 = v70;
  *((void *)&v73 + 1) = v64;
  *(void *)&long long v74 = v63;
  *((void *)&v74 + 1) = v62;
  *(void *)&long long v75 = v61;
  *((void *)&v75 + 1) = v60;
  *(void *)&long long v76 = v59;
  *((void *)&v76 + 1) = v58;
  *(void *)&long long v77 = v57;
  uint64_t v33 = v55;
  uint64_t v34 = v50;
  uint64_t v35 = v51;
  *((void *)&v77 + 1) = v56;
  *(void *)&long long v78 = v50;
  *((void *)&v78 + 1) = v55;
  LODWORD(v79) = v18;
  BYTE4(v79) = v52;
  DWORD2(v79) = v53;
  BYTE12(v79) = v48;
  *(void *)&long long v80 = v47;
  *((void *)&v80 + 1) = v28;
  uint64_t v44 = v28;
  *(void *)&v81[0] = v51;
  LOBYTE(v28) = v45;
  BYTE8(v81[0]) = v45;
  *(void *)&v81[1] = v46;
  BYTE8(v81[1]) = v30;
  sub_1C9F755C4((uint64_t)&v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v36 = v80;
  uint64_t v37 = v69;
  v69[8] = v79;
  v37[9] = v36;
  v37[10] = v81[0];
  *(_OWORD *)((char *)v37 + 169) = *(_OWORD *)((char *)v81 + 9);
  long long v38 = v76;
  v37[4] = v75;
  v37[5] = v38;
  long long v39 = v78;
  v37[6] = v77;
  v37[7] = v39;
  long long v40 = v72;
  *uint64_t v37 = v71;
  v37[1] = v40;
  long long v41 = v74;
  v37[2] = v73;
  v37[3] = v41;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
  uint64_t v82 = v65;
  uint64_t v83 = v31;
  LOBYTE(v84) = v67;
  *(_DWORD *)((char *)&v84 + 1) = v122[0];
  HIDWORD(v84) = *(_DWORD *)((char *)v122 + 3);
  uint64_t v85 = v66;
  uint64_t v86 = v32;
  uint64_t v87 = v64;
  uint64_t v88 = v63;
  uint64_t v89 = v62;
  uint64_t v90 = v61;
  uint64_t v91 = v60;
  uint64_t v92 = v59;
  uint64_t v93 = v58;
  uint64_t v94 = v57;
  uint64_t v95 = v56;
  uint64_t v96 = v34;
  uint64_t v97 = v33;
  int v98 = v54;
  char v99 = v121;
  __int16 v100 = v119;
  char v101 = v120;
  int v102 = v53;
  char v103 = v118;
  __int16 v104 = v116;
  char v105 = v117;
  uint64_t v106 = v47;
  uint64_t v107 = v44;
  uint64_t v108 = v35;
  char v109 = v28;
  *(_DWORD *)&v110[3] = *(_DWORD *)&v115[3];
  *(_DWORD *)unint64_t v110 = *(_DWORD *)v115;
  uint64_t v111 = v46;
  char v112 = v114;
  return sub_1C9F75638((uint64_t)&v82);
}

uint64_t sub_1CA274290()
{
  sub_1CA3B0610();
  UsoEntitySpan.hash(into:)((uint64_t)v1);
  return sub_1CA3B0660();
}

uint64_t sub_1CA2742D4()
{
  sub_1CA3B0610();
  UsoEntitySpan.hash(into:)((uint64_t)v1);
  return sub_1CA3B0660();
}

uint64_t sub_1CA274310@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return UsoEntitySpan.init(from:)(a1, a2);
}

uint64_t sub_1CA274328(void *a1)
{
  return UsoEntitySpan.encode(to:)(a1);
}

SiriOntology::MatchInfo::AliasType_optional __swiftcall MatchInfo.AliasType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 12;
  if ((unint64_t)rawValue < 0xC) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriOntology::MatchInfo::AliasType_optional)rawValue;
}

SiriOntology::MatchInfo::AliasType_optional sub_1CA274358(Swift::Int *a1)
{
  return MatchInfo.AliasType.init(rawValue:)(*a1);
}

uint64_t sub_1CA274360()
{
  return sub_1CA3AFFE0();
}

uint64_t sub_1CA2743C0()
{
  return sub_1CA3AFFC0();
}

uint64_t MatchInfo.MatchSignals.rawValue.getter()
{
  return *v0;
}

uint64_t MatchInfo.MatchSignals.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static MatchInfo.MatchSignals.exactMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static MatchInfo.MatchSignals.partialMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static MatchInfo.MatchSignals.approximateMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static MatchInfo.MatchSignals.aliasMatch.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void sub_1CA274450()
{
  off_1EA5D3890 = &unk_1F24369D8;
}

uint64_t static MatchInfo.MatchSignals.descriptions.getter()
{
  if (qword_1EA5D38A0 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

_DWORD *sub_1CA2744C0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1CA2744CC()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA274514()
{
  return sub_1CA3B0640();
}

uint64_t sub_1CA274540()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA274584()
{
  return sub_1CA3AFFF0();
}

uint64_t sub_1CA2745E4()
{
  return sub_1CA3AFFD0();
}

void sub_1CA274634(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1CA27463C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1CA274650@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1CA274664@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1CA274678(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1CA2746A8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1CA2746D4@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1CA2746F8(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1CA27470C(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1CA274720(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1CA274734@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1CA274748(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1CA27475C(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1CA274770(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1CA274784()
{
  return *v0 == 0;
}

_DWORD *sub_1CA274794(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1CA2747A8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1CA2747B8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1CA2747C4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t MatchInfo.matchSignalBitSet.getter()
{
  return *v0;
}

unint64_t MatchInfo.matchScore.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

unint64_t MatchInfo.maxTokenCount.getter()
{
  return *(unsigned int *)(v0 + 12) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 32);
}

unint64_t MatchInfo.matchedTokenCount.getter()
{
  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int8 *)(v0 + 24) << 32);
}

unint64_t MatchInfo.maxStopWordCount.getter()
{
  return *(unsigned int *)(v0 + 28) | ((unint64_t)*(unsigned __int8 *)(v0 + 32) << 32);
}

unint64_t MatchInfo.matchedStopWordCount.getter()
{
  return *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32);
}

unint64_t MatchInfo.editDistance.getter()
{
  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

unint64_t MatchInfo.maxAliasCount.getter()
{
  return *(unsigned int *)(v0 + 52) | ((unint64_t)*(unsigned __int8 *)(v0 + 56) << 32);
}

unint64_t MatchInfo.matchedAliasCount.getter()
{
  return *(unsigned int *)(v0 + 60) | ((unint64_t)*(unsigned __int8 *)(v0 + 64) << 32);
}

uint64_t MatchInfo.matchedAliasTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MatchInfo.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v0 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 24);
  int v4 = *(unsigned __int8 *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  int v10 = *(unsigned __int8 *)(v0 + 48);
  int v11 = *(unsigned __int8 *)(v0 + 56);
  int v12 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  sub_1CA3B0640();
  if (v1 == 1)
  {
    sub_1CA3B0630();
    if (!v2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v2)
    {
LABEL_3:
      sub_1CA3B0630();
      sub_1CA3B0640();
      if (!v3) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  sub_1CA3B0630();
  if (!v3)
  {
LABEL_4:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  sub_1CA3B0630();
  if (!v4)
  {
LABEL_5:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  sub_1CA3B0630();
  if (!v5)
  {
LABEL_6:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  sub_1CA3B0630();
  if (!v10)
  {
LABEL_7:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v11) {
      goto LABEL_8;
    }
LABEL_16:
    sub_1CA3B0630();
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  sub_1CA3B0630();
  if (v11) {
    goto LABEL_16;
  }
LABEL_8:
  sub_1CA3B0630();
  sub_1CA3B0640();
  if (!v12)
  {
LABEL_9:
    sub_1CA3B0630();
    sub_1CA3B0640();
    goto LABEL_18;
  }
LABEL_17:
  sub_1CA3B0630();
LABEL_18:
  uint64_t result = sub_1CA3B0620();
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    uint64_t v9 = v6 + 32;
    do
    {
      ++v9;
      uint64_t result = sub_1CA3B0620();
      --v8;
    }
    while (v8);
  }
  return result;
}

unint64_t sub_1CA274ADC(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F6353686374616DLL;
      break;
    case 2:
      unint64_t result = 0x6E656B6F5478616DLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x7473694474696465;
      break;
    case 7:
      unint64_t result = 0x7361696C4178616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1CA274C04()
{
  return sub_1CA274ADC(*v0);
}

uint64_t sub_1CA274C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1CA27A41C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CA274C34(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1CA274C40(uint64_t a1)
{
  unint64_t v2 = sub_1CA277D6C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1CA274C7C(uint64_t a1)
{
  unint64_t v2 = sub_1CA277D6C();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t MatchInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF810);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(unsigned int *)(v1 + 4);
  int v32 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v28 = *(unsigned int *)(v1 + 12);
  uint64_t v29 = v7;
  int v27 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v26 = *(unsigned int *)(v1 + 20);
  int v25 = *(unsigned __int8 *)(v1 + 24);
  uint64_t v24 = *(unsigned int *)(v1 + 28);
  int v23 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v22 = *(unsigned int *)(v1 + 36);
  int v21 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v20 = *(unsigned int *)(v1 + 44);
  int v19 = *(unsigned __int8 *)(v1 + 48);
  uint64_t v18 = *(unsigned int *)(v1 + 52);
  int v17 = *(unsigned __int8 *)(v1 + 56);
  uint64_t v16 = *(unsigned int *)(v1 + 60);
  int v15 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA277D6C();
  sub_1CA3B0680();
  LOBYTE(v31) = 0;
  uint64_t v9 = v6;
  uint64_t v10 = v30;
  sub_1CA3B0510();
  if (!v10)
  {
    char v11 = v27;
    char v12 = v25;
    LOBYTE(v31) = 1;
    char v33 = v32;
    sub_1CA3B0490();
    LOBYTE(v31) = 2;
    char v33 = v11;
    sub_1CA3B04D0();
    LOBYTE(v31) = 3;
    char v33 = v12;
    sub_1CA3B04D0();
    LOBYTE(v31) = 4;
    char v33 = v23;
    sub_1CA3B04D0();
    LOBYTE(v31) = 5;
    char v33 = v21;
    sub_1CA3B04D0();
    LOBYTE(v31) = 6;
    char v33 = v19;
    sub_1CA3B04D0();
    LOBYTE(v31) = 7;
    char v33 = v17;
    sub_1CA3B04D0();
    LOBYTE(v31) = 8;
    char v33 = v15;
    sub_1CA3B04D0();
    uint64_t v31 = v8;
    char v33 = 9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF820);
    sub_1CA277E14(&qword_1EA5DF828, &qword_1EA5DF820, (void (*)(void))sub_1CA277DC0);
    sub_1CA3B04F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t MatchInfo.hashValue.getter()
{
  return sub_1CA3B0660();
}

uint64_t MatchInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF838);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA277D6C();
  sub_1CA3B0670();
  if (!v2)
  {
    LOBYTE(v28) = 0;
    int v9 = sub_1CA3B0450();
    LOBYTE(v28) = 1;
    uint64_t v10 = sub_1CA3B03C0();
    LOBYTE(v28) = 2;
    uint64_t v26 = sub_1CA3B0400();
    LOBYTE(v28) = 3;
    uint64_t v25 = sub_1CA3B0400();
    LOBYTE(v28) = 4;
    uint64_t v24 = sub_1CA3B0400();
    LOBYTE(v28) = 5;
    uint64_t v23 = sub_1CA3B0400();
    LOBYTE(v28) = 6;
    uint64_t v22 = sub_1CA3B0400();
    LOBYTE(v28) = 7;
    uint64_t v21 = sub_1CA3B0400();
    LOBYTE(v28) = 8;
    uint64_t v20 = sub_1CA3B0400();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF820);
    char v27 = 9;
    sub_1CA277E14(&qword_1EA5DF840, &qword_1EA5DF820, (void (*)(void))sub_1CA277E80);
    sub_1CA3B0420();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v12 = v28;
    *(_DWORD *)a2 = v9;
    *(_DWORD *)(a2 + 4) = v10;
    *(unsigned char *)(a2 + 8) = BYTE4(v10) & 1;
    char v13 = BYTE4(v26);
    *(_DWORD *)(a2 + 12) = v26;
    *(unsigned char *)(a2 + 16) = v13 & 1;
    char v14 = BYTE4(v25);
    *(_DWORD *)(a2 + 20) = v25;
    *(unsigned char *)(a2 + 24) = v14 & 1;
    char v15 = BYTE4(v24);
    *(_DWORD *)(a2 + 28) = v24;
    *(unsigned char *)(a2 + 32) = v15 & 1;
    char v16 = BYTE4(v23);
    *(_DWORD *)(a2 + 36) = v23;
    *(unsigned char *)(a2 + 40) = v16 & 1;
    char v17 = BYTE4(v22);
    *(_DWORD *)(a2 + 44) = v22;
    *(unsigned char *)(a2 + 48) = v17 & 1;
    char v18 = BYTE4(v21);
    *(_DWORD *)(a2 + 52) = v21;
    *(unsigned char *)(a2 + 56) = v18 & 1;
    char v19 = BYTE4(v20);
    *(_DWORD *)(a2 + 60) = v20;
    *(unsigned char *)(a2 + 64) = v19 & 1;
    *(void *)(a2 + 72) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1CA275510()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA2755E0()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA2756A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return MatchInfo.init(from:)(a1, a2);
}

uint64_t sub_1CA2756C0(void *a1)
{
  return MatchInfo.encode(to:)(a1);
}

uint64_t AsrAlternative.value.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t AsrAlternative.probability.getter()
{
  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t AsrAlternative.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 20);
  swift_bridgeObjectRetain();
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  if (v1 == 1) {
    return sub_1CA3B0630();
  }
  sub_1CA3B0630();
  return sub_1CA3B0640();
}

uint64_t sub_1CA2757BC()
{
  if (*v0) {
    return 0x6C696261626F7270;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_1CA2757FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1CA27A84C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CA275824(uint64_t a1)
{
  unint64_t v2 = sub_1CA277F5C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1CA275860(uint64_t a1)
{
  unint64_t v2 = sub_1CA277F5C();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AsrAlternative.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF850);
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(unsigned int *)(v1 + 16);
  int v10 = *(unsigned __int8 *)(v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA277F5C();
  sub_1CA3B0680();
  char v13 = 0;
  sub_1CA3B04E0();
  if (!v2)
  {
    char v12 = 1;
    char v11 = v10;
    sub_1CA3B0490();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v4);
}

uint64_t AsrAlternative.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 20);
  sub_1CA3B0610();
  sub_1CA3AFE50();
  sub_1CA3B0630();
  if (v1 != 1) {
    sub_1CA3B0640();
  }
  return sub_1CA3B0660();
}

uint64_t AsrAlternative.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF860);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA277F5C();
  sub_1CA3B0670();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v16 = 0;
  uint64_t v9 = sub_1CA3B0410();
  uint64_t v11 = v10;
  char v15 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1CA3B03C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(unsigned char *)(a2 + 20) = BYTE4(v12) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA275CA8()
{
  int v1 = *(unsigned __int8 *)(v0 + 20);
  sub_1CA3AFE50();
  if (v1 == 1) {
    return sub_1CA3B0630();
  }
  sub_1CA3B0630();
  return sub_1CA3B0640();
}

uint64_t sub_1CA275D10()
{
  int v1 = *(unsigned __int8 *)(v0 + 20);
  sub_1CA3B0610();
  sub_1CA3AFE50();
  sub_1CA3B0630();
  if (v1 != 1) {
    sub_1CA3B0640();
  }
  return sub_1CA3B0660();
}

uint64_t sub_1CA275D9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AsrAlternative.init(from:)(a1, a2);
}

uint64_t sub_1CA275DB4(void *a1)
{
  return AsrAlternative.encode(to:)(a1);
}

uint64_t SpanProperty.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpanProperty.valueString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t SpanProperty.valueInt.getter()
{
  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

unint64_t SpanProperty.valueFloat.getter()
{
  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32);
}

double SpanProperty.namespaceSemantic.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1C9F2DD60(v4, v3, &v6);
  double result = *(double *)&v6;
  *a1 = v6;
  return result;
}

uint64_t SpanProperty.valueSemantic.getter@<X0>(long long *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = sub_1C9F2FC60(v4, v3, &v7);
    long long v6 = v7;
  }
  else
  {
    long long v6 = xmmword_1CA3F1ED0;
  }
  *a1 = v6;
  return result;
}

uint64_t SpanProperty.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  int v2 = *(unsigned __int8 *)(v0 + 36);
  int v3 = *(unsigned __int8 *)(v0 + 44);
  swift_bridgeObjectRetain();
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1CA3B0630();
    swift_bridgeObjectRetain();
    sub_1CA3AFE50();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_6:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v3) {
      goto LABEL_4;
    }
    return sub_1CA3B0630();
  }
  sub_1CA3B0630();
  if (!v2) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1CA3B0630();
  if (!v3)
  {
LABEL_4:
    sub_1CA3B0630();
    return sub_1CA3B0640();
  }
  return sub_1CA3B0630();
}

uint64_t sub_1CA276028()
{
  uint64_t result = 7955819;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x72745365756C6176;
      break;
    case 2:
      uint64_t result = 0x746E4965756C6176;
      break;
    case 3:
      uint64_t result = 0x6F6C4665756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CA2760BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1CA27A950(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CA2760E4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1CA2760F0(uint64_t a1)
{
  unint64_t v2 = sub_1CA277FB0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1CA27612C(uint64_t a1)
{
  unint64_t v2 = sub_1CA277FB0();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SpanProperty.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FD38);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v17 = *(void *)(v1 + 24);
  uint64_t v18 = v7;
  uint64_t v16 = *(unsigned int *)(v1 + 32);
  int v15 = *(unsigned __int8 *)(v1 + 36);
  uint64_t v14 = *(unsigned int *)(v1 + 40);
  int v13 = *(unsigned __int8 *)(v1 + 44);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA277FB0();
  sub_1CA3B0680();
  char v25 = 0;
  uint64_t v8 = v19;
  sub_1CA3B04E0();
  if (!v8)
  {
    char v9 = v15;
    char v10 = v13;
    char v24 = 1;
    sub_1CA3B0470();
    char v23 = 2;
    char v22 = v9;
    sub_1CA3B04C0();
    char v21 = 3;
    char v20 = v10;
    sub_1CA3B0490();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SpanProperty.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  int v2 = *(unsigned __int8 *)(v0 + 36);
  int v3 = *(unsigned __int8 *)(v0 + 44);
  sub_1CA3B0610();
  swift_bridgeObjectRetain();
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1CA3B0630();
    swift_bridgeObjectRetain();
    sub_1CA3AFE50();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_6:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v3) {
      goto LABEL_4;
    }
LABEL_7:
    sub_1CA3B0630();
    return sub_1CA3B0660();
  }
  sub_1CA3B0630();
  if (!v2) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1CA3B0630();
  if (v3) {
    goto LABEL_7;
  }
LABEL_4:
  sub_1CA3B0630();
  sub_1CA3B0640();
  return sub_1CA3B0660();
}

uint64_t SpanProperty.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC9FD28);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA277FB0();
  sub_1CA3B0670();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v26 = 0;
  uint64_t v9 = sub_1CA3B0410();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  char v25 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1CA3B03A0();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v24 = 2;
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  uint64_t v19 = sub_1CA3B03F0();
  char v23 = 3;
  uint64_t v16 = sub_1CA3B03C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v21;
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v17;
  char v18 = BYTE4(v19);
  *(_DWORD *)(a2 + 32) = v19;
  *(unsigned char *)(a2 + 36) = v18 & 1;
  *(_DWORD *)(a2 + 40) = v16;
  *(unsigned char *)(a2 + 44) = BYTE4(v16) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CA276760()
{
  uint64_t v1 = *(void *)(v0 + 24);
  int v2 = *(unsigned __int8 *)(v0 + 36);
  int v3 = *(unsigned __int8 *)(v0 + 44);
  sub_1CA3B0610();
  swift_bridgeObjectRetain();
  sub_1CA3AFE50();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1CA3B0630();
    swift_bridgeObjectRetain();
    sub_1CA3AFE50();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_6:
    sub_1CA3B0630();
    sub_1CA3B0640();
    if (!v3) {
      goto LABEL_4;
    }
LABEL_7:
    sub_1CA3B0630();
    return sub_1CA3B0660();
  }
  sub_1CA3B0630();
  if (!v2) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1CA3B0630();
  if (v3) {
    goto LABEL_7;
  }
LABEL_4:
  sub_1CA3B0630();
  sub_1CA3B0640();
  return sub_1CA3B0660();
}

uint64_t sub_1CA276884@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SpanProperty.init(from:)(a1, a2);
}

uint64_t sub_1CA27689C(void *a1)
{
  return SpanProperty.encode(to:)(a1);
}

SiriOntology::PayloadAttachmentInfo::AttachmentType_optional __swiftcall PayloadAttachmentInfo.AttachmentType.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (SiriOntology::PayloadAttachmentInfo::AttachmentType_optional)rawValue;
}

uint64_t PayloadAttachmentInfo.AttachmentType.rawValue.getter()
{
  return *v0;
}

uint64_t sub_1CA2768DC()
{
  return sub_1CA3AFFE0();
}

uint64_t sub_1CA27693C()
{
  return sub_1CA3AFFC0();
}

void PayloadAttachmentInfo.attachmentType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PayloadAttachmentInfo.hash(into:)()
{
  if (*v0 == 2) {
    return sub_1CA3B0630();
  }
  sub_1CA3B0630();
  return sub_1CA3B0620();
}

uint64_t static PayloadAttachmentInfo.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CA276A24()
{
  return 0x656D686361747461;
}

uint64_t sub_1CA276A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656D686361747461 && a2 == 0xEE0065707954746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1CA3B0560();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1CA276B04(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1CA276B10(uint64_t a1)
{
  unint64_t v2 = sub_1CA278004();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1CA276B4C(uint64_t a1)
{
  unint64_t v2 = sub_1CA278004();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PayloadAttachmentInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF868);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA278004();
  sub_1CA3B0680();
  char v10 = v7;
  sub_1CA278058();
  sub_1CA3B04B0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PayloadAttachmentInfo.hashValue.getter()
{
  int v1 = *v0;
  sub_1CA3B0610();
  sub_1CA3B0630();
  if (v1 != 2) {
    sub_1CA3B0620();
  }
  return sub_1CA3B0660();
}

uint64_t PayloadAttachmentInfo.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5DF880);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CA278004();
  sub_1CA3B0670();
  if (!v2)
  {
    sub_1CA2780AC();
    sub_1CA3B03E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1CA276EA8()
{
  int v1 = *v0;
  sub_1CA3B0610();
  sub_1CA3B0630();
  if (v1 != 2) {
    sub_1CA3B0620();
  }
  return sub_1CA3B0660();
}

uint64_t sub_1CA276F18()
{
  if (*v0 == 2) {
    return sub_1CA3B0630();
  }
  sub_1CA3B0630();
  return sub_1CA3B0620();
}

uint64_t sub_1CA276F68()
{
  int v1 = *v0;
  sub_1CA3B0610();
  sub_1CA3B0630();
  if (v1 != 2) {
    sub_1CA3B0620();
  }
  return sub_1CA3B0660();
}

uint64_t sub_1CA276FD4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return PayloadAttachmentInfo.init(from:)(a1, a2);
}

uint64_t sub_1CA276FEC(void *a1)
{
  return PayloadAttachmentInfo.encode(to:)(a1);
}

uint64_t sub_1CA277004(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2) {
      return 1;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0) {
      return 1;
    }
  }
  return 0;
}

BOOL _s12SiriOntology12SpanPropertyV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 36);
  float v6 = *(float *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 44);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 32);
  int v11 = *(unsigned __int8 *)(a2 + 36);
  float v12 = *(float *)(a2 + 40);
  char v13 = *(unsigned char *)(a2 + 44);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v14 = sub_1CA3B0560(), BOOL result = 0, (v14 & 1) != 0))
  {
    if (v3)
    {
      if (!v8) {
        return 0;
      }
      if (v2 != v9 || v3 != v8)
      {
        char v16 = sub_1CA3B0560();
        BOOL result = 0;
        if ((v16 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v8)
    {
      return 0;
    }
    if (v5)
    {
      if (!v11) {
        return 0;
      }
    }
    else
    {
      if (v4 == v10) {
        char v17 = v11;
      }
      else {
        char v17 = 1;
      }
      if (v17) {
        return 0;
      }
    }
    if ((v7 & 1) == 0)
    {
      if (v6 == v12) {
        char v18 = v13;
      }
      else {
        char v18 = 1;
      }
      return (v18 & 1) == 0;
    }
    return (v13 & 1) != 0;
  }
  return result;
}

BOOL _s12SiriOntology9MatchInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a2 + 72);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(float *)(a1 + 4) == *(float *)(a2 + 4)) {
      char v2 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)) {
      char v3 = *(unsigned char *)(a2 + 16);
    }
    else {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)) {
      char v4 = *(unsigned char *)(a2 + 24);
    }
    else {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)) {
      char v5 = *(unsigned char *)(a2 + 32);
    }
    else {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)) {
      char v6 = *(unsigned char *)(a2 + 40);
    }
    else {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if (!*(unsigned char *)(a2 + 48)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)) {
      char v7 = *(unsigned char *)(a2 + 48);
    }
    else {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*(unsigned char *)(a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)) {
      char v8 = *(unsigned char *)(a2 + 56);
    }
    else {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (!*(unsigned char *)(a2 + 64)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)) {
      char v10 = *(unsigned char *)(a2 + 64);
    }
    else {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
  }
  return sub_1C9F4B7BC(v12, v11);
}

BOOL _s12SiriOntology13UsoEntitySpanV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v119 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v112 = *(void *)(a1 + 24);
  uint64_t v116 = *(void *)(a1 + 32);
  uint64_t v108 = *(void *)(a1 + 56);
  uint64_t v109 = *(void *)(a1 + 48);
  uint64_t v106 = *(void *)(a1 + 72);
  uint64_t v107 = *(void *)(a1 + 64);
  uint64_t v104 = *(void *)(a1 + 88);
  uint64_t v105 = *(void *)(a1 + 80);
  uint64_t v103 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v101 = *(void *)(a1 + 40);
  uint64_t v102 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 120);
  int v6 = *(_DWORD *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 132);
  int v8 = *(_DWORD *)(a1 + 136);
  char v9 = *(unsigned char *)(a1 + 140);
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 152);
  uint64_t v12 = *(void *)(a1 + 160);
  int v13 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v14 = *(void *)(a1 + 176);
  char v15 = *(unsigned char *)(a1 + 184);
  uint64_t v16 = *(void *)(a2 + 8);
  int v17 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v110 = *(void *)(a2 + 24);
  uint64_t v114 = *(void *)(a2 + 32);
  uint64_t v92 = *(void *)(a2 + 40);
  uint64_t v93 = *(void *)(a2 + 48);
  uint64_t v94 = *(void *)(a2 + 56);
  uint64_t v95 = *(void *)(a2 + 64);
  uint64_t v96 = *(void *)(a2 + 72);
  uint64_t v97 = *(void *)(a2 + 80);
  uint64_t v98 = *(void *)(a2 + 88);
  uint64_t v99 = *(void *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v100 = *(void *)(a2 + 104);
  int v19 = *(_DWORD *)(a2 + 128);
  int v20 = *(unsigned __int8 *)(a2 + 132);
  int v21 = *(_DWORD *)(a2 + 136);
  int v22 = *(unsigned __int8 *)(a2 + 140);
  uint64_t v23 = *(void *)(a2 + 144);
  uint64_t v24 = *(void *)(a2 + 152);
  uint64_t v25 = *(void *)(a2 + 160);
  int v26 = *(unsigned __int8 *)(a2 + 168);
  uint64_t v27 = *(void *)(a2 + 176);
  char v28 = *(unsigned char *)(a2 + 184);
  if (!v3)
  {
    uint64_t v91 = *(void *)(a2 + 120);
    if (v16) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v16) {
    return 0;
  }
  uint64_t v91 = *(void *)(a2 + 120);
  if (*(void *)a1 == *(void *)a2 && v3 == v16) {
    goto LABEL_8;
  }
  uint64_t v64 = *(void *)(a1 + 120);
  uint64_t v66 = *(void *)(a1 + 112);
  uint64_t v61 = *(void *)(a2 + 176);
  int v60 = *(unsigned __int8 *)(a1 + 168);
  char v29 = *(unsigned char *)(a1 + 184);
  uint64_t v30 = *(void *)(a1 + 176);
  uint64_t v76 = *(void *)(a1 + 144);
  int v70 = *(_DWORD *)(a2 + 136);
  int v73 = *(_DWORD *)(a1 + 136);
  int v85 = *(_DWORD *)(a2 + 128);
  char v88 = *(unsigned char *)(a1 + 140);
  uint64_t v67 = *(void *)(a1 + 160);
  int v31 = *(unsigned __int8 *)(a2 + 168);
  uint64_t v32 = *(void *)(a1 + 152);
  uint64_t v33 = *(void *)(a2 + 160);
  uint64_t v34 = *(void *)(a2 + 152);
  int v35 = *(_DWORD *)(a1 + 128);
  uint64_t v82 = *(void *)(a2 + 144);
  int v79 = *(unsigned __int8 *)(a2 + 140);
  int v62 = *(unsigned __int8 *)(a2 + 132);
  char v36 = *(unsigned char *)(a1 + 132);
  char v37 = sub_1CA3B0560();
  char v7 = v36;
  int v20 = v62;
  int v21 = v70;
  int v8 = v73;
  int v22 = v79;
  uint64_t v23 = v82;
  int v6 = v35;
  uint64_t v24 = v34;
  uint64_t v25 = v33;
  uint64_t v5 = v64;
  uint64_t v4 = v66;
  uint64_t v10 = v32;
  int v19 = v85;
  char v9 = v88;
  int v26 = v31;
  uint64_t v12 = v67;
  uint64_t v11 = v76;
  uint64_t v14 = v30;
  char v15 = v29;
  int v13 = v60;
  uint64_t v27 = v61;
  char v38 = v37;
  BOOL result = 0;
  if (v38)
  {
LABEL_8:
    if (v119 == 7)
    {
      if (v17 != 7) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      if (v17 == 7 || v119 != v17) {
        return result;
      }
    }
    if (v116)
    {
      if (!v114) {
        return 0;
      }
      if (v112 != v110 || v116 != v114)
      {
        uint64_t v65 = v5;
        uint64_t v120 = v14;
        uint64_t v68 = v12;
        int v40 = v26;
        uint64_t v77 = v11;
        int v71 = v21;
        int v74 = v8;
        int v86 = v19;
        char v89 = v9;
        uint64_t v83 = v23;
        int v80 = v22;
        int v63 = v20;
        uint64_t v41 = v10;
        uint64_t v42 = v25;
        uint64_t v43 = v24;
        int v44 = v6;
        char v117 = v7;
        char v45 = sub_1CA3B0560();
        uint64_t v5 = v65;
        char v7 = v117;
        int v6 = v44;
        int v19 = v86;
        char v9 = v89;
        uint64_t v24 = v43;
        uint64_t v25 = v42;
        uint64_t v10 = v41;
        int v20 = v63;
        int v21 = v71;
        int v8 = v74;
        int v22 = v80;
        uint64_t v23 = v83;
        uint64_t v11 = v77;
        int v26 = v40;
        uint64_t v12 = v68;
        uint64_t v14 = v120;
        char v46 = v45;
        BOOL result = 0;
        if ((v46 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v114)
    {
      return 0;
    }
    if (v4)
    {
      uint64_t v47 = v101;
      uint64_t v139 = v101;
      uint64_t v140 = v109;
      uint64_t v141 = v108;
      uint64_t v142 = v107;
      uint64_t v143 = v106;
      uint64_t v144 = v105;
      uint64_t v145 = v104;
      uint64_t v146 = v103;
      uint64_t v147 = v102;
      uint64_t v148 = v4;
      if (v18)
      {
        int v87 = v19;
        char v90 = v9;
        int v48 = v20;
        int v72 = v21;
        int v75 = v8;
        int v81 = v22;
        uint64_t v84 = v23;
        char v49 = v7;
        int v118 = v6;
        uint64_t v78 = v11;
        uint64_t v69 = v24;
        uint64_t v115 = v25;
        uint64_t v111 = v10;
        int v113 = v26;
        uint64_t v121 = v14;
        uint64_t v122 = v92;
        char v123 = v93 & 1;
        int v124 = HIDWORD(v93);
        char v125 = v94 & 1;
        int v126 = HIDWORD(v94);
        char v127 = v95 & 1;
        int v128 = HIDWORD(v95);
        char v129 = v96 & 1;
        int v130 = HIDWORD(v96);
        char v131 = v97 & 1;
        int v132 = HIDWORD(v97);
        char v133 = v98 & 1;
        int v134 = HIDWORD(v98);
        char v135 = v99 & 1;
        int v136 = HIDWORD(v99);
        char v137 = v100 & 1;
        uint64_t v138 = v18;
        uint64_t v50 = v5;
        BOOL matched = _s12SiriOntology9MatchInfoV2eeoiySbAC_ACtFZ_0((uint64_t)&v139, (uint64_t)&v122);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v5 = v50;
        if (!matched) {
          return 0;
        }
LABEL_25:
        if (sub_1C9F4B818(v5, v91))
        {
          if (v49)
          {
            if (!v48) {
              return 0;
            }
          }
          else
          {
            if (v118 == v87) {
              char v53 = v48;
            }
            else {
              char v53 = 1;
            }
            if (v53) {
              return 0;
            }
          }
          if (v90)
          {
            uint64_t v54 = v84;
            if (!v81) {
              return 0;
            }
          }
          else
          {
            char v55 = v81;
            if (v75 != v72) {
              char v55 = 1;
            }
            uint64_t v54 = v84;
            if (v55) {
              return 0;
            }
          }
          if (sub_1C9F4B97C(v78, v54))
          {
            if (v12)
            {
              uint64_t v56 = v121;
              int v57 = v113;
              if (!v115) {
                return 0;
              }
              if (v111 != v69 || v12 != v115)
              {
                char v58 = sub_1CA3B0560();
                BOOL result = 0;
                if ((v58 & 1) == 0) {
                  return result;
                }
              }
            }
            else
            {
              uint64_t v56 = v121;
              int v57 = v113;
              if (v115) {
                return 0;
              }
            }
            if (v13 == 3)
            {
              if (v57 != 3) {
                return 0;
              }
            }
            else
            {
              if (v57 == 3) {
                return 0;
              }
              if (v13 == 2)
              {
                if (v57 != 2) {
                  return 0;
                }
              }
              else
              {
                BOOL result = 0;
                if (v57 == 2 || ((v57 ^ v13) & 1) != 0) {
                  return result;
                }
              }
            }
            if ((v15 & 1) == 0)
            {
              if (v56 == v27) {
                char v59 = v28;
              }
              else {
                char v59 = 1;
              }
              return (v59 & 1) == 0;
            }
            if (v28) {
              return 1;
            }
          }
        }
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v52 = v109;
      uint64_t v18 = 0;
    }
    else
    {
      int v87 = v19;
      char v90 = v9;
      int v48 = v20;
      int v72 = v21;
      int v75 = v8;
      int v81 = v22;
      uint64_t v84 = v23;
      char v49 = v7;
      int v118 = v6;
      uint64_t v78 = v11;
      uint64_t v69 = v24;
      uint64_t v115 = v25;
      uint64_t v111 = v10;
      int v113 = v26;
      uint64_t v121 = v14;
      uint64_t v47 = v101;
      uint64_t v52 = v109;
      if (!v18) {
        goto LABEL_25;
      }
    }
    uint64_t v139 = v47;
    uint64_t v140 = v52;
    uint64_t v141 = v108;
    uint64_t v142 = v107;
    uint64_t v143 = v106;
    uint64_t v144 = v105;
    uint64_t v145 = v104;
    uint64_t v146 = v103;
    uint64_t v147 = v102;
    uint64_t v148 = v4;
    uint64_t v149 = v92;
    uint64_t v150 = v93;
    uint64_t v151 = v94;
    uint64_t v152 = v95;
    uint64_t v153 = v96;
    uint64_t v154 = v97;
    uint64_t v155 = v98;
    uint64_t v156 = v99;
    uint64_t v157 = v100;
    uint64_t v158 = v18;
    swift_bridgeObjectRetain();
    sub_1CA27AC1C((uint64_t)&v139);
    return 0;
  }
  return result;
}

unint64_t sub_1CA2779D0()
{
  unint64_t result = qword_1EBC8A5F8;
  if (!qword_1EBC8A5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5F8);
  }
  return result;
}

unint64_t sub_1CA277A24()
{
  unint64_t result = qword_1EBC8A5E8;
  if (!qword_1EBC8A5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5E8);
  }
  return result;
}

unint64_t sub_1CA277A78()
{
  unint64_t result = qword_1EBC9FC98;
  if (!qword_1EBC9FC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC9FC98);
  }
  return result;
}

unint64_t sub_1CA277ACC()
{
  unint64_t result = qword_1EBC8A5D8;
  if (!qword_1EBC8A5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5D8);
  }
  return result;
}

unint64_t sub_1CA277B20()
{
  unint64_t result = qword_1EBC8A620;
  if (!qword_1EBC8A620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A620);
  }
  return result;
}

unint64_t sub_1CA277B74()
{
  unint64_t result = qword_1EBC8AFD0;
  if (!qword_1EBC8AFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8AFD0);
  }
  return result;
}

unint64_t sub_1CA277BC8()
{
  unint64_t result = qword_1EBC8A5F0;
  if (!qword_1EBC8A5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5F0);
  }
  return result;
}

unint64_t sub_1CA277C1C()
{
  unint64_t result = qword_1EBC9FCA0;
  if (!qword_1EBC9FCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC9FCA0);
  }
  return result;
}

unint64_t sub_1CA277C70()
{
  unint64_t result = qword_1EBC8A5E0;
  if (!qword_1EBC8A5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5E0);
  }
  return result;
}

unint64_t sub_1CA277CC4()
{
  unint64_t result = qword_1EBC8A628;
  if (!qword_1EBC8A628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A628);
  }
  return result;
}

unint64_t sub_1CA277D18()
{
  unint64_t result = qword_1EBC8AFD8;
  if (!qword_1EBC8AFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8AFD8);
  }
  return result;
}

unint64_t sub_1CA277D6C()
{
  unint64_t result = qword_1EA5DF818;
  if (!qword_1EA5DF818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF818);
  }
  return result;
}

unint64_t sub_1CA277DC0()
{
  unint64_t result = qword_1EA5DF830;
  if (!qword_1EA5DF830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF830);
  }
  return result;
}

uint64_t sub_1CA277E14(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CA277E80()
{
  unint64_t result = qword_1EA5DF848;
  if (!qword_1EA5DF848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF848);
  }
  return result;
}

uint64_t _s12SiriOntology14AsrAlternativeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 20);
  float v4 = *(float *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 20);
  BOOL v6 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v6 || (v7 = sub_1CA3B0560(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v3)
    {
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v2 == v4) {
        char v9 = v5;
      }
      else {
        char v9 = 1;
      }
      if (v9) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

unint64_t sub_1CA277F5C()
{
  unint64_t result = qword_1EA5DF858;
  if (!qword_1EA5DF858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF858);
  }
  return result;
}

unint64_t sub_1CA277FB0()
{
  unint64_t result = qword_1EBC8A5C0;
  if (!qword_1EBC8A5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5C0);
  }
  return result;
}

unint64_t sub_1CA278004()
{
  unint64_t result = qword_1EA5DF870;
  if (!qword_1EA5DF870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF870);
  }
  return result;
}

unint64_t sub_1CA278058()
{
  unint64_t result = qword_1EA5DF878;
  if (!qword_1EA5DF878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF878);
  }
  return result;
}

unint64_t sub_1CA2780AC()
{
  unint64_t result = qword_1EA5DF888;
  if (!qword_1EA5DF888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF888);
  }
  return result;
}

unint64_t sub_1CA278104()
{
  unint64_t result = qword_1EA5DF890;
  if (!qword_1EA5DF890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF890);
  }
  return result;
}

unint64_t sub_1CA27815C()
{
  unint64_t result = qword_1EA5DF898;
  if (!qword_1EA5DF898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF898);
  }
  return result;
}

unint64_t sub_1CA2781B4()
{
  unint64_t result = qword_1EA5DF8A0;
  if (!qword_1EA5DF8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8A0);
  }
  return result;
}

unint64_t sub_1CA27820C()
{
  unint64_t result = qword_1EA5DF8A8;
  if (!qword_1EA5DF8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8A8);
  }
  return result;
}

unint64_t sub_1CA278264()
{
  unint64_t result = qword_1EA5DF8B0;
  if (!qword_1EA5DF8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8B0);
  }
  return result;
}

unint64_t sub_1CA2782BC()
{
  unint64_t result = qword_1EA5DF8B8;
  if (!qword_1EA5DF8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8B8);
  }
  return result;
}

unint64_t sub_1CA278314()
{
  unint64_t result = qword_1EA5DF8C0;
  if (!qword_1EA5DF8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8C0);
  }
  return result;
}

unint64_t sub_1CA27836C()
{
  unint64_t result = qword_1EA5DF8C8;
  if (!qword_1EA5DF8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8C8);
  }
  return result;
}

unint64_t sub_1CA2783C4()
{
  unint64_t result = qword_1EA5DF8D0;
  if (!qword_1EA5DF8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8D0);
  }
  return result;
}

unint64_t sub_1CA27841C()
{
  unint64_t result = qword_1EA5DF8D8;
  if (!qword_1EA5DF8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8D8);
  }
  return result;
}

unint64_t sub_1CA278474()
{
  unint64_t result = qword_1EA5DF8E0;
  if (!qword_1EA5DF8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8E0);
  }
  return result;
}

unint64_t sub_1CA2784CC()
{
  unint64_t result = qword_1EA5DF8E8;
  if (!qword_1EA5DF8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8E8);
  }
  return result;
}

uint64_t destroy for UsoEntitySpan()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  int v5 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = v6;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  int v8 = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v10 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = v4;
  int v5 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = v5;
  int v6 = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v6;
  int v7 = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v7;
  int v8 = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = v8;
  int v9 = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v9;
  int v10 = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = v10;
  int v11 = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v11;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v12 = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v12;
  LOBYTE(v12) = *(unsigned char *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 140) = v12;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v13 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v13;
  return a1;
}

__n128 __swift_memcpy185_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  int v6 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  int v7 = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = v7;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for UsoEntitySpan(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UsoEntitySpan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 120) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 185) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoEntitySpan()
{
  return &type metadata for UsoEntitySpan;
}

unsigned char *storeEnumTagSinglePayload for UsoEntitySpan.SpanSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA278B74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoEntitySpan.SpanSource()
{
  return &type metadata for UsoEntitySpan.SpanSource;
}

uint64_t destroy for MatchInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MatchInfo(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MatchInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v3 = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v3;
  int v4 = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 12) = v4;
  int v5 = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v5;
  int v6 = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v6;
  int v7 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v7;
  int v8 = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = v8;
  int v9 = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = v9;
  int v10 = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v10;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for MatchInfo(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchInfo()
{
  return &type metadata for MatchInfo;
}

unsigned char *storeEnumTagSinglePayload for MatchInfo.AliasType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA278F70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchInfo.AliasType()
{
  return &type metadata for MatchInfo.AliasType;
}

ValueMetadata *type metadata accessor for MatchInfo.MatchSignals()
{
  return &type metadata for MatchInfo.MatchSignals;
}

uint64_t sub_1CA278FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsrAlternative(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AsrAlternative(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsrAlternative(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AsrAlternative(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AsrAlternative()
{
  return &type metadata for AsrAlternative;
}

uint64_t initializeWithCopy for SpanProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SpanProperty(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  int v5 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v5;
  return a1;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SpanProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpanProperty(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 45)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpanProperty(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 45) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanProperty()
{
  return &type metadata for SpanProperty;
}

uint64_t getEnumTagSinglePayload for PayloadAttachmentInfo(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  if (*a1 <= 2u) {
    int v6 = 2;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 3;
  if (*a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PayloadAttachmentInfo(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA2794D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PayloadAttachmentInfo()
{
  return &type metadata for PayloadAttachmentInfo;
}

ValueMetadata *type metadata accessor for PayloadAttachmentInfo.AttachmentType()
{
  return &type metadata for PayloadAttachmentInfo.AttachmentType;
}

unsigned char *storeEnumTagSinglePayload for PayloadAttachmentInfo.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1CA2795BCLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PayloadAttachmentInfo.CodingKeys()
{
  return &type metadata for PayloadAttachmentInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SpanProperty.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA2796C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanProperty.CodingKeys()
{
  return &type metadata for SpanProperty.CodingKeys;
}

unsigned char *_s12SiriOntology21PayloadAttachmentInfoV14AttachmentTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA2797C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AsrAlternative.CodingKeys()
{
  return &type metadata for AsrAlternative.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MatchInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *__n128 result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA2798C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MatchInfo.CodingKeys()
{
  return &type metadata for MatchInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for UsoEntitySpan.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CA2799CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UsoEntitySpan.CodingKeys()
{
  return &type metadata for UsoEntitySpan.CodingKeys;
}

unint64_t sub_1CA279A08()
{
  unint64_t result = qword_1EA5DF8F0;
  if (!qword_1EA5DF8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8F0);
  }
  return result;
}

unint64_t sub_1CA279A60()
{
  unint64_t result = qword_1EA5DF8F8;
  if (!qword_1EA5DF8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF8F8);
  }
  return result;
}

unint64_t sub_1CA279AB8()
{
  unint64_t result = qword_1EA5DF900;
  if (!qword_1EA5DF900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF900);
  }
  return result;
}

unint64_t sub_1CA279B10()
{
  unint64_t result = qword_1EA5DF908;
  if (!qword_1EA5DF908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF908);
  }
  return result;
}

unint64_t sub_1CA279B68()
{
  unint64_t result = qword_1EA5DF910;
  if (!qword_1EA5DF910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF910);
  }
  return result;
}

unint64_t sub_1CA279BC0()
{
  unint64_t result = qword_1EA5DF918;
  if (!qword_1EA5DF918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF918);
  }
  return result;
}

unint64_t sub_1CA279C18()
{
  unint64_t result = qword_1EA5DF920;
  if (!qword_1EA5DF920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF920);
  }
  return result;
}

unint64_t sub_1CA279C70()
{
  unint64_t result = qword_1EBC8A5D0;
  if (!qword_1EBC8A5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5D0);
  }
  return result;
}

unint64_t sub_1CA279CC8()
{
  unint64_t result = qword_1EBC8A5C8;
  if (!qword_1EBC8A5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A5C8);
  }
  return result;
}

unint64_t sub_1CA279D20()
{
  unint64_t result = qword_1EA5DF928;
  if (!qword_1EA5DF928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF928);
  }
  return result;
}

unint64_t sub_1CA279D78()
{
  unint64_t result = qword_1EA5DF930;
  if (!qword_1EA5DF930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF930);
  }
  return result;
}

unint64_t sub_1CA279DD0()
{
  unint64_t result = qword_1EA5DF938;
  if (!qword_1EA5DF938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF938);
  }
  return result;
}

unint64_t sub_1CA279E28()
{
  unint64_t result = qword_1EA5DF940;
  if (!qword_1EA5DF940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF940);
  }
  return result;
}

unint64_t sub_1CA279E80()
{
  unint64_t result = qword_1EBC8A608;
  if (!qword_1EBC8A608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A608);
  }
  return result;
}

unint64_t sub_1CA279ED8()
{
  unint64_t result = qword_1EBC8A600;
  if (!qword_1EBC8A600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBC8A600);
  }
  return result;
}

uint64_t sub_1CA279F2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x70416E696769726FLL && a2 == 0xEB00000000644970;
  if (v2 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43656372756F73 && a2 == 0xEF746E656E6F706DLL || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x666E49686374616DLL && a2 == 0xE90000000000006FLL || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69747265706F7270 && a2 == 0xEA00000000007365 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646E497472617473 && a2 == 0xEA00000000007865 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7865646E49646E65 && a2 == 0xE800000000000000 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74616E7265746C61 && a2 == 0xEC00000073657669 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E456E696769726FLL && a2 == 0xEE00644979746974 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CA457170 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CA44DAC0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = sub_1CA3B0560();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_1CA27A41C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001CA457190 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6353686374616DLL && a2 == 0xEA00000000006572 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656B6F5478616DLL && a2 == 0xED0000746E756F43 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CA4571B0 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CA4571D0 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CA4571F0 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7473694474696465 && a2 == 0xEC00000065636E61 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7361696C4178616DLL && a2 == 0xED0000746E756F43 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CA457210 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CA457230)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v5 = sub_1CA3B0560();
    swift_bridgeObjectRelease();
    if (v5) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_1CA27A84C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C696261626F7270 && a2 == 0xEB00000000797469)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1CA3B0560();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1CA27A950(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E4965756C6176 && a2 == 0xE800000000000000 || (sub_1CA3B0560() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6C4665756C6176 && a2 == 0xEA00000000007461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1CA3B0560();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1CA27AB20()
{
  unint64_t result = qword_1EA5DF948;
  if (!qword_1EA5DF948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF948);
  }
  return result;
}

unint64_t sub_1CA27AB74()
{
  unint64_t result = qword_1EA5DF950;
  if (!qword_1EA5DF950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF950);
  }
  return result;
}

unint64_t sub_1CA27ABC8()
{
  unint64_t result = qword_1EA5DF958;
  if (!qword_1EA5DF958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DF958);
  }
  return result;
}

uint64_t sub_1CA27AC1C(uint64_t a1)
{
  return a1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2] = sub_1C9F78890(MEMORY[0x1E4FBC860]);
  a1[3] = sub_1C9F788CC(v2);
  type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF690);
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.label.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.input.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.input.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.input.modify())()
{
  return nullsub_1;
}

double Com_Apple_Siri_Product_Proto_StatefulValue.confidence.getter()
{
  return *(double *)(v0 + 32);
}

void Com_Apple_Siri_Product_Proto_StatefulValue.confidence.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.confidence.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.inferred.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.inferred.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.inferred.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.path.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.path.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.path.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.tags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.tags.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.tags.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  return sub_1CA27AEF0(v3, a1);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF8D0);
}

uint64_t sub_1CA27AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.value.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  return sub_1CA27AF9C(a1, v3);
}

uint64_t sub_1CA27AF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.value.modify())(void)
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.stringValue.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1CA27AEF0(v0 + *(int *)(v4 + 40), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1C9F40EEC((uint64_t)v3, &qword_1EA5CF8B0);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1CA27BD20((uint64_t)v3, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    return 0;
  }
  return *(void *)v3;
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF8A0);
}

uint64_t sub_1CA27B188@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1CA27AEF0(a1 + *(int *)(v7 + 40), (uint64_t)v6);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_1C9F40EEC((uint64_t)v6, &qword_1EA5CF8B0);
  }
  else
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result != 1)
    {
      uint64_t v10 = *v6;
      unint64_t v11 = v6[1];
      goto LABEL_7;
    }
    uint64_t result = sub_1CA27BD20((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
LABEL_7:
  *a2 = v10;
  a2[1] = v11;
  return result;
}

uint64_t sub_1CA27B2B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40));
  swift_bridgeObjectRetain();
  sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF8B0);
  *uint64_t v4 = v3;
  v4[1] = v2;
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  char v6 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 0, 1, v5);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.stringValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40));
  sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF8B0);
  void *v5 = a1;
  v5[1] = a2;
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 0, 1, v6);
}

void (*Com_Apple_Siri_Product_Proto_StatefulValue.stringValue.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[2] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  uint64_t v5 = (uint64_t *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[3] = v5;
  uint64_t v6 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  *((_DWORD *)v3 + 12) = v6;
  sub_1CA27AEF0(v1 + v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v3[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF8B0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v9 = *v5;
      unint64_t v10 = v5[1];
      goto LABEL_7;
    }
    sub_1CA27BD20((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
LABEL_7:
  *uint64_t v3 = v9;
  v3[1] = v10;
  return sub_1CA27B584;
}

void sub_1CA27B584(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = *((int *)*a1 + 12);
  uint64_t v8 = (void *)(*a1)[3];
  uint64_t v9 = (void *)((*a1)[2] + v7);
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1C9F40EEC((uint64_t)v9, &qword_1EA5CF8B0);
    *uint64_t v9 = v4;
    v9[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C9F40EEC((*a1)[2] + v7, &qword_1EA5CF8B0);
    *uint64_t v9 = v4;
    v9[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
  }
  free(v8);
  free(v2);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1CA27AEF0(v1 + *(int *)(v6 + 40), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF8B0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_1CA2843E4((uint64_t)v5, (uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    }
    sub_1CA27BD20((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = MEMORY[0x1E4FBC860];
  type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t sub_1CA27B7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CA2844B4(a1, (uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  uint64_t v7 = a2 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  sub_1C9F40EEC(v7, &qword_1EA5CF8B0);
  sub_1CA2843E4((uint64_t)v6, v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  sub_1C9F40EEC(v3, &qword_1EA5CF8B0);
  sub_1CA2843E4(a1, v3, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

void (*Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  *((_DWORD *)v3 + 12) = v8;
  sub_1CA27AEF0(v1 + v8, (uint64_t)v5);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF8B0);
LABEL_6:
    *uint64_t v7 = 0;
    v7[1] = 0xE000000000000000;
    long long v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    void v7[5] = 0xE000000000000000;
    v7[6] = MEMORY[0x1E4FBC860];
    _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
    return sub_1CA27BBB0;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1CA27BD20((uint64_t)v5, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    goto LABEL_6;
  }
  sub_1CA2843E4((uint64_t)v5, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  return sub_1CA27BBB0;
}

void sub_1CA27BBB0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  uint64_t v5 = *(int *)(*(void *)a1 + 48);
  size_t v6 = *(void **)(*(void *)a1 + 16);
  uint64_t v7 = *(void **)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v5;
  if (a2)
  {
    sub_1CA2844B4(*(void *)(*(void *)a1 + 24), (uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1C9F40EEC(v9, &qword_1EA5CF8B0);
    sub_1CA2843E4((uint64_t)v6, v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    sub_1CA27BD20((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  else
  {
    sub_1C9F40EEC(**(void **)a1 + v5, &qword_1EA5CF8B0);
    sub_1CA2843E4((uint64_t)v7, v9, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
  }
  free(v7);
  free(v6);
  free(v8);
  free(v2);
}

uint64_t sub_1CA27BD20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 44);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 44);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 48) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 56) = v2;
  uint64_t v3 = a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.values.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValues.values.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA27C3C0(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.unknownFields.setter(uint64_t a1)
{
  return sub_1CA27C458(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t (*Com_Apple_Siri_Product_Proto_StatefulValues.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.init()@<X0>(void *a1@<X8>)
{
  return sub_1CA27C534((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.id.getter()
{
  return *v0;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.id.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalState.id.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.states.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.states.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalState.states.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA27C1E4(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.unknownFields.setter(uint64_t a1)
{
  return sub_1CA27C27C(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalState.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = MEMORY[0x1E4FBC860];
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.nodeName.modify())()
{
  return nullsub_1;
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.stateValues.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA27C1E4(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, a1);
}

uint64_t sub_1CA27C1E4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = sub_1CA3AFA20();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.unknownFields.setter(uint64_t a1)
{
  return sub_1CA27C27C(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA27C27C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = sub_1CA3AFA20();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x1E4FBC860];
  type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.values.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CA27C3C0(type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, a1);
}

uint64_t sub_1CA27C3C0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = sub_1CA3AFA20();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.unknownFields.setter(uint64_t a1)
{
  return sub_1CA27C458(a1, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1CA27C458(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = sub_1CA3AFA20();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.init()@<X0>(void *a1@<X8>)
{
  return sub_1CA27C534((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, a1);
}

uint64_t sub_1CA27C534@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x1E4FBC860];
  a1(0);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.domainName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.domainName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.domainName.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.nodeValueListMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.nodeValueListMap.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.nodeValueListMap.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.mcNodeValueListMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.mcNodeValueListMap.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.mcNodeValueListMap.modify())()
{
  return nullsub_1;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0) + 28);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0) + 28);
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*Com_Apple_Siri_Product_Proto_NLState.unknownFields.modify())(void)
{
  return nullsub_1;
}

unint64_t static Com_Apple_Siri_Product_Proto_StatefulValue.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1CA27C800()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF960);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF960);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1CA3C3CE0;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "label";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4FA3BA0];
  uint64_t v7 = sub_1CA3AFD50();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "input";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)unint64_t v11 = "confidence";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)uint64_t v13 = "inferred";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)char v15 = "path";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  int v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)int v17 = "tags";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  int v19 = (char *)v18 + v1[14];
  void *v18 = 7;
  *(void *)int v19 = "stringValue";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  int v20 = (void *)(v4 + 7 * v2);
  int v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)int v21 = "semanticValue";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_StatefulValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3DD8, (uint64_t)qword_1EA5DF960, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_1CA3AFAB0();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          sub_1CA3AFBA0();
          break;
        case 3:
          sub_1CA3AFB80();
          break;
        case 4:
          sub_1CA3AFAE0();
          break;
        case 5:
        case 6:
          sub_1CA3AFB50();
          break;
        case 7:
          sub_1CA27CCD0(v5);
          break;
        case 8:
          sub_1CA27CE98(v5, a1, a2, a3);
          break;
        default:
          break;
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t sub_1CA27CCD0(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)(a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40));
  sub_1CA27AEF0((uint64_t)v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  sub_1C9F40EEC((uint64_t)v5, &qword_1EA5CF8B0);
  if (v9 == 1 || (uint64_t result = sub_1CA3AFAC0(), !v1))
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t result = sub_1CA3AFB90();
    uint64_t v11 = v14;
    if (v1)
    {
      return swift_bridgeObjectRelease();
    }
    else if (v14)
    {
      uint64_t v12 = v13;
      sub_1C9F40EEC((uint64_t)v6, &qword_1EA5CF8B0);
      *uint64_t v6 = v12;
      v6[1] = v11;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    }
  }
  return result;
}

uint64_t sub_1CA27CE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a2;
  uint64_t v49 = a4;
  uint64_t v50 = a1;
  uint64_t v51 = a3;
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v45 = (char *)&v39 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v43 = (uint64_t)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v39 - v22;
  uint64_t v44 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v46 = v4;
  v24((char *)&v39 - v22, 1, 1, v4);
  uint64_t v25 = v50 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0) + 40);
  sub_1CA27AEF0(v25, (uint64_t)v11);
  uint64_t v41 = v13;
  int v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v50 = v12;
  int v27 = v26(v11, 1, v12);
  uint64_t v40 = v25;
  if (v27 == 1)
  {
    uint64_t v28 = v47;
    sub_1C9F40EEC((uint64_t)v11, &qword_1EA5CF8B0);
    uint64_t v29 = v46;
  }
  else
  {
    long long v39 = v24;
    uint64_t v32 = (uint64_t)v45;
    sub_1CA2843E4((uint64_t)v11, (uint64_t)v18, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    uint64_t v33 = v47;
    sub_1CA3AFAC0();
    uint64_t v28 = v33;
    if (v33)
    {
      sub_1CA27BD20((uint64_t)v18, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
      goto LABEL_8;
    }
    sub_1CA2843E4((uint64_t)v18, (uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v29 = v46;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1C9F40EEC((uint64_t)v23, &qword_1EBCA0338);
      sub_1CA2843E4((uint64_t)v16, v32, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      sub_1CA2843E4(v32, (uint64_t)v23, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
      v39(v23, 0, 1, v29);
    }
    else
    {
      sub_1CA27BD20((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    }
  }
  sub_1CA280E90(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1CA3AFBF0();
  if (v28)
  {
LABEL_8:
    uint64_t v31 = (uint64_t)v23;
    return sub_1C9F40EEC(v31, &qword_1EBCA0338);
  }
  uint64_t v30 = v43;
  sub_1CA28444C((uint64_t)v23, v43);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v30, 1, v29) != 1)
  {
    uint64_t v36 = v42;
    sub_1CA2843E4(v30, v42, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    uint64_t v37 = v40;
    sub_1C9F40EEC(v40, &qword_1EA5CF8B0);
    sub_1CA2843E4(v36, v37, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    uint64_t v38 = v50;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v38);
  }
  uint64_t v31 = v30;
  return sub_1C9F40EEC(v31, &qword_1EBCA0338);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6 || (uint64_t result = sub_1CA3AFD00(), !v1))
  {
    unint64_t v8 = *(void *)(v0 + 24);
    uint64_t v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v9 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v9 || (uint64_t result = sub_1CA3AFD00(), !v1))
    {
      if (*(double *)(v0 + 32) == 0.0 || (uint64_t result = sub_1CA3AFCF0(), !v1))
      {
        if (*(unsigned char *)(v0 + 40) != 1 || (uint64_t result = sub_1CA3AFC90(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 48) + 16) || (uint64_t result = sub_1CA3AFCE0(), !v1))
          {
            if (!*(void *)(*(void *)(v0 + 56) + 16) || (uint64_t result = sub_1CA3AFCE0(), !v1))
            {
              uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
              sub_1CA27AEF0(v0 + *(int *)(v10 + 40), (uint64_t)v4);
              uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v4, 1, v11) == 1)return sub_1CA3AFA00(); {
              if (swift_getEnumCaseMultiPayload() == 1)
              }
              {
                sub_1CA27D7D8(v0);
                uint64_t result = sub_1CA27BD20((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
                if (!v1) {
                  return sub_1CA3AFA00();
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                uint64_t result = sub_1CA27D678(v0);
                if (!v1) {
                  return sub_1CA3AFA00();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CA27D678(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1CA27AEF0(a1 + *(int *)(v5 + 40), (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF8B0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1CA3AFD00();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1CA27BD20((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1CA27D7D8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
  sub_1CA27AEF0(a1 + *(int *)(v8 + 40), (uint64_t)v4);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1C9F40EEC((uint64_t)v4, &qword_1EA5CF8B0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1CA2843E4((uint64_t)v4, (uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1CA280E90(&qword_1EA5D6898, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    sub_1CA3AFD40();
    return sub_1CA27BD20((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  }
  uint64_t result = sub_1CA27BD20((uint64_t)v4, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValue.hashValue.getter()
{
  return sub_1CA27FD2C((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, &qword_1EA5DF9F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1CA27DA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 48) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 56) = v3;
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA27DAE4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1CA27DB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1CA27DB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1CA27DBE0())()
{
  return nullsub_1;
}

uint64_t sub_1CA27DC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_StatefulValue.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1CA27DC1C()
{
  return Com_Apple_Siri_Product_Proto_StatefulValue.traverse<A>(visitor:)();
}

uint64_t sub_1CA27DC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA280E90(&qword_1EA5DFAB8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA27DCB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3DD8, (uint64_t)qword_1EA5DF960, a1);
}

uint64_t sub_1CA27DCD4(uint64_t a1)
{
  uint64_t v2 = sub_1CA280E90(&qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA27DD40()
{
  sub_1CA280E90(&qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
  return sub_1CA3AFC40();
}

unint64_t static Com_Apple_Siri_Product_Proto_StatefulValues.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1CA27DDDC(uint64_t a1)
{
  return sub_1CA27EF28(a1, qword_1EA5DF978);
}

uint64_t static Com_Apple_Siri_Product_Proto_StatefulValues._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3DE0, (uint64_t)qword_1EA5DF978, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA27F100(a1, a2, a3, (void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue, &qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0),
        sub_1CA280E90(&qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue), uint64_t result = sub_1CA3AFD30(), !v1))
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(0);
    return sub_1CA3AFA00();
  }
  return result;
}

uint64_t static Com_Apple_Siri_Product_Proto_StatefulValues.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1CA280390(a1, a2, sub_1C9F4ED7C, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues) & 1;
}

uint64_t Com_Apple_Siri_Product_Proto_StatefulValues.hashValue.getter()
{
  return sub_1CA27FD2C((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues, &qword_1EA5CF8E8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

unint64_t sub_1CA27DFE0()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1CA27DFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_StatefulValues.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1CA27E014()
{
  return Com_Apple_Siri_Product_Proto_StatefulValues.traverse<A>(visitor:)();
}

uint64_t sub_1CA27E02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA280E90(&qword_1EA5DFAB0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA27E0A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3DE0, (uint64_t)qword_1EA5DF978, a1);
}

uint64_t sub_1CA27E0CC(uint64_t a1)
{
  uint64_t v2 = sub_1CA280E90(&qword_1EA5CF8E0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA27E138()
{
  sub_1CA280E90(&qword_1EA5CF8E0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
  return sub_1CA3AFC40();
}

uint64_t sub_1CA27E1B4(char *a1, char *a2)
{
  return sub_1CA280390(a1, a2, sub_1C9F4ED7C, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalState.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1CA27E214()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF990);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF990);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C0450;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "id";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA0];
  uint64_t v8 = sub_1CA3AFD50();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "states";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3DE8, (uint64_t)qword_1EA5DF990, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
        sub_1CA280E90(&qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
        sub_1CA3AFBE0();
      }
      else if (result == 1)
      {
        sub_1CA3AFB20();
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_1CA3AFCC0(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0),
          sub_1CA280E90(&qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue), uint64_t result = sub_1CA3AFD30(), !v1))
    {
      type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
      return sub_1CA3AFA00();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalState.hashValue.getter()
{
  return sub_1CA27FD2C((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState, &qword_1EA5DF9F8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1CA27E668@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = MEMORY[0x1E4FBC860];
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA27E698()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1CA27E6B4()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalState.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA27E6CC()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalState.traverse<A>(visitor:)();
}

uint64_t sub_1CA27E6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA280E90(&qword_1EA5DFAA8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA27E760@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3DE8, (uint64_t)qword_1EA5DF990, a1);
}

uint64_t sub_1CA27E784(uint64_t a1)
{
  uint64_t v2 = sub_1CA280E90(&qword_1EA5DFA00, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA27E7F0()
{
  sub_1CA280E90(&qword_1EA5DFA00, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
  return sub_1CA3AFC40();
}

unint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.protoMessageName.getter()
{
  return 0xD000000000000034;
}

uint64_t sub_1CA27E88C()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF9A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF9A8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C0450;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "nodeName";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA0];
  uint64_t v8 = sub_1CA3AFD50();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "stateValues";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3DF0, (uint64_t)qword_1EA5DF9A8, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
        sub_1CA280E90(&qword_1EA5DFA00, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
        sub_1CA3AFBE0();
      }
      else if (result == 1)
      {
        sub_1CA3AFBA0();
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_1CA3AFD00(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0),
          sub_1CA280E90(&qword_1EA5DFA00, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState), uint64_t result = sub_1CA3AFD30(), !v1))
    {
      type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
      return sub_1CA3AFA00();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.hashValue.getter()
{
  return sub_1CA27FD2C((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, &qword_1EA5DFA08, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA27ECF4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x1E4FBC860];
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA27ED28()
{
  return 0xD000000000000034;
}

uint64_t sub_1CA27ED44()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA27ED5C()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo.traverse<A>(visitor:)();
}

uint64_t sub_1CA27ED74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA280E90(&qword_1EA5DFAA0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA27EDF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3DF0, (uint64_t)qword_1EA5DF9A8, a1);
}

uint64_t sub_1CA27EE14(uint64_t a1)
{
  uint64_t v2 = sub_1CA280E90(&qword_1EA5DFA10, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA27EE80()
{
  sub_1CA280E90(&qword_1EA5DFA10, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
  return sub_1CA3AFC40();
}

unint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t sub_1CA27EF1C(uint64_t a1)
{
  return sub_1CA27EF28(a1, qword_1EA5DF9C0);
}

uint64_t sub_1CA27EF28(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v4 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1CA3C0440;
  unint64_t v7 = v6 + v5 + v4[14];
  *(void *)(v6 + v5) = 1;
  *(void *)unint64_t v7 = "values";
  *(void *)(v7 + 8) = 6;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x1E4FA3BA0];
  uint64_t v9 = sub_1CA3AFD50();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3DF8, (uint64_t)qword_1EA5DF9C0, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CA27F100(a1, a2, a3, (void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo, &qword_1EA5DFA10, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA27F100(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = sub_1CA3AFAB0();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        sub_1CA280E90(a5, a6);
        sub_1CA3AFBE0();
      }
      uint64_t result = sub_1CA3AFAB0();
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0),
        sub_1CA280E90(&qword_1EA5DFA10, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo), uint64_t result = sub_1CA3AFD30(), !v1))
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(0);
    return sub_1CA3AFA00();
  }
  return result;
}

uint64_t static Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1CA280390(a1, a2, sub_1C9F4DCDC, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos) & 1;
}

uint64_t Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.hashValue.getter()
{
  return sub_1CA27FD2C((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos, &qword_1EA5DFA18, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

unint64_t sub_1CA27F384()
{
  return 0xD000000000000035;
}

uint64_t sub_1CA27F3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1CA27F3B8()
{
  return Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos.traverse<A>(visitor:)();
}

uint64_t sub_1CA27F3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA280E90(&qword_1EA5DFA98, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA27F44C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3DF8, (uint64_t)qword_1EA5DF9C0, a1);
}

uint64_t sub_1CA27F470(uint64_t a1)
{
  uint64_t v2 = sub_1CA280E90(&qword_1EA5DFA20, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA27F4DC()
{
  sub_1CA280E90(&qword_1EA5DFA20, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
  return sub_1CA3AFC40();
}

uint64_t sub_1CA27F558(char *a1, char *a2)
{
  return sub_1CA280390(a1, a2, sub_1C9F4DCDC, type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos) & 1;
}

unint64_t static Com_Apple_Siri_Product_Proto_NLState.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_1CA27F5B8()
{
  uint64_t v0 = sub_1CA3AFD80();
  __swift_allocate_value_buffer(v0, qword_1EA5DF9D8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA5DF9D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBC85C58);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBC85C20) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CA3C1BA0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "domainName";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4FA3BA0];
  uint64_t v8 = sub_1CA3AFD50();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  char v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)char v10 = "nodeValueListMap";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mcNodeValueListMap";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_1CA3AFD60();
}

uint64_t static Com_Apple_Siri_Product_Proto_NLState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F38568(&qword_1EA5D3E00, (uint64_t)qword_1EA5DF9D8, a1);
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = sub_1CA3AFAB0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        sub_1CA27F988();
        break;
      case 2:
        sub_1CA27F894();
        break;
      case 1:
        sub_1CA3AFBA0();
        break;
    }
  }
  return result;
}

uint64_t sub_1CA27F894()
{
  return sub_1CA3AFA90();
}

uint64_t sub_1CA27F988()
{
  return sub_1CA3AFA90();
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_1CA3AFD00(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (sub_1CA3AF9E0(),
          type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(0),
          sub_1CA280E90(&qword_1EA5CF8E0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues), sub_1CA280E90(&qword_1EA5CF8E8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues), uint64_t result = sub_1CA3AFC50(), !v1))
    {
      if (!*(void *)(v0[3] + 16)
        || (sub_1CA3AF9E0(),
            type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(0),
            sub_1CA280E90(&qword_1EA5DFA20, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos), sub_1CA280E90(&qword_1EA5DFA18, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos), uint64_t result = sub_1CA3AFC50(), !v1))
      {
        type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
        return sub_1CA3AFA00();
      }
    }
  }
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_NLState.hashValue.getter()
{
  return sub_1CA27FD2C((void (*)(void))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState, &qword_1EA5DFA28, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1CA27FD2C(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA27FDB4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2] = sub_1C9F78890(MEMORY[0x1E4FBC860]);
  a1[3] = sub_1C9F788CC(v2);
  return _s12SiriOntology010Com_Apple_A33_Product_Proto_NonTerminalElementVACycfC_0();
}

unint64_t sub_1CA27FE14()
{
  return 0xD000000000000024;
}

uint64_t sub_1CA27FE30()
{
  return Com_Apple_Siri_Product_Proto_NLState.decodeMessage<A>(decoder:)();
}

uint64_t sub_1CA27FE48()
{
  return Com_Apple_Siri_Product_Proto_NLState.traverse<A>(visitor:)();
}

uint64_t sub_1CA27FE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA280E90(&qword_1EA5DFA90, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
  return MEMORY[0x1F4157F38](a1, a2, v4);
}

uint64_t sub_1CA27FEDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1C9F3C110(&qword_1EA5D3E00, (uint64_t)qword_1EA5DF9D8, a1);
}

uint64_t sub_1CA27FF00(uint64_t a1)
{
  uint64_t v2 = sub_1CA280E90(&qword_1EA5CF680, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
  return MEMORY[0x1F4158018](a1, v2);
}

uint64_t sub_1CA27FF6C()
{
  sub_1CA280E90(&qword_1EA5CF680, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
  return sub_1CA3AFC40();
}

uint64_t _s12SiriOntology010Com_Apple_A38_Product_Proto_MultiCardinalStateComboV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (sub_1CA3B0560() & 1) != 0))
  {
    if (sub_1C9F4DF34(*((void *)a1 + 2), *((void *)a2 + 2)))
    {
      uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, &a1[*(int *)(v13 + 24)], v4);
      v14(v8, &a2[*(int *)(v13 + 24)], v4);
      sub_1CA280E90(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
      char v12 = sub_1CA3AFDD0();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A33_Product_Proto_MultiCardinalStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (sub_1C9F4ED7C(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(0);
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 24), v4);
    v12(v8, a2 + *(int *)(v11 + 24), v4);
    sub_1CA280E90(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
    char v13 = sub_1CA3AFDD0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1CA280390(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = sub_1CA3AFA20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (a3(*(void *)a1, *(void *)a2))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, &a1[*(int *)(v15 + 20)], v8);
    v16(v12, &a2[*(int *)(v15 + 20)], v8);
    sub_1CA280E90(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
    char v17 = sub_1CA3AFDD0();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A28_Product_Proto_StatefulValueV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v38 - v7;
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v45 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D6A58);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  char v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v38 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v38 - v21;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v23 = 0, (sub_1CA3B0560() & 1) != 0))
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      || (char v23 = 0, (sub_1CA3B0560() & 1) != 0))
    {
      if (*(double *)(a1 + 32) == *(double *)(a2 + 32)
        && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
        && (sub_1C9F4B310(*(void **)(a1 + 48), *(void **)(a2 + 48)) & 1) != 0
        && (sub_1C9F4B310(*(void **)(a1 + 56), *(void **)(a2 + 56)) & 1) != 0)
      {
        uint64_t v24 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue(0);
        sub_1CA27AEF0(a1 + *(int *)(v24 + 40), (uint64_t)v22);
        uint64_t v39 = v24;
        sub_1CA27AEF0(a2 + *(int *)(v24 + 40), (uint64_t)v20);
        uint64_t v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
        sub_1CA27AEF0((uint64_t)v22, (uint64_t)v13);
        uint64_t v40 = v25;
        sub_1CA27AEF0((uint64_t)v20, v25);
        int v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
        if (v26((uint64_t)v13, 1, v8) == 1)
        {
          sub_1C9F40EEC((uint64_t)v20, &qword_1EA5CF8B0);
          sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF8B0);
          if (v26(v40, 1, v8) == 1)
          {
            sub_1C9F40EEC((uint64_t)v13, &qword_1EA5CF8B0);
LABEL_20:
            uint64_t v29 = v39;
            uint64_t v30 = a1 + *(int *)(v39 + 44);
            uint64_t v32 = v43;
            uint64_t v31 = v44;
            uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
            uint64_t v34 = v41;
            v33(v41, v30, v44);
            uint64_t v35 = a2 + *(int *)(v29 + 44);
            uint64_t v36 = v42;
            v33(v42, v35, v31);
            sub_1CA280E90(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
            char v23 = sub_1CA3AFDD0();
            uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
            v37(v36, v31);
            v37(v34, v31);
            return v23 & 1;
          }
        }
        else
        {
          sub_1CA27AEF0((uint64_t)v13, (uint64_t)v17);
          if (v26(v40, 1, v8) != 1)
          {
            sub_1CA2843E4(v40, (uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
            char v28 = _s12SiriOntology010Com_Apple_A28_Product_Proto_StatefulValueV06OneOf_H0O2eeoiySbAE_AEtFZ_0((uint64_t)v17, (uint64_t)v10);
            sub_1CA27BD20((uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
            sub_1C9F40EEC((uint64_t)v20, &qword_1EA5CF8B0);
            sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF8B0);
            sub_1CA27BD20((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
            sub_1C9F40EEC((uint64_t)v13, &qword_1EA5CF8B0);
            if (v28) {
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          sub_1C9F40EEC((uint64_t)v20, &qword_1EA5CF8B0);
          sub_1C9F40EEC((uint64_t)v22, &qword_1EA5CF8B0);
          sub_1CA27BD20((uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
        }
        sub_1C9F40EEC((uint64_t)v13, &qword_1EA5D6A58);
      }
LABEL_17:
      char v23 = 0;
    }
  }
  return v23 & 1;
}

uint64_t _s12SiriOntology010Com_Apple_A28_Product_Proto_StatefulValueV06OneOf_H0O2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (uint64_t *)((char *)&v24 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5D6A50);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = &v16[*(int *)(v14 + 56)];
  sub_1CA2844B4(a1, (uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  sub_1CA2844B4(a2, (uint64_t)v17, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1CA2844B4((uint64_t)v16, (uint64_t)v12, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    uint64_t v20 = *v12;
    uint64_t v19 = v12[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      if (v20 == *(void *)v17 && v19 == *((void *)v17 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v22 = sub_1CA3B0560();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          sub_1CA27BD20((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
          goto LABEL_8;
        }
      }
      sub_1CA27BD20((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
      char v18 = 1;
      return v18 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1C9F40EEC((uint64_t)v16, &qword_1EA5D6A50);
LABEL_8:
    char v18 = 0;
    return v18 & 1;
  }
  sub_1CA2844B4((uint64_t)v16, (uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1CA27BD20((uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
    goto LABEL_7;
  }
  sub_1CA2843E4((uint64_t)v17, (uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  char v18 = static Com_Apple_Siri_Product_Proto_SemanticValue.== infix(_:_:)(v10, v6);
  sub_1CA27BD20((uint64_t)v6, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1CA27BD20((uint64_t)v10, type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue);
  sub_1CA27BD20((uint64_t)v16, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
  return v18 & 1;
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF900);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DFA70);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5DFA80);
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(uint64_t a1)
{
  return sub_1C9F2C9B4(a1, (uint64_t *)&unk_1EA5CF9C0);
}

uint64_t sub_1CA280E90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s12SiriOntology010Com_Apple_A22_Product_Proto_NLStateV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_1CA3AFA20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (sub_1CA3B0560() & 1) != 0))
  {
    if ((sub_1C9F56688(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) != 0
      && (sub_1C9F5788C(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) != 0)
    {
      uint64_t v13 = type metadata accessor for Com_Apple_Siri_Product_Proto_NLState(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, &a1[*(int *)(v13 + 28)], v4);
      v14(v8, &a2[*(int *)(v13 + 28)], v4);
      sub_1CA280E90(&qword_1EA5D6948, MEMORY[0x1E4FA3B78]);
      char v12 = sub_1CA3AFDD0();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t sub_1CA2810C4()
{
  return sub_1CA280E90(&qword_1EA5CF8C8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1CA28110C()
{
  return sub_1CA280E90(&qword_1EA5CF8C0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1CA281154()
{
  return sub_1CA280E90(&qword_1EA5DF9F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1CA28119C()
{
  return sub_1CA280E90(&qword_1EA5DFA30, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue);
}

uint64_t sub_1CA2811E4()
{
  return sub_1CA280E90(&qword_1EA5CF8F8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1CA28122C()
{
  return sub_1CA280E90(&qword_1EA5CF8E0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1CA281274()
{
  return sub_1CA280E90(&qword_1EA5CF8E8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1CA2812BC()
{
  return sub_1CA280E90(&qword_1EA5CF8F0, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValues);
}

uint64_t sub_1CA281304()
{
  return sub_1CA280E90(&qword_1EA5DFA38, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1CA28134C()
{
  return sub_1CA280E90(&qword_1EA5DFA00, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1CA281394()
{
  return sub_1CA280E90(&qword_1EA5DF9F8, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1CA2813DC()
{
  return sub_1CA280E90(&qword_1EA5DFA40, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalState);
}

uint64_t sub_1CA281424()
{
  return sub_1CA280E90(&qword_1EA5DFA48, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA28146C()
{
  return sub_1CA280E90(&qword_1EA5DFA10, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA2814B4()
{
  return sub_1CA280E90(&qword_1EA5DFA08, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA2814FC()
{
  return sub_1CA280E90(&qword_1EA5DFA50, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo);
}

uint64_t sub_1CA281544()
{
  return sub_1CA280E90(&qword_1EA5DFA58, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1CA28158C()
{
  return sub_1CA280E90(&qword_1EA5DFA20, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1CA2815D4()
{
  return sub_1CA280E90(&qword_1EA5DFA18, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1CA28161C()
{
  return sub_1CA280E90(&qword_1EA5DFA60, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos);
}

uint64_t sub_1CA281664()
{
  return sub_1CA280E90(&qword_1EA5CF688, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1CA2816AC()
{
  return sub_1CA280E90(&qword_1EA5CF680, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1CA2816F4()
{
  return sub_1CA280E90(&qword_1EA5DFA28, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1CA28173C()
{
  return sub_1CA280E90(&qword_1EA5DFA68, (void (*)(uint64_t))type metadata accessor for Com_Apple_Siri_Product_Proto_NLState);
}

uint64_t sub_1CA28178C@<X0>(void *a1@<X8>)
{
  return Com_Apple_Siri_Product_Proto_StatefulValue.semanticValue.getter(a1);
}

void *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v8 = a2[7];
    uint64_t v9 = *(int *)(a3 + 40);
    __dst = (void *)(a1 + v9);
    uint64_t v32 = (uint64_t *)((char *)a2 + v9);
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
    uint64_t v11 = *(void *)(v10 - 8);
    char v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v32, 1, v10))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
      memcpy(__dst, v32, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v11;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v16 = v32[1];
      void *__dst = *v32;
      __dst[1] = v16;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v28 = v10;
        uint64_t v17 = v32[3];
        __dst[2] = v32[2];
        __dst[3] = v17;
        uint64_t v18 = v32[5];
        __dst[4] = v32[4];
        __dst[5] = v18;
        __dst[6] = v32[6];
        uint64_t v19 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        int v27 = (char *)__dst + v19;
        uint64_t v33 = (char *)v32 + v19;
        uint64_t v20 = sub_1CA3AFA20();
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v10 = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21(v27, v33, v20);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v22 = *(int *)(a3 + 44);
    char v23 = (char *)v4 + v22;
    uint64_t v24 = (uint64_t)a2 + v22;
    uint64_t v25 = sub_1CA3AFA20();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  }
  return v4;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v4 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v8 = sub_1CA3AFA20();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 44);
  uint64_t v10 = sub_1CA3AFA20();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  return v11(v9, v10);
}

uint64_t initializeWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 40);
  __dst = (void *)(a1 + v8);
  uint64_t v30 = (void *)(a2 + v8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v30, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
    memcpy(__dst, v30, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v27 = v10;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v14 = v30[1];
    void *__dst = *v30;
    __dst[1] = v14;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v26 = v9;
      uint64_t v15 = v30[3];
      __dst[2] = v30[2];
      __dst[3] = v15;
      uint64_t v16 = v30[5];
      __dst[4] = v30[4];
      __dst[5] = v16;
      __dst[6] = v30[6];
      uint64_t v17 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v25 = (char *)__dst + v17;
      uint64_t v31 = (char *)v30 + v17;
      uint64_t v18 = sub_1CA3AFA20();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v9 = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(v25, v31, v18);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  return a1;
}

uint64_t assignWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *uint64_t v7 = *v8;
      v7[1] = v8[1];
      if (EnumCaseMultiPayload == 1)
      {
        long long v7[2] = v8[2];
        v7[3] = v8[3];
        v7[4] = v8[4];
        void v7[5] = v8[5];
        v7[6] = v8[6];
        uint64_t v15 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        uint64_t v27 = (char *)v8 + v15;
        uint64_t v29 = (char *)v7 + v15;
        uint64_t v16 = sub_1CA3AFA20();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26(v29, v27, v16);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
    memcpy(v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    sub_1CA27BD20((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_1CA27BD20((uint64_t)v7, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    int v18 = swift_getEnumCaseMultiPayload();
    *uint64_t v7 = *v8;
    v7[1] = v8[1];
    if (v18 == 1)
    {
      long long v7[2] = v8[2];
      v7[3] = v8[3];
      v7[4] = v8[4];
      void v7[5] = v8[5];
      v7[6] = v8[6];
      uint64_t v19 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v30 = (char *)v8 + v19;
      uint64_t v31 = (char *)v7 + v19;
      uint64_t v20 = sub_1CA3AFA20();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v31, v30, v20);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v21 = *(int *)(a3 + 44);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v13 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v13;
      long long v8[2] = v9[2];
      *((void *)v8 + 6) = *((void *)v9 + 6);
      uint64_t v14 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v15 = (char *)v8 + v14;
      uint64_t v16 = (char *)v9 + v14;
      uint64_t v17 = sub_1CA3AFA20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(v11 + 64));
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v18 = *(int *)(a3 + 44);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(0);
  uint64_t v12 = *(void *)(v11 - 8);
  long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_1CA27BD20(v9, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v22 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *(_OWORD *)(v9 + 16) = v22;
        *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
        *(void *)(v9 + 48) = *(void *)(v10 + 48);
        uint64_t v23 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
        uint64_t v24 = v9 + v23;
        uint64_t v25 = v10 + v23;
        uint64_t v26 = sub_1CA3AFA20();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v21 = *(void *)(v12 + 64);
      goto LABEL_8;
    }
    sub_1CA27BD20(v9, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
LABEL_7:
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0) - 8) + 64);
LABEL_8:
    memcpy((void *)v9, (const void *)v10, v21);
    goto LABEL_14;
  }
  if (v15) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v16 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v16;
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
    *(void *)(v9 + 48) = *(void *)(v10 + 48);
    uint64_t v17 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    uint64_t v18 = v9 + v17;
    uint64_t v19 = v10 + v17;
    uint64_t v20 = sub_1CA3AFA20();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)v9, (const void *)v10, *(void *)(v12 + 64));
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_14:
  uint64_t v27 = *(int *)(a3 + 44);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA2827EC);
}

uint64_t sub_1CA2827EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1CA3AFA20();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA282930);
}

uint64_t sub_1CA282930(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA5CF8B0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1CA3AFA20();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 44);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1CA282A60()
{
  sub_1CA282B5C();
  if (v0 <= 0x3F)
  {
    sub_1CA3AFA20();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1CA282B5C()
{
  if (!qword_1EA5CF8B8)
  {
    type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(255);
    unint64_t v0 = sub_1CA3B0170();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA5CF8B8);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      uint64_t v9 = a2[5];
      a1[4] = a2[4];
      a1[5] = v9;
      a1[6] = a2[6];
      uint64_t v10 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v16 = (char *)a2 + v10;
      uint64_t v12 = sub_1CA3AFA20();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v11, v16, v12);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = a1 + *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    uint64_t v5 = sub_1CA3AFA20();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  return result;
}

void *initializeWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[6] = a2[6];
    uint64_t v8 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v13 = (char *)a2 + v8;
    uint64_t v10 = sub_1CA3AFA20();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v13, v10);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1CA27BD20((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      uint64_t v5 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v10 = (char *)a2 + v5;
      uint64_t v7 = sub_1CA3AFA20();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v6, v10, v7);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    a1[2] = a2[2];
    *((void *)a1 + 6) = *((void *)a2 + 6);
    uint64_t v7 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1CA3AFA20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1CA27BD20((uint64_t)a1, type metadata accessor for Com_Apple_Siri_Product_Proto_StatefulValue.OneOf_Value);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      *((void *)a1 + 6) = *((void *)a2 + 6);
      uint64_t v7 = *(int *)(type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(0) + 32);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_1CA3AFA20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1CA283244()
{
  uint64_t result = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_94Tm_0);
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_StatefulValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_95Tm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 24);
    long long v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_1CA3AFA20();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_11Tm);
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA283678);
}

uint64_t sub_1CA283678(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1CA3AFA20();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1CA283720()
{
  return sub_1CA283CB4();
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_1CA3AFA20();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1CA3AFA20();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1CA3AFA20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA283B38);
}

uint64_t __swift_get_extra_inhabitant_index_11Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1CA3AFA20();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA283C00);
}

uint64_t sub_1CA283C00(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1CA3AFA20();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1CA283CA8()
{
  return sub_1CA283CB4();
}

uint64_t sub_1CA283CB4()
{
  uint64_t result = sub_1CA3AFA20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_94Tm_1);
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_MultiCardinalStateCombos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_95Tm_1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Com_Apple_Siri_Product_Proto_NLState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1CA3AFA20();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for Com_Apple_Siri_Product_Proto_NLState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_1CA3AFA20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Com_Apple_Siri_Product_Proto_NLState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for Com_Apple_Siri_Product_Proto_NLState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Com_Apple_Siri_Product_Proto_NLState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for Com_Apple_Siri_Product_Proto_NLState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1CA3AFA20();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_NLState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1CA2841D0);
}

uint64_t sub_1CA2841D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1CA3AFA20();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Com_Apple_Siri_Product_Proto_NLState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1CA284294);
}

uint64_t sub_1CA284294(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1CA3AFA20();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1CA28433C()
{
  uint64_t result = sub_1CA3AFA20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CA2843E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CA28444C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBCA0338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CA2844B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t Edge.kind.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  *a1 = *(void *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Edge.fromIndex.getter()
{
  return *(void *)v0;
}

uint64_t Edge.toIndex.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Edge.enumeration.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t Edge.name.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  *a1 = v1[3];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Edge.hash(into:)()
{
  return Name.hash(into:)();
}

uint64_t Edge.hashValue.getter()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA2846E8()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA284788()
{
  return Name.hash(into:)();
}

uint64_t sub_1CA284810()
{
  return sub_1CA3B0660();
}

uint64_t _s12SiriOntology4EdgeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    uint64_t v5 = *(void *)(a2 + 56);
    long long v6 = *(_OWORD *)(a2 + 40);
    long long v7 = *(_OWORD *)(a2 + 24);
    uint64_t v8 = *(void *)(a1 + 56);
    long long v9 = *(_OWORD *)(a1 + 40);
    v13[0] = *(_OWORD *)(a1 + 24);
    v13[1] = v9;
    uint64_t v14 = v8;
    v11[0] = v7;
    v11[1] = v6;
    uint64_t v12 = v5;
    char v4 = _s12SiriOntology4NameV2eeoiySbAC_ACtFZ_0(v13, v11);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

unint64_t sub_1CA284934()
{
  unint64_t result = qword_1EA5DFAC0;
  if (!qword_1EA5DFAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DFAC0);
  }
  return result;
}

uint64_t destroy for Edge()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Edge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Edge(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Edge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Edge()
{
  return &type metadata for Edge;
}

uint64_t AddressOntologyNode.CrossStreetJoin.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1CA3B0390();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static AddressOntologyNode.CrossStreetJoin.allCases.getter()
{
  return &unk_1F2460738;
}

uint64_t AddressOntologyNode.CrossStreetJoin.rawValue.getter()
{
  return 0x72745373736F7263;
}

uint64_t sub_1CA284C6C()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA284CCC()
{
  return sub_1CA3AFE50();
}

uint64_t sub_1CA284CF0()
{
  return sub_1CA3B0660();
}

uint64_t sub_1CA284D4C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1CA3B0390();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CA284DA0(void *a1@<X8>)
{
  *a1 = 0x72745373736F7263;
  a1[1] = 0xEF6E696F4A746565;
}

void sub_1CA284DC8(void *a1@<X8>)
{
  *a1 = &unk_1F245FBF0;
}

unint64_t sub_1CA284DDC()
{
  unint64_t result = qword_1EA5DFAC8;
  if (!qword_1EA5DFAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DFAC8);
  }
  return result;
}

unint64_t sub_1CA284E30(uint64_t a1)
{
  unint64_t result = sub_1CA284E58();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1CA284E58()
{
  unint64_t result = qword_1EA5DFAD0;
  if (!qword_1EA5DFAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DFAD0);
  }
  return result;
}

unint64_t sub_1CA284EB0()
{
  unint64_t result = qword_1EA5DFAD8;
  if (!qword_1EA5DFAD8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA5DFAE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DFAD8);
  }
  return result;
}

unint64_t sub_1CA284F0C(uint64_t a1)
{
  unint64_t result = sub_1CA284F34();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1CA284F34()
{
  unint64_t result = qword_1EA5DFAE8;
  if (!qword_1EA5DFAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA5DFAE8);
  }
  return result;
}

unsigned char *_s15CrossStreetJoinOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1CA285024);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AddressOntologyNode.CrossStreetJoin()
{
  return &type metadata for AddressOntologyNode.CrossStreetJoin;
}

void siri::ontology::CompactIdToSetMap::initWithIdToSetMap(std::vector<int> *a1, void *a2)
{
  unsigned int v4 = (uint64_t *)a2[2];
  if (v4)
  {
    int v5 = 0;
    int v6 = 0;
    do
    {
      if (v6 <= *((_DWORD *)v4 + 4)) {
        int v6 = *((_DWORD *)v4 + 4);
      }
      v5 += *((_DWORD *)v4 + 12);
      unsigned int v4 = (uint64_t *)*v4;
    }
    while (v4);
    std::vector<int>::size_type v7 = v6 + 1;
    unint64_t v8 = v5;
  }
  else
  {
    unint64_t v8 = 0;
    std::vector<int>::size_type v7 = 1;
  }
  std::vector<int>::value_type __x = 0;
  std::vector<int>::resize(a1 + 1, v7, &__x);
  std::vector<int>::pointer begin = a1->__begin_;
  std::vector<int>::pointer end = a1->__end_;
  unint64_t v11 = end - a1->__begin_;
  if (v8 > v11)
  {
    unint64_t v12 = v8 - v11;
    value = a1->__end_cap_.__value_;
    if (v8 - v11 > value - end)
    {
      if (v8 >> 62) {
        goto LABEL_89;
      }
      uint64_t v14 = (char *)value - (char *)begin;
      uint64_t v15 = v14 >> 1;
      if (v14 >> 1 <= v8) {
        uint64_t v15 = v8;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v16);
      std::vector<int>::pointer v18 = a1->__begin_;
      std::vector<int>::pointer v19 = a1->__end_;
      uint64_t v20 = &v17[4 * v11];
      long long v22 = (int *)&v17[4 * v21];
      bzero(v20, 4 * v12);
      uint64_t v23 = (int *)&v20[4 * v12];
      while (v19 != v18)
      {
        int v24 = *--v19;
        *((_DWORD *)v20 - 1) = v24;
        v20 -= 4;
      }
      a1->__begin_ = (std::vector<int>::pointer)v20;
      a1->__end_ = v23;
      a1->__end_cap_.__value_ = v22;
      if (v18) {
        operator delete(v18);
      }
      goto LABEL_25;
    }
    bzero(a1->__end_, 4 * v12);
    uint64_t v25 = &end[v12];
    goto LABEL_22;
  }
  if (v8 < v11)
  {
    uint64_t v25 = &begin[v8];
LABEL_22:
    a1->__end_ = v25;
  }
LABEL_25:
  std::vector<int>::pointer v27 = a1[1].__begin_;
  std::vector<int>::pointer v26 = a1[1].__end_;
  if (v26 == v27) {
    return;
  }
  unint64_t v28 = 0;
  do
  {
    std::vector<int>::pointer v29 = a1->__end_;
    v27[v28] = (unint64_t)((char *)v29 - (char *)a1->__begin_) >> 2;
    int8x8_t v30 = (int8x8_t)a2[1];
    if (!*(void *)&v30) {
      goto LABEL_87;
    }
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      unint64_t v32 = v28;
      if (*(void *)&v30 <= v28) {
        unint64_t v32 = v28 % *(void *)&v30;
      }
    }
    else
    {
      unint64_t v32 = (*(void *)&v30 - 1) & v28;
    }
    uint64_t v33 = *(uint64_t ***)(*a2 + 8 * v32);
    if (!v33) {
      goto LABEL_87;
    }
    uint64_t v34 = *v33;
    if (!v34) {
      goto LABEL_87;
    }
    while (1)
    {
      unint64_t v35 = v34[1];
      if (v35 == v28) {
        break;
      }
      if (v31.u32[0] > 1uLL)
      {
        if (v35 >= *(void *)&v30) {
          v35 %= *(void *)&v30;
        }
      }
      else
      {
        v35 &= *(void *)&v30 - 1;
      }
      if (v35 != v32) {
        goto LABEL_87;
      }
LABEL_42:
      uint64_t v34 = (uint64_t *)*v34;
      if (!v34) {
        goto LABEL_87;
      }
    }
    if (v28 != *((_DWORD *)v34 + 4)) {
      goto LABEL_42;
    }
    std::vector<int>::pointer v36 = a1->__begin_;
    uint64_t v37 = (char *)v29 - (char *)a1->__begin_;
    uint64_t v38 = (uint64_t *)v34[5];
    if (!v38) {
      goto LABEL_86;
    }
    uint64_t v39 = -1;
    uint64_t v40 = 2;
    uint64_t v41 = 4;
    uint64_t v42 = v38;
    do
    {
      uint64_t v43 = v39;
      uint64_t v44 = v41;
      unint64_t v45 = v40;
      uint64_t v42 = (void *)*v42;
      ++v39;
      v41 += 4;
      ++v40;
    }
    while (v42);
    uint64_t v46 = v43 + 2;
    std::vector<int>::pointer v47 = (std::vector<int>::pointer)((char *)v36 + v37);
    uint64_t v48 = a1->__end_cap_.__value_;
    if (v39 >= v48 - v29)
    {
      unint64_t v53 = (v37 >> 2) + v46;
      if (!(v53 >> 62))
      {
        uint64_t v54 = (char *)v48 - (char *)v36;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v55);
        }
        else
        {
          int v57 = 0;
          uint64_t v56 = 0;
        }
        int v60 = &v57[4 * (v37 >> 2)];
        uint64_t v61 = &v60[4 * v46];
        int v62 = v60;
        do
        {
          *(_DWORD *)int v62 = *((_DWORD *)v38 + 4);
          v62 += 4;
          uint64_t v38 = (uint64_t *)*v38;
          v44 -= 4;
        }
        while (v44);
        std::vector<int>::pointer v63 = a1->__begin_;
        if (a1->__begin_ != v47)
        {
          std::vector<int>::pointer v64 = v47;
          do
          {
            int v65 = *--v64;
            *((_DWORD *)v60 - 1) = v65;
            v60 -= 4;
          }
          while (v64 != v63);
        }
        std::vector<int>::pointer v66 = a1->__end_;
        int64_t v67 = (char *)v66 - (char *)v47;
        if (v66 != v47)
        {
          uint64_t v68 = v56;
          memmove(v61, v47, (char *)v66 - (char *)v47);
          uint64_t v56 = v68;
        }
        std::vector<int>::pointer v69 = a1->__begin_;
        a1->__begin_ = (std::vector<int>::pointer)v60;
        a1->__end_ = (std::vector<int>::pointer)&v61[v67];
        a1->__end_cap_.__value_ = (int *)&v57[4 * v56];
        if (v69) {
          operator delete(v69);
        }
        goto LABEL_86;
      }
LABEL_89:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = v38;
    do
    {
      uint64_t v49 = (uint64_t *)*v49;
      --v45;
    }
    while (v45 > 1);
    uint64_t v50 = (char *)v29 - (char *)v47;
    uint64_t v51 = v29 - v47;
    if (v51 > v39)
    {
      uint64_t v52 = v29;
      goto LABEL_79;
    }
    uint64_t v49 = v38;
    if (v50 >= 1)
    {
      unint64_t v58 = v51 + 1;
      uint64_t v49 = v38;
      do
      {
        uint64_t v49 = (uint64_t *)*v49;
        --v58;
      }
      while (v58 > 1);
    }
    if (v49)
    {
      char v59 = v49;
      uint64_t v52 = v29;
      do
      {
        *v52++ = *((_DWORD *)v59 + 4);
        char v59 = (uint64_t *)*v59;
      }
      while (v59);
    }
    else
    {
      uint64_t v52 = v29;
    }
    a1->__end_ = v52;
    if (v50 >= 1)
    {
LABEL_79:
      std::vector<int>::pointer v70 = &v52[-v46];
      int v71 = v52;
      while (v70 < v29)
      {
        int v72 = *v70++;
        *v71++ = v72;
      }
      int v73 = (char *)&v47[v46];
      a1->__end_ = v71;
      if (v52 != (int *)v73) {
        memmove(&v52[-(((char *)v52 - v73) >> 2)], v47, (char *)v52 - v73);
      }
      for (; v38 != v49; uint64_t v38 = (uint64_t *)*v38)
        *v47++ = *((_DWORD *)v38 + 4);
    }
LABEL_86:
    std::__sort<std::__less<int,int> &,int *>();
    std::vector<int>::pointer v27 = a1[1].__begin_;
    std::vector<int>::pointer v26 = a1[1].__end_;
LABEL_87:
    ++v28;
  }
  while (v28 < v26 - v27);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer begin = this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  std::vector<int>::size_type v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      uint64_t v23 = &end[__sz - v7];
      std::vector<int>::size_type v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = (char *)value - (char *)begin;
      std::vector<int>::size_type v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz) {
        std::vector<int>::size_type v11 = __sz;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v12);
      uint64_t v15 = (int *)&v13[4 * v7];
      unint64_t v16 = (int *)&v13[4 * __sz];
      std::vector<int>::size_type v17 = 4 * __sz - 4 * v7;
      std::vector<int>::pointer v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      std::vector<int>::pointer v19 = (int *)&v13[4 * v14];
      std::vector<int>::pointer v20 = this->__begin_;
      for (std::vector<int>::pointer i = this->__end_; i != v20; --i)
      {
        int v22 = *(i - 1);
        *--uint64_t v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E65A6680, MEMORY[0x1E4FBA1C8]);
}

void sub_1CA2856AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t siri::ontology::CompactIdToSetMap::getSetForKey(siri::ontology::CompactIdToSetMap *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (*((void *)this + 4) - v2) >> 2;
  if ((int)v3 <= (int)a2) {
    return 0;
  }
  if (v3 <= a2) {
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)this + 4 * *(int *)(v2 + 4 * a2);
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E65A6688, MEMORY[0x1E4FBA1D0]);
}

void sub_1CA2857CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

siri::ontology::UsoGraph *std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](siri::ontology::UsoGraph **a1, siri::ontology::UsoGraph *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    siri::ontology::UsoGraph::~UsoGraph(result);
    JUMPOUT(0x1CB796510);
  }
  return result;
}

uint64_t siri::ontology::OntologyNodeName::accept(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  return (**a2)(a2, a1);
}

void siri::ontology::OntologyNodeName::~OntologyNodeName(siri::ontology::OntologyNodeName *this)
{
  *(void *)this = &unk_1F246D418;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 5);
  *(void *)this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1CB796510);
}

{
  *(void *)this = &unk_1F246D418;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 5);
  *(void *)this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t *siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    MEMORY[0x1CB7964F0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    MEMORY[0x1CB7964F0](v3, 0x1000C8000313F17);
  }
  return a1;
}

uint64_t siri::ontology::OntologyVerbName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1);
}

void siri::ontology::OntologyVerbName::~OntologyVerbName(siri::ontology::OntologyVerbName *this)
{
  *(void *)this = &unk_1F246D200;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 8);
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  *(void *)this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1CB796510);
}

{
  *(void *)this = &unk_1F246D200;
  siri::ontology::OntologyUnitMetaData<2ul,4ul>::~OntologyUnitMetaData((uint64_t *)this + 8);
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  *(void *)this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t siri::ontology::OntologyTaskName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

void siri::ontology::OntologyTaskName::~OntologyTaskName(void **this)
{
  *this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1CB796510);
}

{
  *this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t siri::ontology::OntologyEdgeName::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
}

void siri::ontology::OntologyEdgeName::~OntologyEdgeName(void **this)
{
  *this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1CB796510);
}

{
  *this = &unk_1F246D440;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t siri::ontology::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  int v6 = (const void **)(a1 + 8);
  long long v9 = *(unsigned __int8 **)(a2 + 8);
  std::vector<int>::size_type v7 = (unsigned __int8 *)(a2 + 8);
  unint64_t v8 = v9;
  if (v5 < 0) {
    std::vector<int>::size_type v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    int v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  uint64_t result;

  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0) {
    int v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    int v5 = *(void *)(a1 + 16);
  }
  int v6 = *(unsigned __int8 *)(a2 + 31);
  std::vector<int>::size_type v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    int v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  unint64_t v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    long long v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    long long v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      unint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  if ((v10 & 0x80u) == 0) {
    int v11 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    int v11 = *(void *)(a1 + 48);
  }
  int v12 = *(unsigned __int8 *)(a2 + 63);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    int v12 = *(void *)(a2 + 48);
  }
  if (v11 != v12) {
    return 0;
  }
  int v14 = (const void **)(a1 + 40);
  std::vector<int>::size_type v17 = *(unsigned __int8 **)(a2 + 40);
  BOOL v16 = (unsigned __int8 *)(a2 + 40);
  uint64_t v15 = v17;
  if (v13 >= 0) {
    std::vector<int>::pointer v18 = v16;
  }
  else {
    std::vector<int>::pointer v18 = v15;
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*v14, v18, *(void *)(a1 + 48)) == 0;
  }
  if (!*(unsigned char *)(a1 + 63)) {
    return 1;
  }
  std::vector<int>::pointer v19 = v10 - 1;
  do
  {
    uint64_t v21 = *(unsigned __int8 *)v14;
    int v14 = (const void **)((char *)v14 + 1);
    std::vector<int>::pointer v20 = v21;
    uint64_t v23 = *v18++;
    int v22 = v23;
    uint64_t v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

BOOL siri::ontology::operator<(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  int v3 = *(_DWORD *)(a2 + 36);
  if (v2 != v3) {
    return v2 < v3;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v4 = a2 + 8;
  uint64_t v5 = v6;
  int v7 = *(char *)(v4 + 23);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v8 = a1 + 8;
  uint64_t v9 = v10;
  int v11 = *(char *)(v8 + 23);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    size_t v12 = *(void *)(v8 + 8);
  }
  if (v11 < 0) {
    uint64_t v8 = v9;
  }
  if (v7 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    size_t v13 = *(void *)(v4 + 8);
  }
  if (v7 < 0) {
    uint64_t v4 = v5;
  }
  if (v13 >= v12) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v13;
  }
  int v15 = memcmp((const void *)v8, (const void *)v4, v14);
  if (v15) {
    return v15 < 0;
  }
  else {
    return v12 < v13;
  }
}

uint64_t siri::ontology::operator!=(uint64_t a1, uint64_t a2)
{
  return siri::ontology::operator==(a1, a2) ^ 1;
}

BOOL siri::ontology::OntologyUnitName::isType(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 32) == a2;
}

BOOL siri::ontology::OntologyNodeName::existArgumentToEntity(siri::ontology::OntologyNodeName *this, int a2, int a3)
{
  int v3 = (_DWORD *)*((void *)this + 5);
  int v4 = *((_DWORD *)this + 15);
  uint64_t v5 = *((int *)this + 14);
  uint64_t v6 = &v3[2 * v5];
  if (v5)
  {
    unint64_t v7 = *((int *)this + 14);
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v3[2 * (v7 >> 1)];
      uint64_t v11 = *v9;
      uint64_t v10 = v9 + 1;
      v7 += ~(v7 >> 1);
      if ((int)v11 < a2) {
        int v3 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
    if (v3 != v6 && *v3 == a2) {
      return v3[1] == a3;
    }
  }
  if (v4 == v5) {
    return 0;
  }
  unint64_t v12 = v4 - (int)v5;
  size_t v13 = &v6[2 * v12];
  int v3 = v6;
  do
  {
    unint64_t v14 = v12 >> 1;
    int v15 = &v3[2 * (v12 >> 1)];
    uint64_t v17 = *v15;
    BOOL v16 = v15 + 1;
    v12 += ~(v12 >> 1);
    if ((int)v17 < a2) {
      int v3 = v16;
    }
    else {
      unint64_t v12 = v14;
    }
  }
  while (v12);
  return v3 != v13 && *v3 == a2 && v3[1] == a3;
}

BOOL siri::ontology::OntologyNodeName::existSetArgumentToEntity(siri::ontology::OntologyNodeName *this, int a2, int a3)
{
  uint64_t v3 = *((int *)this + 14);
  int v4 = *((_DWORD *)this + 15) - v3;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (_DWORD *)(*((void *)this + 5) + 8 * v3);
  unint64_t v6 = v4;
  unint64_t v7 = &v5[2 * v4];
  do
  {
    unint64_t v8 = v6 >> 1;
    uint64_t v9 = &v5[2 * (v6 >> 1)];
    uint64_t v11 = *v9;
    uint64_t v10 = v9 + 1;
    v6 += ~(v6 >> 1);
    if ((int)v11 < a2) {
      uint64_t v5 = v10;
    }
    else {
      unint64_t v6 = v8;
    }
  }
  while (v6);
  return v5 != v7 && *v5 == a2 && v5[1] == a3;
}

BOOL siri::ontology::OntologyNodeName::hasArgument(siri::ontology::OntologyNodeName *this, int a2)
{
  int v2 = (_DWORD *)*((void *)this + 5);
  unint64_t v3 = *((int *)this + 14);
  int v4 = &v2[2 * v3];
  if (!v3) {
    goto LABEL_8;
  }
  do
  {
    unint64_t v5 = v3 >> 1;
    unint64_t v6 = &v2[2 * (v3 >> 1)];
    uint64_t v8 = *v6;
    unint64_t v7 = v6 + 1;
    v3 += ~(v3 >> 1);
    if ((int)v8 < a2) {
      int v2 = v7;
    }
    else {
      unint64_t v3 = v5;
    }
  }
  while (v3);
  if (v2 == v4 || *v2 != a2) {
LABEL_8:
  }
    int v2 = v4;
  return v2 != v4;
}

BOOL siri::ontology::OntologyNodeName::hasSetArgument(siri::ontology::OntologyNodeName *this, int a2)
{
  uint64_t v2 = *((int *)this + 14);
  unint64_t v3 = (_DWORD *)(*((void *)this + 5) + 8 * v2);
  int v4 = *((_DWORD *)this + 15) - v2;
  unint64_t v5 = &v3[2 * v4];
  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v6 = v4;
  do
  {
    unint64_t v7 = v6 >> 1;
    uint64_t v8 = &v3[2 * (v6 >> 1)];
    uint64_t v10 = *v8;
    uint64_t v9 = v8 + 1;
    v6 += ~(v6 >> 1);
    if ((int)v10 < a2) {
      unint64_t v3 = v9;
    }
    else {
      unint64_t v6 = v7;
    }
  }
  while (v6);
  if (v3 == v5 || *v3 != a2) {
LABEL_9:
  }
    unint64_t v3 = v5;
  return v3 != v5;
}

BOOL siri::ontology::OntologyNodeName::hasVerb(siri::ontology::OntologyNodeName *this, int a2)
{
  unint64_t v2 = *((int *)this + 16);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = (_DWORD *)*((void *)this + 6);
  int v4 = &v3[v2];
  do
  {
    unint64_t v5 = v2 >> 1;
    unint64_t v6 = &v3[v2 >> 1];
    int v8 = *v6;
    unint64_t v7 = v6 + 1;
    v2 += ~(v2 >> 1);
    if (v8 < a2) {
      unint64_t v3 = v7;
    }
    else {
      unint64_t v2 = v5;
    }
  }
  while (v2);
  return v3 != v4 && *v3 <= a2;
}

uint64_t siri::ontology::OntologyNodeName::getSuperclasses(siri::ontology::OntologyNodeName *this)
{
  return *((void *)this + 6) + 4 * *((int *)this + 16);
}

uint64_t siri::ontology::OntologyNodeName::getOriginEntityForDefinedValue(siri::ontology::OntologyNodeName *this)
{
  if (*((_DWORD *)this + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "OntologyException");
    std::operator+<char>();
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v5, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/OntologyUnitName.cpp", 79, "getOriginEntityForDefinedValue", (uint64_t)v4);
  }
  uint64_t v1 = *((int *)this + 16);
  if (*((_DWORD *)this + 17) - v1 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "OntologyException");
    std::operator+<char>();
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v5, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/OntologyUnitName.cpp", 84, "getOriginEntityForDefinedValue", (uint64_t)v3);
  }
  return *(unsigned int *)(*((void *)this + 6) + 4 * v1);
}

void sub_1CA28772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v12, a2);
  std::string::basic_string[abi:ne180100]<0>(v11, a4);
  siri::ontology::OntologyBaseException::OntologyBaseException((uint64_t)exception, a1, (uint64_t)v12, a3, (uint64_t)v11, a5);
  void *exception = &unk_1F246D558;
}

void sub_1CA287830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void siri::ontology::OntologyBaseException::~OntologyBaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F246D580;
  if (SHIBYTE(this[13].__vftable) < 0) {
    operator delete(this[11].__vftable);
  }
  if (SHIBYTE(this[10].__vftable) < 0) {
    operator delete(this[8].__vftable);
  }
  if (SHIBYTE(this[6].__vftable) < 0) {
    operator delete(this[4].__vftable);
  }
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1CB796510);
}

uint64_t siri::ontology::OntologyBaseException::what(siri::ontology::OntologyBaseException *this)
{
  uint64_t result = (uint64_t)this + 88;
  if (*((char *)this + 111) < 0) {
    return *(void *)result;
  }
  return result;
}

void siri::ontology::OntologyException::~OntologyException(std::exception *this)
{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1CB796510);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

BOOL siri::ontology::OntologyNodeName::hasDefinedValue(siri::ontology::OntologyNodeName *this, int a2)
{
  uint64_t v2 = *((int *)this + 17);
  int v3 = *((_DWORD *)this + 18) - v2;
  if (!v3) {
    return 0;
  }
  int v4 = (_DWORD *)(*((void *)this + 6) + 4 * v2);
  unint64_t v5 = v3;
  unint64_t v6 = &v4[v3];
  do
  {
    unint64_t v7 = v5 >> 1;
    int v8 = &v4[v5 >> 1];
    int v10 = *v8;
    uint64_t v9 = v8 + 1;
    v5 += ~(v5 >> 1);
    if (v10 < a2) {
      int v4 = v9;
    }
    else {
      unint64_t v5 = v7;
    }
  }
  while (v5);
  return v4 != v6 && *v4 <= a2;
}

BOOL siri::ontology::OntologyNodeName::hasOperator(siri::ontology::OntologyNodeName *this, int a2)
{
  uint64_t v2 = *((int *)this + 18);
  int v3 = *((_DWORD *)this + 19) - v2;
  if (!v3) {
    return 0;
  }
  int v4 = (_DWORD *)(*((void *)this + 6) + 4 * v2);
  unint64_t v5 = v3;
  unint64_t v6 = &v4[v3];
  do
  {
    unint64_t v7 = v5 >> 1;
    int v8 = &v4[v5 >> 1];
    int v10 = *v8;
    uint64_t v9 = v8 + 1;
    v5 += ~(v5 >> 1);
    if (v10 < a2) {
      int v4 = v9;
    }
    else {
      unint64_t v5 = v7;
    }
  }
  while (v5);
  return v4 != v6 && *v4 <= a2;
}

BOOL siri::ontology::OntologyVerbName::existArgumentToEntity(siri::ontology::OntologyVerbName *this, int a2, int a3)
{
  unint64_t v3 = *((int *)this + 20);
  if (!v3) {
    return 0;
  }
  int v4 = (_DWORD *)*((void *)this + 8);
  unint64_t v5 = &v4[2 * v3];
  do
  {
    unint64_t v6 = v3 >> 1;
    unint64_t v7 = &v4[2 * (v3 >> 1)];
    uint64_t v9 = *v7;
    int v8 = v7 + 1;
    v3 += ~(v3 >> 1);
    if ((int)v9 < a2) {
      int v4 = v8;
    }
    else {
      unint64_t v3 = v6;
    }
  }
  while (v3);
  return v4 != v5 && *v4 == a2 && v4[1] == a3;
}

BOOL siri::ontology::OntologyVerbName::hasArgument(siri::ontology::OntologyVerbName *this, int a2)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 8);
  unint64_t v3 = *((int *)this + 20);
  int v4 = &v2[2 * v3];
  if (!v3) {
    goto LABEL_8;
  }
  do
  {
    unint64_t v5 = v3 >> 1;
    unint64_t v6 = &v2[2 * (v3 >> 1)];
    uint64_t v8 = *v6;
    unint64_t v7 = v6 + 1;
    v3 += ~(v3 >> 1);
    if ((int)v8 < a2) {
      uint64_t v2 = v7;
    }
    else {
      unint64_t v3 = v5;
    }
  }
  while (v3);
  if (v2 == v4 || *v2 != a2) {
LABEL_8:
  }
    uint64_t v2 = v4;
  return v2 != v4;
}

void *siri::ontology::projectName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "uso");
}

void *siri::ontology::projectVersion@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "3.0.0");
}

void *siri::ontology::gitRevision@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "3.0.0");
}

void sub_1CA2891C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (a21) {
    std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](a21);
  }
  if (a69 && a68 < 0) {
    operator delete(__p);
  }
  if (a73)
  {
    if (a72 < 0) {
      operator delete(a70);
    }
  }

  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    void *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CB796510);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    size_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1CA289960(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void *std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(void *result, void *a2)
{
  long long v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    *uint64_t v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  std::string::size_type v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x1CB796510);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::AsrAlternative>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x1CB796510);
}

void siri::ontology::UsoEntitySpan::~UsoEntitySpan(void **this)
{
  if (*((unsigned char *)this + 176) && *((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  uint64_t v3 = this + 16;
  std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 11;
  std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((unsigned char *)this + 80))
  {
    uint64_t v2 = (uint64_t)this[9];
    this[9] = 0;
    if (v2) {
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v2);
    }
  }
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

void std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<siri::ontology::AsrAlternative>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<siri::ontology::SpanProperty>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](void ***a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::ontology::UsoEntitySpan::~UsoEntitySpan(result);
    JUMPOUT(0x1CB796510);
  }
  return result;
}

__n128 siri::ontology::UsoEntitySpan::UsoEntitySpan(uint64_t a1, long long *a2, uint64_t a3, long long *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 *a9, __n128 *a10)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v10 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 64) = 0;
  if (*((unsigned char *)a4 + 24))
  {
    long long v11 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 40) = v11;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*((unsigned char *)a5 + 8))
  {
    uint64_t v12 = *a5;
    *a5 = 0;
    *(void *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a6;
  *(void *)(a1 + 104) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)(a1 + 112) = a7;
  *(void *)(a1 + 120) = a8;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  __n128 result = *a9;
  *(__n128 *)(a1 + 128) = *a9;
  *(void *)(a1 + 144) = a9[1].n128_u64[0];
  a9->n128_u64[0] = 0;
  a9->n128_u64[1] = 0;
  a9[1].n128_u64[0] = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (a10[1].n128_u8[8])
  {
    __n128 result = *a10;
    *(void *)(a1 + 168) = a10[1].n128_u64[0];
    *(__n128 *)(a1 + 152) = result;
    a10->n128_u64[1] = 0;
    a10[1].n128_u64[0] = 0;
    a10->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 176) = 1;
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
}

char *std::vector<siri::ontology::MatchInfo::AliasType>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1CA28A090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33 && a18 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

void sub_1CA28A380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1CA28A4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }

  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1CA28A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2 == 1)
  {
    exception_ptr = (const siri::ontology::OntologyBaseException *)__cxa_get_exception_ptr(a1);
    siri::ontology::OntologyBaseException::OntologyBaseException((siri::ontology::OntologyBaseException *)&a9, exception_ptr);
    a9 = &unk_1F246D558;
    __cxa_begin_catch(a1);
    if (a25 >= 0) {
      unint64_t v28 = (uint64_t *)&a20;
    }
    else {
      unint64_t v28 = a20;
    }
    [NSString stringWithUTF8String:v28];
    id v29 = [MEMORY[0x1E4F1CA00] exceptionWithName:@"OntologyException" reason:objc_claimAutoreleasedReturnValue() userInfo:0];
    objc_exception_throw(v29);
  }

  _Unwind_Resume(a1);
}

siri::ontology::OntologyBaseException *siri::ontology::OntologyBaseException::OntologyBaseException(siri::ontology::OntologyBaseException *this, const siri::ontology::OntologyBaseException *a2)
{
  *(void *)this = &unk_1F246D580;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v6;
  }
  uint64_t v7 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1CA28A8A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_1CA28AA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a2 == 1)
  {
    exception_ptr = (const siri::ontology::OntologyBaseException *)__cxa_get_exception_ptr(a1);
    siri::ontology::OntologyBaseException::OntologyBaseException((siri::ontology::OntologyBaseException *)&__p, exception_ptr);
    __p = &unk_1F246D558;
    __cxa_begin_catch(a1);
    if (a28 >= 0) {
      uint64_t v33 = (uint64_t *)&a23;
    }
    else {
      uint64_t v33 = a23;
    }
    [NSString stringWithUTF8String:v33];
    id v34 = [MEMORY[0x1E4F1CA00] exceptionWithName:@"OntologyException" reason:objc_claimAutoreleasedReturnValue() userInfo:0];
    objc_exception_throw(v34);
  }

  _Unwind_Resume(a1);
}

void sub_1CA28AFC4(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v2, 0x10A0C403D23BABBLL);

  _Unwind_Resume(a1);
}

void sub_1CA28D348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoOperatorNode::checkValidOntologyNameType(uint64_t this)
{
  if ((*(_DWORD *)(*(void *)(this + 24) + 32) - 5) > 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v1, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v1, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 767, "checkValidOntologyNameType", "UsoOperatorNode can only take OPERATOR, LIST_OPERATOR ontology name types");
  }
  return this;
}

void sub_1CA28D724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5)
{
  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v13, a2);
  std::string::basic_string[abi:ne180100]<0>(v12, a4);
  std::string::basic_string[abi:ne180100]<0>(v11, a5);
  siri::ontology::OntologyBaseException::OntologyBaseException((uint64_t)exception, a1, (uint64_t)v13, a3, (uint64_t)v12, (uint64_t)v11);
  void *exception = &unk_1F246D558;
}

void sub_1CA28D804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

uint64_t siri::ontology::UsoGraphNode::operator>=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) ^ 1;
}

uint64_t siri::ontology::UsoGraphNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoGraphNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

BOOL siri::ontology::UsoGraphNode::operator<(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

uint64_t siri::ontology::UsoGraphNode::operator!=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoOperatorNode::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    uint64_t result = siri::ontology::operator==(*(void *)(a1 + 24), *(void *)(result + 24));
    if (result) {
      return *(void *)(a1 + 16) == *((void *)lpsrc + 2);
    }
  }
  return result;
}

void siri::ontology::UsoOperatorNode::toString(siri::ontology::UsoOperatorNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
  }
}

void siri::ontology::UsoOperatorNode::copyToGraph(const siri::ontology::OntologyNodeName **this, siri::ontology::UsoGraph *a2)
{
}

void siri::ontology::UsoGraph::createOperatorNode(siri::ontology::UsoGraph *this, const siri::ontology::OntologyNodeName *a2)
{
}

void sub_1CA28DB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::addNode(float *a1, unint64_t *a2)
{
  unint64_t v5 = *a2;
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(*(void *)a1 + 32);
  long long v8 = (unint64_t *)(*(void *)a1 + 40);
  if (v7 >= *v8)
  {
    uint64_t v10 = *(void *)(v6 + 24);
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v10) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v8 - v10) >> 3) > v12) {
      unint64_t v12 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v8 - v10) >> 3);
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v8 - v10) >> 3)) >= 0x249249249249249) {
      unint64_t v13 = 0x492492492492492;
    }
    else {
      unint64_t v13 = v12;
    }
    v68[4] = v8;
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v13 + 56 * v11;
    v68[0] = v13;
    v68[1] = v15;
    v68[3] = v13 + 56 * v14;
    *(_OWORD *)unint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(void *)(v15 + 48) = v5;
    v68[2] = v15 + 56;
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer((uint64_t *)(v6 + 24), v68);
    unint64_t v9 = *(void *)(v6 + 32);
    std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer((uint64_t)v68);
  }
  else
  {
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)unint64_t v7 = 0u;
    *(void *)(v7 + 48) = v5;
    unint64_t v9 = v7 + 56;
  }
  *(void *)(v6 + 32) = v9;
  uint64_t v16 = *(void *)(v6 + 24);
  unint64_t v17 = *a2;
  unint64_t v18 = *((void *)a1 + 7);
  *(void *)(v17 + 16) = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v16) >> 3) - 1;
  unint64_t v19 = 0x9DDFEA08EB382D69 * (((8 * v17) + 8) ^ HIDWORD(v17));
  unint64_t v20 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v19 >> 47) ^ v19);
  unint64_t v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
  if (v18)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
      if (v21 >= v18) {
        unint64_t v2 = v21 % v18;
      }
    }
    else
    {
      unint64_t v2 = v21 & (v18 - 1);
    }
    uint64_t v23 = *(void **)(*((void *)a1 + 6) + 8 * v2);
    if (v23)
    {
      for (uint64_t i = (void *)*v23; i; uint64_t i = (void *)*i)
      {
        unint64_t v25 = i[1];
        if (v25 == v21)
        {
          if (i[2] == v17) {
            goto LABEL_86;
          }
        }
        else
        {
          if (v22.u32[0] > 1uLL)
          {
            if (v25 >= v18) {
              v25 %= v18;
            }
          }
          else
          {
            v25 &= v18 - 1;
          }
          if (v25 != v2) {
            break;
          }
        }
      }
    }
  }
  std::vector<int>::pointer v26 = operator new(0x18uLL);
  *std::vector<int>::pointer v26 = 0;
  v26[1] = v21;
  v26[2] = v17;
  float v27 = (float)(unint64_t)(*((void *)a1 + 9) + 1);
  float v28 = a1[20];
  if (!v18 || (float)(v28 * (float)v18) < v27)
  {
    BOOL v29 = 1;
    if (v18 >= 3) {
      BOOL v29 = (v18 & (v18 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v18);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      int8x8_t prime = (int8x8_t)v31;
    }
    else {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v18 = *((void *)a1 + 7);
    }
    if (*(void *)&prime > v18) {
      goto LABEL_42;
    }
    if (*(void *)&prime < v18)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 9) / a1[20]);
      if (v18 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (*(void *)&prime <= v39) {
        int8x8_t prime = (int8x8_t)v39;
      }
      if (*(void *)&prime >= v18)
      {
        unint64_t v18 = *((void *)a1 + 7);
      }
      else
      {
        if (prime)
        {
LABEL_42:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v33 = operator new(8 * *(void *)&prime);
          id v34 = (void *)*((void *)a1 + 6);
          *((void *)a1 + 6) = v33;
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0;
          *((int8x8_t *)a1 + 7) = prime;
          do
            *(void *)(*((void *)a1 + 6) + 8 * v35++) = 0;
          while (*(void *)&prime != v35);
          std::vector<int>::pointer v36 = (void *)*((void *)a1 + 8);
          if (v36)
          {
            unint64_t v37 = v36[1];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&prime) {
                v37 %= *(void *)&prime;
              }
            }
            else
            {
              v37 &= *(void *)&prime - 1;
            }
            *(void *)(*((void *)a1 + 6) + 8 * v37) = a1 + 16;
            uint64_t v42 = (void *)*v36;
            if (*v36)
            {
              do
              {
                unint64_t v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&prime) {
                    v43 %= *(void *)&prime;
                  }
                }
                else
                {
                  v43 &= *(void *)&prime - 1;
                }
                if (v43 != v37)
                {
                  uint64_t v44 = *((void *)a1 + 6);
                  if (!*(void *)(v44 + 8 * v43))
                  {
                    *(void *)(v44 + 8 * v43) = v36;
                    goto LABEL_67;
                  }
                  *std::vector<int>::pointer v36 = *v42;
                  *uint64_t v42 = **(void **)(*((void *)a1 + 6) + 8 * v43);
                  **(void **)(*((void *)a1 + 6) + 8 * v43) = v42;
                  uint64_t v42 = v36;
                }
                unint64_t v43 = v37;
LABEL_67:
                std::vector<int>::pointer v36 = v42;
                uint64_t v42 = (void *)*v42;
                unint64_t v37 = v43;
              }
              while (v42);
            }
          }
          unint64_t v18 = (unint64_t)prime;
          goto LABEL_71;
        }
        int64_t v67 = (void *)*((void *)a1 + 6);
        *((void *)a1 + 6) = 0;
        if (v67) {
          operator delete(v67);
        }
        unint64_t v18 = 0;
        *((void *)a1 + 7) = 0;
      }
    }
LABEL_71:
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v21 >= v18) {
        unint64_t v2 = v21 % v18;
      }
      else {
        unint64_t v2 = v21;
      }
    }
    else
    {
      unint64_t v2 = (v18 - 1) & v21;
    }
  }
  uint64_t v45 = *((void *)a1 + 6);
  uint64_t v46 = *(void **)(v45 + 8 * v2);
  if (v46)
  {
    *std::vector<int>::pointer v26 = *v46;
LABEL_84:
    *uint64_t v46 = v26;
    goto LABEL_85;
  }
  *std::vector<int>::pointer v26 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v26;
  *(void *)(v45 + 8 * v2) = a1 + 16;
  if (*v26)
  {
    unint64_t v47 = *(void *)(*v26 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v47 >= v18) {
        v47 %= v18;
      }
    }
    else
    {
      v47 &= v18 - 1;
    }
    uint64_t v46 = (void *)(*((void *)a1 + 6) + 8 * v47);
    goto LABEL_84;
  }
LABEL_85:
  ++*((void *)a1 + 9);
LABEL_86:
  uint64_t v49 = (unint64_t *)*((void *)a1 + 4);
  unint64_t v48 = *((void *)a1 + 5);
  if ((unint64_t)v49 >= v48)
  {
    uint64_t v52 = *((void *)a1 + 3);
    uint64_t v53 = ((uint64_t)v49 - v52) >> 3;
    if ((unint64_t)(v53 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v54 = v48 - v52;
    uint64_t v55 = v54 >> 2;
    if (v54 >> 2 <= (unint64_t)(v53 + 1)) {
      uint64_t v55 = v53 + 1;
    }
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56)
    {
      if (v56 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v57 = (char *)operator new(8 * v56);
    }
    else
    {
      int v57 = 0;
    }
    unint64_t v58 = &v57[8 * v53];
    char v59 = &v57[8 * v56];
    unint64_t v60 = *a2;
    *a2 = 0;
    *(void *)unint64_t v58 = v60;
    uint64_t v51 = v58 + 8;
    uint64_t v61 = (void *)*((void *)a1 + 3);
    int v62 = (void *)*((void *)a1 + 4);
    if (v62 == v61)
    {
      *((void *)a1 + 3) = v58;
      *((void *)a1 + 4) = v51;
      *((void *)a1 + 5) = v59;
    }
    else
    {
      do
      {
        uint64_t v63 = *--v62;
        void *v62 = 0;
        *((void *)v58 - 1) = v63;
        v58 -= 8;
      }
      while (v62 != v61);
      int v62 = (void *)*((void *)a1 + 3);
      std::vector<int>::pointer v64 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 3) = v58;
      *((void *)a1 + 4) = v51;
      *((void *)a1 + 5) = v59;
      while (v64 != v62)
      {
        uint64_t v66 = *--v64;
        uint64_t v65 = v66;
        *std::vector<int>::pointer v64 = 0;
        if (v66) {
          (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
        }
      }
    }
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    unint64_t v50 = *a2;
    *a2 = 0;
    *uint64_t v49 = v50;
    uint64_t v51 = v49 + 1;
    *((void *)a1 + 4) = v51;
  }
  *((void *)a1 + 4) = v51;
}

void sub_1CA28E1C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

uint64_t *std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 56) = 0;
    *(void *)(v4 - 48) = 0;
    v4 -= 56;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 56);
    v2 -= 56;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(void *)(v4 + 40) = *(void *)(v2 + 40);
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(void *)(v4 + 48) = *(void *)(v2 + 48);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void siri::ontology::UsoOperatorNode::copy(siri::ontology::UsoGraph **this)
{
}

void siri::ontology::UsoGraph::addSuccessors(siri::ontology::UsoGraph *this, siri::ontology::UsoGraph **a2, const siri::ontology::UsoGraphNode *a3)
{
  long long v5 = (void *)((char *)this + 48);
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>((void *)this + 6, (unint64_t)a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "OntologyException");
    (*((void (**)(std::string *__return_ptr, siri::ontology::UsoGraph **))*a2 + 6))(&v29, a2);
    uint64_t v23 = std::string::insert(&v29, 0, "Attempting to process a node not owned by this graph: ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v43 = v23->__r_.__value_.__r.__words[2];
    long long v42 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v35, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 332, "addSuccessors", (uint64_t)&v42);
  }
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(v5, (unint64_t)a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "OntologyException");
    (*(void (**)(std::string *__return_ptr, const siri::ontology::UsoGraphNode *))(*(void *)a3 + 48))(&v29, a3);
    unint64_t v25 = std::string::insert(&v29, 0, "Attempting to process a node not owned by this graph: ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v25->__r_.__value_.__r.__words[2];
    long long v40 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v35, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 337, "addSuccessors", (uint64_t)&v40);
  }
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *(void *)(*(void *)this + 24);
  uint64_t v8 = (uint64_t *)(v7 + 56 * *((void *)a3 + 2));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      uint64_t v11 = *(void *)(v9 + 8);
      long long v35 = *(_OWORD *)(v11 + 32);
      unsigned int v36 = *(_DWORD *)(v11 + 48);
      unint64_t v37 = &unk_1F246D440;
      if (*(char *)(v11 + 87) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 64), *(void *)(v11 + 72));
      }
      else {
        std::string __p = *(std::string *)(v11 + 64);
      }
      uint64_t v39 = *(void *)(v11 + 88);
      unint64_t v37 = &unk_1F246D478;
      siri::ontology::UsoGraph::getSuccessors(a2[1], (const UsoGraphNode *)a2, (const siri::ontology::OntologyEdgeName *)&v37, &v29);
      long long v12 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
      if (v29.__r_.__value_.__r.__words[0]) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if ((void)v12 != *((void *)&v12 + 1))
      {
        std::string::basic_string[abi:ne180100]<0>(&v29, "OntologyException");
        (*(void (**)(std::string *__return_ptr, const siri::ontology::UsoGraphNode *))(*(void *)a3 + 48))(&v28, a3);
        unint64_t v21 = std::string::insert(&v28, 0, "Can't add successors with the same edge to the target node ");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        std::string::size_type v34 = v21->__r_.__value_.__r.__words[2];
        long long v33 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v29, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 350, "addSuccessors", (uint64_t)&v33);
      }
      unint64_t v37 = &unk_1F246D440;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v9 += 16;
    }
    while (v9 != v10);
    uint64_t v7 = *(void *)(v6 + 24);
  }
  unint64_t v13 = (uint64_t **)(v7 + 56 * (void)a2[2]);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  if (*v13 != v15)
  {
    do
    {
      uint64_t v16 = v14[1];
      long long v35 = *(_OWORD *)(v16 + 32);
      unsigned int v36 = *(_DWORD *)(v16 + 48);
      unint64_t v37 = &unk_1F246D440;
      if (*(char *)(v16 + 87) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 64), *(void *)(v16 + 72));
      }
      else {
        std::string __p = *(std::string *)(v16 + 64);
      }
      uint64_t v39 = *(void *)(v16 + 88);
      unint64_t v37 = &unk_1F246D478;
      unint64_t v17 = *v14;
      siri::ontology::UsoGraphEdge::UsoGraphEdge((siri::ontology::UsoGraphEdge *)&v29, (const siri::ontology::OntologyEdgeName *)&v37, *((void *)a3 + 2), *v14, v36);
      unint64_t v18 = *((void *)a3 + 2);
      unint64_t v19 = *(uint64_t **)this;
      if (v18 <= v17) {
        unint64_t v20 = v17;
      }
      else {
        unint64_t v20 = *((void *)a3 + 2);
      }
      if (v20 >= 0x6DB6DB6DB6DB6DB7 * ((v19[4] - *(void *)(*(void *)this + 24)) >> 3)) {
        std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize((uint64_t *)(*(void *)this + 24), v20 + 1);
      }
      boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>((uint64_t)&v28, v18, v17, (long long *)&v29, v19);
      unint64_t v30 = &unk_1F246D440;
      if (v32 < 0) {
        operator delete(v31);
      }
      unint64_t v37 = &unk_1F246D440;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v14 += 2;
    }
    while (v14 != v15);
  }
}

void sub_1CA28E83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void siri::ontology::UsoGraph::getSuccessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, const siri::ontology::OntologyEdgeName *a3@<X2>, void *a4@<X8>)
{
  unint64_t v4 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *(void *)(*(void *)this + 24) + 56 * a2->var2;
  uint64_t v8 = *(void **)v6;
  unint64_t v7 = *(void **)(v6 + 8);
  if (*(void **)v6 != v7)
  {
    unint64_t v10 = 0;
    p_p = (std::string *)&__p;
    unint64_t v30 = (void **)v4;
    do
    {
      uint64_t v12 = v8[1];
      unint64_t v31 = &unk_1F246D440;
      if (*(char *)(v12 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(p_p, *(const std::string::value_type **)(v12 + 64), *(void *)(v12 + 72));
      }
      else
      {
        *(_OWORD *)&p_p->__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 64);
        p_p->__r_.__value_.__r.__words[2] = *(void *)(v12 + 80);
      }
      uint64_t v34 = *(void *)(v12 + 88);
      unint64_t v31 = &unk_1F246D478;
      if (siri::ontology::operator==((uint64_t)&v31, (uint64_t)a3))
      {
        unint64_t v13 = p_p;
        uint64_t v14 = *(void *)(*(void *)(v5 + 24) + 56 * *v8 + 48);
        unint64_t v15 = v4[2];
        if ((unint64_t)v10 >= v15)
        {
          unint64_t v17 = v4;
          unint64_t v18 = v7;
          uint64_t v19 = v5;
          unint64_t v20 = a3;
          unint64_t v21 = (void *)*v17;
          uint64_t v22 = ((uint64_t)v10 - *v17) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v15 - (void)v21;
          if (v24 >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          float v27 = (void *)(v25 + 8 * v22);
          *float v27 = v14;
          uint64_t v16 = v27 + 1;
          if (v10 == v21)
          {
            std::string v29 = v30;
            p_p = v13;
          }
          else
          {
            p_p = v13;
            do
            {
              uint64_t v28 = *--v10;
              *--float v27 = v28;
            }
            while (v10 != v21);
            std::string v29 = v30;
            unint64_t v10 = *v30;
          }
          *std::string v29 = v27;
          v29[1] = v16;
          v29[2] = v25 + 8 * v26;
          a3 = v20;
          if (v10) {
            operator delete(v10);
          }
          uint64_t v5 = v19;
          unint64_t v7 = v18;
          unint64_t v4 = v30;
        }
        else
        {
          void *v10 = v14;
          uint64_t v16 = v10 + 1;
          p_p = v13;
        }
        v4[1] = v16;
        unint64_t v10 = v16;
      }
      unint64_t v31 = &unk_1F246D440;
      if (v33 < 0) {
        operator delete(__p);
      }
      v8 += 2;
    }
    while (v8 != v7);
  }
}

void sub_1CA28EC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20)
  {
    *(void *)(a9 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

siri::ontology::UsoGraphEdge *siri::ontology::UsoGraphEdge::UsoGraphEdge(siri::ontology::UsoGraphEdge *this, const siri::ontology::OntologyEdgeName *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((_DWORD *)this + 4) = a5;
  *((void *)this + 3) = &unk_1F246D440;
  unint64_t v7 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((void *)this + 7) = *((void *)a2 + 4);
  *((void *)this + 3) = &unk_1F246D478;
  return this;
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (_OWORD *)a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      uint64_t v16 = (_OWORD *)(v4 + 56 * a2);
      while (v5 != v16)
      {
        uint64_t v5 = (_OWORD *)((char *)v5 - 56);
        std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100]((uint64_t)v5);
      }
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      unint64_t v17 = (char *)v5 + 56 * v7;
      uint64_t v18 = 56 * a2 - 8 * (((uint64_t)v5 - *a1) >> 3);
      do
      {
        v5[1] = 0uLL;
        long long v5[2] = 0uLL;
        _OWORD *v5 = 0uLL;
        uint64_t v5 = (_OWORD *)((char *)v5 + 56);
        v18 -= 56;
      }
      while (v18);
      a1[1] = (uint64_t)v17;
    }
    else
    {
      if (a2 > 0x492492492492492) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      v19[4] = a1 + 2;
      unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x249249249249249) {
        unint64_t v11 = 0x492492492492492;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>(v11);
      unint64_t v13 = &v12[56 * v6];
      v19[0] = v12;
      v19[1] = v13;
      v19[3] = &v12[56 * v14];
      uint64_t v15 = 56 * a2 - 56 * v6;
      do
      {
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_OWORD *)v13 + 2) = 0uLL;
        *(_OWORD *)unint64_t v13 = 0uLL;
        v13 += 56;
        v15 -= 56;
      }
      while (v15);
      v19[2] = &v12[56 * a2];
      std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__swap_out_circular_buffer(a1, v19);
      std::__split_buffer<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex> &>::~__split_buffer((uint64_t)v19);
    }
  }
}

void boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t *a5)
{
  *(void *)&long long v23 = a2;
  *((void *)&v23 + 1) = a3;
  long long v24 = *a4;
  int v25 = *((_DWORD *)a4 + 4);
  uint64_t v26 = &unk_1F246D440;
  if (*((char *)a4 + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a4 + 4), *((void *)a4 + 5));
  }
  else {
    std::string __p = *(std::string *)(a4 + 2);
  }
  uint64_t v10 = *((void *)a4 + 7);
  uint64_t v28 = v10;
  uint64_t v26 = &unk_1F246D478;
  unint64_t v11 = (char *)operator new(0x60uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  long long v12 = v24;
  *((_OWORD *)v11 + 1) = v23;
  *((_OWORD *)v11 + 2) = v12;
  *((_DWORD *)v11 + 12) = v25;
  *((void *)v11 + 7) = &unk_1F246D440;
  unint64_t v13 = (std::string *)(v11 + 64);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    uint64_t v10 = v28;
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v11 + 10) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((void *)v11 + 11) = v10;
  *((void *)v11 + 7) = &unk_1F246D478;
  uint64_t v14 = *a5;
  *(void *)unint64_t v11 = *a5;
  *((void *)v11 + 1) = a5;
  *(void *)(v14 + 8) = v11;
  *a5 = (uint64_t)v11;
  uint64_t v15 = a5[3];
  ++a5[2];
  *(void *)&long long v22 = a3;
  *((void *)&v22 + 1) = v11;
  uint64_t v16 = boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>((char **)(v15 + 56 * a2), &v22);
  if (v17)
  {
    uint64_t v18 = (char **)(a5[3] + 56 * a3 + 24);
    *(void *)&long long v22 = a2;
    *((void *)&v22 + 1) = v11;
    boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>(v18, &v22);
    char v19 = 1;
  }
  else
  {
    unint64_t v20 = v16;
    uint64_t v21 = *(void *)v11;
    *(void *)(v21 + 8) = *((void *)v11 + 1);
    **((void **)v11 + 1) = v21;
    --a5[2];
    std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::__delete_node[abi:ne180100]<>(v11);
    char v19 = 0;
    unint64_t v11 = (char *)*((void *)v20 + 1);
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v11 + 32;
  *(unsigned char *)(a1 + 24) = v19;
  uint64_t v26 = &unk_1F246D440;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1CA28F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  operator delete(v22);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *boost::graph_detail::push_dispatch<std::vector<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>,boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge>>(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v12 = (char *)operator new(16 * v11);
    }
    else
    {
      long long v12 = 0;
    }
    unint64_t v13 = &v12[16 * v8];
    *(_OWORD *)unint64_t v13 = *a2;
    unint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    unint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

void std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::__delete_node[abi:ne180100]<>(char *__p)
{
  *((void *)__p + 7) = &unk_1F246D440;
  if (__p[87] < 0) {
    operator delete(*((void **)__p + 8));
  }
  operator delete(__p);
}

uint64_t siri::ontology::UsoOperatorNode::isValidSuccessorWithEdge(UsoGraphNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  if (*((_DWORD *)this[1].var0 + 9) && *((_DWORD *)a3 + 15))
  {
    siri::ontology::UsoGraph::getPredecessorsWithEdges((siri::ontology::UsoGraph *)this->var1, this, &v26);
    unint64_t v7 = v26;
    if (v27 == v26)
    {
      uint64_t v17 = 1;
      unint64_t v7 = v27;
      if (!v27) {
        return v17;
      }
      goto LABEL_30;
    }
    if ((unint64_t)((char *)v27 - (char *)v26) >= 0x11)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "OntologyException");
      std::operator+<char>();
      siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 803, "isValidSuccessorWithEdge", (uint64_t)v24);
    }
    uint64_t v8 = siri::ontology::oname::graph::ontology_init::Argument_operand(v6);
    if (!siri::ontology::operator==((uint64_t)a3 + 24, v8))
    {
      uint64_t v17 = 0;
      if (!v7) {
        return v17;
      }
      goto LABEL_30;
    }
    uint64_t v10 = (const void *)*v7;
    unint64_t v9 = (const siri::ontology::UsoGraphEdge *)v7[1];
    int v11 = (*(uint64_t (**)(void))(*(void *)*v7 + 16))(*v7);
    if (v11 == 1)
    {
      if (!v18) {
        __cxa_bad_cast();
      }
      char v19 = v18;
      if (!v20) {
        __cxa_bad_cast();
      }
      if (*(_DWORD *)(v20[3] + 36)
        && *(_DWORD *)(v19[3] + 36)
        && *((_DWORD *)v9 + 15)
        && (*((_DWORD *)this[1].var0 + 8) - 5) >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "OntologyException");
        std::operator+<char>();
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 872, "isValidSuccessorWithEdge", (uint64_t)v22);
      }
    }
    else
    {
      if (v11 != 2)
      {
LABEL_22:
        uint64_t v17 = 0;
LABEL_30:
        operator delete(v7);
        return v17;
      }
      if (!v12) {
        __cxa_bad_cast();
      }
      unint64_t v13 = v12;
      if (!v14) {
        __cxa_bad_cast();
      }
      if (*(_DWORD *)(*((void *)v14 + 3) + 36) && *((_DWORD *)v13[3] + 9) && *((_DWORD *)v9 + 15))
      {
        int v15 = *((_DWORD *)this[1].var0 + 8);
        if (v15 == 6)
        {
          BOOL isValidSetSuccessorWithEdge = siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(v14, a2, v9, 1);
          goto LABEL_33;
        }
        if (v15 != 5)
        {
          std::string::basic_string[abi:ne180100]<0>(v25, "OntologyException");
          std::operator+<char>();
          siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 843, "isValidSuccessorWithEdge", (uint64_t)v23);
        }
        if (siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(v14, a2, v9, 0))
        {
          BOOL isValidSetSuccessorWithEdge = siri::ontology::OntologyNodeName::hasOperator(v13[3], *((_DWORD *)this[1].var0 + 9));
LABEL_33:
          uint64_t v17 = isValidSetSuccessorWithEdge;
          goto LABEL_30;
        }
        goto LABEL_22;
      }
    }
    uint64_t v17 = 1;
    goto LABEL_30;
  }
  return 1;
}

void sub_1CA28F698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    std::string::basic_string[abi:ne180100]<0>(&a25, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)&a25, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 848, "isValidSuccessorWithEdge", "The successor of operator node should be an entity node or its derived class");
  }
  char v33 = *(void **)(v30 - 72);
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CA28F7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  uint64_t v26 = *(void **)(v24 - 72);
  if (v26) {
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_1CA28F804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::string v29 = *(void **)(v27 - 72);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_1CA28F834()
{
}

void siri::ontology::UsoGraph::getPredecessorsWithEdges(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(void *)(*(void *)this + 24) + 56 * a2->var2;
  unint64_t v6 = *(void **)(v5 + 24);
  unint64_t v7 = *(void **)(v5 + 32);
  if (v6 != v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 56 * *v6 + 48);
      uint64_t v10 = v6[1] + 32;
      unint64_t v11 = a3[2];
      if ((unint64_t)v8 >= v11)
      {
        unint64_t v13 = (void *)*a3;
        uint64_t v14 = ((uint64_t)v8 - *a3) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>,std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        char v19 = (void *)(v17 + 16 * v14);
        void *v19 = v9;
        v19[1] = v10;
        unint64_t v20 = v19;
        if (v8 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v8 - 1);
            v20 -= 2;
            v8 -= 2;
          }
          while (v8 != v13);
          uint64_t v8 = (void *)*a3;
        }
        long long v12 = v19 + 2;
        *a3 = v20;
        a3[1] = v19 + 2;
        a3[2] = v17 + 16 * v18;
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v8 = v9;
        v8[1] = v10;
        long long v12 = v8 + 2;
      }
      a3[1] = v12;
      v6 += 2;
      uint64_t v8 = v12;
    }
    while (v6 != v7);
  }
}

void sub_1CA28F9A4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3, char a4)
{
  if (!*(_DWORD *)(*((void *)this + 3) + 36) || !*((_DWORD *)a3 + 15)) {
    return 1;
  }
  int v8 = (*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2);
  if ((v8 - 2) < 3)
  {
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *((void *)v9 + 3);
      int v12 = *(_DWORD *)(v11 + 36);
      if (v12)
      {
        if (*(_DWORD *)(v11 + 32) == 3)
        {
          uint64_t v13 = siri::ontology::oname::graph::ontology_init::Argument_definedValue(v9);
          int v14 = siri::ontology::operator==((uint64_t)a3 + 24, v13);
          unint64_t v15 = (siri::ontology::OntologyNodeName *)*((void *)this + 3);
          if (v14)
          {
            return siri::ontology::OntologyNodeName::hasDefinedValue(v15, v12);
          }
          else
          {
            int v31 = *((_DWORD *)a3 + 15);
            int OriginEntityForDefinedValue = siri::ontology::OntologyNodeName::getOriginEntityForDefinedValue(*((siri::ontology::OntologyNodeName **)v10 + 3));
            return siri::ontology::OntologyNodeName::existArgumentToEntity(v15, v31, OriginEntityForDefinedValue);
          }
        }
        long long v22 = (siri::ontology::OntologyNodeName *)*((void *)this + 3);
        int v23 = *((_DWORD *)a3 + 15);
        int v24 = *(_DWORD *)(v11 + 36);
        if (a4)
        {
          if (!siri::ontology::OntologyNodeName::existSetArgumentToEntity(v22, v23, v24))
          {
            uint64_t v25 = *(int *)(v11 + 64);
            uint64_t v26 = *(int *)(v11 + 68);
            if (v26 != v25)
            {
              uint64_t v27 = (int *)(*(void *)(v11 + 48) + 4 * v25);
              uint64_t v28 = 4 * v26 - 4 * v25 - 4;
              do
              {
                int v29 = *v27++;
                BOOL result = siri::ontology::OntologyNodeName::existSetArgumentToEntity(v22, v23, v29);
                if (result) {
                  break;
                }
                uint64_t v30 = v28;
                v28 -= 4;
              }
              while (v30);
              return result;
            }
            return 0;
          }
        }
        else if (!siri::ontology::OntologyNodeName::existArgumentToEntity(v22, v23, v24))
        {
          uint64_t v35 = *(int *)(v11 + 64);
          uint64_t v36 = *(int *)(v11 + 68);
          if (v36 != v35)
          {
            unint64_t v37 = (int *)(*(void *)(v11 + 48) + 4 * v35);
            uint64_t v38 = 4 * v36 - 4 * v35 - 4;
            do
            {
              int v39 = *v37++;
              BOOL result = siri::ontology::OntologyNodeName::existArgumentToEntity(v22, v23, v39);
              if (result) {
                break;
              }
              uint64_t v40 = v38;
              v38 -= 4;
            }
            while (v40);
            return result;
          }
          return 0;
        }
      }
      return 1;
    }
LABEL_41:
    __cxa_bad_cast();
  }
  if (v8 != 5) {
    return 0;
  }
  if (!v17) {
    goto LABEL_41;
  }
  uint64_t v18 = v17[3];
  if (!*(_DWORD *)(v18 + 36)) {
    return 1;
  }
  int v19 = *(_DWORD *)(v18 + 32);
  if (v19 == 6)
  {
    char v33 = (siri::ontology::OntologyNodeName *)*((void *)this + 3);
    int v34 = *((_DWORD *)a3 + 15);
    return siri::ontology::OntologyNodeName::hasSetArgument(v33, v34);
  }
  else
  {
    if (v19 != 5)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "OntologyException");
      std::operator+<char>();
      siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v42, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1159, "isValidSetSuccessorWithEdge", (uint64_t)&v41);
    }
    unint64_t v20 = (siri::ontology::OntologyNodeName *)*((void *)this + 3);
    int v21 = *((_DWORD *)a3 + 15);
    return siri::ontology::OntologyNodeName::hasArgument(v20, v21);
  }
}

void sub_1CA28FD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>,std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t siri::ontology::UsoOperatorNode::getNodeType(siri::ontology::UsoOperatorNode *this)
{
  return 5;
}

void siri::ontology::UsoOperatorNode::~UsoOperatorNode(siri::ontology::UsoOperatorNode *this)
{
}

uint64_t siri::ontology::UsoEntityNode::checkValidOntologyNameType(uint64_t this)
{
  if (*(_DWORD *)(*(void *)(this + 24) + 32) > 3u)
  {
    std::string::basic_string[abi:ne180100]<0>(v1, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v1, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 897, "checkValidOntologyNameType", "UsoEntityNode can only take ENTITY, DEFINED_VALUE, EMPTY ontology name types");
  }
  return this;
}

void sub_1CA28FE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoEntityNode::operator>=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoEntityNode::operator<(a1, a2) ^ 1;
}

uint64_t siri::ontology::UsoEntityNode::operator<(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    uint64_t result = siri::ontology::operator<(*(void *)(a1 + 24), *(void *)(result + 24));
    if (result) {
      return *(void *)(a1 + 16) < *((void *)lpsrc + 2);
    }
  }
  return result;
}

uint64_t siri::ontology::UsoEntityNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoEntityNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoEntityNode::operator!=(void *a1, void *a2)
{
  return siri::ontology::UsoEntityNode::operator==(a1, a2) ^ 1;
}

uint64_t *siri::ontology::UsoEntityNode::operator==(void *a1, void *lpsrc)
{
  if (result)
  {
    unint64_t v5 = result;
    uint64_t v7 = a1[4];
    uint64_t v6 = a1[5];
    uint64_t v8 = v6 - v7;
    uint64_t v9 = result[4];
    if (v6 - v7 != result[5] - v9) {
      return 0;
    }
    if (v6 != v7)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v8 >> 3;
      }
      do
      {
        if (v10 == v11) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v13 = *(unsigned __int8 **)(v7 + 8 * v10);
        uint64_t v14 = *(void *)(v9 + 8 * v10);
        uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
        if ((v15 & 0x80u) == 0) {
          uint64_t v16 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 23);
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)(v14 + 8);
        }
        unint64_t v17 = (unsigned __int8 *)v13[23];
        int v18 = (char)v17;
        if ((char)v17 < 0) {
          unint64_t v17 = (unsigned __int8 *)*((void *)v13 + 1);
        }
        if (v16 != v17) {
          return 0;
        }
        if (v18 >= 0) {
          int v19 = *(unsigned __int8 **)(v7 + 8 * v10);
        }
        else {
          int v19 = *(unsigned __int8 **)v13;
        }
        if ((v15 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v14, v19, *(void *)(v14 + 8))) {
            return 0;
          }
        }
        else if (*(unsigned char *)(v14 + 23))
        {
          unint64_t v20 = *(unsigned __int8 **)(v9 + 8 * v10);
          while (*v20 == *v19)
          {
            ++v20;
            ++v19;
            if (!--v15) {
              goto LABEL_24;
            }
          }
          return 0;
        }
LABEL_24:
        uint64_t v21 = *(unsigned __int8 *)(v14 + 47);
        if ((v21 & 0x80u) == 0) {
          long long v22 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 47);
        }
        else {
          long long v22 = *(unsigned __int8 **)(v14 + 32);
        }
        int v23 = (unsigned __int8 *)v13[47];
        int v24 = (char)v23;
        if ((char)v23 < 0) {
          int v23 = (unsigned __int8 *)*((void *)v13 + 4);
        }
        if (v22 != v23) {
          return 0;
        }
        uint64_t v25 = (const void **)(v14 + 24);
        if (v24 >= 0) {
          uint64_t v26 = v13 + 24;
        }
        else {
          uint64_t v26 = (unsigned __int8 *)*((void *)v13 + 3);
        }
        if ((v21 & 0x80) != 0)
        {
          if (memcmp(*v25, v26, *(void *)(v14 + 32))) {
            return 0;
          }
        }
        else if (*(unsigned char *)(v14 + 47))
        {
          while (*(unsigned __int8 *)v25 == *v26)
          {
            uint64_t v25 = (const void **)((char *)v25 + 1);
            ++v26;
            if (!--v21) {
              goto LABEL_39;
            }
          }
          return 0;
        }
LABEL_39:
        uint64_t result = (uint64_t *)std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v14 + 48), v13 + 48);
        if (!result) {
          return result;
        }
        if (*(unsigned char *)(v14 + 88) && v13[88])
        {
          if (*(double *)(v14 + 80) != *((double *)v13 + 10)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(v14 + 88) != 0) != (v13[88] != 0))
        {
          return 0;
        }
        if (*(unsigned char *)(v14 + 100) && v13[100])
        {
          if (*(_DWORD *)(v14 + 96) != *((_DWORD *)v13 + 24)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(v14 + 100) != 0) != (v13[100] != 0))
        {
          return 0;
        }
        if (*(unsigned char *)(v14 + 108) && v13[108])
        {
          if (*(_DWORD *)(v14 + 104) != *((_DWORD *)v13 + 26)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(v14 + 108) != 0) != (v13[108] != 0))
        {
          return 0;
        }
        if (*(unsigned char *)(v14 + 116) && v13[116])
        {
          if (*(_DWORD *)(v14 + 112) != *((_DWORD *)v13 + 28)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(v14 + 116) != 0) != (v13[116] != 0))
        {
          return 0;
        }
      }
      while (++v10 != v12);
    }
    uint64_t v28 = (char *)a1[7];
    uint64_t v27 = (char *)a1[8];
    int v29 = (void *)v5[7];
    if (v27 - v28 != v5[8] - (void)v29) {
      return 0;
    }
    while (v28 != v27)
    {
      if (*(void *)v28 != *v29) {
        return 0;
      }
      v28 += 8;
      ++v29;
    }
    uint64_t v30 = a1[10];
    uint64_t v31 = a1[11];
    if (v31 - v30 != v5[11] - v5[10]) {
      return 0;
    }
    if (v31 != v30)
    {
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = v5[10];
        if (v32 >= (v5[11] - v33) >> 3) {
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        }
        if ((siri::ontology::UsoEntitySpan::operator==(*(void *)(v33 + 8 * v32), *(void *)(v30 + 8 * v32)) & 1) == 0) {
          return 0;
        }
        ++v32;
        uint64_t v30 = a1[10];
      }
      while (v32 < (a1[11] - v30) >> 3);
    }
    uint64_t result = (uint64_t *)siri::ontology::operator==(a1[3], v5[3]);
    if (result) {
      return (uint64_t *)(a1[2] == *((void *)lpsrc + 2));
    }
  }
  return result;
}

uint64_t siri::ontology::UsoEntitySpan::operator==(uint64_t a1, uint64_t a2)
{
  if (std::operator!=[abi:ne180100]<std::string,std::string>((unsigned __int8 *)a1, (unsigned __int8 *)a2)) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a2 + 36);
  if (*(unsigned char *)(a1 + 36)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a1 + 36) != 0) != (v4 != 0)) {
      return 0;
    }
  }
  else if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
  {
    return 0;
  }
  if (std::operator!=[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a1 + 40), (unsigned __int8 *)(a2 + 40)))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 116) && *(unsigned char *)(a2 + 116))
  {
    if (*(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 116) != 0) != (*(unsigned char *)(a2 + 116) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 124) && *(unsigned char *)(a2 + 124))
  {
    if (*(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 124) != 0) != (*(unsigned char *)(a2 + 124) != 0))
  {
    return 0;
  }
  if (std::operator!=[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a1 + 152), (unsigned __int8 *)(a2 + 152)))
  {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a2 + 80)) {
      return 0;
    }
    goto LABEL_29;
  }
  if (!*(unsigned char *)(a2 + 80)) {
    return 0;
  }
  uint64_t result = siri::ontology::MatchInfo::operator==(*(void *)(a2 + 72), *(void *)(a1 + 72));
  if (result)
  {
LABEL_29:
    uint64_t v8 = *(void *)(a1 + 88);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v9 = v7 - v8;
    uint64_t v10 = *(void *)(a2 + 88);
    if (v7 - v8 == *(void *)(a2 + 96) - v10)
    {
      if (v7 != v8)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v9 >> 3;
        if ((unint64_t)(v9 >> 3) <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v9 >> 3;
        }
        do
        {
          if (v11 == v12) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v14 = *(unsigned __int8 **)(v8 + 8 * v11);
          uint64_t v15 = *(void *)(v10 + 8 * v11);
          uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
          if ((v16 & 0x80u) == 0) {
            unint64_t v17 = (unsigned __int8 *)*(unsigned __int8 *)(v15 + 23);
          }
          else {
            unint64_t v17 = *(unsigned __int8 **)(v15 + 8);
          }
          int v18 = (unsigned __int8 *)v14[23];
          int v19 = (char)v18;
          if ((char)v18 < 0) {
            int v18 = (unsigned __int8 *)*((void *)v14 + 1);
          }
          if (v17 != v18) {
            return 0;
          }
          if (v19 >= 0) {
            unint64_t v20 = *(unsigned __int8 **)(v8 + 8 * v11);
          }
          else {
            unint64_t v20 = *(unsigned __int8 **)v14;
          }
          if ((v16 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v15, v20, *(void *)(v15 + 8))) {
              return 0;
            }
          }
          else if (*(unsigned char *)(v15 + 23))
          {
            uint64_t v21 = *(unsigned __int8 **)(v10 + 8 * v11);
            while (*v21 == *v20)
            {
              ++v21;
              ++v20;
              if (!--v16) {
                goto LABEL_51;
              }
            }
            return 0;
          }
LABEL_51:
          uint64_t result = std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v15 + 24), v14 + 24);
          if (!result) {
            return result;
          }
          if (*(unsigned char *)(v15 + 60) && v14[60])
          {
            if (*(_DWORD *)(v15 + 56) != *((_DWORD *)v14 + 14)) {
              return 0;
            }
          }
          else if ((*(unsigned char *)(v15 + 60) != 0) != (v14[60] != 0))
          {
            return 0;
          }
          if (*(unsigned char *)(v15 + 68) && v14[68])
          {
            if (*(float *)(v15 + 64) != *((float *)v14 + 16)) {
              return 0;
            }
          }
          else if ((*(unsigned char *)(v15 + 68) != 0) != (v14[68] != 0))
          {
            return 0;
          }
        }
        while (++v11 != v13);
      }
      uint64_t v24 = a1 + 128;
      int v23 = *(unsigned __int8 ***)(a1 + 128);
      long long v22 = *(char **)(v24 + 8);
      uint64_t v25 = v22 - (char *)v23;
      uint64_t v27 = a2 + 128;
      uint64_t v26 = *(unsigned __int8 ***)(a2 + 128);
      if (v22 - (char *)v23 == *(void *)(v27 + 8) - (void)v26)
      {
        if (v22 == (char *)v23) {
          return 1;
        }
        uint64_t v28 = v25 >> 3;
        if ((unint64_t)(v25 >> 3) <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = v25 >> 3;
        }
        uint64_t v30 = v29 - 1;
        do
        {
          if (!v28) {
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v32 = *v23++;
          uint64_t v31 = v32;
          uint64_t v33 = *v26++;
          uint64_t result = siri::ontology::AsrAlternative::operator==(v33, v31);
          BOOL v35 = v30-- != 0;
          if (!result) {
            break;
          }
          --v28;
        }
        while (v35);
        return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL std::operator!=[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) ^ (a2[24] != 0);
  }
  uint64_t v3 = a1[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a1[23];
  }
  else {
    uint64_t v4 = *((void *)a1 + 1);
  }
  uint64_t v5 = a2[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v4 != v5) {
    return 1;
  }
  if (v6 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v3 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v7 = v3 - 1;
    do
    {
      int v9 = *a1++;
      int v8 = v9;
      int v10 = *a2++;
      BOOL v2 = v8 == v10;
      uint64_t v3 = v8 != v10;
    }
    while (v2 && v7-- != 0);
  }
  return v3;
}

BOOL siri::ontology::MatchInfo::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if ((*(unsigned char *)(a1 + 8) != 0) != (v2 != 0)) {
      return 0;
    }
  }
  else if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a2 + 16))
  {
    if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 16) != 0) != (*(unsigned char *)(a2 + 16) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(a2 + 24))
  {
    if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) != 0) != (*(unsigned char *)(a2 + 24) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a2 + 32))
  {
    if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) != 0) != (*(unsigned char *)(a2 + 32) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(a2 + 40))
  {
    if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) != 0) != (*(unsigned char *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a2 + 48))
  {
    if (*(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) != 0) != (*(unsigned char *)(a2 + 48) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a2 + 56))
  {
    if (*(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) != 0) != (*(unsigned char *)(a2 + 56) != 0))
  {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 64) || !*(unsigned char *)(a2 + 64))
  {
    if ((*(unsigned char *)(a1 + 64) != 0) == (*(unsigned char *)(a2 + 64) != 0)) {
      goto LABEL_45;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
    return 0;
  }
LABEL_45:
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  int v6 = *(int **)(a2 + 72);
  if (v4 - v5 != *(void *)(a2 + 80) - (void)v6) {
    return 0;
  }
  if (v5 == v4) {
    return 1;
  }
  uint64_t v7 = v5 + 4;
  do
  {
    int v8 = *v6++;
    BOOL result = *(_DWORD *)(v7 - 4) == v8;
    BOOL v10 = *(_DWORD *)(v7 - 4) != v8 || v7 == v4;
    v7 += 4;
  }
  while (!v10);
  return result;
}

BOOL siri::ontology::AsrAlternative::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  int v6 = (float *)a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      goto LABEL_18;
    }
    return 0;
  }
  if (a1[23])
  {
    int v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  BOOL result = (a1[28] != 0) == (*((unsigned char *)v6 + 28) != 0);
  if (a1[28])
  {
    if (*((unsigned char *)v6 + 28)) {
      return *((float *)a1 + 6) == v6[6];
    }
  }
  return result;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) == (a2[24] != 0);
  }
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a1++;
    int v9 = v10;
    int v12 = *a2++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL v2 = v9 == v11;
    BOOL v3 = v9 == v11;
  }
  while (v2 && v14);
  return v3;
}

void siri::ontology::UsoEntityNode::toString(siri::ontology::UsoEntityNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
  }
}

void siri::ontology::UsoEntityNode::copyToGraph(const siri::ontology::OntologyNodeName **this, siri::ontology::UsoGraph *a2)
{
}

void siri::ontology::UsoGraph::createEntityNode(siri::ontology::UsoGraph *this, const siri::ontology::OntologyNodeName *a2)
{
}

void sub_1CA290C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntityNode::addIdentifier(siri::ontology::UsoEntityNode *this, siri::ontology::UsoIdentifier *a2)
{
}

void sub_1CA290D7C(_Unwind_Exception *a1)
{
  std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntityNode::addUtteranceAlignment(siri::ontology::UsoEntityNode *this, siri::ontology::UsoUtteranceAlignment *a2)
{
}

void sub_1CA290F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void siri::ontology::UsoEntityNode::addEntitySpan(siri::ontology::UsoEntityNode *this, siri::ontology::UsoEntitySpan *a2)
{
}

void sub_1CA291108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

siri::ontology::UsoEntitySpan *siri::ontology::UsoEntitySpan::UsoEntitySpan(siri::ontology::UsoEntitySpan *this, const siri::ontology::UsoEntitySpan *a2)
{
  uint64_t v4 = std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this, (long long *)a2);
  v4[1].__r_.__value_.__l.__size_ = *((void *)a2 + 4);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)v4 + 40), (long long *)((char *)a2 + 40));
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 80) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = *((void *)a2 + 14);
  uint64_t v5 = *((void *)a2 + 15);
  *((void *)this + 16) = 0;
  *((void *)this + 15) = v5;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 152), (long long *)((char *)a2 + 152));
  if (*((unsigned char *)a2 + 80)) {
    operator new();
  }
  if (*((unsigned char *)this + 80))
  {
    uint64_t v6 = *((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v6) {
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v6);
    }
    *((unsigned char *)this + 80) = 0;
  }
  siri::ontology::UsoEntitySpan::getSpanProperties(a2, (char **)&v8);
  if (v8 != (const siri::ontology::SpanProperty **)v9) {
    siri::ontology::UsoEntitySpan::addSpanProperty(this, *v8);
  }
  if (v8) {
    operator delete(v8);
  }
  siri::ontology::UsoEntitySpan::getAlternatives(a2, (char **)&v8);
  if (v8 != (const siri::ontology::SpanProperty **)v9) {
    siri::ontology::UsoEntitySpan::addAlternative(this, *v8);
  }
  if (v8) {
    operator delete(v8);
  }
  return this;
}

void sub_1CA2912E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x1CB796510](v7, 0x1010C400E9420BALL);
  if (*(unsigned char *)(v4 + 176) && *(char *)(v4 + 175) < 0) {
    operator delete(*v6);
  }
  std::vector<std::unique_ptr<siri::ontology::AsrAlternative>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(unsigned char *)(v4 + 80))
  {
    uint64_t v9 = *(void *)(v4 + 72);
    *(void *)(v4 + 72) = 0;
    if (v9) {
      std::default_delete<siri::ontology::MatchInfo>::operator()[abi:ne180100](v9);
    }
  }
  if (*(unsigned char *)(v4 + 64) && *(char *)(v4 + 63) < 0) {
    operator delete(*v5);
  }
  if (*(unsigned char *)(v4 + 24))
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoEntitySpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100]((void ***)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t siri::ontology::MatchInfo::MatchInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  uint64_t v3 = *(void *)(a2 + 60);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 60) = v3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 72);
  uint64_t v4 = *(unsigned char **)(a2 + 80);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<siri::ontology::MatchInfo::AliasType>::__vallocate[abi:ne180100]((void *)(a1 + 72), v6 >> 2);
    uint64_t v7 = *(char **)(a1 + 80);
    memmove(v7, v5, v6);
    *(void *)(a1 + 80) = &v7[4 * (v6 >> 2)];
  }
  return a1;
}

void sub_1CA2914C4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntitySpan::getSpanProperties(siri::ontology::UsoEntitySpan *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 11);
  uint64_t v3 = (uint64_t *)*((void *)this + 12);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = (v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v14 = (char *)operator new(8 * v13);
        }
        else
        {
          BOOL v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = v6;
        uint64_t v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          uint64_t v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)uint64_t v5 = v6;
        uint64_t v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      uint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA29160C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntitySpan::getAlternatives(siri::ontology::UsoEntitySpan *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 16);
  uint64_t v3 = (uint64_t *)*((void *)this + 17);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = (v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v14 = (char *)operator new(8 * v13);
        }
        else
        {
          BOOL v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = v6;
        uint64_t v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          uint64_t v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)uint64_t v5 = v6;
        uint64_t v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      uint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA29175C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntitySpan::addSpanProperty(siri::ontology::UsoEntitySpan *this, const siri::ontology::SpanProperty *a2)
{
}

void sub_1CA2918B4(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntitySpan::addAlternative(siri::ontology::UsoEntitySpan *this, const siri::ontology::AsrAlternative *a2)
{
}

void sub_1CA291A28(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1012C40F498771DLL);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1CB796510);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          MEMORY[0x1CB796510](v6, 0x1000C405AAC83ABLL);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::ontology::UsoUtteranceAlignment::getSpans(siri::ontology::UsoUtteranceAlignment *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = (v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v14 = (char *)operator new(8 * v13);
        }
        else
        {
          BOOL v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = v6;
        uint64_t v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          uint64_t v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)uint64_t v5 = v6;
        uint64_t v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      uint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA291CE4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoUtteranceAlignment::addSpan(siri::ontology::UsoUtteranceAlignment *this, siri::ontology::UsoUtteranceSpan *a2)
{
}

void sub_1CA291E0C(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1000C405AAC83ABLL);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x1CB796510](v4, 0x1000C405AAC83ABLL);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *siri::ontology::UsoIdentifier::UsoIdentifier(std::string *this, const UsoIdentifier *a2)
{
  if (*((char *)&a2->var0.var0.var0.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->var0.var0.var0.var0.var1.var0, a2->var0.var0.var0.var0.var1.var1);
  }
  else
  {
    long long v4 = *(_OWORD *)a2->var0.var0.var0.var0.var0.var0;
    this->__r_.__value_.__r.__words[2] = *((void *)&a2->var0.var0.var0.var0.var1 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(a2->var0.var0.var1.var0[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, (const std::string::value_type *)a2->var0.var0.var1.var0[0], a2->var0.var0.var1.var0[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)a2->var0.var0.var1.var0;
    this[1].__r_.__value_.__r.__words[2] = a2->var0.var0.var1.var0[2];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 2, (long long *)a2[1].var0.var0.var0.var0.var0.var0);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *(_OWORD *)&a2[1].var0.var0.var1.var0[1];
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)a2[2].var0.var0.var0.var0.var1.var0;
  this[4].__r_.__value_.__l.__size_ = a2[2].var0.var0.var0.var0.var1.var1;
  this[4].__r_.__value_.__r.__words[2] = *((void *)&a2[2].var0.var0.var0.var0.var1 + 2);
  return this;
}

void sub_1CA291F50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<siri::ontology::UsoIdentifier>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) && *(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x1CB796510);
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::UsoEntityNode(siri::ontology::UsoEntityNode *this, siri::ontology::UsoGraph *a2, const siri::ontology::OntologyNodeName *a3)
{
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F246CE50;
  *((void *)this + 3) = a3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  siri::ontology::UsoEntityNode::checkValidOntologyNameType((uint64_t)this);
  return this;
}

void sub_1CA2920D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = (void **)(v10 + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v12;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (void ***)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoEntitySpan>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void siri::ontology::UsoEntityNode::copy(siri::ontology::UsoGraph **this)
{
}

BOOL siri::ontology::UsoEntityNode::isValidSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, 0);
}

uint64_t siri::ontology::UsoEntityNode::getNodeType(siri::ontology::UsoEntityNode *this)
{
  return 2;
}

void siri::ontology::UsoEntityNode::~UsoEntityNode(siri::ontology::UsoEntityNode *this)
{
  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1CB796510);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t siri::ontology::UsoRootNode::checkValidOntologyNameType(uint64_t this)
{
  if (*(_DWORD *)(*(void *)(this + 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v1, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v1, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1281, "checkValidOntologyNameType", "UsoRootNode can only take ROOT ontology name type");
  }
  return this;
}

void sub_1CA29246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoRootNode::toString(siri::ontology::UsoRootNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
  }
}

uint64_t siri::ontology::UsoRootNode::copyToGraph(siri::ontology::UsoRootNode *this, siri::ontology::UsoGraph *a2)
{
  uint64_t v2 = (siri::ontology::UsoEntityNode *)*((void *)a2 + 11);
  uint64_t v3 = (siri::ontology::UsoIdentifier **)*((void *)this + 4);
  if (v3 != *((siri::ontology::UsoIdentifier ***)this + 5)) {
    siri::ontology::UsoEntityNode::addIdentifier(v2, *v3);
  }
  uint64_t v4 = (siri::ontology::UsoUtteranceAlignment **)*((void *)this + 7);
  if (v4 != *((siri::ontology::UsoUtteranceAlignment ***)this + 8)) {
    siri::ontology::UsoEntityNode::addUtteranceAlignment(v2, *v4);
  }
  long long v5 = (siri::ontology::UsoEntitySpan **)*((void *)this + 10);
  if (v5 != *((siri::ontology::UsoEntitySpan ***)this + 11)) {
    siri::ontology::UsoEntityNode::addEntitySpan(v2, *v5);
  }
  return *((void *)a2 + 11);
}

uint64_t siri::ontology::UsoRootNode::isValidSuccessorWithEdge(siri::ontology::UsoRootNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  uint64_t v4 = (char *)a3 + 24;
  uint64_t v5 = siri::ontology::oname::graph::ontology_init::Argument_task(this);
  uint64_t result = siri::ontology::operator==((uint64_t)v4, v5);
  if (!result
    || (uint64_t result = (*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2), result != 1))
  {
    uint64_t v7 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)result);
    uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==((uint64_t)v4, v7);
    if (v8)
    {
      uint64_t v8 = (siri::ontology::oname::graph::ontology_init *)(*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2);
      if (v8 == 2) {
        return 1;
      }
    }
    uint64_t v9 = siri::ontology::oname::graph::ontology_init::Argument_entity(v8);
    uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==((uint64_t)v4, v9);
    if (v10
      && (uint64_t v10 = (siri::ontology::oname::graph::ontology_init *)(*((uint64_t (**)(const UsoGraphNode *))a2->var0
                                                                + 2))(a2),
          v10 == 3))
    {
      return 1;
    }
    else
    {
      uint64_t v11 = siri::ontology::oname::graph::ontology_init::Argument_entity(v10);
      uint64_t result = siri::ontology::operator==((uint64_t)v4, v11);
      if (result) {
        return (*((unsigned int (**)(const UsoGraphNode *))a2->var0 + 2))(a2) == 4;
      }
    }
  }
  return result;
}

uint64_t siri::ontology::UsoRootNode::getNodeType(siri::ontology::UsoRootNode *this)
{
  return 0;
}

void siri::ontology::UsoRootNode::~UsoRootNode(siri::ontology::UsoRootNode *this)
{
  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1CB796510);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t siri::ontology::UsoTaskNode::checkValidOntologyNameType(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (*(_DWORD *)(v1 + 36))
  {
    int v2 = *(_DWORD *)(*(void *)(this + 104) + 36);
    if (v2)
    {
      if (*(_DWORD *)(v1 + 32) != 2)
      {
        long long v22 = std::string::basic_string[abi:ne180100]<0>(v27, "OntologyException");
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v22, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1195, "checkValidOntologyNameType", "UsoTaskNode can only take ENTITY + VERB ontology name types");
      }
      unint64_t v3 = *(int *)(v1 + 64);
      if (!v3) {
        goto LABEL_13;
      }
      uint64_t v4 = *(_DWORD **)(v1 + 48);
      uint64_t v5 = &v4[v3];
      do
      {
        unint64_t v6 = v3 >> 1;
        uint64_t v7 = &v4[v3 >> 1];
        int v9 = *v7;
        uint64_t v8 = v7 + 1;
        v3 += ~(v3 >> 1);
        if (v9 < v2) {
          uint64_t v4 = v8;
        }
        else {
          unint64_t v3 = v6;
        }
      }
      while (v3);
      if (v4 == v5 || *v4 > v2)
      {
LABEL_13:
        uint64_t v10 = this;
        std::string::basic_string[abi:ne180100]<0>(v27, "OntologyException");
        std::operator+<char>();
        uint64_t v11 = std::string::append(&v23, "::");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        uint64_t v13 = *(void *)(v10 + 104);
        uint64_t v16 = *(const std::string::value_type **)(v13 + 8);
        uint64_t v14 = v13 + 8;
        uint64_t v15 = v16;
        int v17 = *(char *)(v14 + 23);
        if (v17 >= 0) {
          int v18 = (const std::string::value_type *)v14;
        }
        else {
          int v18 = v15;
        }
        if (v17 >= 0) {
          std::string::size_type v19 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          std::string::size_type v19 = *(void *)(v14 + 8);
        }
        unint64_t v20 = std::string::append(&v24, v18, v19);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
        long long v25 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)v27, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1200, "checkValidOntologyNameType", (uint64_t)&v25);
      }
    }
  }
  return this;
}

void sub_1CA292914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *siri::ontology::UsoTaskNode::operator==(void *a1, void *lpsrc)
{
  if (!v4 || !siri::ontology::operator==(a1[13], v4[13])) {
    return 0;
  }
  return siri::ontology::UsoEntityNode::operator==(a1, lpsrc);
}

void siri::ontology::UsoTaskNode::toString(siri::ontology::UsoTaskNode *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 13);
  if (*(char *)(v4 + 31) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 31);
  }
  else {
    size_t v5 = *(void *)(v4 + 16);
  }
  unint64_t v6 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v5 + 2);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v6 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    int v9 = *(char **)(v4 + 8);
    uint64_t v8 = (char *)(v4 + 8);
    uint64_t v7 = v9;
    if (v8[23] >= 0) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  strcpy((char *)v6 + v5, "::");
  uint64_t v11 = *((void *)this + 3);
  uint64_t v14 = *(const std::string::value_type **)(v11 + 8);
  uint64_t v12 = v11 + 8;
  uint64_t v13 = v14;
  int v15 = *(char *)(v12 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)v12;
  }
  else {
    uint64_t v16 = v13;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v12 + 8);
  }
  int v18 = std::string::append(&v19, v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1CA292B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    unint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void siri::ontology::UsoTaskNode::copyToGraph(const siri::ontology::OntologyNodeName **this, siri::ontology::UsoGraph *a2)
{
}

void siri::ontology::UsoGraph::createTaskNode(siri::ontology::UsoGraph *this, const siri::ontology::OntologyNodeName *a2, const siri::ontology::OntologyVerbName *a3)
{
}

void sub_1CA292D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoTaskNode::copy(siri::ontology::UsoGraph **this)
{
}

BOOL siri::ontology::UsoTaskNode::isValidSuccessorWithEdge(siri::ontology::UsoTaskNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  if (!*(_DWORD *)(*((void *)this + 3) + 36) || !*(_DWORD *)(*((void *)this + 13) + 36)) {
    return 1;
  }
  int v6 = (*((uint64_t (**)(const UsoGraphNode *))a2->var0 + 2))(a2);
  if ((v6 - 2) < 3)
  {
    if (!v7) {
      __cxa_bad_cast();
    }
    uint64_t v8 = v7[3];
    int v9 = *(_DWORD *)(v8 + 36);
    if (!v9) {
      return 1;
    }
    int v10 = *((_DWORD *)a3 + 15);
    if (!v10) {
      return 1;
    }
    uint64_t v11 = (siri::ontology::OntologyVerbName *)*((void *)this + 13);
    if (siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, v9)) {
      return 1;
    }
    uint64_t v12 = *((void *)this + 3);
    if (siri::ontology::operator==(v12, v8))
    {
      if (siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, -1)) {
        return 1;
      }
    }
    uint64_t v16 = *(int *)(v8 + 64);
    uint64_t v17 = *(int *)(v8 + 68);
    if (v17 != v16)
    {
      int v18 = (int *)(*(void *)(v8 + 48) + 4 * v16);
      uint64_t v19 = 4 * v17 - 4 * v16;
      while (1)
      {
        int v20 = *v18;
        if (siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, *v18)
          || *(_DWORD *)(v12 + 36) == v20 && siri::ontology::OntologyVerbName::existArgumentToEntity(v11, v10, -1))
        {
          break;
        }
        BOOL result = 0;
        ++v18;
        v19 -= 4;
        if (!v19) {
          return result;
        }
      }
      return 1;
    }
    return 0;
  }
  if (v6 != 5) {
    return 0;
  }
  uint64_t v14 = (siri::ontology::OntologyVerbName *)*((void *)this + 13);
  int v15 = *((_DWORD *)a3 + 15);
  return siri::ontology::OntologyVerbName::hasArgument(v14, v15);
}

uint64_t siri::ontology::UsoTaskNode::getNodeType(siri::ontology::UsoTaskNode *this)
{
  return 1;
}

void siri::ontology::UsoTaskNode::~UsoTaskNode(siri::ontology::UsoTaskNode *this)
{
  *(void *)this = &unk_1F246CE50;
  int v2 = (void **)((char *)this + 32);
  unint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1CB796510);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F246CE50;
  int v2 = (void **)((char *)this + 32);
  unint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t siri::ontology::UsoStringNode::checkValidOntologyNameType(siri::ontology::UsoStringNode *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = siri::ontology::oname::graph::ontology_init::primitive_String(this);
  uint64_t result = siri::ontology::operator==(v1, v2);
  if ((result & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v4, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1314, "checkValidOntologyNameType", "UsoStringNode's entity must be primitive_String");
  }
  return result;
}

void sub_1CA293194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoStringNode::operator>=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoStringNode::operator<(a1, a2) ^ 1;
}

unsigned char *siri::ontology::UsoStringNode::operator<(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    if (!result[128]) {
      return 0;
    }
    if (!*(unsigned char *)(a1 + 128)) {
      return (unsigned char *)(*(void *)(a1 + 16) < *((void *)lpsrc + 2));
    }
    uint64_t v5 = result + 104;
    uint64_t v6 = result[127];
    uint64_t v7 = (char *)*((void *)result + 13);
    uint64_t v8 = *((void *)result + 14);
    int v9 = *(char *)(a1 + 127);
    unint64_t v10 = v9 >= 0 ? *(unsigned __int8 *)(a1 + 127) : *(void *)(a1 + 112);
    uint64_t v11 = v9 >= 0 ? (const void *)(a1 + 104) : *(const void **)(a1 + 104);
    unint64_t v12 = (v6 & 0x80u) == 0 ? v6 : v8;
    uint64_t v13 = (v6 & 0x80u) == 0 ? v5 : v7;
    size_t v14 = v12 >= v10 ? v10 : v12;
    int v15 = memcmp(v11, v13, v14);
    BOOL v16 = v10 < v12;
    if (v15) {
      BOOL v16 = v15 < 0;
    }
    if (v16) {
      return (unsigned char *)(*(void *)(a1 + 16) < *((void *)lpsrc + 2));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t siri::ontology::UsoStringNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoStringNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoStringNode::operator!=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoStringNode::operator==(a1, a2) ^ 1;
}

uint64_t *siri::ontology::UsoStringNode::operator==(uint64_t a1, void *lpsrc)
{
  if (!v4
    || !std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(a1 + 104), v4 + 104))
  {
    return 0;
  }
  return siri::ontology::UsoEntityNode::operator==((void *)a1, lpsrc);
}

void siri::ontology::UsoStringNode::toString(siri::ontology::UsoStringNode *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)a2;
  if (*((unsigned char *)this + 128))
  {
    uint64_t v4 = *((void *)this + 3);
    if (*(char *)(v4 + 31) >= 0) {
      size_t v5 = *(unsigned __int8 *)(v4 + 31);
    }
    else {
      size_t v5 = *(void *)(v4 + 16);
    }
    uint64_t v6 = &v24;
    std::string::basic_string[abi:ne180100]((uint64_t)&v24, v5 + 2);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      int v9 = *(char **)(v4 + 8);
      uint64_t v8 = (char *)(v4 + 8);
      uint64_t v7 = v9;
      if (v8[23] >= 0) {
        unint64_t v10 = v8;
      }
      else {
        unint64_t v10 = v7;
      }
      memmove(v6, v10, v5);
    }
    strcpy((char *)v6 + v5, "(\"");
    if (!*((unsigned char *)this + 128)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v11 = *((char *)this + 127);
    if (v11 >= 0) {
      unint64_t v12 = (char *)this + 104;
    }
    else {
      unint64_t v12 = (const std::string::value_type *)*((void *)this + 13);
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *((unsigned __int8 *)this + 127);
    }
    else {
      std::string::size_type v13 = *((void *)this + 14);
    }
    size_t v14 = std::string::append(&v24, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    BOOL v16 = std::string::append(&v25, "\")");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v3[2] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v3 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v18 = *((void *)this + 3);
    if (*(char *)(v18 + 31) >= 0) {
      size_t v19 = *(unsigned __int8 *)(v18 + 31);
    }
    else {
      size_t v19 = *(void *)(v18 + 16);
    }
    std::string::basic_string[abi:ne180100](a2, v19 + 2);
    if (*((char *)v3 + 23) < 0) {
      unint64_t v3 = (void *)*v3;
    }
    if (v19)
    {
      long long v22 = *(char **)(v18 + 8);
      long long v21 = (char *)(v18 + 8);
      int v20 = v22;
      if (v21[23] >= 0) {
        std::string v23 = v21;
      }
      else {
        std::string v23 = v20;
      }
      memmove(v3, v23, v19);
    }
    strcpy((char *)v3 + v19, "()");
  }
}

void sub_1CA2935AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoStringNode::copyToGraph(siri::ontology::UsoStringNode *this, siri::ontology::UsoGraph *a2)
{
}

void siri::ontology::UsoGraph::createStringNode()
{
}

void sub_1CA293738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoStringNode::UsoStringNode(uint64_t a1, siri::ontology::UsoGraph *a2, long long *a3)
{
  uint64_t v6 = (const siri::ontology::OntologyNodeName *)siri::ontology::oname::graph::ontology_init::primitive_String((siri::ontology::oname::graph::ontology_init *)a1);
  siri::ontology::UsoEntityNode::UsoEntityNode((siri::ontology::UsoEntityNode *)a1, a2, v6);
  *(void *)a1 = &unk_1F246CFE8;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 104), a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  return a1;
}

void sub_1CA29384C(_Unwind_Exception *a1)
{
  if (v1[128])
  {
    if (v1[127] < 0) {
      operator delete(*v2);
    }
  }
  siri::ontology::UsoEntityNode::~UsoEntityNode((siri::ontology::UsoEntityNode *)v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoStringNode::copy(siri::ontology::UsoStringNode *this)
{
}

uint64_t siri::ontology::UsoStringNode::isValidSuccessorWithEdge(siri::ontology::UsoStringNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return 0;
}

uint64_t siri::ontology::UsoStringNode::getNodeType(siri::ontology::UsoStringNode *this)
{
  return 3;
}

void siri::ontology::UsoStringNode::~UsoStringNode(void **this)
{
  *this = &unk_1F246CFE8;
  if (*((unsigned char *)this + 128) && *((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F246CE50;
  uint64_t v2 = this + 10;
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 7;
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 4;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1CB796510);
}

{
  void **v2;

  *this = &unk_1F246CFE8;
  if (*((unsigned char *)this + 128) && *((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  *this = &unk_1F246CE50;
  uint64_t v2 = this + 10;
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 7;
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 4;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t siri::ontology::UsoIntNode::checkValidOntologyNameType(siri::ontology::UsoIntNode *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = siri::ontology::oname::graph::ontology_init::primitive_Integer(this);
  uint64_t result = siri::ontology::operator==(v1, v2);
  if ((result & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "OntologyException");
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,char const*>((uint64_t)v4, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 1344, "checkValidOntologyNameType", "UsoIntNode's entity must be primitive_Integer");
  }
  return result;
}

void sub_1CA293A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoIntNode::operator>=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoIntNode::operator<(a1, a2) ^ 1;
}

unsigned char *siri::ontology::UsoIntNode::operator<(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    if (!result[112] || *(unsigned char *)(a1 + 112) && *(void *)(a1 + 104) >= *((void *)result + 13)) {
      return 0;
    }
    else {
      return (unsigned char *)(*(void *)(a1 + 16) < *((void *)lpsrc + 2));
    }
  }
  return result;
}

uint64_t siri::ontology::UsoIntNode::operator<=(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1) ^ 1;
}

uint64_t siri::ontology::UsoIntNode::operator>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

uint64_t siri::ontology::UsoIntNode::operator!=(uint64_t a1, void *a2)
{
  return siri::ontology::UsoIntNode::operator==(a1, a2) ^ 1;
}

uint64_t *siri::ontology::UsoIntNode::operator==(uint64_t a1, void *lpsrc)
{
  if (!v4) {
    return 0;
  }
  int v5 = *((unsigned __int8 *)v4 + 112);
  if (*(unsigned char *)(a1 + 112)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(a1 + 104) == v4[13]) {
      goto LABEL_10;
    }
    return 0;
  }
  if ((*(unsigned char *)(a1 + 112) != 0) != (v5 != 0)) {
    return 0;
  }
LABEL_10:
  return siri::ontology::UsoEntityNode::operator==((void *)a1, lpsrc);
}

void siri::ontology::UsoIntNode::toString(siri::ontology::UsoIntNode *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)a2;
  if (*((unsigned char *)this + 112))
  {
    uint64_t v4 = *((void *)this + 3);
    if (*(char *)(v4 + 31) >= 0) {
      size_t v5 = *(unsigned __int8 *)(v4 + 31);
    }
    else {
      size_t v5 = *(void *)(v4 + 16);
    }
    BOOL v6 = &v24;
    std::string::basic_string[abi:ne180100]((uint64_t)&v24, v5 + 1);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      int v9 = *(char **)(v4 + 8);
      uint64_t v8 = (char *)(v4 + 8);
      uint64_t v7 = v9;
      if (v8[23] >= 0) {
        unint64_t v10 = v8;
      }
      else {
        unint64_t v10 = v7;
      }
      memmove(v6, v10, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 40;
    if (!*((unsigned char *)this + 112)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::to_string(&__p, *((void *)this + 13));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v13 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v25, ")");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v3[2] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v3 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v17 = *((void *)this + 3);
    if (*(char *)(v17 + 31) >= 0) {
      size_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    else {
      size_t v18 = *(void *)(v17 + 16);
    }
    std::string::basic_string[abi:ne180100](a2, v18 + 2);
    if (*((char *)v3 + 23) < 0) {
      unint64_t v3 = (void *)*v3;
    }
    if (v18)
    {
      long long v21 = *(char **)(v17 + 8);
      int v20 = (char *)(v17 + 8);
      size_t v19 = v21;
      if (v20[23] >= 0) {
        long long v22 = v20;
      }
      else {
        long long v22 = v19;
      }
      memmove(v3, v22, v18);
    }
    strcpy((char *)v3 + v18, "()");
  }
}

void sub_1CA293E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoIntNode::copyToGraph(siri::ontology::UsoIntNode *this, siri::ontology::UsoGraph *a2)
{
}

void siri::ontology::UsoGraph::createIntNode()
{
}

void sub_1CA29400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

siri::ontology::oname::graph::ontology_init *siri::ontology::UsoIntNode::UsoIntNode(siri::ontology::oname::graph::ontology_init *a1, siri::ontology::UsoGraph *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const siri::ontology::OntologyNodeName *)siri::ontology::oname::graph::ontology_init::primitive_Integer(a1);
  int v9 = siri::ontology::UsoEntityNode::UsoEntityNode(a1, a2, v8);
  *(void *)a1 = &unk_1F246D068;
  *((void *)a1 + 13) = a3;
  *((void *)a1 + 14) = a4;
  siri::ontology::UsoIntNode::checkValidOntologyNameType(v9);
  return a1;
}

void sub_1CA2940D4(_Unwind_Exception *a1)
{
  siri::ontology::UsoEntityNode::~UsoEntityNode(v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoIntNode::copy(siri::ontology::UsoIntNode *this)
{
}

uint64_t siri::ontology::UsoIntNode::isValidSuccessorWithEdge(siri::ontology::UsoIntNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return 0;
}

uint64_t siri::ontology::UsoIntNode::getNodeType(siri::ontology::UsoIntNode *this)
{
  return 4;
}

void siri::ontology::UsoIntNode::~UsoIntNode(siri::ontology::UsoIntNode *this)
{
  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  unint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1CB796510);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_1F246CE50;
  uint64_t v2 = (void **)((char *)this + 32);
  unint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void siri::ontology::UsoGraph::~UsoGraph(siri::ontology::UsoGraph *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)this + 48);
  uint64_t v4 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](v3);
  }
}

void std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    MEMORY[0x1CB796510](v2, 0xC400A2AC0F1);
  }
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear((void *)a1);
  JUMPOUT(0x1CB796510);
}

void std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      uint64_t v4 = (void *)result[1];
      std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::__delete_node[abi:ne180100]<>((char *)result);
      uint64_t result = v4;
    }
  }
  return result;
}

void siri::ontology::UsoGraph::UsoGraph()
{
}

{
  operator new();
}

void sub_1CA294530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  size_t v5 = (std::__shared_weak_count *)v2[13];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v3);
  std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v6 = *v2;
  *uint64_t v2 = 0;
  if (v6) {
    std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::adjacency_list(uint64_t a1)
{
  *(void *)a1 = a1;
  *(void *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  operator new();
}

void sub_1CA2945D4(_Unwind_Exception *a1)
{
  boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::createRootNode(siri::ontology::UsoGraph *this)
{
}

void sub_1CA2946B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::vec_adj_list_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config,boost::bidirectional_graph_helper_with_property<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>>::~vec_adj_list_impl(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear((void *)a1);
  return a1;
}

void sub_1CA294824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  size_t v5 = (std::__shared_weak_count *)v2[13];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v3);
  std::vector<std::unique_ptr<siri::ontology::UsoGraphNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v6 = *v2;
  *uint64_t v2 = 0;
  if (v6) {
    std::default_delete<siri::ontology::UsoBoostGraph>::operator()[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::getPredecessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, const siri::ontology::OntologyEdgeName *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *(void *)(*(void *)this + 24) + 56 * a2->var2;
  uint64_t v8 = *(void **)(v6 + 24);
  uint64_t v7 = *(void **)(v6 + 32);
  if (v8 != v7)
  {
    unint64_t v10 = 0;
    p_p = (std::string *)&__p;
    uint64_t v30 = (void **)v4;
    do
    {
      uint64_t v12 = v8[1];
      uint64_t v31 = &unk_1F246D440;
      if (*(char *)(v12 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(p_p, *(const std::string::value_type **)(v12 + 64), *(void *)(v12 + 72));
      }
      else
      {
        *(_OWORD *)&p_p->__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 64);
        p_p->__r_.__value_.__r.__words[2] = *(void *)(v12 + 80);
      }
      uint64_t v34 = *(void *)(v12 + 88);
      uint64_t v31 = &unk_1F246D478;
      if (siri::ontology::operator==((uint64_t)&v31, (uint64_t)a3))
      {
        std::string::size_type v13 = p_p;
        uint64_t v14 = *(void *)(*(void *)(v5 + 24) + 56 * *v8 + 48);
        unint64_t v15 = v4[2];
        if ((unint64_t)v10 >= v15)
        {
          uint64_t v17 = v4;
          size_t v18 = v7;
          uint64_t v19 = v5;
          int v20 = a3;
          long long v21 = (void *)*v17;
          uint64_t v22 = ((uint64_t)v10 - *v17) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v15 - (void)v21;
          if (v24 >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = (void *)(v25 + 8 * v22);
          *uint64_t v27 = v14;
          long long v16 = v27 + 1;
          if (v10 == v21)
          {
            uint64_t v29 = v30;
            p_p = v13;
          }
          else
          {
            p_p = v13;
            do
            {
              uint64_t v28 = *--v10;
              *--uint64_t v27 = v28;
            }
            while (v10 != v21);
            uint64_t v29 = v30;
            unint64_t v10 = *v30;
          }
          *uint64_t v29 = v27;
          v29[1] = v16;
          v29[2] = v25 + 8 * v26;
          a3 = v20;
          if (v10) {
            operator delete(v10);
          }
          uint64_t v5 = v19;
          uint64_t v7 = v18;
          uint64_t v4 = v30;
        }
        else
        {
          void *v10 = v14;
          long long v16 = v10 + 1;
          p_p = v13;
        }
        v4[1] = v16;
        unint64_t v10 = v16;
      }
      uint64_t v31 = &unk_1F246D440;
      if (v33 < 0) {
        operator delete(__p);
      }
      v8 += 2;
    }
    while (v8 != v7);
  }
}

void sub_1CA294AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20)
  {
    *(void *)(a9 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::ontology::UsoGraph::getSuccessor(siri::ontology::UsoGraph *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  uint64_t v3 = *(void *)(*(void *)this + 24);
  uint64_t v4 = v3 + 56 * a2->var2;
  uint64_t v5 = *(void **)v4;
  unint64_t v6 = *(void **)(v4 + 8);
  if (*(void **)v4 == v6) {
    return 0;
  }
  while (!siri::ontology::UsoGraphEdge::operator==(v5[1] + 32, (uint64_t)a3))
  {
    v5 += 2;
    if (v5 == v6) {
      return 0;
    }
  }
  return *(void *)(v3 + 56 * *v5 + 48);
}

uint64_t siri::ontology::UsoGraphEdge::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = siri::ontology::operator==(a1 + 24, a2 + 24);
  if (result) {
    return *(void *)a1 == *(void *)a2
  }
        && *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t siri::ontology::UsoGraph::getPredecessor(siri::ontology::UsoGraph *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  uint64_t v3 = *(void *)(*(void *)this + 24);
  uint64_t v4 = v3 + 56 * a2->var2;
  uint64_t v5 = *(void **)(v4 + 24);
  unint64_t v6 = *(void **)(v4 + 32);
  if (v5 == v6) {
    return 0;
  }
  while (!siri::ontology::UsoGraphEdge::operator==(v5[1] + 32, (uint64_t)a3))
  {
    v5 += 2;
    if (v5 == v6) {
      return 0;
    }
  }
  return *(void *)(v3 + 56 * *v5 + 48);
}

void siri::ontology::UsoGraph::getSuccessorsWithEdges(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(void *)(*(void *)this + 24) + 56 * a2->var2;
  unint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  if (*(void **)v5 != v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 56 * *v6 + 48);
      uint64_t v10 = v6[1] + 32;
      unint64_t v11 = a3[2];
      if ((unint64_t)v8 >= v11)
      {
        std::string::size_type v13 = (void *)*a3;
        uint64_t v14 = ((uint64_t)v8 - *a3) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>,std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (void *)(v17 + 16 * v14);
        void *v19 = v9;
        v19[1] = v10;
        int v20 = v19;
        if (v8 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v8 - 1);
            v20 -= 2;
            v8 -= 2;
          }
          while (v8 != v13);
          uint64_t v8 = (void *)*a3;
        }
        uint64_t v12 = v19 + 2;
        *a3 = v20;
        a3[1] = v19 + 2;
        a3[2] = v17 + 16 * v18;
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v8 = v9;
        v8[1] = v10;
        uint64_t v12 = v8 + 2;
      }
      a3[1] = v12;
      v6 += 2;
      uint64_t v8 = v12;
    }
    while (v6 != v7);
  }
}

void sub_1CA294DDC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::getSuccessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(void *)(*(void *)this + 24) + 56 * a2->var2;
  unint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  if (*(void **)v5 != v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 56 * *v6 + 48);
      unint64_t v10 = a3[2];
      if ((unint64_t)v8 >= v10)
      {
        uint64_t v12 = (void *)*a3;
        uint64_t v13 = ((uint64_t)v8 - *a3) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (void *)(v16 + 8 * v13);
        void *v18 = v9;
        unint64_t v11 = v18 + 1;
        if (v8 != v12)
        {
          do
          {
            uint64_t v19 = *--v8;
            *--uint64_t v18 = v19;
          }
          while (v8 != v12);
          uint64_t v8 = (void *)*a3;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = v16 + 8 * v17;
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v8 = v9;
        unint64_t v11 = v8 + 1;
      }
      a3[1] = v11;
      v6 += 2;
      uint64_t v8 = v11;
    }
    while (v6 != v7);
  }
}

void sub_1CA294F38(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::getRepeatedSuccessorEdgeGroupsAsMap(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, uint64_t *a3@<X8>)
{
  siri::ontology::UsoGraph::getSuccessorsWithEdges(this, a2, &v59);
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_DWORD *)a3 + 8) = 1065353216;
  unint64_t v5 = v59;
  unint64_t v6 = v60;
  if (v59 == v60) {
    goto LABEL_133;
  }
  uint64_t v7 = a3 + 2;
  do
  {
    uint64_t v8 = v5[1];
    int v9 = *(_DWORD *)(v8 + 60);
    unint64_t v10 = a3[1];
    if (v10)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v3 = v9;
        if (v10 <= v9) {
          unint64_t v3 = v9 % v10;
        }
      }
      else
      {
        unint64_t v3 = (v10 - 1) & v9;
      }
      uint64_t v12 = *(void ***)(*a3 + 8 * v3);
      if (v12)
      {
        uint64_t v13 = *v12;
        if (*v12)
        {
          do
          {
            unint64_t v14 = v13[1];
            if (v14 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v9) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v10) {
                  v14 %= v10;
                }
              }
              else
              {
                v14 &= v10 - 1;
              }
              if (v14 != v3) {
                break;
              }
            }
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
      }
    }
    uint64_t v13 = operator new(0x30uLL);
    void *v13 = 0;
    v13[1] = v9;
    *((_DWORD *)v13 + 4) = v9;
    v13[4] = 0;
    v13[5] = 0;
    void v13[3] = 0;
    float v15 = (float)(unint64_t)(a3[3] + 1);
    float v16 = *((float *)a3 + 8);
    if (!v10 || (float)(v16 * (float)v10) < v15)
    {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
      if (v10 < 3) {
        BOOL v17 = 1;
      }
      unint64_t v18 = v17 | (2 * v10);
      unint64_t v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19) {
        int8x8_t prime = (int8x8_t)v19;
      }
      else {
        int8x8_t prime = (int8x8_t)v18;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v10 = a3[1];
      }
      if (*(void *)&prime > v10) {
        goto LABEL_31;
      }
      if (*(void *)&prime < v10)
      {
        unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
        if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
        {
          unint64_t v27 = std::__next_prime(v27);
        }
        else
        {
          uint64_t v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2) {
            unint64_t v27 = v29;
          }
        }
        if (*(void *)&prime <= v27) {
          int8x8_t prime = (int8x8_t)v27;
        }
        if (*(void *)&prime >= v10)
        {
          unint64_t v10 = a3[1];
        }
        else
        {
          if (prime)
          {
LABEL_31:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v21 = operator new(8 * *(void *)&prime);
            uint64_t v22 = (void *)*a3;
            *a3 = (uint64_t)v21;
            if (v22) {
              operator delete(v22);
            }
            uint64_t v23 = 0;
            a3[1] = (uint64_t)prime;
            do
              *(void *)(*a3 + 8 * v23++) = 0;
            while (*(void *)&prime != v23);
            uint64_t v24 = (void *)*v7;
            if (*v7)
            {
              unint64_t v25 = v24[1];
              uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                if (v25 >= *(void *)&prime) {
                  v25 %= *(void *)&prime;
                }
              }
              else
              {
                v25 &= *(void *)&prime - 1;
              }
              *(void *)(*a3 + 8 * v25) = v7;
              uint64_t v30 = (void *)*v24;
              if (*v24)
              {
                do
                {
                  unint64_t v31 = v30[1];
                  if (v26.u32[0] > 1uLL)
                  {
                    if (v31 >= *(void *)&prime) {
                      v31 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v31 &= *(void *)&prime - 1;
                  }
                  if (v31 != v25)
                  {
                    if (!*(void *)(*a3 + 8 * v31))
                    {
                      *(void *)(*a3 + 8 * v31) = v24;
                      goto LABEL_56;
                    }
                    void *v24 = *v30;
                    *uint64_t v30 = **(void **)(*a3 + 8 * v31);
                    **(void **)(*a3 + 8 * v31) = v30;
                    uint64_t v30 = v24;
                  }
                  unint64_t v31 = v25;
LABEL_56:
                  uint64_t v24 = v30;
                  uint64_t v30 = (void *)*v30;
                  unint64_t v25 = v31;
                }
                while (v30);
              }
            }
            unint64_t v10 = (unint64_t)prime;
            goto LABEL_60;
          }
          unint64_t v47 = (void *)*a3;
          *a3 = 0;
          if (v47) {
            operator delete(v47);
          }
          unint64_t v10 = 0;
          a3[1] = 0;
        }
      }
LABEL_60:
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9) {
          unint64_t v3 = v9 % v10;
        }
        else {
          unint64_t v3 = v9;
        }
      }
      else
      {
        unint64_t v3 = (v10 - 1) & v9;
      }
    }
    uint64_t v32 = *a3;
    char v33 = *(void **)(*a3 + 8 * v3);
    if (v33)
    {
      void *v13 = *v33;
LABEL_73:
      void *v33 = v13;
      goto LABEL_74;
    }
    void *v13 = *v7;
    *uint64_t v7 = v13;
    *(void *)(v32 + 8 * v3) = v7;
    if (*v13)
    {
      unint64_t v34 = *(void *)(*v13 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v34 >= v10) {
          v34 %= v10;
        }
      }
      else
      {
        v34 &= v10 - 1;
      }
      char v33 = (void *)(*a3 + 8 * v34);
      goto LABEL_73;
    }
LABEL_74:
    ++a3[3];
LABEL_75:
    uint64_t v36 = (void *)v13[4];
    unint64_t v35 = v13[5];
    if ((unint64_t)v36 >= v35)
    {
      uint64_t v37 = v13[3];
      uint64_t v38 = ((uint64_t)v36 - v37) >> 3;
      if ((unint64_t)(v38 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = v35 - v37;
      uint64_t v40 = v39 >> 2;
      if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
        uint64_t v40 = v38 + 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v41);
      }
      else {
        uint64_t v42 = 0;
      }
      std::string::size_type v43 = (void *)(v41 + 8 * v38);
      *std::string::size_type v43 = v8;
      unint64_t v3 = (unint64_t)(v43 + 1);
      uint64_t v45 = (char *)v13[3];
      uint64_t v44 = (char *)v13[4];
      if (v44 != v45)
      {
        do
        {
          uint64_t v46 = *((void *)v44 - 1);
          v44 -= 8;
          *--std::string::size_type v43 = v46;
        }
        while (v44 != v45);
        uint64_t v44 = (char *)v13[3];
      }
      void v13[3] = v43;
      v13[4] = v3;
      v13[5] = v41 + 8 * v42;
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *uint64_t v36 = v8;
      unint64_t v3 = (unint64_t)(v36 + 1);
    }
    v13[4] = v3;
    v5 += 2;
  }
  while (v5 != v6);
  unint64_t v48 = (void *)*v7;
  if (*v7)
  {
    while (1)
    {
      uint64_t v49 = (void *)*v48;
      if (v48[4] - v48[3] <= 0xFuLL) {
        break;
      }
LABEL_131:
      unint64_t v48 = v49;
      if (!v49) {
        goto LABEL_132;
      }
    }
    int8x8_t v50 = (int8x8_t)a3[1];
    unint64_t v51 = v48[1];
    uint8x8_t v52 = (uint8x8_t)vcnt_s8(v50);
    v52.i16[0] = vaddlv_u8(v52);
    if (v52.u32[0] > 1uLL)
    {
      if (v51 >= *(void *)&v50) {
        v51 %= *(void *)&v50;
      }
    }
    else
    {
      v51 &= *(void *)&v50 - 1;
    }
    uint64_t v53 = *(void **)(*a3 + 8 * v51);
    do
    {
      uint64_t v54 = v53;
      uint64_t v53 = (void *)*v53;
    }
    while (v53 != v48);
    if (v54 == v7) {
      goto LABEL_142;
    }
    unint64_t v55 = v54[1];
    if (v52.u32[0] > 1uLL)
    {
      if (v55 >= *(void *)&v50) {
        v55 %= *(void *)&v50;
      }
    }
    else
    {
      v55 &= *(void *)&v50 - 1;
    }
    unint64_t v56 = (void *)*v48;
    if (v55 == v51)
    {
LABEL_123:
      if (v56) {
        goto LABEL_124;
      }
    }
    else
    {
LABEL_142:
      if (!v49) {
        goto LABEL_122;
      }
      unint64_t v57 = v49[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v57 >= *(void *)&v50) {
          v57 %= *(void *)&v50;
        }
      }
      else
      {
        v57 &= *(void *)&v50 - 1;
      }
      unint64_t v56 = (void *)*v48;
      if (v57 != v51)
      {
LABEL_122:
        *(void *)(*a3 + 8 * v51) = 0;
        unint64_t v56 = (void *)*v48;
        goto LABEL_123;
      }
LABEL_124:
      unint64_t v58 = v56[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v58 >= *(void *)&v50) {
          v58 %= *(void *)&v50;
        }
      }
      else
      {
        v58 &= *(void *)&v50 - 1;
      }
      if (v58 != v51)
      {
        *(void *)(*a3 + 8 * v58) = v54;
        unint64_t v56 = (void *)*v48;
      }
    }
    *uint64_t v54 = v56;
    *unint64_t v48 = 0;
    --a3[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](1, v48);
    goto LABEL_131;
  }
LABEL_132:
  unint64_t v5 = v59;
LABEL_133:
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_1CA2955B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](1, v11);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void siri::ontology::UsoGraph::getPredecessors(siri::ontology::UsoGraph *this@<X0>, const UsoGraphNode *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)this;
  unint64_t v5 = *(void *)(*(void *)this + 24) + 56 * a2->var2;
  unint64_t v6 = *(void **)(v5 + 24);
  uint64_t v7 = *(void **)(v5 + 32);
  if (v6 != v7)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 56 * *v6 + 48);
      unint64_t v10 = a3[2];
      if ((unint64_t)v8 >= v10)
      {
        uint64_t v12 = (void *)*a3;
        uint64_t v13 = ((uint64_t)v8 - *a3) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v18 = (void *)(v16 + 8 * v13);
        void *v18 = v9;
        uint8x8_t v11 = v18 + 1;
        if (v8 != v12)
        {
          do
          {
            uint64_t v19 = *--v8;
            *--unint64_t v18 = v19;
          }
          while (v8 != v12);
          uint64_t v8 = (void *)*a3;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = v16 + 8 * v17;
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v8 = v9;
        uint8x8_t v11 = v8 + 1;
      }
      a3[1] = v11;
      v6 += 2;
      uint64_t v8 = v11;
    }
    while (v6 != v7);
  }
}

void sub_1CA2957F4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::setSuccessor(void *a1, uint64_t a2, void *a3, const UsoGraphNode *a4)
{
  uint64_t v8 = a1 + 6;
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(a1 + 6, (unint64_t)a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&v83, "OntologyException");
    (*(void (**)(std::string *__return_ptr, void *))(*a3 + 48))(&v98, a3);
    uint8x8_t v26 = std::string::insert(&v98, 0, "Attempting to process a node not owned by this graph: ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    std::string::size_type v100 = v26->__r_.__value_.__r.__words[2];
    long long v99 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v83, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 372, "setSuccessor", (uint64_t)&v99);
  }
  if (!std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::find<siri::ontology::UsoGraphNode const*>(v8, (unint64_t)a4))
  {
    std::string::basic_string[abi:ne180100]<0>(&v83, "OntologyException");
    (*((void (**)(std::string *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(&v98, a4);
    uint8x8_t v28 = std::string::insert(&v98, 0, "Attempting to process a node not owned by this graph: ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    std::string::size_type v97 = v28->__r_.__value_.__r.__words[2];
    long long v96 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v83, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 377, "setSuccessor", (uint64_t)&v96);
  }
  if (((*(uint64_t (**)(void *, const UsoGraphNode *, uint64_t))(*a3 + 24))(a3, a4, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v83, "OntologyException");
    (*(void (**)(std::string *__return_ptr, void *))(*a3 + 48))(&v90, a3);
    uint64_t v30 = std::string::insert(&v90, 0, "Grammatically invalid (source, edge, sucessor) tuple: ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v91, ", ");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
    }
    else {
      std::string v89 = *(std::string *)(a2 + 32);
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v47 = &v89;
    }
    else {
      unint64_t v47 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v89.__r_.__value_.__l.__size_;
    }
    uint64_t v49 = std::string::append(&v92, (const std::string::value_type *)v47, size);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    unint64_t v51 = std::string::append(&v93, ", ");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    (*((void (**)(std::string *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(&v88, a4);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v53 = &v88;
    }
    else {
      uint64_t v53 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = v88.__r_.__value_.__l.__size_;
    }
    unint64_t v55 = std::string::append(&v98, (const std::string::value_type *)v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    std::string::size_type v95 = v55->__r_.__value_.__r.__words[2];
    long long v94 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v83, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 382, "setSuccessor", (uint64_t)&v94);
  }
  uint64_t v9 = (uint64_t *)*a1;
  unint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(*a1 + 24);
  uint64_t v12 = (uint64_t *)(v11 + 56 * v10);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 != v14)
  {
    do
    {
      uint64_t v15 = *(void *)(v13 + 8);
      long long v83 = *(_OWORD *)(v15 + 32);
      int v84 = *(_DWORD *)(v15 + 48);
      int v85 = &unk_1F246D440;
      if (*(char *)(v15 + 87) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 64), *(void *)(v15 + 72));
      }
      else {
        std::string __p = *(std::string *)(v15 + 64);
      }
      uint64_t v87 = *(void *)(v15 + 88);
      int v85 = &unk_1F246D478;
      if (siri::ontology::UsoGraphEdge::operator==((uint64_t)&v83, a2))
      {
        std::string::basic_string[abi:ne180100]<0>(&v98, "OntologyException");
        (*((void (**)(std::string *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(&v93, a4);
        int v20 = std::string::insert(&v93, 0, "Can't add a successor with the same edge ");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        std::string::size_type v82 = v20->__r_.__value_.__r.__words[2];
        long long v81 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v98, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 392, "setSuccessor", (uint64_t)&v81);
      }
      int v85 = &unk_1F246D440;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v13 += 16;
    }
    while (v13 != v14);
    unint64_t v10 = a3[2];
    uint64_t v9 = (uint64_t *)*a1;
    uint64_t v11 = *(void *)(*a1 + 24);
  }
  unint64_t var2 = a4->var2;
  if (v10 <= var2) {
    unint64_t v17 = a4->var2;
  }
  else {
    unint64_t v17 = v10;
  }
  if (v17 >= 0x6DB6DB6DB6DB6DB7 * ((v9[4] - v11) >> 3)) {
    std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::resize(v9 + 3, v17 + 1);
  }
  boost::add_edge<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config>((uint64_t)&v83, v10, var2, (long long *)a2, v9);
  if ((*((unsigned int (**)(const UsoGraphNode *))a4->var0 + 2))(a4) == 5)
  {
    siri::ontology::UsoGraph::getSuccessorsWithEdges((siri::ontology::UsoGraph *)a4->var1, a4, &v83);
    long long v18 = v83;
    if ((void)v83 != *((void *)&v83 + 1))
    {
      uint64_t v19 = (void *)v83;
      do
      {
        if (((*((uint64_t (**)(const UsoGraphNode *, void, void))a4->var0 + 3))(a4, *v19, v19[1]) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v98, "OntologyException");
          (*(void (**)(std::string *__return_ptr, void *))(*a3 + 48))(&v75, a3);
          uint64_t v22 = std::string::insert(&v75, 0, "Grammatically invalid operator connection: (");
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          uint64_t v24 = std::string::append(&v76, ", ");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v77.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 55) < 0) {
            std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
          }
          else {
            std::string v74 = *(std::string *)(a2 + 32);
          }
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v34 = &v74;
          }
          else {
            unint64_t v34 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v35 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v35 = v74.__r_.__value_.__l.__size_;
          }
          uint64_t v36 = std::string::append(&v77, (const std::string::value_type *)v34, v35);
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v78.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          uint64_t v38 = std::string::append(&v78, ", ");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          (*((void (**)(void *__return_ptr, const UsoGraphNode *))a4->var0 + 6))(v72, a4);
          if ((v73 & 0x80u) == 0) {
            uint64_t v40 = (const std::string::value_type *)v72;
          }
          else {
            uint64_t v40 = (const std::string::value_type *)v72[0];
          }
          if ((v73 & 0x80u) == 0) {
            std::string::size_type v41 = v73;
          }
          else {
            std::string::size_type v41 = v72[1];
          }
          uint64_t v42 = std::string::append(&v88, v40, v41);
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          uint64_t v44 = std::string::append(&v89, ", ");
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v90.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          uint64_t v46 = v19[1];
          if (*(char *)(v46 + 55) < 0) {
            std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v46 + 32), *(void *)(v46 + 40));
          }
          else {
            std::string v71 = *(std::string *)(v46 + 32);
          }
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v57 = &v71;
          }
          else {
            unint64_t v57 = (std::string *)v71.__r_.__value_.__r.__words[0];
          }
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v58 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v58 = v71.__r_.__value_.__l.__size_;
          }
          char v59 = std::string::append(&v90, (const std::string::value_type *)v57, v58);
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v91.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          uint64_t v61 = std::string::append(&v91, ", ");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          (*(void (**)(void *__return_ptr))(*(void *)*v19 + 48))(v69);
          if ((v70 & 0x80u) == 0) {
            uint64_t v63 = (const std::string::value_type *)v69;
          }
          else {
            uint64_t v63 = (const std::string::value_type *)v69[0];
          }
          if ((v70 & 0x80u) == 0) {
            std::string::size_type v64 = v70;
          }
          else {
            std::string::size_type v64 = v69[1];
          }
          uint64_t v65 = std::string::append(&v92, v63, v64);
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          int64_t v67 = std::string::append(&v93, ")");
          long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          std::string::size_type v80 = v67->__r_.__value_.__r.__words[2];
          long long v79 = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          siri::ontology::throwException<siri::ontology::OntologyException,char const*,int,char const*,std::string>((uint64_t)&v98, "/Library/Caches/com.apple.xbs/Sources/SiriOntology/SiriOntology/nlv4/cpp/core/graph/UsoGraph.cpp", 405, "setSuccessor", (uint64_t)&v79);
        }
        v19 += 2;
      }
      while (v19 != *((void **)&v18 + 1));
    }
    if ((void)v18) {
      operator delete((void *)v18);
    }
  }
}

void sub_1CA29612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v82 - 233) < 0) {
    operator delete(*(void **)(v82 - 256));
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v82 - 137) < 0) {
    operator delete(*(void **)(v82 - 160));
  }
  if (v81) {
    operator delete(v81);
  }
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::getNodes(siri::ontology::UsoGraph *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  unint64_t v3 = (uint64_t *)*((void *)this + 4);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v9 = (void *)*a2;
        uint64_t v10 = ((uint64_t)v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void *)(v13 + 8 * v10);
        void *v15 = v6;
        uint64_t v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *--v5;
            *--uint64_t v15 = v16;
          }
          while (v5 != v9);
          unint64_t v5 = (void *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        void *v5 = v6;
        uint64_t v8 = v5 + 1;
      }
      a2[1] = v8;
      ++v2;
      unint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA296560(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::getEdges(siri::ontology::UsoGraph *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 8);
  if (v3 != *(void *)this)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v3 + 32;
      unint64_t v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        uint64_t v9 = (void *)*a2;
        uint64_t v10 = ((uint64_t)v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void *)(v13 + 8 * v10);
        void *v15 = v6;
        uint64_t v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *--v5;
            *--uint64_t v15 = v16;
          }
          while (v5 != v9);
          unint64_t v5 = (void *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        void *v5 = v6;
        uint64_t v8 = v5 + 1;
      }
      a2[1] = v8;
      uint64_t v3 = *(void *)(v3 + 8);
      unint64_t v5 = v8;
    }
    while (v3 != v2);
  }
}

void sub_1CA29669C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::findNode(siri::ontology::UsoGraph *this, const UsoGraphNode *a2, const siri::ontology::OntologyUnitName *a3)
{
}

void sub_1CA296A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  boost::detail::shared_count::~shared_count(v21);
  boost::detail::shared_count::~shared_count(v19);
  boost::detail::shared_count::~shared_count(v20);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&a19);
  boost::detail::shared_count::~shared_count(a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1CA2969E4);
  }
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<unsigned char *,boost::checked_array_deleter<unsigned char>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1CA296B58(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x1CB7964F0](v1, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_1CA296B80(_Unwind_Exception *a1)
{
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (*this && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t siri::ontology::FindTargetVisitor::discover_vertex(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)(*(void *)(a3 + 24) + 56 * a2 + 48);
  if (v3)
  {
    uint64_t v4 = result;
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = siri::ontology::operator==(v5[13], *(void *)(v4 + 8));
      if (result)
      {
        exception = __cxa_allocate_exception(8uLL);
        uint64_t v8 = v6[2];
        goto LABEL_9;
      }
    }
    else
    {
      if (result)
      {
        uint64_t v9 = result;
        uint64_t result = siri::ontology::operator==(*(void *)(result + 24), *(void *)(v4 + 8));
        if (result)
        {
          exception = __cxa_allocate_exception(8uLL);
          uint64_t v8 = *(void *)(v9 + 16);
LABEL_9:
          void *exception = v8;
        }
      }
    }
  }
  return result;
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      a1[4] = v8 - 512;
      uint64_t v12 = *(void *)v5;
      uint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          long long v45 = (uint64_t *)a1[1];
          uint64_t v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            unint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)unint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          long long v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          int v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            uint64_t v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            uint64_t v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      unint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    uint64_t v24 = (char *)a1[3];
    long long v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      long long v27 = operator new(0x1000uLL);
      uint8x8_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v51);
          unint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v55 = (uint64_t *)a1[1];
          long long v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            long long v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            char v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)char v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            unint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        long long v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            std::string::size_type v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v96);
            long long v99 = &v97[8 * (v96 >> 2)];
            std::string::size_type v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            uint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            std::string v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              long long v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)uint64_t v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v29);
    uint64_t v32 = v31;
    long long v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v109 = v34;
    std::string::size_type v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v109;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      std::string v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v74);
      long long v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v106 = v36;
      long long v109 = v38;
      operator delete(v30);
      long long v36 = v106;
    }
    long long v38 = v109;
LABEL_56:
    *(void *)long long v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      std::string v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        std::string::size_type v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          int v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v85);
          long long v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          std::string v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            std::string v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            std::string v91 = v79;
            std::string v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)std::string v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v107 = v36;
            long long v111 = v38;
            operator delete(v78);
            long long v36 = v107;
            long long v38 = v111;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          long long v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            std::string::size_type v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v108 = *((void *)&v36 + 1);
            uint64_t v110 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v108;
            *(void *)&long long v38 = v110;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        long long v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    std::string::size_type v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1CA297360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::get_local_deleter()
{
  return 0;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001CA3F5451)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    JUMPOUT(0x1CB7964F0);
  }
  return result;
}

void boost::detail::sp_counted_impl_pd<unsigned char *,boost::checked_array_deleter<unsigned char>>::~sp_counted_impl_pd()
{
}

void siri::ontology::UsoGraph::deepCopyToGraph(siri::ontology::UsoGraph *this, const siri::ontology::UsoGraphNode *a2, siri::ontology::UsoGraph *a3)
{
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  uint64_t v5 = (*(uint64_t (**)(const siri::ontology::UsoGraphNode *, siri::ontology::UsoGraph *))(*(void *)a2 + 40))(a2, a3);
  *(void *)&long long v9 = *((void *)a2 + 2);
  *((void *)&v9 + 1) = v5;
  std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,siri::ontology::UsoGraphNode &>>((float *)v6, v9, &v9);
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7
     * ((uint64_t)(*(void *)(*(void *)this + 32) - *(void *)(*(void *)this + 24)) >> 3);
  operator new[]();
}

void sub_1CA297914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint **a11, atomic_uint **a12, atomic_uint **a13, atomic_uint **a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,siri::ontology::UsoGraphNode &>>(float *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v5;
  *((_OWORD *)v12 + 1) = *a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      long long v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  int v20 = *(void **)a1;
  *(void *)a1 = v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*((void *)a1 + 2);
  if (v22)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
    uint8x8_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*(void *)a1 + 8 * v29))
          {
            *(void *)(*(void *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *uint64_t v22 = *v28;
          *uint8x8_t v28 = **(void **)(*(void *)a1 + 8 * v29);
          **(void **)(*(void *)a1 + 8 * v29) = v28;
          uint8x8_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        uint8x8_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *(void **)a1;
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v5);
  if (v31)
  {
    void *v12 = *v31;
LABEL_72:
    *uint64_t v31 = v12;
    goto LABEL_73;
  }
  void *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v30[v5] = a1 + 4;
  if (*v12)
  {
    unint64_t v32 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_1CA297D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::find<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void siri::ontology::CopyGraphVisitor::tree_edge(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::find<unsigned long long>(*(void **)(a1 + 16), *a2);
  if (!v6) {
    __assert_rtn("tree_edge", "UsoGraph.cpp", 1395, "edgeSourceNodeInTargetGraph != mSourceToCopiedNodeMap.end()");
  }
  unint64_t v7 = v6;
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) + 56 * a2[1] + 48);
  if (!v8) {
    __assert_rtn("tree_edge", "UsoGraph.cpp", 1399, "targetNode");
  }
  long long v9 = (const UsoGraphNode *)(*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 40))(v8, *(void *)(a1 + 8));
  uint64_t v10 = *(float **)(a1 + 16);
  *(void *)&long long v14 = a2[1];
  *((void *)&v14 + 1) = v9;
  std::__hash_table<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,siri::ontology::UsoGraphNode &>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,siri::ontology::UsoGraphNode &>>(v10, v14, &v14);
  unint64_t v11 = a2[2];
  int v12 = *(_DWORD *)(v11 + 16);
  long long v14 = *(_OWORD *)v11;
  int v15 = v12;
  unint64_t v16 = &unk_1F246D440;
  if (*(char *)(v11 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 32), *(void *)(v11 + 40));
  }
  else
  {
    long long v13 = *(_OWORD *)(v11 + 32);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v11 + 48);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  }
  uint64_t v18 = *(void *)(v11 + 56);
  unint64_t v16 = &unk_1F246D478;
  siri::ontology::UsoGraphNode::setSuccessor((siri::ontology::UsoGraphNode *)v7[3], (const siri::ontology::OntologyEdgeName *)&v16, v9, 0);
  unint64_t v16 = &unk_1F246D440;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1CA297FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraphNode::setSuccessor(siri::ontology::UsoGraphNode *this, const siri::ontology::OntologyEdgeName *a2, const UsoGraphNode *a3, int a4)
{
  uint64_t v6 = (void *)*((void *)this + 1);
  siri::ontology::UsoGraphEdge::UsoGraphEdge((siri::ontology::UsoGraphEdge *)v7, a2, *((void *)this + 2), a3->var2, a4);
  siri::ontology::UsoGraph::setSuccessor(v6, (uint64_t)v7, this, a3);
  v7[3] = &unk_1F246D440;
  if (v8 < 0) {
    operator delete((void *)v7[4]);
  }
}

void sub_1CA298064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoGraph::prettyPrint(uint64_t *a1, void *a2)
{
  memset(v14, 0, sizeof(v14));
  int v15 = 1065353216;
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Root\n", 5);
  uint64_t v4 = *a1;
  *((void *)&__p + 1) = a2;
  int v6 = 4;
  unint64_t v7 = v14;
  char v8 = v12;
  long long v9 = v10;
  boost::graph::detail::depth_first_search_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>>::operator()<boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor,siri::ontology::PrintGraphVisitor const>,boost::parameter::aux::empty_arg_list,std::integral_constant<BOOL,true>>>(v4, &__p);
}

void sub_1CA298444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&a20);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table(v26 - 128);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1CB796340](v23, a1);
  if (v23[0])
  {
    int v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      int v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1CB796350](v23);
  return a1;
}

void sub_1CA298740(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796350](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1CA298714);
}

void sub_1CA2987AC(_Unwind_Exception *a1)
{
}

void boost::graph::detail::depth_first_search_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>>::operator()<boost::parameter::aux::arg_list<boost::parameter::aux::tagged_argument<boost::graph::keywords::tag::visitor,siri::ontology::PrintGraphVisitor const>,boost::parameter::aux::empty_arg_list,std::integral_constant<BOOL,true>>>(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v3 = *a2;
  long long v4 = v2;
  long long v5 = a2[2];
  operator new[]();
}

void sub_1CA2989C8(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v2);
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoIdentifier::toString(siri::ontology::UsoIdentifier *this)
{
}

void sub_1CA298E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoUtteranceAlignment::toString(siri::ontology::UsoUtteranceAlignment *this)
{
}

void sub_1CA2990D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntitySpan::toString(siri::ontology::UsoEntitySpan *this)
{
}

void sub_1CA29992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1CA299BC0(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1CB796460](v1);
  _Unwind_Resume(a1);
}

void siri::ontology::MatchInfo::toString(siri::ontology::MatchInfo *this)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  {
    LODWORD(__p[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p[1], "ExactMatch");
    int v3 = 2;
    std::string::basic_string[abi:ne180100]<0>(v4, "PartialMatch");
    int v5 = 4;
    std::string::basic_string[abi:ne180100]<0>(v6, "ApproximateMatch");
    int v7 = 8;
    std::string::basic_string[abi:ne180100]<0>(v8, "AliasMatch");
    std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::vector[abi:ne180100]((uint64_t)__p, 4uLL);
    for (uint64_t i = 0; i != -16; i -= 4)
    {
      if (SHIBYTE(v8[i + 2]) < 0) {
        operator delete((void *)v8[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::~vector[abi:ne180100], &siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS, &dword_1C9F14000);
  }
  operator new();
}

void sub_1CA29A4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v23 = 0;
  while (1)
  {
    if (*(char *)(v21 + v23 + 127) < 0) {
      operator delete(*(void **)(v21 + v23 + 104));
    }
    v23 -= 32;
    if (v23 == -128)
    {
      _Unwind_Resume(a1);
    }
  }
}

void siri::ontology::SpanProperty::toString(siri::ontology::SpanProperty *this)
{
}

void sub_1CA29A83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void siri::ontology::AsrAlternative::toString(siri::ontology::AsrAlternative *this)
{
}

void sub_1CA29A9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::vector[abi:ne180100](uint64_t result, unint64_t a2)
{
  siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS = 0;
  qword_1EA5E19D0 = 0;
  qword_1EA5E19D8 = 0;
  if (a2)
  {
    if (a2 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = result;
    siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS = (uint64_t)operator new(32 * a2);
    qword_1EA5E19D0 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    qword_1EA5E19D8 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS + 32 * a2;
    uint64_t v12 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    uint64_t v13 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    uint64_t v4 = v3 + 32 * a2;
    v10[0] = &qword_1EA5E19D8;
    v10[1] = &v12;
    _OWORD v10[2] = &v13;
    uint64_t v5 = v3 + 8;
    uint64_t v6 = siri::ontology::MatchInfo::toString(void)const::MATCH_SIGNAL_BITSET_PAIRS;
    char v11 = 0;
    do
    {
      uint64_t v7 = v5 - 8;
      *(_DWORD *)uint64_t v6 = *(_DWORD *)(v5 - 8);
      int v8 = (std::string *)(v6 + 8);
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
        uint64_t v6 = v13;
      }
      else
      {
        long long v9 = *(_OWORD *)v5;
        *(void *)(v6 + 24) = *(void *)(v5 + 16);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v6 += 32;
      uint64_t v13 = v6;
      v5 += 32;
    }
    while (v7 + 32 != v4);
    char v11 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>,std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    qword_1EA5E19D0 = v6;
  }
  return result;
}

void sub_1CA29AB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::vector<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>>,std::pair<siri::ontology::MatchInfo::MatchSignalBitFlags,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 32;
    }
  }
  return a1;
}

void siri::ontology::UsoUtteranceSpan::toString(siri::ontology::UsoUtteranceSpan *this)
{
}

void sub_1CA29AFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t boost::shared_array<boost::default_color_type>::operator[](uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v3 = "px != 0";
    int v4 = 199;
    goto LABEL_6;
  }
  if (a2 < 0)
  {
    uint64_t v3 = "i >= 0";
    int v4 = 200;
LABEL_6:
    __assert_rtn("operator[]", "shared_array.hpp", v4, v3);
  }
  return a1 + 4 * a2;
}

void boost::detail::depth_first_visit_impl<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,siri::ontology::PrintGraphVisitor,boost::shared_array_property_map<boost::default_color_type,boost::vec_adj_list_vertex_id_map<siri::ontology::UsoGraphNode *,unsigned long>>,boost::detail::nontruth2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, a2) = 1;
  uint64_t v7 = (uint64_t *)(*(void *)(a1 + 24) + 56 * a2);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v32 = a2;
  char v33 = 0;
  *(void *)&long long v36 = v9;
  *((void *)&v36 + 1) = a2;
  *(void *)&long long v37 = v8;
  *((void *)&v37 + 1) = a2;
  uint64_t v10 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v29, (uint64_t)&v32);
  uint64_t v30 = v10;
  char v11 = v29;
  if (v29 != v10)
  {
    uint64_t v12 = v10;
    do
    {
      uint64_t v14 = *((void *)v12 - 9);
      v12 -= 72;
      uint64_t v13 = v14;
      if (v12[8]) {
        *(v10 - 64) = 0;
      }
      size_t v16 = (uint64_t *)*((void *)v12 + 5);
      uint64_t v15 = *((void *)v12 + 6);
      uint64_t v18 = (uint64_t *)*((void *)v12 + 7);
      uint64_t v17 = *((void *)v12 + 8);
      uint64_t v30 = v12;
      if (v16 != v18)
      {
        do
        {
          uint64_t v19 = *v16;
          if (*(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, *v16))
          {
            v16 += 2;
          }
          else
          {
            uint64_t v20 = *v16;
            uint64_t v21 = v16[1] + 32;
            v28[0] = v15;
            v28[1] = v20;
            v28[2] = v21;
            siri::ontology::PrintGraphVisitor::tree_edge(a3, (uint64_t)v28, a1);
            uint64_t v22 = *v16;
            uint64_t v23 = v16[1] + 32;
            uint64_t v32 = v13;
            *(void *)&long long v34 = v15;
            *((void *)&v34 + 1) = v22;
            char v33 = 1;
            uint64_t v35 = v23;
            *(void *)&long long v36 = v16 + 2;
            *((void *)&v36 + 1) = v15;
            *(void *)&long long v37 = v18;
            *((void *)&v37 + 1) = v17;
            if ((unint64_t)v12 >= v31)
            {
              uint64_t v12 = std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>((void **)&v29, (uint64_t)&v32);
            }
            else
            {
              *(void *)uint64_t v12 = v13;
              v12[8] = 0;
              if (v33)
              {
                long long v24 = v34;
                *((void *)v12 + 4) = v35;
                *((_OWORD *)v12 + 1) = v24;
                v12[8] = 1;
              }
              long long v25 = v36;
              *(_OWORD *)(v12 + 56) = v37;
              *(_OWORD *)(v12 + 40) = v25;
              v12 += 72;
            }
            uint64_t v30 = v12;
            *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v19) = 1;
            uint64_t v26 = *(void *)(a1 + 24) + 56 * v19;
            size_t v16 = *(uint64_t **)v26;
            uint64_t v18 = *(uint64_t **)(v26 + 8);
            uint64_t v15 = v19;
            uint64_t v17 = v19;
            uint64_t v13 = v19;
          }
        }
        while (v16 != v18);
        char v11 = v29;
      }
      *(_DWORD *)boost::shared_array<boost::default_color_type>::operator[](*a4, v13) = 4;
      *(_DWORD *)(a3 + 16) -= 4;
      uint64_t v10 = v12;
    }
    while (v11 != v12);
  }
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

void sub_1CA29B2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:ne180100]((char **)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__push_back_slow_path<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - v3) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v8 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(72 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[72 * v4];
  *(void *)uint64_t v10 = *(void *)a2;
  v10[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    char v11 = &v9[72 * v4];
    *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v11 + 4) = *(void *)(a2 + 32);
    v10[8] = 1;
  }
  uint64_t v12 = &v9[72 * v8];
  uint64_t v13 = &v9[72 * v4];
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v14 = v10 + 72;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      size_t v16 = &v10[v15];
      uint64_t v17 = &v2[v15];
      *((void *)v16 - 9) = *(void *)&v2[v15 - 72];
      *(v16 - 64) = 0;
      if (v2[v15 - 64])
      {
        long long v18 = *(_OWORD *)(v17 - 56);
        *((void *)v16 - 5) = *((void *)v17 - 5);
        *(_OWORD *)(v16 - 56) = v18;
        *(v16 - 64) = 1;
      }
      long long v19 = *((_OWORD *)v17 - 1);
      *((_OWORD *)v16 - 2) = *((_OWORD *)v17 - 2);
      *((_OWORD *)v16 - 1) = v19;
      v15 -= 72;
    }
    while (&v2[v15] != v3);
    uint64_t v20 = &v10[v15];
    uint64_t v2 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    *a1 = v20;
    a1[1] = v14;
    a1[2] = v12;
    while (v21 != v2)
    {
      if (*(v21 - 64)) {
        *(v21 - 64) = 0;
      }
      v21 -= 72;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void siri::ontology::PrintGraphVisitor::tree_edge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(long long **)(a2 + 16);
  unint64_t v5 = *(void **)(*(void *)(a3 + 24) + 56 * *(void *)(a2 + 8) + 48);
  int v6 = *((_DWORD *)v4 + 4);
  long long v118 = *v4;
  int v119 = v6;
  std::string::size_type v7 = (std::string::size_type)&unk_1F246D440;
  uint64_t v120 = &unk_1F246D440;
  unint64_t v8 = (unint64_t)&v121;
  if (*((char *)v4 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&v121, *((const std::string::value_type **)v4 + 4), *((void *)v4 + 5));
  }
  else
  {
    long long v9 = v4[2];
    v121.__r_.__value_.__r.__words[2] = *((void *)v4 + 6);
    *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v122 = *((void *)v4 + 7);
  uint64_t v120 = &unk_1F246D478;
  if (*(_DWORD *)(a1 + 16))
  {
    unsigned int v10 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)" ", 1);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a1 + 16));
  }
  char v11 = *(void **)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v113, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  }
  else {
    std::string v113 = v121;
  }
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v113;
  }
  else {
    uint64_t v12 = (std::string *)v113.__r_.__value_.__r.__words[0];
  }
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v113.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
  (*(void (**)(void **__return_ptr, void *))(*v5 + 48))(&__p, v5);
  if ((v117 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v117 & 0x80u) == 0) {
    uint64_t v15 = v117;
  }
  else {
    uint64_t v15 = (uint64_t)v116;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v15);
  if ((char)v117 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  unint64_t v16 = v5[2];
  if (v17)
  {
    long long v18 = v17;
    siri::ontology::UsoEntityNode::getIdentifiers(v17, &__p);
    if (__p == v116)
    {
      int v22 = 0;
      goto LABEL_105;
    }
    long long v19 = *(uint64_t **)(a1 + 24);
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v16;
    v113.__r_.__value_.__r.__words[2] = 0;
    uint64_t v114 = 0;
    std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoIdentifier>*,std::reference_wrapper<siri::ontology::UsoIdentifier>*>(&v113.__r_.__value_.__l.__size_, __p, (uint64_t)v116, (v116 - (unsigned char *)__p) >> 3);
    std::string::size_type v20 = v113.__r_.__value_.__r.__words[0];
    unint64_t v8 = v19[1];
    if (v8)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        std::string::size_type v7 = v113.__r_.__value_.__r.__words[0];
        if (v113.__r_.__value_.__r.__words[0] >= v8) {
          std::string::size_type v7 = v113.__r_.__value_.__r.__words[0] % v8;
        }
      }
      else
      {
        std::string::size_type v7 = (v8 - 1) & v113.__r_.__value_.__r.__words[0];
      }
      uint64_t v23 = *(void **)(*v19 + 8 * v7);
      if (v23)
      {
        for (uint64_t i = (void *)*v23; i; uint64_t i = (void *)*i)
        {
          unint64_t v25 = i[1];
          if (v25 == v113.__r_.__value_.__r.__words[0])
          {
            if (i[2] == v113.__r_.__value_.__r.__words[0]) {
              goto LABEL_102;
            }
          }
          else
          {
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= v8) {
                v25 %= v8;
              }
            }
            else
            {
              v25 &= v8 - 1;
            }
            if (v25 != v7) {
              break;
            }
          }
        }
      }
    }
    uint64_t v26 = (char *)operator new(0x30uLL);
    uint64_t v110 = v19 + 2;
    *(void *)uint64_t v26 = 0;
    *((void *)v26 + 1) = v20;
    *((void *)v26 + 2) = v20;
    *(_OWORD *)(v26 + 24) = *(_OWORD *)&v113.__r_.__value_.__r.__words[1];
    *((void *)v26 + 5) = v114;
    uint64_t v114 = 0;
    *(_OWORD *)&v113.__r_.__value_.__r.__words[1] = 0uLL;
    float v27 = (float)(unint64_t)(v19[3] + 1);
    float v28 = *((float *)v19 + 8);
    if (v8 && (float)(v28 * (float)v8) >= v27)
    {
LABEL_92:
      uint64_t v44 = *v19;
      long long v45 = *(void **)(*v19 + 8 * v7);
      if (v45)
      {
        *(void *)uint64_t v26 = *v45;
      }
      else
      {
        *(void *)uint64_t v26 = *v110;
        *uint64_t v110 = v26;
        *(void *)(v44 + 8 * v7) = v110;
        if (!*(void *)v26) {
          goto LABEL_101;
        }
        unint64_t v46 = *(void *)(*(void *)v26 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v46 >= v8) {
            v46 %= v8;
          }
        }
        else
        {
          v46 &= v8 - 1;
        }
        long long v45 = (void *)(*v19 + 8 * v46);
      }
      *long long v45 = v26;
LABEL_101:
      ++v19[3];
LABEL_102:
      if (v113.__r_.__value_.__l.__size_) {
        operator delete((void *)v113.__r_.__value_.__l.__size_);
      }
      int v22 = 1;
      std::string::size_type v7 = (std::string::size_type)&unk_1F246D440;
LABEL_105:
      uint64_t v47 = (uint64_t *)*((void *)v18 + 7);
      if (v47 == *((uint64_t **)v18 + 8)) {
        goto LABEL_180;
      }
      unint64_t v48 = *(float **)(a1 + 32);
      uint64_t v49 = *v47;
      unint64_t v50 = *((void *)v48 + 1);
      if (v50)
      {
        uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
        v51.i16[0] = vaddlv_u8(v51);
        if (v51.u32[0] > 1uLL)
        {
          unint64_t v8 = v16;
          if (v16 >= v50) {
            unint64_t v8 = v16 % v50;
          }
        }
        else
        {
          unint64_t v8 = (v50 - 1) & v16;
        }
        uint64_t v52 = *(void **)(*(void *)v48 + 8 * v8);
        if (v52)
        {
          for (j = (void *)*v52; j; j = (void *)*j)
          {
            unint64_t v54 = j[1];
            if (v54 == v16)
            {
              if (j[2] == v16) {
                goto LABEL_179;
              }
            }
            else
            {
              if (v51.u32[0] > 1uLL)
              {
                if (v54 >= v50) {
                  v54 %= v50;
                }
              }
              else
              {
                v54 &= v50 - 1;
              }
              if (v54 != v8) {
                break;
              }
            }
          }
        }
      }
      unint64_t v55 = operator new(0x20uLL);
      *unint64_t v55 = 0;
      v55[1] = v16;
      v55[2] = v16;
      v55[3] = v49;
      float v56 = (float)(unint64_t)(*((void *)v48 + 3) + 1);
      float v57 = v48[8];
      if (v50 && (float)(v57 * (float)v50) >= v56)
      {
LABEL_169:
        uint64_t v73 = *(void **)v48;
        unint64_t v74 = *(void **)(*(void *)v48 + 8 * v8);
        if (v74)
        {
          *unint64_t v55 = *v74;
        }
        else
        {
          *unint64_t v55 = *((void *)v48 + 2);
          *((void *)v48 + 2) = v55;
          v73[v8] = v48 + 4;
          if (!*v55) {
            goto LABEL_178;
          }
          unint64_t v75 = *(void *)(*v55 + 8);
          if ((v50 & (v50 - 1)) != 0)
          {
            if (v75 >= v50) {
              v75 %= v50;
            }
          }
          else
          {
            v75 &= v50 - 1;
          }
          unint64_t v74 = (void *)(*(void *)v48 + 8 * v75);
        }
        *unint64_t v74 = v55;
LABEL_178:
        ++*((void *)v48 + 3);
LABEL_179:
        int v22 = 1;
LABEL_180:
        siri::ontology::UsoEntityNode::getEntitySpans(v18, &v111);
        uint64_t v76 = *(uint64_t **)(a1 + 40);
        std::string v77 = v111;
        if (!v76 || v111 == v112)
        {
LABEL_276:
          if (v77) {
            operator delete(v77);
          }
          if (__p) {
            operator delete(__p);
          }
          if (v22)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"(nodexIndex=", 12);
            uint64_t v108 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)")", 1);
          }
          goto LABEL_282;
        }
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v16;
        v113.__r_.__value_.__r.__words[2] = 0;
        uint64_t v114 = 0;
        std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoEntitySpan>*,std::reference_wrapper<siri::ontology::UsoEntitySpan>*>(&v113.__r_.__value_.__l.__size_, v111, (uint64_t)v112, (v112 - (unsigned char *)v111) >> 3);
        std::string::size_type v78 = v113.__r_.__value_.__r.__words[0];
        unint64_t v79 = v76[1];
        if (v79)
        {
          uint8x8_t v80 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
          v80.i16[0] = vaddlv_u8(v80);
          if (v80.u32[0] > 1uLL)
          {
            std::string::size_type v7 = v113.__r_.__value_.__r.__words[0];
            if (v113.__r_.__value_.__r.__words[0] >= v79) {
              std::string::size_type v7 = v113.__r_.__value_.__r.__words[0] % v79;
            }
          }
          else
          {
            std::string::size_type v7 = (v79 - 1) & v113.__r_.__value_.__r.__words[0];
          }
          uint64_t v81 = *(void **)(*v76 + 8 * v7);
          if (v81)
          {
            for (k = (void *)*v81; k; k = (void *)*k)
            {
              unint64_t v83 = k[1];
              if (v83 == v113.__r_.__value_.__r.__words[0])
              {
                if (k[2] == v113.__r_.__value_.__r.__words[0]) {
                  goto LABEL_273;
                }
              }
              else
              {
                if (v80.u32[0] > 1uLL)
                {
                  if (v83 >= v79) {
                    v83 %= v79;
                  }
                }
                else
                {
                  v83 &= v79 - 1;
                }
                if (v83 != v7) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v84 = (char *)operator new(0x30uLL);
        unint64_t v85 = v76 + 2;
        *(void *)uint64_t v84 = 0;
        *((void *)v84 + 1) = v78;
        *((void *)v84 + 2) = v78;
        *(_OWORD *)(v84 + 24) = *(_OWORD *)&v113.__r_.__value_.__r.__words[1];
        *((void *)v84 + 5) = v114;
        uint64_t v114 = 0;
        *(_OWORD *)&v113.__r_.__value_.__r.__words[1] = 0uLL;
        float v86 = (float)(unint64_t)(v76[3] + 1);
        float v87 = *((float *)v76 + 8);
        if (v79 && (float)(v87 * (float)v79) >= v86)
        {
LABEL_263:
          uint64_t v105 = *v76;
          long long v106 = *(void **)(*v76 + 8 * v7);
          if (v106)
          {
            *(void *)uint64_t v84 = *v106;
          }
          else
          {
            *(void *)uint64_t v84 = *v85;
            *unint64_t v85 = v84;
            *(void *)(v105 + 8 * v7) = v85;
            if (!*(void *)v84) {
              goto LABEL_272;
            }
            unint64_t v107 = *(void *)(*(void *)v84 + 8);
            if ((v79 & (v79 - 1)) != 0)
            {
              if (v107 >= v79) {
                v107 %= v79;
              }
            }
            else
            {
              v107 &= v79 - 1;
            }
            long long v106 = (void *)(*v76 + 8 * v107);
          }
          *long long v106 = v84;
LABEL_272:
          ++v76[3];
LABEL_273:
          if (v113.__r_.__value_.__l.__size_) {
            operator delete((void *)v113.__r_.__value_.__l.__size_);
          }
          int v22 = 1;
          goto LABEL_276;
        }
        BOOL v88 = 1;
        if (v79 >= 3) {
          BOOL v88 = (v79 & (v79 - 1)) != 0;
        }
        unint64_t v89 = v88 | (2 * v79);
        unint64_t v90 = vcvtps_u32_f32(v86 / v87);
        if (v89 <= v90) {
          int8x8_t prime = (int8x8_t)v90;
        }
        else {
          int8x8_t prime = (int8x8_t)v89;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v79 = v76[1];
        if (*(void *)&prime > v79) {
          goto LABEL_211;
        }
        if (*(void *)&prime < v79)
        {
          unint64_t v98 = vcvtps_u32_f32((float)(unint64_t)v76[3] / *((float *)v76 + 8));
          if (v79 < 3 || (uint8x8_t v99 = (uint8x8_t)vcnt_s8((int8x8_t)v79), v99.i16[0] = vaddlv_u8(v99), v99.u32[0] > 1uLL))
          {
            unint64_t v98 = std::__next_prime(v98);
          }
          else
          {
            uint64_t v100 = 1 << -(char)__clz(v98 - 1);
            if (v98 >= 2) {
              unint64_t v98 = v100;
            }
          }
          if (*(void *)&prime <= v98) {
            int8x8_t prime = (int8x8_t)v98;
          }
          if (*(void *)&prime >= v79)
          {
            unint64_t v79 = v76[1];
          }
          else
          {
            if (prime)
            {
LABEL_211:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              std::string v92 = operator new(8 * *(void *)&prime);
              uint64_t v93 = (void *)*v76;
              *uint64_t v76 = (uint64_t)v92;
              if (v93) {
                operator delete(v93);
              }
              uint64_t v94 = 0;
              v76[1] = (uint64_t)prime;
              do
                *(void *)(*v76 + 8 * v94++) = 0;
              while (*(void *)&prime != v94);
              std::string::size_type v95 = (void *)*v85;
              if (*v85)
              {
                unint64_t v96 = v95[1];
                uint8x8_t v97 = (uint8x8_t)vcnt_s8(prime);
                v97.i16[0] = vaddlv_u8(v97);
                if (v97.u32[0] > 1uLL)
                {
                  if (v96 >= *(void *)&prime) {
                    v96 %= *(void *)&prime;
                  }
                }
                else
                {
                  v96 &= *(void *)&prime - 1;
                }
                *(void *)(*v76 + 8 * v96) = v85;
                uint64_t v103 = (void *)*v95;
                if (*v95)
                {
                  do
                  {
                    unint64_t v104 = v103[1];
                    if (v97.u32[0] > 1uLL)
                    {
                      if (v104 >= *(void *)&prime) {
                        v104 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v104 &= *(void *)&prime - 1;
                    }
                    if (v104 != v96)
                    {
                      if (!*(void *)(*v76 + 8 * v104))
                      {
                        *(void *)(*v76 + 8 * v104) = v95;
                        goto LABEL_254;
                      }
                      void *v95 = *v103;
                      *uint64_t v103 = **(void **)(*v76 + 8 * v104);
                      **(void **)(*v76 + 8 * v104) = v103;
                      uint64_t v103 = v95;
                    }
                    unint64_t v104 = v96;
LABEL_254:
                    std::string::size_type v95 = v103;
                    uint64_t v103 = (void *)*v103;
                    unint64_t v96 = v104;
                  }
                  while (v103);
                }
              }
              unint64_t v79 = (unint64_t)prime;
              goto LABEL_258;
            }
            long long v109 = (void *)*v76;
            *uint64_t v76 = 0;
            if (v109) {
              operator delete(v109);
            }
            unint64_t v79 = 0;
            v76[1] = 0;
          }
        }
LABEL_258:
        if ((v79 & (v79 - 1)) != 0)
        {
          if (v78 >= v79) {
            std::string::size_type v7 = v78 % v79;
          }
          else {
            std::string::size_type v7 = v78;
          }
        }
        else
        {
          std::string::size_type v7 = (v79 - 1) & v78;
        }
        goto LABEL_263;
      }
      BOOL v58 = 1;
      if (v50 >= 3) {
        BOOL v58 = (v50 & (v50 - 1)) != 0;
      }
      unint64_t v59 = v58 | (2 * v50);
      unint64_t v60 = vcvtps_u32_f32(v56 / v57);
      if (v59 <= v60) {
        int8x8_t v61 = (int8x8_t)v60;
      }
      else {
        int8x8_t v61 = (int8x8_t)v59;
      }
      if (*(void *)&v61 == 1)
      {
        int8x8_t v61 = (int8x8_t)2;
      }
      else if ((*(void *)&v61 & (*(void *)&v61 - 1)) != 0)
      {
        int8x8_t v61 = (int8x8_t)std::__next_prime(*(void *)&v61);
      }
      unint64_t v50 = *((void *)v48 + 1);
      if (*(void *)&v61 > v50) {
        goto LABEL_135;
      }
      if (*(void *)&v61 < v50)
      {
        unint64_t v68 = vcvtps_u32_f32((float)*((unint64_t *)v48 + 3) / v48[8]);
        if (v50 < 3 || (uint8x8_t v69 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v69.i16[0] = vaddlv_u8(v69), v69.u32[0] > 1uLL))
        {
          unint64_t v68 = std::__next_prime(v68);
        }
        else
        {
          uint64_t v70 = 1 << -(char)__clz(v68 - 1);
          if (v68 >= 2) {
            unint64_t v68 = v70;
          }
        }
        if (*(void *)&v61 <= v68) {
          int8x8_t v61 = (int8x8_t)v68;
        }
        if (*(void *)&v61 >= v50)
        {
          unint64_t v50 = *((void *)v48 + 1);
        }
        else
        {
          if (v61)
          {
LABEL_135:
            if (*(void *)&v61 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v62 = operator new(8 * *(void *)&v61);
            uint64_t v63 = *(void **)v48;
            *(void *)unint64_t v48 = v62;
            if (v63) {
              operator delete(v63);
            }
            uint64_t v64 = 0;
            *((int8x8_t *)v48 + 1) = v61;
            do
              *(void *)(*(void *)v48 + 8 * v64++) = 0;
            while (*(void *)&v61 != v64);
            uint64_t v65 = (void *)*((void *)v48 + 2);
            if (v65)
            {
              unint64_t v66 = v65[1];
              uint8x8_t v67 = (uint8x8_t)vcnt_s8(v61);
              v67.i16[0] = vaddlv_u8(v67);
              if (v67.u32[0] > 1uLL)
              {
                if (v66 >= *(void *)&v61) {
                  v66 %= *(void *)&v61;
                }
              }
              else
              {
                v66 &= *(void *)&v61 - 1;
              }
              *(void *)(*(void *)v48 + 8 * v66) = v48 + 4;
              std::string v71 = (void *)*v65;
              if (*v65)
              {
                do
                {
                  unint64_t v72 = v71[1];
                  if (v67.u32[0] > 1uLL)
                  {
                    if (v72 >= *(void *)&v61) {
                      v72 %= *(void *)&v61;
                    }
                  }
                  else
                  {
                    v72 &= *(void *)&v61 - 1;
                  }
                  if (v72 != v66)
                  {
                    if (!*(void *)(*(void *)v48 + 8 * v72))
                    {
                      *(void *)(*(void *)v48 + 8 * v72) = v65;
                      goto LABEL_160;
                    }
                    *uint64_t v65 = *v71;
                    *std::string v71 = **(void **)(*(void *)v48 + 8 * v72);
                    **(void **)(*(void *)v48 + 8 * v72) = v71;
                    std::string v71 = v65;
                  }
                  unint64_t v72 = v66;
LABEL_160:
                  uint64_t v65 = v71;
                  std::string v71 = (void *)*v71;
                  unint64_t v66 = v72;
                }
                while (v71);
              }
            }
            unint64_t v50 = (unint64_t)v61;
            goto LABEL_164;
          }
          uint64_t v102 = *(void **)v48;
          *(void *)unint64_t v48 = 0;
          if (v102) {
            operator delete(v102);
          }
          unint64_t v50 = 0;
          *((void *)v48 + 1) = 0;
        }
      }
LABEL_164:
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v16 >= v50) {
          unint64_t v8 = v16 % v50;
        }
        else {
          unint64_t v8 = v16;
        }
      }
      else
      {
        unint64_t v8 = (v50 - 1) & v16;
      }
      goto LABEL_169;
    }
    BOOL v29 = 1;
    if (v8 >= 3) {
      BOOL v29 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v8);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      int8x8_t v32 = (int8x8_t)v31;
    }
    else {
      int8x8_t v32 = (int8x8_t)v30;
    }
    if (*(void *)&v32 == 1)
    {
      int8x8_t v32 = (int8x8_t)2;
    }
    else if ((*(void *)&v32 & (*(void *)&v32 - 1)) != 0)
    {
      int8x8_t v32 = (int8x8_t)std::__next_prime(*(void *)&v32);
    }
    unint64_t v8 = v19[1];
    if (*(void *)&v32 > v8) {
      goto LABEL_58;
    }
    if (*(void *)&v32 < v8)
    {
      unint64_t v39 = vcvtps_u32_f32((float)(unint64_t)v19[3] / *((float *)v19 + 8));
      if (v8 < 3 || (uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (*(void *)&v32 <= v39) {
        int8x8_t v32 = (int8x8_t)v39;
      }
      if (*(void *)&v32 >= v8)
      {
        unint64_t v8 = v19[1];
      }
      else
      {
        if (v32)
        {
LABEL_58:
          if (*(void *)&v32 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v33 = operator new(8 * *(void *)&v32);
          long long v34 = (void *)*v19;
          uint64_t *v19 = (uint64_t)v33;
          if (v34) {
            operator delete(v34);
          }
          uint64_t v35 = 0;
          v19[1] = (uint64_t)v32;
          do
            *(void *)(*v19 + 8 * v35++) = 0;
          while (*(void *)&v32 != v35);
          long long v36 = (void *)*v110;
          if (*v110)
          {
            unint64_t v37 = v36[1];
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(v32);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(void *)&v32) {
                v37 %= *(void *)&v32;
              }
            }
            else
            {
              v37 &= *(void *)&v32 - 1;
            }
            *(void *)(*v19 + 8 * v37) = v110;
            uint64_t v42 = (void *)*v36;
            if (*v36)
            {
              do
              {
                unint64_t v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(void *)&v32) {
                    v43 %= *(void *)&v32;
                  }
                }
                else
                {
                  v43 &= *(void *)&v32 - 1;
                }
                if (v43 != v37)
                {
                  if (!*(void *)(*v19 + 8 * v43))
                  {
                    *(void *)(*v19 + 8 * v43) = v36;
                    goto LABEL_83;
                  }
                  *long long v36 = *v42;
                  *uint64_t v42 = **(void **)(*v19 + 8 * v43);
                  **(void **)(*v19 + 8 * v43) = v42;
                  uint64_t v42 = v36;
                }
                unint64_t v43 = v37;
LABEL_83:
                long long v36 = v42;
                uint64_t v42 = (void *)*v42;
                unint64_t v37 = v43;
              }
              while (v42);
            }
          }
          unint64_t v8 = (unint64_t)v32;
          goto LABEL_87;
        }
        uint64_t v101 = (void *)*v19;
        uint64_t *v19 = 0;
        if (v101) {
          operator delete(v101);
        }
        unint64_t v8 = 0;
        v19[1] = 0;
      }
    }
LABEL_87:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v20 >= v8) {
        std::string::size_type v7 = v20 % v8;
      }
      else {
        std::string::size_type v7 = v20;
      }
    }
    else
    {
      std::string::size_type v7 = (v8 - 1) & v20;
    }
    goto LABEL_92;
  }
LABEL_282:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 8), (uint64_t)"\n", 1);
  *(_DWORD *)(a1 + 16) += 4;
  uint64_t v120 = &unk_1F246D440;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
}

void sub_1CA29C360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,void *>>>::operator()[abi:ne180100](1, v39);
  if (v38) {
    operator delete(v38);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::pair<boost::optional<boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>>,std::pair<boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>,boost::detail::out_edge_iter<std::__wrap_iter<boost::detail::stored_edge_iter<unsigned long,std::__list_iterator<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>,void *>,siri::ontology::UsoGraphEdge> *>,unsigned long,boost::detail::edge_desc_impl<boost::bidirectional_tag,unsigned long>,long>>>>>::__destroy_vector::operator()[abi:ne180100](char **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    for (uint64_t i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 64)) {
        *(i - 64) = 0;
      }
    }
    a1[1] = v2;
    operator delete(v2);
  }
}

void siri::ontology::UsoEntityNode::getIdentifiers(siri::ontology::UsoEntityNode *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        long long v9 = (void *)*a2;
        uint64_t v10 = ((uint64_t)v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void *)(v13 + 8 * v10);
        void *v15 = v6;
        unint64_t v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *--v5;
            *--uint64_t v15 = v16;
          }
          while (v5 != v9);
          unint64_t v5 = (void *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        void *v5 = v6;
        unint64_t v8 = v5 + 1;
      }
      a2[1] = v8;
      ++v2;
      unint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA29C5BC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoIdentifier>*,std::reference_wrapper<siri::ontology::UsoIdentifier>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(a4);
    unint64_t v7 = result;
    *unint64_t v4 = result;
    v4[1] = result;
    long long v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1CA29C658(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoEntityNode::getEntitySpans(siri::ontology::UsoEntityNode *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 10);
  uint64_t v3 = (uint64_t *)*((void *)this + 11);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = a2[2];
      if ((unint64_t)v5 >= v7)
      {
        size_t v9 = (void *)*a2;
        uint64_t v10 = ((uint64_t)v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void *)(v13 + 8 * v10);
        void *v15 = v6;
        uint64_t v8 = v15 + 1;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *--v5;
            *--uint64_t v15 = v16;
          }
          while (v5 != v9);
          unint64_t v5 = (void *)*a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = v13 + 8 * v14;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        void *v5 = v6;
        uint64_t v8 = v5 + 1;
      }
      a2[1] = v8;
      ++v2;
      unint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA29C78C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>::__init_with_size[abi:ne180100]<std::reference_wrapper<siri::ontology::UsoEntitySpan>*,std::reference_wrapper<siri::ontology::UsoEntitySpan>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(a4);
    unint64_t v7 = result;
    *unint64_t v4 = result;
    v4[1] = result;
    long long v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1CA29C828(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001CA3F54D3)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    JUMPOUT(0x1CB7964F0);
  }
  return result;
}

void boost::detail::sp_counted_impl_pd<boost::default_color_type *,boost::checked_array_deleter<boost::default_color_type>>::~sp_counted_impl_pd()
{
}

void siri::ontology::UsoGraph::prettyPrint(siri::ontology::UsoGraph *this)
{
}

void sub_1CA29C968(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x10B3C4083609F1ALL);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(siri::ontology::UsoGraph *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  long long v8 = 0u;
  long long v9 = 0u;
  int v10 = 1065353216;
  long long v5 = 0u;
  long long v6 = 0u;
  int v7 = 1065353216;
  long long v2 = 0u;
  long long v3 = 0u;
  int v4 = 1065353216;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Root\n", 5);
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::adjacency_list((uint64_t)v1);
}

void sub_1CA29D504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  a12 = &a32;
  std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p) {
    operator delete(__p);
  }
  a32 = v60 - 152;
  std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::~adjacency_list((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&a42);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a48);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::reference_wrapper<siri::ontology::UsoGraphEdge const>>>>>::~__hash_table((uint64_t)&a54);
  std::ostringstream::~ostringstream((uint64_t)&a60);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex::~stored_vertex(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
LABEL_1:
  char v125 = a2 - 4;
  long long v9 = (unint64_t *)a1;
  while (1)
  {
    a1 = (unint64_t)v9;
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = ((char *)a2 - (char *)v9) >> 5;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v56 = *v9;
          if (*v125 < *v9)
          {
            unint64_t v57 = v9[1];
            unint64_t v58 = *(a2 - 3);
            *long long v9 = *v125;
            v9[1] = v58;
            *(a2 - 4) = v56;
            *(a2 - 3) = v57;
            unint64_t v59 = v9[2];
            v9[2] = *(a2 - 2);
            *(a2 - 2) = v59;
            unint64_t v60 = v9[3];
            v9[3] = *(a2 - 1);
            *(a2 - 1) = v60;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v9, v9 + 4, v125);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v9, v9 + 4, v9 + 8, v125);
          break;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(v9, v9 + 4, v9 + 8, v9 + 12, v125);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 767) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return;
      }
      int64_t v76 = (v11 - 2) >> 1;
      int64_t v77 = v76;
      do
      {
        int64_t v78 = v77;
        if (v76 >= v77)
        {
          uint64_t v79 = (2 * v77) | 1;
          uint8x8_t v80 = &v9[4 * v79];
          if (2 * v78 + 2 < (uint64_t)v11)
          {
            unint64_t v82 = v80[4];
            BOOL v81 = *v80 >= v82;
            if (*v80 > v82) {
              unint64_t v82 = *v80;
            }
            if (!v81)
            {
              v80 += 4;
              uint64_t v79 = 2 * v78 + 2;
            }
          }
          else
          {
            unint64_t v82 = *v80;
          }
          unint64_t v83 = &v9[4 * v78];
          unint64_t v84 = *v83;
          if (v82 >= *v83)
          {
            unint64_t v85 = &v9[4 * v78];
            long long v86 = *(_OWORD *)(v85 + 1);
            unint64_t v87 = v85[3];
            v85[2] = 0;
            v85[3] = 0;
            v85[1] = 0;
            unint64_t v88 = *v80;
            do
            {
              unint64_t v89 = v83;
              unint64_t v83 = v80;
              unint64_t *v89 = v88;
              *(_OWORD *)(v89 + 1) = *(_OWORD *)(v80 + 1);
              v89[3] = v80[3];
              v80[1] = 0;
              v80[2] = 0;
              v80[3] = 0;
              if (v76 < v79) {
                break;
              }
              uint64_t v90 = (2 * v79) | 1;
              uint8x8_t v80 = &v9[4 * v90];
              uint64_t v79 = 2 * v79 + 2;
              if (v79 < (uint64_t)v11)
              {
                unint64_t v88 = *v80;
                unint64_t v91 = v80[4];
                BOOL v92 = *v80 >= v91;
                if (*v80 <= v91) {
                  unint64_t v88 = v80[4];
                }
                if (*v80 < v91) {
                  v80 += 4;
                }
                if (v92) {
                  uint64_t v79 = v90;
                }
              }
              else
              {
                unint64_t v88 = *v80;
                uint64_t v79 = v90;
              }
            }
            while (v88 >= v84);
            *unint64_t v83 = v84;
            *(_OWORD *)(v83 + 1) = v86;
            v83[3] = v87;
          }
        }
        int64_t v77 = v78 - 1;
      }
      while (v78);
      uint64_t v93 = (unint64_t)v10 >> 5;
      while (2)
      {
        uint64_t v94 = 0;
        unint64_t v95 = *v9;
        unint64_t v96 = v9[1];
        unint64_t v97 = v9[2];
        unint64_t v98 = v9[3];
        v9[1] = 0;
        v9[2] = 0;
        uint64_t v99 = (uint64_t)v9;
        v9[3] = 0;
        do
        {
          uint64_t v100 = v99 + 32 * v94 + 32;
          uint64_t v101 = (2 * v94) | 1;
          uint64_t v94 = 2 * v94 + 2;
          if (v94 >= v93)
          {
            unint64_t v102 = *(void *)v100;
            uint64_t v94 = v101;
          }
          else
          {
            unint64_t v102 = *(void *)v100;
            unint64_t v103 = *(void *)(v100 + 32);
            if (*(void *)v100 <= v103) {
              unint64_t v102 = *(void *)(v100 + 32);
            }
            if (*(void *)v100 >= v103) {
              uint64_t v94 = v101;
            }
            else {
              v100 += 32;
            }
          }
          *(void *)uint64_t v99 = v102;
          *(_OWORD *)(v99 + 8) = *(_OWORD *)(v100 + 8);
          *(void *)(v99 + 24) = *(void *)(v100 + 24);
          *(void *)(v100 + 8) = 0;
          *(void *)(v100 + 16) = 0;
          *(void *)(v100 + 24) = 0;
          uint64_t v99 = v100;
        }
        while (v94 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
        if ((unint64_t *)v100 != a2 - 4)
        {
          *(void *)uint64_t v100 = *(a2 - 4);
          *(_OWORD *)(v100 + 8) = *(_OWORD *)(a2 - 3);
          *(void *)(v100 + 24) = *(a2 - 1);
          *(a2 - 4) = v95;
          *(a2 - 3) = v96;
          *(a2 - 2) = v97;
          *(a2 - 1) = v98;
          uint64_t v104 = v100 - (void)v9 + 32;
          if (v104 >= 33)
          {
            unint64_t v105 = (((unint64_t)v104 >> 5) - 2) >> 1;
            long long v106 = &v9[4 * v105];
            unint64_t v107 = *(void *)v100;
            if (*v106 < *(void *)v100)
            {
              uint64_t v108 = *(void *)(v100 + 8);
              unint64_t v97 = *(void *)(v100 + 16);
              unint64_t v98 = *(void *)(v100 + 24);
              *(void *)(v100 + 8) = 0;
              *(void *)(v100 + 16) = 0;
              *(void *)(v100 + 24) = 0;
              unint64_t v109 = *v106;
              do
              {
                uint64_t v110 = v100;
                uint64_t v100 = (uint64_t)v106;
                *(void *)uint64_t v110 = v109;
                *(_OWORD *)(v110 + 8) = *(_OWORD *)(v106 + 1);
                *(void *)(v110 + 24) = v106[3];
                v106[1] = 0;
                v106[2] = 0;
                v106[3] = 0;
                if (!v105) {
                  break;
                }
                unint64_t v105 = (v105 - 1) >> 1;
                long long v106 = &v9[4 * v105];
                unint64_t v109 = *v106;
              }
              while (*v106 < v107);
              *(void *)uint64_t v100 = v107;
              *(void *)(v100 + 8) = v108;
LABEL_136:
              *(void *)(v100 + 16) = v97;
              *(void *)(v100 + 24) = v98;
            }
          }
          a2 -= 4;
          if (v93-- <= 2) {
            return;
          }
          continue;
        }
        break;
      }
      *(void *)uint64_t v100 = v95;
      *(void *)(v100 + 8) = v96;
      goto LABEL_136;
    }
    unint64_t v12 = v11 >> 1;
    unint64_t v13 = &v9[4 * (v11 >> 1)];
    if ((unint64_t)v10 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)a1, (unint64_t *)(a1 + 32 * (v11 >> 1)), v125);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)(a1 + 32), v13 - 4, a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v12), a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v13 - 4, v13, (unint64_t *)(a1 + 32 + 32 * v12));
      unint64_t v14 = *(void *)a1;
      *(void *)a1 = *v13;
      unint64_t *v13 = v14;
      long long v15 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v13 + 1);
      *(_OWORD *)(v13 + 1) = v15;
      unint64_t v16 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v13[3];
      void v13[3] = v16;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)(a1 + 32 * (v11 >> 1)), (unint64_t *)a1, v125);
    }
    --a3;
    unint64_t v17 = *(void *)a1;
    if ((a4 & 1) != 0 || *(void *)(a1 - 32) < v17)
    {
      long long v18 = *(_OWORD *)(a1 + 8);
      unint64_t v19 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      std::string::size_type v20 = (unint64_t *)a1;
      do
      {
        uint8x8_t v21 = v20;
        unint64_t v23 = v20[4];
        v20 += 4;
        unint64_t v22 = v23;
      }
      while (v23 < v17);
      long long v24 = a2;
      if (v21 == (unint64_t *)a1)
      {
        long long v24 = a2;
        do
        {
          if (v20 >= v24) {
            break;
          }
          unint64_t v26 = *(v24 - 4);
          v24 -= 4;
        }
        while (v26 >= v17);
      }
      else
      {
        do
        {
          unint64_t v25 = *(v24 - 4);
          v24 -= 4;
        }
        while (v25 >= v17);
      }
      if (v20 >= v24)
      {
        long long v9 = v20;
      }
      else
      {
        unint64_t v27 = *v24;
        long long v9 = v20;
        float v28 = v24;
        do
        {
          unint64_t v29 = v9[1];
          unint64_t v30 = v28[1];
          *long long v9 = v27;
          v9[1] = v30;
          *float v28 = v22;
          v28[1] = v29;
          unint64_t v31 = v9[2];
          v9[2] = v28[2];
          v28[2] = v31;
          unint64_t v32 = v9[3];
          v9[3] = v28[3];
          void v28[3] = v32;
          do
          {
            unint64_t v33 = v9[4];
            v9 += 4;
            unint64_t v22 = v33;
          }
          while (v33 < v17);
          do
          {
            unint64_t v34 = *(v28 - 4);
            v28 -= 4;
            unint64_t v27 = v34;
          }
          while (v34 >= v17);
        }
        while (v9 < v28);
      }
      if (v9 - 4 == (unint64_t *)a1)
      {
        unint64_t v37 = (void *)*(v9 - 3);
        *(v9 - 4) = v17;
        if (v37)
        {
          *(v9 - 2) = (unint64_t)v37;
          long long v121 = v18;
          operator delete(v37);
          long long v18 = v121;
        }
      }
      else
      {
        *(void *)a1 = *(v9 - 4);
        uint64_t v35 = *(void **)(a1 + 8);
        if (v35)
        {
          *(void *)(a1 + 16) = v35;
          long long v120 = v18;
          operator delete(v35);
          long long v18 = v120;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
        }
        long long v36 = v9 - 3;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 3);
        *(void *)(a1 + 24) = *(v9 - 1);
        *long long v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
        *(v9 - 4) = v17;
      }
      *(_OWORD *)(v9 - 3) = v18;
      *(v9 - 1) = v19;
      if (v20 < v24) {
        goto LABEL_36;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *>((unint64_t *)a1, v9 - 4);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *>(v9, a2))
      {
        a2 = v9 - 4;
        if (v38) {
          return;
        }
        goto LABEL_1;
      }
      if (!v38)
      {
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *,false>(a1, v9 - 4, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      long long v39 = *(_OWORD *)(a1 + 8);
      unint64_t v40 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      if (v17 >= *v125)
      {
        uint64_t v42 = (unint64_t *)(a1 + 32);
        do
        {
          long long v9 = v42;
          if (v42 >= a2) {
            break;
          }
          v42 += 4;
        }
        while (v17 >= *v9);
      }
      else
      {
        long long v9 = (unint64_t *)a1;
        do
        {
          unint64_t v41 = v9[4];
          v9 += 4;
        }
        while (v17 >= v41);
      }
      unint64_t v43 = a2;
      if (v9 < a2)
      {
        unint64_t v43 = a2;
        do
        {
          unint64_t v44 = *(v43 - 4);
          v43 -= 4;
        }
        while (v17 < v44);
      }
      if (v9 < v43)
      {
        unint64_t v45 = *v9;
        unint64_t v46 = *v43;
        do
        {
          unint64_t v47 = v9[1];
          unint64_t v48 = v43[1];
          *long long v9 = v46;
          v9[1] = v48;
          *unint64_t v43 = v45;
          v43[1] = v47;
          unint64_t v49 = v9[2];
          v9[2] = v43[2];
          v43[2] = v49;
          unint64_t v50 = v9[3];
          v9[3] = v43[3];
          v43[3] = v50;
          do
          {
            unint64_t v51 = v9[4];
            v9 += 4;
            unint64_t v45 = v51;
          }
          while (v17 >= v51);
          do
          {
            unint64_t v52 = *(v43 - 4);
            v43 -= 4;
            unint64_t v46 = v52;
          }
          while (v17 < v52);
        }
        while (v9 < v43);
      }
      BOOL v4 = (unint64_t)(v9 - 4) >= a1;
      BOOL v5 = v9 - 4 == (unint64_t *)a1;
      if (v9 - 4 == (unint64_t *)a1)
      {
        unint64_t v55 = (void *)*(v9 - 3);
        *(v9 - 4) = v17;
        if (v55)
        {
          *(v9 - 2) = (unint64_t)v55;
          long long v124 = v39;
          operator delete(v55);
          long long v39 = v124;
        }
      }
      else
      {
        *(void *)a1 = *(v9 - 4);
        uint64_t v53 = *(void **)(a1 + 8);
        if (v53)
        {
          *(void *)(a1 + 16) = v53;
          long long v123 = v39;
          operator delete(v53);
          long long v39 = v123;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
        }
        unint64_t v54 = v9 - 3;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 3);
        *(void *)(a1 + 24) = *(v9 - 1);
        *unint64_t v54 = 0;
        v54[1] = 0;
        v54[2] = 0;
        *(v9 - 4) = v17;
      }
      a4 = 0;
      *(_OWORD *)(v9 - 3) = v39;
      *(v9 - 1) = v40;
    }
  }
  int8x8_t v61 = v9 + 4;
  BOOL v63 = v9 == a2 || v61 == a2;
  if (a4)
  {
    if (!v63)
    {
      uint64_t v64 = 0;
      uint64_t v65 = v9;
      do
      {
        unint64_t v66 = v61;
        unint64_t v67 = v65[4];
        unint64_t v68 = *v65;
        if (v67 < *v65)
        {
          unint64_t v69 = v65[5];
          long long v126 = *((_OWORD *)v65 + 3);
          v65[6] = 0;
          v65[7] = 0;
          v65[5] = 0;
          uint64_t v70 = v64;
          std::string v71 = (void *)v66[1];
          while (1)
          {
            uint64_t v72 = a1 + v70;
            *(void *)(a1 + v70 + 32) = v68;
            if (v71)
            {
              *(void *)(v72 + 48) = v71;
              operator delete(v71);
              *(void *)(v72 + 56) = 0;
            }
            *(_OWORD *)(v72 + 40) = *(_OWORD *)(v72 + 8);
            *(void *)(v72 + 56) = *(void *)(v72 + 24);
            *(void *)(v72 + 8) = 0;
            *(void *)(v72 + 16) = 0;
            *(void *)(v72 + 24) = 0;
            if (!v70) {
              break;
            }
            std::string v71 = 0;
            uint64_t v73 = a1 + v70;
            unint64_t v68 = *(void *)(a1 + v70 - 32);
            v70 -= 32;
            if (v67 >= v68)
            {
              uint64_t v74 = a1 + v70 + 32;
              unint64_t v75 = (unint64_t *)(v73 + 8);
              goto LABEL_91;
            }
          }
          unint64_t v75 = (unint64_t *)(a1 + 8);
          uint64_t v74 = a1;
LABEL_91:
          *(void *)uint64_t v74 = v67;
          *unint64_t v75 = v69;
          *(_OWORD *)(v74 + 16) = v126;
        }
        int8x8_t v61 = v66 + 4;
        v64 += 32;
        uint64_t v65 = v66;
      }
      while (v66 + 4 != a2);
    }
  }
  else if (!v63)
  {
    uint64_t v112 = v9 + 3;
    do
    {
      unint64_t v113 = (unint64_t)v61;
      unint64_t v114 = *(void *)(a1 + 32);
      unint64_t v115 = *(void *)a1;
      if (v114 < *(void *)a1)
      {
        long long v127 = *(_OWORD *)(a1 + 40);
        unint64_t v116 = *(void *)(a1 + 56);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        unsigned __int8 v117 = v112;
        long long v118 = *(void **)(v113 + 8);
        do
        {
          v117[1] = v115;
          if (v118)
          {
            v117[3] = (unint64_t)v118;
            operator delete(v118);
            v117[4] = 0;
          }
          long long v118 = 0;
          int v119 = v117 - 2;
          *((_OWORD *)v117 + 1) = *((_OWORD *)v117 - 1);
          v117[4] = *v117;
          v119[1] = 0;
          unint64_t *v117 = 0;
          *int v119 = 0;
          unint64_t v115 = *(v117 - 7);
          v117 -= 4;
        }
        while (v114 < v115);
        v117[1] = v114;
        *((_OWORD *)v117 + 1) = v127;
        v117[4] = v116;
      }
      int8x8_t v61 = (unint64_t *)(v113 + 32);
      v112 += 4;
      a1 = v113;
    }
    while ((unint64_t *)(v113 + 32) != a2);
  }
}

  char v125 = a2 - 4;
  long long v9 = (unint64_t *)a1;
  while (1)
  {
    a1 = (unint64_t)v9;
    uint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = ((char *)a2 - (char *)v9) >> 5;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v56 = *v9;
          if (*v125 < *v9)
          {
            unint64_t v57 = v9[1];
            unint64_t v58 = *(a2 - 3);
            *long long v9 = *v125;
            v9[1] = v58;
            *(a2 - 4) = v56;
            *(a2 - 3) = v57;
            unint64_t v59 = v9[2];
            v9[2] = *(a2 - 2);
            *(a2 - 2) = v59;
            unint64_t v60 = v9[3];
            v9[3] = *(a2 - 1);
            *(a2 - 1) = v60;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v9, v9 + 4, v125);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v9, v9 + 4, v9 + 8, v125);
          break;
        case 5uLL:
          std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(v9, v9 + 4, v9 + 8, v9 + 12, v125);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 767) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return;
      }
      int64_t v76 = (v11 - 2) >> 1;
      int64_t v77 = v76;
      do
      {
        int64_t v78 = v77;
        if (v76 >= v77)
        {
          uint64_t v79 = (2 * v77) | 1;
          uint8x8_t v80 = &v9[4 * v79];
          if (2 * v78 + 2 < (uint64_t)v11)
          {
            unint64_t v82 = v80[4];
            BOOL v81 = *v80 >= v82;
            if (*v80 > v82) {
              unint64_t v82 = *v80;
            }
            if (!v81)
            {
              v80 += 4;
              uint64_t v79 = 2 * v78 + 2;
            }
          }
          else
          {
            unint64_t v82 = *v80;
          }
          unint64_t v83 = &v9[4 * v78];
          unint64_t v84 = *v83;
          if (v82 >= *v83)
          {
            unint64_t v85 = &v9[4 * v78];
            long long v86 = *(_OWORD *)(v85 + 1);
            unint64_t v87 = v85[3];
            v85[2] = 0;
            v85[3] = 0;
            v85[1] = 0;
            unint64_t v88 = *v80;
            do
            {
              unint64_t v89 = v83;
              unint64_t v83 = v80;
              unint64_t *v89 = v88;
              *(_OWORD *)(v89 + 1) = *(_OWORD *)(v80 + 1);
              v89[3] = v80[3];
              v80[1] = 0;
              v80[2] = 0;
              v80[3] = 0;
              if (v76 < v79) {
                break;
              }
              uint64_t v90 = (2 * v79) | 1;
              uint8x8_t v80 = &v9[4 * v90];
              uint64_t v79 = 2 * v79 + 2;
              if (v79 < (uint64_t)v11)
              {
                unint64_t v88 = *v80;
                unint64_t v91 = v80[4];
                BOOL v92 = *v80 >= v91;
                if (*v80 <= v91) {
                  unint64_t v88 = v80[4];
                }
                if (*v80 < v91) {
                  v80 += 4;
                }
                if (v92) {
                  uint64_t v79 = v90;
                }
              }
              else
              {
                unint64_t v88 = *v80;
                uint64_t v79 = v90;
              }
            }
            while (v88 >= v84);
            *unint64_t v83 = v84;
            *(_OWORD *)(v83 + 1) = v86;
            v83[3] = v87;
          }
        }
        int64_t v77 = v78 - 1;
      }
      while (v78);
      uint64_t v93 = (unint64_t)v10 >> 5;
      while (2)
      {
        uint64_t v94 = 0;
        unint64_t v95 = *v9;
        unint64_t v96 = v9[1];
        unint64_t v97 = v9[2];
        unint64_t v98 = v9[3];
        v9[1] = 0;
        v9[2] = 0;
        uint64_t v99 = (uint64_t)v9;
        v9[3] = 0;
        do
        {
          uint64_t v100 = v99 + 32 * v94 + 32;
          uint64_t v101 = (2 * v94) | 1;
          uint64_t v94 = 2 * v94 + 2;
          if (v94 >= v93)
          {
            unint64_t v102 = *(void *)v100;
            uint64_t v94 = v101;
          }
          else
          {
            unint64_t v102 = *(void *)v100;
            unint64_t v103 = *(void *)(v100 + 32);
            if (*(void *)v100 <= v103) {
              unint64_t v102 = *(void *)(v100 + 32);
            }
            if (*(void *)v100 >= v103) {
              uint64_t v94 = v101;
            }
            else {
              v100 += 32;
            }
          }
          *(void *)uint64_t v99 = v102;
          *(_OWORD *)(v99 + 8) = *(_OWORD *)(v100 + 8);
          *(void *)(v99 + 24) = *(void *)(v100 + 24);
          *(void *)(v100 + 8) = 0;
          *(void *)(v100 + 16) = 0;
          *(void *)(v100 + 24) = 0;
          uint64_t v99 = v100;
        }
        while (v94 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
        if ((unint64_t *)v100 != a2 - 4)
        {
          *(void *)uint64_t v100 = *(a2 - 4);
          *(_OWORD *)(v100 + 8) = *(_OWORD *)(a2 - 3);
          *(void *)(v100 + 24) = *(a2 - 1);
          *(a2 - 4) = v95;
          *(a2 - 3) = v96;
          *(a2 - 2) = v97;
          *(a2 - 1) = v98;
          uint64_t v104 = v100 - (void)v9 + 32;
          if (v104 >= 33)
          {
            unint64_t v105 = (((unint64_t)v104 >> 5) - 2) >> 1;
            long long v106 = &v9[4 * v105];
            unint64_t v107 = *(void *)v100;
            if (*v106 < *(void *)v100)
            {
              uint64_t v108 = *(void *)(v100 + 8);
              unint64_t v97 = *(void *)(v100 + 16);
              unint64_t v98 = *(void *)(v100 + 24);
              *(void *)(v100 + 8) = 0;
              *(void *)(v100 + 16) = 0;
              *(void *)(v100 + 24) = 0;
              unint64_t v109 = *v106;
              do
              {
                uint64_t v110 = v100;
                uint64_t v100 = (uint64_t)v106;
                *(void *)uint64_t v110 = v109;
                *(_OWORD *)(v110 + 8) = *(_OWORD *)(v106 + 1);
                *(void *)(v110 + 24) = v106[3];
                v106[1] = 0;
                v106[2] = 0;
                v106[3] = 0;
                if (!v105) {
                  break;
                }
                unint64_t v105 = (v105 - 1) >> 1;
                long long v106 = &v9[4 * v105];
                unint64_t v109 = *v106;
              }
              while (*v106 < v107);
              *(void *)uint64_t v100 = v107;
              *(void *)(v100 + 8) = v108;
LABEL_136:
              *(void *)(v100 + 16) = v97;
              *(void *)(v100 + 24) = v98;
            }
          }
          a2 -= 4;
          if (v93-- <= 2) {
            return;
          }
          continue;
        }
        break;
      }
      *(void *)uint64_t v100 = v95;
      *(void *)(v100 + 8) = v96;
      goto LABEL_136;
    }
    unint64_t v12 = v11 >> 1;
    unint64_t v13 = &v9[4 * (v11 >> 1)];
    if ((unint64_t)v10 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)a1, (unint64_t *)(a1 + 32 * (v11 >> 1)), v125);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)(a1 + 32), v13 - 4, a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v12), a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v13 - 4, v13, (unint64_t *)(a1 + 32 + 32 * v12));
      unint64_t v14 = *(void *)a1;
      *(void *)a1 = *v13;
      unint64_t *v13 = v14;
      long long v15 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v13 + 1);
      *(_OWORD *)(v13 + 1) = v15;
      unint64_t v16 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v13[3];
      void v13[3] = v16;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)(a1 + 32 * (v11 >> 1)), (unint64_t *)a1, v125);
    }
    --a3;
    unint64_t v17 = *(void *)a1;
    if ((a4 & 1) != 0 || *(void *)(a1 - 32) < v17)
    {
      long long v18 = *(_OWORD *)(a1 + 8);
      unint64_t v19 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      std::string::size_type v20 = (unint64_t *)a1;
      do
      {
        uint8x8_t v21 = v20;
        unint64_t v23 = v20[4];
        v20 += 4;
        unint64_t v22 = v23;
      }
      while (v23 < v17);
      long long v24 = a2;
      if (v21 == (unint64_t *)a1)
      {
        long long v24 = a2;
        do
        {
          if (v20 >= v24) {
            break;
          }
          unint64_t v26 = *(v24 - 4);
          v24 -= 4;
        }
        while (v26 >= v17);
      }
      else
      {
        do
        {
          unint64_t v25 = *(v24 - 4);
          v24 -= 4;
        }
        while (v25 >= v17);
      }
      if (v20 >= v24)
      {
        long long v9 = v20;
      }
      else
      {
        unint64_t v27 = *v24;
        long long v9 = v20;
        float v28 = v24;
        do
        {
          unint64_t v29 = v9[1];
          unint64_t v30 = v28[1];
          *long long v9 = v27;
          v9[1] = v30;
          *float v28 = v22;
          v28[1] = v29;
          unint64_t v31 = v9[2];
          v9[2] = v28[2];
          v28[2] = v31;
          unint64_t v32 = v9[3];
          v9[3] = v28[3];
          void v28[3] = v32;
          do
          {
            unint64_t v33 = v9[4];
            v9 += 4;
            unint64_t v22 = v33;
          }
          while (v33 < v17);
          do
          {
            unint64_t v34 = *(v28 - 4);
            v28 -= 4;
            unint64_t v27 = v34;
          }
          while (v34 >= v17);
        }
        while (v9 < v28);
      }
      if (v9 - 4 == (unint64_t *)a1)
      {
        unint64_t v37 = (void *)*(v9 - 3);
        *(v9 - 4) = v17;
        if (v37)
        {
          *(v9 - 2) = (unint64_t)v37;
          long long v121 = v18;
          operator delete(v37);
          long long v18 = v121;
        }
      }
      else
      {
        *(void *)a1 = *(v9 - 4);
        uint64_t v35 = *(void **)(a1 + 8);
        if (v35)
        {
          *(void *)(a1 + 16) = v35;
          long long v120 = v18;
          operator delete(v35);
          long long v18 = v120;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
        }
        long long v36 = v9 - 3;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 3);
        *(void *)(a1 + 24) = *(v9 - 1);
        *long long v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
        *(v9 - 4) = v17;
      }
      *(_OWORD *)(v9 - 3) = v18;
      *(v9 - 1) = v19;
      if (v20 < v24) {
        goto LABEL_36;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>((unint64_t *)a1, v9 - 4);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(v9, a2))
      {
        a2 = v9 - 4;
        if (v38) {
          return;
        }
        goto LABEL_1;
      }
      if (!v38)
      {
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,false>(a1, v9 - 4, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      long long v39 = *(_OWORD *)(a1 + 8);
      unint64_t v40 = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      if (v17 >= *v125)
      {
        uint64_t v42 = (unint64_t *)(a1 + 32);
        do
        {
          long long v9 = v42;
          if (v42 >= a2) {
            break;
          }
          v42 += 4;
        }
        while (v17 >= *v9);
      }
      else
      {
        long long v9 = (unint64_t *)a1;
        do
        {
          unint64_t v41 = v9[4];
          v9 += 4;
        }
        while (v17 >= v41);
      }
      unint64_t v43 = a2;
      if (v9 < a2)
      {
        unint64_t v43 = a2;
        do
        {
          unint64_t v44 = *(v43 - 4);
          v43 -= 4;
        }
        while (v17 < v44);
      }
      if (v9 < v43)
      {
        unint64_t v45 = *v9;
        unint64_t v46 = *v43;
        do
        {
          unint64_t v47 = v9[1];
          unint64_t v48 = v43[1];
          *long long v9 = v46;
          v9[1] = v48;
          *unint64_t v43 = v45;
          v43[1] = v47;
          unint64_t v49 = v9[2];
          v9[2] = v43[2];
          v43[2] = v49;
          unint64_t v50 = v9[3];
          v9[3] = v43[3];
          v43[3] = v50;
          do
          {
            unint64_t v51 = v9[4];
            v9 += 4;
            unint64_t v45 = v51;
          }
          while (v17 >= v51);
          do
          {
            unint64_t v52 = *(v43 - 4);
            v43 -= 4;
            unint64_t v46 = v52;
          }
          while (v17 < v52);
        }
        while (v9 < v43);
      }
      BOOL v4 = (unint64_t)(v9 - 4) >= a1;
      BOOL v5 = v9 - 4 == (unint64_t *)a1;
      if (v9 - 4 == (unint64_t *)a1)
      {
        unint64_t v55 = (void *)*(v9 - 3);
        *(v9 - 4) = v17;
        if (v55)
        {
          *(v9 - 2) = (unint64_t)v55;
          long long v124 = v39;
          operator delete(v55);
          long long v39 = v124;
        }
      }
      else
      {
        *(void *)a1 = *(v9 - 4);
        uint64_t v53 = *(void **)(a1 + 8);
        if (v53)
        {
          *(void *)(a1 + 16) = v53;
          long long v123 = v39;
          operator delete(v53);
          long long v39 = v123;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
        }
        unint64_t v54 = v9 - 3;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 3);
        *(void *)(a1 + 24) = *(v9 - 1);
        *unint64_t v54 = 0;
        v54[1] = 0;
        v54[2] = 0;
        *(v9 - 4) = v17;
      }
      a4 = 0;
      *(_OWORD *)(v9 - 3) = v39;
      *(v9 - 1) = v40;
    }
  }
  int8x8_t v61 = v9 + 4;
  BOOL v63 = v9 == a2 || v61 == a2;
  if (a4)
  {
    if (!v63)
    {
      uint64_t v64 = 0;
      uint64_t v65 = v9;
      do
      {
        unint64_t v66 = v61;
        unint64_t v67 = v65[4];
        unint64_t v68 = *v65;
        if (v67 < *v65)
        {
          unint64_t v69 = v65[5];
          long long v126 = *((_OWORD *)v65 + 3);
          v65[6] = 0;
          v65[7] = 0;
          v65[5] = 0;
          uint64_t v70 = v64;
          std::string v71 = (void *)v66[1];
          while (1)
          {
            uint64_t v72 = a1 + v70;
            *(void *)(a1 + v70 + 32) = v68;
            if (v71)
            {
              *(void *)(v72 + 48) = v71;
              operator delete(v71);
              *(void *)(v72 + 56) = 0;
            }
            *(_OWORD *)(v72 + 40) = *(_OWORD *)(v72 + 8);
            *(void *)(v72 + 56) = *(void *)(v72 + 24);
            *(void *)(v72 + 8) = 0;
            *(void *)(v72 + 16) = 0;
            *(void *)(v72 + 24) = 0;
            if (!v70) {
              break;
            }
            std::string v71 = 0;
            uint64_t v73 = a1 + v70;
            unint64_t v68 = *(void *)(a1 + v70 - 32);
            v70 -= 32;
            if (v67 >= v68)
            {
              uint64_t v74 = a1 + v70 + 32;
              unint64_t v75 = (unint64_t *)(v73 + 8);
              goto LABEL_91;
            }
          }
          unint64_t v75 = (unint64_t *)(a1 + 8);
          uint64_t v74 = a1;
LABEL_91:
          *(void *)uint64_t v74 = v67;
          *unint64_t v75 = v69;
          *(_OWORD *)(v74 + 16) = v126;
        }
        int8x8_t v61 = v66 + 4;
        v64 += 32;
        uint64_t v65 = v66;
      }
      while (v66 + 4 != a2);
    }
  }
  else if (!v63)
  {
    uint64_t v112 = v9 + 3;
    do
    {
      unint64_t v113 = (unint64_t)v61;
      unint64_t v114 = *(void *)(a1 + 32);
      unint64_t v115 = *(void *)a1;
      if (v114 < *(void *)a1)
      {
        long long v127 = *(_OWORD *)(a1 + 40);
        unint64_t v116 = *(void *)(a1 + 56);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        unsigned __int8 v117 = v112;
        long long v118 = *(void **)(v113 + 8);
        do
        {
          v117[1] = v115;
          if (v118)
          {
            v117[3] = (unint64_t)v118;
            operator delete(v118);
            v117[4] = 0;
          }
          long long v118 = 0;
          int v119 = v117 - 2;
          *((_OWORD *)v117 + 1) = *((_OWORD *)v117 - 1);
          v117[4] = *v117;
          v119[1] = 0;
          unint64_t *v117 = 0;
          *int v119 = 0;
          unint64_t v115 = *(v117 - 7);
          v117 -= 4;
        }
        while (v114 < v115);
        v117[1] = v114;
        *((_OWORD *)v117 + 1) = v127;
        v117[4] = v116;
      }
      int8x8_t v61 = (unint64_t *)(v113 + 32);
      v112 += 4;
      a1 = v113;
    }
    while ((unint64_t *)(v113 + 32) != a2);
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  long long v9 = (unint64_t *)result;
  while (2)
  {
    uint64_t v10 = a2 - 2;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = ((char *)a2 - (char *)v11) >> 4;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v43 = *v11;
                if (*v10 < *v11)
                {
                  *unint64_t v11 = *v10;
                  *(a2 - 2) = v43;
                  unint64_t v44 = v11[1];
                  v11[1] = *(a2 - 1);
                  *(a2 - 1) = v44;
                }
                break;
              case 3uLL:
                uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v11, v11 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v11, v11 + 2, v11 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v11, v11 + 2, v11 + 4, v11 + 6);
                unint64_t v45 = v11[6];
                if (*v10 < v45)
                {
                  v11[6] = *v10;
                  *(a2 - 2) = v45;
                  unint64_t v46 = v11[7];
                  uint64_t v11[7] = *(a2 - 1);
                  *(a2 - 1) = v46;
                  unint64_t v47 = v11[6];
                  unint64_t v48 = v11[4];
                  if (v47 < v48)
                  {
                    unint64_t v49 = v11[5];
                    unint64_t v50 = v11[7];
                    v11[4] = v47;
                    v11[5] = v50;
                    v11[6] = v48;
                    uint64_t v11[7] = v49;
                    unint64_t v51 = v11[2];
                    if (v47 < v51)
                    {
                      unint64_t v52 = v11[3];
                      _OWORD v11[2] = v47;
                      void v11[3] = v50;
                      v11[4] = v51;
                      v11[5] = v52;
                      unint64_t v53 = *v11;
                      if (v47 < *v11)
                      {
                        unint64_t v54 = v11[1];
                        *unint64_t v11 = v47;
                        v11[1] = v50;
                        _OWORD v11[2] = v53;
                        void v11[3] = v54;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            unint64_t v55 = v11 + 2;
            BOOL v57 = v11 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                unint64_t v59 = v11;
                do
                {
                  unint64_t v60 = v55;
                  unint64_t v61 = v59[2];
                  unint64_t v62 = *v59;
                  if (v61 < *v59)
                  {
                    unint64_t v63 = v59[3];
                    uint64_t v64 = v58;
                    while (1)
                    {
                      uint64_t v65 = (char *)v11 + v64;
                      uint64_t v66 = *(unint64_t *)((char *)v11 + v64 + 8);
                      *((void *)v65 + 2) = v62;
                      *((void *)v65 + 3) = v66;
                      if (!v64) {
                        break;
                      }
                      unint64_t v62 = *((void *)v65 - 2);
                      v64 -= 16;
                      if (v61 >= v62)
                      {
                        unint64_t v67 = (unint64_t *)((char *)v11 + v64 + 16);
                        goto LABEL_84;
                      }
                    }
                    unint64_t v67 = v11;
LABEL_84:
                    *unint64_t v67 = v61;
                    v67[1] = v63;
                  }
                  unint64_t v55 = v60 + 2;
                  v58 += 16;
                  unint64_t v59 = v60;
                }
                while (v60 + 2 != a2);
              }
            }
            else if (!v57)
            {
              unint64_t v96 = v11 + 3;
              do
              {
                unint64_t v97 = v55;
                unint64_t v98 = v9[2];
                unint64_t v99 = *v9;
                if (v98 < *v9)
                {
                  unint64_t v100 = v9[3];
                  uint64_t v101 = v96;
                  do
                  {
                    unint64_t v102 = v101;
                    *(v101 - 1) = v99;
                    unint64_t v103 = *(v101 - 2);
                    v101 -= 2;
                    *unint64_t v102 = v103;
                    unint64_t v99 = *(v102 - 5);
                  }
                  while (v98 < v99);
                  *(v101 - 1) = v98;
                  *uint64_t v101 = v100;
                }
                unint64_t v55 = v97 + 2;
                v96 += 2;
                long long v9 = v97;
              }
              while (v97 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v68 = (v13 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  uint64_t v72 = &v11[2 * v71];
                  if (2 * v70 + 2 < (uint64_t)v13)
                  {
                    unint64_t v74 = v72[2];
                    BOOL v73 = *v72 >= v74;
                    if (*v72 > v74) {
                      unint64_t v74 = *v72;
                    }
                    if (!v73)
                    {
                      v72 += 2;
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v74 = *v72;
                  }
                  unint64_t v75 = &v11[2 * v70];
                  unint64_t v76 = *v75;
                  if (v74 >= *v75)
                  {
                    unint64_t v77 = v75[1];
                    do
                    {
                      uint64_t result = (unint64_t)v75;
                      unint64_t v75 = v72;
                      *(void *)uint64_t result = v74;
                      *(void *)(result + 8) = v72[1];
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t result = (2 * v71) | 1;
                      uint64_t v72 = &v11[2 * result];
                      uint64_t v71 = 2 * v71 + 2;
                      if (v71 < (uint64_t)v13)
                      {
                        unint64_t v74 = *v72;
                        unint64_t v78 = v72[2];
                        BOOL v79 = *v72 >= v78;
                        if (*v72 <= v78) {
                          unint64_t v74 = v72[2];
                        }
                        if (*v72 < v78) {
                          v72 += 2;
                        }
                        if (v79) {
                          uint64_t v71 = result;
                        }
                      }
                      else
                      {
                        unint64_t v74 = *v72;
                        uint64_t v71 = result;
                      }
                    }
                    while (v74 >= v76);
                    *unint64_t v75 = v76;
                    v75[1] = v77;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v80 = (unint64_t)v12 >> 4;
              do
              {
                uint64_t v81 = 0;
                unint64_t v82 = *v11;
                unint64_t v83 = v11[1];
                unint64_t v84 = v11;
                do
                {
                  unint64_t v85 = &v84[2 * v81 + 2];
                  uint64_t v86 = (2 * v81) | 1;
                  uint64_t v81 = 2 * v81 + 2;
                  if (v81 >= v80)
                  {
                    unint64_t v87 = *v85;
                    uint64_t v81 = v86;
                  }
                  else
                  {
                    unint64_t v87 = *v85;
                    uint64_t result = v85[2];
                    if (*v85 <= result) {
                      unint64_t v87 = v85[2];
                    }
                    if (*v85 >= result) {
                      uint64_t v81 = v86;
                    }
                    else {
                      v85 += 2;
                    }
                  }
                  unint64_t *v84 = v87;
                  v84[1] = v85[1];
                  unint64_t v84 = v85;
                }
                while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                if (v85 == a2 - 2)
                {
                  *unint64_t v85 = v82;
                  v85[1] = v83;
                }
                else
                {
                  *unint64_t v85 = *(a2 - 2);
                  v85[1] = *(a2 - 1);
                  *(a2 - 2) = v82;
                  *(a2 - 1) = v83;
                  uint64_t v88 = (char *)v85 - (char *)v11 + 16;
                  if (v88 >= 17)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                    uint64_t v90 = &v11[2 * v89];
                    unint64_t v91 = *v90;
                    unint64_t v92 = *v85;
                    if (*v90 < *v85)
                    {
                      unint64_t v93 = v85[1];
                      do
                      {
                        uint64_t v94 = v85;
                        unint64_t v85 = v90;
                        *uint64_t v94 = v91;
                        v94[1] = v90[1];
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        uint64_t v90 = &v11[2 * v89];
                        unint64_t v91 = *v90;
                      }
                      while (*v90 < v92);
                      *unint64_t v85 = v92;
                      v85[1] = v93;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v80-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          long long v15 = &v11[2 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            unint64_t v16 = *v9;
            unint64_t v17 = v9[1];
            *(_OWORD *)long long v9 = *(_OWORD *)v15;
            unint64_t *v15 = v16;
            v15[1] = v17;
          }
          else
          {
            uint64_t result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
          }
          --a3;
          unint64_t v18 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 2) < v18) {
            break;
          }
          if (v18 >= *v10)
          {
            unint64_t v34 = v9 + 2;
            do
            {
              unint64_t v11 = v34;
              if (v34 >= a2) {
                break;
              }
              v34 += 2;
            }
            while (v18 >= *v11);
          }
          else
          {
            unint64_t v11 = v9;
            do
            {
              unint64_t v33 = v11[2];
              v11 += 2;
            }
            while (v18 >= v33);
          }
          uint64_t v35 = a2;
          if (v11 < a2)
          {
            uint64_t v35 = a2;
            do
            {
              unint64_t v36 = *(v35 - 2);
              v35 -= 2;
            }
            while (v18 < v36);
          }
          unint64_t v37 = v9[1];
          if (v11 < v35)
          {
            unint64_t v38 = *v11;
            unint64_t v39 = *v35;
            do
            {
              *unint64_t v11 = v39;
              *uint64_t v35 = v38;
              unint64_t v40 = v11[1];
              v11[1] = v35[1];
              v35[1] = v40;
              do
              {
                unint64_t v41 = v11[2];
                v11 += 2;
                unint64_t v38 = v41;
              }
              while (v18 >= v41);
              do
              {
                unint64_t v42 = *(v35 - 2);
                v35 -= 2;
                unint64_t v39 = v42;
              }
              while (v18 < v42);
            }
            while (v11 < v35);
          }
          BOOL v4 = v11 - 2 >= v9;
          BOOL v5 = v11 - 2 == v9;
          if (v11 - 2 != v9)
          {
            *long long v9 = *(v11 - 2);
            v9[1] = *(v11 - 1);
          }
          a4 = 0;
          *(v11 - 2) = v18;
          *(v11 - 1) = v37;
        }
        unint64_t v19 = v9[1];
        std::string::size_type v20 = v9;
        do
        {
          uint8x8_t v21 = v20;
          unint64_t v23 = v20[2];
          v20 += 2;
          unint64_t v22 = v23;
        }
        while (v23 < v18);
        long long v24 = a2;
        if (v21 == v9)
        {
          long long v24 = a2;
          do
          {
            if (v20 >= v24) {
              break;
            }
            unint64_t v26 = *(v24 - 2);
            v24 -= 2;
          }
          while (v26 >= v18);
        }
        else
        {
          do
          {
            unint64_t v25 = *(v24 - 2);
            v24 -= 2;
          }
          while (v25 >= v18);
        }
        if (v20 >= v24)
        {
          unint64_t v11 = v20;
        }
        else
        {
          unint64_t v27 = *v24;
          unint64_t v11 = v20;
          float v28 = v24;
          do
          {
            *unint64_t v11 = v27;
            *float v28 = v22;
            unint64_t v29 = v11[1];
            v11[1] = v28[1];
            v28[1] = v29;
            do
            {
              unint64_t v30 = v11[2];
              v11 += 2;
              unint64_t v22 = v30;
            }
            while (v30 < v18);
            do
            {
              unint64_t v31 = *(v28 - 2);
              v28 -= 2;
              unint64_t v27 = v31;
            }
            while (v31 >= v18);
          }
          while (v11 < v28);
        }
        if (v11 - 2 != v9)
        {
          *long long v9 = *(v11 - 2);
          v9[1] = *(v11 - 1);
        }
        *(v11 - 2) = v18;
        *(v11 - 1) = v19;
        if (v20 >= v24) {
          break;
        }
LABEL_33:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *,false>(v9, v11 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v9, v11 - 2);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(v11, a2);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v11 - 2;
    if (!v32) {
      continue;
    }
    return result;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
void siri::ontology::UsoEntityNode::getUtteranceAlignments(siri::ontology::UsoEntityNode *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v2 = (uint64_t *)*((void *)this + 7);
  long long v3 = (uint64_t *)*((void *)this + 8);
  if (v2 != v3)
  {
    BOOL v5 = 0;
    do
    {
      uint64_t v6 = *v2;
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        long long v9 = *a2;
        uint64_t v10 = (v5 - *a2) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v14 = (char *)operator new(8 * v13);
        }
        else
        {
          unint64_t v14 = 0;
        }
        long long v15 = &v14[8 * v10];
        *(void *)long long v15 = v6;
        long long v8 = v15 + 8;
        if (v5 != v9)
        {
          do
          {
            uint64_t v16 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v5 != v9);
          BOOL v5 = *a2;
        }
        *a2 = v15;
        a2[1] = v8;
        a2[2] = &v14[8 * v13];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)BOOL v5 = v6;
        long long v8 = v5 + 8;
      }
      a2[1] = v8;
      ++v2;
      BOOL v5 = v8;
    }
    while (v2 != v3);
  }
}

void sub_1CA29F25C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::~adjacency_list(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    MEMORY[0x1CB796510](v2, 0xC400A2AC0F1);
  }
  BOOL v4 = (void **)(a1 + 24);
  std::vector<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex,std::allocator<boost::detail::adj_list_gen<boost::adjacency_list<boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>,boost::vecS,boost::vecS,boost::bidirectionalS,siri::ontology::UsoGraphNode *,siri::ontology::UsoGraphEdge,boost::no_property,boost::listS>::config::stored_vertex>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__list_imp<boost::list_edge<unsigned long,siri::ontology::UsoGraphEdge>>::clear((void *)a1);
  return a1;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB796460](a1 + 112);
  return a1;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      unint64_t v19 = result[1];
      unint64_t v20 = a2[1];
      *uint64_t result = v3;
      result[1] = v20;
      *a2 = v4;
      a2[1] = v19;
      unint64_t v21 = result[2];
      result[2] = a2[2];
      uint64_t v6 = (uint64_t *)(a2 + 3);
      unint64_t v22 = a2[3];
      a2[2] = v21;
      unint64_t v23 = result[3];
      result[3] = v22;
      a2[3] = v23;
      if (*a3 >= v4) {
        return result;
      }
      unint64_t v24 = a2[1];
      unint64_t v25 = a3[1];
      *a2 = *a3;
      a2[1] = v25;
      *a3 = v4;
      a3[1] = v24;
      unint64_t v9 = a2[2];
      a2[2] = a3[2];
    }
    else
    {
      uint64_t v6 = (uint64_t *)(result + 3);
      unint64_t v7 = result[1];
      unint64_t v8 = a3[1];
      *uint64_t result = v5;
      result[1] = v8;
      *a3 = v4;
      a3[1] = v7;
      unint64_t v9 = result[2];
      result[2] = a3[2];
    }
    a3[2] = v9;
    unint64_t v13 = (uint64_t *)(a3 + 3);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v10 = *a2;
    unint64_t v11 = a2[1];
    a2[1] = a3[1];
    a3[1] = v11;
    unint64_t v12 = a2[2];
    a2[2] = a3[2];
    a3[2] = v12;
    unint64_t v13 = (uint64_t *)(a2 + 3);
    unint64_t v14 = a2[3];
    a2[3] = a3[3];
    a3[3] = v14;
    unint64_t v15 = *result;
    if (v10 < *result)
    {
      unint64_t v16 = result[1];
      unint64_t v17 = a2[1];
      *uint64_t result = v10;
      result[1] = v17;
      *a2 = v15;
      a2[1] = v16;
      unint64_t v18 = result[2];
      result[2] = a2[2];
      a2[2] = v18;
      uint64_t v6 = (uint64_t *)(result + 3);
LABEL_10:
      uint64_t v26 = *v6;
      *uint64_t v6 = *v13;
      uint64_t *v13 = v26;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = *a3;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = a3[2];
    a3[2] = a4[2];
    a4[2] = v12;
    unint64_t v13 = a3[3];
    a3[3] = a4[3];
    a4[3] = v13;
    unint64_t v14 = *a2;
    if (v10 < *a2)
    {
      *a2 = v10;
      *a3 = v14;
      unint64_t v15 = *a2;
      unint64_t v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      unint64_t v17 = a2[2];
      a2[2] = a3[2];
      a3[2] = v17;
      unint64_t v18 = a2[3];
      a2[3] = a3[3];
      a3[3] = v18;
      unint64_t v19 = *a1;
      if (v15 < *a1)
      {
        unint64_t v20 = a1[1];
        unint64_t v21 = a2[1];
        *a1 = v15;
        a1[1] = v21;
        *a2 = v19;
        a2[1] = v20;
        unint64_t v22 = a1[2];
        a1[2] = a2[2];
        a2[2] = v22;
        unint64_t v23 = a1[3];
        a1[3] = a2[3];
        a2[3] = v23;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a2, a3, a4);
  unint64_t v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = *a4;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = a4[2];
    a4[2] = a5[2];
    a5[2] = v14;
    unint64_t v15 = a4[3];
    a4[3] = a5[3];
    a5[3] = v15;
    unint64_t v16 = *a3;
    if (v12 < *a3)
    {
      *a3 = v12;
      *a4 = v16;
      unint64_t v17 = *a3;
      unint64_t v18 = a3[1];
      a3[1] = a4[1];
      a4[1] = v18;
      unint64_t v19 = a3[2];
      a3[2] = a4[2];
      a4[2] = v19;
      unint64_t v20 = a3[3];
      a3[3] = a4[3];
      a4[3] = v20;
      unint64_t v21 = *a2;
      if (v17 < *a2)
      {
        *a2 = v17;
        *a3 = v21;
        unint64_t v22 = *a2;
        unint64_t v23 = a2[1];
        a2[1] = a3[1];
        a3[1] = v23;
        unint64_t v24 = a2[2];
        a2[2] = a3[2];
        a3[2] = v24;
        unint64_t v25 = a2[3];
        a2[3] = a3[3];
        a3[3] = v25;
        unint64_t v26 = *a1;
        if (v22 < *a1)
        {
          unint64_t v27 = a1[1];
          unint64_t v28 = a2[1];
          *a1 = v22;
          a1[1] = v28;
          *a2 = v26;
          a2[1] = v27;
          unint64_t v29 = a1[2];
          a1[2] = a2[2];
          a2[2] = v29;
          unint64_t v30 = a1[3];
          a1[3] = a2[3];
          a2[3] = v30;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 4);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        unint64_t v8 = a1[1];
        unint64_t v9 = *(a2 - 3);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 4) = v7;
        *(a2 - 3) = v8;
        unint64_t v10 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v10;
        unint64_t v11 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      unint64_t v12 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8);
      unint64_t v13 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *v13;
    if (*v13 < *v12)
    {
      unint64_t v17 = v13[1];
      long long v18 = *((_OWORD *)v13 + 1);
      _OWORD v13[2] = 0;
      void v13[3] = 0;
      v13[1] = 0;
      uint64_t v19 = v14;
      unint64_t v20 = *v12;
      while (1)
      {
        uint64_t v21 = v19;
        unint64_t v22 = (char *)a1 + v19;
        *(_OWORD *)(v22 + 104) = *(_OWORD *)(v22 + 72);
        *((void *)v22 + 15) = *((void *)v22 + 11);
        *((void *)v22 + 9) = 0;
        *((void *)v22 + 10) = 0;
        *((void *)v22 + 11) = 0;
        *((void *)v22 + 12) = v20;
        if (v21 == -64) {
          break;
        }
        unint64_t v20 = *((void *)v22 + 4);
        uint64_t v19 = v21 - 32;
        if (v16 >= v20)
        {
          uint64_t v23 = (uint64_t)a1 + v19 + 96;
          unint64_t v24 = (unint64_t *)((char *)a1 + v21 + 72);
          goto LABEL_12;
        }
      }
      unint64_t v24 = (unint64_t *)(v22 + 72);
      uint64_t v23 = (uint64_t)a1;
LABEL_12:
      *(void *)uint64_t v23 = v16;
      unint64_t *v24 = v17;
      *(_OWORD *)(v23 + 16) = v18;
      if (++v15 == 8) {
        return v13 + 4 == a2;
      }
    }
    unint64_t v12 = v13;
    v14 += 32;
    v13 += 4;
    if (v13 == a2) {
      return 1;
    }
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      *BOOL result = v3;
      *a2 = v4;
      unint64_t v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      unint64_t v11 = *a2;
      if (*a3 >= *a2) {
        return result;
      }
      *a2 = *a3;
      *a3 = v11;
      unint64_t v6 = a3 + 1;
      BOOL result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      unint64_t v6 = a3 + 1;
    }
    unint64_t v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v7 = a2 + 1;
    unint64_t v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    unint64_t v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      unint64_t v12 = *result;
      *BOOL result = *v7;
      *unint64_t v7 = v12;
    }
  }
  return result;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a2, a3);
  unint64_t v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    unint64_t v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      unint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      unint64_t v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        unint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      unint64_t v20 = *(a2 - 2);
      unint64_t v21 = a1[6];
      if (v20 < v21)
      {
        a1[6] = v20;
        *(a2 - 2) = v21;
        unint64_t v22 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v22;
        unint64_t v23 = a1[6];
        unint64_t v24 = a1[4];
        if (v23 < v24)
        {
          unint64_t v25 = a1[5];
          unint64_t v26 = a1[7];
          a1[4] = v23;
          a1[5] = v26;
          a1[6] = v24;
          a1[7] = v25;
          unint64_t v27 = a1[2];
          if (v23 < v27)
          {
            unint64_t v28 = a1[3];
            a1[2] = v23;
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v28;
            unint64_t v29 = *a1;
            if (v23 < *a1)
            {
              unint64_t v30 = a1[1];
              *a1 = v23;
              a1[1] = v26;
              a1[2] = v29;
              a1[3] = v30;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_1 &,std::pair<unsigned long long,std::reference_wrapper<siri::ontology::UsoUtteranceAlignment>> *>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 < *v9)
    {
      unint64_t v15 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        unint64_t v17 = (unint64_t *)((char *)a1 + v16);
        uint64_t v18 = *(unint64_t *)((char *)a1 + v16 + 40);
        v17[6] = v14;
        v17[7] = v18;
        if (v16 == -32) {
          break;
        }
        unint64_t v14 = v17[2];
        v16 -= 16;
        if (v13 >= v14)
        {
          uint64_t v19 = (unint64_t *)((char *)a1 + v16 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      unint64_t *v19 = v13;
      v19[1] = v15;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_0 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoIdentifier>>> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 4);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        unint64_t v8 = a1[1];
        unint64_t v9 = *(a2 - 3);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 4) = v7;
        *(a2 - 3) = v8;
        unint64_t v10 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v10;
        unint64_t v11 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *,0>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      int v12 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::ontology::UsoGraph::prettyPrintSortedUsoGraphAlignments(void)::$_2 &,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>> *>(a1, a1 + 4, a1 + 8);
      unint64_t v13 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *v13;
    if (*v13 < *v12)
    {
      unint64_t v17 = v13[1];
      long long v18 = *((_OWORD *)v13 + 1);
      _OWORD v13[2] = 0;
      void v13[3] = 0;
      v13[1] = 0;
      uint64_t v19 = v14;
      unint64_t v20 = *v12;
      while (1)
      {
        uint64_t v21 = v19;
        unint64_t v22 = (char *)a1 + v19;
        *(_OWORD *)(v22 + 104) = *(_OWORD *)(v22 + 72);
        *((void *)v22 + 15) = *((void *)v22 + 11);
        *((void *)v22 + 9) = 0;
        *((void *)v22 + 10) = 0;
        *((void *)v22 + 11) = 0;
        *((void *)v22 + 12) = v20;
        if (v21 == -64) {
          break;
        }
        unint64_t v20 = *((void *)v22 + 4);
        uint64_t v19 = v21 - 32;
        if (v16 >= v20)
        {
          uint64_t v23 = (uint64_t)a1 + v19 + 96;
          unint64_t v24 = (unint64_t *)((char *)a1 + v21 + 72);
          goto LABEL_12;
        }
      }
      unint64_t v24 = (unint64_t *)(v22 + 72);
      uint64_t v23 = (uint64_t)a1;
LABEL_12:
      *(void *)uint64_t v23 = v16;
      unint64_t *v24 = v17;
      *(_OWORD *)(v23 + 16) = v18;
      if (++v15 == 8) {
        return v13 + 4 == a2;
      }
    }
    int v12 = v13;
    v14 += 32;
    v13 += 4;
    if (v13 == a2) {
      return 1;
    }
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>>,std::pair<unsigned long long,std::vector<std::reference_wrapper<siri::ontology::UsoEntitySpan>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

uint64_t siri::ontology::UsoGraph::isValidSuccessorNameForNode(siri::ontology::UsoGraph *a1, uint64_t a2, siri::ontology::OntologyEdgeName *a3, const siri::ontology::OntologyNodeName *a4, int a5)
{
  siri::ontology::UsoGraphEdge::UsoGraphEdge((siri::ontology::UsoGraphEdge *)v21, a3, 0, 0, 0);
  switch(a5)
  {
    case 2:
      siri::ontology::UsoEntityNode::UsoEntityNode((siri::ontology::UsoEntityNode *)v14, a1, a4);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a2 + 24))(a2, v14, v21);
      goto LABEL_8;
    case 3:
      LOBYTE(v12) = 0;
      char v13 = 0;
      siri::ontology::UsoStringNode::UsoStringNode((uint64_t)v14, a1, &v12);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a2 + 24))(a2, v14, v21);
      v14[0] = &unk_1F246CFE8;
      if (v20 && v19 < 0) {
        operator delete(__p);
      }
      goto LABEL_9;
    case 4:
      siri::ontology::UsoIntNode::UsoIntNode((siri::ontology::oname::graph::ontology_init *)v14, a1, 0, 0);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a2 + 24))(a2, v14, v21);
LABEL_8:
      uint64_t v10 = v9;
LABEL_9:
      v14[0] = &unk_1F246CE50;
      unint64_t v25 = (void **)&v17;
      std::vector<std::unique_ptr<siri::ontology::UsoEntitySpan>>::__destroy_vector::operator()[abi:ne180100](&v25);
      unint64_t v25 = (void **)&v16;
      std::vector<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::__destroy_vector::operator()[abi:ne180100](&v25);
      unint64_t v25 = (void **)&v15;
      std::vector<std::unique_ptr<siri::ontology::UsoIdentifier>>::__destroy_vector::operator()[abi:ne180100](&v25);
      break;
    case 5:
      v14[1] = a1;
      v14[2] = 0;
      v14[0] = &unk_1F246CDD0;
      v14[3] = a4;
      siri::ontology::UsoOperatorNode::checkValidOntologyNameType((uint64_t)v14);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, unsigned char *))(*(void *)a2 + 24))(a2, v14, v21);
      break;
    default:
      uint64_t v10 = 0;
      break;
  }
  unint64_t v22 = &unk_1F246D440;
  if (v24 < 0) {
    operator delete(v23);
  }
  return v10;
}

void sub_1CA2A0238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 96) = &unk_1F246D440;
  if (*(char *)(v13 - 65) < 0) {
    operator delete(*(void **)(v13 - 88));
  }
  _Unwind_Resume(exception_object);
}

void siri::ontology::UsoUtteranceAlignment::addSpan()
{
}

void sub_1CA2A03F4(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1000C405AAC83ABLL);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoUtteranceAlignment::addSpan(siri::ontology::UsoUtteranceAlignment *this)
{
}

void sub_1CA2A0530(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1000C405AAC83ABLL);
  _Unwind_Resume(a1);
}

void *siri::ontology::UsoUtteranceAlignment::addSpan(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __assert_rtn("addSpan", "UsoGraph.cpp", 692, "span");
  }
  uint64_t v4 = result;
  unint64_t v5 = result + 3;
  unint64_t v6 = result[3];
  unint64_t v7 = (void *)result[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = result + 1;
    uint64_t v10 = result[1];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v17[4] = v5;
    if (v14)
    {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      uint64_t v2 = *a2;
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (void *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    void *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    unint64_t v8 = (void *)v4[2];
    BOOL result = (void *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *unint64_t v7 = v2;
    unint64_t v8 = v7 + 1;
  }
  long long v4[2] = v8;
  return result;
}

uint64_t siri::ontology::UsoUtteranceAlignment::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v2 = *(char **)(a1 + 8);
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = *(void **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v3 != v2)
  {
    unint64_t v5 = (v3 - v2) >> 3;
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (v3 - v2) >> 3;
    }
    uint64_t result = 1;
    while (1)
    {
      if (!v5) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v8 = *(_DWORD **)v2;
      uint64_t v9 = (_DWORD *)*v4;
      if (*(_DWORD *)*v4 != **(_DWORD **)v2 || v9[1] != v8[1] || v9[2] != v8[2] || v9[3] != v8[3]) {
        break;
      }
      int v10 = *((unsigned __int8 *)v8 + 20);
      if (!*((unsigned char *)v9 + 20) || v10 == 0)
      {
        if ((*((unsigned char *)v9 + 20) != 0) != (v10 != 0)) {
          return 0;
        }
      }
      else if (v9[4] != v8[4])
      {
        return 0;
      }
      if (*((unsigned char *)v9 + 28) && *((unsigned char *)v8 + 28))
      {
        int v12 = v9[6];
        int v13 = v8[6];
      }
      else
      {
        int v13 = *((unsigned __int8 *)v8 + 28) != 0;
        int v12 = *((unsigned __int8 *)v9 + 28) != 0;
      }
      if (v12 != v13) {
        break;
      }
      --v5;
      v2 += 8;
      ++v4;
      if (!--v6) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

void siri::ontology::UsoGraphNode::addSuccessors(siri::ontology::UsoGraph **this, siri::ontology::UsoGraph **a2)
{
}

void siri::ontology::UsoGraphNode::deepCopy(siri::ontology::UsoGraph **this)
{
}

void siri::ontology::UsoGraphNode::deepCopyToGraph(siri::ontology::UsoGraph **this, siri::ontology::UsoGraph *a2)
{
}

BOOL siri::ontology::UsoEntityNode::isValidSuccessorWithOperatorEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, 0);
}

BOOL siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, 1);
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::copyIdentifiers(siri::ontology::UsoEntityNode *this, uint64_t a2)
{
  if (*(void *)a2 != *(void *)(a2 + 8)) {
    siri::ontology::UsoEntityNode::addIdentifier(this, **(siri::ontology::UsoIdentifier ***)a2);
  }
  return this;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::copyUtteranceAlignments(siri::ontology::UsoEntityNode *this, uint64_t a2)
{
  if (*(void *)a2 != *(void *)(a2 + 8)) {
    siri::ontology::UsoEntityNode::addUtteranceAlignment(this, **(siri::ontology::UsoUtteranceAlignment ***)a2);
  }
  return this;
}

siri::ontology::UsoEntityNode *siri::ontology::UsoEntityNode::copyEntitySpans(siri::ontology::UsoEntityNode *this, uint64_t a2)
{
  if (*(void *)a2 != *(void *)(a2 + 8)) {
    siri::ontology::UsoEntityNode::addEntitySpan(this, **(siri::ontology::UsoEntitySpan ***)a2);
  }
  return this;
}

void siri::ontology::UsoEntityNode::addIdentifier()
{
}

{
  operator new();
}

{
  siri::ontology::UsoEntityNode::addIdentifier();
}

void sub_1CA2A0ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v27, 0x1012C40071C2685);
  _Unwind_Resume(a1);
}

void *siri::ontology::UsoEntityNode::addIdentifier(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __assert_rtn("addIdentifier", "UsoGraph.cpp", 985, "identifier");
  }
  uint64_t v4 = result;
  unint64_t v5 = result + 6;
  unint64_t v6 = result[6];
  unint64_t v7 = (void *)result[5];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = result + 4;
    uint64_t v10 = result[4];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v17[4] = v5;
    if (v14)
    {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      uint64_t v2 = *a2;
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (void *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    void *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    unint64_t v8 = (void *)v4[5];
    uint64_t result = (void *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoIdentifier>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *unint64_t v7 = v2;
    unint64_t v8 = v7 + 1;
  }
  v4[5] = v8;
  return result;
}

int64x2_t *siri::ontology::UsoEntityNode::addEntitySpan(int64x2_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __assert_rtn("addEntitySpan", "UsoGraph.cpp", 1009, "entitySpan");
  }
  uint64_t v4 = result;
  unint64_t v5 = result + 6;
  unint64_t v6 = result[6].u64[0];
  unint64_t v7 = (void *)result[5].i64[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = result[5].i64[0];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v25 = (uint64_t *)v5;
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
      uint64_t v2 = *a2;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (void *)(v13 + 8 * v10);
    unint64_t v16 = v13 + 8 * v14;
    unint64_t v24 = v16;
    *a2 = 0;
    void *v15 = v2;
    unint64_t v8 = v15 + 1;
    v23.i64[1] = (uint64_t)(v15 + 1);
    long long v18 = (void *)v4[5].i64[0];
    uint64_t v17 = (void *)v4[5].i64[1];
    if (v17 == v18)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *--v17;
        void *v17 = 0;
        *--uint64_t v15 = v19;
      }
      while (v17 != v18);
      int64x2_t v20 = v4[5];
      unint64_t v8 = (void *)v23.i64[1];
      unint64_t v16 = v24;
    }
    v4[5].i64[0] = (uint64_t)v15;
    v4[5].i64[1] = (uint64_t)v8;
    int64x2_t v23 = v20;
    uint64_t v21 = v4[6].i64[0];
    v4[6].i64[0] = v16;
    unint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    uint64_t result = (int64x2_t *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoEntitySpan>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *a2 = 0;
    *unint64_t v7 = v2;
    unint64_t v8 = v7 + 1;
  }
  v4[5].i64[1] = (uint64_t)v8;
  return result;
}

void siri::ontology::UsoEntityNode::addUtteranceAlignment()
{
}

void sub_1CA2A1008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoEntityNode::addUtteranceAlignment(siri::ontology::UsoEntityNode *this)
{
}

void sub_1CA2A12A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *siri::ontology::UsoEntityNode::addUtteranceAlignment(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __assert_rtn("addUtteranceAlignment", "UsoGraph.cpp", 1051, "utteranceAlignment");
  }
  uint64_t v4 = result;
  unint64_t v5 = result + 9;
  unint64_t v6 = result[9];
  unint64_t v7 = (void *)result[8];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = result[7];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    unint64_t v25 = v5;
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v13);
      uint64_t v2 = *a2;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (void *)(v13 + 8 * v10);
    unint64_t v16 = v13 + 8 * v14;
    unint64_t v24 = v16;
    *a2 = 0;
    void *v15 = v2;
    unint64_t v8 = v15 + 1;
    v23.i64[1] = (uint64_t)(v15 + 1);
    long long v18 = (void *)v4[7];
    uint64_t v17 = (void *)v4[8];
    if (v17 == v18)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *--v17;
        void *v17 = 0;
        *--uint64_t v15 = v19;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)(v4 + 7);
      unint64_t v8 = (void *)v23.i64[1];
      unint64_t v16 = v24;
    }
    v4[7] = v15;
    v4[8] = v8;
    int64x2_t v23 = v20;
    unint64_t v21 = v4[9];
    v4[9] = v16;
    unint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    uint64_t result = (void *)std::__split_buffer<std::unique_ptr<siri::ontology::UsoUtteranceAlignment>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *a2 = 0;
    *unint64_t v7 = v2;
    unint64_t v8 = v7 + 1;
  }
  v4[8] = v8;
  return result;
}

uint64_t siri::ontology::UsoEntityNode::getUtteranceAlignment(siri::ontology::UsoEntityNode *this)
{
  return **((void **)this + 7);
}

BOOL siri::ontology::UsoEntityNode::isValidSuccessorWithEdge(siri::ontology::UsoEntityNode *this, const UsoGraphNode *a2, const siri::ontology::UsoGraphEdge *a3, char a4)
{
  return siri::ontology::UsoEntityNode::isValidSetSuccessorWithEdge(this, a2, a3, a4);
}

uint64_t siri::ontology::PrintGraphVisitor::finish_vertex(uint64_t result)
{
  *(_DWORD *)(result + 16) -= 4;
  return result;
}

BOOL siri::ontology::MatchInfo::hasMatchSignal(_DWORD *a1, int a2)
{
  return (*a1 & a2) != 0;
}

BOOL siri::ontology::MatchInfo::hasMatchSignals(int *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return 1;
  }
  int v3 = *a1;
  uint64_t v4 = *a2 + 4;
  do
  {
    BOOL result = (v3 & *(_DWORD *)(v4 - 4)) != 0;
    BOOL v6 = (v3 & *(_DWORD *)(v4 - 4)) == 0 || v4 == v2;
    v4 += 4;
  }
  while (!v6);
  return result;
}

void siri::ontology::UsoEntitySpan::addSpanProperty()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_1CA2A162C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v14, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void sub_1CA2A17C8(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void sub_1CA2A1954(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1012C40785BF0B2);
  _Unwind_Resume(a1);
}

void *siri::ontology::UsoEntitySpan::addSpanProperty(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __assert_rtn("addSpanProperty", "UsoGraph.cpp", 1653, "spanProperty");
  }
  uint64_t v4 = result;
  unint64_t v5 = result + 13;
  unint64_t v6 = result[13];
  unint64_t v7 = (void *)result[12];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = result + 11;
    uint64_t v10 = result[11];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v17[4] = v5;
    if (v14)
    {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      uint64_t v2 = *a2;
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = (void *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    void *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    unint64_t v8 = (void *)v4[12];
    BOOL result = (void *)std::__split_buffer<std::unique_ptr<siri::ontology::SpanProperty>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *unint64_t v7 = v2;
    unint64_t v8 = v7 + 1;
  }
  v4[12] = v8;
  return result;
}

void siri::ontology::UsoEntitySpan::addAlternative()
{
}

void sub_1CA2A1BC8(_Unwind_Exception *a1)
{
  MEMORY[0x1CB796510](v1, 0x1012C40F498771DLL);
  _Unwind_Resume(a1);
}

void *siri::ontology::UsoEntitySpan::addAlternative(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __assert_rtn("addAlternative", "UsoGraph.cpp", 1675, "alternative");
  }
  uint64_t v4 = result;
  unint64_t v5 = result + 18;
  unint64_t v6 = result[18];
  unint64_t v7 = (void *)result[17];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = result + 16;
    uint64_t v10 = result[16];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v17[4] = v5;
    if (v14)
    {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siri::ontology::SpanProperty>>>(v14);
      uint64_t v2 = *a2;
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = (void *)(v14 + 8 * v11);
    v17[0] = v14;
    v17[1] = v16;
    v17[3] = v14 + 8 * v15;
    *a2 = 0;
    void *v16 = v2;
    v17[2] = v16 + 1;
    std::vector<std::unique_ptr<siri::ontology::SpanProperty>>::__swap_out_circular_buffer(v9, v17);
    unint64_t v8 = (void *)v4[17];
    BOOL result = (void *)std::__split_buffer<std::unique_ptr<siri::ontology::AsrAlternative>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *a2 = 0;
    *unint64_t v7 = v2;
    unint64_t v8 = v7 + 1;
  }
  v4[17] = v8;
  return result;
}

uint64_t siri::ontology::oname::graph::ontology_init::apple_PhotoMemory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::apple_PhotoMemory(void)::apple_PhotoMemory;
}

void sub_1CA2A25E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3);
  int v9 = *a4;
  int v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    int v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    int v12 = *a3;
    int v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      int v15 = *a2;
      int v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        int v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3, a4);
  int v11 = *a5;
  int v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    int v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    int v14 = *a4;
    int v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      int v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      int v17 = *a3;
      int v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        int v20 = *a2;
        int v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          int v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 2);
      int v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      int v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4);
      int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    int v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1])) {
      goto LABEL_22;
    }
    int v14 = *v10;
    int v15 = v10[1];
    int *v10 = v13;
    v10[1] = v9[1];
    int v16 = a1;
    if (v9 == a1) {
      goto LABEL_21;
    }
    uint64_t v17 = v11;
    while (1)
    {
      int v18 = (char *)a1 + v17;
      int v19 = *(int *)((char *)a1 + v17 + 8);
      if (v19 > v14)
      {
        int v20 = *((_DWORD *)v18 + 3);
        goto LABEL_17;
      }
      if (v19 < v14)
      {
        int v16 = v9;
        goto LABEL_21;
      }
      int v20 = *(int *)((char *)a1 + v17 + 12);
      if (v20 <= v15) {
        break;
      }
LABEL_17:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        int v16 = a1;
        goto LABEL_21;
      }
    }
    int v16 = (int *)((char *)a1 + v17 + 16);
LABEL_21:
    int *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_22:
    int v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute(void)::appleAlarm_AlarmAttribute;
}

void sub_1CA2A2CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A2D54()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute(void)::appleArithmetic_ArithmeticAttribute;
}

void sub_1CA2A2F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A2FAC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute(void)::appleContact_ContactAttribute;
}

void sub_1CA2A3180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A3218()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute(void)::appleEmail_EmailAttribute;
}

void sub_1CA2A33E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A3480()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute(void)::appleMessage_MessageAttribute;
}

void sub_1CA2A3670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A3708()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute(void)::appleNotebook_NotebookAttribute;
}

void sub_1CA2A38F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A3988()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute(void)::appleNotification_NotificationAttribute;
}

void sub_1CA2A3B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A3BE0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute(void)::applePhoneCall_PhoneCallAttribute;
}

void sub_1CA2A3DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A3E4C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute(void)::appleTimer_TimerAttribute;
}

void sub_1CA2A4024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A40BC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute(void)::appleWriting_WritingAttribute;
}

void sub_1CA2A4284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A431C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition(void)::common_SpatialPosition;
}

void sub_1CA2A44EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A4584()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutClass(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutClass(void)::common_WorkoutClass;
}

void sub_1CA2A4740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 224);
  if (*(char *)(v37 - 161) < 0) {
    operator delete(*(void **)(v37 - 184));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType(void)::common_MediaItemRelationshipType;
}

void sub_1CA2A4980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A4A10()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppIntent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppIntent(void)::common_AppIntent;
}

void sub_1CA2A4BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RequiredStatus(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RequiredStatus(void)::common_RequiredStatus;
}

void sub_1CA2A4DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A4E8C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriContent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriContent(void)::common_SiriContent;
}

void sub_1CA2A5054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A50E4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus(void)::common_CompletionStatus;
}

void sub_1CA2A52A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A5334()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection(void)::common_SpatialDirection;
}

void sub_1CA2A5504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A559C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Workout(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Workout(void)::common_Workout;
}

void sub_1CA2A5754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppListing(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppListing(void)::common_AppListing;
}

void sub_1CA2A59C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A5A54()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReferenceType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReferenceType(void)::common_ReferenceType;
}

void sub_1CA2A5C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A5CA0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppAction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppAction(void)::common_AppAction;
}

void sub_1CA2A5E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpendingCategory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpendingCategory(void)::common_SpendingCategory;
}

void sub_1CA2A6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FindMyStatus(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_FindMyStatus(void)::common_FindMyStatus;
}

void sub_1CA2A62CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonRole(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonRole(void)::common_PersonRole;
}

void sub_1CA2A6500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DurationComponent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DurationComponent(void)::common_DurationComponent;
}

void sub_1CA2A6744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A67D4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NavigationMenu(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NavigationMenu(void)::common_NavigationMenu;
}

void sub_1CA2A6980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType(void)::common_PaymentType;
}

void sub_1CA2A6BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A6C70()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ScheduleType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ScheduleType(void)::common_ScheduleType;
}

void sub_1CA2A6E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A6EB8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number(void)::common_Number;
}

void sub_1CA2A70BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 225) < 0) {
    operator delete(*(void **)(v38 - 248));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A7154()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SearchObjectType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SearchObjectType(void)::common_SearchObjectType;
}

void sub_1CA2A7300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection(void)::common_SizeDirection;
}

void sub_1CA2A755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A75F4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock(void)::common_Time12HourClock;
}

void sub_1CA2A77E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A787C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppGenre(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppGenre(void)::common_AppGenre;
}

void sub_1CA2A7A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Language(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Language(void)::common_Language;
}

void sub_1CA2A7C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Agent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Agent(void)::common_Agent;
}

void sub_1CA2A7EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A7F60()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType(void)::common_AttachmentType;
}

void sub_1CA2A8158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A81E8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Geolocation(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Geolocation(void)::common_Geolocation;
}

void sub_1CA2A83A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A8438()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Measurement(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Measurement(void)::common_Measurement;
}

void sub_1CA2A8620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 169) < 0) {
    operator delete(*(void **)(v39 - 192));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A86B8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange(void)::common_RecurringDateTimeRange;
}

void sub_1CA2A88BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A8954()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MedicationEvent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MedicationEvent(void)::common_MedicationEvent;
}

void sub_1CA2A8B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonSocialAction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonSocialAction(void)::common_PersonSocialAction;
}

void sub_1CA2A8D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Currency(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Currency(void)::common_Currency;
}

void sub_1CA2A8F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger(void)::common_CommunicationTrigger;
}

void sub_1CA2A91D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A9268()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount(void)::common_CurrencyAmount;
}

void sub_1CA2A9474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 201) < 0) {
    operator delete(*(void **)(v39 - 224));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A9514()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(void)::common_OffsetDateTime;
}

void sub_1CA2A9700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A9798()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserProfile(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserProfile(void)::common_UserProfile;
}

void sub_1CA2A9950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppSection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppSection(void)::common_AppSection;
}

void sub_1CA2A9B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EventTrigger(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EventTrigger(void)::common_EventTrigger;
}

void sub_1CA2A9DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2A9E74()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoCollection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoCollection(void)::common_PhotoCollection;
}

void sub_1CA2AA080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AA118()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Reminder(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Reminder(void)::common_Reminder;
}

void sub_1CA2AA2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AA38C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType(void)::common_ReactionType;
}

void sub_1CA2AA560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AA5F0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DigitalFace(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DigitalFace(void)::common_DigitalFace;
}

void sub_1CA2AA7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RadioStation(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RadioStation(void)::common_RadioStation;
}

void sub_1CA2AA9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Religion(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Religion(void)::common_Religion;
}

void sub_1CA2AAC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeZone(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TimeZone(void)::common_TimeZone;
}

void sub_1CA2AAE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Decimal(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Decimal(void)::common_Decimal;
}

void sub_1CA2AB0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0) {
    operator delete(*(void **)(v38 - 216));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AB194()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection(void)::common_SortDirection;
}

void sub_1CA2AB364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AB3F4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageType(void)::common_MessageType;
}

void sub_1CA2AB5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AB63C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortValue(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortValue(void)::common_SortValue;
}

void sub_1CA2AB7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode(void)::common_PhoneCallMode;
}

void sub_1CA2ABA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ABAC8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SportsItem(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SportsItem(void)::common_SportsItem;
}

void sub_1CA2ABC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ABD1C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderType(void)::common_ReminderType;
}

void sub_1CA2ABED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ABF60()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionAttribute(void)::common_KnowledgeQuestionAttribute;
}

void sub_1CA2AC110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion(void)::common_MediaItemVersion;
}

void sub_1CA2AC368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AC3F8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaCapture(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaCapture(void)::common_MediaCapture;
}

void sub_1CA2AC5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 216);
  if (*(char *)(v36 - 153) < 0) {
    operator delete(*(void **)(v36 - 176));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AC64C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Reaction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Reaction(void)::common_Reaction;
}

void sub_1CA2AC804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DailyBriefing(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DailyBriefing(void)::common_DailyBriefing;
}

void sub_1CA2ACA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 216);
  if (*(char *)(v36 - 153) < 0) {
    operator delete(*(void **)(v36 - 176));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ACAE8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Meridiem(void)::common_Meridiem;
}

void sub_1CA2ACCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ACD34()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Tag(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Tag(void)::common_Tag;
}

void sub_1CA2ACEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey(void)::common_PaymentSortKey;
}

void sub_1CA2AD134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AD1C4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MixedFraction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MixedFraction(void)::common_MixedFraction;
}

void sub_1CA2AD3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0) {
    operator delete(*(void **)(v38 - 216));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AD460()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Voicemail(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Voicemail(void)::common_Voicemail;
}

void sub_1CA2AD658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AD6F0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ContactAddress(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ContactAddress(void)::common_ContactAddress;
}

void sub_1CA2AD89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PointOfInterest(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PointOfInterest(void)::common_PointOfInterest;
}

void sub_1CA2ADB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ADB90()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier(void)::common_MeasurementQualifier;
}

void sub_1CA2ADD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2ADDDC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier(void)::common_Quantifier;
}

void sub_1CA2ADFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0) {
    operator delete(*(void **)(v38 - 184));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AE038()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentType(void)::common_AdjustmentType;
}

void sub_1CA2AE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AE280()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState(void)::common_EmailState;
}

void sub_1CA2AE444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AE4D4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotificationType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NotificationType(void)::common_NotificationType;
}

void sub_1CA2AE680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoTag(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoTag(void)::common_PhotoTag;
}

void sub_1CA2AE8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PointOfInterestType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PointOfInterestType(void)::common_PointOfInterestType;
}

void sub_1CA2AEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecipeStep(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecipeStep(void)::common_RecipeStep;
}

void sub_1CA2AED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AEDE8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureComponent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureComponent(void)::common_TemperatureComponent;
}

void sub_1CA2AEFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AF034()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear(void)::common_MonthOfYear;
}

void sub_1CA2AF208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 177) < 0) {
    operator delete(*(void **)(v38 - 200));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AF298()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange(void)::common_DateTimeRange;
}

void sub_1CA2AF484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AF514()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit(void)::common_TemperatureUnit;
}

void sub_1CA2AF72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AF7C4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SafetySession(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SafetySession(void)::common_SafetySession;
}

void sub_1CA2AF9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2AFA34()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DailyBriefingItem(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DailyBriefingItem(void)::common_DailyBriefingItem;
}

void sub_1CA2AFBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_QRCodeType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_QRCodeType(void)::common_QRCodeType;
}

void sub_1CA2AFE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentAccountType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentAccountType(void)::common_PaymentAccountType;
}

void sub_1CA2B004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonContact(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonContact(void)::common_PersonContact;
}

void sub_1CA2B02A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 232);
  if (*(char *)(v36 - 169) < 0) {
    operator delete(*(void **)(v36 - 192));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B0338()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ListPosition(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ListPosition(void)::common_ListPosition;
}

void sub_1CA2B0530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B05C0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ProductCategory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ProductCategory(void)::common_ProductCategory;
}

void sub_1CA2B0770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarSystem(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarSystem(void)::common_CalendarSystem;
}

void sub_1CA2B09A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonProperty(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonProperty(void)::common_PersonProperty;
}

void sub_1CA2B0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Color(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Color(void)::common_Color;
}

void sub_1CA2B0E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Note(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Note(void)::common_Note;
}

void sub_1CA2B1094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B1124()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceTrigger(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_VoiceTrigger(void)::common_VoiceTrigger;
}

void sub_1CA2B12E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B1370()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time24HourClock(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time24HourClock(void)::common_Time24HourClock;
}

void sub_1CA2B1554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B15EC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Size(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Size(void)::common_Size;
}

void sub_1CA2B179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Compass(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Compass(void)::common_Compass;
}

void sub_1CA2B19DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Locale(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Locale(void)::common_Locale;
}

void sub_1CA2B1C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementUnitType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementUnitType(void)::common_MeasurementUnitType;
}

void sub_1CA2B1E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B1EE0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FormattedString(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_FormattedString(void)::common_FormattedString;
}

void sub_1CA2B208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutEquipment(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutEquipment(void)::common_WorkoutEquipment;
}

void sub_1CA2B22C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonName(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonName(void)::common_PersonName;
}

void sub_1CA2B2508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 232);
  if (*(char *)(v36 - 169) < 0) {
    operator delete(*(void **)(v36 - 192));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoMemory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoMemory(void)::common_PhotoMemory;
}

void sub_1CA2B2750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TimeUnit(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TimeUnit(void)::common_TimeUnit;
}

void sub_1CA2B29BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (a48 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v48, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B2A54()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Politeness(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Politeness(void)::common_Politeness;
}

void sub_1CA2B2C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B2C9C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Arithmetic(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Arithmetic(void)::common_Arithmetic;
}

void sub_1CA2B2E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B2EFC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CarSetting(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CarSetting(void)::common_CarSetting;
}

void sub_1CA2B30CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B315C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Age(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Age(void)::common_Age;
}

void sub_1CA2B3338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B33D0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Video(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Video(void)::common_Video;
}

void sub_1CA2B35D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B3668()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DeviceProperty(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DeviceProperty(void)::common_DeviceProperty;
}

void sub_1CA2B3820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCall(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCall(void)::common_PhoneCall;
}

void sub_1CA2B3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B3B48()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SettingValueType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SettingValueType(void)::common_SettingValueType;
}

void sub_1CA2B3D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B3D90()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Interjection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Interjection(void)::common_Interjection;
}

void sub_1CA2B3F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B3FF8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SocialConversation(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SocialConversation(void)::common_SocialConversation;
}

void sub_1CA2B41C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B4250()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailLabel(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailLabel(void)::common_EmailLabel;
}

void sub_1CA2B43FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SettingValue(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SettingValue(void)::common_SettingValue;
}

void sub_1CA2B4644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppSubSection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppSubSection(void)::common_AppSubSection;
}

void sub_1CA2B4878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Organization(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Organization(void)::common_Organization;
}

void sub_1CA2B4AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B4B90()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Email(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Email(void)::common_Email;
}

void sub_1CA2B4D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B4E24()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DayOfWeek(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DayOfWeek(void)::common_DayOfWeek;
}

void sub_1CA2B4FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0) {
    operator delete(*(void **)(v38 - 184));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B507C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageLabel(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageLabel(void)::common_MessageLabel;
}

void sub_1CA2B5228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_QRCode(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_QRCode(void)::common_QRCode;
}

void sub_1CA2B5460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppState(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppState(void)::common_AppState;
}

void sub_1CA2B56A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B5730()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntityType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntityType(void)::common_UserEntityType;
}

void sub_1CA2B58DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CrisisSupport(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CrisisSupport(void)::common_CrisisSupport;
}

void sub_1CA2B5B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B5BB8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Attachment(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Attachment(void)::common_Attachment;
}

void sub_1CA2B5D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 216);
  if (*(char *)(v36 - 153) < 0) {
    operator delete(*(void **)(v36 - 176));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Website(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Website(void)::common_Website;
}

void sub_1CA2B5FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserFavorite(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserFavorite(void)::common_UserFavorite;
}

void sub_1CA2B61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageMode(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageMode(void)::common_MessageMode;
}

void sub_1CA2B6428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B64B8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarEventType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarEventType(void)::common_CalendarEventType;
}

void sub_1CA2B6670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B6700()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CarProfile(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CarProfile(void)::common_CarProfile;
}

void sub_1CA2B68B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaContent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaContent(void)::common_MediaContent;
}

void sub_1CA2B6AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CollaborationMode(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CollaborationMode(void)::common_CollaborationMode;
}

void sub_1CA2B6D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B6DC8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_IngredientSubstitution(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_IngredientSubstitution(void)::common_IngredientSubstitution;
}

void sub_1CA2B6F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0) {
    operator delete(*(void **)(v37 - 152));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageState(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageState(void)::common_MessageState;
}

void sub_1CA2B71BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B724C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderList(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderList(void)::common_ReminderList;
}

void sub_1CA2B7438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 209) < 0) {
    operator delete(*(void **)(v40 - 232));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B74C8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotificationAction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NotificationAction(void)::common_NotificationAction;
}

void sub_1CA2B767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SearchQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SearchQualifier(void)::common_SearchQualifier;
}

void sub_1CA2B78F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 185) < 0) {
    operator delete(*(void **)(v39 - 208));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B798C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDate(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDate(void)::common_OffsetDate;
}

void sub_1CA2B7B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (a48 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v48, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B7C3C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntityType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppEntityType(void)::common_AppEntityType;
}

void sub_1CA2B7DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FavoriteCategory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_FavoriteCategory(void)::common_FavoriteCategory;
}

void sub_1CA2B801C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Utilities(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Utilities(void)::common_Utilities;
}

void sub_1CA2B826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B82FC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Clock(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Clock(void)::common_Clock;
}

void sub_1CA2B84B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PlaybackState(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PlaybackState(void)::common_PlaybackState;
}

void sub_1CA2B8704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B8794()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriSocialAction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriSocialAction(void)::common_SiriSocialAction;
}

void sub_1CA2B8944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Integer(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Integer(void)::common_Integer;
}

void sub_1CA2B8BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 177) < 0) {
    operator delete(*(void **)(v38 - 200));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B8C5C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriProperty(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriProperty(void)::common_SiriProperty;
}

void sub_1CA2B8E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Stock(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Stock(void)::common_Stock;
}

void sub_1CA2B9094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B9134()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailProvider(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailProvider(void)::common_EmailProvider;
}

void sub_1CA2B92E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Device(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Device(void)::common_Device;
}

void sub_1CA2B953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B95CC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Medication(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Medication(void)::common_Medication;
}

void sub_1CA2B9778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementUnit(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementUnit(void)::common_MeasurementUnit;
}

void sub_1CA2B9A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B9AA0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriOpinion(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriOpinion(void)::common_SiriOpinion;
}

void sub_1CA2B9C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestion(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestion(void)::common_KnowledgeQuestion;
}

void sub_1CA2B9EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2B9F40()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SocialInterjection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SocialInterjection(void)::common_SocialInterjection;
}

void sub_1CA2BA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserPossession(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserPossession(void)::common_UserPossession;
}

void sub_1CA2BA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(void)::common_RecurringDateTime;
}

void sub_1CA2BA5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0) {
    operator delete(*(void **)(v38 - 216));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BA64C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Announcement(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Announcement(void)::common_Announcement;
}

void sub_1CA2BA820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BA8B0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemType(void)::common_MediaItemType;
}

void sub_1CA2BAA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BAB2C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriFavorite(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriFavorite(void)::common_SiriFavorite;
}

void sub_1CA2BACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Payment(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Payment(void)::common_Payment;
}

void sub_1CA2BAF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (a50 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v50, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BAFD4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MultipliedNumber(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MultipliedNumber(void)::common_MultipliedNumber;
}

void sub_1CA2BB1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a16);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 177) < 0) {
    operator delete(*(void **)(v38 - 200));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BB270()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Timer(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Timer(void)::common_Timer;
}

void sub_1CA2BB448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 217) < 0) {
    operator delete(*(void **)(v41 - 240));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BB4D8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotebookItem(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NotebookItem(void)::common_NotebookItem;
}

void sub_1CA2BB6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BB74C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OpinionJudgment(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OpinionJudgment(void)::common_OpinionJudgment;
}

void sub_1CA2BB8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceCommand(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_VoiceCommand(void)::common_VoiceCommand;
}

void sub_1CA2BBB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_GeographicArea(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_GeographicArea(void)::common_GeographicArea;
}

void sub_1CA2BBD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 185) < 0) {
    operator delete(*(void **)(v39 - 208));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BBE2C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Tapback(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Tapback(void)::common_Tapback;
}

void sub_1CA2BBFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0) {
    operator delete(*(void **)(v37 - 152));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriPossession(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriPossession(void)::common_SiriPossession;
}

void sub_1CA2BC218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserSocialAction(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserSocialAction(void)::common_UserSocialAction;
}

void sub_1CA2BC450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Ingredient(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Ingredient(void)::common_Ingredient;
}

void sub_1CA2BC680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0) {
    operator delete(*(void **)(v37 - 152));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_HolidayPhrase(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_HolidayPhrase(void)::common_HolidayPhrase;
}

void sub_1CA2BC8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserVisualMedia(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserVisualMedia(void)::common_UserVisualMedia;
}

void sub_1CA2BCB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BCBC0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserProperty(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserProperty(void)::common_UserProperty;
}

void sub_1CA2BCD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarEvent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarEvent(void)::common_CalendarEvent;
}

void sub_1CA2BD008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BD0A0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Salutation(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Salutation(void)::common_Salutation;
}

void sub_1CA2BD258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ActivationValue(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ActivationValue(void)::common_ActivationValue;
}

void sub_1CA2BD49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BD52C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_FavoriteInstance(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_FavoriteInstance(void)::common_FavoriteInstance;
}

void sub_1CA2BD6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MedicationSchedule(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MedicationSchedule(void)::common_MedicationSchedule;
}

void sub_1CA2BD934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BD9C4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriContentTopic(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriContentTopic(void)::common_SiriContentTopic;
}

void sub_1CA2BDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Alarm(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Alarm(void)::common_Alarm;
}

void sub_1CA2BDDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BDE58()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutInstructor(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutInstructor(void)::common_WorkoutInstructor;
}

void sub_1CA2BE004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTime(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTime(void)::common_DateTime;
}

void sub_1CA2BE280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a18);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BE318()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Journey(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Journey(void)::common_Journey;
}

void sub_1CA2BE4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementCategory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementCategory(void)::common_MeasurementCategory;
}

void sub_1CA2BE714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Slideshow(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Slideshow(void)::common_Slideshow;
}

void sub_1CA2BE99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BEA34()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(void)::common_DateTimeRangeQualifier;
}

void sub_1CA2BEBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0) {
    operator delete(*(void **)(v38 - 184));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BEC84()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_BillCategory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_BillCategory(void)::common_BillCategory;
}

void sub_1CA2BEE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Date(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Date(void)::common_Date;
}

void sub_1CA2BF0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 233) < 0) {
    operator delete(*(void **)(v39 - 256));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BF15C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AllDay(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AllDay(void)::common_AllDay;
}

void sub_1CA2BF314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BF3A4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_WorkoutGoal(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_WorkoutGoal(void)::common_WorkoutGoal;
}

void sub_1CA2BF564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BF5F4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SummaryMode(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SummaryMode(void)::common_SummaryMode;
}

void sub_1CA2BF7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BF83C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDirection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDirection(void)::common_OffsetDirection;
}

void sub_1CA2BF9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BFA88()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time(void)::common_Time;
}

void sub_1CA2BFC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 193) < 0) {
    operator delete(*(void **)(v38 - 216));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BFCF0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Message(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Message(void)::common_Message;
}

void sub_1CA2BFF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2BFFA4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailFolder(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailFolder(void)::common_EmailFolder;
}

void sub_1CA2C0158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0) {
    operator delete(*(void **)(v37 - 152));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_HealthLog(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_HealthLog(void)::common_HealthLog;
}

void sub_1CA2C03A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriContentType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriContentType(void)::common_SiriContentType;
}

void sub_1CA2C05D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PersonRelationship(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PersonRelationship(void)::common_PersonRelationship;
}

void sub_1CA2C083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a18);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C08CC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Translation(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Translation(void)::common_Translation;
}

void sub_1CA2C0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderListType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderListType(void)::common_ReminderListType;
}

void sub_1CA2C0CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Photo(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Photo(void)::common_Photo;
}

void sub_1CA2C0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C0FCC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SiriAlias(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SiriAlias(void)::common_SiriAlias;
}

void sub_1CA2C1178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Writing(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Writing(void)::common_Writing;
}

void sub_1CA2C13D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C1468()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Audiobook(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Audiobook(void)::common_Audiobook;
}

void sub_1CA2C1618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Calendar(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Calendar(void)::common_Calendar;
}

void sub_1CA2C1858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_HomeEntity(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_HomeEntity(void)::common_HomeEntity;
}

void sub_1CA2C1A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentDirection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentDirection(void)::common_AdjustmentDirection;
}

void sub_1CA2C1CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Participant(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Participant(void)::common_Participant;
}

void sub_1CA2C1EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 208);
  if (*(char *)(v37 - 145) < 0) {
    operator delete(*(void **)(v37 - 168));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentAccount(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentAccount(void)::common_PaymentAccount;
}

void sub_1CA2C2150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (a50 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v50, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C21E0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NoteFolder(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NoteFolder(void)::common_NoteFolder;
}

void sub_1CA2C23A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 232);
  if (*(char *)(v36 - 169) < 0) {
    operator delete(*(void **)(v36 - 192));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C2438()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Car(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Car(void)::common_Car;
}

void sub_1CA2C2644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (a47 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v47, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C26E4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RadioBand(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RadioBand(void)::common_RadioBand;
}

void sub_1CA2C28A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C2938()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DeviceCategory(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DeviceCategory(void)::common_DeviceCategory;
}

void sub_1CA2C2AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OpinionTopic(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OpinionTopic(void)::common_OpinionTopic;
}

void sub_1CA2C2D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_LocalBusiness(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_LocalBusiness(void)::common_LocalBusiness;
}

void sub_1CA2C2F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C3038()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Contact(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Contact(void)::common_Contact;
}

void sub_1CA2C31E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Communication(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Communication(void)::common_Communication;
}

void sub_1CA2C3444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C34D4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Duration(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Duration(void)::common_Duration;
}

void sub_1CA2C36E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 185) < 0) {
    operator delete(*(void **)(v39 - 208));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C3788()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NotebookList(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NotebookList(void)::common_NotebookList;
}

void sub_1CA2C3968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C39F8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionPersonAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_KnowledgeQuestionPersonAttribute(void)::common_KnowledgeQuestionPersonAttribute;
}

void sub_1CA2C3BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C3C44()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PostalAddress(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PostalAddress(void)::common_PostalAddress;
}

void sub_1CA2C3E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 201) < 0) {
    operator delete(*(void **)(v41 - 224));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C3EAC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Word(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Word(void)::common_Word;
}

void sub_1CA2C405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ActiveType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ActiveType(void)::common_ActiveType;
}

void sub_1CA2C42A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C4334()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaCaptureMode(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaCaptureMode(void)::common_MediaCaptureMode;
}

void sub_1CA2C44F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C4580()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_NumberSign(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_NumberSign(void)::common_NumberSign;
}

void sub_1CA2C473C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C47CC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ResponseStatus(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ResponseStatus(void)::common_ResponseStatus;
}

void sub_1CA2C4990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C4A20()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageFolder(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageFolder(void)::common_MessageFolder;
}

void sub_1CA2C4BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 192);
  if (*(char *)(v37 - 129) < 0) {
    operator delete(*(void **)(v37 - 152));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaShow(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaShow(void)::common_MediaShow;
}

void sub_1CA2C4E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ZoomDirection(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ZoomDirection(void)::common_ZoomDirection;
}

void sub_1CA2C5058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C50F0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhotoTopic(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhotoTopic(void)::common_PhotoTopic;
}

void sub_1CA2C52A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_JournalEntry(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_JournalEntry(void)::common_JournalEntry;
}

void sub_1CA2C54E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Recipe(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Recipe(void)::common_Recipe;
}

void sub_1CA2C5760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C57F0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateType(void)::common_DateType;
}

void sub_1CA2C59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C5A48()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Event(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Event(void)::common_Event;
}

void sub_1CA2C5C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AppEntity(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AppEntity(void)::common_AppEntity;
}

void sub_1CA2C5E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 217) < 0) {
    operator delete(*(void **)(v41 - 240));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C5EFC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_JourneyType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_JourneyType(void)::common_JourneyType;
}

void sub_1CA2C60A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(void)::common_VoiceCommandPayload;
}

void sub_1CA2C62F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a41);
  if (*(char *)(v42 - 209) < 0) {
    operator delete(*(void **)(v42 - 232));
  }
  MEMORY[0x1CB796510](v41, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SportsItemType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SportsItemType(void)::common_SportsItemType;
}

void sub_1CA2C6528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Similarity(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Similarity(void)::common_Similarity;
}

void sub_1CA2C676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C67FC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CalendarEra(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CalendarEra(void)::common_CalendarEra;
}

void sub_1CA2C69AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_StopWatch(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_StopWatch(void)::common_StopWatch;
}

void sub_1CA2C6BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementComponent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementComponent(void)::common_MeasurementComponent;
}

void sub_1CA2C6E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 200);
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EasterEgg(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EasterEgg(void)::common_EasterEgg;
}

void sub_1CA2C7050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortOrder(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortOrder(void)::common_SortOrder;
}

void sub_1CA2C7290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C7320()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TapbackType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TapbackType(void)::common_TapbackType;
}

void sub_1CA2C74CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v37 - 176);
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  MEMORY[0x1CB796510](v36, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaPlaylist(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaPlaylist(void)::common_MediaPlaylist;
}

void sub_1CA2C7704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Notification(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Notification(void)::common_Notification;
}

void sub_1CA2C796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C79FC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetTime(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetTime(void)::common_OffsetTime;
}

void sub_1CA2C7BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a38);
  if (*(char *)(v39 - 201) < 0) {
    operator delete(*(void **)(v39 - 224));
  }
  MEMORY[0x1CB796510](v38, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C7C80()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MicroGeographicArea(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MicroGeographicArea(void)::common_MicroGeographicArea;
}

void sub_1CA2C7E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C7F1C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonAlarm_AlarmAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonAlarm_AlarmAttribute(void)::commonAlarm_AlarmAttribute;
}

void sub_1CA2C80C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonApp_AppListingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonApp_AppListingAttribute(void)::commonApp_AppListingAttribute;
}

void sub_1CA2C82EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonApp_AppAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonApp_AppAttribute(void)::commonApp_AppAttribute;
}

void sub_1CA2C8518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonArithmetic_ArithmeticAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonArithmetic_ArithmeticAttribute(void)::commonArithmetic_ArithmeticAttribute;
}

void sub_1CA2C8744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonCalendarEvent_CalendarEventAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonCalendarEvent_CalendarEventAttribute(void)::commonCalendarEvent_CalendarEventAttribute;
}

void sub_1CA2C8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonContact_ContactAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonContact_ContactAttribute(void)::commonContact_ContactAttribute;
}

void sub_1CA2C8BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C8C44()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonEmail_EmailAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonEmail_EmailAttribute(void)::commonEmail_EmailAttribute;
}

void sub_1CA2C8DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonEventTrigger_EventTriggerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonEventTrigger_EventTriggerAttribute(void)::commonEventTrigger_EventTriggerAttribute;
}

void sub_1CA2C902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C90BC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonFindMy_DeviceAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonFindMy_DeviceAttribute(void)::commonFindMy_DeviceAttribute;
}

void sub_1CA2C9260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonMessage_MessageAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonMessage_MessageAttribute(void)::commonMessage_MessageAttribute;
}

void sub_1CA2C948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookItemType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookItemType(void)::commonNotebook_NotebookItemType;
}

void sub_1CA2C96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 161) < 0) {
    operator delete(*(void **)(v38 - 184));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2C976C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonNotebook_NotebookAttribute(void)::commonNotebook_NotebookAttribute;
}

void sub_1CA2C9910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonNotification_NotificationAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonNotification_NotificationAttribute(void)::commonNotification_NotificationAttribute;
}

void sub_1CA2C9B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPayments_CurrencyAmountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPayments_CurrencyAmountAttribute(void)::commonPayments_CurrencyAmountAttribute;
}

void sub_1CA2C9D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAccountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAccountAttribute(void)::commonPayments_PaymentAccountAttribute;
}

void sub_1CA2C9F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPayments_PaymentAttribute(void)::commonPayments_PaymentAttribute;
}

void sub_1CA2CA1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhoneCall_PhoneCallAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhoneCall_PhoneCallAttribute(void)::commonPhoneCall_PhoneCallAttribute;
}

void sub_1CA2CA404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CA494()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryFilter(void)::commonPhotos_PhotoMemoryFilter;
}

void sub_1CA2CA638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionAttribute(void)::commonPhotos_PhotoCollectionAttribute;
}

void sub_1CA2CA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowAttribute(void)::commonPhotos_SlideshowAttribute;
}

void sub_1CA2CAA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoFilter(void)::commonPhotos_PhotoFilter;
}

void sub_1CA2CACBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_VideoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_VideoFilter(void)::commonPhotos_VideoFilter;
}

void sub_1CA2CAEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoAttribute(void)::commonPhotos_PhotoAttribute;
}

void sub_1CA2CB114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoMemoryAttribute(void)::commonPhotos_PhotoMemoryAttribute;
}

void sub_1CA2CB340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_PhotoCollectionFilter(void)::commonPhotos_PhotoCollectionFilter;
}

void sub_1CA2CB56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_SlideshowFilter(void)::commonPhotos_SlideshowFilter;
}

void sub_1CA2CB798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonPhotos_VideoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonPhotos_VideoAttribute(void)::commonPhotos_VideoAttribute;
}

void sub_1CA2CB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonStock_StockType(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonStock_StockType(void)::commonStock_StockType;
}

void sub_1CA2CBC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 192);
  if (*(char *)(v33 - 129) < 0) {
    operator delete(*(void **)(v33 - 152));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CBC98()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonStock_StockAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonStock_StockAttribute(void)::commonStock_StockAttribute;
}

void sub_1CA2CBE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a37);
  if (*(char *)(v38 - 209) < 0) {
    operator delete(*(void **)(v38 - 232));
  }
  MEMORY[0x1CB796510](v37, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CBEF8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonStock_StockChangeState(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonStock_StockChangeState(void)::commonStock_StockChangeState;
}

void sub_1CA2CC0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v33 - 208);
  if (*(char *)(v33 - 145) < 0) {
    operator delete(*(void **)(v33 - 168));
  }
  MEMORY[0x1CB796510](v32, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CC144()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonTimer_TimerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonTimer_TimerAttribute(void)::commonTimer_TimerAttribute;
}

void sub_1CA2CC2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::commonUserEntity_UserEntityAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonUserEntity_UserEntityAttribute(void)::commonUserEntity_UserEntityAttribute;
}

void sub_1CA2CC528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v34 - 184);
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  MEMORY[0x1CB796510](v33, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CC5B8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::commonWriting_WritingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::commonWriting_WritingAttribute(void)::commonWriting_WritingAttribute;
}

void sub_1CA2CC75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_ContactAgent(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_ContactAgent(void)::sirikit_ContactAgent;
}

void sub_1CA2CC9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CCA74()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_MediaShow(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_MediaShow(void)::sirikit_MediaShow;
}

void sub_1CA2CCC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (a50 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v50, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CCD20()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_PaymentOrganization(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_PaymentOrganization(void)::sirikit_PaymentOrganization;
}

void sub_1CA2CCF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CCFB0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_MusicArtist(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_MusicArtist(void)::sirikit_MusicArtist;
}

void sub_1CA2CD1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a40);
  if (*(char *)(v41 - 185) < 0) {
    operator delete(*(void **)(v41 - 208));
  }
  MEMORY[0x1CB796510](v40, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CD240()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_ContactGroup(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_ContactGroup(void)::sirikit_ContactGroup;
}

void sub_1CA2CD430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CD4D0()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::sirikit_AudiobookAuthor(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::sirikit_AudiobookAuthor(void)::sirikit_AudiobookAuthor;
}

void sub_1CA2CD6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a12);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (a49 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1CB796510](v49, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CD78C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::uso_NoEntity(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::uso_NoEntity(void)::uso_NoEntity;
}

void sub_1CA2CD94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::uso_NLv3UnknownEntity(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::uso_NLv3UnknownEntity(void)::uso_NLv3UnknownEntity;
}

void sub_1CA2CDB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v36 - 184);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  MEMORY[0x1CB796510](v35, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleApp_AppAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleApp_AppAttribute(void)::appleApp_AppAttribute;
}

void sub_1CA2CDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CDE68()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleApp_AppListingAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleApp_AppListingAttribute(void)::appleApp_AppListingAttribute;
}

void sub_1CA2CE04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 209) < 0) {
    operator delete(*(void **)(v40 - 232));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CE0E4()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleCalendarEvent_CalendarEventAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleCalendarEvent_CalendarEventAttribute(void)::appleCalendarEvent_CalendarEventAttribute;
}

void sub_1CA2CE2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 209) < 0) {
    operator delete(*(void **)(v40 - 232));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CE35C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePayments_CurrencyAmountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePayments_CurrencyAmountAttribute(void)::applePayments_CurrencyAmountAttribute;
}

void sub_1CA2CE530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 208);
  if (*(char *)(v35 - 145) < 0) {
    operator delete(*(void **)(v35 - 168));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CE5C8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePayments_PaymentAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePayments_PaymentAttribute(void)::applePayments_PaymentAttribute;
}

void sub_1CA2CE7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 193) < 0) {
    operator delete(*(void **)(v40 - 216));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CE83C()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePayments_PaymentAccountAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePayments_PaymentAccountAttribute(void)::applePayments_PaymentAccountAttribute;
}

void sub_1CA2CEA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 177) < 0) {
    operator delete(*(void **)(v40 - 200));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CEAAC()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEventTrigger_EventTriggerAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEventTrigger_EventTriggerAttribute(void)::appleEventTrigger_EventTriggerAttribute;
}

void sub_1CA2CEC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 192);
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CED08()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotos_PhotoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhotos_PhotoAttribute(void)::applePhotos_PhotoAttribute;
}

void sub_1CA2CEEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CEF80()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotos_PhotoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhotos_PhotoFilter(void)::applePhotos_PhotoFilter;
}

void sub_1CA2CF150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CF1E8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionFilter(void)::applePhotoCollection_PhotoCollectionFilter;
}

void sub_1CA2CF3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CF450()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoCollection_PhotoCollectionAttribute(void)::applePhotoCollection_PhotoCollectionAttribute;
}

void sub_1CA2CF630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CF6C8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryAttribute(void)::applePhotoMemory_PhotoMemoryAttribute;
}

void sub_1CA2CF8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CF940()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhotoMemory_PhotoMemoryFilter(void)::applePhotoMemory_PhotoMemoryFilter;
}

void sub_1CA2CFB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CFBA8()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowAttribute(void)::appleSlideshow_SlideshowAttribute;
}

void sub_1CA2CFD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2CFE20()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleSlideshow_SlideshowFilter(void)::appleSlideshow_SlideshowFilter;
}

void sub_1CA2CFFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2D0088()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleVideo_VideoAttribute(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleVideo_VideoAttribute(void)::appleVideo_VideoAttribute;
}

void sub_1CA2D0268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a39);
  if (*(char *)(v40 - 225) < 0) {
    operator delete(*(void **)(v40 - 248));
  }
  MEMORY[0x1CB796510](v39, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2D0300()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::appleVideo_VideoFilter(siri::ontology::oname::graph::ontology_init *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleVideo_VideoFilter(void)::appleVideo_VideoFilter;
}

void sub_1CA2D04D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a34);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v35 - 224);
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  MEMORY[0x1CB796510](v34, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

void sub_1CA2D0568()
{
}

uint64_t siri::ontology::oname::graph::ontology_init::apple_MessageEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::apple_MessageEffect(void)::apple_MessageEffect;
}

void sub_1CA2D06AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  MEMORY[0x1CB796510](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::uso_UnknownEntity(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::uso_UnknownEntity(void)::uso_UnknownEntity;
}

void sub_1CA2D0868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  MEMORY[0x1CB796510](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeList(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeList(void)::common_RecurringDateTimeList;
}

void sub_1CA2D0A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  MEMORY[0x1CB796510](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AgentContact(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AgentContact(void)::common_AgentContact;
}

void sub_1CA2D0BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  MEMORY[0x1CB796510](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_GroupContact(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_GroupContact(void)::common_GroupContact;
}

void sub_1CA2D0D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  MEMORY[0x1CB796510](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_URI(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_URI(void)::common_URI;
}

void sub_1CA2D0F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v30 - 96);
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  MEMORY[0x1CB796510](v29, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSound(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSound(void)::appleAlarm_AlarmAttribute_AlarmAttributesSound;
}

void sub_1CA2D1128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesNotSet(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesNotSet(void)::appleAlarm_AlarmAttribute_AlarmAttributesNotSet;
}

void sub_1CA2D1300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSet(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSet(void)::appleAlarm_AlarmAttribute_AlarmAttributesSet;
}

void sub_1CA2D14D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSleep(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleAlarm_AlarmAttribute_AlarmAttributesSleep(void)::appleAlarm_AlarmAttribute_AlarmAttributesSleep;
}

void sub_1CA2D16B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage(void)::appleArithmetic_ArithmeticAttribute_ArithmeticAttributesPercentage;
}

void sub_1CA2D1888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_Contact(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_Contact(void)::appleContact_ContactAttribute_Contact;
}

void sub_1CA2D1A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesFuture(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesFuture(void)::appleContact_ContactAttribute_ContactAttributesFuture;
}

void sub_1CA2D1C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPresent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPresent(void)::appleContact_ContactAttribute_ContactAttributesPresent;
}

void sub_1CA2D1E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPast(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesPast(void)::appleContact_ContactAttribute_ContactAttributesPast;
}

void sub_1CA2D1FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesRingtone(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesRingtone(void)::appleContact_ContactAttribute_ContactAttributesRingtone;
}

void sub_1CA2D21C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesTextTone(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesTextTone(void)::appleContact_ContactAttribute_ContactAttributesTextTone;
}

void sub_1CA2D2398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesHomePage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleContact_ContactAttribute_ContactAttributesHomePage(void)::appleContact_ContactAttribute_ContactAttributesHomePage;
}

void sub_1CA2D2570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesNew(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesNew(void)::appleEmail_EmailAttribute_EmailAttributesNew;
}

void sub_1CA2D2748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesRead(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesRead(void)::appleEmail_EmailAttribute_EmailAttributesRead;
}

void sub_1CA2D2920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnread(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnread(void)::appleEmail_EmailAttribute_EmailAttributesUnread;
}

void sub_1CA2D2AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesFlagged(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesFlagged(void)::appleEmail_EmailAttribute_EmailAttributesFlagged;
}

void sub_1CA2D2CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSaved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSaved(void)::appleEmail_EmailAttribute_EmailAttributesSaved;
}

void sub_1CA2D2EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnsaved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesUnsaved(void)::appleEmail_EmailAttribute_EmailAttributesUnsaved;
}

void sub_1CA2D3080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesSent(void)::appleEmail_EmailAttribute_EmailAttributesSent;
}

void sub_1CA2D3258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesReceived(void)::appleEmail_EmailAttribute_EmailAttributesReceived;
}

void sub_1CA2D3430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesLatest(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesLatest(void)::appleEmail_EmailAttribute_EmailAttributesLatest;
}

void sub_1CA2D3608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesPreview(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesPreview(void)::appleEmail_EmailAttribute_EmailAttributesPreview;
}

void sub_1CA2D37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesAttachment(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleEmail_EmailAttribute_EmailAttributesAttachment(void)::appleEmail_EmailAttribute_EmailAttributesAttachment;
}

void sub_1CA2D39B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNotification(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNotification(void)::appleMessage_MessageAttribute_SmsAttributesNotification;
}

void sub_1CA2D3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesMusicSharing(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesMusicSharing(void)::appleMessage_MessageAttribute_SmsAttributesMusicSharing;
}

void sub_1CA2D3D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFireworksEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFireworksEffect(void)::appleMessage_MessageAttribute_SmsAttributesFireworksEffect;
}

void sub_1CA2D3F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect(void)::appleMessage_MessageAttribute_SmsAttributesShootingStarEffect;
}

void sub_1CA2D4118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesHandwritten(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesHandwritten(void)::appleMessage_MessageAttribute_SmsAttributesHandwritten;
}

void sub_1CA2D42F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoveEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoveEffect(void)::appleMessage_MessageAttribute_SmsAttributesLoveEffect;
}

void sub_1CA2D44C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect(void)::appleMessage_MessageAttribute_SmsAttributesSpotlightEffect;
}

void sub_1CA2D46A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect(void)::appleMessage_MessageAttribute_SmsAttributesBalloonsEffect;
}

void sub_1CA2D4878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesEchoEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesEchoEffect(void)::appleMessage_MessageAttribute_SmsAttributesEchoEffect;
}

void sub_1CA2D4A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesGentleEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesGentleEffect(void)::appleMessage_MessageAttribute_SmsAttributesGentleEffect;
}

void sub_1CA2D4C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect(void)::appleMessage_MessageAttribute_SmsAttributesCelebrationEffect;
}

void sub_1CA2D4E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesDigitalTouch(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesDigitalTouch(void)::appleMessage_MessageAttribute_SmsAttributesDigitalTouch;
}

void sub_1CA2D4FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLasersEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLasersEffect(void)::appleMessage_MessageAttribute_SmsAttributesLasersEffect;
}

void sub_1CA2D51B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoudEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLoudEffect(void)::appleMessage_MessageAttribute_SmsAttributesLoudEffect;
}

void sub_1CA2D5388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect(void)::appleMessage_MessageAttribute_SmsAttributesInvisibleInkEffect;
}

void sub_1CA2D5560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesConfettiEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesConfettiEffect(void)::appleMessage_MessageAttribute_SmsAttributesConfettiEffect;
}

void sub_1CA2D5738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSlamEffect(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSlamEffect(void)::appleMessage_MessageAttribute_SmsAttributesSlamEffect;
}

void sub_1CA2D5910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesAttachment(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesAttachment(void)::appleMessage_MessageAttribute_SmsAttributesAttachment;
}

void sub_1CA2D5AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesStickers(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesStickers(void)::appleMessage_MessageAttribute_SmsAttributesStickers;
}

void sub_1CA2D5CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounAudioMessage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounAudioMessage(void)::appleMessage_MessageAttribute_SmsNounAudioMessage;
}

void sub_1CA2D5E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounImageMessage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounImageMessage(void)::appleMessage_MessageAttribute_SmsNounImageMessage;
}

void sub_1CA2D6070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsSharedEntityMyLocation(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsSharedEntityMyLocation(void)::appleMessage_MessageAttribute_SmsSharedEntityMyLocation;
}

void sub_1CA2D6248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounVideoMessage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsNounVideoMessage(void)::appleMessage_MessageAttribute_SmsNounVideoMessage;
}

void sub_1CA2D6420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesTapback(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesTapback(void)::appleMessage_MessageAttribute_SmsAttributesTapback;
}

void sub_1CA2D65F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnflagged(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnflagged(void)::appleMessage_MessageAttribute_SmsAttributesUnflagged;
}

void sub_1CA2D67D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSaved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSaved(void)::appleMessage_MessageAttribute_SmsAttributesSaved;
}

void sub_1CA2D69A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFlagged(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesFlagged(void)::appleMessage_MessageAttribute_SmsAttributesFlagged;
}

void sub_1CA2D6B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesRead(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesRead(void)::appleMessage_MessageAttribute_SmsAttributesRead;
}

void sub_1CA2D6D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSent(void)::appleMessage_MessageAttribute_SmsAttributesSent;
}

void sub_1CA2D6F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnread(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnread(void)::appleMessage_MessageAttribute_SmsAttributesUnread;
}

void sub_1CA2D7108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNew(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesNew(void)::appleMessage_MessageAttribute_SmsAttributesNew;
}

void sub_1CA2D72E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLatest(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesLatest(void)::appleMessage_MessageAttribute_SmsAttributesLatest;
}

void sub_1CA2D74B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSubject(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesSubject(void)::appleMessage_MessageAttribute_SmsAttributesSubject;
}

void sub_1CA2D7690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnsaved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesUnsaved(void)::appleMessage_MessageAttribute_SmsAttributesUnsaved;
}

void sub_1CA2D7868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleMessage_MessageAttribute_SmsAttributesReceived(void)::appleMessage_MessageAttribute_SmsAttributesReceived;
}

void sub_1CA2D7A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortUpcoming(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortUpcoming(void)::appleNotebook_NotebookAttribute_NotebookSortUpcoming;
}

void sub_1CA2D7C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortRecent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortRecent(void)::appleNotebook_NotebookAttribute_NotebookSortRecent;
}

void sub_1CA2D7DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortOld(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortOld(void)::appleNotebook_NotebookAttribute_NotebookSortOld;
}

void sub_1CA2D7FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortDistance(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortDistance(void)::appleNotebook_NotebookAttribute_NotebookSortShortDistance;
}

void sub_1CA2D81A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongDistance(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongDistance(void)::appleNotebook_NotebookAttribute_NotebookSortLongDistance;
}

void sub_1CA2D8378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortMostItems(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortMostItems(void)::appleNotebook_NotebookAttribute_NotebookSortMostItems;
}

void sub_1CA2D8550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLeastItems(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLeastItems(void)::appleNotebook_NotebookAttribute_NotebookSortLeastItems;
}

void sub_1CA2D8728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongLength(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLongLength(void)::appleNotebook_NotebookAttribute_NotebookSortLongLength;
}

void sub_1CA2D8900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortLength(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortShortLength(void)::appleNotebook_NotebookAttribute_NotebookSortShortLength;
}

void sub_1CA2D8AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortHighPriority(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortHighPriority(void)::appleNotebook_NotebookAttribute_NotebookSortHighPriority;
}

void sub_1CA2D8CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLowPriority(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookSortLowPriority(void)::appleNotebook_NotebookAttribute_NotebookSortLowPriority;
}

void sub_1CA2D8E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesComplete(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesComplete(void)::appleNotebook_NotebookAttribute_NotebookAttributesComplete;
}

void sub_1CA2D9060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete(void)::appleNotebook_NotebookAttribute_NotebookAttributesIncomplete;
}

void sub_1CA2D9238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesPriority(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesPriority(void)::appleNotebook_NotebookAttribute_NotebookAttributesPriority;
}

void sub_1CA2D9410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged(void)::appleNotebook_NotebookAttribute_NotebookAttributesUnflagged;
}

void sub_1CA2D95E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesFlagged(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesFlagged(void)::appleNotebook_NotebookAttribute_NotebookAttributesFlagged;
}

void sub_1CA2D97C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesAudio(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesAudio(void)::appleNotebook_NotebookAttribute_NotebookAttributesAudio;
}

void sub_1CA2D9998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesStatus(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesStatus(void)::appleNotebook_NotebookAttribute_NotebookAttributesStatus;
}

void sub_1CA2D9B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesOverdue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesOverdue(void)::appleNotebook_NotebookAttribute_NotebookAttributesOverdue;
}

void sub_1CA2D9D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesScheduled(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesScheduled(void)::appleNotebook_NotebookAttribute_NotebookAttributesScheduled;
}

void sub_1CA2D9F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesShared(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookAttributesShared(void)::appleNotebook_NotebookAttribute_NotebookAttributesShared;
}

void sub_1CA2DA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite(void)::appleNotebook_NotebookAttribute_NotebookContentEntityWebsite;
}

void sub_1CA2DA2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityUrl(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityUrl(void)::appleNotebook_NotebookAttribute_NotebookContentEntityUrl;
}

void sub_1CA2DA4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto(void)::appleNotebook_NotebookAttribute_NotebookContentEntityPhoto;
}

void sub_1CA2DA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityVideo(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityVideo(void)::appleNotebook_NotebookAttribute_NotebookContentEntityVideo;
}

void sub_1CA2DA858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityApp(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityApp(void)::appleNotebook_NotebookAttribute_NotebookContentEntityApp;
}

void sub_1CA2DAA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityEmail(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityEmail(void)::appleNotebook_NotebookAttribute_NotebookContentEntityEmail;
}

void sub_1CA2DAC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityMessage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityMessage(void)::appleNotebook_NotebookAttribute_NotebookContentEntityMessage;
}

void sub_1CA2DADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast(void)::appleNotebook_NotebookAttribute_NotebookContentEntityPodcast;
}

void sub_1CA2DAFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntitySong(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntitySong(void)::appleNotebook_NotebookAttribute_NotebookContentEntitySong;
}

void sub_1CA2DB190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityArticle(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityArticle(void)::appleNotebook_NotebookAttribute_NotebookContentEntityArticle;
}

void sub_1CA2DB368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityHigh(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityHigh(void)::appleNotebook_NotebookAttribute_NotebookPriorityHigh;
}

void sub_1CA2DB540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityMedium(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityMedium(void)::appleNotebook_NotebookAttribute_NotebookPriorityMedium;
}

void sub_1CA2DB718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityLow(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookPriorityLow(void)::appleNotebook_NotebookAttribute_NotebookPriorityLow;
}

void sub_1CA2DB8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityThis(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotebook_NotebookAttribute_NotebookContentEntityThis(void)::appleNotebook_NotebookAttribute_NotebookContentEntityThis;
}

void sub_1CA2DBAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute_NotificationAttributeLatest(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleNotification_NotificationAttribute_NotificationAttributeLatest(void)::appleNotification_NotificationAttribute_NotificationAttributeLatest;
}

void sub_1CA2DBCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_History(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_History(void)::applePhoneCall_PhoneCallAttribute_History;
}

void sub_1CA2DBE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_Group(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_Group(void)::applePhoneCall_PhoneCallAttribute_Group;
}

void sub_1CA2DC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounBluetooth;
}

void sub_1CA2DC228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesLast;
}

void sub_1CA2DC400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesOutgoing;
}

void sub_1CA2DC5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounNotSpeakerphone;
}

void sub_1CA2DC7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounSpeakerphone;
}

void sub_1CA2DC988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesCurrent;
}

void sub_1CA2DCB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesRecent;
}

void sub_1CA2DCD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesReceived;
}

void sub_1CA2DCF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesUnsaved;
}

void sub_1CA2DD0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesMissed;
}

void sub_1CA2DD2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesNew;
}

void sub_1CA2DD498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness(void)::applePhoneCall_PhoneCallAttribute_PhoneCallAttributesBusiness;
}

void sub_1CA2DD670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounEmergency;
}

void sub_1CA2DD848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime(void)::applePhoneCall_PhoneCallAttribute_PhoneCallNounGroupFacetime;
}

void sub_1CA2DDA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerTypeSleep(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerTypeSleep(void)::appleTimer_TimerAttribute_TimerTypeSleep;
}

void sub_1CA2DDBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOff(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOff(void)::appleTimer_TimerAttribute_TimerAttributesOff;
}

void sub_1CA2DDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesRunning(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesRunning(void)::appleTimer_TimerAttribute_TimerAttributesRunning;
}

void sub_1CA2DDFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesPaused(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesPaused(void)::appleTimer_TimerAttribute_TimerAttributesPaused;
}

void sub_1CA2DE180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerAttributesOn(void)::appleTimer_TimerAttribute_TimerAttributesOn;
}

void sub_1CA2DE358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerNounSleepTimer(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleTimer_TimerAttribute_TimerNounSleepTimer(void)::appleTimer_TimerAttribute_TimerNounSleepTimer;
}

void sub_1CA2DE530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounPoem(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounPoem(void)::appleWriting_WritingAttribute_WritingsNounPoem;
}

void sub_1CA2DE708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounCouplet(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounCouplet(void)::appleWriting_WritingAttribute_WritingsNounCouplet;
}

void sub_1CA2DE8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounXiehouyu(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounXiehouyu(void)::appleWriting_WritingAttribute_WritingsNounXiehouyu;
}

void sub_1CA2DEAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire(void)::appleWriting_WritingAttribute_WritingsNounIdiomSolitaire;
}

void sub_1CA2DEC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse(void)::appleWriting_WritingAttribute_WritingsQueryAttributeNextVerse;
}

void sub_1CA2DEE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse(void)::appleWriting_WritingAttribute_WritingsQueryAttributePrevVerse;
}

void sub_1CA2DF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet(void)::appleWriting_WritingAttribute_WritingsQueryAttributeMatchingCouplet;
}

void sub_1CA2DF218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection(void)::appleWriting_WritingAttribute_WritingsQueryAttributeAuthorCollection;
}

void sub_1CA2DF3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopRight(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopRight(void)::common_SpatialPosition_TopRight;
}

void sub_1CA2DF5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Right(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Right(void)::common_SpatialPosition_Right;
}

void sub_1CA2DF7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Left(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Left(void)::common_SpatialPosition_Left;
}

void sub_1CA2DF978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomLeft(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomLeft(void)::common_SpatialPosition_BottomLeft;
}

void sub_1CA2DFB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopLeft(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_TopLeft(void)::common_SpatialPosition_TopLeft;
}

void sub_1CA2DFD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Top(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Top(void)::common_SpatialPosition_Top;
}

void sub_1CA2DFF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Center(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Center(void)::common_SpatialPosition_Center;
}

void sub_1CA2E00D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomRight(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_BottomRight(void)::common_SpatialPosition_BottomRight;
}

void sub_1CA2E02B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Bottom(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialPosition_Bottom(void)::common_SpatialPosition_Bottom;
}

void sub_1CA2E0488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_CreatedBy(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_CreatedBy(void)::common_MediaItemRelationshipType_CreatedBy;
}

void sub_1CA2E0660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_ContainedOn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemRelationshipType_ContainedOn(void)::common_MediaItemRelationshipType_ContainedOn;
}

void sub_1CA2E0838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Optional(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Optional(void)::common_RequiredStatus_Optional;
}

void sub_1CA2E0A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Required(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RequiredStatus_Required(void)::common_RequiredStatus_Required;
}

void sub_1CA2E0BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus_NotCompleted(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus_NotCompleted(void)::common_CompletionStatus_NotCompleted;
}

void sub_1CA2E0DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Completed(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Completed(void)::common_CompletionStatus_Completed;
}

void sub_1CA2E0F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Overdue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CompletionStatus_Overdue(void)::common_CompletionStatus_Overdue;
}

void sub_1CA2E1170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Farther(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Farther(void)::common_SpatialDirection_Farther;
}

void sub_1CA2E1348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Down(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Down(void)::common_SpatialDirection_Down;
}

void sub_1CA2E1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Rightward(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Rightward(void)::common_SpatialDirection_Rightward;
}

void sub_1CA2E16F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Up(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Up(void)::common_SpatialDirection_Up;
}

void sub_1CA2E18D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Nearer(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Nearer(void)::common_SpatialDirection_Nearer;
}

void sub_1CA2E1AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Leftward(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Leftward(void)::common_SpatialDirection_Leftward;
}

void sub_1CA2E1C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Further(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SpatialDirection_Further(void)::common_SpatialDirection_Further;
}

void sub_1CA2E1E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReferenceType_DefiniteReference(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReferenceType_DefiniteReference(void)::common_ReferenceType_DefiniteReference;
}

void sub_1CA2E2030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReferenceType_IndefiniteReference(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReferenceType_IndefiniteReference(void)::common_ReferenceType_IndefiniteReference;
}

void sub_1CA2E2208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Nowhere(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Nowhere(void)::common_UserEntity_Nowhere;
}

void sub_1CA2E23E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Anywhere(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Anywhere(void)::common_UserEntity_Anywhere;
}

void sub_1CA2E25B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_There(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_There(void)::common_UserEntity_There;
}

void sub_1CA2E2790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Here(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Here(void)::common_UserEntity_Here;
}

void sub_1CA2E2968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_UserEntity_Everywhere(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_UserEntity_Everywhere(void)::common_UserEntity_Everywhere;
}

void sub_1CA2E2B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Transaction(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Transaction(void)::common_PaymentType_Transaction;
}

void sub_1CA2E2D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Fee(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Fee(void)::common_PaymentType_Fee;
}

void sub_1CA2E2EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Invoice(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Invoice(void)::common_PaymentType_Invoice;
}

void sub_1CA2E30C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Message(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Message(void)::common_PaymentType_Message;
}

void sub_1CA2E32A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Statement(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Statement(void)::common_PaymentType_Statement;
}

void sub_1CA2E3478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentType_Bill(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentType_Bill(void)::common_PaymentType_Bill;
}

void sub_1CA2E3650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ScheduleType_AsNeeded(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ScheduleType_AsNeeded(void)::common_ScheduleType_AsNeeded;
}

void sub_1CA2E3828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ScheduleType_Scheduled(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ScheduleType_Scheduled(void)::common_ScheduleType_Scheduled;
}

void sub_1CA2E3A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue(void)::common_Number_MinimumValue;
}

void sub_1CA2E3BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MiddleValue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_MiddleValue(void)::common_Number_MiddleValue;
}

void sub_1CA2E3DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue(void)::common_Number_MaximumValue;
}

void sub_1CA2E3F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_TenThousand(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_TenThousand(void)::common_Number_TenThousand;
}

void sub_1CA2E4160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_TenMillion(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_TenMillion(void)::common_Number_TenMillion;
}

void sub_1CA2E4338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_Trillion(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_Trillion(void)::common_Number_Trillion;
}

void sub_1CA2E4510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_Million(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_Million(void)::common_Number_Million;
}

void sub_1CA2E46E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_Billion(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_Billion(void)::common_Number_Billion;
}

void sub_1CA2E48C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_HundredThousand(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_HundredThousand(void)::common_Number_HundredThousand;
}

void sub_1CA2E4A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_Twelve(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_Twelve(void)::common_Number_Twelve;
}

void sub_1CA2E4C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_Hundred(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_Hundred(void)::common_Number_Hundred;
}

void sub_1CA2E4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_Thousand(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_Thousand(void)::common_Number_Thousand;
}

void sub_1CA2E5020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_LargeUnspecifiedAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_LargeUnspecifiedAmount(void)::common_Number_LargeUnspecifiedAmount;
}

void sub_1CA2E51F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_SmallUnspecifiedAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_SmallUnspecifiedAmount(void)::common_Number_SmallUnspecifiedAmount;
}

void sub_1CA2E53D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Number_DefaultValue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Number_DefaultValue(void)::common_Number_DefaultValue;
}

void sub_1CA2E55A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection_Wider(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection_Wider(void)::common_SizeDirection_Wider;
}

void sub_1CA2E5780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection_Taller(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection_Taller(void)::common_SizeDirection_Taller;
}

void sub_1CA2E5958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection_Shorter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection_Shorter(void)::common_SizeDirection_Shorter;
}

void sub_1CA2E5B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection_Narrower(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection_Narrower(void)::common_SizeDirection_Narrower;
}

void sub_1CA2E5D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection_Bigger(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection_Bigger(void)::common_SizeDirection_Bigger;
}

void sub_1CA2E5EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SizeDirection_Smaller(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SizeDirection_Smaller(void)::common_SizeDirection_Smaller;
}

void sub_1CA2E60B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Sunrise(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Sunrise(void)::common_Time12HourClock_Sunrise;
}

void sub_1CA2E6290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Sunset(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Sunset(void)::common_Time12HourClock_Sunset;
}

void sub_1CA2E6468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock_CurrentTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock_CurrentTime(void)::common_Time12HourClock_CurrentTime;
}

void sub_1CA2E6640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Midnight(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Midnight(void)::common_Time12HourClock_Midnight;
}

void sub_1CA2E6818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Noon(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Time12HourClock_Noon(void)::common_Time12HourClock_Noon;
}

void sub_1CA2E69F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Agent_UnknownAgent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Agent_UnknownAgent(void)::common_Agent_UnknownAgent;
}

void sub_1CA2E6BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Podcast(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Podcast(void)::common_AttachmentType_Podcast;
}

void sub_1CA2E6DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Location(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Location(void)::common_AttachmentType_Location;
}

void sub_1CA2E6F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Window(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Window(void)::common_AttachmentType_Window;
}

void sub_1CA2E7150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Photo(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Photo(void)::common_AttachmentType_Photo;
}

void sub_1CA2E7328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Song(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Song(void)::common_AttachmentType_Song;
}

void sub_1CA2E7500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Screenshot(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Screenshot(void)::common_AttachmentType_Screenshot;
}

void sub_1CA2E76D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Video(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Video(void)::common_AttachmentType_Video;
}

void sub_1CA2E78B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Document(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Document(void)::common_AttachmentType_Document;
}

void sub_1CA2E7A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_AudioMessage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_AudioMessage(void)::common_AttachmentType_AudioMessage;
}

void sub_1CA2E7C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Episode(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Episode(void)::common_AttachmentType_Episode;
}

void sub_1CA2E7E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Playlist(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Playlist(void)::common_AttachmentType_Playlist;
}

void sub_1CA2E8010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Show(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Show(void)::common_AttachmentType_Show;
}

void sub_1CA2E81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Webpage(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Webpage(void)::common_AttachmentType_Webpage;
}

void sub_1CA2E83C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_MyLocation(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_MyLocation(void)::common_AttachmentType_MyLocation;
}

void sub_1CA2E8598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Book(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Book(void)::common_AttachmentType_Book;
}

void sub_1CA2E8770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Article(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Article(void)::common_AttachmentType_Article;
}

void sub_1CA2E8948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Movie(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Movie(void)::common_AttachmentType_Movie;
}

void sub_1CA2E8B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_App(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_App(void)::common_AttachmentType_App;
}

void sub_1CA2E8CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Album(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Album(void)::common_AttachmentType_Album;
}

void sub_1CA2E8ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Content(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Content(void)::common_AttachmentType_Content;
}

void sub_1CA2E90A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_URL(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_URL(void)::common_AttachmentType_URL;
}

void sub_1CA2E9280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Group(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Group(void)::common_AttachmentType_Group;
}

void sub_1CA2E9458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_DateTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_DateTime(void)::common_AttachmentType_DateTime;
}

void sub_1CA2E9630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_CurrencyAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_CurrencyAmount(void)::common_AttachmentType_CurrencyAmount;
}

void sub_1CA2E9808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Email(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Email(void)::common_AttachmentType_Email;
}

void sub_1CA2E99E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Business(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Business(void)::common_AttachmentType_Business;
}

void sub_1CA2E9BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_PhoneNumber(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_PhoneNumber(void)::common_AttachmentType_PhoneNumber;
}

void sub_1CA2E9D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Contact(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Contact(void)::common_AttachmentType_Contact;
}

void sub_1CA2E9F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Event(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Event(void)::common_AttachmentType_Event;
}

void sub_1CA2EA140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_ETA(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_ETA(void)::common_AttachmentType_ETA;
}

void sub_1CA2EA318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Screen(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Screen(void)::common_AttachmentType_Screen;
}

void sub_1CA2EA4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_NoteFolder(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_NoteFolder(void)::common_AttachmentType_NoteFolder;
}

void sub_1CA2EA6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Note(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Note(void)::common_AttachmentType_Note;
}

void sub_1CA2EA8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Reminder(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Reminder(void)::common_AttachmentType_Reminder;
}

void sub_1CA2EAA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_Message(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_Message(void)::common_AttachmentType_Message;
}

void sub_1CA2EAC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_ReminderList(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_ReminderList(void)::common_AttachmentType_ReminderList;
}

void sub_1CA2EAE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_DisplayedContent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_DisplayedContent(void)::common_AttachmentType_DisplayedContent;
}

void sub_1CA2EB000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AttachmentType_PlayedContent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AttachmentType_PlayedContent(void)::common_AttachmentType_PlayedContent;
}

void sub_1CA2EB1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Geolocation_Here(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Geolocation_Here(void)::common_Geolocation_Here;
}

void sub_1CA2EB3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_SunsetToSunrise(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_SunsetToSunrise(void)::common_RecurringDateTimeRange_SunsetToSunrise;
}

void sub_1CA2EB588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_SunriseToSunset(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_SunriseToSunset(void)::common_RecurringDateTimeRange_SunriseToSunset;
}

void sub_1CA2EB760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Afternoon(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Afternoon(void)::common_RecurringDateTimeRange_Afternoon;
}

void sub_1CA2EB938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Autumn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Autumn(void)::common_RecurringDateTimeRange_Autumn;
}

void sub_1CA2EBB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_BreakfastTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_BreakfastTime(void)::common_RecurringDateTimeRange_BreakfastTime;
}

void sub_1CA2EBCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_BrunchTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_BrunchTime(void)::common_RecurringDateTimeRange_BrunchTime;
}

void sub_1CA2EBEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Dawn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Dawn(void)::common_RecurringDateTimeRange_Dawn;
}

void sub_1CA2EC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Daytime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Daytime(void)::common_RecurringDateTimeRange_Daytime;
}

void sub_1CA2EC270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_DinnerTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_DinnerTime(void)::common_RecurringDateTimeRange_DinnerTime;
}

void sub_1CA2EC448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Dusk(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Dusk(void)::common_RecurringDateTimeRange_Dusk;
}

void sub_1CA2EC620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireDay(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireDay(void)::common_RecurringDateTimeRange_EntireDay;
}

void sub_1CA2EC7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireMonth(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireMonth(void)::common_RecurringDateTimeRange_EntireMonth;
}

void sub_1CA2EC9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireWeek(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireWeek(void)::common_RecurringDateTimeRange_EntireWeek;
}

void sub_1CA2ECBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireYear(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_EntireYear(void)::common_RecurringDateTimeRange_EntireYear;
}

void sub_1CA2ECD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Evening(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Evening(void)::common_RecurringDateTimeRange_Evening;
}

void sub_1CA2ECF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_LunchTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_LunchTime(void)::common_RecurringDateTimeRange_LunchTime;
}

void sub_1CA2ED130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Morning(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Morning(void)::common_RecurringDateTimeRange_Morning;
}

void sub_1CA2ED308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Night(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Night(void)::common_RecurringDateTimeRange_Night;
}

void sub_1CA2ED4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Spring(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Spring(void)::common_RecurringDateTimeRange_Spring;
}

void sub_1CA2ED6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Summer(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Summer(void)::common_RecurringDateTimeRange_Summer;
}

void sub_1CA2ED890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Weekend(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Weekend(void)::common_RecurringDateTimeRange_Weekend;
}

void sub_1CA2EDA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Winter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Winter(void)::common_RecurringDateTimeRange_Winter;
}

void sub_1CA2EDC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Workweek(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Workweek(void)::common_RecurringDateTimeRange_Workweek;
}

void sub_1CA2EDE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Forenoon(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_RecurringDateTimeRange_Forenoon(void)::common_RecurringDateTimeRange_Forenoon;
}

void sub_1CA2EDFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CommunicationReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CommunicationReceived(void)::common_CommunicationTrigger_CommunicationReceived;
}

void sub_1CA2EE1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_EmailSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_EmailSent(void)::common_CommunicationTrigger_EmailSent;
}

void sub_1CA2EE3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_FaceTimeSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_FaceTimeSent(void)::common_CommunicationTrigger_FaceTimeSent;
}

void sub_1CA2EE578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_TextMessageReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_TextMessageReceived(void)::common_CommunicationTrigger_TextMessageReceived;
}

void sub_1CA2EE750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_TextMessageSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_TextMessageSent(void)::common_CommunicationTrigger_TextMessageSent;
}

void sub_1CA2EE928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CallSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CallSent(void)::common_CommunicationTrigger_CallSent;
}

void sub_1CA2EEB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CallReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CallReceived(void)::common_CommunicationTrigger_CallReceived;
}

void sub_1CA2EECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_EmailReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_EmailReceived(void)::common_CommunicationTrigger_EmailReceived;
}

void sub_1CA2EEEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CommunicationSent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_CommunicationSent(void)::common_CommunicationTrigger_CommunicationSent;
}

void sub_1CA2EF088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_FaceTimeReceived(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CommunicationTrigger_FaceTimeReceived(void)::common_CommunicationTrigger_FaceTimeReceived;
}

void sub_1CA2EF260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_Free(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_Free(void)::common_CurrencyAmount_Free;
}

void sub_1CA2EF438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_StatementBalance(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_StatementBalance(void)::common_CurrencyAmount_StatementBalance;
}

void sub_1CA2EF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_MinimumAllowed(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_MinimumAllowed(void)::common_CurrencyAmount_MinimumAllowed;
}

void sub_1CA2EF7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_PaidInFull(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_PaidInFull(void)::common_CurrencyAmount_PaidInFull;
}

void sub_1CA2EF9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_MaximumAllowed(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_MaximumAllowed(void)::common_CurrencyAmount_MaximumAllowed;
}

void sub_1CA2EFB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_AmountDue(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_CurrencyAmount_AmountDue(void)::common_CurrencyAmount_AmountDue;
}

void sub_1CA2EFD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_OffsetDateTime_Now(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_OffsetDateTime_Now(void)::common_OffsetDateTime_Now;
}

void sub_1CA2EFF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType_Like(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType_Like(void)::common_ReactionType_Like;
}

void sub_1CA2F0120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType_Exclamation(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType_Exclamation(void)::common_ReactionType_Exclamation;
}

void sub_1CA2F02F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType_Love(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType_Love(void)::common_ReactionType_Love;
}

void sub_1CA2F04D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType_Question(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType_Question(void)::common_ReactionType_Question;
}

void sub_1CA2F06A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType_Dislike(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType_Dislike(void)::common_ReactionType_Dislike;
}

void sub_1CA2F0880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReactionType_Laugh(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReactionType_Laugh(void)::common_ReactionType_Laugh;
}

void sub_1CA2F0A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Decimal_LargeUnspecifiedAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Decimal_LargeUnspecifiedAmount(void)::common_Decimal_LargeUnspecifiedAmount;
}

void sub_1CA2F0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Decimal_SmallUnspecifiedAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Decimal_SmallUnspecifiedAmount(void)::common_Decimal_SmallUnspecifiedAmount;
}

void sub_1CA2F0E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Decimal_Percent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Decimal_Percent(void)::common_Decimal_Percent;
}

void sub_1CA2F0FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Atypical(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Atypical(void)::common_SortDirection_Atypical;
}

void sub_1CA2F11B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Oldest(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Oldest(void)::common_SortDirection_Oldest;
}

void sub_1CA2F1390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Unpopular(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Unpopular(void)::common_SortDirection_Unpopular;
}

void sub_1CA2F1568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Best(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Best(void)::common_SortDirection_Best;
}

void sub_1CA2F1740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Newest(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Newest(void)::common_SortDirection_Newest;
}

void sub_1CA2F1918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Recommended(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Recommended(void)::common_SortDirection_Recommended;
}

void sub_1CA2F1AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Popular(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Popular(void)::common_SortDirection_Popular;
}

void sub_1CA2F1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Worst(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Worst(void)::common_SortDirection_Worst;
}

void sub_1CA2F1EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Typical(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Typical(void)::common_SortDirection_Typical;
}

void sub_1CA2F2078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_SortDirection_Trending(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_SortDirection_Trending(void)::common_SortDirection_Trending;
}

void sub_1CA2F2250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageType_InlineReply(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageType_InlineReply(void)::common_MessageType_InlineReply;
}

void sub_1CA2F2428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MessageType_Conversation(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MessageType_Conversation(void)::common_MessageType_Conversation;
}

void sub_1CA2F2600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Video(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Video(void)::common_PhoneCallMode_Video;
}

void sub_1CA2F27D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Audio(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Audio(void)::common_PhoneCallMode_Audio;
}

void sub_1CA2F29B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Shared(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Shared(void)::common_PhoneCallMode_Shared;
}

void sub_1CA2F2B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_DropIn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_DropIn(void)::common_PhoneCallMode_DropIn;
}

void sub_1CA2F2D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Phone(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PhoneCallMode_Phone(void)::common_PhoneCallMode_Phone;
}

void sub_1CA2F2F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_ReminderType_Section(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_ReminderType_Section(void)::common_ReminderType_Section;
}

void sub_1CA2F3110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_3D(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_3D(void)::common_MediaItemVersion_3D;
}

void sub_1CA2F32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Alternate(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Alternate(void)::common_MediaItemVersion_Alternate;
}

void sub_1CA2F34C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Cover(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Cover(void)::common_MediaItemVersion_Cover;
}

void sub_1CA2F3698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Remake(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Remake(void)::common_MediaItemVersion_Remake;
}

void sub_1CA2F3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Studio(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Studio(void)::common_MediaItemVersion_Studio;
}

void sub_1CA2F3A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Acappela(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Acappela(void)::common_MediaItemVersion_Acappela;
}

void sub_1CA2F3C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Clean(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Clean(void)::common_MediaItemVersion_Clean;
}

void sub_1CA2F3DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Explicit(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Explicit(void)::common_MediaItemVersion_Explicit;
}

void sub_1CA2F3FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Soundtrack(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Soundtrack(void)::common_MediaItemVersion_Soundtrack;
}

void sub_1CA2F41A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Karaoke(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Karaoke(void)::common_MediaItemVersion_Karaoke;
}

void sub_1CA2F4380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Acoustic(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Acoustic(void)::common_MediaItemVersion_Acoustic;
}

void sub_1CA2F4558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Live(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Live(void)::common_MediaItemVersion_Live;
}

void sub_1CA2F4730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Instrumental(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_Instrumental(void)::common_MediaItemVersion_Instrumental;
}

void sub_1CA2F4908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_ThemeSong(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MediaItemVersion_ThemeSong(void)::common_MediaItemVersion_ThemeSong;
}

void sub_1CA2F4AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem_AM(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Meridiem_AM(void)::common_Meridiem_AM;
}

void sub_1CA2F4CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Meridiem_PM(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Meridiem_PM(void)::common_Meridiem_PM;
}

void sub_1CA2F4E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_DueDate(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_DueDate(void)::common_PaymentSortKey_DueDate;
}

void sub_1CA2F5068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_InterestRate(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_InterestRate(void)::common_PaymentSortKey_InterestRate;
}

void sub_1CA2F5240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_Age(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_Age(void)::common_PaymentSortKey_Age;
}

void sub_1CA2F5418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_Rewards(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_Rewards(void)::common_PaymentSortKey_Rewards;
}

void sub_1CA2F55F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_Amount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_Amount(void)::common_PaymentSortKey_Amount;
}

void sub_1CA2F57C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_LateFees(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_PaymentSortKey_LateFees(void)::common_PaymentSortKey_LateFees;
}

void sub_1CA2F59A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MixedFraction_LargeUnspecifiedAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MixedFraction_LargeUnspecifiedAmount(void)::common_MixedFraction_LargeUnspecifiedAmount;
}

void sub_1CA2F5B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MixedFraction_SmallUnspecifiedAmount(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MixedFraction_SmallUnspecifiedAmount(void)::common_MixedFraction_SmallUnspecifiedAmount;
}

void sub_1CA2F5D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Minimum(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Minimum(void)::common_MeasurementQualifier_Minimum;
}

void sub_1CA2F5F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Remaining(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Remaining(void)::common_MeasurementQualifier_Remaining;
}

void sub_1CA2F6100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Possible(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Possible(void)::common_MeasurementQualifier_Possible;
}

void sub_1CA2F62D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Total(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Total(void)::common_MeasurementQualifier_Total;
}

void sub_1CA2F64B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Maximum(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Maximum(void)::common_MeasurementQualifier_Maximum;
}

void sub_1CA2F6688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Average(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_Average(void)::common_MeasurementQualifier_Average;
}

void sub_1CA2F6860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_EndOf(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_EndOf(void)::common_MeasurementQualifier_EndOf;
}

void sub_1CA2F6A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_StartOf(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MeasurementQualifier_StartOf(void)::common_MeasurementQualifier_StartOf;
}

void sub_1CA2F6C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_All(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_All(void)::common_Quantifier_All;
}

void sub_1CA2F6DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_Any(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_Any(void)::common_Quantifier_Any;
}

void sub_1CA2F6FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_Multiple(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_Multiple(void)::common_Quantifier_Multiple;
}

void sub_1CA2F7198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_None(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_None(void)::common_Quantifier_None;
}

void sub_1CA2F7370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_Remainder(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_Remainder(void)::common_Quantifier_Remainder;
}

void sub_1CA2F7548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_Single(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_Single(void)::common_Quantifier_Single;
}

void sub_1CA2F7720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_Less(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_Less(void)::common_Quantifier_Less;
}

void sub_1CA2F78F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_Quantifier_More(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_Quantifier_More(void)::common_Quantifier_More;
}

void sub_1CA2F7AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Move(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Move(void)::common_AdjustmentType_Move;
}

void sub_1CA2F7CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Scroll(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Scroll(void)::common_AdjustmentType_Scroll;
}

void sub_1CA2F7E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Resize(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Resize(void)::common_AdjustmentType_Resize;
}

void sub_1CA2F8058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Zoom(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_AdjustmentType_Zoom(void)::common_AdjustmentType_Zoom;
}

void sub_1CA2F8230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Unsent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Unsent(void)::common_EmailState_Unsent;
}

void sub_1CA2F8408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Sent(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Sent(void)::common_EmailState_Sent;
}

void sub_1CA2F85E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Saved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Saved(void)::common_EmailState_Saved;
}

void sub_1CA2F87B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Unsaved(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Unsaved(void)::common_EmailState_Unsaved;
}

void sub_1CA2F8990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Unread(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Unread(void)::common_EmailState_Unread;
}

void sub_1CA2F8B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Read(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Read(void)::common_EmailState_Read;
}

void sub_1CA2F8D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_EmailState_Received(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_EmailState_Received(void)::common_EmailState_Received;
}

void sub_1CA2F8F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_April(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_April(void)::common_MonthOfYear_April;
}

void sub_1CA2F90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_August(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_August(void)::common_MonthOfYear_August;
}

void sub_1CA2F92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_December(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_December(void)::common_MonthOfYear_December;
}

void sub_1CA2F94A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_February(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_February(void)::common_MonthOfYear_February;
}

void sub_1CA2F9678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_January(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_January(void)::common_MonthOfYear_January;
}

void sub_1CA2F9850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_July(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_July(void)::common_MonthOfYear_July;
}

void sub_1CA2F9A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_June(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_June(void)::common_MonthOfYear_June;
}

void sub_1CA2F9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_March(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_March(void)::common_MonthOfYear_March;
}

void sub_1CA2F9DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_May(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_May(void)::common_MonthOfYear_May;
}

void sub_1CA2F9FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_November(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_November(void)::common_MonthOfYear_November;
}

void sub_1CA2FA188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_October(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_October(void)::common_MonthOfYear_October;
}

void sub_1CA2FA360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_MonthOfYear_September(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_MonthOfYear_September(void)::common_MonthOfYear_September;
}

void sub_1CA2FA538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_SunsetToSunrise(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_SunsetToSunrise(void)::common_DateTimeRange_SunsetToSunrise;
}

void sub_1CA2FA710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_SunriseToSunset(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_SunriseToSunset(void)::common_DateTimeRange_SunriseToSunset;
}

void sub_1CA2FA8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Afternoon(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Afternoon(void)::common_DateTimeRange_Afternoon;
}

void sub_1CA2FAAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Autumn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Autumn(void)::common_DateTimeRange_Autumn;
}

void sub_1CA2FAC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_BreakfastTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_BreakfastTime(void)::common_DateTimeRange_BreakfastTime;
}

void sub_1CA2FAE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_BrunchTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_BrunchTime(void)::common_DateTimeRange_BrunchTime;
}

void sub_1CA2FB048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Dawn(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Dawn(void)::common_DateTimeRange_Dawn;
}

void sub_1CA2FB220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Daytime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Daytime(void)::common_DateTimeRange_Daytime;
}

void sub_1CA2FB3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_DinnerTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_DinnerTime(void)::common_DateTimeRange_DinnerTime;
}

void sub_1CA2FB5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Dusk(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Dusk(void)::common_DateTimeRange_Dusk;
}

void sub_1CA2FB7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireDay(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireDay(void)::common_DateTimeRange_EntireDay;
}

void sub_1CA2FB980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireMonth(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireMonth(void)::common_DateTimeRange_EntireMonth;
}

void sub_1CA2FBB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireWeek(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireWeek(void)::common_DateTimeRange_EntireWeek;
}

void sub_1CA2FBD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireYear(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_EntireYear(void)::common_DateTimeRange_EntireYear;
}

void sub_1CA2FBF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Evening(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Evening(void)::common_DateTimeRange_Evening;
}

void sub_1CA2FC0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_LunchTime(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_LunchTime(void)::common_DateTimeRange_LunchTime;
}

void sub_1CA2FC2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Morning(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Morning(void)::common_DateTimeRange_Morning;
}

void sub_1CA2FC490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Night(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Night(void)::common_DateTimeRange_Night;
}

void sub_1CA2FC668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Spring(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Spring(void)::common_DateTimeRange_Spring;
}

void sub_1CA2FC840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Summer(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Summer(void)::common_DateTimeRange_Summer;
}

void sub_1CA2FCA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Weekend(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Weekend(void)::common_DateTimeRange_Weekend;
}

void sub_1CA2FCBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Winter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Winter(void)::common_DateTimeRange_Winter;
}

void sub_1CA2FCDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Workweek(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Workweek(void)::common_DateTimeRange_Workweek;
}

void sub_1CA2FCFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Forenoon(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Forenoon(void)::common_DateTimeRange_Forenoon;
}

void sub_1CA2FD178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_StepPerMinute(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_StepPerMinute(void)::common_TemperatureUnit_StepPerMinute;
}

void sub_1CA2FD350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MegaHertz(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MegaHertz(void)::common_TemperatureUnit_MegaHertz;
}

void sub_1CA2FD528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_KiloHertz(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_KiloHertz(void)::common_TemperatureUnit_KiloHertz;
}

void sub_1CA2FD700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SwimmingStroke(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SwimmingStroke(void)::common_TemperatureUnit_SwimmingStroke;
}

void sub_1CA2FD8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Liter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Liter(void)::common_TemperatureUnit_Liter;
}

void sub_1CA2FDAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MilligramPerDeciliter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MilligramPerDeciliter(void)::common_TemperatureUnit_MilligramPerDeciliter;
}

void sub_1CA2FDC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Meter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Meter(void)::common_TemperatureUnit_Meter;
}

void sub_1CA2FDE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Kilocalorie(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Kilocalorie(void)::common_TemperatureUnit_Kilocalorie;
}

void sub_1CA2FE038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_WheelchairPush(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_WheelchairPush(void)::common_TemperatureUnit_WheelchairPush;
}

void sub_1CA2FE210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_KilometerPerHour(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_KilometerPerHour(void)::common_TemperatureUnit_KilometerPerHour;
}

void sub_1CA2FE3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MinutePerYard(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MinutePerYard(void)::common_TemperatureUnit_MinutePerYard;
}

void sub_1CA2FE5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SwimmingStrokePerYard(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SwimmingStrokePerYard(void)::common_TemperatureUnit_SwimmingStrokePerYard;
}

void sub_1CA2FE798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Kilometer(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Kilometer(void)::common_TemperatureUnit_Kilometer;
}

void sub_1CA2FE970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_FlightOfStairs(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_FlightOfStairs(void)::common_TemperatureUnit_FlightOfStairs;
}

void sub_1CA2FEB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SecondPerYard(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SecondPerYard(void)::common_TemperatureUnit_SecondPerYard;
}

void sub_1CA2FED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MillimeterOfMercury(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MillimeterOfMercury(void)::common_TemperatureUnit_MillimeterOfMercury;
}

void sub_1CA2FEEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_LiterPerMinute(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_LiterPerMinute(void)::common_TemperatureUnit_LiterPerMinute;
}

void sub_1CA2FF0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Microgram(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Microgram(void)::common_TemperatureUnit_Microgram;
}

void sub_1CA2FF2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_BeatPerMinute(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_BeatPerMinute(void)::common_TemperatureUnit_BeatPerMinute;
}

void sub_1CA2FF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Stone(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Stone(void)::common_TemperatureUnit_Stone;
}

void sub_1CA2FF658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_HourPerYard(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_HourPerYard(void)::common_TemperatureUnit_HourPerYard;
}

void sub_1CA2FF830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Mile(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Mile(void)::common_TemperatureUnit_Mile;
}

void sub_1CA2FFA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SecondPerKilometer(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_SecondPerKilometer(void)::common_TemperatureUnit_SecondPerKilometer;
}

void sub_1CA2FFBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MinutePerMeter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_MinutePerMeter(void)::common_TemperatureUnit_MinutePerMeter;
}

void sub_1CA2FFDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Centimeter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Centimeter(void)::common_TemperatureUnit_Centimeter;
}

void sub_1CA2FFF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_CupPerMillileter(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_CupPerMillileter(void)::common_TemperatureUnit_CupPerMillileter;
}

void sub_1CA300168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}

uint64_t siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Step(siri::ontology::oname::graph::ontology_init *this)
{
  {
    operator new();
  }
  return siri::ontology::oname::graph::ontology_init::common_TemperatureUnit_Step(void)::common_TemperatureUnit_Step;
}

void sub_1CA300340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 144);
  std::__hash_table<siri::ontology::UsoGraphNode const*,std::hash<siri::ontology::UsoGraphNode const*>,std::equal_to<siri::ontology::UsoGraphNode const*>,std::allocator<siri::ontology::UsoGraphNode const*>>::~__hash_table(v31 - 96);
  if (*(char *)(v31 - 33) < 0) {
    operator delete(*(void **)(v31 - 56));
  }
  MEMORY[0x1CB796510](v30, 0x10B3C405DBA31E4);
  _Unwind_Resume(a1);
}