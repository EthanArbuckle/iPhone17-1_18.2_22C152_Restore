void sub_19DCDD554(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t ABRegulatoryLogReadContactsData(uint64_t a1)
{
  uint64_t result = _shouldRegulatoryLog(a1);
  if (result)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A4D8], "sharedInstanceForAddressBook"), "readingContactsData");
    v2 = (void *)[MEMORY[0x1E4F5A4D8] sharedInstanceForAddressBook];
    return [v2 logContactsDataAccessEvent];
  }
  return result;
}

uint64_t _shouldRegulatoryLog(uint64_t a1)
{
  if (!a1 || ABAddressBookIsUsedByContacts(a1)) {
    return 0;
  }
  v2 = (void *)[MEMORY[0x1E4F5A350] sharedInstance];
  return [v2 isAccessGranted];
}

BOOL ABAddressBookIsUsedByContacts(uint64_t a1)
{
  return a1 && (*(unsigned char *)(a1 + 378) & 0x40) != 0;
}

uint64_t ABCAddressBookGetPersonRecordDescriptorForPrefetchQueries(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 368);
  if (!result)
  {
    v3 = malloc_type_malloc(0x98uLL, 0x10F0040C975631FuLL);
    *(void *)(a1 + 368) = v3;
    v4 = ABCPersonClass;
    long long v5 = ABCPersonClass[6];
    long long v6 = ABCPersonClass[7];
    long long v7 = ABCPersonClass[8];
    v3[18] = *((void *)ABCPersonClass + 18);
    *((_OWORD *)v3 + 7) = v6;
    *((_OWORD *)v3 + 8) = v7;
    *((_OWORD *)v3 + 6) = v5;
    long long v8 = v4[2];
    long long v9 = v4[3];
    long long v10 = v4[5];
    *((_OWORD *)v3 + 4) = v4[4];
    *((_OWORD *)v3 + 5) = v10;
    *((_OWORD *)v3 + 2) = v8;
    *((_OWORD *)v3 + 3) = v9;
    long long v11 = v4[1];
    *(_OWORD *)v3 = *v4;
    *((_OWORD *)v3 + 1) = v11;
    size_t v12 = 40 * *((int *)ABCPersonClass + 18);
    v13 = malloc_type_malloc(v12, 0x9A1D03F3uLL);
    *(void *)(*(void *)(a1 + 368) + 80) = v13;
    memcpy(v13, *((const void **)ABCPersonClass + 10), v12);
    return *(void *)(a1 + 368);
  }
  return result;
}

void ABPersonAppendNameParts(const void *a1, int a2, __CFString *a3, int a4, const __CFString *a5, int a6)
{
  if (a4) {
    int v11 = 8;
  }
  else {
    int v11 = 2;
  }
  if (a4) {
    int v12 = 2;
  }
  else {
    int v12 = 4;
  }
  if (a4) {
    int v13 = 4;
  }
  else {
    int v13 = 8;
  }
  int v14 = v11 & a2;
  if (a4) {
    ABPropertyID v15 = kABPersonMiddleNameProperty;
  }
  else {
    ABPropertyID v15 = kABPersonLastNameProperty;
  }
  ABPropertyID v19 = v15;
  if (a4) {
    ABPropertyID v16 = kABPersonFirstNameProperty;
  }
  else {
    ABPropertyID v16 = kABPersonMiddleNameProperty;
  }
  if (a4) {
    ABPropertyID v17 = kABPersonLastNameProperty;
  }
  else {
    ABPropertyID v17 = kABPersonFirstNameProperty;
  }
  if (a2) {
    ABPersonAppendNamePartToCompositeName(a1, kABPersonPrefixProperty, a3, a5, a6);
  }
  int v18 = v12 & a2;
  if (v14) {
    ABPersonAppendNamePartToCompositeName(a1, v17, a3, a5, a6);
  }
  if (v18) {
    ABPersonAppendNamePartToCompositeName(a1, v16, a3, a5, a6);
  }
  if ((v13 & a2) != 0) {
    ABPersonAppendNamePartToCompositeName(a1, v19, a3, a5, a6);
  }
  if ((a2 & 0x10) != 0)
  {
    ABPersonAppendNamePartToCompositeName(a1, kABPersonSuffixProperty, a3, a5, a6);
  }
}

void ABPersonAppendNamePartToCompositeName(const void *a1, ABPropertyID a2, __CFString *a3, const __CFString *a4, int a5)
{
  CFStringRef v8 = (const __CFString *)ABRecordCopyValue(a1, a2);
  if (v8)
  {
    CFStringRef v9 = v8;
    if (CFStringGetLength(v8) >= 1)
    {
      CFIndex Length = CFStringGetLength(a3);
      if (a4 && Length >= 1) {
        CFStringAppend(a3, a4);
      }
      if (a5)
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex v12 = CFStringGetLength(v9);
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v11, v12, v9);
        CFStringTrimWhitespace(MutableCopy);
        CFStringAppend(a3, MutableCopy);
        CFRelease(MutableCopy);
      }
      else
      {
        CFStringAppend(a3, v9);
      }
    }
    CFRelease(v9);
  }
}

CFTypeRef ABRecordCopyValue(ABRecordRef record, ABPropertyID property)
{
  if (ABLogAPIUsage())
  {
    ABPropertyID v17 = _isMainThread();
    v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyValue(ABRecordRef, ABPropertyID)", 88, v4, 0, v5, v6, v7, (uint64_t)v17);
    CFRelease(v4);
  }
  uint64_t v8 = CPRecordCopyProperty();
  valuePtr = (const void *)v8;
  if (kABPersonCreationDateProperty == property || kABPersonModificationDateProperty == property)
  {
    if (!v8) {
      goto LABEL_13;
    }
    CFDateRef v10 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (double)(int)v8);
    goto LABEL_12;
  }
  int PropertyType = ABRecordGetPropertyType(record, property);
  if (PropertyType == 2)
  {
    CFDateRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
LABEL_12:
    valuePtr = v10;
  }
LABEL_13:
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyValue(ABRecordRef, ABPropertyID)", 116, @">> ", 0, v12, v13, v14, v16);
  }
  return valuePtr;
}

uint64_t ABRecordGetPropertyType(const void *a1, int a2)
{
  ABRecordType RecordType = ABRecordGetRecordType(a1);
  if (RecordType == 1)
  {
    return ABGroupGetTypeOfProperty(a2);
  }
  else if (RecordType)
  {
    return ABSourceGetTypeOfProperty(a2);
  }
  else
  {
    return ABPersonGetTypeOfProperty(a2);
  }
}

ABRecordType ABRecordGetRecordType(ABRecordRef record)
{
  if (ABLogAPIUsage())
  {
    uint64_t v12 = _isMainThread();
    v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordType ABRecordGetRecordType(ABRecordRef)", 40, v1, 0, v2, v3, v4, (uint64_t)v12);
    CFRelease(v1);
  }
  int RecordType = ABCRecordGetRecordType();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABRecordType ABRecordGetRecordType(ABRecordRef)", 51, @">> ", 0, v6, v7, v8, v11);
  }
  if (RecordType == 258) {
    ABRecordType v9 = 1;
  }
  else {
    ABRecordType v9 = 2;
  }
  if (RecordType == 257) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t ABCRecordGetRecordType()
{
  Class = (char **)CPRecordGetClass();
  if (Class == ABCGroupClass[0]) {
    unsigned int v1 = 258;
  }
  else {
    unsigned int v1 = 259;
  }
  if (Class == (char **)ABCPersonClass) {
    return 257;
  }
  else {
    return v1;
  }
}

ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID property)
{
  if (ABLogAPIUsage())
  {
    uint64_t v13 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID)", 282, v2, 0, v3, v4, v5, (uint64_t)v13);
    CFRelease(v2);
  }
  if (kABPersonModificationDateProperty == property || kABPersonCreationDateProperty == property) {
    ABPropertyType v7 = 4;
  }
  else {
    ABPropertyType v7 = ABCPersonTypeOfProperty(property);
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID)", 290, @">> ", 0, v8, v9, v10, v12);
  }
  return v7;
}

uint64_t ABLogAPIUsage()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogAPIUsage) {
    return result;
  }
  else {
    return 0;
  }
}

BOOL ABDiagnosticsEnabled()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  return __ABLogMaxConsoleLevel > 4 || __ABLogMaxFileLevel > 0;
}

uint64_t ABCPersonTypeOfProperty(int a1)
{
  return *(unsigned int *)(*((void *)ABCPersonClass + 10) + 40 * a1 + 32);
}

uint64_t __ABAddressBookPersonBufferRowHandler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F5A3C0]);
    objc_msgSend(v4, "setData:", objc_msgSend(*(id *)(a1 + 32), "mutableData"));
    objc_msgSend(v4, "setIdentifierAccountingData:", objc_msgSend(*(id *)(a1 + 32), "contactIdentifiers"));
    objc_msgSend(v4, "setMatchInfo:", objc_msgSend(*(id *)(a1 + 32), "matchInfo"));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    [*(id *)(a1 + 32) setCountOfContactsInBuffer:0];
    uint64_t v5 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "mutableData"), "length");
    objc_msgSend(*(id *)(a1 + 32), "setMutableData:", objc_msgSend(MEMORY[0x1E4F1CA58], "data"));
    uint64_t v6 = ABOSLogImageMetadata();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      ABPropertyType v7 = *(void **)(a1 + 32);
      int v9 = 134218496;
      uint64_t v10 = v7;
      __int16 v11 = 2048;
      uint64_t v12 = [v7 mutableData];
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      _os_log_impl(&dword_19DCDB000, v6, OS_LOG_TYPE_DEFAULT, "ABBufferQueryCursor (%p), re-created buffer (%p) [previous %lu]", (uint8_t *)&v9, 0x20u);
    }
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "matchInfo"), "removeAllObjects");
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "contactIdentifiers"), "removeAllObjects");
  }
  return v3;
}

void AppendBaseProperties(uint64_t a1, void *a2)
{
  v18[1] = *(double *)MEMORY[0x1E4F143B8];
  if (![a2 resumeToken])
  {
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)objc_msgSend((id)objc_msgSend(a2, "query"), "propertyIndices"));
    uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
    ABPropertyType v7 = (const void **)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1F4188790](v5);
    int v9 = (int *)((char *)&v13 - v8);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)objc_msgSend((id)objc_msgSend(a2, "query"), "propertyIndices"), v7, (const void **)((char *)&v13 - v8));
    if (Count)
    {
      uint64_t v10 = (const void *)kABPersonInternalUUIDProperty;
      do
      {
        if (*v7 != v10)
        {
          if (sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), *v9))
          {
            uint64_t v17 = 0;
            v18[0] = 0.0;
            uint64_t v14 = 0;
            char v15 = 2;
            ABPropertyID v16 = *(_DWORD *)v7;
            ABPropertyType TypeOfProperty = ABPersonGetTypeOfProperty(v16);
            uint64_t v13 = 0;
            GetBytePointerAndLengthForTypeAtColumn(a1, TypeOfProperty, *v9, &v14, &v13, v18);
            uint64_t v17 = v13;
            objc_msgSend((id)objc_msgSend(a2, "mutableData"), "appendBytes:length:", &v15, 13);
            uint64_t v12 = (void *)[a2 mutableData];
            [v12 appendBytes:v14 length:v17];
          }
        }
        v9 += 2;
        ++v7;
        --Count;
      }
      while (Count);
    }
  }
}

void GetBytePointerAndLengthForTypeAtColumn(uint64_t a1, int a2, int iCol, void *a4, uint64_t *a5, double *a6)
{
  if (a2 <= 256)
  {
    switch(a2)
    {
      case 1:
      case 5:
      case 7:
        goto LABEL_6;
      case 2:
        goto LABEL_8;
      case 4:
        goto LABEL_7;
      default:
        goto LABEL_10;
    }
  }
  switch(a2)
  {
    case 260:
LABEL_7:
      *a4 = a6;
      *a6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), iCol);
      uint64_t v9 = 8;
      goto LABEL_9;
    case 258:
LABEL_8:
      *a4 = a6;
      *(_DWORD *)a6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), iCol);
      uint64_t v9 = 4;
      goto LABEL_9;
    case 257:
LABEL_6:
      *a4 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), iCol);
      uint64_t v9 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), iCol);
LABEL_9:
      *a5 = v9;
      return;
  }
LABEL_10:
  *a5 = 0;
  *a4 = 0;
}

uint64_t __ABAddressBookPersonBufferRowHandler_block_invoke_520(uint64_t a1)
{
  unsigned int v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  unint64_t v4 = objc_msgSend((id)objc_msgSend(v1, "mutableData"), "length");
  if (v4 >= [v1 maxBufferSize]
    || [v1 maxContactsPerBatch] >= 1
    && (uint64_t v5 = [v1 countOfContactsInBuffer], v5 >= objc_msgSend(v1, "maxContactsPerBatch")))
  {
    uint64_t v8 = 1;
    [v1 setResumeToken:1];
  }
  else
  {
    if (![v1 resumeToken] || objc_msgSend(v1, "resumeToken") == 1)
    {
      [v1 setResumeToken:0];
      objc_msgSend(v1, "setCountOfContactsInBuffer:", objc_msgSend(v1, "countOfContactsInBuffer") + 1);
      char v15 = 1;
      int v16 = v3;
      value = 0;
      CFDictionaryRef v6 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(v1, "query"), "propertyIndices");
      if (CFDictionaryGetValueIfPresent(v6, (const void *)kABPersonInternalUUIDProperty, (const void **)&value)) {
        uint64_t v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(v2 + 8), (int)value);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v17 = v7;
      objc_msgSend((id)objc_msgSend(v1, "mutableData"), "appendBytes:length:", &v15, 13);
      if (v17)
      {
        uint64_t v9 = (void *)[v1 mutableData];
        uint64_t v10 = sqlite3_column_blob(*(sqlite3_stmt **)(v2 + 8), (int)value);
        [v9 appendBytes:v10 length:v17];
        if (objc_msgSend((id)objc_msgSend(v1, "query"), "contactidentifierAuditMode"))
        {
          __int16 v11 = (void *)[v1 mutableData];
          uint64_t v12 = objc_msgSend((id)objc_msgSend(v1, "mutableData"), "length");
          objc_msgSend(v1, "setCurrentRecordIndividualUniqueIDAuditData:", objc_msgSend(v11, "subdataWithRange:", v12 - v17));
          if (objc_msgSend((id)objc_msgSend(v1, "query"), "contactidentifierAuditMode") == 1
            || !objc_msgSend((id)objc_msgSend(v1, "query"), "fetchLinkedContacts")
            || [v1 contactLinkUUIDColumn] == -1)
          {
            objc_msgSend((id)objc_msgSend(v1, "contactIdentifiers"), "addObject:", objc_msgSend(v1, "currentRecordIndividualUniqueIDAuditData"));
          }
        }
      }
    }
    return 0;
  }
  return v8;
}

uint64_t __ABAddressBookPersonBufferRowHandler_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 32);
  if (![v2 resumeToken]
    && ((objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageData") & 1) != 0
     || objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageCropRect")))
  {
    if (objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageCropRect")) {
      char v4 = objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageData") ^ 1;
    }
    else {
      char v4 = 0;
    }
    uint64_t appended = AppendImageData(v1, 2, v4, 2, v2);
  }
  else
  {
    if ([v2 resumeToken] == 2)
    {
      if (!AppendPendingBlobData(v2))
      {
        uint64_t appended = 1;
        goto LABEL_13;
      }
      [v2 setResumeToken:0];
    }
    uint64_t appended = 0;
  }
LABEL_13:
  if ([v2 resumeToken]
    || !objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageThumbnail"))
  {
    if ([v2 resumeToken] == 3)
    {
      if (AppendPendingBlobData(v2)) {
        [v2 setResumeToken:0];
      }
      else {
        uint64_t appended = 1;
      }
    }
  }
  else
  {
    uint64_t appended = AppendImageData(v1, 0, 0, 3, v2);
  }
  if ([v2 resumeToken]
    || !objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageFullscreenData"))
  {
    if ([v2 resumeToken] == 4)
    {
      if (AppendPendingBlobData(v2)) {
        [v2 setResumeToken:0];
      }
      else {
        uint64_t appended = 1;
      }
    }
  }
  else
  {
    uint64_t appended = AppendImageData(v1, 4, 0, 4, v2);
  }
  if ([v2 resumeToken]
    || !objc_msgSend((id)objc_msgSend(v2, "query"), "requestedSyncImageData"))
  {
    if ([v2 resumeToken] == 5)
    {
      if (AppendPendingBlobData(v2)) {
        [v2 setResumeToken:0];
      }
      else {
        uint64_t appended = 1;
      }
    }
  }
  else
  {
    uint64_t appended = AppendImageData(v1, 5, 0, 5, v2);
  }
  if (![v2 resumeToken]
    && objc_msgSend((id)objc_msgSend(v2, "query"), "requestedHasImageData"))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    uint64_t v13 = __AppendHasImageData_block_invoke;
    uint64_t v14 = &unk_1E5989808;
    char v15 = v2;
    if (([v2 hasFoundAnyImageDataForCurrentContact] & 1) != 0
      || (objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageData") & 1) == 0
      && (objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageCropRect") & 1) == 0
      && (((uint64_t (*)(void *, __CFString *, uint64_t))v13)(v12, @"SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ? AND data IS NOT NULL;",
            v1) & 1) != 0)
    {
      int v5 = 1;
    }
    else if (objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageThumbnail") {
           && (objc_msgSend((id)objc_msgSend(v2, "query"), "requestedImageFullscreenData") & 1) != 0)
    }
    {
      int v5 = 0;
    }
    else
    {
      int v5 = ((uint64_t (*)(void *, __CFString *, uint64_t))v13)(v12, @"SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND data IS NOT NULL;",
             v1);
    }
    char v9 = 2;
    int v10 = kABCPersonHasImageDataProperty;
    uint64_t v11 = 4;
    int v8 = v5;
    objc_msgSend((id)objc_msgSend(v2, "mutableData"), "appendBytes:length:", &v9, 13);
    CFDictionaryRef v6 = (void *)[v2 mutableData];
    [v6 appendBytes:&v8 length:v11];
  }
  return appended;
}

uint64_t AppendImageData(int a1, int a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  ABCAddressBookGetImageStore((CFStringRef)objc_msgSend((id)objc_msgSend(a5, "query"), "addressBook"));
  int v10 = objc_msgSend((id)objc_msgSend(a5, "query"), "requestedImageCropRect");
  if (a2 == 2)
  {
    uint64_t v11 = &stru_1EF03E278;
    if (v10) {
      uint64_t v11 = @", crop_x , crop_y , crop_width";
    }
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID %@ FROM ABFullSizeImage WHERE record_id = ?;",
      v11);
  }
  CPRecordStoreGetDatabase();
  uint64_t v12 = CPSqliteDatabaseConnectionForReading();
  uint64_t v13 = CPSqliteConnectionStatementForSQL();
  if (v13)
  {
    uint64_t v14 = v13;
    char v15 = *(sqlite3_stmt **)(v13 + 8);
    if (v15)
    {
      sqlite3_bind_int(v15, 1, a1);
      if (a2 != 2) {
        sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 2, a2);
      }
      if (sqlite3_step(*(sqlite3_stmt **)(v14 + 8)) != 100) {
        goto LABEL_31;
      }
      memset(&v30[1], 0, 13);
      v30[0] = 6;
      unint64_t v32 = 0;
      int v31 = a2;
      sqlite3_int64 v16 = sqlite3_column_int64(*(sqlite3_stmt **)(v14 + 8), 0);
      if (a2 == 2 && objc_msgSend((id)objc_msgSend(a5, "query"), "requestedImageCropRect"))
      {
        v30[1] = 1;
        *(_DWORD *)&v30[2] = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 1);
        *(_DWORD *)&v30[6] = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 2);
        *(_DWORD *)&v30[10] = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 3);
      }
      else
      {
        v30[1] = 0;
      }
      ppBlob = 0;
      if ((a3 & 1) == 0)
      {
        int v18 = a2 == 2 ? "ABFullSizeImage" : "ABThumbnailImage";
        if (!sqlite3_blob_open(*(sqlite3 **)(v12 + 8), "main", v18, "data", v16, 0, &ppBlob))
        {
          int v19 = sqlite3_blob_bytes(ppBlob);
          uint64_t v20 = v19;
          unint64_t v32 = v19;
          v21 = ABOSLogImageMetadata();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = [a5 mutableData];
            *(_DWORD *)buf = 134219008;
            v34 = a5;
            __int16 v35 = 1024;
            int v36 = a2;
            __int16 v37 = 1024;
            int v38 = a1;
            __int16 v39 = 2048;
            uint64_t v40 = v22;
            __int16 v41 = 2048;
            uint64_t v42 = v20;
            _os_log_impl(&dword_19DCDB000, v21, OS_LOG_TYPE_DEFAULT, "ABBufferQueryCursor (%p) AppendImageData, reading %d from recordID %d into buffer (%p), [%lu]", buf, 0x2Cu);
          }
        }
      }
      objc_msgSend((id)objc_msgSend(a5, "mutableData"), "appendBytes:length:", v30, 26);
      [a5 setHasFoundAnyImageDataForCurrentContact:1];
      if (!ppBlob) {
        goto LABEL_31;
      }
      unint64_t v23 = objc_msgSend((id)objc_msgSend(a5, "mutableData"), "length");
      unint64_t v24 = v32;
      uint64_t v25 = objc_msgSend((id)objc_msgSend(a5, "mutableData"), "length");
      unint64_t v26 = v32 + v25;
      if (v26 > [a5 maxBufferSize])
      {
        if (v23 >= [a5 maxBufferSize])
        {
          unint64_t v24 = 0;
LABEL_29:
          if (v24 != v32)
          {
            objc_msgSend(a5, "setBlobLength:");
            [a5 setIncompleteBlob:ppBlob];
            [a5 setBlobBytesWritten:v24];
            [a5 setResumeToken:a4];
            uint64_t v17 = 1;
            goto LABEL_32;
          }
          sqlite3_blob_close(ppBlob);
LABEL_31:
          uint64_t v17 = 0;
LABEL_32:
          CPSqliteStatementReset();
          return v17;
        }
        unint64_t v24 = [a5 maxBufferSize] - v23;
      }
      if (v24)
      {
        objc_msgSend((id)objc_msgSend(a5, "mutableData"), "increaseLengthBy:", v24);
        uint64_t v27 = objc_msgSend((id)objc_msgSend(a5, "mutableData"), "mutableBytes");
        sqlite3_blob_read(ppBlob, (void *)(v27 + v23), v24, 0);
      }
      goto LABEL_29;
    }
  }
  return 0;
}

uint64_t ABOSLogImageMetadata()
{
  if (ABOSLogImageMetadata_onceToken != -1) {
    dispatch_once(&ABOSLogImageMetadata_onceToken, &__block_literal_global_32);
  }
  return ABOSLogImageMetadata_imageMetadataLog;
}

CFStringRef ABCAddressBookGetImageStore(CFStringRef result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t result = (CFStringRef)result->length;
    if (!result)
    {
      uint64_t result = ABCImageStoreCreateWithAddressBook(v1);
      *(void *)(v1 + 24) = result;
    }
  }
  return result;
}

void AppendPropertyBlobData(int a1, int a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend((id)objc_msgSend(a3, "query"), "addressBook");
  CPRecordStoreGetDatabase();
  uint64_t v7 = CPSqliteDatabaseConnectionForWriting();
  ppBlob = 0;
  int v8 = *(const char **)(*(void *)(*(void *)(v6 + 368) + 80) + 40 * a2);
  int v9 = sqlite3_blob_open(*(sqlite3 **)(v7 + 8), "main", "ABPerson", v8, a1, 0, &ppBlob);
  if (v9)
  {
    if (v9 == 21)
    {
      int v10 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        unint64_t v23 = a3;
        __int16 v24 = 2080;
        uint64_t v25 = v8;
        __int16 v26 = 1024;
        int v27 = a1;
        _os_log_error_impl(&dword_19DCDB000, v10, OS_LOG_TYPE_ERROR, "ABBufferQueryCursor (%p) AppendPropertyBlobData, SQLITE_MISUSE opening blob %s from recordID %d", buf, 0x1Cu);
      }
    }
  }
  else
  {
    int v11 = sqlite3_blob_bytes(ppBlob);
    if (v11 > 0)
    {
      char v18 = 2;
      int v19 = a2;
      uint64_t v20 = v11;
      objc_msgSend((id)objc_msgSend(a3, "mutableData"), "appendBytes:length:", &v18, 13);
      uint64_t v12 = objc_msgSend((id)objc_msgSend(a3, "mutableData"), "length");
      uint64_t v13 = v20;
      objc_msgSend((id)objc_msgSend(a3, "mutableData"), "increaseLengthBy:", v20);
      uint64_t v14 = (void *)(objc_msgSend((id)objc_msgSend(a3, "mutableData"), "mutableBytes") + v12);
      uint64_t v15 = objc_msgSend((id)objc_msgSend(a3, "mutableData"), "length");
      sqlite3_int64 v16 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = [a3 mutableData];
        *(_DWORD *)buf = 134219522;
        unint64_t v23 = a3;
        __int16 v24 = 2080;
        uint64_t v25 = v8;
        __int16 v26 = 1024;
        int v27 = a1;
        __int16 v28 = 2048;
        uint64_t v29 = v17;
        __int16 v30 = 2048;
        uint64_t v31 = v12;
        __int16 v32 = 2048;
        uint64_t v33 = v13;
        __int16 v34 = 2048;
        uint64_t v35 = v15;
        _os_log_impl(&dword_19DCDB000, v16, OS_LOG_TYPE_DEFAULT, "ABBufferQueryCursor (%p) AppendPropertyBlobData, reading %s from recordID %d into buffer (%p), [%lu + %lu = %lu]", buf, 0x44u);
      }
      sqlite3_blob_read(ppBlob, v14, v13, 0);
    }
    sqlite3_blob_close(ppBlob);
  }
}

CFStringRef ABCImageStoreCreateWithAddressBook(uint64_t a1)
{
  return ABCImageStoreCreateWithAddressBookAndForceInProcessMigration(a1);
}

BOOL __AppendHasImageData_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  ABCAddressBookGetImageStore((CFStringRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "query"), "addressBook"));
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  uint64_t v4 = CPSqliteConnectionStatementForSQL();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(sqlite3_stmt **)(v4 + 8);
  if (!v6) {
    return 0;
  }
  sqlite3_bind_int(v6, 1, a3);
  BOOL v7 = sqlite3_step(*(sqlite3_stmt **)(v5 + 8)) == 100 && sqlite3_column_int(*(sqlite3_stmt **)(v5 + 8), 0) > 0;
  CPSqliteStatementReset();
  return v7;
}

const void *ABCPersonCreateNewPerson(uint64_t a1)
{
  return ABCPersonCreateNewPersonInSourceAndReturnError(a1, 0, 0);
}

uint64_t ABCCopyArrayOfUIDsMatchingEmailAddress(uint64_t a1, const __CFString *a2, void *a3, void *a4)
{
  return _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLike(*(void *)(a1 + 16), kABCEmailProperty, a2, a3, a4);
}

BOOL ABRecordSetValue(ABRecordRef record, ABPropertyID property, CFTypeRef value, CFErrorRef *error)
{
  uint64_t v6 = *(void *)&property;
  if (ABLogAPIUsage())
  {
    uint64_t v13 = _isMainThread();
    int v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABRecordSetValue(ABRecordRef, ABPropertyID, CFTypeRef, CFErrorRef *)", 122, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  return ABCRecordSetValueAndReturnError(record, v6, (__CFString *)value, error);
}

uint64_t __ABContentsExclusivelyInCharacterSet_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x1E4F1CC38];
  }
  uint64_t v2 = NSNumber;
  uint64_t v3 = uset_containsAllCodePoints();
  return [v2 numberWithChar:v3];
}

void ABCAddressBookInvalidateCaches(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABCAddressBookInvalidateCaches(ABCAddressBookRef)", 1335, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (*(void *)(a1 + 16)) {
    CPRecordStoreInvalidateCaches();
  }
  if (*(void *)(a1 + 24)) {
    CPRecordStoreInvalidateCaches();
  }
  ABCAddressBookFlushPhoneCache(a1);
  *(_DWORD *)(a1 + 376) &= 0xFED81FFF;
}

void ABCAddressBookFlushPhoneCache(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 40))
  {
    uint64_t v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 56) = 0;
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(void *)(a1 + 40) = 0;
  }
}

void ABSqliteComparePhoneNumbers(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 4)
  {
    uint64_t v5 = (uint64_t *)sqlite3_value_blob(*a3);
    if (v5) {
      uint64_t v6 = *v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = sqlite3_value_text(a3[1]);
    int v8 = sqlite3_value_text(a3[2]);
    uint64_t v9 = sqlite3_value_blob(a3[3]);
    if (v8)
    {
      uint64_t v10 = (uint64_t)v9;
      size_t v11 = strlen((const char *)v8);
      uint64_t v12 = (__CFString *)CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, v11, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = ABCreateNormalizedPhoneNumberAndDecompose(v12, v10, 0, 0, &v18);
        LODWORD(v8) = 0;
        if (v14) {
          BOOL v15 = v6 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          sqlite3_int64 v16 = (char *)v14;
          LODWORD(v8) = 0;
          if (decomposedPhoneNumbersEqual())
          {
            if (v7 && (size_t v17 = strlen((const char *)v7), !strncmp((const char *)v7, v16, v17))) {
              LODWORD(v8) = 2;
            }
            else {
              LODWORD(v8) = 1;
            }
          }
          free(v16);
        }
        CFRelease(v13);
      }
      else
      {
        LODWORD(v8) = 0;
      }
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
    }
    sqlite3_result_int(a1, (int)v8);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t ABCreateNormalizedPhoneNumberAndDecompose(void *a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5)
{
  uint64_t v7 = (uint64_t)a1;
  if (a3) {
    uint64_t v7 = objc_msgSend(a1, "_cn_stringBySanitizingPhoneNumber");
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = PNCopyBestGuessNormalizedNumberForCountry();
  if (v8)
  {
    if (a4) {
      *a4 = _PNCopyLastFourDigitsOfLocalNumber();
    }
    if (a5)
    {
      uint64_t v9 = MEMORY[0x1E4F5CC30];
      long long v10 = *(_OWORD *)(MEMORY[0x1E4F5CC30] + 16);
      *a5 = *MEMORY[0x1E4F5CC30];
      a5[1] = v10;
      long long v11 = *(_OWORD *)(v9 + 48);
      a5[2] = *(_OWORD *)(v9 + 32);
      a5[3] = v11;
      decomposePhoneNumber();
    }
  }
  return v8;
}

CFTypeRef ABPersonCopyShortName(const void *a1)
{
  if (ABPersonGetShortNamePreferNicknames())
  {
    CFTypeRef v2 = ABRecordCopyValue(a1, kABPersonNicknameProperty);
    if (v2) {
      return v2;
    }
  }
  if (!ABPersonGetShortNameFormatEnabled()) {
    return 0;
  }
  int ShortNameFormat = ABPersonGetShortNameFormat();
  CFNumberRef v4 = (const __CFNumber *)ABRecordCopyValue(a1, kABPersonKindProperty);
  CFComparisonResult v5 = CFNumberCompare(v4, kABPersonKindPerson, 0);
  CFRelease(v4);
  CFTypeRef v2 = 0;
  if (v5) {
    return v2;
  }
  CFStringRef v6 = (const __CFString *)ABRecordCopyValue(a1, kABPersonFirstNameProperty);
  CFStringRef v16 = v6;
  CFStringRef v7 = (const __CFString *)ABRecordCopyValue(a1, kABPersonLastNameProperty);
  CFStringRef v15 = v7;
  if (_ABStringContainsNonLatinCharacters((BOOL)v6)
    || _ABStringContainsEmojiCharacters((BOOL)v6)
    || _ABStringContainsNonLatinCharacters((BOOL)v7)
    || _ABStringContainsEmojiCharacters((BOOL)v7))
  {
    CFTypeRef v2 = 0;
    goto LABEL_10;
  }
  if (ShortNameFormat == 2 && v6)
  {
    CFIndex Length = CFStringGetLength(v6);
    CFStringRef v10 = v6;
  }
  else
  {
    if (ShortNameFormat != 3 || !v7)
    {
      if (!ShortNameFormat && v6 && v7)
      {
        if (CFStringGetLength(v6) >= 2)
        {
          _replaceNameWithInitial(&v15);
          CFStringRef v7 = v15;
        }
      }
      else if (ShortNameFormat == 1 && v6 && v7 && CFStringGetLength(v7) >= 2)
      {
        _replaceNameWithInitial(&v16);
        CFStringRef v6 = v16;
      }
      goto LABEL_35;
    }
    CFIndex Length = CFStringGetLength(v7);
    CFStringRef v10 = v7;
  }
  if (Length > 1)
  {
    CFTypeRef v2 = CFRetain(v10);
    if (v2) {
      goto LABEL_10;
    }
  }
LABEL_35:
  if (v6 && v7)
  {
    int CompositeNameFormatAndDelimiterForRecord = ABPersonGetCompositeNameFormatAndDelimiterForRecord(0, 0);
    if (CompositeNameFormatAndDelimiterForRecord) {
      CFStringRef v12 = v7;
    }
    else {
      CFStringRef v12 = v6;
    }
    if (CompositeNameFormatAndDelimiterForRecord) {
      CFStringRef v13 = v6;
    }
    else {
      CFStringRef v13 = v7;
    }
    uint64_t v14 = (void *)CFStringCreateWithFormat(0, 0, @"%@ %@", v12, v13);
    goto LABEL_47;
  }
  if (!v6 || v7)
  {
    CFTypeRef v2 = 0;
    if (!v6 && v7)
    {
      CFTypeRef v2 = CFRetain(v7);
      goto LABEL_13;
    }
LABEL_10:
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v14 = (void *)CFRetain(v6);
LABEL_47:
  CFTypeRef v2 = v14;
LABEL_11:
  CFRelease(v6);
LABEL_12:
  if (v7) {
LABEL_13:
  }
    CFRelease(v7);
  return v2;
}

uint64_t ABPersonGetShortNamePreferNicknames()
{
  if (ABLogAPIUsage())
  {
    CFComparisonResult v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonGetShortNamePreferNicknames(void)", 1579, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personShortNamePreferNicknames;
}

BOOL _ABStringContainsNonLatinCharacters(BOOL a1)
{
  BOOL v1 = a1;
  if (a1)
  {
    if (_ABStringContainsNonLatinCharacters_onceToken != -1) {
      dispatch_once(&_ABStringContainsNonLatinCharacters_onceToken, &__block_literal_global_12);
    }
    uint64_t v2 = [(id)v1 length];
    uint64_t v3 = malloc_type_malloc(2 * v2, 0x1000040BDFB0063uLL);
    objc_msgSend((id)v1, "getCharacters:range:", v3, 0, v2);
    BOOL v1 = v2 != (int)MEMORY[0x19F3B4E10](_ABStringContainsNonLatinCharacters___latinSet, v3, v2, 1);
    free(v3);
  }
  return v1;
}

BOOL _ABStringContainsEmojiCharacters(BOOL theString)
{
  if (theString)
  {
    CFStringRef v1 = (const __CFString *)theString;
    if (_ABStringContainsEmojiCharacters_onceToken != -1) {
      dispatch_once(&_ABStringContainsEmojiCharacters_onceToken, &__block_literal_global_3_1);
    }
    v3.location = 0;
    v3.length = 0;
    CFCharacterSetRef v2 = (const __CFCharacterSet *)_ABStringContainsEmojiCharacters___emojiSet;
    v4.length = CFStringGetLength(v1);
    v4.location = 0;
    return CFStringFindCharacterFromSet(v1, v2, v4, 0, &v3) != 0;
  }
  return theString;
}

uint64_t ABPersonGetShortNameFormatEnabled()
{
  if (ABLogAPIUsage())
  {
    CFComparisonResult v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonGetShortNameFormatEnabled(void)", 1561, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personShortNameFormatEnabled;
}

uint64_t ABPersonGetShortNameFormat()
{
  if (ABLogAPIUsage())
  {
    CFComparisonResult v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPersonShortNameFormat ABPersonGetShortNameFormat(void)", 1543, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personShortNameFormat;
}

ABRecordRef ABPersonCreate(void)
{
  if (ABLogAPIUsage())
  {
    CFComparisonResult v5 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCreate(void)", 274, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCPersonCreateNewPerson(0);
}

uint64_t ABAddressBookCopyArrayOfUIDsMatchingEmailAddress(uint64_t a1, const __CFString *a2, void *a3, void *a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingEmailAddress(ABAddressBookRef, CFStringRef, CFArrayRef *, CFArrayRef *)", 1951, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCCopyArrayOfUIDsMatchingEmailAddress(a1, a2, a3, a4);
}

void ABInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v16 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABInitialize(void)", 1138, v9, 0, v10, v11, v12, (uint64_t)v16);
    CFRelease(v9);
  }
  ABCInitializeLibrary();
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABInitialize(void)", 1140, @">> ", 0, v13, v14, v15, a9);
  }
}

const void *ABCPersonCreateNewPersonInSourceAndReturnError(uint64_t a1, const void *a2, CFErrorRef *a3)
{
  ABCInitializeLibrary();
  CFStringRef v6 = (const void *)CPRecordCreate();
  if (!a2)
  {
    CPRecordSetProperty();
    CPRecordInitializeProperty();
    goto LABEL_6;
  }
  Policy = ABCSourceGetPolicy(a2);
  if (!Policy || ABPolicyShouldAddRecord((uint64_t)Policy, a1, (uint64_t)v6, 0))
  {
    CPRecordSetProperty();
    CPRecordSetProperty();
LABEL_6:
    CPRecordInitializeProperty();
    return v6;
  }
  if (a3) {
    *a3 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, 0);
  }
  CFRelease(v6);
  return 0;
}

uint64_t ABCInitializeLibrary()
{
  return pthread_once(&once_control, (void (*)(void))_ABCInitialize);
}

uint64_t __ABKatakanaCharacterSet_block_invoke()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(@"[[:scx=Kana:]]", "_cn_resultWithAllCharacters:", &__block_literal_global_9), "pointerValue");
  ABKatakanaCharacterSet___katakanaSet = result;
  return result;
}

uint64_t __ABChineseJapaneseKoreanCharacterSet_block_invoke()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(@"[[:Hani:][:Hiragana:][[:scx=Kana:]][:Bopomofo:][ˉˊˇˋ˙][:Hangul:][()（）]]", "_cn_resultWithAllCharacters:", &__block_literal_global_9), "pointerValue");
  ABChineseJapaneseKoreanCharacterSet___CJKSet = result;
  return result;
}

void *ABGetCharacterSetWithPattern(void *result)
{
  if (result)
  {
    uint64_t v1 = objc_msgSend(result, "_cn_resultWithAllCharacters:", &__block_literal_global_9);
    return (void *)[v1 pointerValue];
  }
  return result;
}

CFMutableStringRef ABPersonCopyCompositeName(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v12 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeName(ABRecordRef)", 1471, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  CFMutableStringRef v6 = ABPersonCopyCompositeNameIgnoringOrganization(a1, 0);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeName(ABRecordRef)", 1473, @">> ", 0, v7, v8, v9, v11);
  }
  return v6;
}

CFMutableStringRef ABPersonCopyCompositeNameIgnoringOrganization(const void *a1, char a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganization(ABRecordRef, _Bool)", 1394, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  CFMutableStringRef v8 = ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(a1, a2, 0);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganization(ABRecordRef, _Bool)", 1396, @">> ", 0, v9, v10, v11, v13);
  }
  return v8;
}

CFMutableStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(const void *a1, char a2, char a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v22 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(ABRecordRef, _Bool, _Bool)", 1401, v6, 0, v7, v8, v9, (uint64_t)v22);
    CFRelease(v6);
  }
  CFTypeRef cf = 0;
  int CompositeNameFormatAndDelimiterForRecord = ABPersonGetCompositeNameFormatAndDelimiterForRecord(a1, (CFStringRef *)&cf);
  CFNumberRef v11 = (const __CFNumber *)ABRecordCopyValue(a1, kABPersonKindProperty);
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (a2)
  {
LABEL_4:
    ABPersonAppendNameParts(a1, 31, Mutable, CompositeNameFormatAndDelimiterForRecord, (const __CFString *)cf, 0);
    goto LABEL_10;
  }
  if (CFNumberCompare(v11, kABPersonKindPerson, 0))
  {
    ABPersonAppendNamePartToCompositeName(a1, kABPersonOrganizationProperty, Mutable, (const __CFString *)cf, 0);
    if (CFStringGetLength(Mutable)) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  ABPersonAppendNameParts(a1, 31, Mutable, CompositeNameFormatAndDelimiterForRecord, (const __CFString *)cf, 0);
  if (!CFStringGetLength(Mutable)) {
    ABPersonAppendNamePartToCompositeName(a1, kABPersonOrganizationProperty, Mutable, (const __CFString *)cf, 0);
  }
LABEL_10:
  if ((a3 & 1) == 0 && !CFStringGetLength(Mutable))
  {
    CFStringRef v13 = (const __CFString *)ABRecordCopyValue(a1, kABPersonNicknameProperty);
    if (v13)
    {
      CFStringRef v14 = v13;
      if (CFStringGetLength(v13) >= 1) {
        CFStringAppend(Mutable, v14);
      }
      CFRelease(v14);
    }
  }
  if (!CFStringGetLength(Mutable))
  {
    CFStringRef v15 = (const __CFString *)ABRecordCopyValue(a1, kABPersonDisplayNameProperty);
    if (v15)
    {
      CFStringRef v16 = v15;
      if (CFStringGetLength(v15) >= 1) {
        CFStringAppend(Mutable, v16);
      }
      CFRelease(v16);
    }
  }
  if (!CFStringGetLength(Mutable))
  {
    CFRelease(Mutable);
    CFMutableStringRef Mutable = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(ABRecordRef, _Bool, _Bool)", 1456, @">> ", 0, v17, v18, v19, v21);
  }
  return Mutable;
}

uint64_t ABPersonGetCompositeNameFormatAndDelimiterForRecord(const void *a1, CFStringRef *a2)
{
  if (ABLogAPIUsage())
  {
    int v27 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatAndDelimiterForRecord(ABRecordRef, CFStringRef *)", 1274, v4, 0, v5, v6, v7, (uint64_t)v27);
    CFRelease(v4);
  }
  uint64_t v8 = __personCompositeNameFormat;
  if (!a1)
  {
    CFStringRef v16 = @" ";
    goto LABEL_36;
  }
  uint64_t v9 = ABKatakanaCharacterSet();
  uint64_t v10 = ABChineseJapaneseKoreanCharacterSet();
  CFStringRef v11 = (const __CFString *)ABRecordCopyValue(a1, kABPersonFirstNameProperty);
  CFStringRef v12 = (const __CFString *)ABRecordCopyValue(a1, kABPersonMiddleNameProperty);
  CFStringRef v13 = (const __CFString *)ABRecordCopyValue(a1, kABPersonLastNameProperty);
  if (v11)
  {
    CFIndex Length = CFStringGetLength(v11);
    if (v12)
    {
LABEL_6:
      CFIndex v15 = CFStringGetLength(v12);
      goto LABEL_10;
    }
  }
  else
  {
    CFIndex Length = 0;
    if (v12) {
      goto LABEL_6;
    }
  }
  CFIndex v15 = 0;
LABEL_10:
  CFIndex v17 = v15 + Length;
  if (v13) {
    CFIndex v18 = CFStringGetLength(v13);
  }
  else {
    CFIndex v18 = 0;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(0, v17 + v18);
  if (Mutable)
  {
    long long v20 = Mutable;
    if (v11) {
      CFStringAppend(Mutable, v11);
    }
    if (v12) {
      CFStringAppend(v20, v12);
    }
    if (v13) {
      CFStringAppend(v20, v13);
    }
    CFStringRef v16 = @" ";
    if (CFStringGetLength(v20) >= 1)
    {
      if (ABContentsExclusivelyInCharacterSet(v20, v9))
      {
        CFStringRef v16 = @"・";
        uint64_t v8 = 1;
      }
      else
      {
        int v21 = ABContentsExclusivelyInCharacterSet(v20, v10);
        if (v21) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v8;
        }
        if (v21) {
          CFStringRef v16 = &stru_1EF03E278;
        }
      }
    }
    CFRelease(v20);
    if (!v11) {
      goto LABEL_32;
    }
  }
  else
  {
    CFStringRef v16 = @" ";
    if (!v11) {
      goto LABEL_32;
    }
  }
  CFRelease(v11);
LABEL_32:
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_36:
  if (a2) {
    *a2 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16);
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatAndDelimiterForRecord(ABRecordRef, CFStringRef *)", 1319, @">> ", 0, v22, v23, v24, v26);
  }
  return v8;
}

uint64_t ABContentsExclusivelyInCharacterSet(void *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A298] + 16))()) {
    return 1;
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __ABContentsExclusivelyInCharacterSet_block_invoke;
  v5[3] = &__block_descriptor_40_e13__24__0r_S8Q16l;
  v5[4] = a2;
  return objc_msgSend((id)objc_msgSend(a1, "_cn_resultWithAllCharacters:", v5), "BOOLValue");
}

uint64_t ABKatakanaCharacterSet()
{
  if (ABKatakanaCharacterSet___onceToken != -1) {
    dispatch_once(&ABKatakanaCharacterSet___onceToken, &__block_literal_global_3_0);
  }
  return ABKatakanaCharacterSet___katakanaSet;
}

uint64_t ABChineseJapaneseKoreanCharacterSet()
{
  if (ABChineseJapaneseKoreanCharacterSet___onceToken != -1) {
    dispatch_once(&ABChineseJapaneseKoreanCharacterSet___onceToken, &__block_literal_global_6);
  }
  return ABChineseJapaneseKoreanCharacterSet___CJKSet;
}

uint64_t ABRecordGetAddressBook()
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABRecordGetAddressBook(ABRecordRef)", 195, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  uint64_t v4 = ABCGetAddressBookForRecord();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABRecordGetAddressBook(ABRecordRef)", 197, @">> ", 0, v5, v6, v7, v9);
  }
  return v4;
}

ABRecordRef ABSourceGetMe(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABSourceGetMe(ABRecordRef)", 1048, v2, 0, v3, v4, v5, (uint64_t)v10);
    CFRelease(v2);
  }
  ABRecordID IntValue = ABRecordGetIntValue(a1, kABSourceMeIdentifierProperty);
  if (IntValue == -1) {
    return 0;
  }
  ABRecordID v7 = IntValue;
  AddressBook = (const void *)ABRecordGetAddressBook();
  return ABAddressBookGetPersonWithRecordID(AddressBook, v7);
}

ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef options, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef, CFErrorRef *)", 461, v5, @"options=%@", v6, v7, v8, (uint64_t)options);
    CFRelease(v5);
  }
  if (error && *error) {
    *error = 0;
  }
  uint64_t v9 = ABAddressBookCreateWithOptionsAndPolicy(options, 0, (__CFString **)error);
  if (ABLogAPIUsage())
  {
    uint64_t v10 = ABLogAddressBook((uint64_t)v9);
    ABLogErrorPtr((__CFString **)error);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef, CFErrorRef *)", 470, @">> ", @"%@, %@", v11, v12, v13, v10);
  }
  return v9;
}

const void *ABAddressBookCreateWithOptionsAndPolicy(const __CFDictionary *a1, uint64_t a2, __CFString **a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    ABLogErrorPtr(a3);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 416, v7, @"options=%@, policy=%i, %@", v8, v9, v10, (uint64_t)a1);
    CFRelease(v7);
  }
  if (ABDiagnosticsEnabled()) {
    _ABLog2(7, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 417, 0, @"policy = %i", v11, v12, v13, a2);
  }
  if (os_variant_has_internal_diagnostics()
    && _VerifyDirectDatabaseAccessEntitlementPresence_onceToken != -1)
  {
    dispatch_once(&_VerifyDirectDatabaseAccessEntitlementPresence_onceToken, &__block_literal_global_3);
  }
  CFStringRef v14 = (const void *)ABAddressBookCopyDBDirectoryWithOptions(a1);
  CFIndex v15 = (const void *)ABAddressBookCreateWithDatabaseDirectory((uint64_t)v14);
  CFRelease(v14);
  BOOL v16 = ABTCCIsAccessDenied();
  if (!a2 && v16)
  {
    if (ABDiagnosticsEnabled()) {
      _ABLog2(7, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 444, 0, @"returning NULL ABAddressBookRef", v17, v18, v19, v26);
    }
    CFRelease(v15);
    CFIndex v15 = 0;
    if (a3) {
      *a3 = (__CFString *)CFErrorCreate(0, @"ABAddressBookErrorDomain", 1, 0);
    }
  }
  BOOL v20 = ABTCCIsAccessUnknown();
  if (a2 == 1 && v20) {
    ABTCCRequestAccess();
  }
  ABAddressBookConfigureDelegateOptions((uint64_t)v15, a1);
  if (ABLogAPIUsage())
  {
    uint64_t v21 = ABLogAddressBook((uint64_t)v15);
    ABLogErrorPtr(a3);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)", 455, @">> ", @"%@, %@", v22, v23, v24, v21);
  }
  return v15;
}

BOOL ABTCCIsAccessUnknown()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A350], "sharedInstance"), "authorizationStatus") == 0;
}

__CFString *_createMutableDBDirectory()
{
  CFStringRef v0 = (const __CFString *)CPSharedResourcesDirectory();
  if (!v0) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v0);
  CFStringAppend(MutableCopy, @"/Library/AddressBook/");
  return MutableCopy;
}

BOOL ABTCCIsAccessDenied()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A350], "sharedInstance"), "authorizationStatus") == 1;
}

uint64_t ABAddressBookCreateWithDatabaseDirectory(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithDatabaseDirectory(CFStringRef)", 391, v3, @"directory=%@", v4, v5, v6, a1);
    CFRelease(v3);
  }
  uint64_t v7 = ABCCreateAddressBookWithDatabaseDirectory(a1);
  if (ABLogAPIUsage())
  {
    uint64_t v8 = ABLogAddressBook(v7);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreateWithDatabaseDirectory(CFStringRef)", 395, @">> ", @"%@", v9, v10, v11, v8);
  }
  return v7;
}

ABAddressBookRef ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(const __CFString *a1, int a2, int a3, int a4)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (ABDeviceIsBeforeFirstUnlockWithDataProtected())
  {
    if (os_variant_has_internal_content())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"ABCAddressBookRef ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(CFStringRef, _Bool, _Bool, _Bool)", 240, 0, @"%@", v8, v9, v10, @"AddressBook.framework was used before first unlock.");
    }
    ABDeviceRegisterCallbackForFirstUnlock((uint64_t)ABPostDatabaseChanged);
  }
  pthread_once(&once_control, (void (*)(void))_ABCInitialize);
  pthread_once(&kABCAddressBookRegisterClass, (void (*)(void))ABCAddressBookRegisterClass);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  uint64_t v12 = (uint64_t)Instance;
  if (!Instance) {
    return (ABAddressBookRef)v12;
  }
  v80.__sig = 0;
  *(void *)v80.__opaque = 0;
  Instance[1] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[16] = 0u;
  Instance[17] = 0u;
  Instance[18] = 0u;
  Instance[19] = 0u;
  Instance[20] = 0u;
  Instance[21] = 0u;
  Instance[22] = 0u;
  Instance[23] = 0u;
  Instance[5] = 0u;
  int v71 = 0;
  pthread_mutexattr_init(&v80);
  pthread_mutexattr_settype(&v80, 2);
  pthread_mutex_init((pthread_mutex_t *)(v12 + 80), &v80);
  pthread_mutexattr_destroy(&v80);
  if (a1)
  {
    *(void *)(v12 + 72) = CFRetain(a1);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
    if (!MutableCopy)
    {
LABEL_81:
      CFRelease((CFTypeRef)v12);
      return 0;
    }
    CFStringRef v14 = MutableCopy;
    CFStringAppend(MutableCopy, @"AddressBook.sqlitedb");
  }
  else
  {
    *(void *)(v12 + 72) = 0;
    CFStringRef v14 = @":memory:";
  }
  *(void *)(v12 + 16) = ABCDBContextCreateWithPathAndAddressBook((uint64_t)v14, v12);
  CFRelease(v14);
  if (!*(void *)(v12 + 16)) {
    goto LABEL_81;
  }
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(void *)(v12 + 336) = 0;
  *(void *)(v12 + 272) = 0;
  *(void *)(v12 + 280) = 850045858;
  CPRecordStoreGetDatabase();
  uint64_t v66 = MEMORY[0x1E4F143A8];
  uint64_t v67 = 3221225472;
  v68 = __ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys_block_invoke;
  v69 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v70 = v12;
  CPSqliteRegisterYieldNotifyBlock();
  if (*(unsigned char *)(v12 + 265))
  {
    CPRecordStoreGetDatabase();
    *(void *)(v12 + 64) = CPSqliteDatabaseCopyUniqueIdentifier();
    addressBoouint64_t k = (ABAddressBookRef)v12;
    if (a2)
    {
      if (v71)
      {
        uint64_t v17 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        uint64_t v18 = [v17 countByEnumeratingWithState:&v62 objects:v79 count:16];
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)v63;
          do
          {
            for (uint64_t i = 0; i != v19; ++i)
            {
              if (*(void *)v63 != v20) {
                objc_enumerationMutation(v17);
              }
              ABAddressBookRemoveRecord((ABAddressBookRef)v12, *(ABRecordRef *)(*((void *)&v62 + 1) + 8 * i), 0);
            }
            uint64_t v19 = [v17 countByEnumeratingWithState:&v62 objects:v79 count:16];
          }
          while (v19);
        }
        uint64_t v22 = [v17 count];

        uint64_t v23 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        uint64_t v24 = [v23 countByEnumeratingWithState:&v58 objects:v78 count:16];
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = *(void *)v59;
          do
          {
            for (uint64_t j = 0; j != v25; ++j)
            {
              if (*(void *)v59 != v26) {
                objc_enumerationMutation(v23);
              }
              ABAddressBookRemoveRecord((ABAddressBookRef)v12, *(ABRecordRef *)(*((void *)&v58 + 1) + 8 * j), 0);
            }
            uint64_t v25 = [v23 countByEnumeratingWithState:&v58 objects:v78 count:16];
          }
          while (v25);
        }
        uint64_t v28 = [v23 count];

        BOOL v15 = v28 + v22 != 0;
        int v16 = v15;
        if (!+[ABPersonLinker isInitialLinkingEnabled])
        {
LABEL_41:
          char v57 = 1;
          unsigned int v31 = a4 & ~ABCIsSortDataValid((uint64_t)addressBook, &v57);
          if (!v57) {
            unsigned int v31 = 0;
          }
          int v32 = v31 & (a2 ^ 1);
          if (+[ABPersonLinker isAutoLinkingEnabled]) {
            int v33 = (+[ABPersonLinker isLinkDataValidForAddressBook:addressBook] | a3) ^ 1;
          }
          else {
            int v33 = 0;
          }
          if ((v32 | v33) == 1)
          {
            __int16 v34 = ABOSLogGeneral();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v35 = ABLogStringForBool(v32);
              uint64_t v36 = ABLogStringForBool(v33);
              *(_DWORD *)buf = 138412546;
              v82 = v35;
              __int16 v83 = 2112;
              v84 = v36;
              _os_log_impl(&dword_19DCDB000, v34, OS_LOG_TYPE_DEFAULT, "shouldRebuildSortKeysOOP = %@, shouldRebuildLinkDataOOP = %@", buf, 0x16u);
            }
            ABStartDatabaseDoctor((uint64_t)addressBook);
          }
          if (a2)
          {
            if ((v71 & 4) != 0)
            {
              __int16 v37 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
              long long v73 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              uint64_t v38 = [v37 countByEnumeratingWithState:&v73 objects:buf count:16];
              if (v38)
              {
                uint64_t v39 = v38;
                uint64_t v40 = *(void *)v74;
                do
                {
                  for (uint64_t k = 0; k != v39; ++k)
                  {
                    if (*(void *)v74 != v40) {
                      objc_enumerationMutation(v37);
                    }
                    uint64_t v42 = *(const void **)(*((void *)&v73 + 1) + 8 * k);
                    CFErrorRef error = 0;
                    if (!ABRecordSetValue(v42, kABPersonModificationDateProperty, (CFTypeRef)[MEMORY[0x1E4F1C9C8] date], &error))
                    {
                      ABDiagnosticsEnabled();
                      _ABLog2(3, (uint64_t)"_Bool _touchAllRecordsWithKatakanaPhoneticComponents(ABCAddressBook *)", 2685, 0, @"Error touching record %@", v43, v44, v45, (uint64_t)error);
                    }
                  }
                  uint64_t v39 = [v37 countByEnumeratingWithState:&v73 objects:buf count:16];
                }
                while (v39);
                if ([v37 count]) {
                  int v16 = 1;
                }
              }
              else if ([v37 count])
              {
                int v16 = 1;
              }
            }
            if ((v71 & 8) == 0)
            {
              if (!v16) {
                return addressBook;
              }
              goto LABEL_78;
            }
            v46 = (void *)CPRecordStoreCopyAllInstancesOfClassWhere();
            long long v53 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            uint64_t v47 = [v46 countByEnumeratingWithState:&v53 objects:v77 count:16];
            if (v47)
            {
              uint64_t v48 = v47;
              uint64_t v49 = *(void *)v54;
              do
              {
                for (uint64_t m = 0; m != v48; ++m)
                {
                  if (*(void *)v54 != v49) {
                    objc_enumerationMutation(v46);
                  }
                  v16 |= ABRecordSetValue(*(ABRecordRef *)(*((void *)&v53 + 1) + 8 * m), kABPersonKindProperty, kABPersonKindOrganization, 0);
                }
                uint64_t v48 = [v46 countByEnumeratingWithState:&v53 objects:v77 count:16];
              }
              while (v48);
            }
          }
          if ((v16 & 1) == 0) {
            return addressBook;
          }
LABEL_78:
          ABAddressBookSave(addressBook, 0);
          return addressBook;
        }
      }
      else
      {
        BOOL v15 = 0;
        int v16 = 0;
        if (!+[ABPersonLinker isInitialLinkingEnabled]) {
          goto LABEL_41;
        }
      }
      if ((v71 & 2) != 0)
      {
        int CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
        int v16 = CountOfInstancesOfClassWhere != CPRecordStoreGetCountOfInstancesOfClassWhere();
      }
      else
      {
        int v16 = 0;
      }
    }
    else
    {
      int v16 = 0;
      if (!+[ABPersonLinker isInitialLinkingEnabled]) {
        goto LABEL_41;
      }
      BOOL v15 = 0;
      if ((a3 & 1) == 0) {
        goto LABEL_41;
      }
    }
    if (!+[ABPersonLinker isLinkDataValidForAddressBook:addressBook]|| v16)
    {
      __int16 v30 = [[ABPersonLinker alloc] initWithAddressBook:addressBook];
      [(ABPersonLinker *)v30 makeInitialLinks];
    }
    int v16 = v15;
    goto LABEL_41;
  }
  return (ABAddressBookRef)v12;
}

uint64_t ABCIsSortDataValid(uint64_t a1, unsigned char *a2)
{
  uint64_t v17 = 0;
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  int v3 = ABCGetICUVersion();
  ABCGetICUCollatorVersions((_DWORD *)&v17 + 1, &v17);
  int v4 = CPSqliteConnectionIntegerForProperty();
  int v5 = CPSqliteConnectionIntegerForProperty();
  int v6 = CPSqliteConnectionIntegerForProperty();
  int v7 = CPSqliteConnectionIntegerForProperty();
  int v8 = CPSqliteConnectionIntegerForProperty();
  BOOL v9 = 0;
  if (v3 == v4 && v5 == 38 && HIDWORD(v17) == v6) {
    BOOL v9 = v17 == v7;
  }
  if (a2) {
    *a2 = v9;
  }
  if (v8 >= 1) {
    BOOL v9 = 0;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v11 = CPSqliteConnectionCopyValueForProperty();
  if (!v11) {
    return 1;
  }
  CFStringRef v12 = (const __CFString *)v11;
  CFStringRef v13 = ABCCopyUserLanguage();
  if (v13)
  {
    CFStringRef v14 = v13;
    BOOL v15 = CFStringCompare(v13, v12, 1uLL) == kCFCompareEqualTo;
    CFRelease(v14);
  }
  else
  {
    BOOL v15 = 1;
  }
  CFRelease(v12);
  return v15;
}

uint64_t ABCGetICUVersion()
{
  *(_DWORD *)UVersionInfo versionArray = 0;
  u_getVersion(versionArray);
  return (versionArray[0] << 24) | (versionArray[1] << 16);
}

void ABCGetICUCollatorVersions(_DWORD *a1, _DWORD *a2)
{
  if (ABCGetICUCollatorVersions_onceToken == -1)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&ABCGetICUCollatorVersions_onceToken, &__block_literal_global_2);
  if (a2) {
LABEL_3:
  }
    *a2 = ABCGetICUCollatorVersions_cachedUCAVersion;
LABEL_4:
  if (a1) {
    *a1 = ABCGetICUCollatorVersions_cachedCollatorVersion;
  }
}

uint64_t ABCDBContextCreateWithPathAndAddressBook(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = CPRecordStoreCreateWithPathAndOptions();
  if (v3)
  {
    if (a2)
    {
      *(unsigned char *)(a2 + 264) = ABTCCIsAccessUnknown();
      *(unsigned char *)(a2 + 265) = ABTCCIsAccessGranted();
    }
    CPRecordStoreSetSetupHandler();
    CPRecordStoreLogChanges();
    uint64_t Database = CPRecordStoreGetDatabase();
    CPSqliteDatabaseSetVersion();
    CPSqliteDatabaseSetJournalModeWAL();
    CPSqliteDatabaseSetAccessRequestHandler();
    CPSqliteDatabaseSetDataProtectionLevel();
    CPSqliteDatabaseSetAutoRetryStatements();
    CPSqliteDatabaseSetShouldUseInhibitorForConnections();
    *(void *)(Database + 264) = a2;
    CPSqliteDatabaseSetConnectionInitializer();
    CPSqliteDatabaseSetCorruptionHandler();
    CPSqliteDatabaseSetDatabaseDeletedCallback();
    *(void *)recordStoreContext(v3) = a2;
    CPSqliteDatabaseSetShouldMigrateInProcess();
    CPSqliteDatabaseSetMigrationPluginBundleID();
    CPSqliteDatabaseSetMigrationHandlers();
    CPSqliteDatabaseSetShouldYieldWhenRequested();
    CPSqliteDatabaseSetShouldRequestUnlock();
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"ABCDBContextRef ABCDBContextCreateWithPathAndAddressBook(CFStringRef, ABCAddressBookRef, void *, _Bool)", 1200, 0, @"Could not create address book database", v5, v6, v7, v9);
  }
  return v3;
}

BOOL _accessRequestHandler()
{
  return ABTCCIsAccessGrantedToImages() != 0;
}

BOOL _accessRequestHandler_0()
{
  return (ABDeviceIsBeforeFirstUnlockWithDataProtected() & 1) == 0 && ABTCCIsAccessGranted() != 0;
}

uint64_t ABTCCIsAccessGranted()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A350], "sharedInstance"), "isAccessGranted");
}

uint64_t ABDeviceIsBeforeFirstUnlockWithDataProtected()
{
  if (!__isBeforeFirstUnlockWithDataProtected) {
    return 0;
  }
  uint64_t result = [MEMORY[0x1E4F5A450] isDevicePasscodeProtected];
  if (result) {
    uint64_t result = [MEMORY[0x1E4F5A450] isDeviceUnlockedSinceBoot] ^ 1;
  }
  __isBeforeFirstUnlockWithDataProtected = result;
  return result;
}

uint64_t ABCCreateAddressBookWithDatabaseDirectory(uint64_t a1)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, 0, 0, 1);
}

CFLocaleIdentifier ABCCopyUserLanguage()
{
  CFArrayRef v0 = (const __CFArray *)CFPreferencesCopyAppValue(@"AppleLanguages", (CFStringRef)*MEMORY[0x1E4F1D3B8]);
  if (!v0) {
    goto LABEL_6;
  }
  CFArrayRef v1 = v0;
  if (CFArrayGetCount(v0) <= 0)
  {
    CFRelease(v1);
LABEL_6:
    CFLocaleIdentifier CanonicalLanguageIdentifierFromString = @"en";
    CFRetain(@"en");
    return CanonicalLanguageIdentifierFromString;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
  CFLocaleIdentifier CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, ValueAtIndex);
  CFRelease(v1);
  if (!CanonicalLanguageIdentifierFromString) {
    goto LABEL_6;
  }
  return CanonicalLanguageIdentifierFromString;
}

uint64_t ABAddressBookCopyDBDirectoryWithOptions(const __CFDictionary *a1)
{
  if (a1)
  {
    Value = (void *)CFDictionaryGetValue(a1, @"ABAddressBookCreateOptionFamilyMemberAltDSID");
    if (Value)
    {
      uint64_t v2 = Value;
      uint64_t v3 = (void *)ABCAddressBookCopyDBDirectory();
      int v4 = (void *)[v3 stringByAppendingString:@"Family/"];
      CFRelease(v3);
      CPFileBuildDirectoriesToPath();
      int v37 = open((const char *)[v4 fileSystemRepresentation], 32);
      if (v37 == -1)
      {
        ABDiagnosticsEnabled();
        uint64_t v35 = *__error();
        _ABLog2(3, (uint64_t)"CFStringRef ABAddressBookCopyDirectoryPathForDelegateWithAltDSID(CFStringRef)", 313, 0, @"error opening Family directory lock at path %@, errno %d", v5, v6, v7, (uint64_t)v4);
      }
      uint64_t v36 = [v4 stringByAppendingPathComponent:@"family.plist"];
      id v8 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithContentsOfFile:"), "mutableCopy");
      if (!v8) {
        id v8 = (id)[MEMORY[0x1E4F1CA60] dictionary];
      }
      uint64_t v9 = (void *)[v8 objectForKeyedSubscript:@"Generation"];
      id v10 = (id)objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", @"Mappings"), "mutableCopy");
      if (!v10) {
        id v10 = (id)[MEMORY[0x1E4F1CA60] dictionary];
      }
      uint64_t v11 = [v9 intValue];
      char v39 = 0;
      uint64_t v12 = [v4 stringByAppendingPathComponent:v2];
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", v12, &v39))
      {
        uint64_t v38 = 0;
        if (v39)
        {
          if (ABDiagnosticsEnabled()) {
            _ABLog2(6, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 201, 0, @"migrating folder for deletage with altdsid %@ into mappings registry", v13, v14, v15, (uint64_t)v2);
          }
          int v16 = (const void *)objc_msgSend(v2, "stringByAppendingFormat:", @":%d", (v11 + 1), v35);
          uint64_t v17 = [v4 stringByAppendingString:v16];
          if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "moveItemAtPath:toPath:error:", v12, v17, &v38))
          {
            if (v16)
            {
              CFRetain(v16);
              [v10 setObject:v16 forKeyedSubscript:v2];
              int v18 = 1;
              uint64_t v11 = (v11 + 1);
              goto LABEL_26;
            }
          }
          else
          {
            ABDiagnosticsEnabled();
            _ABLog2(3, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 207, 0, @"error opening moving directory to path %@", v24, v25, v26, v17);
          }
        }
        else
        {
          int v20 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v12, &v38);
          ABDiagnosticsEnabled();
          if (v20)
          {
            _ABLog2(3, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 211, 0, @"deleted item at path %@ - it wasn't a directory but we expected one", v21, v22, v23, v12);
          }
          else
          {
            uint64_t v35 = v38;
            _ABLog2(3, (uint64_t)"CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)", 213, 0, @"error encountered while deleting item of unexpected type at path %@ - it wasn't a directory but we expected one. error: %@", v21, v22, v23, v12);
          }
        }
      }
      int v27 = (const void *)[v10 objectForKeyedSubscript:v2];
      if (!v27) {
        goto LABEL_32;
      }
      CFTypeRef v28 = CFRetain(v27);
      if (!v28) {
        goto LABEL_32;
      }
      int v16 = v28;
      int v18 = 0;
LABEL_26:
      uint64_t v29 = (const void *)[v4 stringByAppendingFormat:@"%@/", v16, v35];
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v29)
        && v29)
      {
        CFTypeRef v30 = CFRetain(v29);
        CFRelease(v16);
        if (v30)
        {
          int v31 = v37;
          if (!v18)
          {
LABEL_38:
            close(v31);
            return (uint64_t)v30;
          }
LABEL_36:
          [v8 setObject:v10 forKeyedSubscript:@"Mappings"];
          objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v11), @"Generation");
          __int16 v34 = (void *)[MEMORY[0x1E4F28F98] dataWithPropertyList:v8 format:200 options:0 error:0];
          if (v34) {
            [v34 writeToFile:v36 atomically:0];
          }
          goto LABEL_38;
        }
      }
      else
      {
        CFRelease(v16);
      }
LABEL_32:
      uint64_t v11 = (v11 + 1);
      uint64_t v32 = [NSString stringWithFormat:@"%@:%d", v2, v11];
      [v10 setObject:v32 forKeyedSubscript:v2];
      int v33 = (const void *)[v4 stringByAppendingFormat:@"%@/", v32];
      if (v33) {
        CFTypeRef v30 = CFRetain(v33);
      }
      else {
        CFTypeRef v30 = 0;
      }
      int v31 = v37;
      CPFileBuildDirectoriesToPath();
      goto LABEL_36;
    }
  }
  return ABCAddressBookCopyDBDirectory();
}

void ABAddressBookConfigureDelegateOptions(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = [a2 objectForKey:@"ABAddressBookCreateOptionFamilyMemberAltDSID"];
    uint64_t v5 = [a2 objectForKey:@"ABAddressBookCreateOptionFamilyMemberACAccountID"];
    if (v4)
    {
      uint64_t v6 = v5;
      ABAddressBookPrepareSourceForFamilyDelegate(a1, v4);
      if (v6)
      {
        ABAddressBookPrepareAccountForFamilyDelegate(a1, v4, v6);
      }
    }
  }
}

uint64_t ABAddressBookGetIntegerProperty(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetIntegerProperty(ABAddressBookRef, CFStringRef)", 907, v3, @"%@, key=%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  uint64_t v8 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"int ABAddressBookGetIntegerProperty(ABAddressBookRef, CFStringRef)", 913, @">> ", @"value=%i", v9, v10, v11, v8);
  }
  return v8;
}

CFTypeRef ABAddressBookCopyMe(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyMe(ABAddressBookRef)", 1244, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (!a1) {
    goto LABEL_11;
  }
  ABRecordID IntegerProperty = ABAddressBookGetIntegerProperty((uint64_t)a1);
  if (IntegerProperty == -1) {
    goto LABEL_11;
  }
  ABRecordRef SourceWithRecordID = ABAddressBookGetSourceWithRecordID(a1, IntegerProperty);
  if (!SourceWithRecordID) {
    goto LABEL_11;
  }
  uint64_t v10 = SourceWithRecordID;
  ABRecordRef Me = ABSourceGetMe((uint64_t)SourceWithRecordID);
  if (!Me || (CFTypeRef v12 = ABPersonCopyPreferredLinkedPersonForName(Me)) == 0)
  {
    uint64_t v13 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v13, OS_LOG_TYPE_INFO, "Could not copy the Me card", buf, 2u);
    }
    ABSourceSetMe(v10, 0, 0);
LABEL_11:
    CFTypeRef v12 = 0;
  }
  if (ABLogAPIUsage())
  {
    uint64_t v14 = ABLogStringForPerson(v12);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyMe(ABAddressBookRef)", 1265, @">> ", @"me=%@", v15, v16, v17, v14);
  }
  return v12;
}

CFTypeRef ABPersonCopyPreferredLinkedPersonForName(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopyPreferredLinkedPersonForName(ABRecordRef)", 2761, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  CFTypeRef result = _copyPreferredPersonWithPreferredColumnIfExists((uint64_t)a1, 1);
  if (!result)
  {
    return CFRetain(a1);
  }
  return result;
}

CFTypeRef _copyPreferredPersonWithPreferredColumnIfExists(uint64_t a1, int a2)
{
  uint64_t v4 = ABCGetAddressBookForRecord();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  int IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty);
  if (IntValue == -1) {
    return 0;
  }
  int v7 = IntValue;
  CPRecordStoreGetDatabase();
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  uint64_t v9 = SelectPrefix;
  CFStringRef v10 = a2
      ? @" JOIN ABPersonLink abl ON abp.PersonLinuint64_t k = abl.ROWID WHERE (abp.personLinuint64_t k = ? AND abl.PreferredNamePersonID = abp.ROWID)"
      : @" JOIN ABPersonLink abl ON abp.PersonLinuint64_t k = abl.ROWID WHERE (abp.personLinuint64_t k = ? AND abl.PreferredImagePersonID = abp.ROWID)";
  CFStringAppend(SelectPrefix, v10);
  uint64_t v11 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(v5);
  CFRelease(v9);
  if (v11 && (CFTypeRef v12 = *(sqlite3_stmt **)(v11 + 8)) != 0)
  {
    sqlite3_bind_int(v12, 1, v7);
    CFArrayRef v13 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
  }
  else
  {
    CFArrayRef v13 = 0;
  }
  if (!v13) {
    return 0;
  }
  if (CFArrayGetCount(v13) < 1)
  {
    CFTypeRef v15 = 0;
  }
  else
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v13, 0);
    CFTypeRef v15 = CFRetain(ValueAtIndex);
  }
  CFRelease(v13);
  return v15;
}

uint64_t ABCDBContextRecordForUIDOfType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41095C8](a1, a3, a2);
}

uint64_t ABRecordGetIntValue(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"int ABRecordGetIntValue(ABRecordRef, ABPropertyID)", 183, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  uint64_t v8 = ABCRecordCopyValue(a1, a2);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"int ABRecordGetIntValue(ABRecordRef, ABPropertyID)", 185, @">> ", 0, v9, v10, v11, v13);
  }
  return v8;
}

uint64_t ABCDBContextGetAddressBook(uint64_t a1)
{
  uint64_t result = recordStoreContext(a1);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLike(uint64_t a1, int a2, const __CFString *a3, void *a4, void *a5)
{
  return _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLikeIncludingLabels(a1, a2, a3, a4, a5);
}

uint64_t _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLikeIncludingLabels(uint64_t a1, int a2, const __CFString *a3, void *a4, void *a5)
{
  if (ABPhoneUtilitiesIgnoreMatchingForLostMode()) {
    return 0;
  }
  CFIndex usedBufLen = 0;
  *a5 = 0;
  *a4 = 0;
  CPRecordStoreGetDatabase();
  uint64_t v11 = CPSqliteDatabaseStatementForReading();
  CFTypeRef v12 = (void *)recordStoreContext(a1);
  if (v12) {
    CFTypeRef v12 = (void *)*v12;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v12);
  if (v11)
  {
    uint64_t v13 = *(sqlite3_stmt **)(v11 + 8);
    if (v13)
    {
      sqlite3_bind_int(v13, 1, a2);
      CFIndex Length = CFStringGetLength(a3);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      uint64_t v16 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 2, 0x6776D721uLL);
      if (v16)
      {
        uint64_t v17 = (const char *)v16;
        v19.location = 0;
        v19.length = Length;
        CFStringGetBytes(a3, v19, 0x8000100u, 0, 0, v16, MaximumSizeForEncoding, &usedBufLen);
        *(_WORD *)&v17[usedBufLen] = 37;
        sqlite3_bind_text(*(sqlite3_stmt **)(v11 + 8), 2, v17, -1, MEMORY[0x1E4F14838]);
        CPSqliteStatementSendResults();
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
      }
    }
  }
  return 0;
}

uint64_t recordStoreContext(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t Context = CPRecordStoreGetContext();
  if (!Context)
  {
    uint64_t Context = (uint64_t)malloc_type_calloc(1uLL, 0x68uLL, 0xE0040B79FBFCFuLL);
    CPRecordStoreSetContext();
  }
  return Context;
}

uint64_t ABPhoneUtilitiesIgnoreMatchingForLostMode()
{
  return _ignoreMatchingForLostMode;
}

uint64_t ABCPersonGetRecordForUniqueID(uint64_t result, uint64_t a2)
{
  if (result) {
    return ABCDBContextRecordForUIDOfType(*(void *)(result + 16), a2, (uint64_t)ABCPersonClass);
  }
  return result;
}

ABRecordRef ABAddressBookGetPersonWithRecordID(ABAddressBookRef addressBook, ABRecordID recordID)
{
  uint64_t v2 = *(void *)&recordID;
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetPersonWithRecordID(ABAddressBookRef, ABRecordID)", 758, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (ABRecordRef)ABCPersonGetRecordForUniqueID((uint64_t)addressBook, v2);
}

uint64_t ABCSourceGetRecordForUniqueID(uint64_t result, uint64_t a2)
{
  if (result) {
    return ABCDBContextRecordForUIDOfType(*(void *)(result + 16), a2, (uint64_t)ABCSourceClass);
  }
  return result;
}

ABRecordRef ABAddressBookGetSourceWithRecordID(ABAddressBookRef addressBook, ABRecordID sourceID)
{
  uint64_t v2 = *(void *)&sourceID;
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetSourceWithRecordID(ABAddressBookRef, ABRecordID)", 295, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (ABRecordRef)ABCSourceGetRecordForUniqueID((uint64_t)addressBook, v2);
}

uint64_t ABTCCIsAccessGrantedToImages()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A350], "sharedInstance"), "isAccessGranted");
}

uint64_t ABCRecordSetValueAndReturnError(const void *a1, uint64_t a2, __CFString *a3, CFAllocatorRef *a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = (_DWORD *)ABCGetAddressBookForRecord();
  Class = (char **)CPRecordGetClass();
  if (Class == ABCGroupClass[0]) {
    int v10 = 258;
  }
  else {
    int v10 = 259;
  }
  if (Class == (char **)ABCPersonClass) {
    int v11 = 257;
  }
  else {
    int v11 = v10;
  }
  CFAllocatorRef allocator = 0;
  if (a4) {
    p_CFAllocatorRef allocator = (const void **)&allocator;
  }
  else {
    p_CFAllocatorRef allocator = 0;
  }
  if (kABPersonInternalUUIDProperty == a2)
  {
    if (!a3 || (CFTypeID v13 = CFGetTypeID(a3), v13 != CFStringGetTypeID()) || !CFStringGetLength(a3)) {
      ABCRecordSetValueAndReturnError_cold_1();
    }
    goto LABEL_17;
  }
  if (a3)
  {
LABEL_17:
    unint64_t v14 = unwrapCPValue((const __CFNumber *)a3, a2, a1);
    char v15 = 0;
    goto LABEL_18;
  }
  unint64_t v14 = 0;
  char v15 = 1;
LABEL_18:
  if (v11 == 259)
  {
    if (ABRecordGetRecordID(a1)) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = kABSourceEnabledProperty == a2;
    }
    BOOL v18 = v17 || kABSourceMeIdentifierProperty == a2;
    char v19 = v18;
    if (v18)
    {
      if (kABSourceCapabilitiesProperty != a2) {
        goto LABEL_47;
      }
    }
    else
    {
      ABDiagnosticsEnabled();
      ABLogBacktrace();
      _ABLog2(3, (uint64_t)"_Bool ABCRecordSetValueAndReturnError(ABCRecordRef, ABCPropertyID, CFTypeRef, ABCErrorRef *)", 115, 0, @"Someone tried to change property=%i on the local store. Please open a radar to PEP Address Book. %@", v23, v24, v25, a2);
      if (kABSourceCapabilitiesProperty != a2)
      {
LABEL_102:
        if (a4)
        {
          uint64_t v32 = 0;
          if (allocator) {
            *a4 = allocator;
          }
          else {
            *a4 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, 0);
          }
          return v32;
        }
        return 0;
      }
    }
    if (!v8 || !ABAddressBookIgnoresGuardianRestrictions((uint64_t)v8))
    {
      Policy = ABCSourceGetPolicy(a1);
      if (!Policy || (ABPolicyShouldIgnoreCapabilitiesRestrictions((uint64_t)Policy) & 1) == 0)
      {
        int v27 = ABRecordGetIntValue((uint64_t)a1, a2) & 0xC;
        if ((v14 & 0xC) != v27 && (v8 || (v14 & 0xC & ~v27) == 0))
        {
          ABPolicyPopulateRecordReadOnlyError(p_allocator, 1, @"RecordPropertyNotWritable");
          goto LABEL_102;
        }
      }
    }
    if ((v19 & 1) == 0) {
      goto LABEL_102;
    }
LABEL_47:
    int v20 = 0;
LABEL_48:
    char v22 = 1;
    goto LABEL_49;
  }
  if (v11 == 258) {
    uint64_t v16 = (const void *)ABCGroupCopySource();
  }
  else {
    uint64_t v16 = (const void *)ABCPersonCopySource();
  }
  int v20 = v16;
  if (!v16) {
    goto LABEL_48;
  }
  uint64_t v21 = ABCSourceGetPolicy(v16);
  if (v21 && !ABPolicyShouldSetValue((uint64_t)v21, v8, a1, a2, a3, 0, p_allocator))
  {
    if (a4)
    {
      CFAllocatorRef v31 = allocator;
      if (!allocator) {
        CFAllocatorRef v31 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, 0);
      }
      CFNumberRef PhoneNumberValueSanitized = 0;
      CFNumberRef SocialProfileValueFillMissingData = 0;
      uint64_t v32 = 0;
      *a4 = v31;
    }
    else
    {
      CFNumberRef PhoneNumberValueSanitized = 0;
      CFNumberRef SocialProfileValueFillMissingData = 0;
      uint64_t v32 = 0;
    }
    goto LABEL_109;
  }
  char v22 = 0;
LABEL_49:
  CFTypeRef v28 = (long long *)CPRecordGetClass();
  if (v28 == ABCPersonClass)
  {
    if (kABCPhoneProperty == a2)
    {
      ABCPersonClearAddressBookPhoneCacheForPerson((BOOL)v8);
      if (v15)
      {
        CFNumberRef PhoneNumberValueSanitized = 0;
        CFNumberRef SocialProfileValueFillMissingData = 0;
        a3 = 0;
        goto LABEL_73;
      }
      CFNumberRef PhoneNumberValueSanitized = (const __CFNumber *)ABPersonCreatePhoneNumberValueSanitized(a3);
      unwrapCPValue(PhoneNumberValueSanitized, a2, a1);
      a3 = (__CFString *)PhoneNumberValueSanitized;
      if (!PhoneNumberValueSanitized) {
        goto LABEL_72;
      }
    }
    else
    {
      CFNumberRef PhoneNumberValueSanitized = 0;
      if (!a3) {
        goto LABEL_72;
      }
    }
    if (kABPersonSocialProfileProperty == a2)
    {
      CFNumberRef SocialProfileValueFillMissingData = (const __CFNumber *)ABCPersonCreateSocialProfileValueFillMissingData(a3);
      unwrapCPValue(SocialProfileValueFillMissingData, a2, a1);
      a3 = (__CFString *)SocialProfileValueFillMissingData;
      goto LABEL_73;
    }
LABEL_72:
    CFNumberRef SocialProfileValueFillMissingData = 0;
LABEL_73:
    ABCPersonInvalidateSyntheticPropertiesIfNeeded((uint64_t)a1, a2);
    if (v8)
    {
      int v41 = 0x2000;
      if (kABPersonPrefixProperty == a2
        || kABPersonFirstNameProperty == a2
        || kABPersonMiddleNameProperty == a2
        || kABPersonLastNameProperty == a2
        || kABPersonSuffixProperty == a2
        || kABPersonKindProperty == a2
        || kABPersonOrganizationProperty == a2
        || kABPersonNicknameProperty == a2
        || kABPersonPreviousFamilyNameProperty == a2
        || kABPersonFirstNamePhoneticProperty == a2
        || kABPersonMiddleNamePhoneticProperty == a2
        || kABPersonLastNamePhoneticProperty == a2
        || kABPersonOrganizationPhoneticProperty == a2
        || kABPersonFirstNamePronunciationProperty == a2
        || kABPersonMiddleNamePronunciationProperty == a2
        || kABPersonLastNamePronunciationProperty == a2
        || kABPersonOrganizationPronunciationProperty == a2
        || (int v41 = 0x20000, kABPersonBirthdayProperty == a2)
        || kABPersonAlternateBirthdayProperty == a2)
      {
        v8[94] |= v41;
      }
    }
    if ((ABRecordTypeOfProperty() & 0x100) != 0) {
      ABCDBContextMultiValueWillChange(a1, a2, (uint64_t)a3);
    }
    if (v8 && ABPersonIsLinkedToMe(v8, a1)) {
      v8[94] |= 0x40000u;
    }
    goto LABEL_108;
  }
  if (v28 != (long long *)ABCSourceClass)
  {
LABEL_53:
    CFNumberRef SocialProfileValueFillMissingData = 0;
    CFNumberRef PhoneNumberValueSanitized = 0;
    goto LABEL_108;
  }
  if (kABCSourceConstraintsPathProperty == a2)
  {
    CPRecordSetProperty();
    goto LABEL_53;
  }
  CFNumberRef SocialProfileValueFillMissingData = 0;
  if (kABSourceEnabledProperty != a2 || v14)
  {
    CFNumberRef PhoneNumberValueSanitized = 0;
  }
  else
  {
    CFNumberRef PhoneNumberValueSanitized = 0;
    if (v8)
    {
      ABRecordID RecordID = ABRecordGetRecordID(a1);
      if (RecordID == ABAddressBookGetIntegerProperty((uint64_t)v8)) {
        ABAddressBookClearPreferredMeSource((uint64_t)v8, v34, v35, v36, v37, v38, v39, v40);
      }
      CFNumberRef SocialProfileValueFillMissingData = 0;
      CFNumberRef PhoneNumberValueSanitized = 0;
    }
  }
LABEL_108:
  CPRecordSetProperty();
  uint64_t v32 = 1;
  if ((v22 & 1) == 0) {
LABEL_109:
  }
    CFRelease(v20);
  if (SocialProfileValueFillMissingData) {
    CFRelease(SocialProfileValueFillMissingData);
  }
  if (PhoneNumberValueSanitized) {
    CFRelease(PhoneNumberValueSanitized);
  }
  return v32;
}

uint64_t ABRecordTypeOfProperty()
{
  if (ABLogAPIUsage())
  {
    int v10 = _isMainThread();
    CFArrayRef v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABCPropertyType ABRecordTypeOfProperty(ABCRecordRef, ABCPropertyID)", 282, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  uint64_t PropertyDescriptor = CPRecordGetPropertyDescriptor();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABCPropertyType ABRecordTypeOfProperty(ABCRecordRef, ABCPropertyID)", 284, @">> ", 0, v5, v6, v7, v9);
  }
  if (PropertyDescriptor) {
    return *(unsigned int *)(PropertyDescriptor + 32);
  }
  else {
    return 0;
  }
}

uint64_t ABCPersonInvalidateSyntheticPropertiesIfNeeded(uint64_t a1, int a2)
{
  if (CPRecordGetProperty()) {
    return 0;
  }
  BOOL v4 = kABCFirstNameProperty == a2 || kABCLastNameProperty == a2;
  BOOL v5 = v4 || kABCFirstNamePhoneticProperty == a2;
  BOOL v6 = v5 || kABCLastNamePhoneticProperty == a2;
  BOOL v7 = v6 || kABCKindProperty == a2;
  BOOL v8 = v7 || kABCOrganizationProperty == a2;
  BOOL v9 = v8 || kABCOrganizationPhoneticProperty == a2;
  BOOL v10 = v9 || kABCNicknameProperty == a2;
  if (!v10 && kABCEmailProperty != a2 && kABCPhoneProperty != a2 && kABCJobTitleProperty != a2) {
    return 0;
  }
  ABCPersonInvalidateSyntheticProperties();
  return 1;
}

uint64_t ABCPersonCopySource()
{
  uint64_t v0 = ABCGetAddressBookForRecord();
  uint64_t v1 = CPRecordCopyProperty();
  if (v1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v0 == 0;
  }
  if (!v2)
  {
    uint64_t Property = CPRecordGetProperty();
    if (Property == -1)
    {
      return 0;
    }
    else
    {
      RecordForUniqueID = (const void *)ABCSourceGetRecordForUniqueID(v0, Property);
      uint64_t v1 = (uint64_t)RecordForUniqueID;
      if (RecordForUniqueID) {
        CFRetain(RecordForUniqueID);
      }
    }
  }
  return v1;
}

uint64_t ABCGetAddressBookForRecord()
{
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    return ABCDBContextGetAddressBook(result);
  }
  return result;
}

unint64_t unwrapCPValue(const __CFNumber *a1, int a2, const void *a3)
{
  CFNumberRef v3 = a1;
  if (kABPersonCreationDateProperty == a2 || kABPersonModificationDateProperty == a2) {
    return llround(MEMORY[0x19F3B2F50](a1));
  }
  int PropertyType = ABRecordGetPropertyType(a3, a2);
  if (PropertyType == 2)
  {
    uint64_t valuePtr = 0;
    CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return (unint64_t)v3;
}

uint64_t ABAddressBookSetUsedByContacts(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      int v2 = 0x400000;
    }
    else {
      int v2 = 0;
    }
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFFBFFFFF | v2;
  }
  return result;
}

ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatForRecord(ABRecordRef record)
{
  return ABPersonGetCompositeNameFormatAndDelimiterForRecord(record, 0);
}

uint64_t __ABGetCharacterSetWithPattern_block_invoke()
{
  return [MEMORY[0x1E4F29238] valueWithPointer:uset_openPattern()];
}

uint64_t ABCAddressBookRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  kABCAddressBookTypeID = result;
  return result;
}

void _registerForDistributedNotification()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)ABDatabaseChangedByOtherProcess, @"__ABDataBaseChangedByOtherProcessNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

CFMutableDictionaryRef __ABCFTSGetCollationContextDictionary_block_invoke()
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  ABCFTSGetCollationContextDictionary_collalationContextDict = (uint64_t)result;
  return result;
}

os_log_t __ABOSLogImageMetadata_block_invoke()
{
  os_log_t result = os_log_create("com.apple.contacts.AddressBookLegacy", "image-metadata");
  ABOSLogImageMetadata_imageMetadataLog = (uint64_t)result;
  return result;
}

uint64_t ABAddressBookGetSequenceNumber(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    CFNumberRef v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetSequenceNumber(ABAddressBookRef)", 953, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"int ABAddressBookGetSequenceNumber(ABAddressBookRef)", 959, @">> ", @"sequenceNumber=%i", v9, v10, v11, SequenceNumber);
  }
  return SequenceNumber;
}

uint64_t _initializeConnection()
{
  CPSqliteConnectionPerformSQL();
  return CPSqliteConnectionPerformSQL();
}

uint64_t _initializeConnection_0(void *a1, uint64_t a2)
{
  ABRegisterSQLiteICUTokenizer(*(sqlite3 **)(a2 + 8));
  if (ABLogSqliteTrace()) {
    sqlite3_trace_v2(*(sqlite3 **)(a2 + 8), 3u, (int (__cdecl *)(unsigned int, void *, void *, void *))_abSqliteTraceCallback, a1);
  }
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_normalize_date", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteNormalizeDate, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_repair_guid", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteRepairUUID, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_generate_guid", 0, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteGenerateUUID, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "has_sort_key_prefix", 3, 1, 0, MEMORY[0x1E4F4BDE0], 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_katakana_exclusively", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteKatakanaExclusively, 0, 0);
  uint64_t v4 = (void *)a1[33];
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_update_value_from_trigger", 3, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCDBUpdatePersonValueFromTrigger, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_transform_string", -1, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteTransformString, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_is_store_allowed", 4, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteIsStoreAllowed, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_compare_phone_numbers", 4, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteComparePhoneNumbers, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ab_allowed_preferred_contact", 4, 1, v4, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABSqliteSelectPreferredContact_Step, (void (__cdecl *)(sqlite3_context *))ABSqliteSelectPreferredContact_Final);
  uint64_t v5 = *(sqlite3 **)(a2 + 8);
  return sqlite3_create_function(v5, "ab_collect_value_row_map", 3, 1, v4, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABValueRowMapCollect, 0, 0);
}

uint64_t ABRegisterSQLiteICUTokenizer(sqlite3 *a1)
{
  if (!gFTSEabled) {
    return 101;
  }
  ppStmt = 0;
  uint64_t result = sqlite3_db_config(a1, 1004, 1, 0);
  if (!result)
  {
    uint64_t result = sqlite3_prepare_v2(a1, "SELECT fts3_tokenizer(?, ?)", -1, &ppStmt, 0);
    if (!result)
    {
      CFNumberRef v3 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040CD2B339FuLL);
      uint64_t v5 = v3;
      *(_DWORD *)CFNumberRef v3 = 0;
      v3[1] = ABCFFTSTokenizerCreate;
      v3[2] = ABCFFTSTokenizerDestroy;
      v3[3] = ABCFFTSTokenizerOpen;
      v3[4] = ABCFFTSTokenizerClose;
      v3[5] = ABCFFTSTokenizerNext;
      v3[6] = a1;
      sqlite3_bind_text(ppStmt, 1, "ab_cf_tokenizer", -1, 0);
      sqlite3_bind_blob(ppStmt, 2, &v5, 8, 0);
      uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x6004073DA8B2BuLL);
      v4[3] = v5;
      ABCFTSSetCollationContextForDatabaseConnectionHandle(a1, v4);
      sqlite3_create_function(a1, "ab_cf_tokenizer_namerank", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerNameRankFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_matched_properties", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerPropertyMatchFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_sd_matched_properties", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFSmartDialerFTSTokenizerPropertyMatchFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_match_collect", 4, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerPropertyMatchCollectFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_sd_match_collect", 4, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFSmartDialerFTSTokenizerPropertyMatchCollectFunction, 0, 0);
      sqlite3_create_function(a1, "ab_cf_tokenizer_select_snippet_column", 1, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ABCFFTSTokenizerSelectSnippetColumnFunction, 0, 0);
      sqlite3_step(ppStmt);
      return sqlite3_finalize(ppStmt);
    }
  }
  return result;
}

uint64_t ABLogSqliteTrace()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogSqliteTrace) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t ABCFTSSetCollationContextForDatabaseConnectionHandle(const void *a1, const void *a2)
{
  if (ABCFTSGetCollationContextDictionary_predicate != -1) {
    dispatch_once(&ABCFTSGetCollationContextDictionary_predicate, &__block_literal_global_19);
  }
  uint64_t v4 = (__CFDictionary *)ABCFTSGetCollationContextDictionary_collalationContextDict;
  pthread_mutex_lock(&gDictionaryMutex);
  if (a2) {
    CFDictionarySetValue(v4, a1, a2);
  }
  else {
    CFDictionaryRemoveValue(v4, a1);
  }
  return pthread_mutex_unlock(&gDictionaryMutex);
}

uint64_t multivalueSearchRowHandler(uint64_t a1, __CFArray ***a2)
{
  return 0;
}

void multivalueSearchRowHandlerIncludingLabels(uint64_t a1, __CFArray ***a2, int a3)
{
  if (!**a2) {
    **a2 = CFArrayCreateMutable(0, 0, 0);
  }
  if (!*a2[1]) {
    *a2[1] = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  if (*a2[2])
  {
    if (!a3) {
      goto LABEL_11;
    }
  }
  else
  {
    *a2[2] = CFArrayCreateMutable(0, 0, 0);
    if (!a3) {
      goto LABEL_11;
    }
  }
  if (!*a2[3]) {
    *a2[3] = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
LABEL_11:
  uint64_t v6 = **a2;
  int v7 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(v6, (const void *)v7);
  BOOL v8 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  CFStringRef v9 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
  CFArrayAppendValue(*a2[1], v9);
  CFRelease(v9);
  uint64_t v10 = *a2[2];
  int v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
  CFArrayAppendValue(v10, (const void *)v11);
  if (a3)
  {
    CFTypeRef v12 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3);
    if (v12)
    {
      CFStringRef v13 = CFStringCreateWithCString(0, (const char *)v12, 0x8000100u);
      CFArrayAppendValue(*a2[3], v13);
      CFRelease(v13);
    }
    else
    {
      unint64_t v14 = *a2[3];
      char v15 = (const void *)*MEMORY[0x1E4F1D260];
      CFArrayAppendValue(v14, v15);
    }
  }
}

uint64_t __ABPeoplePickerPrefs_block_invoke()
{
  uint64_t result = CPCopySharedResourcesPreferencesDomainForDomain();
  ABPeoplePickerPrefs__peoplePickerPrefs = result;
  return result;
}

void __ABCGetICUCollatorVersions_block_invoke()
{
  int v1 = 0;
  if (ucol_open())
  {
    ucol_getVersion();
    ucol_getUCAVersion();
    ABCGetICUCollatorVersions_cachedCollatorVersion = 0;
    ABCGetICUCollatorVersions_cachedUCAVersion = 0;
    ucol_close();
  }
  else
  {
    uint64_t v0 = ABOSLogGeneral();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      __ABCGetICUCollatorVersions_block_invoke_cold_1(&v1, v0);
    }
  }
}

ABPersonSortOrdering ABPersonGetSortOrdering(void)
{
  ABPersonSortOrdering valuePtr = 1;
  CFStringRef v0 = (const __CFString *)ABPeoplePickerPrefs();
  CFNumberRef v1 = (const __CFNumber *)CFPreferencesCopyAppValue(@"contactsSortOrder", v0);
  if (v1) {
    goto LABEL_2;
  }
  CFDictionaryRef v3 = _abCopyCardDisplayDictionary();
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, @"contactsSortOrder");
    if (Value)
    {
      CFNumberRef v1 = Value;
      CFRetain(Value);
      CFRelease(v4);
LABEL_2:
      CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
      CFRelease(v1);
      return valuePtr;
    }
    CFRelease(v4);
  }
  return 1;
}

uint64_t ABPeoplePickerPrefs()
{
  uint64_t result = ABPeoplePickerPrefs__peoplePickerPrefs;
  if (!ABPeoplePickerPrefs__peoplePickerPrefs)
  {
    if (ABPeoplePickerPrefs___once_peoplePickerPrefs != -1) {
      dispatch_once(&ABPeoplePickerPrefs___once_peoplePickerPrefs, &__block_literal_global_395);
    }
    return ABPeoplePickerPrefs__peoplePickerPrefs;
  }
  return result;
}

uint64_t _ABCInitialize()
{
  ABCCreateLock();
  ABCSourceInitialize();
  ABCPersonInitialize();
  ABCGroupInitialize(v0, v1, v2, v3, v4, v5, v6, v7, vars0);
  ABCImageStoreInitialize();
  return pthread_once(&_registerOnce, _registerForDistributedNotification);
}

void ABSourceInitialize()
{
  kABSourceNameuint64_t Property = kABCSourceNameProperty;
  kABSourceTypeuint64_t Property = kABCSourceTypeProperty;
  kABSourceConstraintsPathuint64_t Property = kABCSourceConstraintsPathProperty;
  kABSourceExternalModificationTaguint64_t Property = kABCSourceExternalModificationTagProperty;
  kABSourceExternalSyncTaguint64_t Property = kABCSourceExternalSyncTagProperty;
  kABSourceExternalIdentifieruint64_t Property = kABCSourceExternalIdentifierProperty;
  kABSourceAccountIDuint64_t Property = kABCSourceAccountIDProperty;
  kABSourceEnableduint64_t Property = kABCSourceEnabledProperty;
  kABSourceSyncDatauint64_t Property = kABCSourceSyncDataProperty;
  kABSourceMeIdentifieruint64_t Property = kABCSourceMeIdentifierProperty;
  kABSourceCapabilitiesuint64_t Property = kABCSourceCapabilitiesProperty;
  kABSourceInternalUUIDuint64_t Property = kABCSourceInternalUUIDProperty;
  kABSourceLastSyncDateuint64_t Property = kABCSourceLastSyncDateProperty;
  kABSourceProviderIdentifieruint64_t Property = kABCSourceProviderIdentifierProperty;
  kABSourceProviderMetadatauint64_t Property = kABCSourceProviderMetadataProperty;
}

void ABPersonInitialize()
{
  if (ABLogAPIUsage())
  {
    int v11 = _isMainThread();
    uint64_t v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonInitialize(void)", 1667, v0, 0, v1, v2, v3, (uint64_t)v11);
    CFRelease(v0);
  }
  kABPersonFirstNameuint64_t Property = kABCFirstNameProperty;
  kABPersonFirstNamePhoneticuint64_t Property = kABCFirstNamePhoneticProperty;
  kABPersonFirstNamePronunciationuint64_t Property = kABCFirstNamePronunciationProperty;
  kABPersonMiddleNameuint64_t Property = kABCMiddleNameProperty;
  kABPersonMiddleNamePhoneticuint64_t Property = kABCMiddleNamePhoneticProperty;
  kABPersonMiddleNamePronunciationuint64_t Property = kABCMiddleNamePronunciationProperty;
  kABPersonLastNameuint64_t Property = kABCLastNameProperty;
  kABPersonLastNamePhoneticuint64_t Property = kABCLastNamePhoneticProperty;
  kABPersonLastNamePronunciationuint64_t Property = kABCLastNamePronunciationProperty;
  kABPersonPreviousFamilyNameuint64_t Property = kABCPreviousFamilyNameProperty;
  kABPersonAddressingGrammaruint64_t Property = kABCAddressingGrammarProperty;
  kABPersonOrganizationuint64_t Property = kABCOrganizationProperty;
  kABPersonOrganizationPhoneticuint64_t Property = kABCOrganizationPhoneticProperty;
  kABPersonOrganizationPronunciationuint64_t Property = kABCOrganizationPronunciationProperty;
  kABPersonDepartmentuint64_t Property = kABCDepartmentProperty;
  kABPersonDateuint64_t Property = kABCDateProperty;
  kABPersonInstantMessageuint64_t Property = kABCInstantMessageProperty;
  kABPersonNoteuint64_t Property = kABCNoteProperty;
  kABPersonImageuint64_t Property = kABCImageProperty;
  kABPersonPhoneuint64_t Property = kABCPhoneProperty;
  kABPersonEmailuint64_t Property = kABCEmailProperty;
  kABPersonAddressuint64_t Property = kABCAddressProperty;
  kABPersonKinduint64_t Property = kABCKindProperty;
  kABPersonSounduint64_t Property = kABCSoundProperty;
  kABPersonBirthdayuint64_t Property = kABCBirthdayProperty;
  kABPersonJobTitleuint64_t Property = kABCJobTitleProperty;
  kABPersonNicknameuint64_t Property = kABCNicknameProperty;
  kABPersonPrefixuint64_t Property = kABCPrefixProperty;
  kABPersonSuffixuint64_t Property = kABCSuffixProperty;
  kABPersonURLuint64_t Property = kABCURLProperty;
  kABPersonRelatedNamesuint64_t Property = kABCRelatedNamesProperty;
  kABPersonFirstSortuint64_t Property = kABCFirstSortProperty;
  kABPersonLastSortuint64_t Property = kABCLastSortProperty;
  kABPersonCreationDateuint64_t Property = kABCCreationDateProperty;
  kABPersonModificationDateuint64_t Property = kABCModificationDateProperty;
  kABPersonCompositeNameFallbackuint64_t Property = kABCCompositeNameFallbackProperty;
  kABPersonSyntheticPropertiesReset = kABCSyntheticPropertiesReset;
  kABPersonExternalIdentifieruint64_t Property = kABCPersonExternalIdentifierProperty;
  kABPersonStoreIDuint64_t Property = kABCPersonStoreIDProperty;
  kABPersonStoreReferenceuint64_t Property = kABCPersonStoreReferenceProperty;
  kABPersonExternalRepresentationuint64_t Property = kABCPersonExternalRepresentationProperty;
  kABPersonExternalModificationTaguint64_t Property = kABCPersonExternalModificationTagProperty;
  kABPersonExternalUUIDuint64_t Property = kABCPersonExternalUUIDProperty;
  kABPersonImageURIuint64_t Property = kABCPersonImageURIProperty;
  kABPersonFirstSortSectionuint64_t Property = kABCFirstSortSectionProperty;
  kABPersonLastSortSectionuint64_t Property = kABCLastSortSectionProperty;
  kABPersonFirstSortLanguageIndexSortuint64_t Property = kABCFirstSortLanguageIndexSortProperty;
  kABPersonLastSortLanguageIndexSortuint64_t Property = kABCLastSortLanguageIndexSortProperty;
  kABPersonDisplayNameuint64_t Property = kABCPersonDisplayNameProperty;
  int valuePtr = 0;
  kABPersonKindPerson = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  int valuePtr = 1;
  kABPersonKindOrganization = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  kABPersonSocialProfileuint64_t Property = kABCPersonSocialProfileProperty;
  kABPersonContentExtensionsuint64_t Property = kABCPersonContentExtensionsProperty;
  kABPersonPhonemeDatauint64_t Property = kABCPersonPhonemeDataProperty;
  kABPersonAlternateBirthdayuint64_t Property = kABCPersonAlternateBirthdayProperty;
  kABPersonMapsDatauint64_t Property = kABCPersonMapsDataProperty;
  kABPersonLinkUUIDuint64_t Property = kABCPersonLinkUUIDProperty;
  kABPersonInternalUUIDuint64_t Property = kABCPersonInternalUUIDProperty;
  kABPersonInternalGUIDuint64_t Property = kABCPersonInternalUUIDProperty;
  kABChangesuint64_t Property = kABCChangesProperty;
  kABPersonPreferredLikenessSourceuint64_t Property = kABCPersonPreferredLikenessSourceProperty;
  kABPersonPreferredPersonaIdentifieruint64_t Property = kABCPersonPreferredPersonaIdentifierProperty;
  kABPersonPreferredChanneluint64_t Property = kABCPersonPreferredChannelProperty;
  kABPersonDowntimeWhitelistuint64_t Property = kABCPersonDowntimeWhitelistProperty;
  kABPersonImageTypeuint64_t Property = kABCPersonImageTypeProperty;
  kABPersonImageHashuint64_t Property = kABCPersonImageHashProperty;
  kABPersonMemojiMetadatauint64_t Property = kABCPersonMemojiMetadataProperty;
  kABPersonWallpaperuint64_t Property = kABCPersonWallpaperProperty;
  kABPersonWallpaperMetadatauint64_t Property = kABCPersonWallpaperMetadataProperty;
  kABPersonWatchWallpaperImageDatauint64_t Property = kABCPersonWatchWallpaperImageDataProperty;
  kABPersonWallpaperURIuint64_t Property = kABCPersonWallpaperURIProperty;
  kABPersonImageBackgroundColorsDatauint64_t Property = kABCPersonImageBackgroundColorsDataProperty;
  kABPersonDisplayFlagsuint64_t Property = kABCPersonDisplayFlagsProperty;
  kABPersonSensitiveContentConfigurationuint64_t Property = kABCPersonSensitiveContentConfigurationProperty;
  kABPersonImageSyncFailedTimeuint64_t Property = kABCPersonImageSyncFailedTimeProperty;
  kABPersonWallpaperSyncFailedTimeuint64_t Property = kABCPersonWallpaperSyncFailedTimeProperty;
  __personCompositeNameFormat = 0;
  uint64_t v4 = [MEMORY[0x1E4F28F38] _defaultDisplayNameOrder];
  if (v4 == 1)
  {
    int v5 = 0;
  }
  else
  {
    if (v4 != 2) {
      goto LABEL_8;
    }
    int v5 = 1;
  }
  __personCompositeNameFormat = v5;
LABEL_8:
  ABPersonRetrieveEditNameFormat();
  ABPersonRetrieveShortNameSettings();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)__PreferencesChanged, @"com.apple.AddressBook.PreferenceChanged", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"void ABPersonInitialize(void)", 1797, @">> ", 0, v7, v8, v9, v10);
  }
}

uint64_t ABPersonRetrieveShortNameSettings()
{
  unint64_t v0 = [MEMORY[0x1E4F28F38] _defaultShortNameFormat] - 1;
  if (v0 <= 3) {
    __personint ShortNameFormat = v0;
  }
  __personShortNameFormatEnabled = [MEMORY[0x1E4F28F38] _shortNameIsEnabled];
  uint64_t result = [MEMORY[0x1E4F28F38] _shouldPreferNicknames];
  __personShortNamePreferNicknames = result;
  return result;
}

void ABPersonRetrieveEditNameFormat()
{
  CFDictionaryRef v0 = _abCopyCardDisplayDictionary();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v0, @"personNameOrderingForEdit");
    if (Value)
    {
      int valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      __personEditNameFormat = valuePtr;
    }
    CFRelease(v1);
  }
}

CFArrayRef _abCopyCardDisplayDictionary()
{
  CFDictionaryRef v0 = (__CFBundle *)_ABBundle();
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFArrayRef v2 = CFBundleCopyBundleLocalizations(v0);
    if (v2)
    {
      CFArrayRef v3 = v2;
      CFArrayRef v4 = CFBundleCopyLocalizationsForPreferences(v2, 0);
      CFArrayRef v5 = v4;
      if (!v4)
      {
        CFURLRef v7 = v3;
LABEL_18:
        CFRelease(v7);
        return v5;
      }
      if (CFArrayGetCount(v4) >= 1 && (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, 0)) != 0) {
        CFURLRef v7 = CFBundleCopyResourceURLForLocalization(v1, @"ABLocalizableDefaults", @"plist", 0, ValueAtIndex);
      }
      else {
        CFURLRef v7 = 0;
      }
      CFRelease(v5);
      CFRelease(v3);
      if (v7)
      {
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v9 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7);
        if (v9)
        {
          uint64_t v10 = v9;
          if (CFReadStreamOpen(v9))
          {
            CFArrayRef v5 = (const __CFArray *)CFPropertyListCreateWithStream(v8, v10, 0, 0, 0, 0);
            CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v5, @"_LOCALIZABLE_");
            if (Value)
            {
              CFArrayRef v12 = Value;
              CFRetain(Value);
              CFRelease(v5);
              CFArrayRef v5 = v12;
            }
          }
          else
          {
            CFArrayRef v5 = 0;
          }
          CFRelease(v10);
        }
        else
        {
          CFArrayRef v5 = 0;
        }
        goto LABEL_18;
      }
    }
  }
  return 0;
}

uint64_t _ABBundle()
{
  uint64_t v0 = _ABBundle___ABBundle;
  if (!_ABBundle___ABBundle)
  {
    CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.AddressBookLegacy");
    if (BundleWithIdentifier)
    {
      uint64_t v0 = (uint64_t)BundleWithIdentifier;
      CFRetain(BundleWithIdentifier);
      _ABBundle___ABBundle = v0;
    }
    else
    {
      return _ABBundle___ABBundle;
    }
  }
  return v0;
}

void ABGroupInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    uint64_t v16 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABGroupInitialize(void)", 146, v9, 0, v10, v11, v12, (uint64_t)v16);
    CFRelease(v9);
  }
  kABGroupNameuint64_t Property = kABCNameProperty;
  kABGroupMembersuint64_t Property = kABCMembersProperty;
  kABGroupSubgroupsuint64_t Property = kABCSubgroupsProperty;
  kABGroupMembersAndSubgroupsuint64_t Property = kABCMembersAndSubgroupsProperty;
  kABGroupExternalIdentifieruint64_t Property = kABCGroupExternalIdentifierProperty;
  kABGroupStoreIDuint64_t Property = kABCGroupStoreIDProperty;
  kABGroupStoreReferenceuint64_t Property = kABCGroupSourceReferenceProperty;
  kABGroupExternalModificationTaguint64_t Property = kABCGroupExternalModificationTagProperty;
  kABGroupExternalRepresentationuint64_t Property = kABCGroupExternalRepresentationProperty;
  kABGroupExternalUUIDuint64_t Property = kABCGroupExternalUUIDProperty;
  kABGroupInternalUUIDuint64_t Property = kABCGroupInternalUUIDProperty;
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABGroupInitialize(void)", 158, @">> ", 0, v13, v14, v15, a9);
  }
}

void ABCSourceInitialize()
{
  kABCSourceNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceExternalIdentifieruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceTypeuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceConstraintsPathuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceExternalModificationTaguint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceExternalSyncTaguint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceAccountIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourcePolicyuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceEnableduint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceSyncDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceMeIdentifieruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceCapabilitiesuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceInternalUUIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceLastSyncDateuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceProviderIdentifieruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSourceProviderMetadatauint64_t Property = CPRecordIndexOfPropertyNamed();
  ABSourceInitialize();
}

void ABCPersonInitialize()
{
  kABCFirstNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCFirstNamePhoneticuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCFirstNamePronunciationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCMiddleNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCMiddleNamePhoneticuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCMiddleNamePronunciationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCLastNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCLastNamePhoneticuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCLastNamePronunciationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCAddressingGrammaruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCOrganizationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCOrganizationPhoneticuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCOrganizationPronunciationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCDepartmentuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCDateuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCInstantMessageuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCNoteuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCImageuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPhoneuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCEmailuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCAddressuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCKinduint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSounduint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCBirthdayuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCJobTitleuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCNicknameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPreviousFamilyNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPrefixuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSuffixuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCURLuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCRelatedNamesuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCFirstSortuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCLastSortuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCCreationDateuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCModificationDateuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCCompositeNameFallbackuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSyntheticPropertiesReset = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalIdentifieruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonStoreIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonStoreReferenceuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalModificationTaguint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalUUIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageURIuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonDisplayNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCFirstSortSectionuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCLastSortSectionuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCFirstSortLanguageIndexSortuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCLastSortLanguageIndexSortuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABPersonSearchuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABPersonNameOnlySearchuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonExternalRepresentationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABPersonLinkuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABPersonIsPreferredNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonSocialProfileuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonContentExtensionsuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonPhonemeDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonAlternateBirthdayuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonMapsDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonInternalUUIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCChangesuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonPreferredLikenessSourceuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonPreferredPersonaIdentifieruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonLinkUUIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonThumbnailDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageCropRectuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonFullscreenImageDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonSyncImageDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonIsPreferredImageuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonHasImageDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonPreferredChanneluint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonDowntimeWhitelistuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageTypeuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageHashuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonMemojiMetadatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperMetadatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonWatchWallpaperImageDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageBackgroundColorsDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperURIuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonDisplayFlagsuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonSensitiveContentConfigurationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonImageSyncFailedTimeuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCPersonWallpaperSyncFailedTimeuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABPersonInitialize();
}

uint64_t ABCImageStoreInitialize()
{
  ABCThumbnailImageRecordIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCThumbnailImageFormatuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCThumbnailImageDatauint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCThumbnailImageDerivedFromFormatuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageRecordIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageCropXuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageCropYuint64_t Property = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageCropWidthuint64_t Property = CPRecordIndexOfPropertyNamed();
  uint64_t result = CPRecordIndexOfPropertyNamed();
  ABCFullSizeImageDatauint64_t Property = result;
  return result;
}

void ABCGroupInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kABCNameuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCMembersuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCAddedMembersAndSubgroupsuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCRemovedMembersAndSubgroupsuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCFetchSortOrderuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCMembersAndSubgroupsuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCSubgroupsuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalIdentifieruint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCGroupStoreIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCGroupSourceReferenceuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalModificationTaguint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalRepresentationuint64_t Property = CPRecordIndexOfPropertyNamed();
  kABCGroupExternalUUIDuint64_t Property = CPRecordIndexOfPropertyNamed();
  uint64_t v9 = CPRecordIndexOfPropertyNamed();
  kABCGroupInternalUUIDuint64_t Property = v9;
  ABGroupInitialize(v9, v10, v11, v12, v13, v14, v15, v16, a9);
}

uint64_t ABCCreateLock()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1.__sig = 0;
  *(void *)v1.__opaque = 0;
  pthread_mutexattr_init(&v1);
  pthread_mutexattr_settype(&v1, 2);
  pthread_mutex_init(&__lock, &v1);
  pthread_mutexattr_destroy(&v1);
  pthread_mutexattr_init(&v1);
  pthread_mutexattr_settype(&v1, 2);
  pthread_mutex_init(&__darwinNotificationLock, &v1);
  return pthread_mutexattr_destroy(&v1);
}

__asl_object_s *___initIfNeeded_block_invoke()
{
  Boolean keyExistsAndHasValidFormat = 0;
  CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3B8];
  AppIntegerCFArrayRef Value = CFPreferencesGetAppIntegerValue(@"ABLogConsoleLevel", (CFStringRef)*MEMORY[0x1E4F1D3B8], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    int v2 = AppIntegerValue;
  }
  else {
    int v2 = 4;
  }
  __ABLogMaxConsoleLevel = v2;
  int v3 = CFPreferencesGetAppIntegerValue(@"ABLogFileLevel", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    int v4 = v3;
  }
  else {
    int v4 = -1;
  }
  __ABLogMaxFileLevel = v4;
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"ABLogAPIUsage", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v6 = AppBooleanValue == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = !v6;
  __ABLogAPIUsage = v7;
  int v8 = CFPreferencesGetAppBooleanValue(@"ABLogSqlite", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  char v10 = !v9;
  __ABLogSqliteTrace = v10;
  int v11 = CFPreferencesGetAppBooleanValue(@"ABLogContactsSearch", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = !v12;
  __ABLogContactsSearch = v13;
  int v14 = CFPreferencesGetAppBooleanValue(@"ABLogDataCollection", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  char v16 = !v15;
  __ABLogDataCollection = v16;
  int v17 = CFPreferencesGetAppBooleanValue(@"ABLogPersonDelete", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  char v19 = !v18;
  __ABLogPersonDelete = v19;
  uint64_t result = (__asl_object_s *)CFPreferencesGetAppBooleanValue(@"ABLogChangeHistory", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v21 = result == 0;
  }
  else {
    BOOL v21 = 1;
  }
  char v22 = !v21;
  __ABLogChangeHistory = v22;
  if (__ABLogMaxFileLevel != -1)
  {
    __ABLogAslQueue = (uint64_t)dispatch_queue_create((const char *)[@"com.apple.AddressBookLegacy" UTF8String], 0);
    uint64_t result = asl_open(0, (const char *)[@"com.apple.AddressBookLegacy" UTF8String], 0);
    __ABLogAslClient = (uint64_t)result;
    if (result) {
      return (__asl_object_s *)asl_set_filter(result, ~(-1 << (__ABLogMaxFileLevel + 1)));
    }
  }
  return result;
}

uint64_t ABAddressBookGetPreferredNamePeopleCount(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPreferredNamePeopleCount(ABAddressBookRef)", 1119, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return (int)ABCGetPersonCountInSourceShowingLinks(a1, 0, 1);
}

uint64_t ABCGetPersonCountInSourceShowingLinks(uint64_t a1, ABRecordRef record, int a3)
{
  uint64_t CountOfInstancesOfClassWhere = a1;
  if (!a1) {
    return CountOfInstancesOfClassWhere;
  }
  if (record)
  {
    uint64_t RecordID = ABRecordGetRecordID(record);
    if (RecordID != -1)
    {
      CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"StoreID = %i", RecordID);
LABEL_7:
      CFStringRef v7 = v6;
      goto LABEL_9;
    }
  }
  if (a3)
  {
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"IsPreferredName = 1");
    goto LABEL_7;
  }
  CFStringRef v7 = 0;
LABEL_9:
  uint64_t CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
  if (v7) {
    CFRelease(v7);
  }
  return CountOfInstancesOfClassWhere;
}

CFStringRef ABCImageStoreCreateWithAddressBookAndForceInProcessMigration(uint64_t a1)
{
  CFStringRef result = ABCImageStoreCopyPath(a1);
  if (result)
  {
    CFStringRef v2 = result;
    uint64_t v3 = ABCImageStoreCreateWithPathAndForceInProcessMigration();
    CFRelease(v2);
    return (CFStringRef)v3;
  }
  return result;
}

uint64_t ABCImageStoreCreateWithPathAndForceInProcessMigration()
{
  uint64_t v0 = CPRecordStoreCreateWithPath();
  if (v0)
  {
    CPRecordStoreSetSetupHandler();
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseSetVersion();
    CPSqliteDatabaseSetAutoVacuumLevel();
    CPSqliteDatabaseSetJournalModeWAL();
    CPSqliteDatabaseSetAccessRequestHandler();
    CPSqliteDatabaseSetDataProtectionLevel();
    CPSqliteDatabaseSetAutoRetryStatements();
    CPSqliteDatabaseSetShouldUseInhibitorForConnections();
    CPSqliteDatabaseSetConnectionInitializer();
    CPSqliteDatabaseSetDatabaseDeletedCallback();
    CPSqliteDatabaseSetShouldMigrateInProcess();
    CPSqliteDatabaseSetMigrationHandlers();
    CPSqliteDatabaseSetShouldYieldWhenRequested();
    CPSqliteDatabaseSetShouldRequestUnlock();
    CPRecordStoreRegisterClass();
    CPRecordStoreRegisterClass();
  }
  return v0;
}

CFStringRef ABCImageStoreCopyPath(uint64_t a1)
{
  if (a1) {
    CFStringRef v1 = (const __CFString *)ABCAddressBookCopyAddressBookDBDirectory(a1);
  }
  else {
    CFStringRef v1 = (const __CFString *)ABCAddressBookCopyDBDirectory();
  }
  CFStringRef v2 = v1;
  CFStringRef v3 = ABCImageStoreCopyDatabasePathForDatabaseDirectory(v1);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

CFStringRef ABCImageStoreCopyDatabasePathForDatabaseDirectory(CFStringRef theString)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (theString)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v2, 0, theString);
    uint64_t v4 = MutableCopy;
    if (MutableCopy) {
      CFStringAppend(MutableCopy, @"AddressBookImages.sqlitedb");
    }
    return v4;
  }
  else
  {
    return CFStringCreateWithCString(v2, ":memory:", 0x8000100u);
  }
}

CFTypeRef ABCAddressBookCopyAddressBookDBDirectory(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 72);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void _ABPhoneUtilitiesInitializeLostMode()
{
  _getLostMode();
  if (__kLostModeChangedNotification)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v1 = (const __CFString *)__kLostModeChangedNotification;
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)__LostModeChanged, v1, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

uint64_t _getLostMode()
{
  uint64_t v0 = (unsigned int (*)(void))_isDeviceLocked_AB_MKBGetDeviceLockState;
  if (_isDeviceLocked__MobileKeyBagFrameworkHandle) {
    BOOL v1 = _isDeviceLocked_AB_MKBGetDeviceLockState == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1
    || (+[ABDynamicLoader loadFrameworkAtPath:@"/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag" andStoreHandle:&_isDeviceLocked__MobileKeyBagFrameworkHandle bundle:0], uint64_t v0 = (unsigned int (*)(void))dlsym((void *)_isDeviceLocked__MobileKeyBagFrameworkHandle, "MKBGetDeviceLockState"), (_isDeviceLocked_AB_MKBGetDeviceLockState = v0) != 0))
  {
    if (v0(0) - 1 > 1)
    {
      uint64_t result = 0;
      goto LABEL_15;
    }
  }
  if (!__FindMyDeviceFramework)
  {
    CFAllocatorRef v2 = objc_opt_new();
    if (+[ABDynamicLoader loadFrameworkAtPath:@"System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice" andStoreHandle:&__FindMyDeviceFramework bundle:0])
    {
      __FMDFMIPManager = (uint64_t)NSClassFromString(&cfstr_Fmdfmipmanager.isa);
      __kLostModeChangedNotification = *(void *)dlsym((void *)__FindMyDeviceFramework, "kLostModeChangedNotification");
    }
  }
  uint64_t result = __FMDFMIPManager;
  if (__FMDFMIPManager)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend((id)__FMDFMIPManager, "sharedInstance"), "lostModeIsActive");
LABEL_15:
    _ignoreMatchingForLostMode = result;
  }
  return result;
}

uint64_t ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration(uint64_t a1, void *a2)
{
  if (a2 && ([a2 deviceHasManagementRestrictions] & 1) != 0)
  {
    uint64_t v4 = ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(a1, a2, 0);
    uint64_t v5 = SQLInClauseStringForParameterCount([v4 count]);
    [NSString stringWithFormat:@"SELECT COUNT() FROM ABPerson WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlinuint64_t k = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ?) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) ", v5, v5];
    ABRegulatoryLogReadContactsData(a1);
    CPRecordStoreGetDatabase();
    uint64_t v6 = CPSqliteDatabaseStatementForReading();
    if (!v6) {
      return -1;
    }
    uint64_t v7 = v6;
    if (!*(void *)(v6 + 8)) {
      return -1;
    }
    uint64_t v14 = 0;
    BOOL v15 = &v14;
    uint64_t v16 = 0x2020000000;
    int v17 = 1;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration_block_invoke;
    v13[3] = &unk_1E5988E70;
    v13[4] = &v14;
    v13[5] = v6;
    [v4 enumerateIndexesUsingBlock:v13];
    int v8 = *(sqlite3_stmt **)(v7 + 8);
    int v9 = *((_DWORD *)v15 + 6);
    *((_DWORD *)v15 + 6) = v9 + 1;
    sqlite3_bind_blob(v8, v9, v4, 8, 0);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration_block_invoke_2;
    v12[3] = &unk_1E5988E70;
    v12[4] = &v14;
    v12[5] = v7;
    [v4 enumerateIndexesUsingBlock:v12];
    if (sqlite3_step(*(sqlite3_stmt **)(v7 + 8)) == 100) {
      uint64_t v10 = sqlite3_column_int(*(sqlite3_stmt **)(v7 + 8), 0);
    }
    else {
      uint64_t v10 = -1;
    }
    CPSqliteStatementReset();
    _Block_object_dispose(&v14, 8);
    return v10;
  }
  else
  {
    return ABAddressBookGetPreferredNamePeopleCount(a1);
  }
}

void sub_19DCE9C60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t ABCopyArrayOfSectionListOffsets(uint64_t a1, int a2, __CFArray **a3, CFMutableArrayRef *a4, __CFArray **a5)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    int v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABCopyArrayOfSectionListOffsets(ABAddressBookRef, ABPersonSortOrdering, CFArrayRef *, CFArrayRef *, CFArrayRef *)", 953, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  if (!a1) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, @"SELECT LanguageIndex, Section, 0, number FROM ");
  int v17 = MutableCopy;
  CFStringRef v18 = a2 ? @"LastSortSectionCountTotal" : @"FirstSortSectionCountTotal";
  CFStringAppend(MutableCopy, v18);
  CFStringAppend(v17, @" WHERE number > 0 ORDER BY LanguageIndex ASC, Section ASC;");
  CPRecordStoreGetDatabase();
  uint64_t v19 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  CFRelease(v17);
  if (!v19 || !*(void *)(v19 + 8)) {
    return 0;
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3) {
    *a3 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  }
  *a4 = CFArrayCreateMutable(v20, 0, MEMORY[0x1E4F1D510]);
  *a5 = CFArrayCreateMutable(v20, 0, 0);
  while (sqlite3_step(*(sqlite3_stmt **)(v19 + 8)) == 100)
  {
    BOOL v21 = sqlite3_column_text(*(sqlite3_stmt **)(v19 + 8), 1);
    if (v21)
    {
      char v22 = v21;
      size_t v23 = strlen((const char *)v21);
      CFStringRef v24 = CFStringCreateWithBytes(v20, v22, v23, 0x8000100u, 0);
      CFArrayAppendValue(*a4, v24);
      CFRelease(v24);
      if (a3)
      {
        uint64_t v25 = *a3;
        int v26 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 0);
        CFArrayAppendValue(v25, (const void *)v26);
      }
      int v27 = *a5;
      int v28 = sqlite3_column_int(*(sqlite3_stmt **)(v19 + 8), 3);
      CFArrayAppendValue(v27, (const void *)v28);
    }
  }
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  return 1;
}

void ABAddressBookRegisterExternalChangeCallback(ABAddressBookRef addressBook, ABExternalChangeCallback callback, void *context)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)", 1923, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (addressBook)
  {
    if (!ABLinkedOnOrAfter() && *((unsigned char *)addressBook + 264) && ABTCCIsAccessGranted())
    {
      id v25 = copyCurrentThreadHandle();
      int v12 = ABAddressBookIsCallbackRegistered((uint64_t)addressBook, callback, context, v25) ^ 1;
    }
    else
    {
      int v12 = 0;
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)addressBook + 80));
    if (callback)
    {
      CFArrayRef v13 = (const __CFArray *)*((void *)addressBook + 18);
      if (!v13 || !CFArrayGetCount(v13))
      {
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterAddObserver(LocalCenter, addressBook, (CFNotificationCallback)ABCAddressBookDatabaseChanged, @"ABCDataBaseChangedExternallyNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      }
      if (!*((void *)addressBook + 18))
      {
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        *((void *)addressBook + 20) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
        *((void *)addressBook + 18) = CFArrayCreateMutable(v15, 0, 0);
        *((void *)addressBook + 19) = CFArrayCreateMutable(v15, 0, 0);
      }
      uint64_t v16 = (__CFArray *)*((void *)addressBook + 20);
      id v17 = copyCurrentThreadHandle();
      CFArrayAppendValue(v16, v17);
      CFArrayAppendValue(*((CFMutableArrayRef *)addressBook + 18), callback);
      if (context) {
        CFStringRef v18 = context;
      }
      else {
        CFStringRef v18 = (void *)*MEMORY[0x1E4F1D260];
      }
      CFArrayAppendValue(*((CFMutableArrayRef *)addressBook + 19), v18);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)addressBook + 80));
    if (v12)
    {
      ABDiagnosticsEnabled();
      _ABLog2(5, (uint64_t)"void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)", 1957, 0, @"The external change callback was registered after the access status changed, invoking it now.", v19, v20, v21, v26);
      _ABCPostDatabaseChangedNotification(0, 1);
    }
    if (ABLogAPIUsage())
    {
      _ABLog2(6, (uint64_t)"void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)", 1961, @">> ", 0, v22, v23, v24, v28);
    }
  }
}

id copyCurrentThreadHandle()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F29060] currentThread];
  return v0;
}

uint64_t ABLinkedOnOrAfter()
{
  if (__ABLinkedOnOrAfterSimulateLinkedBefore) {
    return 0;
  }
  else {
    return MEMORY[0x1F40D8DB8]();
  }
}

uint64_t ABCopyArrayOfSectionListOffsetsForManagedConfiguration(uint64_t a1, void *a2, int a3, __CFArray **a4, CFMutableArrayRef *a5, __CFArray **a6)
{
  if (a2 && ([a2 deviceHasManagementRestrictions] & 1) != 0)
  {
    int v12 = ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(a1, a2, 0);
    CFArrayRef v13 = SQLInClauseStringForParameterCount([v12 count]);
    uint64_t v14 = @"FirstSortLanguageIndex, FirstSortSection";
    CFAllocatorRef v15 = @"LastSortLanguageIndex ASC, LastSortSection ASC";
    if (a3) {
      uint64_t v14 = @"LastSortLanguageIndex, LastSortSection";
    }
    else {
      CFAllocatorRef v15 = @"FirstSortLanguageIndex ASC, FirstSortSection ASC";
    }
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT %@, COUNT() from ABPerson where rowid in (SELECT rowid FROM ABPerson WHERE personlinuint64_t k = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ?) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) GROUP BY %@ ORDER BY %@;",
      v14,
      v13,
      v13,
      v14,
      v15);
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    uint64_t result = CPSqliteConnectionStatementForSQL();
    if (result)
    {
      uint64_t v17 = result;
      if (*(void *)(result + 8))
      {
        uint64_t v31 = 0;
        uint64_t v32 = &v31;
        uint64_t v33 = 0x2020000000;
        int v34 = 1;
        v30[0] = MEMORY[0x1E4F143A8];
        v30[1] = 3221225472;
        v30[2] = __ABCopyArrayOfSectionListOffsetsForManagedConfiguration_block_invoke;
        v30[3] = &unk_1E5988E70;
        v30[4] = &v31;
        v30[5] = result;
        [v12 enumerateIndexesUsingBlock:v30];
        CFStringRef v18 = *(sqlite3_stmt **)(v17 + 8);
        int v19 = *((_DWORD *)v32 + 6);
        *((_DWORD *)v32 + 6) = v19 + 1;
        sqlite3_bind_blob(v18, v19, v12, 8, 0);
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 3221225472;
        v29[2] = __ABCopyArrayOfSectionListOffsetsForManagedConfiguration_block_invoke_2;
        v29[3] = &unk_1E5988E70;
        v29[4] = &v31;
        v29[5] = v17;
        [v12 enumerateIndexesUsingBlock:v29];
        CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (a4) {
          *a4 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
        }
        *a5 = CFArrayCreateMutable(v20, 0, MEMORY[0x1E4F1D510]);
        *a6 = CFArrayCreateMutable(v20, 0, 0);
        while (sqlite3_step(*(sqlite3_stmt **)(v17 + 8)) == 100)
        {
          uint64_t v21 = sqlite3_column_text(*(sqlite3_stmt **)(v17 + 8), 1);
          uint64_t v22 = v21;
          if (v21)
          {
            size_t v23 = strlen((const char *)v21);
            CFStringRef v24 = CFStringCreateWithBytes(v20, v22, v23, 0x8000100u, 0);
            CFArrayAppendValue(*a5, v24);
            CFRelease(v24);
            if (a4)
            {
              id v25 = *a4;
              int v26 = sqlite3_column_int(*(sqlite3_stmt **)(v17 + 8), 0);
              CFArrayAppendValue(v25, (const void *)v26);
            }
            int v27 = *a6;
            int v28 = sqlite3_column_int(*(sqlite3_stmt **)(v17 + 8), 2);
            CFArrayAppendValue(v27, (const void *)v28);
          }
        }
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
        _Block_object_dispose(&v31, 8);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    return ABCopyArrayOfSectionListOffsets(a1, a3, a4, a5, a6);
  }
  return result;
}

void sub_19DCEA460(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void ABAddressBookRegisterChangeCallback(uint64_t a1, const void *a2, const void *a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)", 2078, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1) {
    ABAddressBookRegisterChangeCallback_cold_1();
  }
  CFMutableStringRef Mutable = *(__CFArray **)(a1 + 168);
  if (!Mutable)
  {
    CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    *(void *)(a1 + 168) = Mutable;
  }
  if (!*(void *)(a1 + 176))
  {
    *(void *)(a1 + 176) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    CFMutableStringRef Mutable = *(__CFArray **)(a1 + 168);
  }
  CFArrayAppendValue(Mutable, a2);
  CFArrayRef v13 = *(__CFArray **)(a1 + 176);
  CFArrayAppendValue(v13, a3);
}

uint64_t ABLock()
{
  return pthread_mutex_lock(&__lock);
}

uint64_t ABUnlock()
{
  return pthread_mutex_unlock(&__lock);
}

uint64_t ABDarwinNotificationLock()
{
  return pthread_mutex_lock(&__darwinNotificationLock);
}

uint64_t ABDarwinNotificationUnlock()
{
  return pthread_mutex_unlock(&__darwinNotificationLock);
}

void ABPostDatabaseChanged()
{
}

uint64_t __ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys_block_invoke(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 32) + 280));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 272);
  if (v3)
  {
    (*(void (**)(void))(v3 + 16))();
    uint64_t v2 = *(void *)(a1 + 32);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 280));
}

uint64_t ABStartDatabaseDoctor(uint64_t a1)
{
  uint64_t result = ABDeviceIsBeforeFirstUnlockWithDataProtected();
  if ((result & 1) == 0)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName"), "isEqualToString:", @"ABDatabaseDoctor");
    if ((result & 1) == 0)
    {
      pthread_mutex_lock(&__lock);
      if (!__startABDatabaseDoctorCoalescingTimer)
      {
        uint64_t v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A3D8], "currentEnvironment"), "schedulerProvider");
        id v4 = objc_alloc(MEMORY[0x1E4F5A370]);
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        v5[2] = ___createStartABDatabaseDoctorCoalescingTimer_block_invoke;
        v5[3] = &__block_descriptor_40_e5_v8__0l;
        v5[4] = a1;
        __startABDatabaseDoctorCoalescingTimer = objc_msgSend(v4, "initWithDelay:options:block:schedulerProvider:downstreamScheduler:", 1, v5, v3, objc_msgSend(v3, "backgroundScheduler"), 1.0);
      }
      pthread_mutex_unlock(&__lock);
      return [(id)__startABDatabaseDoctorCoalescingTimer handleEvent];
    }
  }
  return result;
}

uint64_t ABCAddressBookMarkDirectoryForDeletion(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (__CFString *)[MEMORY[0x1E4F5A358] currentBootSessionUUID];
  if (!v2)
  {
    uint64_t v3 = ABOSLogGeneral();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ABCAddressBookMarkDirectoryForDeletion_cold_2(v3);
    }
    uint64_t v2 = @"ERROR-FETCHING-BOOT-UUID";
  }
  id v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 138543618;
    *(void *)&v14[1] = a1;
    __int16 v15 = 2114;
    uint64_t v16 = v2;
    _os_log_impl(&dword_19DCDB000, v4, OS_LOG_TYPE_DEFAULT, "Marking database path %{public}@ for future deletion with current boot uuid %{public}@.", (uint8_t *)v14, 0x16u);
  }
  uint64_t v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", 0), "_cn_setValue:forExtendedAttribute:path:error:", v2, @"AddressBookMarkedForDeletion", a1, v14);
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = ABOSLogGeneral();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ABCAddressBookMarkDirectoryForDeletion_cold_1((uint64_t)v14, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return v5;
}

BOOL ABCAddressBookIsDirectoryMarkedForDeletion(uint64_t a1, unsigned char *a2)
{
  id v12 = 0;
  uint64_t v13 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "_cn_getValue:forExtendendAttribute:path:error:", &v12, @"AddressBookMarkedForDeletion", a1, &v13) & 1) == 0)
  {
    uint64_t v5 = ABOSLogGeneral();
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ABCAddressBookIsDirectoryMarkedForDeletion_cold_1((uint64_t)&v13, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  if (!v12) {
    return 0;
  }
  if (a2)
  {
    uint64_t v3 = [MEMORY[0x1E4F5A358] currentBootSessionUUID];
    *a2 = [v12 isEqualToString:v3] ^ 1;
  }
  return 1;
}

uint64_t ABCAddRecord(_DWORD *a1, ABRecordRef record, CFTypeRef *a3)
{
  uint64_t result = 1;
  if (a1 && record)
  {
    if (ABRecordGetRecordID(record) != -1)
    {
      CPRecordStoreAddExistingRecord();
      return 1;
    }
    Class = (char **)CPRecordGetClass();
    if (Class == (char **)ABCPersonClass)
    {
      uint64_t result = ABCPersonPrepareToAddToAddressBook(record, a1, a3);
      if (!result) {
        return result;
      }
      ABCAddressBookFlushPhoneCache((uint64_t)a1);
    }
    else if (Class == ABCGroupClass[0])
    {
      uint64_t result = ABCGroupPrepareToAddToAddressBook((uint64_t)record, a1, (uint64_t)a3);
      if (!result) {
        return result;
      }
    }
    CPRecordStoreAddRecord();
    return 1;
  }
  return result;
}

uint64_t _ABCRemoveRecordArrayApplier(const void *a1, uint64_t a2)
{
  return ABCRemoveRecordAndOverridePolicy(a2, a1, 1, 0);
}

uint64_t ABCRemoveRecordAndOverridePolicy(uint64_t a1, const void *a2, char a3, const void **a4)
{
  uint64_t result = 0;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      if ((char **)CPRecordGetClass() != ABCSourceClass || (uint64_t result = CPRecordGetID(), result))
      {
        Class = (long long *)CPRecordGetClass();
        uint64_t v10 = (char **)Class;
        if ((a3 & 1) != 0
          || (Class != ABCPersonClass ? (BOOL v11 = Class == (long long *)ABCGroupClass[0]) : (BOOL v11 = 1),
              !v11
           || (uint64_t Policy = ABRecordGetPolicy(a2)) == 0
           || (uint64_t result = ABPolicyShouldRemoveRecord(Policy, a1, a2, a4), result)))
        {
          if (v10 != (char **)ABCPersonClass)
          {
            if (v10 == ABCSourceClass)
            {
              _prepareSourceForDeletion(a1, a2);
            }
            else if (v10 == ABAccountClass)
            {
              uint64_t v13 = (void *)ABAddressBookCopyArrayOfAllSourcesInAccount(a1, a2);
              long long v29 = 0u;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v32 = 0u;
              uint64_t v14 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
              if (v14)
              {
                uint64_t v15 = v14;
                uint64_t v16 = *(void *)v30;
                do
                {
                  uint64_t v17 = 0;
                  do
                  {
                    if (*(void *)v30 != v16) {
                      objc_enumerationMutation(v13);
                    }
                    _prepareSourceForDeletion(a1, *(ABRecordRef *)(*((void *)&v29 + 1) + 8 * v17));
                    CPRecordStoreRemoveRecord();
                    ++v17;
                  }
                  while (v15 != v17);
                  uint64_t v15 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
                }
                while (v15);
              }
            }
LABEL_37:
            CPRecordStoreRemoveRecord();
            return 1;
          }
          uint64_t RecordID = ABRecordGetRecordID(a2);
          *(_DWORD *)(a1 + 376) |= 0x22000u;
          ABCPersonClearAddressBookPhoneCacheForPerson(a1);
          ABCPersonRemoveImageData(a2);
          if (ABLogPersonDelete())
          {
            uint64_t v19 = [NSString stringWithFormat:@"will delete \"%@\" recordID=%i, creating simulated crash report", (id)ABRecordCopyCompositeName(a2), RecordID];
            ABLogSimulateCrashReport(v19);
            ABLogDisplayInternalAlert(v19);
          }
          if (RecordID == -1) {
            goto LABEL_37;
          }
          ABRecordRef v20 = ABPersonCopySource(a2);
          uint64_t v21 = kABSourceMeIdentifierProperty;
          if (ABRecordGetIntValue((uint64_t)v20, kABSourceMeIdentifierProperty) == RecordID)
          {
            ABRecordSetIntValue(v20, v21, -1, 0);
            ABCDBContextLogChangeForPerson(*(void *)(a1 + 16), 0, 0xAu);
          }
          else if (!ABPersonIsLinkedToMe((const void *)a1, a2))
          {
            goto LABEL_32;
          }
          *(_DWORD *)(a1 + 376) |= 0x40000u;
LABEL_32:
          CFRelease(v20);
          ABPersonUnlink(a2);
          CPRecordStoreGetDatabase();
          CPSqliteDatabaseConnectionForReading();
          SelectPrefixFromRecordDescriptor = (__CFString *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
          CFStringAppend(SelectPrefixFromRecordDescriptor, @" WHERE ROWID in (select group_id from ABGroupMembers where member_id = ?)");
          uint64_t v23 = CPSqliteConnectionStatementForSQL();
          sqlite3_bind_int(*(sqlite3_stmt **)(v23 + 8), 1, RecordID);
          CFArrayRef v24 = (const __CFArray *)CPRecordStoreProcessStatement();
          CPSqliteStatementReset();
          CFRelease(SelectPrefixFromRecordDescriptor);
          if (v24)
          {
            CFIndex Count = CFArrayGetCount(v24);
            if (Count >= 1)
            {
              CFIndex v26 = Count;
              for (CFIndex i = 0; i != v26; ++i)
              {
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v24, i);
                ABCGroupRemoveMember(ValueAtIndex, a2);
              }
            }
            CFRelease(v24);
          }
          goto LABEL_37;
        }
      }
    }
  }
  return result;
}

uint64_t ABAddressBookDeleteAllRecordsWithStore(void *a1, uint64_t a2)
{
  return 1;
}

void _ABAddressBookDeleteAllRecordsWithStore(void *a1, uint64_t a2, char a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool _ABAddressBookDeleteAllRecordsWithStore(ABAddressBookRef, ABRecordRef, BOOL)", 568, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (a1 && a2 && ((a3 & 1) != 0 || CPRecordGetID()) && (char **)CPRecordGetClass() == ABCSourceClass)
  {
    CFArrayRef v12 = ABCCopyArrayOfAllPeopleInSource((uint64_t)a1, a2);
    if (v12)
    {
      CFArrayRef v13 = v12;
      v17.length = CFArrayGetCount(v12);
      v17.location = 0;
      CFArrayApplyFunction(v13, v17, (CFArrayApplierFunction)_ABCRemoveRecordArrayApplier, a1);
      CFRelease(v13);
    }
    CFArrayRef v14 = (const __CFArray *)ABCCopyArrayOfAllGroupsInSource((uint64_t)a1, a2);
    if (v14)
    {
      CFArrayRef v15 = v14;
      v18.length = CFArrayGetCount(v14);
      v18.location = 0;
      CFArrayApplyFunction(v15, v18, (CFArrayApplierFunction)_ABCRemoveRecordArrayApplier, a1);
      CFRelease(v15);
    }
  }
}

uint64_t ABAddressBookDeleteAllRecordsInLocalStore(void *a1)
{
  uint64_t v2 = ABAddressBookCopyLocalSource((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = v2;
    _ABAddressBookDeleteAllRecordsWithStore(a1, (uint64_t)v2, 1);
    CFRelease(v3);
  }
  return 1;
}

uint64_t ABCRemoveRecord(uint64_t a1, const void *a2, const void **a3)
{
  return ABCRemoveRecordAndOverridePolicy(a1, a2, 0, a3);
}

void ABCProcessAddedRecords(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16))
  {
    CFArrayRef v2 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType()) {
      BOOL v3 = v2 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      if (!v2) {
        return;
      }
    }
    else
    {
      id v4 = *(__CFArray **)(a1 + 256);
      if (v4)
      {
        v8.length = CFArrayGetCount(v2);
        v8.location = 0;
        CFArrayAppendArray(v4, v2, v8);
      }
      else
      {
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex Count = CFArrayGetCount(v2);
        *(void *)(a1 + 256) = CFArrayCreateMutableCopy(v5, Count, v2);
      }
    }
    CFRelease(v2);
  }
}

uint64_t ABCProcessAddedImages(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    ABCProcessAddedRecords(result);
    CPRecordStoreProcessDeletedRecordsWithPolicyAndTransactionType();
    CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType();
    return ABCInvalidateCachedImages(v1);
  }
  return result;
}

uint64_t ABCInvalidateCachedImages(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 16);
    if (result)
    {
      CPRecordStoreInvalidateCachedInstancesOfClass();
      uint64_t result = *(void *)(v1 + 24);
      if (result)
      {
        CPRecordStoreInvalidateCachedInstancesOfClass();
        return CPRecordStoreInvalidateCachedInstancesOfClass();
      }
    }
  }
  return result;
}

uint64_t _ABCPersonInvalidateImageCallback()
{
  return 0;
}

void _ABCPostDatabaseChangedNotification(CFDictionaryRef theDict, int a2)
{
  int valuePtr = a2;
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  BOOL v3 = MutableCopy;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v3, @"isLocal", v4);
  CFRelease(v4);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"ABCDataBaseChangedExternallyNotification", 0, v3, 1u);
  CFRelease(v3);
}

BOOL _hasAnyBackgroundColorRelatedImageUpdate(const void *a1, ABRecordID a2)
{
  PersonWithuint64_t RecordID = ABAddressBookGetPersonWithRecordID(a1, a2);
  CFArrayRef Value = (const __CFArray *)ABCRecordGetValue(PersonWithRecordID, kABCImageProperty);
  if (!Value) {
    return 1;
  }
  CFArrayRef v4 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFArrayGetValueAtIndex(v4, 0);
  if ((char **)CPRecordGetClass() == ABCFullSizeImageClass) {
    return 1;
  }
  CFIndex v7 = 1;
  do
  {
    CFIndex v8 = v7;
    if (v6 == v7) {
      break;
    }
    CFArrayGetValueAtIndex(v4, v7);
    Class = (char **)CPRecordGetClass();
    CFIndex v7 = v8 + 1;
  }
  while (Class != ABCFullSizeImageClass);
  return v8 < v6;
}

void _clearBackgroundColorsForUpdatedPeople(void *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ABChangeCallbackInfoUpdatedPeople");
    if (Value)
    {
      CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)ABCClearBackgroundColorsForUpdatedPerson_Apply, a1);
    }
  }
}

void ABCClearBackgroundColorsForUpdatedPerson_Apply(ABRecordID a1, CFArrayRef theArray, const void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t Count = CFArrayGetCount(theArray);
  CFIndex v7 = ABOSLogImageMetadata();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 67109120;
    LODWORD(v18) = a1;
    _os_log_impl(&dword_19DCDB000, v7, OS_LOG_TYPE_DEFAULT, "ABCClearBackgroundColorsForUpdatedPerson_Apply to recordID = %d", (uint8_t *)&v17, 8u);
  }
  v20.location = 0;
  v20.length = Count;
  if (!CFArrayContainsValue(theArray, v20, (const void *)kABCPersonImageBackgroundColorsDataProperty))
  {
    if (Count >= 1)
    {
      CFIndex v8 = 0;
      while (1)
      {
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
        BOOL v10 = kABCPersonImageTypeProperty == ValueAtIndex || kABCPersonWallpaperProperty == ValueAtIndex;
        BOOL v11 = v10 || kABCPersonWallpaperMetadataProperty == ValueAtIndex;
        if (v11 || kABCImageProperty == ValueAtIndex && _hasAnyBackgroundColorRelatedImageUpdate(a3, a1)) {
          break;
        }
        if (Count == ++v8) {
          goto LABEL_19;
        }
      }
      PersonWithuint64_t RecordID = ABAddressBookGetPersonWithRecordID(a3, a1);
      ABRecordSetValue(PersonWithRecordID, kABCPersonImageBackgroundColorsDataProperty, 0, 0);
      CFTypeRef v13 = ABRecordCopyValue(PersonWithRecordID, kABPersonInternalUUIDProperty);
      CFTypeRef v14 = (id)CFMakeCollectable(v13);
      CFArrayRef v15 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138543362;
        CFTypeRef v18 = v14;
        _os_log_impl(&dword_19DCDB000, v15, OS_LOG_TYPE_DEFAULT, "Cleared image background colors for contact identifier %{public}@", (uint8_t *)&v17, 0xCu);
      }
    }
LABEL_19:
    uint64_t v16 = ABOSLogImageMetadata();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 67109120;
      LODWORD(v18) = a1;
      _os_log_impl(&dword_19DCDB000, v16, OS_LOG_TYPE_DEFAULT, "ABCClearBackgroundColorsForUpdatedPerson_Apply scanned recordID = %d", (uint8_t *)&v17, 8u);
    }
  }
}

BOOL _shouldClearbackgroundColors(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl()) {
    BOOL v2 = (*(unsigned char *)(a1 + 378) & 0x40) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  BOOL v3 = ABOSLogImageMetadata();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl(&dword_19DCDB000, v3, OS_LOG_TYPE_DEFAULT, "_shouldClearbackgroundColors = %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

void _updateModificationDateForUpdatedAndAddedPeople(void *a1, CFDictionaryRef theDict, CFArrayRef theArray)
{
  if (theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ABChangeCallbackInfoUpdatedPeople");
    if (Value)
    {
      CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)_ABCUpdateModificationDateForUpdatedPersonApplier, a1);
    }
    else
    {
      uint64_t v6 = ABOSLogGeneral();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)CFIndex v7 = 0;
        _os_log_impl(&dword_19DCDB000, v6, OS_LOG_TYPE_INFO, "ABCAddressBook _updateModificationDateForUpdatedAndAddedPeople() found no updated people", v7, 2u);
      }
    }
  }
  if (theArray)
  {
    v8.length = CFArrayGetCount(theArray);
    v8.location = 0;
    CFArrayApplyFunction(theArray, v8, (CFArrayApplierFunction)_ABCUpdateModificationDateForRecordApplier, a1);
  }
}

void _ABCUpdateModificationDateForUpdatedPersonApplier(ABRecordID recordID, const __CFArray *a2, ABAddressBookRef addressBook)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  PersonWithuint64_t RecordID = ABAddressBookGetPersonWithRecordID(addressBook, recordID);
  CFIndex Count = CFArrayGetCount(a2);
  uint64_t SetOfModificationDateTouchingPropertyIDs = ABPersonGetSetOfModificationDateTouchingPropertyIDs();
  if (Count < 1)
  {
    BOOL v9 = 0;
  }
  else
  {
    CFSetRef v7 = (const __CFSet *)SetOfModificationDateTouchingPropertyIDs;
    signed int ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
    if (CFSetContainsValue(v7, (const void *)ValueAtIndex))
    {
      BOOL v9 = 1;
    }
    else
    {
      CFIndex v10 = 1;
      do
      {
        CFIndex v11 = v10;
        if (Count == v10) {
          break;
        }
        signed int v12 = CFArrayGetValueAtIndex(a2, v10);
        int v13 = CFSetContainsValue(v7, (const void *)v12);
        CFIndex v10 = v11 + 1;
      }
      while (!v13);
      BOOL v9 = v11 < Count;
    }
  }
  CFTypeRef v14 = ABRecordCopyValue(PersonWithRecordID, kABPersonInternalUUIDProperty);
  CFArrayRef v15 = ABOSLogGeneral();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = @"will not";
    if (v9) {
      uint64_t v16 = @"will";
    }
    int v17 = 138543618;
    CFTypeRef v18 = v16;
    __int16 v19 = 2114;
    CFTypeRef v20 = v14;
    _os_log_impl(&dword_19DCDB000, v15, OS_LOG_TYPE_INFO, "ABCAddressBook _ABCUpdateModificationDateForUpdatedPersonApplier() (%{public}@) touch the modification date for contact identifier (%{public}@)", (uint8_t *)&v17, 0x16u);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v9) {
    _ABCUpdateModificationDateForRecordApplier(PersonWithRecordID);
  }
}

uint64_t _ABCUpdateModificationDateForRecordApplier(const void *a1)
{
  uint64_t result = ABRecordGetRecordType(a1);
  if (!result)
  {
    return CPRecordSetProperty();
  }
  return result;
}

uint64_t ABCAddressBookSaveWithConflictPolicy(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  CFErrorRef err = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(a1 + 376);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v6 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
  uint64_t v110 = v3;
  int v106 = v4;
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      v102 = Mutable;
      value = 0;
      CFIndex v10 = 0;
      CFMutableDictionaryRef v11 = 0;
      signed int v12 = (const void *)kABGroupMembersProperty;
      CFIndex v107 = Count;
      CFArrayRef key = v7;
      do
      {
        signed int ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
        uint64_t v14 = CPRecordCopyChangedProperties();
        if (v14)
        {
          CFArrayRef v15 = (const __CFArray *)v14;
          CFArrayRef v16 = *(const __CFArray **)(v3 + 256);
          if (!v16
            || (v124.length = CFArrayGetCount(*(CFArrayRef *)(v3 + 256)),
                v124.location = 0,
                !CFArrayContainsValue(v16, v124, ValueAtIndex)))
          {
            if (ABRecordGetRecordType(ValueAtIndex))
            {
              if (!v11) {
                CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(allocator, 0, 0, MEMORY[0x1E4F1D540]);
              }
              theDict = v11;
              CFIndex v17 = CFArrayGetCount(v15);
              CFTypeRef v18 = CFArrayCreateMutable(allocator, 0, 0);
              if (v17 >= 1)
              {
                uint64_t v19 = 0;
                CFIndex v20 = 0;
                while (1)
                {
                  signed int v21 = CFArrayGetValueAtIndex(v15, v20);
                  BOOL v22 = kABCAddedMembersAndSubgroupsProperty == v21 || kABCRemovedMembersAndSubgroupsProperty == v21;
                  if (!v22 && v12 != v21) {
                    break;
                  }
                  uint64_t v25 = 1;
                  CFArrayRef v24 = v12;
                  if ((v19 & 1) == 0) {
                    goto LABEL_22;
                  }
LABEL_23:
                  ++v20;
                  uint64_t v19 = v25;
                  if (v17 == v20) {
                    goto LABEL_24;
                  }
                }
                CFArrayRef v24 = (const void *)v21;
                uint64_t v25 = v19;
LABEL_22:
                CFArrayAppendValue(v18, v24);
                goto LABEL_23;
              }
LABEL_24:
              ABRecordID RecordID = ABRecordGetRecordID(ValueAtIndex);
              CFMutableDictionaryRef v11 = theDict;
              CFDictionarySetValue(theDict, (const void *)RecordID, v18);
              CFRelease(v18);
              uint64_t v3 = v110;
              CFIndex v9 = v107;
              CFArrayRef v7 = key;
            }
            else
            {
              CFMutableDictionaryRef v27 = value;
              if (!value) {
                CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(allocator, 0, 0, MEMORY[0x1E4F1D540]);
              }
              int v28 = ValueAtIndex;
              long long v29 = v27;
              ABRecordID v30 = ABRecordGetRecordID(v28);
              value = v29;
              CFDictionarySetValue(v29, (const void *)v30, v15);
            }
          }
          CFRelease(v15);
        }
        ++v10;
      }
      while (v10 != v9);
      CFDictionaryRef Mutable = v102;
      if (value)
      {
        CFDictionarySetValue(v102, @"ABChangeCallbackInfoUpdatedPeople", value);
        CFRelease(value);
      }
      int v4 = v106;
      if (v11)
      {
        CFDictionarySetValue(v102, @"ABChangeCallbackInfoUpdatedGroups", v11);
        CFRelease(v11);
      }
    }
    CFRelease(v7);
  }
  if (_shouldClearbackgroundColors(v3)) {
    _clearBackgroundColorsForUpdatedPeople((void *)v3, Mutable);
  }
  CFArrayRef v31 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
  CFArrayRef v32 = v31;
  if (v31) {
    uint64_t v33 = CFArrayGetCount(v31);
  }
  else {
    uint64_t v33 = 0;
  }
  CFArrayRef v34 = *(const __CFArray **)(v3 + 256);
  if (v34) {
    v33 += CFArrayGetCount(v34);
  }
  if (v33 < 1)
  {
    uint64_t v35 = 0;
    if (v32) {
LABEL_48:
    }
      CFRelease(v32);
  }
  else
  {
    uint64_t v35 = CFArrayCreateMutable(allocator, v33, MEMORY[0x1E4F1D510]);
    if (v32)
    {
      v125.length = CFArrayGetCount(v32);
      v125.location = 0;
      CFArrayAppendArray(v35, v32, v125);
    }
    CFArrayRef v36 = *(const __CFArray **)(v3 + 256);
    if (v36)
    {
      v126.length = CFArrayGetCount(*(CFArrayRef *)(v3 + 256));
      v126.location = 0;
      CFArrayAppendArray(v35, v36, v126);
    }
    if (v32) {
      goto LABEL_48;
    }
  }
  if (v35) {
    CFIndex v37 = CFArrayGetCount(v35);
  }
  else {
    CFIndex v37 = 0;
  }
  CFArrayRef v38 = (const __CFArray *)CPRecordStoreCopyDeletedRecordIDsOfClass();
  if (v38)
  {
    CFArrayRef v39 = v38;
    if ((v4 & 0x800000) == 0) {
      CFDictionarySetValue(Mutable, @"ABChangeCallbackInfoDeletedPeople", v38);
    }
    ABRegulatoryLogDeleteContactsData(v3);
    CFIndex v40 = CFArrayGetCount(v39);
    CFRelease(v39);
  }
  else
  {
    CFIndex v40 = 0;
  }
  int v41 = (const void *)CPRecordStoreCopyDeletedRecordIDsOfClass();
  if (v41)
  {
    uint64_t v42 = v41;
    if ((v4 & 0x800000) == 0) {
      CFDictionarySetValue(Mutable, @"ABChangeCallbackInfoDeletedGroups", v41);
    }
    ABRegulatoryLogDeleteContactsData(v3);
    CFRelease(v42);
  }
  int v43 = *(_DWORD *)(v3 + 376);
  CFStringRef v44 = ABAddressBookCopySaveTransactionIdentifier(v3);
  if ((v4 & 0x800000) == 0)
  {
    CFArrayRef v45 = *(const __CFArray **)(v3 + 144);
    if (v45)
    {
      if (CFArrayGetCount(v45) >= 1)
      {
        int v46 = *(_DWORD *)(v3 + 376);
        if ((v46 & 0x80000) == 0) {
          *(_DWORD *)(v3 + 376) = v46 & 0xFFFFFC03 | (4 * ((v46 + 4) >> 2));
        }
      }
    }
    pthread_mutex_lock(&__darwinNotificationLock);
    if ((*(unsigned char *)(v3 + 378) & 8) == 0) {
      ++_darwinNotificationCancellationCount;
    }
    pthread_mutex_unlock(&__darwinNotificationLock);
  }
  if (!*(void *)(v3 + 16))
  {
    uint64_t v49 = 0;
LABEL_139:
    if ((v4 & 0x800000) == 0)
    {
      CFArrayRef v89 = *(const __CFArray **)(v3 + 144);
      if (v89)
      {
        if (CFArrayGetCount(v89) >= 1)
        {
          int v90 = *(_DWORD *)(v3 + 376);
          if ((v90 & 0x80000) == 0) {
            *(_DWORD *)(v3 + 376) = v90 & 0xFFFFFC03 | (4 * ((v90 + 1020) >> 2));
          }
        }
      }
      pthread_mutex_lock(&__darwinNotificationLock);
      if ((*(unsigned char *)(v3 + 378) & 8) == 0) {
        --_darwinNotificationCancellationCount;
      }
      pthread_mutex_unlock(&__darwinNotificationLock);
    }
    goto LABEL_148;
  }
  int theDicta = v43;
  uint64_t v47 = (void *)[MEMORY[0x1E4F5A428] runningboardInhibitorWithExplanation:@"com.apple.AddressBook.ABCAddressBookSaveWithConflictPolicy"];
  [v47 start];
  double v48 = *(double *)(v3 + 352);
  if (v48 == 0.0) {
    *(CFAbsoluteTime *)(v3 + 352) = CFAbsoluteTimeGetCurrent();
  }
  _updateModificationDateForUpdatedAndAddedPeople((void *)v3, Mutable, v35);
  CPRecordStoreLogChanges();
  uint64_t v49 = CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  int SequenceNumber = ABAddressBookGetSequenceNumber(v3);
  v51 = ABOSLogGeneral();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v52 = *(void *)(v110 + 344);
    *(_DWORD *)buf = 67109890;
    int v116 = SequenceNumber + 1;
    __int16 v117 = 2048;
    CFIndex v118 = v40;
    __int16 v119 = 2048;
    CFIndex v120 = v37;
    __int16 v121 = 2114;
    uint64_t v122 = v52;
    _os_log_impl(&dword_19DCDB000, v51, OS_LOG_TYPE_DEFAULT, "AddressBook preparing save, sequence number = %d, deleted contact count = %ld, added contact count = %ld, change history id = %{public}@", buf, 0x26u);
  }
  if (err) {
    int v53 = 0;
  }
  else {
    int v53 = v49;
  }
  uint64_t v3 = v110;
  if (v53 == 1)
  {
    if ((*(unsigned char *)(v110 + 378) & 0x10) != 0)
    {
      if (!CPRecordStoreGetCountOfInstancesOfClassWhere())
      {
        long long v54 = ABAddressBookCopyLocalSource(v110);
        if (v54)
        {
          long long v55 = v54;
          ABDiagnosticsEnabled();
          _ABLog2(4, (uint64_t)"_Bool ABCAddressBookSaveWithConflictPolicy(ABCAddressBookRef, ABConflictPolicy, CFErrorRef *)", 1184, 0, @"Enabling the local source because no sources were enabled", v56, v57, v58, (uint64_t)v102);
          ABRecordSetIntValue(v55, kABSourceEnabledProperty, 1, 0);
          CFRelease(v55);
        }
      }
      *(_DWORD *)(v110 + 376) &= ~0x100000u;
    }
    uint64_t v49 = CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType();
    if (*(void *)(v110 + 24))
    {
      int v59 = err ? 0 : v49;
      if (v59 == 1)
      {
        uint64_t v49 = 1;
        if ((CPRecordStoreSaveWithCallbackAndTransactionType() & 1) == 0)
        {
          long long v60 = ABOSLogGeneral();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
            ABCAddressBookSaveWithConflictPolicy_cold_1((uint64_t)&err, v60, v61, v62, v63, v64, v65, v66);
          }
          uint64_t v49 = 0;
        }
      }
    }
    if (v37 >= 1)
    {
      int v67 = err ? 0 : v49;
      if (v67 == 1)
      {
        v103 = Mutable;
        CFIndex v68 = CFArrayGetCount(v35);
        if (v68 >= 1)
        {
          CFIndex v76 = v68;
          CFIndex v77 = 0;
          v78 = 0;
          v79 = 0;
          do
          {
            pthread_mutexattr_t v80 = CFArrayGetValueAtIndex(v35, v77);
            if (ABRecordGetRecordType(v80))
            {
              if (v78)
              {
                v81 = v78;
              }
              else
              {
                v81 = CFArrayCreateMutable(allocator, 0, 0);
                v78 = v81;
              }
            }
            else if (v79)
            {
              v81 = v79;
            }
            else
            {
              v81 = CFArrayCreateMutable(allocator, 0, 0);
              v79 = v81;
            }
            ABRecordID v82 = ABRecordGetRecordID(v80);
            CFArrayAppendValue(v81, (const void *)v82);
            ++v77;
          }
          while (v76 != v77);
          if (v79)
          {
            CFDictionarySetValue(v103, @"ABChangeCallbackInfoInsertedPeople", v79);
            CFRelease(v79);
          }
          uint64_t v3 = v110;
          if (v78)
          {
            CFDictionarySetValue(v103, @"ABChangeCallbackInfoInsertedGroups", v78);
            CFRelease(v78);
          }
        }
        if ((v106 & 0x800000) == 0
          && +[ABPersonLinker isAutoLinkingEnabled])
        {
          +[ABPersonLinker startAutoLinkingNewPeopleInAddressBook:v3 inProcess:0];
        }
        ABChangeHistoryUpdatePeakPersonCount((const void *)v3, v69, v70, v71, v72, v73, v74, v75, (uint64_t)v103);
        uint64_t v49 = 1;
        CFDictionaryRef Mutable = v104;
      }
    }
  }
  CPRecordStoreLogChanges();
  [v47 stop];
  int v4 = v106;
  if (!v49 || err) {
    goto LABEL_139;
  }
  uint64_t v83 = *(void *)(v3 + 72);
  v84 = *(const void **)(v3 + 256);
  if (v84)
  {
    CFRelease(v84);
    *(void *)(v3 + 256) = 0;
  }
  if (v48 == 0.0) {
    *(void *)(v3 + 352) = 0;
  }
  ABRegulatoryLogModifyContactsData(v3);
  if ((v106 & 0x800000) != 0) {
    goto LABEL_147;
  }
  if (v83 && (*(unsigned char *)(v3 + 378) & 8) == 0)
  {
    ABPostDistributedNotification(@"ABDatabaseSavedDistributedNotification");
    pthread_mutex_lock(&__lock);
    if (!__saveNotificationCoalescingTimer) {
      __saveNotificationCoalescingTimer = _createDefaultCoalescingTimerForDarwinNotification(@"__ABDataBaseChangedByOtherProcessNotification");
    }
    pthread_mutex_unlock(&__lock);
    [(id)__saveNotificationCoalescingTimer handleEvent];
    if ((theDicta & 0x40000) != 0)
    {
      ABPostDistributedNotification(@"ABAddressBookMeCardChangeDistributedNotification");
      pthread_mutex_lock(&__lock);
      if (!__meCardChangedNotificationCoalescingTimer) {
        __meCardChangedNotificationCoalescingTimer = _createDefaultCoalescingTimerForDarwinNotification(@"com.apple.AddressBook.MeCardChanged");
      }
      pthread_mutex_unlock(&__lock);
      [(id)__meCardChangedNotificationCoalescingTimer handleEvent];
    }
  }
  if ((*(unsigned char *)(v3 + 378) & 8) == 0) {
    _ABCPostDatabaseChangedNotification(0, 1);
  }
  CFArrayRef v85 = *(const __CFArray **)(v3 + 168);
  if (!v85 || (*(unsigned char *)(v3 + 378) & 8) != 0)
  {
LABEL_147:
    uint64_t v49 = 1;
  }
  else
  {
    CFIndex v86 = CFArrayGetCount(v85);
    if (Mutable)
    {
      CFDictionaryRef v87 = Mutable;
      CFDictionaryRef Copy = CFDictionaryCreateCopy(allocator, Mutable);
    }
    else
    {
      CFDictionaryRef v87 = 0;
      CFDictionaryRef Copy = 0;
    }
    if (v86 >= 1)
    {
      for (CFIndex i = 0; i != v86; ++i)
      {
        v100 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v110 + 176), i);
        v101 = (void (*)(uint64_t, CFDictionaryRef, const void *))CFArrayGetValueAtIndex(*(CFArrayRef *)(v110 + 168), i);
        v101(v110, Copy, v100);
      }
    }
    if (Copy) {
      CFRelease(Copy);
    }
    uint64_t v49 = 1;
    uint64_t v3 = v110;
    CFDictionaryRef Mutable = v87;
  }
LABEL_148:
  CFErrorRef v91 = err;
  if (err)
  {
    if (a3)
    {
      CFStringRef Domain = CFErrorGetDomain(err);
      CFComparisonResult v93 = CFStringCompare(Domain, (CFStringRef)*MEMORY[0x1E4F4BE98], 0);
      v94 = kABSQLiteErrorDomain;
      if (v93) {
        v94 = kABErrorDomain;
      }
      CFStringRef v95 = *v94;
      CFIndex Code = CFErrorGetCode(err);
      *a3 = CFErrorCreate(0, v95, Code, 0);
      CFErrorRef v91 = err;
    }
    CFRelease(v91);
  }
  v97 = *(const void **)(v3 + 360);
  if (v97)
  {
    CFRelease(v97);
    *(void *)(v3 + 360) = 0;
  }
  *(_DWORD *)(v3 + 376) &= ~0x800000u;
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v44) {
    CFRelease(v44);
  }
  return v49;
}

void ABPostDistributedNotification(uint64_t a1)
{
  BOOL v2 = (void *)MEMORY[0x19F3B4540]();
  uint64_t v3 = (void *)[MEMORY[0x1E4F28C40] defaultCenter];
  if (ABGetProcessDistributedNotificationIdentifier_onceToken != -1) {
    dispatch_once(&ABGetProcessDistributedNotificationIdentifier_onceToken, &__block_literal_global);
  }
  [v3 postNotificationName:a1 object:ABGetProcessDistributedNotificationIdentifier_processNotificationIdentifier userInfo:0];
}

uint64_t ABCSave(uint64_t a1)
{
  return ABCAddressBookSaveWithConflictPolicy(a1, 0, 0);
}

uint64_t ABCAddressBookInvalidateAddressBookFlags(uint64_t result)
{
  *(_DWORD *)(result + 376) &= 0xFED81FFF;
  return result;
}

__CFString *FamilyDirectoryURL()
{
  uint64_t result = _createMutableDBDirectory();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = [(__CFString *)result stringByAppendingPathComponent:@"Family"];
    CFRelease(v1);
    uint64_t v3 = (void *)MEMORY[0x1E4F1CB10];
    return (__CFString *)[v3 fileURLWithPath:v2 isDirectory:1];
  }
  return result;
}

uint64_t FamilyDirectoryContents()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = FamilyDirectoryURL();
  if (v0
    && (uint64_t v1 = v0,
        uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A3D8], "currentEnvironment"), "fileManager"),
        v5[0] = *MEMORY[0x1E4F1C628],
        uint64_t v3 = objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:", v1, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v5, 1), 5), objc_msgSend(v3, "isSuccess")))
  {
    return [v3 value];
  }
  else
  {
    return MEMORY[0x1E4F1CBF0];
  }
}

CFTypeRef ABCAddressBookCopyDelegateDBDirectories()
{
  CFTypeRef result = (CFTypeRef)objc_msgSend((id)objc_msgSend((id)FamilyDirectoryContents(), "_cn_filter:", objc_msgSend(MEMORY[0x1E4F5A548], "isDirectory")), "valueForKey:", @"path");
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

__CFString *ABCAddressBookCopyDBPath()
{
  MutableDBDirectory = _createMutableDBDirectory();
  CFStringAppend(MutableDBDirectory, @"AddressBook.sqlitedb");
  return MutableDBDirectory;
}

CFStringRef ABCCopyLocalizedPropertyOrLabel(const __CFString *a1)
{
  uint64_t v2 = (__CFBundle *)_ABBundle();
  return CFBundleCopyLocalizedString(v2, a1, a1, @"Localized");
}

CFMutableArrayRef ABCCopyAllLabelsForProperty(uint64_t a1, uint64_t a2)
{
  if (a1 && (uint64_t v2 = *(void *)(a1 + 16)) != 0) {
    return ABCDBContextCopyAllLabelsForProperty(v2, a2);
  }
  else {
    return 0;
  }
}

uint64_t ABCDeleteLabel(uint64_t result, const __CFString *a2)
{
  if (result)
  {
    CFTypeRef result = *(void *)(result + 16);
    if (result) {
      return ABCDBContextDeleteLabel(result, a2);
    }
  }
  return result;
}

uint64_t ABCAddressBookBeginExclusiveRead(uint64_t result)
{
  if (result)
  {
    CFTypeRef result = *(void *)(result + 16);
    if (result)
    {
      CPRecordStoreGetDatabase();
      uint64_t v1 = CPSqliteDatabaseConnectionForWriting();
      return MEMORY[0x1F41096D8](v1);
    }
  }
  return result;
}

uint64_t ABCAddressBookEndExclusiveRead(uint64_t result)
{
  if (result)
  {
    CFTypeRef result = *(void *)(result + 16);
    if (result)
    {
      CPRecordStoreGetDatabase();
      CPSqliteDatabaseConnectionForWriting();
      return CPSqliteConnectionRollback();
    }
  }
  return result;
}

uint64_t ABCStartSortDataReset(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABCStartSortDataReset(ABCAddressBookRef)", 1611, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return ABStartDatabaseDoctor(a1);
}

uint64_t ABCResetSortData(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef Mutable = CFSetCreateMutable(0, 0, 0);
  uint64_t v5 = 0;
  while (1)
  {
    CFArrayRef v6 = ABCCopyArrayOfAllPeople(a1);
    if (!v6) {
      break;
    }
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count < 1 || a2 < 1)
    {
      CFRelease(v7);
      break;
    }
    CFIndex v9 = Count;
    uint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      signed int ValueAtIndex = CFArrayGetValueAtIndex(v7, v11 - 1);
      UniqueId = (const void *)(int)ABCRecordGetUniqueId(ValueAtIndex);
      if (!CFSetContainsValue(Mutable, UniqueId))
      {
        ABCPersonInvalidateSyntheticProperties();
        CFSetAddValue(Mutable, UniqueId);
        ++v10;
      }
      if (v11 >= v9) {
        break;
      }
      ++v11;
    }
    while (v10 < a2);
    CFRelease(v7);
    v5 += v10;
    if (!v10) {
      break;
    }
    ABCAddressBookSaveWithConflictPolicy(a1, 0, 0);
    if (ABCIsSortDataValid(a1, 0)) {
      goto LABEL_15;
    }
  }
  ABCDBContextUpdateSortDataVersions();
  ABCAddressBookSaveWithConflictPolicy(a1, 0, 0);
LABEL_15:
  CFRelease(Mutable);
  return v5;
}

uint64_t ABCRebuildSearchIndex(void *a1)
{
  uint64_t result = ABCFTSIsEnabled();
  if (result)
  {
    uint64_t result = a1[2];
    if (result)
    {
      CPRecordStoreGetDatabase();
      uint64_t result = CPSqliteDatabaseConnectionForWriting();
      if (result)
      {
        uint64_t v3 = result;
        ABCDBContextCreateSearchTablesAndDropFirst(result, 1);
        CFArrayRef v4 = ABAddressBookCopyArrayOfAllPeople(a1);
        sqlite3_exec(*(sqlite3 **)(v3 + 8), "BEGIN IMMEDIATE;", 0, 0, 0);
        if (v4)
        {
          CFIndex Count = CFArrayGetCount(v4);
          if (Count >= 1)
          {
            CFIndex v6 = Count;
            for (CFIndex i = 0; i != v6; ++i)
            {
              signed int ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
              ABCDContextCreateSearchIndexEntryForPerson(v3, ValueAtIndex);
              CFIndex v9 = CFArrayGetValueAtIndex(v4, i);
              ABCDContextUpdateSearchIndexForPerson(v3, v9);
            }
          }
          CFRelease(v4);
        }
        uint64_t v10 = *(sqlite3 **)(v3 + 8);
        return sqlite3_exec(v10, "END;", 0, 0, 0);
      }
    }
  }
  return result;
}

void _ABResetDarwinNotificationCancellationCount()
{
  _darwinNotificationCancellationCFIndex Count = 0;
}

uint64_t ABGetProcessDistributedNotificationIdentifier()
{
  if (ABGetProcessDistributedNotificationIdentifier_onceToken != -1) {
    dispatch_once(&ABGetProcessDistributedNotificationIdentifier_onceToken, &__block_literal_global);
  }
  return ABGetProcessDistributedNotificationIdentifier_processNotificationIdentifier;
}

id __ABGetProcessDistributedNotificationIdentifier_block_invoke()
{
  id result = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29128], "UUID"), "UUIDString");
  ABGetProcessDistributedNotificationIdentifier_processNotificationIdentifier = (uint64_t)result;
  return result;
}

uint64_t ABAddressBookIsCallbackRegistered(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  if (!a1) {
    return 0;
  }
  CFRange v8 = (pthread_mutex_t *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 80));
  if (a2
    && (CFArrayRef v9 = *(const __CFArray **)(a1 + 144)) != 0
    && ((Count = CFArrayGetCount(v9), a3) ? (uint64_t v11 = a3) : (uint64_t v11 = (const void *)*MEMORY[0x1E4F1D260]), Count >= 1))
  {
    CFIndex v12 = Count;
    char v13 = 0;
    uint64_t v14 = 1;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), v14 - 1) == a2
        && CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 152), v14 - 1) == v11
        && CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 160), v14 - 1) == a4)
      {
        char v13 = 1;
      }
      uint64_t v15 = v13 & 1;
      if (v14 >= v12) {
        break;
      }
      ++v14;
    }
    while ((v13 & 1) == 0);
  }
  else
  {
    uint64_t v15 = 0;
  }
  pthread_mutex_unlock(v8);
  return v15;
}

uint64_t ABCAddressBookDatabaseChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (pthread_mutex_t *)(a2 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 80));
  int v4 = *(_DWORD *)(a2 + 376);
  if ((v4 & 0x3FC) != 0)
  {
    *(_DWORD *)(a2 + 376) = v4 & 0xFFFFFC03 | (4 * ((v4 + 1020) >> 2));
  }
  else
  {
    CFArrayRef v6 = *(const __CFArray **)(a2 + 144);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFArrayRef Copy = CFArrayCreateCopy(0, *(CFArrayRef *)(a2 + 144));
        CFArrayRef v10 = CFArrayCreateCopy(0, *(CFArrayRef *)(a2 + 160));
        CFArrayRef v11 = CFArrayCreateCopy(0, *(CFArrayRef *)(a2 + 152));
        CFIndex v12 = 0;
        char v13 = (void *)*MEMORY[0x1E4F1D260];
        do
        {
          signed int ValueAtIndex = (void *)CFArrayGetValueAtIndex(Copy, v12);
          uint64_t v15 = CFArrayGetValueAtIndex(v10, v12);
          CFArrayRef v16 = (void *)CFArrayGetValueAtIndex(v11, v12);
          if (!ValueAtIndex) {
            ABCAddressBookDatabaseChanged_cold_1();
          }
          if (v16 == v13) {
            CFIndex v17 = 0;
          }
          else {
            CFIndex v17 = v16;
          }
          invokeOnThread((void *)a2, ValueAtIndex, v17, (uint64_t)v15);
          ++v12;
        }
        while (v8 != v12);
        CFRelease(Copy);
        CFRelease(v10);
        CFRelease(v11);
      }
    }
  }
  return pthread_mutex_unlock(v3);
}

void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef addressBook, ABExternalChangeCallback callback, void *context)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v6 = _isMainThread();
    CFArrayRef v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef, ABExternalChangeCallback, void *)", 1995, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (addressBook)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)addressBook + 80));
    CFArrayRef v12 = (const __CFArray *)*((void *)addressBook + 18);
    if (v12)
    {
      CFIndex Count = CFArrayGetCount(v12);
      if (Count >= 1)
      {
        if (context) {
          uint64_t v14 = context;
        }
        else {
          uint64_t v14 = (void *)*MEMORY[0x1E4F1D260];
        }
        CFIndex v15 = Count + 1;
        while (1)
        {
          ABExternalChangeCallback ValueAtIndex = (ABExternalChangeCallback)CFArrayGetValueAtIndex(*((CFArrayRef *)addressBook + 18), v15 - 2);
          if (CFArrayGetValueAtIndex(*((CFArrayRef *)addressBook + 19), v15 - 2) == v14 && ValueAtIndex == callback) {
            break;
          }
          if ((unint64_t)--v15 <= 1) {
            goto LABEL_17;
          }
        }
        CFTypeRef v18 = (void *)CFArrayGetValueAtIndex(*((CFArrayRef *)addressBook + 20), v15 - 2);
        releaseThreadHandle(v18);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)addressBook + 18), v15 - 2);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)addressBook + 19), v15 - 2);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)addressBook + 20), v15 - 2);
      }
LABEL_17:
      if (!CFArrayGetCount(*((CFArrayRef *)addressBook + 18)))
      {
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterRemoveObserver(LocalCenter, addressBook, @"ABCDataBaseChangedExternallyNotification", 0);
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)addressBook + 80));
    if (ABLogAPIUsage())
    {
      _ABLog2(6, (uint64_t)"void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef, ABExternalChangeCallback, void *)", 2033, @">> ", 0, v20, v21, v22, v24);
    }
  }
}

void ABAddressBookUnregisterAllExternalChangeCallbacks(CFMutableArrayRef *a1)
{
  CFArrayRef v2 = a1[18];
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      unint64_t v4 = Count + 1;
      do
      {
        ABExternalChangeCallback ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1[20], v4 - 2);
        releaseThreadHandle(ValueAtIndex);
        CFArrayRemoveValueAtIndex(a1[18], v4 - 2);
        CFArrayRemoveValueAtIndex(a1[19], v4 - 2);
        CFArrayRemoveValueAtIndex(a1[20], v4 - 2);
        --v4;
      }
      while (v4 > 1);
    }
    CFMutableArrayRef v6 = a1[18];
    if (v6)
    {
      CFRelease(v6);
      a1[18] = 0;
    }
  }
  CFMutableArrayRef v7 = a1[19];
  if (v7)
  {
    CFRelease(v7);
    a1[19] = 0;
  }
  CFMutableArrayRef v8 = a1[20];
  if (v8)
  {
    CFRelease(v8);
    a1[20] = 0;
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, @"ABCDataBaseChangedExternallyNotification", 0);
}

void ABAddressBookUnregisterChangeCallback(uint64_t a1, const void *a2, const void *a3)
{
  if (ABLogAPIUsage())
  {
    CFMutableArrayRef v6 = _isMainThread();
    CFMutableArrayRef v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookUnregisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)", 2095, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1) {
    ABAddressBookUnregisterChangeCallback_cold_1();
  }
  CFArrayRef v12 = *(const __CFArray **)(a1 + 168);
  if (v12)
  {
    CFIndex Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      CFIndex v14 = Count;
      CFIndex v15 = 0;
      while (1)
      {
        ABExternalChangeCallback ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 168), v15);
        if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v15) == a3 && ValueAtIndex == a2) {
          break;
        }
        if (++v15 >= v14) {
          return;
        }
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 168), v15);
      CFTypeRef v18 = *(__CFArray **)(a1 + 176);
      CFArrayRemoveValueAtIndex(v18, v15);
    }
  }
}

void ABAddressBookUnregisterAllChangeCallbacks(uint64_t a1)
{
  if (!a1) {
    ABAddressBookUnregisterAllChangeCallbacks_cold_1();
  }
  CFArrayRef v2 = *(__CFArray **)(a1 + 168);
  if (v2)
  {
    CFArrayRemoveAllValues(v2);
    CFRelease(*(CFTypeRef *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v3 = *(__CFArray **)(a1 + 176);
  if (v3)
  {
    CFArrayRemoveAllValues(v3);
    CFRelease(*(CFTypeRef *)(a1 + 176));
    *(void *)(a1 + 176) = 0;
  }
}

uint64_t ABAddressBookHasPendingTransaction()
{
  CPRecordStoreGetDatabase();
  uint64_t result = CPSqliteDatabaseConnectionForWriting();
  if (result) {
    return sqlite3_get_autocommit(*(sqlite3 **)(result + 8)) == 0;
  }
  return result;
}

void ABAddressBookRevert(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookRevert(ABCAddressBookRef)", 2144, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (*((void *)addressBook + 2))
  {
    CPRecordStoreGetDatabase();
    if (CPSqliteDatabaseConnectionForWriting()) {
      CPSqliteConnectionRollback();
    }
    CPRecordStoreRevert();
  }
  if (*((void *)addressBook + 3))
  {
    CPRecordStoreGetDatabase();
    if (CPSqliteDatabaseConnectionForWriting()) {
      CPSqliteConnectionRollback();
    }
    CPRecordStoreRevert();
  }
  ABCAddressBookFlushPhoneCache((uint64_t)addressBook);
  *((_DWORD *)addressBook + 94) &= 0xFED81FFF;
}

uint64_t ABCAddressBookShouldAddMember(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = ABCGroupCopySource();
  if (!v6) {
    return 1;
  }
  uint64_t v7 = (const void *)v6;
  uint64_t Policy = ABSourceGetPolicy(v6);
  if (Policy) {
    uint64_t ShouldAddMember = ABPolicyShouldAddMember(Policy, a1, a2, a3);
  }
  else {
    uint64_t ShouldAddMember = 1;
  }
  CFRelease(v7);
  return ShouldAddMember;
}

uint64_t ABCAddressBookShouldSetValue(const void *a1, ABRecordRef record, uint64_t a3, void *a4)
{
  if (ABRecordGetRecordType(record)) {
    uint64_t v8 = ABCGroupCopySource();
  }
  else {
    uint64_t v8 = ABCPersonCopySource();
  }
  uint64_t v9 = (const void *)v8;
  if (!v8) {
    return 1;
  }
  uint64_t Policy = ABSourceGetPolicy(v8);
  if (Policy) {
    ShouldSetCFDictionaryRef Value = ABPolicyShouldSetValue(Policy, a1, record, a3, a4, 0, 0);
  }
  else {
    ShouldSetCFDictionaryRef Value = 1;
  }
  CFRelease(v9);
  return ShouldSetValue;
}

void *ABAddressBookSetSectionDictionary(uint64_t a1, CFDictionaryRef theDict)
{
  *(unsigned char *)(a1 + 248) = 1;
  uint64_t result = *(void **)(a1 + 184);
  if (result != (void *)theDict)
  {
    if (result) {
      CFRelease(result);
    }
    if (theDict) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
    }
    else {
      CFMutableDictionaryRef MutableCopy = 0;
    }
    *(void *)(a1 + 184) = MutableCopy;
    uint64_t v6 = *(const void **)(a1 + 224);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 224) = 0;
    }
    uint64_t result = (void *)ABCFTSIsEnabled();
    if (result)
    {
      uint64_t v7 = (void *)ABCCreateCollator(a1, 1);
      CFStringRef v8 = ABAddressBookCopyCollatorType(a1, 1);
      if (v8)
      {
        CFStringRef v9 = v8;
        CFLocaleRef v10 = CFLocaleCreate(0, v8);
        CFRelease(v9);
      }
      else
      {
        CFLocaleRef v10 = 0;
      }
      CPRecordStoreGetDatabase();
      uint64_t v11 = CPSqliteDatabaseConnectionForReading();
      uint64_t result = ABCFTSSetCollatorOverrideForDatabaseConnectionHandle(*(const void **)(v11 + 8), v7);
      if (v10)
      {
        CFArrayRef v12 = *(const void **)(v11 + 8);
        return ABCFTSSetLocaleOverrideForDatabaseConnectionHandle(v12, v10);
      }
    }
  }
  return result;
}

CFStringRef ABAddressBookCopyCollatorType(uint64_t a1, int a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyCollatorType(ABAddressBookRef, _Bool)", 2460, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  CFDictionaryRef v10 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v10)
  {
    if ((a2 & 1) == 0) {
      return 0;
    }
LABEL_14:
    char v15 = 1;
    CFLocaleIdentifier v17 = ABCCopyUserLanguage();
    CFStringRef LocaleIdentifierFromComponents = 0;
    CFLocaleIdentifier v16 = v17;
    goto LABEL_15;
  }
  CFDictionaryRef v11 = v10;
  if (a2)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v10, @"ABSearchCollationKey");
    if (Value)
    {
      CFStringRef LocaleIdentifierFromComponents = Value;
      char v14 = 1;
LABEL_8:
      CFRetain(LocaleIdentifierFromComponents);
      goto LABEL_9;
    }
  }
  CFStringRef LocaleIdentifierFromComponents = (const __CFString *)CFDictionaryGetValue(v11, @"ABCollationKey");
  char v14 = 0;
  if (LocaleIdentifierFromComponents) {
    goto LABEL_8;
  }
LABEL_9:
  CFRelease(v11);
  if ((v14 & 1) != 0 || !a2) {
    return LocaleIdentifierFromComponents;
  }
  if (!LocaleIdentifierFromComponents) {
    goto LABEL_14;
  }
  char v15 = 0;
  CFLocaleIdentifier v16 = 0;
  CFLocaleIdentifier v17 = LocaleIdentifierFromComponents;
LABEL_15:
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1D1E8], @"search");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1D218], v17);
  if ((v15 & 1) == 0) {
    CFRelease(LocaleIdentifierFromComponents);
  }
  CFStringRef LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(v18, Mutable);
  CFRelease(Mutable);
  if (v16) {
    CFRelease(v16);
  }
  return LocaleIdentifierFromComponents;
}

uint64_t ABAddressBookGetCollator(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (uint64_t *)(a1 + 192);
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1) {
    CFArrayRef v2 = (CFTypeRef *)(a1 + 208);
  }
  else {
    CFArrayRef v2 = 0;
  }
  return _ABAddressBookGetCollator(a1, v1, v2, &ABAddressBookGetSortCollator__globalSortCollator, &ABAddressBookGetSortCollator__globalSortCollatorLocaleIdentifier, 0);
}

uint64_t ABAddressBookGetSortCollator(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (uint64_t *)(a1 + 192);
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1) {
    CFArrayRef v2 = (CFTypeRef *)(a1 + 208);
  }
  else {
    CFArrayRef v2 = 0;
  }
  return _ABAddressBookGetCollator(a1, v1, v2, &ABAddressBookGetSortCollator__globalSortCollator, &ABAddressBookGetSortCollator__globalSortCollatorLocaleIdentifier, 0);
}

uint64_t _ABAddressBookGetCollator(uint64_t a1, uint64_t *a2, CFTypeRef *a3, uint64_t *a4, CFTypeRef *a5, int a6)
{
  CFLocaleIdentifier v12 = ABCCopyUserLanguage();
  CFLocaleIdentifier v13 = v12;
  if (a2)
  {
    if (a3 && v12 && *a3 && !CFEqual(v12, *a3))
    {
      if (*a2)
      {
        ABCReleaseCollator(*a2);
        *a2 = 0;
      }
      *a2 = ABCCreateCollator(a1, a6);
    }
    else
    {
      uint64_t v14 = *a2;
      if (*a2) {
        goto LABEL_26;
      }
      uint64_t v15 = ABCCreateCollator(a1, a6);
      *a2 = v15;
      if (!a3)
      {
LABEL_16:
        uint64_t v14 = v15;
        goto LABEL_26;
      }
    }
    if (*a3) {
      CFRelease(*a3);
    }
    if (!v13) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!a4)
  {
    uint64_t v14 = 0;
    goto LABEL_26;
  }
  if (a5 && v12 && *a5 && !CFEqual(v12, *a5))
  {
    if (*a4)
    {
      ABCReleaseCollator(*a4);
      *a4 = 0;
    }
    *a4 = ABCCreateCollator(a1, a6);
  }
  else
  {
    uint64_t v14 = *a4;
    if (*a4) {
      goto LABEL_26;
    }
    uint64_t v15 = ABCCreateCollator(a1, a6);
    *a4 = v15;
    if (!a5) {
      goto LABEL_16;
    }
  }
  if (*a5) {
    CFRelease(*a5);
  }
  a3 = a5;
  a2 = a4;
  if (v13) {
LABEL_24:
  }
    CFRetain(v13);
LABEL_25:
  *a3 = v13;
  uint64_t v14 = *a2;
LABEL_26:
  if (v13) {
    CFRelease(v13);
  }
  return v14;
}

uint64_t ABAddressBookGetSearchCollator(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (uint64_t *)(a1 + 200);
  }
  else {
    uint64_t v1 = 0;
  }
  if (a1) {
    CFArrayRef v2 = (CFTypeRef *)(a1 + 216);
  }
  else {
    CFArrayRef v2 = 0;
  }
  return _ABAddressBookGetCollator(a1, v1, v2, &ABAddressBookGetSearchCollator__globalSearchCollator, &ABAddressBookGetSearchCollator__globalSearchCollatorLocaleIdentifier, 1);
}

CFStringTokenizerRef ABAddressBookGetWordTokenizer(uint64_t a1)
{
  if (a1)
  {
    CFStringTokenizerRef v2 = *(CFStringTokenizerRef *)(a1 + 224);
    CFStringRef v3 = ABAddressBookCopyCollatorType(a1, 1);
    if (v3)
    {
      CFStringRef v4 = v3;
      CFLocaleRef v5 = CFLocaleCreate(0, v3);
      CFRelease(v4);
      if (!v5) {
        goto LABEL_21;
      }
    }
    else
    {
      CFArrayRef v6 = CFLocaleCopyPreferredLanguages();
      if (v6)
      {
        CFArrayRef v7 = v6;
        if (CFArrayGetCount(v6))
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0);
          CFLocaleRef v5 = CFLocaleCreate(0, ValueAtIndex);
          CFRelease(v7);
          if (v5) {
            goto LABEL_12;
          }
        }
        else
        {
          CFRelease(v7);
        }
      }
      CFLocaleRef v5 = CFLocaleCopyCurrent();
      if (!v5)
      {
LABEL_21:
        *(void *)(a1 + 224) = v2;
        return v2;
      }
    }
LABEL_12:
    uint64_t v9 = *(const void **)(a1 + 232);
    if (v9 && (CFDictionaryRef v10 = (const void *)MEMORY[0x19F3B30F0](v5), !CFEqual(v9, v10)))
    {
      if (v2) {
        CFRelease(v2);
      }
      CFRelease(*(CFTypeRef *)(a1 + 232));
      *(void *)(a1 + 232) = 0;
    }
    else if (v2)
    {
LABEL_20:
      CFRelease(v5);
      goto LABEL_21;
    }
    v13.location = 0;
    v13.length = 0;
    CFStringTokenizerRef v2 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &stru_1EF03E278, v13, 0x810000uLL, v5);
    CFDictionaryRef v11 = (const void *)MEMORY[0x19F3B30F0](v5);
    *(void *)(a1 + 232) = CFRetain(v11);
    goto LABEL_20;
  }
  return 0;
}

CFArrayRef ABAddressBookCopySectionInfoDictionary(uint64_t a1)
{
  if (a1)
  {
    CFLocaleIdentifier v3 = ABCCopyUserLanguage();
    CFLocaleIdentifier v4 = v3;
    CFLocaleRef v5 = *(const void **)(a1 + 184);
    if (!v5) {
      goto LABEL_11;
    }
    if (!*(unsigned char *)(a1 + 248))
    {
      int v6 = CFEqual(v3, *(CFTypeRef *)(a1 + 240));
      CFLocaleRef v5 = *(const void **)(a1 + 184);
      if (!v6)
      {
        CFRelease(*(CFTypeRef *)(a1 + 184));
        *(void *)(a1 + 184) = 0;
        goto LABEL_11;
      }
      if (!v5)
      {
LABEL_11:
        *(void *)(a1 + 184) = ABAddressBookCreateSectionHeaderDictionary();
        uint64_t v8 = *(const void **)(a1 + 240);
        if (v8) {
          CFRelease(v8);
        }
        if (v4) {
          CFTypeRef v9 = CFRetain(v4);
        }
        else {
          CFTypeRef v9 = 0;
        }
        *(void *)(a1 + 240) = v9;
        CFLocaleRef v5 = *(const void **)(a1 + 184);
        if (!v5) {
          goto LABEL_18;
        }
      }
    }
    CFRetain(v5);
LABEL_18:
    if (v4) {
      CFRelease(v4);
    }
    return (const __CFArray *)v5;
  }
  return ABAddressBookCreateSectionHeaderDictionary();
}

const void *ABAddressBookCopySectionIndices(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFStringTokenizerRef v2 = _isMainThread();
    CFLocaleIdentifier v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopySectionIndices(ABAddressBookRef)", 2497, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFDictionaryRef v8 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v8) {
    return 0;
  }
  CFDictionaryRef v9 = v8;
  CFStringRef Value = CFDictionaryGetValue(v8, @"SectionIndices");
  CFDictionaryRef v11 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v9);
  return v11;
}

const void *ABAddressBookCopySectionHeaderDictionaries(uint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  if (ABLogAPIUsage())
  {
    CFDictionaryRef v8 = _isMainThread();
    CFDictionaryRef v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopySectionHeaderDictionaries(ABAddressBookRef, CFArrayRef *, CFArrayRef *, UCollator *)", 2539, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  CFDictionaryRef v14 = ABAddressBookCopySectionInfoDictionary(a1);
  if (v14)
  {
    CFDictionaryRef v15 = v14;
    CFStringRef Value = CFDictionaryGetValue(v14, @"SectionHeaders");
    if (!Value)
    {
LABEL_34:
      CFRelease(v15);
      return Value;
    }
    if (!(a2 | a3))
    {
LABEL_33:
      CFRetain(Value);
      goto LABEL_34;
    }
    CFLocaleIdentifier v17 = (__CFArray *)CFDictionaryGetValue(v15, @"LanguageSortedSectionHeaders");
    CFAllocatorRef v18 = v17;
    if (v17)
    {
      CFRetain(v17);
      uint64_t v19 = CFDictionaryGetValue(v15, @"LanguageSortedSectionHeaderSortKeys");
      if (!v19)
      {
LABEL_12:
        if (a2)
        {
LABEL_13:
          *(void *)a2 = v18;
LABEL_29:
          if (a3)
          {
            *(void *)a3 = v19;
          }
          else if (v19)
          {
            CFRelease(v19);
          }
          goto LABEL_33;
        }
LABEL_27:
        if (v18) {
          CFRelease(v18);
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v19 = CFDictionaryGetValue(v15, @"LanguageSortedSectionHeaderSortKeys");
      if (!v19)
      {
        CFArrayRef v34 = (void *)a2;
        uint64_t v35 = (void *)a3;
        uint64_t Count = CFArrayGetCount((CFArrayRef)Value);
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v22 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
        CFAllocatorRef allocator = v21;
        CFDictionaryRef Mutable = CFArrayCreateMutable(v21, Count, v22);
        uint64_t v39 = Count;
        if (Count >= 1)
        {
          CFIndex v23 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, v23);
            CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"Headers");
            CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v25);
            CFMutableDictionaryRef v27 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            uint64_t v28 = CFArrayGetCount(v25);
            if (v28 >= 1)
            {
              for (CFIndex i = 0; i != v28; ++i)
              {
                CFStringRef v30 = (const __CFString *)CFArrayGetValueAtIndex(v25, i);
                CFArrayRef v31 = ABCreateDataSortKey(v30, (uint64_t)a4, 0);
                if (v31)
                {
                  CFArrayRef v32 = v31;
                  CFArrayAppendValue(v27, v31);
                  CFRelease(v32);
                }
              }
            }
            v40.location = 0;
            v40.length = v28;
            CFArraySortValues(MutableCopy, v40, (CFComparatorFunction)ABCompareStringsUsingICUSortKey, a4);
            v41.location = 0;
            v41.length = v28;
            CFArraySortValues(v27, v41, (CFComparatorFunction)ABCompareDataSortKeys, a4);
            if (MutableCopy)
            {
              CFArrayAppendValue(theArray, MutableCopy);
              CFRelease(MutableCopy);
            }
            if (v27)
            {
              CFArrayAppendValue(Mutable, v27);
              CFRelease(v27);
            }
            ++v23;
          }
          while (v23 != v39);
        }
        CFAllocatorRef v18 = theArray;
        CFDictionarySetValue(v15, @"LanguageSortedSectionHeaders", theArray);
        uint64_t v19 = Mutable;
        CFDictionarySetValue(v15, @"LanguageSortedSectionHeaderSortKeys", Mutable);
        a2 = (unint64_t)v34;
        a3 = (unint64_t)v35;
        if (v34) {
          goto LABEL_13;
        }
        goto LABEL_27;
      }
    }
    CFRetain(v19);
    goto LABEL_12;
  }
  return 0;
}

const void *ABAddressBookCopyLocalizedSectionIndexDictionary(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFStringTokenizerRef v2 = _isMainThread();
    CFLocaleIdentifier v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedSectionIndexDictionary(ABAddressBookRef)", 2600, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFDictionaryRef v8 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v8) {
    return 0;
  }
  CFDictionaryRef v9 = v8;
  CFStringRef Value = CFDictionaryGetValue(v8, @"LocalizedSectionIndices");
  uint64_t v11 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v9);
  return v11;
}

const void *ABAddressBookCopyLocalizedSectionHeaderDictionary(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFStringTokenizerRef v2 = _isMainThread();
    CFLocaleIdentifier v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedSectionHeaderDictionary(ABAddressBookRef)", 2614, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFDictionaryRef v8 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v8) {
    return 0;
  }
  CFDictionaryRef v9 = v8;
  CFStringRef Value = CFDictionaryGetValue(v8, @"LocalizedSectionHeaders");
  uint64_t v11 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v9);
  return v11;
}

const void *ABAddressBookCopySectionNameTransform(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFStringTokenizerRef v2 = _isMainThread();
    CFLocaleIdentifier v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopySectionNameTransform(ABAddressBookRef)", 2643, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _ABAddressBookCopySectionPropertyValue(a1, @"NameTransform");
}

const void *_ABAddressBookCopySectionPropertyValue(uint64_t a1, const void *a2)
{
  CFDictionaryRef v3 = ABAddressBookCopySectionInfoDictionary(a1);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFStringRef Value = CFDictionaryGetValue(v3, a2);
  uint64_t v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v6;
}

const void *ABAddressBookCopySearchTransform(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFStringTokenizerRef v2 = _isMainThread();
    CFDictionaryRef v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopySearchTransform(ABAddressBookRef)", 2649, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _ABAddressBookCopySectionPropertyValue(a1, @"SearchTransform");
}

BOOL ABAddressBookShouldUseExtraTokenizations(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFStringTokenizerRef v2 = _isMainThread();
    CFDictionaryRef v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookShouldUseExtraTokenizations(ABAddressBookRef)", 2655, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFBooleanRef v8 = (const __CFBoolean *)_ABAddressBookCopySectionPropertyValue(a1, @"ABUseExtraTokenizations");
  if (!v8) {
    return 0;
  }
  CFBooleanRef v9 = v8;
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 == CFBooleanGetTypeID())
  {
    BOOL v11 = CFBooleanGetValue(v9) != 0;
  }
  else
  {
    fwrite("The ABContactSections plist contains an entry of the wrong type for \"ABUseExtraTokenizations\" it should be a BOOLean value. Ignoring:", 0x85uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    CFShow(v9);
    BOOL v11 = 0;
  }
  CFRelease(v9);
  return v11;
}

void ABDatabaseChangedByOtherProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  pthread_mutex_lock(&__darwinNotificationLock);
  if (_darwinNotificationCancellationCount < 1)
  {
    pthread_mutex_unlock(&__darwinNotificationLock);
    _ABCPostDatabaseChangedNotification(a5, 0);
  }
  else
  {
    --_darwinNotificationCancellationCount;
    pthread_mutex_unlock(&__darwinNotificationLock);
  }
}

void ABCDestroyAddressBook(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 16)) {
      ABCDBContextDestroy();
    }
    if (*(void *)(a1 + 24)) {
      CPRecordStoreDestroy();
    }
    if (*(void *)(a1 + 40))
    {
      CFStringTokenizerRef v2 = *(const void **)(a1 + 48);
      if (v2) {
        CFRelease(v2);
      }
      CFDictionaryRef v3 = *(const void **)(a1 + 56);
      if (v3) {
        CFRelease(v3);
      }
      CFRelease(*(CFTypeRef *)(a1 + 40));
    }
    uint64_t v4 = *(const void **)(a1 + 184);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(void *)(a1 + 192);
    if (v5) {
      ABCReleaseCollator(v5);
    }
    uint64_t v6 = *(const void **)(a1 + 208);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(void *)(a1 + 200);
    if (v7) {
      ABCReleaseCollator(v7);
    }
    CFBooleanRef v8 = *(const void **)(a1 + 216);
    if (v8) {
      CFRelease(v8);
    }
    CFBooleanRef v9 = *(const void **)(a1 + 240);
    if (v9) {
      CFRelease(v9);
    }
    CFTypeID v10 = *(const void **)(a1 + 224);
    if (v10) {
      CFRelease(v10);
    }
    BOOL v11 = *(const void **)(a1 + 232);
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)(a1 + 64);
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = *(const void **)(a1 + 72);
    if (v13) {
      CFRelease(v13);
    }
    CFDictionaryRef v14 = *(const void **)(a1 + 256);
    if (v14) {
      CFRelease(v14);
    }
    CFDictionaryRef v15 = *(const void **)(a1 + 360);
    if (v15) {
      CFRelease(v15);
    }
    if (*(void *)(a1 + 272))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
      CFLocaleIdentifier v16 = *(const void **)(a1 + 272);
      *(void *)(a1 + 272) = 0;
      _Block_release(v16);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 280));
    }
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 280));
    CFLocaleIdentifier v17 = *(const void **)(a1 + 344);
    if (v17) {
      CFRelease(v17);
    }
    CFAllocatorRef v18 = *(void ***)(a1 + 368);
    if (v18)
    {
      if (v18[10])
      {
        free(v18[10]);
        CFAllocatorRef v18 = *(void ***)(a1 + 368);
      }
      free(v18);
    }
    ABAddressBookUnregisterAllExternalChangeCallbacks((CFMutableArrayRef *)a1);
    ABAddressBookUnregisterAllChangeCallbacks(a1);
  }
}

uint64_t _prepareSourceForDeletion(uint64_t a1, ABRecordRef record)
{
  ABRecordID RecordID = ABRecordGetRecordID(record);
  if (RecordID == ABAddressBookGetIntegerProperty(a1)) {
    ABAddressBookSetIntegerProperty(a1, @"MeSourceID", 0xFFFFFFFFLL, v5, v6, v7, v8, v9, v11);
  }
  uint64_t result = _ABAddressBookDeleteAllRecordsWithStore(a1, record, 1);
  *(_DWORD *)(a1 + 376) |= 0x100000u;
  return result;
}

void ___createStartABDatabaseDoctorCoalescingTimer_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x19F3B4540]();
  Remote = CFMessagePortCreateRemote((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"com.apple.ABDatabaseDoctor");
  if (Remote)
  {
    CFStringTokenizerRef v2 = Remote;
    CFMessagePortSendRequest(Remote, 1, 0, 1.0, 0.0, 0, 0);
    CFRelease(v2);
  }
  else
  {
    CFDictionaryRef v3 = ABOSLogGeneral();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___createStartABDatabaseDoctorCoalescingTimer_block_invoke_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
}

uint64_t _createDefaultCoalescingTimerForDarwinNotification(uint64_t a1)
{
  CFStringTokenizerRef v2 = (void *)MEMORY[0x19F3B4540]();
  CFDictionaryRef v3 = (void *)[MEMORY[0x1E4F5A4F0] defaultProvider];
  id v4 = objc_alloc(MEMORY[0x1E4F5A370]);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___createDefaultCoalescingTimerForDarwinNotification_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = a1;
  uint64_t v5 = objc_msgSend(v4, "initWithDelay:options:block:schedulerProvider:downstreamScheduler:", 1, v7, v3, objc_msgSend(v3, "backgroundScheduler"), 1.0);
  return v5;
}

void ___createDefaultCoalescingTimerForDarwinNotification_block_invoke(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v3 = *(const __CFString **)(a1 + 32);
  CFNotificationCenterPostNotification(DarwinNotifyCenter, v3, 0, 0, 1u);
}

CFArrayRef ABAddressBookCreateSectionHeaderDictionary()
{
  uint64_t v0 = (__CFBundle *)_ABBundle();
  CFArrayRef v1 = CFBundleCopyBundleLocalizations(v0);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFArrayRef v3 = (const __CFArray *)CFPreferencesCopyAppValue(@"AppleLanguages", (CFStringRef)*MEMORY[0x1E4F1D3B8]);
  if (v3)
  {
    CFArrayRef v4 = v3;
    if (CFArrayGetCount(v3))
    {
      CFArrayRef v5 = CFBundleCopyLocalizationsForPreferences(v2, v4);
      CFRelease(v4);
      if (!v5)
      {
LABEL_5:
        CFArrayRef v6 = v2;
LABEL_22:
        CFRelease(v6);
        return v5;
      }
      goto LABEL_8;
    }
    CFRelease(v4);
  }
  CFArrayRef v5 = CFBundleCopyLocalizationsForPreferences(v2, 0);
  if (!v5) {
    goto LABEL_5;
  }
LABEL_8:
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    CFArrayRef v6 = 0;
  }
  else
  {
    CFIndex v8 = Count;
    uint64_t v9 = 1;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9 - 1);
      uint64_t v11 = (__CFBundle *)_ABBundle();
      CFURLRef v12 = CFBundleCopyResourceURLForLocalization(v11, @"ABContactSections", @"plist", 0, ValueAtIndex);
      CFArrayRef v6 = v12;
      if (v9 >= v8) {
        break;
      }
      ++v9;
    }
    while (!v12);
  }
  CFRelease(v5);
  CFRelease(v2);
  if (v6)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v14 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      if (CFReadStreamOpen(v14)) {
        CFArrayRef v5 = (const __CFArray *)CFPropertyListCreateWithStream(v13, v15, 0, 1uLL, 0, 0);
      }
      else {
        CFArrayRef v5 = 0;
      }
      CFRelease(v15);
    }
    else
    {
      CFArrayRef v5 = 0;
    }
    goto LABEL_22;
  }
  return 0;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

CFArrayRef ABCGroupCopyArrayOfAllMembersWithSortOrdering(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (ABCRecordGetValue(a1, kABCFetchSortOrderProperty) - 1 != a2)
  {
    CPRecordInitializeProperty();
    CPRecordUnloadProperty();
  }
  uint64_t Value = ABCRecordGetValue(a1, kABCMembersProperty);
  if (!Value) {
    return 0;
  }
  return ABCMultiValueCopyValues(Value);
}

CFArrayRef ABCGroupCopyArrayFromProperty(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t Value = ABCRecordGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  return ABCMultiValueCopyValues(Value);
}

CFArrayRef ABCGroupCopyArrayOfAllMembers(uint64_t a1)
{
  return ABCGroupCopyArrayFromProperty(a1, kABCMembersProperty);
}

CFArrayRef ABCGroupCopyArrayOfAllSubgroups(uint64_t a1)
{
  return ABCGroupCopyArrayFromProperty(a1, kABCSubgroupsProperty);
}

CFArrayRef ABCGroupCopyArrayOfAllMembersAndSubgroups(uint64_t a1)
{
  return ABCGroupCopyArrayFromProperty(a1, kABCMembersAndSubgroupsProperty);
}

uint64_t ABCGroupGetRecordForUniqueID(uint64_t result, uint64_t a2)
{
  if (result) {
    return ABCDBContextRecordForUIDOfType(*(void *)(result + 16), a2, (uint64_t)ABCGroupClass[0]);
  }
  return result;
}

uint64_t ABCGroupCopyRecordsForUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result) {
    return ABCDBContextCopyRecordsForUUIDsOfType(*(void *)(result + 16), a2, (long long *)ABCGroupClass[0]);
  }
  return result;
}

uint64_t ABCGroupAddMemberOrSubgroup(const void *a1, const void *a2)
{
  if (ABRecordGetRecordID(a1) == -1) {
    goto LABEL_11;
  }
  uint64_t Policy = ABRecordGetPolicy(a1);
  if (Policy)
  {
    uint64_t v5 = Policy;
    uint64_t v6 = ABCGetAddressBookForRecord();
    if (!ABPolicyShouldAddMember(v5, v6, (uint64_t)a1, (uint64_t)a2)) {
      goto LABEL_11;
    }
  }
  ABRecordRef v7 = ABGroupCopySource(a1);
  if (!v7) {
    goto LABEL_11;
  }
  ABRecordRef v8 = v7;
  if (ABCRecordGetRecordType() == 257) {
    ABRecordRef v9 = ABPersonCopySource(a2);
  }
  else {
    ABRecordRef v9 = ABGroupCopySource(a2);
  }
  ABRecordRef v10 = v9;
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v8);
  if (v8 == v10)
  {
    uint64_t Value = ABCRecordGetValue(a1, kABCAddedMembersAndSubgroupsProperty);
    CFArrayRef Mutable = (const __CFArray *)Value;
    if (Value
      || (CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) != 0)
    {
      v20.length = CFArrayGetCount(Mutable);
      v20.location = 0;
      FirstIndexOfuint64_t Value = CFArrayGetFirstIndexOfValue(Mutable, v20, a2);
      BOOL v12 = FirstIndexOfValue != -1;
      if (FirstIndexOfValue == -1)
      {
        CFArrayAppendValue(Mutable, a2);
        ABCRecordSetValue(a1, kABCAddedMembersAndSubgroupsProperty, (__CFString *)Mutable);
      }
      if (!Value) {
        CFRelease(Mutable);
      }
      CFArrayRef v17 = (const __CFArray *)ABCRecordGetValue(a1, kABCRemovedMembersAndSubgroupsProperty);
      if (v17)
      {
        CFArrayRef v18 = v17;
        v21.length = CFArrayGetCount(v17);
        v21.location = 0;
        CFIndex v19 = CFArrayGetFirstIndexOfValue(v18, v21, a2);
        if ((v19 & 0x8000000000000000) == 0)
        {
          CFArrayRemoveValueAtIndex(v18, v19);
          ABCRecordSetValue(a1, kABCRemovedMembersAndSubgroupsProperty, (__CFString *)v18);
        }
      }
    }
    else
    {
      BOOL v12 = 0;
    }
    int v11 = 1;
  }
  else
  {
LABEL_11:
    int v11 = 0;
    BOOL v12 = 0;
  }
  return v11 & !v12;
}

uint64_t ABCGroupAddMember(const void *a1, const void *a2)
{
  if (ABCRecordGetRecordType() != 257) {
    return 0;
  }
  return ABCGroupAddMemberOrSubgroup(a1, a2);
}

uint64_t ABCGroupAddMemberAndReturnError(const void *a1, const void *a2)
{
  if (ABCRecordGetRecordType() != 257) {
    return 0;
  }
  return ABCGroupAddMemberOrSubgroup(a1, a2);
}

uint64_t ABCGroupRemoveMemberAndReturnError(const void *a1, const void *a2)
{
  uint64_t Policy = ABRecordGetPolicy(a1);
  if (Policy)
  {
    uint64_t v5 = Policy;
    uint64_t v6 = ABCGetAddressBookForRecord();
    if (!ABPolicyShouldRemoveMember(v5, v6, (uint64_t)a1, (uint64_t)a2))
    {
      int v14 = 0;
      BOOL v10 = 0;
      return v14 & !v10;
    }
  }
  uint64_t Value = ABCRecordGetValue(a1, kABCRemovedMembersAndSubgroupsProperty);
  CFArrayRef Mutable = (const __CFArray *)Value;
  if (Value || (CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) != 0)
  {
    v16.length = CFArrayGetCount(Mutable);
    v16.location = 0;
    FirstIndexOfuint64_t Value = CFArrayGetFirstIndexOfValue(Mutable, v16, a2);
    BOOL v10 = FirstIndexOfValue != -1;
    if (FirstIndexOfValue == -1)
    {
      CFArrayAppendValue(Mutable, a2);
      ABCRecordSetValue(a1, kABCRemovedMembersAndSubgroupsProperty, (__CFString *)Mutable);
      if (Value) {
        goto LABEL_7;
      }
    }
    else if (Value)
    {
LABEL_7:
      CFArrayRef v11 = (const __CFArray *)ABCRecordGetValue(a1, kABCAddedMembersAndSubgroupsProperty);
      if (v11)
      {
        CFArrayRef v12 = v11;
        v17.length = CFArrayGetCount(v11);
        v17.location = 0;
        CFIndex v13 = CFArrayGetFirstIndexOfValue(v12, v17, a2);
        if ((v13 & 0x8000000000000000) == 0)
        {
          CFArrayRemoveValueAtIndex(v12, v13);
          ABCRecordSetValue(a1, kABCAddedMembersAndSubgroupsProperty, (__CFString *)v12);
        }
      }
      goto LABEL_10;
    }
    CFRelease(Mutable);
    goto LABEL_7;
  }
  BOOL v10 = 0;
LABEL_10:
  int v14 = 1;
  return v14 & !v10;
}

uint64_t ABCGroupAddSubgroup(const void *a1, const void *a2)
{
  if (ABCRecordGetRecordType() != 258) {
    return 0;
  }
  return ABCGroupAddMemberOrSubgroup(a1, a2);
}

__CFString *ABCGroupNameForProperty(int a1)
{
  if (kABGroupNameProperty == a1) {
    return @"Name";
  }
  if (kABGroupExternalIdentifierProperty == a1) {
    return @"ExternalIdentifier";
  }
  if (kABGroupExternalModificationTagProperty == a1) {
    return @"ExternalModificationTag";
  }
  if (kABGroupExternalRepresentationProperty == a1) {
    return @"ExternalRepresentation";
  }
  if (kABGroupExternalUUIDProperty == a1) {
    return @"ExternalUUID";
  }
  if (kABGroupInternalUUIDProperty == a1) {
    return @"guid";
  }
  return @"UNKNOWN_PROPERTY";
}

uint64_t ABCGroupCreateNewGroup()
{
  ABCInitializeLibrary();
  return CPRecordCreate();
}

uint64_t ABCGroupCreateNewGroupAndReturnError()
{
  ABCInitializeLibrary();
  return CPRecordCreate();
}

const void *ABCGroupCreateNewGroupInSourceAndReturnError(uint64_t a1, const void *a2, CFErrorRef *a3)
{
  ABCInitializeLibrary();
  uint64_t v6 = (const void *)CPRecordCreate();
  if (a2)
  {
    if ((ABSourceIsContentReadonly((uint64_t)a2) & 1) != 0
      || (uint64_t Policy = ABCSourceGetPolicy(a2)) != 0
      && !ABPolicyShouldAddRecord((uint64_t)Policy, a1, (uint64_t)v6, 0))
    {
      if (a3) {
        *a3 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, 0);
      }
      CFRelease(v6);
      return 0;
    }
    else
    {
      CPRecordSetProperty();
    }
  }
  return v6;
}

uint64_t ABCGroupPrepareToAddToAddressBook(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = ABCGroupCopySource();
  if (v6)
  {
    ABRecordRef v7 = (const void *)v6;
  }
  else
  {
    ABRecordRef v10 = ABAddressBookCopyDefaultSource(a2);
    if (!v10) {
      return 1;
    }
    ABRecordRef v7 = v10;
    CPRecordSetProperty();
    if ((ABRecordGetIntValue((uint64_t)v7, kABSourceTypeProperty) & 0x1000000) != 0)
    {
      uint64_t ShouldAddRecord = 0;
      goto LABEL_4;
    }
    uint64_t Policy = ABCSourceGetPolicy(v7);
    if (Policy)
    {
      uint64_t ShouldAddRecord = ABPolicyShouldAddRecord((uint64_t)Policy, (uint64_t)a2, a1, a3);
      goto LABEL_4;
    }
  }
  uint64_t ShouldAddRecord = 1;
LABEL_4:
  CFRelease(v7);
  return ShouldAddRecord;
}

uint64_t ABCGroupCopySource()
{
  uint64_t v0 = ABCGetAddressBookForRecord();
  uint64_t v1 = CPRecordCopyProperty();
  if (v1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v0 == 0;
  }
  if (!v2)
  {
    uint64_t Property = CPRecordGetProperty();
    if (Property == -1)
    {
      return 0;
    }
    else
    {
      RecordForUniqueID = (const void *)ABCSourceGetRecordForUniqueID(v0, Property);
      uint64_t v1 = (uint64_t)RecordForUniqueID;
      if (RecordForUniqueID) {
        CFRetain(RecordForUniqueID);
      }
    }
  }
  return v1;
}

uint64_t ABCCopyArrayOfAllGroupsInSource(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (!a2 || ABCRecordGetUniqueId(a2) == -1)
    {
      return CPRecordStoreCopyAllInstancesOfClass();
    }
    else
    {
      return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    }
  }
  return result;
}

uint64_t __ABCCopyArrayOfAllGroupsInSource_block_invoke(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8)) {
      return sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t ABCCopyArrayOfAllGroups(uint64_t result)
{
  if (result) {
    return CPRecordStoreCopyAllInstancesOfClass();
  }
  return result;
}

uint64_t ABCCopyArrayOfAllGroupsWithSortOrdering(uint64_t result)
{
  if (result) {
    return CPRecordStoreCopyAllInstancesOfClassWhere();
  }
  return result;
}

uint64_t ABCCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(uint64_t a1, unsigned int a2, int a3, CFArrayRef theArray)
{
  uint64_t v4 = 0;
  if (a1)
  {
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      uint64_t v4 = 0;
      if (a2 <= 1)
      {
        if (Count)
        {
          CFArrayRef Mutable = CFStringCreateMutable(0, 0);
          ABRecordRef v10 = Mutable;
          CFArrayRef v11 = @"1";
          if (!a2) {
            CFArrayRef v11 = @"0";
          }
          CFArrayRef v12 = @"ABGroup";
          if (!a2) {
            CFArrayRef v12 = @"ABPerson";
          }
          CFIndex v13 = &stru_1EF03E278;
          if (a3) {
            CFIndex v13 = @"RECURSIVE";
          }
          CFStringAppendFormat(Mutable, 0, CFSTR(" WHERE ROWID IN (WITH %@ direct_members(groupid) AS (SELECT  abgm.group_id FROM ABGroupMembers abgm JOIN %@ abr ON abgm.member_type = %@ AND abgm.member_id = abr.ROWID WHERE abr.guid IN("), v13, v12, v11);
          CFIndex v14 = CFArrayGetCount(theArray);
          if (v14 >= 1)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (i) {
                CFStringRef v16 = @", ?";
              }
              else {
                CFStringRef v16 = @"?";
              }
              CFStringAppend(v10, v16);
            }
          }
          CFStringAppend(v10, @")"));
          if (a3) {
            CFStringAppendFormat(v10, 0, @", ancestor_group(a_groupid) AS (SELECT groupid FROM direct_members UNION SELECT abgm.group_id FROM ABGroupMembers abgm JOIN ABGroup abg ON abgm.member_type = 1 AND abgm.member_id = abg.ROWID JOIN ancestor_group ag ON ag.a_groupid = abgm.member_id) SELECT a_groupid FROM ancestor_group"));
          }
          else {
            CFStringAppendFormat(v10, 0, @" SELECT groupid FROM direct_members"));
          }
          uint64_t v4 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
          if (v10) {
            CFRelease(v10);
          }
        }
      }
    }
  }
  return v4;
}

uint64_t __ABCCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs_block_invoke(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8))
    {
      uint64_t v3 = result;
      if (*(uint64_t *)(result + 32) >= 1)
      {
        CFIndex v4 = 0;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 40), v4);
          uint64_t v5 = *(sqlite3_stmt **)(a2 + 8);
          ++v4;
          uint64_t v6 = (const char *)_CPCreateUTF8StringFromCFString();
          uint64_t result = sqlite3_bind_text(v5, v4, v6, -1, MEMORY[0x1E4F14838]);
        }
        while (*(void *)(v3 + 32) > v4);
      }
    }
  }
  return result;
}

uint64_t ABCGetGroupCount(uint64_t a1, ABRecordRef record)
{
  uint64_t CountOfInstancesOfClassWhere = a1;
  if (a1)
  {
    if (!record || (uint64_t RecordID = ABRecordGetRecordID(record), RecordID == -1)) {
      CFStringRef v4 = 0;
    }
    else {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"StoreID = %i", RecordID);
    }
    uint64_t CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
    if (v4) {
      CFRelease(v4);
    }
  }
  return CountOfInstancesOfClassWhere;
}

uint64_t ABCGroupCopyCompositeName(uint64_t a1)
{
  return ABCRecordCopyValue(a1, kABCNameProperty);
}

uint64_t ABCGroupDelete(int a1)
{
  uint64_t result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a1);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    return CPSqliteDatabaseReleaseSqliteStatement();
  }
  return result;
}

uint64_t ABCGroupTypeOfProperty(int a1)
{
  return *(unsigned int *)&ABCGroupClass[0][10][40 * a1 + 32];
}

uint64_t _prepareGroupForSave()
{
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    CPRecordGetID();
    return CPRecordSetProperty();
  }
  return result;
}

void showMembersAndSubgroups(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = ABCMultiValueGetCount((uint64_t)a1);
    CFIndex v3 = Count - 1;
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      uint64_t v6 = (FILE **)MEMORY[0x1E4F143C8];
      do
      {
        CFArrayRef v7 = ABCMultiValueCopyValueAtIndex(a1, v5);
        ABRecordRef v8 = *v6;
        if (ABCRecordGetRecordType() == 257) {
          ABRecordRef v9 = "person";
        }
        else {
          ABRecordRef v9 = "group";
        }
        int ID = CPRecordGetID();
        fprintf(v8, "%s %d", v9, ID);
        if (v7) {
          CFRelease(v7);
        }
        if (v5 < v3) {
          fwrite(", ", 2uLL, 1uLL, *v6);
        }
        ++v5;
      }
      while (v4 != v5);
    }
  }
}

uint64_t loadMembersAndSubgroups(uint64_t result, int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t result = ABCRecordGetValue(result, kABCFetchSortOrderProperty);
    if (v4)
    {
      if (a2)
      {
        uint64_t result = CPSqliteConnectionStatementForSQL();
        if (result)
        {
          uint64_t v5 = result;
          CFArrayRef Mutable = ABCMultiValueCreateMutable(2);
          if (Mutable)
          {
            ABRecordRef v9 = Mutable;
            ABCGetAddressBookForRecord();
            CFArrayRef v7 = *(sqlite3_stmt **)(v5 + 8);
            int ID = CPRecordGetID();
            sqlite3_bind_int(v7, 1, ID);
            CPSqliteStatementSendResults();
            CPSqliteStatementReset();
            ABCRecordSetContents();
            CFRelease(v9);
          }
          return CPSqliteDatabaseReleaseSqliteStatement();
        }
      }
    }
  }
  return result;
}

uint64_t addMemberFromUID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(CFMutableArrayRef **)a2;
  uint64_t v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  ABRecordRef v8 = (uint64_t *)&ABCPersonClass;
  if (v7) {
    ABRecordRef v8 = (uint64_t *)ABCGroupClass;
  }
  ABRecordRef v9 = (void *)ABCDBContextRecordForUIDOfType(v6, v5, *v8);
  if (v9) {
    ABCMultiValueAdd(v4, v9, &stru_1EF03E278, 0, 0);
  }
  return 0;
}

CFMutableArrayRef ArrayCopy(CFArrayRef theArray)
{
  return CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
}

CFArrayRef saveAddedMembersAndSubgroups(const __CFArray *result, int a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = (const __CFArray *)ABCRecordGetValue(result, kABCAddedMembersAndSubgroupsProperty);
        if (result)
        {
          CFArrayRef v3 = result;
          CFIndex Count = CFArrayGetCount(result);
          uint64_t v5 = CPSqliteConnectionStatementForSQL();
          if (v5)
          {
            uint64_t v6 = v5;
            if (Count >= 1)
            {
              for (CFIndex i = 0; i != Count; ++i)
              {
                CFArrayGetValueAtIndex(v3, i);
                ABRecordRef v8 = *(sqlite3_stmt **)(v6 + 8);
                int ID = CPRecordGetID();
                sqlite3_bind_int(v8, 1, ID);
                ABRecordRef v10 = *(sqlite3_stmt **)(v6 + 8);
                BOOL v11 = ABCPersonClass != (long long *)CPRecordGetClass();
                sqlite3_bind_int(v10, 2, v11);
                CFArrayRef v12 = *(sqlite3_stmt **)(v6 + 8);
                int v13 = CPRecordGetID();
                sqlite3_bind_int(v12, 3, v13);
                CPSqliteStatementPerform();
                CPSqliteStatementReset();
              }
            }
            CPSqliteDatabaseReleaseSqliteStatement();
          }
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          return (const __CFArray *)CPRecordUnloadProperty();
        }
      }
    }
  }
  return result;
}

CFArrayRef saveRemovedMembersAndSubgroups(const __CFArray *result, int a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = (const __CFArray *)ABCRecordGetValue(result, kABCRemovedMembersAndSubgroupsProperty);
        if (result)
        {
          CFArrayRef v3 = result;
          CFIndex Count = CFArrayGetCount(result);
          uint64_t v5 = CPSqliteConnectionStatementForSQL();
          if (v5)
          {
            uint64_t v6 = v5;
            if (Count >= 1)
            {
              for (CFIndex i = 0; i != Count; ++i)
              {
                CFArrayGetValueAtIndex(v3, i);
                ABRecordRef v8 = *(sqlite3_stmt **)(v6 + 8);
                int ID = CPRecordGetID();
                sqlite3_bind_int(v8, 1, ID);
                ABRecordRef v10 = *(sqlite3_stmt **)(v6 + 8);
                int v11 = CPRecordGetID();
                sqlite3_bind_int(v10, 2, v11);
                CPSqliteStatementPerform();
                CPSqliteStatementReset();
              }
            }
            CPSqliteDatabaseReleaseSqliteStatement();
          }
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          CPRecordUnloadProperty();
          return (const __CFArray *)CPRecordUnloadProperty();
        }
      }
    }
  }
  return result;
}

uint64_t _configureImageDatabase(uint64_t result, uint64_t a2)
{
  if (result && a2)
  {
    CPRecordStoreCreateTablesForClass();
    CPRecordStoreCreateTablesForClass();
    CPSqliteConnectionPerformSQL();
    return CPSqliteConnectionPerformSQL();
  }
  return result;
}

uint64_t _databaseDeleted(uint64_t *a1, int a2)
{
  ABDiagnosticsEnabled();
  _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 141, 0, @"image database was deleted, %@", v4, v5, v6, *a1);
  uint64_t result = ABDatabaseIntegrityResolutionRecorder(1);
  if (!a2)
  {
    uint64_t result = os_variant_has_internal_content();
    if (result)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async(global_queue, &__block_literal_global_0);
      return sleep(1u);
    }
  }
  return result;
}

BOOL _imageStoreMigrationCheckDatabaseVersion(uint64_t a1, uint64_t a2, int a3)
{
  return a3 < 8;
}

uint64_t _imageStoreMigrationMigrateDatabase(uint64_t a1, uint64_t a2, int a3, __CFArray *a4)
{
  if (!a2) {
    return 0;
  }
  if (a3 < 5)
  {
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CFIndex v107 = 0;
    ppStmt[0] = 0;
    v105 = 0;
    pStmt = 0;
    if (!sqlite3_prepare(*(sqlite3 **)(a2 + 8), "SELECT record_id, crop_x, crop_y, crop_width, crop_height, data FROM ABImage WHERE format=?;",
            -1,
            ppStmt,
            0)
      && !sqlite3_prepare(*(sqlite3 **)(a2 + 8), "SELECT record_id, crop_x, crop_y, crop_width, data FROM ABFullSizeImage;",
            -1,
            &v107,
            0)
      && !sqlite3_prepare(*(sqlite3 **)(a2 + 8), "INSERT OR IGNORE INTO ABFullSizeImage(record_id, crop_x, crop_y, crop_width, data) VALUES (?, ?, ?, ?, ?);",
            -1,
            &pStmt,
            0)
      && !sqlite3_prepare(*(sqlite3 **)(a2 + 8), "INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) VALUES (?, ?, 2, ?);",
            -1,
            &v105,
            0))
    {
      uint64_t v96 = (uint64_t)a4;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
      ABRecordRef v8 = &dword_19DD5549C;
      int v9 = 2;
      do
      {
        sqlite3_bind_int(ppStmt[0], 1, v9);
        while (sqlite3_step(ppStmt[0]) == 100)
        {
          int v10 = sqlite3_column_int(ppStmt[0], 0);
          int v11 = sqlite3_column_int(ppStmt[0], 1);
          int v12 = sqlite3_column_int(ppStmt[0], 2);
          int v13 = sqlite3_column_int(ppStmt[0], 3);
          int v14 = sqlite3_column_int(ppStmt[0], 4);
          CFDictionaryRef v15 = (const UInt8 *)sqlite3_column_blob(ppStmt[0], 5);
          int v16 = sqlite3_column_bytes(ppStmt[0], 5);
          if (v15)
          {
            if (v16 >= 1)
            {
              CFDataRef v17 = CFDataCreateWithBytesNoCopy(allocator, v15, v16, v7);
              if (v17)
              {
                CFDataRef v18 = v17;
                LODWORD(cf) = 0;
                int v104 = 0;
                if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v17, 0, (int *)&cf, &v104))
                {
                  double v19 = (double)v11;
                  double v20 = (double)v12;
                  double v21 = (double)v13;
                  v110.size.signed int height = (double)v14;
                  v110.origin.x = (double)v11;
                  v110.origin.y = (double)v12;
                  v110.size.signed int width = (double)v13;
                  if (CGRectIsEmpty(v110))
                  {
                    double v22 = (double)(int)cf;
                    double v23 = (double)v104;
                    BOOL IsLessThanOrEqualToPixelSize = ABPersonImageFormatIsLessThanOrEqualToPixelSize(1u, (signed int)cf, v104);
                    double v25 = 0.0;
                    double v26 = 0.0;
                    if (IsLessThanOrEqualToPixelSize)
                    {
                      double v25 = ABImageUtilsCenteredRectWithFullScreenRatioForRect(0.0, 0.0, v22, v23);
                      double v22 = v27;
                      double v23 = v28;
                    }
                    double v19 = ABImageUtilsCenteredSquareForRect(v25, v26, v22, v23);
                    double v20 = v29;
                    double v21 = v30;
                  }
                  sqlite3_bind_int(pStmt, 1, v10);
                  sqlite3_bind_int(pStmt, 2, (int)v19);
                  sqlite3_bind_int(pStmt, 3, (int)v20);
                  sqlite3_bind_int(pStmt, 4, (int)v21);
                  CFArrayRef v31 = pStmt;
                  BytePtr = CFDataGetBytePtr(v18);
                  int Length = CFDataGetLength(v18);
                  sqlite3_bind_blob(v31, 5, BytePtr, Length, 0);
                  sqlite3_step(pStmt);
                  sqlite3_reset(pStmt);
                  sqlite3_clear_bindings(pStmt);
                }
                CFRelease(v18);
              }
            }
          }
        }
        sqlite3_reset(ppStmt[0]);
        int v34 = *v8++;
        int v9 = v34;
      }
      while (v34 != -1);
      sqlite3_exec(*(sqlite3 **)(a2 + 8), "INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) SELECT record_id, format, 2, data FROM ABImage WHERE format IN (0, 1) AND record_id IN (SELECT record_id FROM ABImage WHERE format=2) AND data IS NOT NULL;",
        0,
        0,
        0);
      a4 = (__CFArray *)v96;
      while (sqlite3_step(v107) == 100)
      {
        int v98 = sqlite3_column_int(v107, 0);
        int v35 = sqlite3_column_int(v107, 1);
        int v36 = sqlite3_column_int(v107, 2);
        signed int v37 = sqlite3_column_int(v107, 3);
        CFArrayRef v38 = (const UInt8 *)sqlite3_column_blob(v107, 4);
        int v39 = sqlite3_column_bytes(v107, 4);
        if (v38)
        {
          CFDataRef v40 = CFDataCreateWithBytesNoCopy(allocator, v38, v39, v7);
          CFTypeRef cf = 0;
          int v104 = 0;
          int v102 = 0;
          if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v40, (CGImageSource **)&cf, &v104, &v102))
          {
            CFDataRef v97 = v40;
            int v41 = v104;
            int v42 = v102;
            double v43 = (double)v37;
            double PixelWidth = (double)v37;
            double PixelHeight = (double)v37;
            if (ABPersonImageFormatIsLessThanOrEqualToPixelSize(0, v37, v37))
            {
              double PixelWidth = (double)(int)ABPersonImageFormatGetPixelWidth(0);
              double PixelHeight = (double)(int)ABPersonImageFormatGetPixelHeight(0);
            }
            double v46 = (double)v35;
            double v99 = (double)v42;
            double v100 = (double)v41;
            CGImageRef ImageFromImageSourceWithSizeCropRectMaxSize = ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize((CGImageSource *)cf, (double)v41, (double)v42, (double)v35, (double)v36, (double)v37, (double)v37, PixelWidth, PixelHeight);
            if (ImageFromImageSourceWithSizeCropRectMaxSize)
            {
              double v48 = ImageFromImageSourceWithSizeCropRectMaxSize;
              float Scale = ABPersonImageFormatGetScale(-1);
              ScaledImageData = ABImageUtilsCreateScaledImageData(v48, 8u, @"public.jpeg", 0, PixelWidth / Scale, PixelHeight / Scale, Scale);
              CFRelease(v48);
              if (ScaledImageData)
              {
                sqlite3_bind_int(v105, 1, v98);
                sqlite3_bind_int(v105, 2, 0);
                v51 = v105;
                uint64_t v52 = CFDataGetBytePtr(ScaledImageData);
                int v53 = CFDataGetLength(ScaledImageData);
                sqlite3_bind_blob(v51, 3, v52, v53, 0);
                sqlite3_step(v105);
                sqlite3_reset(v105);
                sqlite3_clear_bindings(v105);
                CFRelease(ScaledImageData);
              }
            }
            double v54 = (double)v36 + v43 * -0.25;
            v113.origin.x = 0.0;
            v113.origin.y = 0.0;
            v111.origin.x = (double)v35;
            v111.origin.y = v54;
            v111.size.signed int width = v43;
            v111.size.signed int height = v43 * 1.5;
            v113.size.signed int height = v99;
            v113.size.signed int width = (double)v41;
            CGRect v112 = CGRectIntersection(v111, v113);
            signed int width = (int)v112.size.width;
            signed int height = (int)v112.size.height;
            int v57 = 1;
            uint64_t v58 = &dword_19DD554A8;
            do
            {
              if (ABPersonImageFormatIsLessThanOrEqualToPixelSize(v57, width, height))
              {
                int v59 = ABPersonImageFormatGetPixelWidth(v57);
                int v60 = ABPersonImageFormatGetPixelHeight(v57);
                CGImageRef v61 = ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize((CGImageSource *)cf, v100, v99, v46, v54, v43, v43 * 1.5, PixelWidth, PixelHeight);
                if (v61)
                {
                  uint64_t v62 = v61;
                  float v63 = ABPersonImageFormatGetScale(v57);
                  uint64_t v64 = ABImageUtilsCreateScaledImageData(v62, 8u, @"public.jpeg", 0, (double)v59 / v63, (double)v60 / v63, v63);
                  if (v64)
                  {
                    CFDataRef v65 = v64;
                    sqlite3_bind_int(v105, 1, v98);
                    sqlite3_bind_int(v105, 2, v57);
                    uint64_t v66 = v105;
                    int v67 = CFDataGetBytePtr(v65);
                    int v68 = CFDataGetLength(v65);
                    sqlite3_bind_blob(v66, 3, v67, v68, 0);
                    sqlite3_step(v105);
                    sqlite3_reset(v105);
                    sqlite3_clear_bindings(v105);
                    CFRelease(v65);
                  }
                  CFRelease(v62);
                }
              }
              int v69 = *v58++;
              int v57 = v69;
            }
            while (v69 != -1);
            CFRelease(cf);
            CFTypeRef cf = 0;
            a4 = (__CFArray *)v96;
            CFDataRef v40 = v97;
          }
          CFRelease(v40);
        }
      }
    }
    if (ppStmt[0]) {
      sqlite3_finalize(ppStmt[0]);
    }
    if (v107) {
      sqlite3_finalize(v107);
    }
    if (pStmt) {
      sqlite3_finalize(pStmt);
    }
    if (v105) {
      sqlite3_finalize(v105);
    }
    CPSqliteConnectionPerformSQL();
  }
  if (a3 <= 5)
  {
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
LABEL_51:
    CPSqliteConnectionPerformSQL();
    goto LABEL_52;
  }
  if (a3 == 6) {
    goto LABEL_51;
  }
  if (a3 > 7) {
    return 0;
  }
LABEL_52:
  CFIndex v107 = 0;
  CFAllocatorRef v70 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  CFMutableArrayRef v72 = CFArrayCreateMutable(v70, 0, 0);
  uint64_t v73 = v72;
  if (Mutable) {
    BOOL v74 = v72 == 0;
  }
  else {
    BOOL v74 = 1;
  }
  if (v74) {
    goto LABEL_82;
  }
  if (!sqlite3_prepare(*(sqlite3 **)(a2 + 8), "SELECT record_id, data, ROWID FROM ABThumbnailImage WHERE format=?;",
          -1,
          &v107,
          0))
  {
    sqlite3_bind_int(v107, 1, 5);
    while (sqlite3_step(v107) == 100)
    {
      uint64_t v75 = (const UInt8 *)sqlite3_column_blob(v107, 1);
      int v76 = sqlite3_column_bytes(v107, 1);
      if (v76 >= 1)
      {
        CFDataRef v77 = CFDataCreate(0, v75, v76);
        if (v77)
        {
          CFDataRef v78 = v77;
          if ((ABImageUtilsIsImageDataInSyncCompatibleFormat(v77) & 1) == 0)
          {
            v79 = (const void *)sqlite3_column_int64(v107, 0);
            CFArrayAppendValue(Mutable, v79);
            pthread_mutexattr_t v80 = (const void *)sqlite3_column_int64(v107, 2);
            CFArrayAppendValue(v73, v80);
          }
          CFRelease(v78);
        }
      }
    }
    if (CFArrayGetCount(v73) >= 1)
    {
      v81 = CFStringCreateMutable(v70, 0);
      if (v81)
      {
        ABRecordID v82 = v81;
        CFStringAppend(v81, @"DELETE FROM ABThumbnailImage WHERE ROWID IN(?");
        CFIndex Count = CFArrayGetCount(v73);
        uint64_t v84 = Count;
        if (Count >= 2)
        {
          CFIndex v85 = Count - 1;
          do
          {
            CFStringAppend(v82, @", ?");
            --v85;
          }
          while (v85);
        }
        CFStringAppend(v82, @";"));
        ppStmt[0] = 0;
        CFIndex v86 = *(sqlite3 **)(a2 + 8);
        CFDictionaryRef v87 = (const char *)_CPCreateUTF8StringFromCFString();
        if (sqlite3_prepare(v86, v87, -1, ppStmt, 0))
        {
          ABDiagnosticsEnabled();
          _ABLog2(3, (uint64_t)"_Bool _ABCImageStoreDeleteSyncThumbnailImagesWithRowIDs(CPSqliteConnection *, CFArrayRef)", 463, 0, @"error preparing delete statement for invalid sync thumbnails", v88, v89, v90, v96);
        }
        else
        {
          if (v84 >= 1)
          {
            CFIndex v91 = 0;
            do
            {
              v92 = ppStmt[0];
              CFIndex v93 = v91 + 1;
              int ValueAtIndex = CFArrayGetValueAtIndex(v73, v91);
              sqlite3_bind_int(v92, v93, ValueAtIndex);
              CFIndex v91 = v93;
            }
            while (v84 != v93);
          }
          while (!sqlite3_step(ppStmt[0]))
            ;
          sqlite3_finalize(ppStmt[0]);
        }
        CFRelease(v82);
      }
    }
    if (a4)
    {
      v109.length = CFArrayGetCount(Mutable);
      v109.location = 0;
      CFArrayAppendArray(a4, Mutable, v109);
    }
    sqlite3_finalize(v107);
LABEL_82:
    if (!Mutable) {
      goto LABEL_84;
    }
  }
  CFRelease(Mutable);
LABEL_84:
  if (v73) {
    CFRelease(v73);
  }
  return 0;
}

CFStringRef ABCImageStoreCreateWithAddressBookPath(CFStringRef theString)
{
  if (theString)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
    v5.length = CFStringGetLength(MutableCopy);
    v5.location = 0;
    uint64_t v3 = 0;
    if (CFStringFindAndReplace(MutableCopy, @"AddressBook.sqlitedb", @"AddressBookImages.sqlitedb", v5, 1uLL) == 1)uint64_t v3 = ABCImageStoreCreateWithPathAndForceInProcessMigration(); {
    CFRelease(MutableCopy);
    }
    return (CFStringRef)v3;
  }
  else
  {
    return ABCImageStoreCreateWithAddressBookAndForceInProcessMigration(0);
  }
}

uint64_t ABCImageStoreCopyImagesForRecordWithFormat(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  CPRecordStoreGetDatabase();
  if (a4 == 2)
  {
    uint64_t v6 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v6)
    {
      CFAllocatorRef v7 = *(sqlite3_stmt **)(v6 + 8);
      if (v7)
      {
        int ID = CPRecordGetID();
        sqlite3_bind_int(v7, 1, ID);
LABEL_8:
        uint64_t v12 = CPRecordStoreProcessStatement();
        CPSqliteStatementReset();
        return v12;
      }
    }
  }
  else
  {
    uint64_t v9 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v9)
    {
      int v10 = *(sqlite3_stmt **)(v9 + 8);
      if (v10)
      {
        int v11 = CPRecordGetID();
        sqlite3_bind_int(v10, 1, v11);
        sqlite3_bind_int(*(sqlite3_stmt **)(v9 + 8), 2, a4);
        goto LABEL_8;
      }
    }
  }
  return 0;
}

uint64_t ABCImageStoreHasImagesForRecordWithFormat(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if (a3 == -1)
  {
    if (_imageStoreHasFullSizeImageForRecord(a1, a2, a4)) {
      return 1;
    }
    a1 = v6;
    a2 = v5;
    a3 = -1;
    return (int)_imageStoreCountOfThumbnailImagesForRecordWithFormat(a1, a2, a3, a4) > 0;
  }
  if (a3 != 2) {
    return (int)_imageStoreCountOfThumbnailImagesForRecordWithFormat(a1, a2, a3, a4) > 0;
  }
  return _imageStoreHasFullSizeImageForRecord(a1, a2, a4);
}

BOOL _imageStoreHasFullSizeImageForRecord(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v3 = @"SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ? AND data IS NOT NULL;";
  }
  else {
    uint64_t v3 = @"SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ?;";
  }
  CPRecordStoreGetDatabase();
  uint64_t v4 = CPSqliteDatabaseStatementForReading();
  CFRelease(v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(sqlite3_stmt **)(v4 + 8);
  if (!v5) {
    return 0;
  }
  int ID = CPRecordGetID();
  sqlite3_bind_int(v5, 1, ID);
  int v7 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v7 != 0;
}

uint64_t _imageStoreCountOfThumbnailImagesForRecordWithFormat(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = @"SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ? AND data IS NOT NULL;";
  if (a3 == -1) {
    uint64_t v5 = @"SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND data IS NOT NULL;";
  }
  uint64_t v6 = @"SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ?;";
  if (a3 != -1) {
    uint64_t v6 = @"SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ?;";
  }
  if (a4) {
    int v7 = v5;
  }
  else {
    int v7 = v6;
  }
  CPRecordStoreGetDatabase();
  uint64_t v8 = CPSqliteDatabaseStatementForReading();
  CFRelease(v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(sqlite3_stmt **)(v8 + 8);
  if (!v9) {
    return 0;
  }
  int ID = CPRecordGetID();
  sqlite3_bind_int(v9, 1, ID);
  if (a3 != -1) {
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a3);
  }
  uint64_t v11 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v11;
}

uint64_t ABCImageStoreHasImagesForRecord(uint64_t a1, uint64_t a2, int a3)
{
  return ABCImageStoreHasImagesForRecordWithFormat(a1, a2, -1, a3);
}

sqlite3_stmt *ABCImageStoreRemoveImagesForRecord(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a2) {
    return 0;
  }
  CPRecordStoreGetDatabase();
  uint64_t v6 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  if (v6)
  {
    int v7 = *(sqlite3_stmt **)(v6 + 8);
    if (v7)
    {
      int ID = CPRecordGetID();
      sqlite3_bind_int(v7, 1, ID);
      if (a4 != -1) {
        sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 2, a4);
      }
      CPSqliteStatementIntegerResult();
      int v7 = 0;
      CPSqliteStatementReset();
    }
  }
  else
  {
    int v7 = 0;
  }
  if (a4 == -1)
  {
    uint64_t v10 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v10)
    {
      uint64_t v11 = *(sqlite3_stmt **)(v10 + 8);
      if (v11)
      {
        int v12 = CPRecordGetID();
        sqlite3_bind_int(v11, 1, v12);
        CPSqliteStatementIntegerResult();
        int v7 = 0;
        CPSqliteStatementReset();
      }
    }
  }
  return v7;
}

uint64_t ABCImageStoreRemoveImagesForRecordIds(const __CFString *a1, uint64_t a2, CFArrayRef theArray, int a4)
{
  if (!theArray) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t result = 1;
  if (a2 && Count)
  {
    CPRecordStoreGetDatabase();
    CFIndex v9 = CFArrayGetCount(theArray);
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef theArraya = theArray;
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, theArray);
    for (i = MutableCopy; ; CFArrayRef MutableCopy = i)
    {
      if (!CFArrayGetCount(MutableCopy))
      {
        CFRelease(i);
        CFIndex v25 = CFArrayGetCount(theArraya);
        double v26 = (const void **)malloc_type_malloc(8 * v25, 0x80040B8603338uLL);
        v31.location = 0;
        v31.length = v25;
        CFArrayGetValues(theArraya, v31, v26);
        CFSetRef v27 = CFSetCreate(allocator, v26, v25, 0);
        ABCPersonInvalidateSpecificImageDataForSetOfPersonIds(a1);
        CFRelease(v27);
        free(v26);
        return 1;
      }
      if (a4 == -1)
      {
        uint64_t v12 = CPSqliteDatabaseStatementForWriting();
        uint64_t v13 = CPSqliteDatabaseStatementForWriting();
        if (!v12) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v12 = CPSqliteDatabaseStatementForWriting();
        uint64_t v13 = 0;
        if (!v12) {
          goto LABEL_35;
        }
      }
      int v14 = *(sqlite3_stmt **)(v12 + 8);
      if (!v14 || v13 && !*(void *)(v13 + 8))
      {
LABEL_35:
        CFArrayGetCount(i);
        CFRelease(i);
        return 0;
      }
      if (a4 == -1)
      {
        int v15 = 1;
      }
      else
      {
        sqlite3_bind_int(v14, 1, a4);
        int v15 = 2;
      }
      if (CFArrayGetCount(i) <= 100)
      {
        CFIndex v16 = CFArrayGetCount(i);
        if (v16 < 1) {
          goto LABEL_25;
        }
      }
      else
      {
        CFIndex v16 = 100;
      }
      for (uint64_t j = 0; j != v16; ++j)
      {
        CFDataRef v18 = *(sqlite3_stmt **)(v12 + 8);
        int ValueAtIndex = CFArrayGetValueAtIndex(i, 0);
        sqlite3_bind_int(v18, v15 + j, ValueAtIndex);
        if (v13)
        {
          double v20 = *(sqlite3_stmt **)(v13 + 8);
          int v21 = CFArrayGetValueAtIndex(i, 0);
          sqlite3_bind_int(v20, v15 + j, v21);
        }
        CFArrayRemoveValueAtIndex(i, 0);
      }
      if (v16 <= 99)
      {
        v15 += j;
LABEL_25:
        CFIndex v22 = v16 - 100;
        do
        {
          int v23 = v15 + 1;
          sqlite3_bind_null(*(sqlite3_stmt **)(v12 + 8), v15);
          if (v13)
          {
            sqlite3_bind_null(*(sqlite3_stmt **)(v13 + 8), v15 + 1);
            int v23 = v15 + 2;
          }
          int v15 = v23;
        }
        while (!__CFADD__(v22++, 1));
      }
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      if (v13)
      {
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
      ABRegulatoryLogModifyContactsData((uint64_t)a1);
    }
  }
  return result;
}

CFStringRef ABCImageStoreGetCountOfImagesWithFormat(uint64_t a1, uint64_t a2)
{
  if (a2 == 2)
  {
    return (CFStringRef)CPRecordStoreGetCountOfInstancesOfClassWhere();
  }
  else
  {
    CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"format = %d", a2);
    if (result)
    {
      CFStringRef v3 = result;
      uint64_t CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
      CFRelease(v3);
      return (CFStringRef)CountOfInstancesOfClassWhere;
    }
  }
  return result;
}

BOOL ABCImageStoreHasIndexes()
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  int v0 = CPSqliteConnectionPerformSQL();
  int v1 = CPSqliteConnectionPerformSQL();
  BOOL v3 = v0 != 1 && v1 != 1;
  CPSqliteDatabaseReleaseSqliteConnection();
  return v3;
}

uint64_t ___databaseDeleted_block_invoke()
{
  CFOptionFlags v1 = 0;
  return CFUserNotificationDisplayAlert(0.0, 0, 0, 0, 0, @"AddressBook", @"The image database was corrupt.\n\nOpen a radar to PEP Address Book and attach syslog, AB logs and /tmp/AddressBook*", @"OK", 0, 0, &v1);
}

uint64_t ABCMultiValueGetTypeID()
{
  return kABCMultiValueTypeID;
}

uint64_t ABCMultiValueRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  kABCMultiValueTypeint ID = result;
  return result;
}

_OWORD *ABCMultiValueCreate(int a1)
{
  if (!a1) {
    return 0;
  }
  pthread_once(&kABCMultiValueRegisterClass, (void (*)(void))ABCMultiValueRegisterClass);
  uint64_t result = (_OWORD *)_CFRuntimeCreateInstance();
  if (result)
  {
    result[2] = 0u;
    result[3] = 0u;
    result[1] = 0u;
    *((_DWORD *)result + 4) = a1;
  }
  return result;
}

CFIndex ABCMultiValueGetCount(uint64_t a1)
{
  if (a1 && (CFArrayRef v1 = *(const __CFArray **)(a1 + 40)) != 0) {
    return CFArrayGetCount(v1);
  }
  else {
    return 0;
  }
}

CFArrayRef ABCMultiValueCopyValueAtIndex(const __CFArray *result, CFIndex a2)
{
  if (result)
  {
    CFArrayRef v2 = result;
    uint64_t result = (const __CFArray *)*((void *)result + 5);
    if (result)
    {
      if (CFArrayGetCount(result) <= a2)
      {
        return 0;
      }
      else
      {
        int v4 = ABCSingleValueType(*((_DWORD *)v2 + 4));
        uint64_t v5 = ABCCallBacksForType(v4);
        uint64_t result = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v2 + 5), a2);
        uint64_t v6 = *v5;
        if (*v5)
        {
          return (const __CFArray *)((uint64_t (*)(const __CFArray *))v6)(result);
        }
      }
    }
  }
  return result;
}

CFArrayRef ABCMultiValueCopyValues(uint64_t a1)
{
  if (a1 && (CFArrayRef v1 = *(const __CFArray **)(a1 + 40)) != 0) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
  }
  else {
    return 0;
  }
}

CFArrayRef *ABCMultiValueCopyLabelAtIndex(CFArrayRef *result, CFIndex a2)
{
  if (result)
  {
    BOOL v3 = result;
    uint64_t result = 0;
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (v3[4])
      {
        if (CFArrayGetCount(v3[4]) <= a2)
        {
          return 0;
        }
        else
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(v3[4], a2);
          uint64_t result = 0;
          if (ValueAtIndex)
          {
            if ((const void *)*MEMORY[0x1E4F1D260] != ValueAtIndex)
            {
              CFRetain(ValueAtIndex);
              return (CFArrayRef *)ValueAtIndex;
            }
          }
        }
      }
    }
  }
  return result;
}

CFArrayRef ABCMultiValueGetLabelAtIndex(const __CFArray *result, CFIndex a2)
{
  if (result)
  {
    CFArrayRef v2 = result;
    uint64_t result = (const __CFArray *)*((void *)result + 4);
    if (result)
    {
      if (CFArrayGetCount(result) <= a2)
      {
        return 0;
      }
      else
      {
        uint64_t result = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v2 + 4), a2);
        if ((const __CFArray *)*MEMORY[0x1E4F1D260] == result) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueGetPrimaryIdentifier(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 56);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFIndex ABCMultiValueIndexForIdentifier(uint64_t a1, int a2)
{
  if (!a1) {
    return -1;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
  if (!v2) {
    return -1;
  }
  v4.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  v4.location = 0;
  return CFArrayGetFirstIndexOfValue(v2, v4, (const void *)a2);
}

uint64_t ABCMultiValueGetIdentifierAtIndex(uint64_t a1, CFIndex a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
  if (v3 && CFArrayGetCount(v3) > a2) {
    return (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFArrayRef *ABCMultiValueCopyUUIDAtIndex(CFArrayRef *result, CFIndex a2)
{
  if (result)
  {
    CFArrayRef v3 = result;
    uint64_t result = 0;
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (v3[6])
      {
        if (CFArrayGetCount(v3[6]) <= a2)
        {
          return 0;
        }
        else
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(v3[6], a2);
          uint64_t result = 0;
          if (ValueAtIndex)
          {
            if ((const void *)*MEMORY[0x1E4F1D260] != ValueAtIndex)
            {
              CFRetain(ValueAtIndex);
              return (CFArrayRef *)ValueAtIndex;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ABCMultiValuePropertyType(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

CFIndex ABCMultiValueGetFirstIndexOfValue(uint64_t a1, const void *a2)
{
  if (!a1) {
    return -1;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 40);
  if (!v2) {
    return -1;
  }
  v4.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 40));
  v4.location = 0;
  return CFArrayGetFirstIndexOfValue(v2, v4, a2);
}

uint64_t ABCMultiValueGetFirstIndexOfValueWithCallback(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, const void *))
{
  if (!a1) {
    return -1;
  }
  CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
  if (!v4) {
    return -1;
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (Count < 1) {
    return -1;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  while (1)
  {
    int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v9);
    if (a3(a2, ValueAtIndex)) {
      break;
    }
    if (v8 == ++v9) {
      return -1;
    }
  }
  return v9;
}

CFIndex ABCMultiValueGetFirstIndexOfLabel(uint64_t a1, const void *a2)
{
  if (!a1) {
    return -1;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 32);
  if (!v2) {
    return -1;
  }
  v4.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v4.location = 0;
  return CFArrayGetFirstIndexOfValue(v2, v4, a2);
}

CFTypeRef ABCMultiValueCreateCopy(CFTypeRef cf)
{
  if (cf)
  {
    if (*((unsigned char *)cf + 60)) {
      return _copyMultivalue((uint64_t)cf);
    }
    else {
      return CFRetain(cf);
    }
  }
  return cf;
}

_OWORD *_copyMultivalue(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v2 = ABCMultiValueCreate(*(_DWORD *)(a1 + 16));
  if (v2)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 40);
    CFRange v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v3) {
      *((void *)v2 + 5) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v3);
    }
    CFArrayRef v5 = *(const __CFArray **)(a1 + 24);
    if (v5) {
      *((void *)v2 + 3) = CFArrayCreateMutableCopy(*v4, 0, v5);
    }
    CFArrayRef v6 = *(const __CFArray **)(a1 + 32);
    if (v6) {
      *((void *)v2 + 4) = CFArrayCreateMutableCopy(*v4, 0, v6);
    }
    CFArrayRef v7 = *(const __CFArray **)(a1 + 48);
    if (v7) {
      *((void *)v2 + 6) = CFArrayCreateMutableCopy(*v4, 0, v7);
    }
    int v8 = *(_DWORD *)(a1 + 56);
    if (v8) {
      *((_DWORD *)v2 + 14) = v8;
    }
  }
  return v2;
}

_OWORD *ABCMultiValueCreateMutable(int a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t result = ABCMultiValueCreate(a1);
  if (result) {
    *((unsigned char *)result + 60) |= 1u;
  }
  return result;
}

_OWORD *ABCMultiValueCreateMutableCopy(_OWORD *result)
{
  if (result)
  {
    uint64_t result = _copyMultivalue((uint64_t)result);
    if (result) {
      *((unsigned char *)result + 60) |= 1u;
    }
  }
  return result;
}

__CFArray *ABCMultiValueAdd(CFMutableArrayRef *a1, void *a2, const void *a3, const __CFString *a4, int *a5)
{
  if (!a1 || !a2) {
    return 0;
  }
  CFArrayRef v10 = a1[5];
  if (v10) {
    CFIndex Count = CFArrayGetCount(v10);
  }
  else {
    CFIndex Count = 0;
  }
  return ABCMultiValueInsertAndCreateIdentifier(a1, a2, a3, Count, a4, a5, 1);
}

__CFArray *ABCMultiValueInsert(CFMutableArrayRef *a1, void *a2, const void *a3, CFIndex a4, const __CFString *a5, int *a6)
{
  return ABCMultiValueInsertAndCreateIdentifier(a1, a2, a3, a4, a5, a6, 1);
}

__CFArray *ABCMultiValueInsertAndCreateIdentifier(CFMutableArrayRef *a1, void *value, const void *a3, CFIndex idx, CFStringRef a5, int *a6, int a7)
{
  uint64_t result = 0;
  if (a1)
  {
    if (value)
    {
      if (a1[5]
        || (uint64_t result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
            (a1[5] = result) != 0))
      {
        if (a1[4]
          || (uint64_t result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
              (a1[4] = result) != 0))
        {
          if (a1[3]
            || (uint64_t result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0), (a1[3] = result) != 0))
          {
            if (a1[6]
              || (uint64_t result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
                  (a1[6] = result) != 0))
            {
              if (!a6 || a7)
              {
                CFArrayRef v16 = a1[5];
                if (v16 && (CFIndex Count = CFArrayGetCount(v16), Count >= 1))
                {
                  CFIndex v18 = Count;
                  CFIndex v19 = 0;
                  int v15 = 0;
                  do
                  {
                    int IdentifierAtIndex = ABCMultiValueGetIdentifierAtIndex((uint64_t)a1, v19);
                    if (IdentifierAtIndex >= v15) {
                      int v15 = IdentifierAtIndex + 1;
                    }
                    ++v19;
                  }
                  while (v18 != v19);
                  if (!a6) {
                    goto LABEL_22;
                  }
                }
                else
                {
                  int v15 = 0;
                  if (!a6) {
                    goto LABEL_22;
                  }
                }
                *a6 = v15;
              }
              else
              {
                int v15 = *a6;
              }
LABEL_22:
              if (a5)
              {
                CFUUIDRef v21 = 0;
              }
              else
              {
                CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                CFUUIDRef v21 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
                if (v21)
                {
                  a5 = CFUUIDCreateString(v22, v21);
                  CFRelease(v21);
                  CFUUIDRef v21 = (const __CFUUID *)a5;
                }
                else
                {
                  a5 = 0;
                }
              }
              CFArrayInsertValueAtIndex(a1[5], idx, value);
              if (a3) {
                int v23 = a3;
              }
              else {
                int v23 = (const void *)*MEMORY[0x1E4F1D260];
              }
              CFArrayInsertValueAtIndex(a1[4], idx, v23);
              CFArrayInsertValueAtIndex(a1[3], idx, (const void *)v15);
              CFArrayInsertValueAtIndex(a1[6], idx, a5);
              if (v21) {
                CFRelease(v21);
              }
              return (__CFArray *)1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueRemove(uint64_t result, CFIndex a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 40);
    if (result)
    {
      if (CFArrayGetCount((CFArrayRef)result) <= a2)
      {
        return 0;
      }
      else
      {
        if (*(_DWORD *)(v2 + 56) == CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), a2)) {
          *(_DWORD *)(v2 + 56) = 0;
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 24), a2);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 32), a2);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 40), a2);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 48), a2);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueReplaceValue(uint64_t result, const void *a2, CFIndex a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(result + 40);
    if (result)
    {
      if (CFArrayGetCount((CFArrayRef)result) <= a3)
      {
        return 0;
      }
      else
      {
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v3 + 40), a3, a2);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueReplaceLabel(uint64_t result, const void *a2, CFIndex a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(result + 32);
    if (result)
    {
      if (CFArrayGetCount((CFArrayRef)result) <= a3)
      {
        return 0;
      }
      else
      {
        if (a2) {
          CFArrayRef v6 = a2;
        }
        else {
          CFArrayRef v6 = (const void *)*MEMORY[0x1E4F1D260];
        }
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v3 + 32), a3, v6);
        return 1;
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueSetPrimaryIdentifier(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (a2)
    {
      CFArrayRef v4 = *(const __CFArray **)(v3 + 24);
      if (v4)
      {
        v5.length = CFArrayGetCount(*(CFArrayRef *)(v3 + 24));
        v5.location = 0;
        if (CFArrayGetFirstIndexOfValue(v4, v5, (const void *)a2) == -1)
        {
          return 0;
        }
        else
        {
          *(_DWORD *)(v3 + 56) = a2;
          return 1;
        }
      }
    }
  }
  return result;
}

void ABCMultiValueShow(uint64_t a1)
{
  if (a1)
  {
    int v2 = ABCSingleValueType(*(_DWORD *)(a1 + 16));
    uint64_t v3 = ABCCallBacksForType(v2);
    CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        CFIndex v7 = 0;
        int v8 = (FILE **)MEMORY[0x1E4F143C8];
        do
        {
          CFIndex v9 = ABCMultiValueCopyLabelAtIndex((CFArrayRef *)a1, v7);
          CFArrayRef v10 = ABCMultiValueCopyValueAtIndex((const __CFArray *)a1, v7);
          if (v9) {
            uint64_t v11 = (__CFString *)v9;
          }
          else {
            uint64_t v11 = @"(NULL)";
          }
          CFShow(v11);
          fwrite(": ", 2uLL, 1uLL, *v8);
          ((void (*)(const __CFArray *))v3[2])(v10);
          fputc(10, *v8);
          if (v9) {
            CFRelease(v9);
          }
          uint64_t v12 = v3[1];
          if (v12) {
            ((void (*)(const __CFArray *))v12)(v10);
          }
          ++v7;
        }
        while (v6 != v7);
      }
    }
  }
}

uint64_t ABCMultiValueLoad(void *a1, int a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
  return ABCDBContextFetchMultiValuePropertyIntoRecord(a3, a1, a2, v6);
}

CFArrayRef ABCMultiValueBatchLoad(const __CFArray *result, int a2, uint64_t a3)
{
  if (result)
  {
    CFArrayRef v5 = result;
    uint64_t result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      if (*(void *)(a3 + 16))
      {
        CFArrayGetValueAtIndex(v5, 0);
        CPRecordStoreGetDatabase();
        uint64_t result = (const __CFArray *)CPSqliteDatabaseConnectionForWriting();
        if (result)
        {
          uint64_t v6 = (uint64_t)result;
          int v7 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
          return (const __CFArray *)ABCDBContextFetchMultiValuePropertyIntoRecords(v6, v5, a2, v7);
        }
      }
    }
  }
  return result;
}

uint64_t ABCMultiValueSave(const void *a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  CFArrayRef Value = (const __CFArray *)ABCRecordGetValue(a1, a2);
  int v7 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
  return ABCDBContextSaveMultiValue(a3, a1, v4, Value, v7);
}

void ABCMultiValueDestroy(void *a1)
{
  if (a1)
  {
    int v2 = (const void *)a1[4];
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
    }
    uint64_t v3 = (const void *)a1[3];
    if (v3)
    {
      CFRelease(v3);
      a1[3] = 0;
    }
    int v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    CFArrayRef v5 = (const void *)a1[6];
    if (v5)
    {
      CFRelease(v5);
      a1[6] = 0;
    }
  }
}

__CFString *ABCMultiValueCopyDebugDescription(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (a1)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 40);
    if (v3)
    {
      CFIndex Count = CFArrayGetCount(v3);
      CFStringAppendFormat(Mutable, 0, @"ABMultiValueRef %p with %ld value(s)\n", a1, Count);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFArrayRef v6 = *(const __CFArray **)(a1 + 32);
          if (v6) {
            int ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v6, i);
          }
          else {
            int ValueAtIndex = @"<NULL>";
          }
          int v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
          CFStringAppendFormat(Mutable, 0, @"    %ld: %@ (%p) - %@ (%p)\n", i, ValueAtIndex, ValueAtIndex, v8, v8);
        }
      }
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, @"ABMultiValueRef %p with %ld value(s)\n", a1, 0);
    }
  }
  return Mutable;
}

__CFString *ABCPersonNameForProperty(int a1)
{
  if (kABCPhoneProperty == a1) {
    return @"Phone";
  }
  if (kABCEmailProperty == a1) {
    return @"Email";
  }
  if (kABCFirstNameProperty == a1) {
    return @"First";
  }
  if (kABCFirstNamePhoneticProperty == a1) {
    return @"FirstPhonetic";
  }
  if (kABCFirstNamePronunciationProperty == a1) {
    return @"FirstPronunciation";
  }
  if (kABCMiddleNameProperty == a1) {
    return @"Middle";
  }
  if (kABCMiddleNamePhoneticProperty == a1) {
    return @"MiddlePhonetic";
  }
  if (kABCMiddleNamePronunciationProperty == a1) {
    return @"MiddlePronunciation";
  }
  if (kABCLastNameProperty == a1) {
    return @"Last";
  }
  if (kABCLastNamePhoneticProperty == a1) {
    return @"LastPhonetic";
  }
  if (kABCLastNamePronunciationProperty == a1) {
    return @"LastPronunciation";
  }
  if (kABCAddressingGrammarProperty == a1) {
    return @"AddressingGrammar";
  }
  if (kABCOrganizationProperty == a1) {
    return @"Organization";
  }
  if (kABCOrganizationPhoneticProperty == a1) {
    return @"OrganizationPhonetic";
  }
  if (kABCOrganizationPronunciationProperty == a1) {
    return @"OrganizationPronunciation";
  }
  if (kABCDepartmentProperty == a1) {
    return @"Department";
  }
  if (kABCDateProperty == a1) {
    return @"Date";
  }
  if (kABCInstantMessageProperty == a1) {
    return @"IM";
  }
  if (kABCNoteProperty == a1) {
    return @"Note";
  }
  if (kABCImageProperty == a1) {
    return @"Image";
  }
  if (kABCKindProperty == a1) {
    return @"Kind";
  }
  if (kABCSoundProperty == a1) {
    return @"Sound";
  }
  if (kABCBirthdayProperty == a1) {
    return @"Birthday";
  }
  if (kABCJobTitleProperty == a1) {
    return @"JobTitle";
  }
  if (kABCNicknameProperty == a1) {
    return @"Nickname";
  }
  if (kABCPreviousFamilyNameProperty == a1) {
    return @"PreviousFamilyName";
  }
  if (kABCPrefixProperty == a1) {
    return @"Prefix";
  }
  if (kABCSuffixProperty == a1) {
    return @"Suffix";
  }
  if (kABCURLProperty == a1) {
    return @"URL";
  }
  if (kABCRelatedNamesProperty == a1) {
    return @"RelatedNames";
  }
  if (kABCFirstSortProperty == a1) {
    return @"FirstSort";
  }
  if (kABCLastSortProperty == a1) {
    return @"LastSort";
  }
  if (kABCCreationDateProperty == a1) {
    return @"CreationDate";
  }
  if (kABCModificationDateProperty == a1) {
    return @"ModificationDate";
  }
  if (kABCCompositeNameFallbackProperty == a1) {
    return @"CompositeNameFallback";
  }
  if (kABCSyntheticPropertiesReset == a1) {
    return @"SyntheticPropertiesReset";
  }
  if (kABCPersonExternalIdentifierProperty == a1) {
    return @"ExternalIdentifier";
  }
  if (kABCPersonStoreIDProperty == a1) {
    return @"StoreID";
  }
  if (kABCPersonExternalModificationTagProperty == a1) {
    return @"ExternalModificationTag";
  }
  if (kABCPersonExternalUUIDProperty == a1) {
    return @"ExternalUUID";
  }
  if (kABCPersonImageURIProperty == a1) {
    return @"ImageURI";
  }
  if (kABCPersonStoreReferenceProperty == a1) {
    return @"StoreReference";
  }
  if (kABCAddressProperty == a1) {
    return @"Address";
  }
  if (kABCPersonDisplayNameProperty == a1) {
    return @"DisplayName";
  }
  if (kABCFirstSortSectionProperty == a1) {
    return @"FirstSortSection";
  }
  if (kABCLastSortSectionProperty == a1) {
    return @"LastSortSection";
  }
  if (kABCFirstSortLanguageIndexSortProperty == a1) {
    return @"FirstSortLanguageIndex";
  }
  if (kABCLastSortLanguageIndexSortProperty == a1) {
    return @"LastSortLanguageIndex";
  }
  if (kABPersonSearchProperty == a1) {
    return @"Search";
  }
  if (kABPersonNameOnlySearchProperty == a1) {
    return @"NameOnlySearch";
  }
  if (kABPersonExternalRepresentationProperty == a1) {
    return @"ExternalRepresentation";
  }
  if (kABPersonLinkProperty == a1) {
    return @"PersonLink";
  }
  if (kABPersonIsPreferredNameProperty == a1) {
    return @"IsPreferredName";
  }
  if (kABCPersonSocialProfileProperty == a1) {
    return @"SocialProfile";
  }
  if (kABCPersonContentExtensionsProperty == a1) {
    return @"GeoData";
  }
  if (kABCPersonPhonemeDataProperty == a1) {
    return @"PhonemeData";
  }
  if (kABCPersonAlternateBirthdayProperty == a1) {
    return @"AlternateBirthday";
  }
  if (kABCPersonMapsDataProperty == a1) {
    return @"MapsData";
  }
  if (kABCPersonInternalUUIDProperty == a1) {
    return @"guid";
  }
  if (kABCPersonPreferredLikenessSourceProperty == a1) {
    return @"PreferredLikenessSource";
  }
  if (kABCPersonPreferredPersonaIdentifierProperty == a1) {
    return @"PreferredPersonaIdentifier";
  }
  if (kABCChangesProperty == a1) {
    return @"Changes";
  }
  if (kABCPersonLinkUUIDProperty == a1) {
    return @"LinkUUID";
  }
  if (kABCPersonImageDataProperty == a1) {
    return @"ImageData";
  }
  if (kABCPersonThumbnailDataProperty == a1) {
    return @"ThumbnailData";
  }
  if (kABCPersonImageCropRectProperty == a1) {
    return @"ImageCropRect";
  }
  if (kABCPersonFullscreenImageDataProperty == a1) {
    return @"FullscreenImageData";
  }
  if (kABCPersonSyncImageDataProperty == a1) {
    return @"SyncImageData";
  }
  if (kABCPersonIsPreferredImageProperty == a1) {
    return @"IsPreferredImage";
  }
  if (kABCPersonHasImageDataProperty == a1) {
    return @"HasImageData";
  }
  if (kABCPersonPreferredChannelProperty == a1) {
    return @"PreferredChannel";
  }
  if (kABCPersonDowntimeWhitelistProperty == a1) {
    return @"DowntimeWhitelist";
  }
  if (kABCPersonImageTypeProperty == a1) {
    return @"ImageType";
  }
  if (kABCPersonImageHashProperty == a1) {
    return @"ImageHash";
  }
  if (kABCPersonMemojiMetadataProperty == a1) {
    return @"MemojiMetadata";
  }
  if (kABCPersonWallpaperProperty == a1) {
    return @"Wallpaper";
  }
  if (kABCPersonWallpaperMetadataProperty == a1) {
    return @"WallpaperMetadata";
  }
  if (kABCPersonWatchWallpaperImageDataProperty == a1) {
    return @"WatchWallpaperImageData";
  }
  if (kABCPersonImageBackgroundColorsDataProperty == a1) {
    return @"ImageBackgroundColorsData";
  }
  if (kABCPersonDisplayFlagsProperty == a1) {
    return @"DisplayFlags";
  }
  if (kABCPersonSensitiveContentConfigurationProperty == a1) {
    return @"SensitiveContentConfiguration";
  }
  if (kABCPersonWallpaperURIProperty == a1) {
    return @"WallpaperURI";
  }
  if (kABCPersonImageSyncFailedTimeProperty == a1) {
    return @"ImageSyncFailedTime";
  }
  if (kABCPersonWallpaperSyncFailedTimeProperty == a1) {
    return @"WallpaperSyncFailedTime";
  }
  return @"UNKNOWN_PROPERTY";
}

__CFString *ABCSmartDialerPersonNameForProperty(int a1)
{
  if (kABCFirstNameProperty == a1) {
    return @"FirstEncoding";
  }
  if (kABCMiddleNameProperty == a1) {
    return @"MiddleEncoding";
  }
  if (kABCLastNameProperty == a1) {
    return @"LastEncoding";
  }
  if (kABCOrganizationProperty == a1) {
    return @"OrganizationEncoding";
  }
  if (kABCNicknameProperty == a1) {
    return @"NickNameEncoding";
  }
  return @"UNKNOWN_PROPERTY";
}

const void *ABCPersonCreateNewPersonAndReturnError(uint64_t a1, CFErrorRef *a2)
{
  return ABCPersonCreateNewPersonInSourceAndReturnError(a1, 0, a2);
}

uint64_t ABPersonCreateTemporaryNewPersonWithRecordID()
{
  ABCInitializeLibrary();
  uint64_t v0 = CPRecordCreateWithRecordID();
  CPRecordInitializeProperty();
  CPRecordInitializeProperty();
  return v0;
}

uint64_t ABCPersonPrepareToAddToAddressBook(const void *a1, _DWORD *a2, CFTypeRef *a3)
{
  uint64_t Property = CPRecordGetProperty();
  uint64_t v7 = ABCPersonCopySource();
  int v8 = (const void *)v7;
  if (v7 || Property == -1)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t result = (uint64_t)ABAddressBookCopyDefaultSource(a2);
    int v8 = (const void *)result;
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  RecordForUniqueint ID = (const void *)ABCSourceGetRecordForUniqueID((uint64_t)a2, Property);
  if (!RecordForUniqueID) {
    goto LABEL_6;
  }
  int v8 = RecordForUniqueID;
  CFRetain(RecordForUniqueID);
LABEL_7:
  CPRecordSetProperty();
  uint64_t Policy = ABCSourceGetPolicy(v8);
  if (!Policy) {
    goto LABEL_27;
  }
  uint64_t v12 = (uint64_t)Policy;
  unsigned int ShouldAddRecord = ABPolicyShouldAddRecord((uint64_t)Policy, (uint64_t)a2, (uint64_t)a1, (uint64_t)a3);
  if ((ShouldAddRecord & 1) == 0)
  {
    CFRelease(v8);
    return 0;
  }
  unsigned int v14 = ShouldAddRecord;
  CFArrayRef v15 = (const __CFArray *)CPRecordCopyChangedProperties();
  if (!v15)
  {
LABEL_27:
    CFRelease(v8);
    a2[94] |= 0x2000u;
    return 1;
  }
  CFArrayRef v16 = v15;
  CFIndex Count = CFArrayGetCount(v15);
  unsigned int v25 = v14;
  if (Count >= 1)
  {
    CFIndex v18 = Count;
    CFIndex v19 = 0;
    int v27 = 0;
    double v26 = (void *)*MEMORY[0x1E4F1D260];
    while (1)
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v16, v19);
      CFUUIDRef v21 = (void *)ABRecordCopyValue(a1, (ABPropertyID)ValueAtIndex);
      if (ABPolicyShouldSetValue(v12, a2, a1, (uint64_t)ValueAtIndex, v21, 0, a3))
      {
        if (v21 && v21 != v26)
        {
          BOOL v22 = kABPersonAlternateBirthdayProperty == ValueAtIndex
             || kABPersonBirthdayProperty == ValueAtIndex;
          int v23 = v27;
          if (v22) {
            int v23 = 1;
          }
          int v27 = v23;
LABEL_24:
          CFRelease(v21);
          goto LABEL_25;
        }
      }
      else
      {
        ABRecordRemoveValue(a1, (ABPropertyID)ValueAtIndex, 0);
      }
      if (v21) {
        goto LABEL_24;
      }
LABEL_25:
      if (v18 == ++v19) {
        goto LABEL_32;
      }
    }
  }
  LOBYTE(v27) = 0;
LABEL_32:
  CFRelease(v16);
  CFRelease(v8);
  uint64_t result = v25;
  if (v25)
  {
    int v24 = a2[94] | 0x2000;
    a2[94] = v24;
    if (v27) {
      goto LABEL_37;
    }
    return 1;
  }
  if ((v27 & 1) == 0) {
    return 0;
  }
  int v24 = a2[94];
LABEL_37:
  a2[94] = v24 | 0x20000;
  return result;
}

BOOL ABCPersonPropertySupportsLazyLoading(int a1)
{
  return *(void *)(*(void *)(*((void *)ABCPersonClass + 10) + 40 * a1 + 16) + 24) != 0;
}

CFArrayRef ABCCopyArrayOfAllPeopleInSource(uint64_t a1, uint64_t a2)
{
  return ABCCopyArrayOfAllPeopleInSourceWithSortOrdering(a1, a2, -1);
}

CFArrayRef ABCCopyArrayOfAllPeopleInSourceWithSortOrdering(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 0;
  }
  if (a2) {
    int UniqueId = ABCRecordGetUniqueId(a2);
  }
  else {
    int UniqueId = -1;
  }
  CFArrayRef v5 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if ((UniqueId & a3) == 0xFFFFFFFF)
  {
    uint64_t v9 = CPRecordStoreCopyAllInstancesOfClass();
    if (!v9) {
      return CFArrayCreate(*v5, 0, 0, 0);
    }
    return (CFArrayRef)v9;
  }
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v7 = Mutable;
  if (UniqueId != -1) {
    CFStringAppend(Mutable, @"WHERE Storeint ID = ? ");
  }
  if (a3 == -2)
  {
    CFStringRef v8 = @" ORDER BY ROWID";
  }
  else if (a3)
  {
    if (a3 != 1) {
      goto LABEL_17;
    }
    CFStringRef v8 = @" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort";
  }
  else
  {
    CFStringRef v8 = @" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort";
  }
  CFStringAppend(v7, v8);
LABEL_17:
  uint64_t v9 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFRelease(v7);
  if (!v9) {
    return CFArrayCreate(*v5, 0, 0, 0);
  }
  return (CFArrayRef)v9;
}

sqlite3_stmt *__ABCCopyArrayOfAllPeopleInSourceWithSortOrdering_block_invoke(sqlite3_stmt *result, uint64_t a2)
{
  if (a2)
  {
    int v2 = result;
    uint64_t result = *(sqlite3_stmt **)(a2 + 8);
    if (result)
    {
      int v3 = *((_DWORD *)v2 + 8);
      if (v3 != -1) {
        return (sqlite3_stmt *)sqlite3_bind_int(result, 1, v3);
      }
    }
  }
  return result;
}

CFArrayRef ABCCopyArrayOfAllPeople(uint64_t a1)
{
  return ABCCopyArrayOfAllPeopleInSourceWithSortOrdering(a1, 0, -1);
}

uint64_t ABCCopyArrayOfPeopleAtOffsetIncludingOnlyPreferredNamePeople(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (!a1) {
    return 0;
  }
  SelectPrefixFromRecordDescriptor = (__CFString *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  uint64_t v11 = SelectPrefixFromRecordDescriptor;
  if (a5) {
    CFStringAppend(SelectPrefixFromRecordDescriptor, @" WHERE IsPreferredName = 1");
  }
  CFStringRef v12 = a2
      ? @" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort LIMIT ? OFFSET ?"
      : @" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort LIMIT ? OFFSET ?";
  CFStringAppend(v11, v12);
  CPRecordStoreGetDatabase();
  uint64_t v13 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  CFRelease(v11);
  if (!v13) {
    return 0;
  }
  unsigned int v14 = *(sqlite3_stmt **)(v13 + 8);
  if (!v14) {
    return 0;
  }
  sqlite3_bind_int(v14, 1, a4);
  sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, a3 & ~(a3 >> 31));
  uint64_t v15 = CPRecordStoreProcessStatement();
  CPSqliteStatementReset();
  return v15;
}

__CFArray *ABCCopyArrayOfKeyboardAutoCorrectionStrings(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABCCopyArrayOfKeyboardAutoCorrectionStrings(ABCAddressBookRef)", 995, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    uint64_t v10 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v10)
    {
      uint64_t v11 = *(sqlite3_stmt **)(v10 + 8);
      if (v11)
      {
        if (sqlite3_step(v11) == 100)
        {
          int v12 = 0;
          while (1)
          {
            if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), v12) != 5)
            {
              uint64_t v13 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), v12);
              if (v13)
              {
                CFStringRef v14 = CFStringCreateWithCString(v8, (const char *)v13, 0x8000100u);
                CFArrayAppendValue(Mutable, v14);
                CFRelease(v14);
              }
            }
            if (++v12 == 6)
            {
              int v12 = 0;
              if (sqlite3_step(*(sqlite3_stmt **)(v10 + 8)) != 100) {
                break;
              }
            }
          }
        }
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
      }
    }
  }
  return Mutable;
}

__CFArray *ABAddressBookCopyArrayOfAllNamePhoneticPairs(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllNamePhoneticPairs(ABCAddressBookRef)", 1038, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    uint64_t v10 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v10)
    {
      uint64_t v11 = *(sqlite3_stmt **)(v10 + 8);
      if (v11)
      {
        if (sqlite3_step(v11) == 100)
        {
          int v12 = 0;
          uint64_t v13 = (const void *)*MEMORY[0x1E4F1D260];
          while (1)
          {
            if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), 2 * v12) != 5)
            {
              CFStringRef v14 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), 2 * v12);
              if (v14)
              {
                CFStringRef v15 = CFStringCreateWithCString(v8, (const char *)v14, 0x8000100u);
                CFArrayAppendValue(Mutable, v15);
                CFRelease(v15);
                int v16 = (2 * v12) | 1;
                if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), v16) == 5
                  || (CFDataRef v17 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), v16)) == 0)
                {
                  CFArrayAppendValue(Mutable, v13);
                }
                else
                {
                  CFStringRef v18 = CFStringCreateWithCString(v8, (const char *)v17, 0x8000100u);
                  CFArrayAppendValue(Mutable, v18);
                  CFRelease(v18);
                }
              }
            }
            if (++v12 == 3)
            {
              for (int i = 6; i != 9; ++i)
              {
                if (sqlite3_column_type(*(sqlite3_stmt **)(v10 + 8), i) != 5)
                {
                  double v20 = sqlite3_column_text(*(sqlite3_stmt **)(v10 + 8), i);
                  if (v20)
                  {
                    CFStringRef v21 = CFStringCreateWithCString(v8, (const char *)v20, 0x8000100u);
                    CFArrayAppendValue(Mutable, v21);
                    CFRelease(v21);
                    CFArrayAppendValue(Mutable, v13);
                  }
                }
              }
              int v12 = 0;
              if (sqlite3_step(*(sqlite3_stmt **)(v10 + 8)) != 100) {
                break;
              }
            }
          }
        }
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
      }
    }
  }
  return Mutable;
}

uint64_t ABCPersonCopyRecordsForUniqueIDs(uint64_t result, uint64_t a2)
{
  if (result) {
    return ABCDBContextCopyRecordsForUIDsOfType(*(void *)(result + 16), a2, (uint64_t)ABCPersonClass);
  }
  return result;
}

uint64_t ABCPersonCopyRecordsForUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result) {
    return ABCDBContextCopyRecordsForUUIDsOfType(*(void *)(result + 16), a2, ABCPersonClass);
  }
  return result;
}

uint64_t ABCPersonCopyRecordsForLinkIdentifers(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2 = 0;
  if (a1 && theArray)
  {
    if (CFArrayGetCount(theArray) < 1)
    {
      return 0;
    }
    else
    {
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v6 = CFStringCreateMutable(0, 0);
      uint64_t v7 = v6;
      uint64_t v2 = 0;
      if (Mutable && v6)
      {
        CFStringAppend(v6, @"PersonLink IN (");
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v9 = Count;
          for (CFIndex i = 0; i != v9; ++i)
          {
            if (i) {
              CFStringAppend(v7, @", ");
            }
            CFStringAppend(v7, @"?");
            int ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%d", ValueAtIndex);
            if (v12)
            {
              CFStringRef v13 = v12;
              CFArrayAppendValue(Mutable, v12);
              CFRelease(v13);
            }
          }
        }
        CFStringAppend(v7, @""));
        uint64_t v2 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(*(void *)(a1 + 16), (uint64_t)ABCPersonClass, 0, v7, Mutable);
      }
      if (v7) {
        CFRelease(v7);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  return v2;
}

uint64_t ABCGetPersonCount(uint64_t result)
{
  if (result) {
    return CPRecordStoreGetCountOfInstancesOfClassWhere();
  }
  return result;
}

void ABCPersonAppendNamePartToCompositeName(uint64_t a1, uint64_t a2, __CFString *a3)
{
  CFStringRef Value = (const __CFString *)ABCRecordGetValue(a1, a2);
  if (Value)
  {
    CFStringRef v5 = Value;
    if (CFStringGetLength(Value) >= 1)
    {
      if (CFStringGetLength(a3) >= 1) {
        CFStringAppend(a3, @" ");
      }
      CFStringAppend(a3, v5);
    }
  }
}

CFMutableStringRef ABCPersonCopyCompositePhoneticName(const void *a1)
{
  ABPersonCompositeNameFormat CompositeNameFormatForRecord = ABPersonGetCompositeNameFormatForRecord(a1);
  if (CompositeNameFormatForRecord) {
    uint64_t v3 = kABCFirstNamePhoneticProperty;
  }
  else {
    uint64_t v3 = kABCLastNamePhoneticProperty;
  }
  uint64_t v4 = kABCMiddleNamePhoneticProperty;
  if (CompositeNameFormatForRecord) {
    uint64_t v5 = kABCLastNamePhoneticProperty;
  }
  else {
    uint64_t v5 = kABCFirstNamePhoneticProperty;
  }
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  ABCPersonAppendNamePartToCompositeName((uint64_t)a1, v5, Mutable);
  ABCPersonAppendNamePartToCompositeName((uint64_t)a1, v4, Mutable);
  ABCPersonAppendNamePartToCompositeName((uint64_t)a1, v3, Mutable);
  if (!CFStringGetLength(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

BOOL ABCPersonClearAddressBookPhoneCacheForPerson(BOOL result)
{
  v2[0] = 0;
  long long v3 = 0u;
  v2[1] = result;
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 40))
    {
      DWORD2(v3) = CPRecordGetID();
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v1 + 40), (CFDictionaryApplierFunction)ABCPersonClearAddressBookPhoneCacheForPerson_apply, v2);
      return LOBYTE(v2[0]) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void ABCPersonClearAddressBookPhoneCacheForPerson_apply(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  if (theDict)
  {
    uint64_t v4 = (const void *)*(int *)(a3 + 24);
    uint64_t v5 = *(void *)(a3 + 8);
    CFIndex Count = CFDictionaryGetCount(theDict);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      size_t v8 = 8 * Count;
      CFIndex v9 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      uint64_t v10 = (const void **)malloc_type_malloc(v8, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(theDict, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        CFNumberRef v12 = (const __CFNumber *)v10[v11];
        if (v12)
        {
          CFStringRef v13 = v9[v11];
          CFTypeID v14 = CFGetTypeID(v10[v11]);
          if (v14 == CFNumberGetTypeID())
          {
            int valuePtr = -1;
            if (CFNumberGetValue(v12, kCFNumberIntType, &valuePtr) && (valuePtr == v4 || valuePtr == -1)) {
              goto LABEL_13;
            }
          }
          else if (v14 == CFArrayGetTypeID())
          {
            if (!CFArrayGetCount(v12)
              || (v19.length = CFArrayGetCount(v12), v19.location = 0, CFArrayContainsValue(v12, v19, v4)))
            {
LABEL_13:
              CFDictionaryRef v15 = *(const __CFDictionary **)(v5 + 48);
              if (v15)
              {
                CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue(v15, a1);
                if (Value) {
                  CFDictionaryRemoveValue(Value, v13);
                }
              }
              CFDictionaryRemoveValue(theDict, v13);
            }
          }
        }
        if (v7 == ++v11)
        {
          free(v9);
          free(v10);
          return;
        }
      }
    }
  }
}

ABMutableMultiValueRef ABCPersonCreateSocialProfileValueFillMissingData(const void *a1)
{
  if (!a1) {
    return 0;
  }
  ABMutableMultiValueRef MutableCopy = ABMultiValueCreateMutableCopy(a1);
  CFIndex Count = ABMultiValueGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v3 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFDictionaryRef v4 = (const __CFDictionary *)ABMultiValueCopyValueAtIndex(a1, v3);
      CFIndex v5 = CFDictionaryGetCount(v4);
      CFDictionaryRef v6 = CFDictionaryCreateMutableCopy(allocator, v5, v4);
      CFStringRef Value = (void *)CFDictionaryGetValue(v6, @"url");
      size_t v8 = (void *)CFDictionaryGetValue(v6, @"service");
      unint64_t v9 = (unint64_t)CFDictionaryGetValue(v6, @"username");
      unint64_t v10 = (unint64_t)CFDictionaryGetValue(v6, @"identifier");
      if (Value)
      {
        CFDictionaryRef v11 = (const __CFDictionary *)socialProfileFromURL(Value, 0, 0, 0, 0, 0, 0);
        CFDictionaryRef v12 = v11;
        if (!v8)
        {
          CFStringRef v13 = CFDictionaryGetValue(v11, @"service");
          if (v13) {
            CFDictionarySetValue(v6, @"service", v13);
          }
        }
        if (v9) {
          goto LABEL_19;
        }
        CFTypeID v14 = CFDictionaryGetValue(v12, @"username");
        if (!v14) {
          goto LABEL_19;
        }
        CFDictionaryRef v15 = v14;
        int v16 = v6;
        CFDataRef v17 = @"username";
      }
      else
      {
        if (!v8 || !(v9 | v10)) {
          goto LABEL_19;
        }
        CFStringRef v18 = (void *)(v9 ? v9 : v10);
        uint64_t v19 = socialProfileURLForServiceAndUsername(v8, v18);
        if (!v19) {
          goto LABEL_19;
        }
        CFDictionaryRef v15 = (const void *)v19;
        int v16 = v6;
        CFDataRef v17 = @"url";
      }
      CFDictionarySetValue(v16, v17, v15);
LABEL_19:
      ABMultiValueReplaceValueAtIndex(MutableCopy, v6, v3);
      CFRelease(v4);
      CFRelease(v6);
      ++v3;
    }
    while (Count != v3);
  }
  return MutableCopy;
}

CFComparisonResult ABCPersonCompareNameOfPeople(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 == a2) {
    return 0;
  }
  CFDictionaryRef v6 = &kABCFirstSortLanguageIndexSortProperty;
  if (a3) {
    CFDictionaryRef v6 = &kABCLastSortLanguageIndexSortProperty;
  }
  uint64_t v7 = *v6;
  int IntValue = ABRecordGetIntValue(a1, v7);
  int v9 = ABRecordGetIntValue(a2, v7);
  if (IntValue == v9)
  {
    unint64_t v10 = &kABCFirstSortSectionProperty;
    if (a3) {
      unint64_t v10 = &kABCLastSortSectionProperty;
    }
    CFComparisonResult result = ABCPersonCompareSortKeyProperties(*v10, a1, a2);
    if (result == kCFCompareEqualTo)
    {
      CFDictionaryRef v12 = &kABCFirstSortProperty;
      if (a3) {
        CFDictionaryRef v12 = &kABCLastSortProperty;
      }
      uint64_t v13 = *v12;
      return ABCPersonCompareSortKeyProperties(v13, a1, a2);
    }
  }
  else if (IntValue < v9)
  {
    return -1;
  }
  else
  {
    return 1;
  }
  return result;
}

CFComparisonResult ABCPersonCompareSortKeyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5 = (const __CFString *)ABCRecordCopyValue(a2, a1);
  CFStringRef v6 = (const __CFString *)ABCRecordCopyValue(a3, a1);
  CFStringRef v7 = v6;
  if (v5 != v6)
  {
    if (!v5)
    {
      CFComparisonResult v8 = kCFCompareGreaterThan;
      goto LABEL_10;
    }
    if (v6) {
      CFComparisonResult v8 = CFStringCompare(v5, v6, 0);
    }
    else {
      CFComparisonResult v8 = kCFCompareLessThan;
    }
    goto LABEL_9;
  }
  CFComparisonResult v8 = kCFCompareEqualTo;
  if (v5) {
LABEL_9:
  }
    CFRelease(v5);
LABEL_10:
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

uint64_t ABCPersonRemoveImageData(const void *a1)
{
  return ABCPersonRemoveImageDataAndReturnError(a1, -1);
}

uint64_t ABCPersonRemoveImageDataAndReturnError(const void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 == -1) {
    CPRecordSetProperty();
  }
  if (!ABCPersonHasImageDataEntries((uint64_t)a1, 0)) {
    return 1;
  }
  CFStringRef v4 = (const __CFString *)ABCGetAddressBookForRecord();
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    CFStringRef ImageStore = ABCAddressBookGetImageStore(v4);
    if (!ImageStore || !ABCImageStoreRemoveImagesForRecord(v5, (uint64_t)ImageStore, (uint64_t)a1, a2)) {
      return 0;
    }
  }
  if (a2 == -1)
  {
    CPRecordSetProperty();
  }
  else
  {
    CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      CFArrayRef v8 = Property;
      CFIndex Count = CFArrayGetCount(Property);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        CFIndex v11 = 0;
        CFIndex v12 = 0;
        ABMutableMultiValueRef MutableCopy = 0;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          CFArrayGetValueAtIndex(v8, v12);
          if (a2 == 2 && (char **)CPRecordGetClass() == ABCFullSizeImageClass
            || (char **)CPRecordGetClass() != ABCFullSizeImageClass && CPRecordGetProperty() == a2)
          {
            if (!MutableCopy) {
              ABMutableMultiValueRef MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v8);
            }
            CFArrayRemoveValueAtIndex(MutableCopy, v11--);
          }
          ++v11;
          ++v12;
        }
        while (v10 != v12);
        if (MutableCopy)
        {
          CPRecordSetProperty();
          CFRelease(MutableCopy);
        }
      }
    }
  }
  CPRecordMarkChanged();
  uint64_t v14 = 1;
  _updatePreferredImageForPerson(a1, 0, 1, 1);
  return v14;
}

uint64_t ABCPersonHasImageDataEntries(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      CFArrayRef v5 = Property;
      CFIndex Count = CFArrayGetCount(Property);
      CFIndex v7 = Count;
      if ((a2 & 1) == 0 && Count) {
        return 1;
      }
      if (Count >= 1)
      {
        CFIndex v8 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v5, v8);
          CPRecordGetClass();
          int v9 = (const void *)CPRecordCopyProperty();
          if (v9) {
            break;
          }
          if (++v8 >= v7) {
            goto LABEL_9;
          }
        }
        CFRelease(v9);
        return 1;
      }
    }
LABEL_9:
    CFComparisonResult result = ABCGetAddressBookForRecord();
    if (result)
    {
      CFComparisonResult result = (uint64_t)ABCAddressBookGetImageStore((CFStringRef)result);
      if (result)
      {
        return ABCImageStoreHasImagesForRecord(result, v3, a2);
      }
    }
  }
  return result;
}

void _updatePreferredImageForPerson(const void *a1, int a2, int a3, int a4)
{
  uint64_t v8 = ABCGetAddressBookForRecord();
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  if (!a2 || (CFIndex v10 = a1, !ABPersonHasImageData(a1)))
  {
    CFArrayRef v11 = ABPersonCopyArrayOfAllLinkedPeople(a1);
    if (!v11)
    {
      int v18 = 0;
      CFIndex v10 = 0;
      goto LABEL_17;
    }
    CFArrayRef v12 = v11;
    CFIndex Count = CFArrayGetCount(v11);
    if (Count < 1)
    {
LABEL_11:
      CFIndex v10 = 0;
    }
    else
    {
      CFIndex v14 = Count;
      CFIndex v15 = 0;
      while (1)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v12, v15);
        CFIndex v10 = ValueAtIndex;
        if (((a2 & 1) != 0 || ValueAtIndex != a1) && ABPersonHasImageData(ValueAtIndex)) {
          break;
        }
        if (v14 == ++v15) {
          goto LABEL_11;
        }
      }
    }
    CFRelease(v12);
  }
  if (v10)
  {
    ABRecordID RecordID = ABRecordGetRecordID(v10);
    int v18 = 1;
    goto LABEL_18;
  }
  int v18 = 0;
LABEL_17:
  ABRecordID RecordID = -1;
LABEL_18:
  int IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
  CPRecordStoreGetDatabase();
  uint64_t v20 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(v9);
  if (v20)
  {
    CFStringRef v21 = *(sqlite3_stmt **)(v20 + 8);
    if (v21)
    {
      sqlite3_bind_int(v21, 1, RecordID);
      sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, IntValue);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
  }
  if ((v18 & a4) == 1) {
    ABCDBContextLogChangeForPerson(*(void *)(v9 + 16), v10, 9u);
  }
  if (a3)
  {
    uint64_t v22 = ABPersonCopyLinkUUID((uint64_t)a1);
    if (v22)
    {
      int v23 = (const void *)v22;
      ABCDBContextLogChangeForUnifiedPerson(*(void *)(v9 + 16), v22, 4u);
      CFRelease(v23);
    }
  }
}

CFStringRef ABCPersonInvalidateImageData(const __CFString *a1)
{
  CFStringRef result = ABCAddressBookGetImageStore(a1);
  if (result)
  {
    CPRecordStoreInvalidateCachedInstancesOfClass();
    return (CFStringRef)CPRecordStoreInvalidateCachedInstancesOfClass();
  }
  return result;
}

uint64_t _clientThumbnailImageInvalidationCallbackWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))a2;
  uint64_t Property = CPRecordGetProperty();
  uint64_t v5 = CPRecordGetProperty();
  uint64_t v6 = v3(Property, v5, *(void *)(a2 + 8));
  if (v6) {
    CPRecordInvalidateRecord();
  }
  return v6;
}

uint64_t _clientFullSizeImageInvalidationCallbackWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))a2;
  uint64_t Property = CPRecordGetProperty();
  uint64_t v5 = v3(Property, 2, *(void *)(a2 + 8));
  if (v5) {
    CPRecordInvalidateRecord();
  }
  return v5;
}

CFStringRef ABCPersonInvalidateSpecificImageData(uint64_t a1)
{
  ABCRecordGetUniqueId(a1);
  CFStringRef v1 = (const __CFString *)ABCGetAddressBookForRecord();
  return ABCPersonInvalidateImageData(v1);
}

BOOL _invalidatePersonImageDataPredicate(int a1, int a2, _DWORD *a3)
{
  if (*a3 != a1) {
    return 0;
  }
  int v3 = a3[1];
  return v3 == -1 || v3 == a2;
}

CFStringRef ABCPersonInvalidateSpecificImageDataForSetOfPersonIds(const __CFString *a1)
{
  return ABCPersonInvalidateImageData(a1);
}

uint64_t _invalidatePeopleImageDataPredicate(int a1, int a2, uint64_t a3)
{
  uint64_t result = CFSetContainsValue(*(CFSetRef *)a3, (const void *)a1);
  if (result)
  {
    int v6 = *(_DWORD *)(a3 + 8);
    return v6 == -1 || v6 == a2;
  }
  return result;
}

CFStringRef ABCPersonInvalidateAllImageData(uint64_t a1)
{
  ABCRecordGetUniqueId(a1);
  CFStringRef result = (const __CFString *)ABCGetAddressBookForRecord();
  if (result) {
    return ABCPersonInvalidateImageData(result);
  }
  return result;
}

uint64_t ABCPersonGetDerivedFromFormatFromImageWithFormat(uint64_t a1, int a2)
{
  uint64_t result = 2;
  if (a1 && a2 != 2)
  {
    CFStringRef v5 = (const __CFString *)ABCGetAddressBookForRecord();
    uint64_t v6 = (uint64_t)v5;
    if (v5) {
      CFStringRef ImageStore = ABCAddressBookGetImageStore(v5);
    }
    else {
      CFStringRef ImageStore = 0;
    }
    CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
    if (Property && (CFArrayRef v8 = Property, Count = CFArrayGetCount(Property), Count >= 1))
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      while (1)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
        if ((char **)CPRecordGetClass() != ABCFullSizeImageClass && CPRecordGetProperty() == a2) {
          break;
        }
        if (v10 == ++v11) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      int ValueAtIndex = 0;
    }
    if (!ValueAtIndex && ImageStore)
    {
      CFArrayRef v13 = (const __CFArray *)ABCImageStoreCopyImagesForRecordWithFormat(v6, (uint64_t)ImageStore, a1, a2);
      if (!v13) {
        return 2;
      }
      CFArrayRef v14 = v13;
      if (CFArrayGetCount(v13) < 1) {
        int ValueAtIndex = 0;
      }
      else {
        int ValueAtIndex = CFArrayGetValueAtIndex(v14, 0);
      }
      CFRelease(v14);
    }
    if (ValueAtIndex) {
      return CPRecordGetProperty();
    }
    return 2;
  }
  return result;
}

uint64_t ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(const void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v4 = (const __CFString *)ABCGetAddressBookForRecord();
  uint64_t v5 = (uint64_t)v4;
  if (v4) {
    CFStringRef ImageStore = ABCAddressBookGetImageStore(v4);
  }
  else {
    CFStringRef ImageStore = 0;
  }
  if (a2 == 2) {
    ABCPersonRemoveImageDataAndReturnError(a1, 5);
  }
  CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
  uint64_t v22 = (uint64_t)ImageStore;
  if (Property && (CFArrayRef v8 = Property, Count = CFArrayGetCount(Property), Count >= 1))
  {
    CFIndex v10 = Count;
    uint64_t v11 = 1;
    do
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v8, v11 - 1);
      if ((a2 != 2 || (char **)CPRecordGetClass() != ABCFullSizeImageClass)
        && ((char **)CPRecordGetClass() == ABCFullSizeImageClass || CPRecordGetProperty() != a2))
      {
        int ValueAtIndex = 0;
      }
      if (v11 >= v10) {
        break;
      }
      ++v11;
    }
    while (!ValueAtIndex);
  }
  else
  {
    int ValueAtIndex = 0;
  }
  if (ValueAtIndex)
  {
    uint64_t v13 = v22;
LABEL_25:
    if (!ValueAtIndex) {
      goto LABEL_29;
    }
    goto LABEL_37;
  }
  uint64_t v13 = v22;
  if (!v22) {
    goto LABEL_25;
  }
  CFArrayRef v14 = (const __CFArray *)ABCImageStoreCopyImagesForRecordWithFormat(v5, v22, (uint64_t)a1, a2);
  if (!v14
    || ((CFArrayRef v15 = v14, CFArrayGetCount(v14) < 1) ? (v16 = 0) : (v16 = CFArrayGetValueAtIndex(v15, 0)),
        CFRelease(v15),
        !v16))
  {
LABEL_29:
    int ID = CPRecordGetID();
    int v18 = (const void *)CPRecordCreate();
    if (ID != -1 && v13) {
      CPRecordStoreAddRecord();
    }
    if (a2 != 2) {
      CPRecordSetProperty();
    }
    CPRecordSetProperty();
    CFMutableStringRef Mutable = (__CFArray *)ABCRecordCopyValue(a1, kABCImageProperty);
    if (!Mutable) {
      CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    }
    CFArrayAppendValue(Mutable, v18);
    CPRecordSetProperty();
    CFRelease(Mutable);
    CFRelease(v18);
    if (v18) {
      goto LABEL_37;
    }
    return 0;
  }
LABEL_37:
  if ((char **)CPRecordGetClass() == ABCFullSizeImageClass)
  {
    CPRecordSetProperty();
    CPRecordSetProperty();
  }
  CPRecordSetProperty();
  CPRecordSetProperty();
  CPRecordMarkChanged();
  CPRecordMarkPropertyChanged();
  if (a2 == 5) {
    return 1;
  }
  CPRecordSetProperty();
  uint64_t v20 = 1;
  _updatePreferredImageForPerson(a1, 1, 1, 0);
  if (a2 == 2) {
    ABPersonResetImageTypeIfNeeded(a1);
  }
  return v20;
}

uint64_t ABCPersonSetImageData(const void *a1, int a2)
{
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

uint64_t ABCPersonSetImageDataAndReturnError(const void *a1, int a2)
{
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

uint64_t ABCPersonCopyImageDataAndCropRect(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12 = ABCGetAddressBookForRecord();
  if (a1)
  {
    CFStringRef v13 = (const __CFString *)v12;
    CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
    uint64_t v26 = a1;
    CFStringRef v27 = v13;
    if (Property)
    {
      CFArrayRef v15 = Property;
      CFIndex Count = CFArrayGetCount(Property);
      if (Count >= 1)
      {
        CFIndex v17 = Count;
        uint64_t v18 = 1;
        while (1)
        {
          CFArrayGetValueAtIndex(v15, v18 - 1);
          Class = (char **)CPRecordGetClass();
          if (a2 == 2 && Class == ABCFullSizeImageClass) {
            break;
          }
          if (Class == ABCThumbnailImageClass[0] && CPRecordGetProperty() == a2)
          {
            a1 = CPRecordCopyProperty();
            if (a3) {
              *a3 = 0;
            }
            if (a4) {
              *a4 = 0;
            }
            if (a5) {
              *a5 = 0;
            }
            if (!a6) {
              goto LABEL_27;
            }
            int v20 = 0;
LABEL_15:
            *a6 = v20;
            goto LABEL_27;
          }
          a1 = 0;
LABEL_27:
          if (v18 < v17)
          {
            ++v18;
            if (!a1) {
              continue;
            }
          }
          goto LABEL_31;
        }
        a1 = CPRecordCopyProperty();
        if (a3) {
          *a3 = CPRecordGetProperty();
        }
        if (a4) {
          *a4 = CPRecordGetProperty();
        }
        if (a5) {
          *a5 = CPRecordGetProperty();
        }
        if (!a6) {
          goto LABEL_27;
        }
        int v20 = CPRecordGetProperty();
        goto LABEL_15;
      }
    }
    a1 = 0;
LABEL_31:
    if (!a1 && v27)
    {
      CFStringRef ImageStore = ABCAddressBookGetImageStore(v27);
      if (ImageStore)
      {
        CFArrayRef v22 = (const __CFArray *)ABCImageStoreCopyImagesForRecordWithFormat((uint64_t)v27, (uint64_t)ImageStore, v26, a2);
        if (v22)
        {
          CFArrayRef v23 = v22;
          if (CFArrayGetCount(v22) >= 1 && CFArrayGetValueAtIndex(v23, 0))
          {
            if ((char **)CPRecordGetClass() == ABCFullSizeImageClass)
            {
              a1 = CPRecordCopyProperty();
              if (a3) {
                *a3 = CPRecordGetProperty();
              }
              if (a4) {
                *a4 = CPRecordGetProperty();
              }
              if (a5) {
                *a5 = CPRecordGetProperty();
              }
              if (!a6) {
                goto LABEL_57;
              }
              int v24 = CPRecordGetProperty();
            }
            else
            {
              a1 = CPRecordCopyProperty();
              if (a3) {
                *a3 = 0;
              }
              if (a4) {
                *a4 = 0;
              }
              if (a5) {
                *a5 = 0;
              }
              if (!a6) {
                goto LABEL_57;
              }
              int v24 = 0;
            }
            *a6 = v24;
          }
          else
          {
            a1 = 0;
          }
LABEL_57:
          CFRelease(v23);
          return a1;
        }
      }
      return 0;
    }
  }
  return a1;
}

uint64_t ABCPersonCopyImageData(uint64_t a1, int a2)
{
  return ABCPersonCopyImageDataAndCropRect(a1, a2, 0, 0, 0, 0);
}

uint64_t ABCPersonHasImageDataWithFormat(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v4 = (const __CFString *)ABCGetAddressBookForRecord();
  if (!v4) {
    return 0;
  }
  CFStringRef ImageStore = ABCAddressBookGetImageStore(v4);
  if (!ImageStore) {
    return 0;
  }
  return ABCImageStoreHasImagesForRecordWithFormat((uint64_t)ImageStore, a1, a2, 1);
}

uint64_t ABCPersonHasImageData(uint64_t a1)
{
  return ABCPersonHasImageDataEntries(a1, 1);
}

uint64_t ABCFindPersonMatchingPhoneNumber(uint64_t a1, uint64_t a2, int *a3, void *a4)
{
  return ABCFindPersonMatchingPhoneNumberWithCountryAndHint(a1, a2, 0, a3, a4);
}

uint64_t ABCFindPersonMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, int *a4, void *a5)
{
  if (ABPhoneUtilitiesIgnoreMatchingForLostMode()) {
    return 0;
  }
  int v25 = -1;
  uint64_t SanitizedPhoneNumber = ABPersonGetSanitizedPhoneNumber(a2);
  if (!a1) {
    return a1;
  }
  uint64_t v11 = (void *)SanitizedPhoneNumber;
  uint64_t v12 = a3;
  if (!a3) {
    uint64_t v12 = (void *)CPPhoneNumberCopyHomeCountryCode();
  }
  CFDictionaryRef v13 = *(const __CFDictionary **)(a1 + 40);
  if (v13
    && (CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v13, v12)) != 0
    && (CFDictionaryRef v15 = v14, CFDictionaryContainsKey(v14, v11)))
  {
    uint64_t v16 = _intValueForSanitiziedPhoneNumberInDictionary(v11, v15);
    if (a5)
    {
      CFDictionaryRef v17 = *(const __CFDictionary **)(a1 + 48);
      if (v17 && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v17, v12)) != 0)
      {
        uint64_t v19 = _stringValueForSanitizedPhoneNumberInDictionary(v11, Value);
        int v20 = v19;
        if (v19) {
          CFRetain(v19);
        }
      }
      else
      {
        int v20 = 0;
      }
      *a5 = v20;
    }
    if (a4)
    {
      CFDictionaryRef v23 = *(const __CFDictionary **)(a1 + 56);
      if (v23 && (CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(v23, v12)) != 0)
      {
        int v21 = _intValueForSanitiziedPhoneNumberInDictionary(v11, v24);
        int v25 = v21;
      }
      else
      {
        int v21 = -1;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v16 = _PersonUIDForPhoneNumber(*(void *)(a1 + 16), (uint64_t)v11, (uint64_t)v12, &v25);
    _setIntValueForSanitizedPhoneNumberInDictionary(v16, v11, v12, (CFMutableDictionaryRef *)(a1 + 40));
    if (a5) {
      *a5 = 0;
    }
    if ((v25 & 0x80000000) == 0) {
      _setIntValueForSanitizedPhoneNumberInDictionary(v25, v11, v12, (CFMutableDictionaryRef *)(a1 + 56));
    }
    if (a4)
    {
      int v21 = v25;
LABEL_20:
      *a4 = v21;
    }
  }
  if (v16 != -1)
  {
    a1 = ABCDBContextRecordForUIDOfType(*(void *)(a1 + 16), v16, (uint64_t)ABCPersonClass);
    if (!a5) {
      goto LABEL_27;
    }
LABEL_25:
    if (*MEMORY[0x1E4F1D260] == *a5) {
      *a5 = 0;
    }
    goto LABEL_27;
  }
  a1 = 0;
  if (a5) {
    goto LABEL_25;
  }
LABEL_27:
  if (v12 != a3 && v12) {
    CFRelease(v12);
  }
  return a1;
}

uint64_t _intValueForSanitiziedPhoneNumberInDictionary(void *key, CFDictionaryRef theDict)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFNumberRef v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFArrayGetTypeID() && CFArrayGetCount(v4) >= 1) {
        return (uint64_t)CFArrayGetValueAtIndex(v4, 0);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return v2;
}

void _setValueForSanitizedPhoneNumberInDictionary(const void *a1, const void *a2, void *key, CFMutableDictionaryRef *a4)
{
  CFDictionaryRef Mutable = *a4;
  if (!*a4)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *a4 = Mutable;
  }
  CFNumberRef Value = (void *)CFDictionaryGetValue(Mutable, key);
  if (!Value)
  {
    CFNumberRef Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(*a4, key, Value);
    CFRelease(Value);
  }
  CFDictionarySetValue((CFMutableDictionaryRef)Value, a2, a1);
}

void _setIntValueForSanitizedPhoneNumberInDictionary(int a1, const void *a2, void *a3, CFMutableDictionaryRef *a4)
{
  int valuePtr = a1;
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  _setValueForSanitizedPhoneNumberInDictionary(v7, a2, a3, a4);
  CFRelease(v7);
}

const void *_stringValueForSanitizedPhoneNumberInDictionary(void *key, CFDictionaryRef theDict)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, key);
  int v3 = Value;
  if (!Value) {
    return v3;
  }
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 == CFStringGetTypeID()) {
    return v3;
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v3) < 1) {
    return 0;
  }
  return CFArrayGetValueAtIndex((CFArrayRef)v3, 0);
}

const void *_arrayValueForSanitizedPhoneNumberInDictionary(void *key, CFDictionaryRef theDict)
{
  uint64_t result = CFDictionaryGetValue(theDict, key);
  if (result)
  {
    int v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFArrayGetTypeID()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  return result;
}

CFArrayRef ABCCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, const __CFArray **a4)
{
  if (ABPhoneUtilitiesIgnoreMatchingForLostMode()) {
    return 0;
  }
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  uint64_t SanitizedPhoneNumber = ABPersonGetSanitizedPhoneNumber(a2);
  if (!a1) {
    return 0;
  }
  CFIndex v10 = (void *)SanitizedPhoneNumber;
  if (a4) {
    *a4 = 0;
  }
  uint64_t v11 = a3;
  if (!a3) {
    uint64_t v11 = (void *)CPPhoneNumberCopyHomeCountryCode();
  }
  CFDictionaryRef v12 = *(const __CFDictionary **)(a1 + 40);
  if (!v12) {
    goto LABEL_21;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v12, v11);
  if (!Value) {
    goto LABEL_21;
  }
  CFDictionaryRef v14 = Value;
  if (!CFDictionaryContainsKey(Value, v10)) {
    goto LABEL_21;
  }
  CFArrayRef v15 = (const __CFArray *)_arrayValueForSanitizedPhoneNumberInDictionary(v10, v14);
  if (v15) {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v15);
  }
  else {
    CFArrayRef Copy = 0;
  }
  CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 48);
  if (v16)
  {
    CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v16, v11);
    if (a4)
    {
      if (v17)
      {
        CFArrayRef v18 = (const __CFArray *)_arrayValueForSanitizedPhoneNumberInDictionary(v10, v17);
        if (v18) {
          CFArrayRef v18 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18);
        }
        *a4 = v18;
      }
    }
  }
  if (!Copy)
  {
LABEL_21:
    CFArrayRef Copy = _CopyPersonUIDsForPhoneNumber(*(void *)(a1 + 16), (uint64_t)v10, (uint64_t)v11, (CFMutableArrayRef *)&cf, &theArray);
    _setValueForSanitizedPhoneNumberInDictionary(Copy, v10, v11, (CFMutableDictionaryRef *)(a1 + 40));
    _setValueForSanitizedPhoneNumberInDictionary(cf, v10, v11, (CFMutableDictionaryRef *)(a1 + 56));
    _setValueForSanitizedPhoneNumberInDictionary(theArray, v10, v11, (CFMutableDictionaryRef *)(a1 + 48));
    CFArrayRef v19 = theArray;
    if (theArray)
    {
      if (a4)
      {
        *a4 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theArray);
        CFArrayRef v19 = theArray;
      }
      CFRelease(v19);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v11 != a3 && v11) {
    CFRelease(v11);
  }
  return Copy;
}

uint64_t ABCFindPersonMatchingPhoneNumberWithCountry(uint64_t a1, uint64_t a2, void *a3, int *a4, void *a5)
{
  return ABCFindPersonMatchingPhoneNumberWithCountryAndHint(a1, a2, a3, a4, a5);
}

void ABCFindUIDsMatchingPhoneNumbers(uint64_t a1, _DWORD *a2, _DWORD *a3, void *a4, int a5)
{
  if (a1)
  {
    if ((a5 & 0x80000000) == 0) {
      _FindUIDsMatchingPhoneNumbers(*(void *)(a1 + 16), a2, a3, a4, a5);
    }
  }
}

void ABCCopyPeopleAndIdentifiersMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6)
{
  if (a1 && a2)
  {
    if (a5) {
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(void *)(a1 + 16), a2, a3, a4, a5, a6, 0, 0, 0);
    }
  }
}

void ABCCopyPeopleAndMultiValuePropertiesMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7)
{
  if (a1 && a2)
  {
    if (a5) {
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, 0, 0);
    }
  }
}

void ABCCopyPeopleAndIdentifiersMatchingNameWithCancellationCallback(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2)
  {
    if (a5) {
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(void *)(a1 + 16), a2, a3, a4, a5, a6, 0, a7, a8);
    }
  }
}

void ABCCopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7, uint64_t a8, uint64_t a9)
{
  if (a1 && a2)
  {
    if (a5) {
      _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
}

uint64_t ABCFindPersonMatchingEmailAddress(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  return ABCFindPersonWithValueForMultivalueProperty(a1, kABCEmailProperty, a2, a3);
}

uint64_t ABCFindPersonWithValueForMultivalueProperty(uint64_t a1, int a2, const __CFString *a3, uint64_t a4)
{
  if (ABPhoneUtilitiesIgnoreMatchingForLostMode()) {
    return 0;
  }
  uint64_t v8 = _PersonUIDWithValueForMultivalueProperty(*(void *)(a1 + 16), a2, a3, a4);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = ABCPersonClass;
  return ABCDBContextRecordForUIDOfType(v10, v9, (uint64_t)v11);
}

uint64_t ABCCopyArrayOfUIDsMatchingEmailAddressIncludingLabels(uint64_t a1, const __CFString *a2, void *a3, void *a4)
{
  return _ABCDBContextCopyPersonUIDsWithMultivaluePropertyLikeIncludingLabels(*(void *)(a1 + 16), kABCEmailProperty, a2, a3, a4);
}

uint64_t ABCFindPersonMatchingURL(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  return ABCFindPersonWithValueForMultivalueProperty(a1, kABCURLProperty, a2, a3);
}

void ABCPersonDelete(int a1, const void *a2, uint64_t a3)
{
  ABCDBContextDeleteMultiValuesForRecord(a3, a1);
  if (ABCFTSIsEnabled())
  {
    ABCDBContextDeleteSearchIndexEntryForRecord(a3, a2);
  }
}

__CFArray *_copySortKeysForStringAndTransformedStringIfNotNull(__CFStringTokenizer *a1, const __CFString *a2, const __CFString *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 0;
  }
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, a2);
  _appendTokenizedWordsToArray(Mutable, a2);
  if (a3)
  {
    CFDictionaryRef v13 = _copyTransformedString(a2, a3);
    if (v13)
    {
      CFStringRef v14 = v13;
      CFArrayAppendValue(Mutable, v13);
      _appendTokenizedWordsToArray(Mutable, v14);
      CFRelease(v14);
    }
  }
  CFArrayRef v15 = ABCopySortKeysForStrings(a1, Mutable, a4, a5, a6);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

__CFArray *_copyExtraSortKeysForOrganizationIfNotNull(__CFStringTokenizer *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = ABCreateSortKeysMutableArray();
  uint64_t v11 = _copyTransformedString(a2, a3);
  CFDictionaryRef v12 = ABCreateSortKey(a2, a4, a5, 0);
  if (v12) {
    CFArrayAppendValue(v10, v12);
  }
  if (v11)
  {
    if (v11 != a2)
    {
      CFDictionaryRef v13 = ABCreateSortKey(a2, a4, a5, 0);
      if (v13) {
        CFArrayAppendValue(v10, v13);
      }
    }
    CFRelease(v11);
  }
  CFStringRef v14 = ABCCreateArrayBySeparatingWordsInPropertyString(a1, a2);
  if (v14)
  {
    CFArrayRef v15 = v14;
    CFIndex Count = CFArrayGetCount(v14);
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      for (CFIndex i = 0; i != v17; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, i);
        int v20 = ABCreateSortKey(ValueAtIndex, a4, a5, 0);
        if (v20) {
          CFArrayAppendValue(v10, v20);
        }
        int v21 = _copyTransformedString(ValueAtIndex, a3);
        if (v21)
        {
          CFArrayRef v22 = v21;
          if (v21 != ValueAtIndex)
          {
            CFDictionaryRef v23 = ABCreateSortKey(v21, a4, a5, 0);
            if (v23) {
              CFArrayAppendValue(v10, v23);
            }
          }
          CFRelease(v22);
        }
      }
    }
    CFRelease(v15);
  }
  return v10;
}

__CFString *_copyTransformedString(CFStringRef theString, const __CFString *a2)
{
  if (a2)
  {
    ABMutableMultiValueRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
    CFTypeID v5 = MutableCopy;
    if (MutableCopy)
    {
      if (!CFStringTransform(MutableCopy, 0, a2, 0))
      {
        CFRelease(v5);
        return 0;
      }
    }
    return v5;
  }
  else
  {
    return (__CFString *)CFRetain(theString);
  }
}

void _appendSearchKeys(__CFArray *a1, CFArrayRef theArray)
{
  if (a1 && theArray && CFArrayGetCount(theArray) >= 1)
  {
    v4.length = CFArrayGetCount(theArray);
    v4.location = 0;
    CFArrayAppendArray(a1, theArray, v4);
  }
}

CFArrayRef ABPersonCopyFirstNamePartForSorting(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(v18, 0, sizeof(v18));
  if (a2 == 1)
  {
    *(void *)&v18[0] = a8;
    *((void *)&v18[0] + _ABCPostDatabaseChangedNotification(0, 1) = a7;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v18[v9];
  if (a9 == 1) {
    uint64_t v11 = a6;
  }
  else {
    uint64_t v11 = a4;
  }
  if (a9 == 1) {
    uint64_t v12 = a5;
  }
  else {
    uint64_t v12 = a3;
  }
  if (a9 == 1) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = a6;
  }
  *uint64_t v10 = v11;
  *(void *)((char *)v18 + ((4 * v9) | 8)) = v12;
  if (a9 == 1) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = a5;
  }
  v10[2] = v13;
  v10[3] = v14;
  if (a2 != 1)
  {
    v10[4] = a8;
    *(void *)((char *)v18 + ((4 * v9) | 0x28)) = a7;
  }
  unint64_t v15 = 0;
  do
  {
    CFDictionaryRef v16 = (const void *)*((void *)v18 + v15);
    if (v15 > 4) {
      break;
    }
    ++v15;
  }
  while (!v16);
  if (v16)
  {
    CFRetain(v16);
    return (const __CFArray *)v16;
  }
  else
  {
    return ABCCopyFallbackStringFromRecord(a1);
  }
}

CFArrayRef ABCCopyFallbackStringFromRecord(const void *a1)
{
  CFArrayRef result = (const __CFArray *)ABRecordCopyValue(a1, kABCPersonDisplayNameProperty);
  if (!result)
  {
    CFStringRef Value = (const __CFString *)ABCRecordGetValue(a1, kABCNicknameProperty);
    if (!Value || (CFArrayRef result = (const __CFArray *)CFStringCreateCopy(0, Value)) == 0)
    {
      uint64_t v4 = ABCRecordGetValue(a1, kABCEmailProperty);
      if (!v4
        || (CFArrayRef v5 = (const __CFArray *)v4, ABCMultiValueGetCount(v4) < 1)
        || (CFArrayRef result = ABCMultiValueCopyValueAtIndex(v5, 0)) == 0)
      {
        CFArrayRef result = (const __CFArray *)ABCRecordGetValue(a1, kABCPhoneProperty);
        if (result)
        {
          CFArrayRef v6 = result;
          if (ABCMultiValueGetCount((uint64_t)result) < 1)
          {
            return 0;
          }
          else
          {
            return ABCMultiValueCopyValueAtIndex(v6, 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t ABCPersonNameOrderPieces(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t *a12)
{
  int v20 = a11;
  int v21 = a12;
  if (ABLogAPIUsage())
  {
    int v42 = _isMainThread();
    uint64_t v22 = a8;
    int v23 = a2;
    uint64_t v24 = a4;
    int v25 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFIndex ABCPersonNameOrderPieces(ABPersonCompositeNameFormat, ABCPersonSortOrdering, int, void *, void *, void *, void *, void *, void *, void *, void **, CFIndex *)", 3082, v25, 0, v26, v27, v28, (uint64_t)v42);
    double v29 = v25;
    a4 = v24;
    a2 = v23;
    a8 = v22;
    int v21 = a12;
    int v20 = a11;
    CFRelease(v29);
  }
  uint64_t *v21 = -1;
  if (a3 == 1 && a4)
  {
    *int v20 = a4;
LABEL_6:
    uint64_t *v21 = 0;
    return 1;
  }
  if (a1) {
    uint64_t v31 = a8;
  }
  else {
    uint64_t v31 = a6;
  }
  if (a1) {
    uint64_t v32 = a6;
  }
  else {
    uint64_t v32 = a7;
  }
  if (a1) {
    uint64_t v33 = a7;
  }
  else {
    uint64_t v33 = a8;
  }
  if (a5)
  {
    *int v20 = a5;
    uint64_t v34 = 1;
    if (v31) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v34 = 0;
    if (v31)
    {
LABEL_19:
      v20[v34] = v31;
      uint64_t v35 = v34 + 1;
      if (!a2 && v31 == a6 || (char v36 = 0, v37 = -1, a2 == 1) && v31 == a8)
      {
        uint64_t *v21 = v34;
        char v36 = 1;
        uint64_t v37 = v34;
      }
      if (v32) {
        goto LABEL_25;
      }
LABEL_36:
      uint64_t v38 = v35;
      goto LABEL_37;
    }
  }
  char v36 = 0;
  uint64_t v37 = -1;
  uint64_t v35 = v34;
  uint64_t v34 = -1;
  if (!v32) {
    goto LABEL_36;
  }
LABEL_25:
  v20[v35] = v32;
  uint64_t v38 = v35 + 1;
  if (v32 != a7)
  {
    if (!a2 && v32 == a6 || (v32 == a8 ? (BOOL v39 = a2 == 1) : (BOOL v39 = 0), v39 || v37 == -1))
    {
      uint64_t *v21 = v35;
      char v36 = 1;
      uint64_t v37 = v35;
    }
  }
LABEL_37:
  if (!v33)
  {
    uint64_t result = v38;
    goto LABEL_46;
  }
  v20[v38] = v33;
  uint64_t result = v38 + 1;
  if (v33 == a7) {
    char v40 = 1;
  }
  else {
    char v40 = v36;
  }
  if (v40)
  {
LABEL_46:
    if (!v31 || v37 != -1)
    {
LABEL_49:
      if (!a9) {
        goto LABEL_57;
      }
LABEL_50:
      v20[result++] = a9;
      return result;
    }
LABEL_48:
    uint64_t *v21 = v34;
    char v36 = 1;
    goto LABEL_49;
  }
  if (!a2 && v33 == a6 || (v33 == a8 ? (BOOL v41 = a2 == 1) : (BOOL v41 = 0), v41 || v37 == -1))
  {
    uint64_t v34 = v38;
    goto LABEL_48;
  }
  char v36 = 0;
  if (a9) {
    goto LABEL_50;
  }
LABEL_57:
  if (!result)
  {
    if (a4)
    {
      *int v20 = a4;
      if (v36) {
        return 1;
      }
      goto LABEL_6;
    }
    if (a10)
    {
      *int v20 = a10;
      if (v36) {
        return 1;
      }
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

CFArrayRef ABCPersonCopyNamePieces(const void *a1, int a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (ABLogAPIUsage())
  {
    int v20 = _isMainThread();
    CFArrayRef v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABCPersonCopyNamePieces(ABCRecordRef, ABCPersonSortOrdering, CFIndex *)", 3183, v5, 0, v6, v7, v8, (uint64_t)v20);
    CFRelease(v5);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)values = 0u;
  ABPersonCompositeNameFormat CompositeNameFormatForRecord = ABPersonGetCompositeNameFormatForRecord(a1);
  int Value = ABCRecordGetValue(a1, kABCKindProperty);
  CFStringRef v11 = _nonEmptyNamePiece((uint64_t)a1, kABCOrganizationProperty);
  CFStringRef v12 = _nonEmptyNamePiece((uint64_t)a1, kABCPrefixProperty);
  CFStringRef v13 = _nonEmptyNamePiece((uint64_t)a1, kABCFirstNameProperty);
  CFStringRef v14 = _nonEmptyNamePiece((uint64_t)a1, kABCMiddleNameProperty);
  CFStringRef v15 = _nonEmptyNamePiece((uint64_t)a1, kABCLastNameProperty);
  CFStringRef v16 = _nonEmptyNamePiece((uint64_t)a1, kABCSuffixProperty);
  CFStringRef v17 = _nonEmptyNamePiece((uint64_t)a1, kABCCompositeNameFallbackProperty);
  CFIndex v18 = ABCPersonNameOrderPieces(CompositeNameFormatForRecord, a2, Value, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, values, a3);
  if (v18 < 1) {
    return 0;
  }
  else {
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, v18, MEMORY[0x1E4F1D510]);
  }
}

CFStringRef _nonEmptyNamePiece(uint64_t a1, uint64_t property)
{
  if ((ABPersonGetTypeOfProperty(property) & 0x101) != 1) {
    return 0;
  }
  CFStringRef result = (const __CFString *)ABCRecordGetValue(a1, property);
  if (result)
  {
    CFStringRef v5 = result;
    if (CFStringGetLength(result)) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ABCPersonInvalidateSyntheticProperties()
{
  CPRecordSetProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  CPRecordUnloadProperty();
  return CPRecordUnloadProperty();
}

CFIndex saveImage(CFIndex result)
{
  if (result)
  {
    CFIndex v1 = result;
    CFStringRef v2 = (const __CFString *)ABCGetAddressBookForRecord();
    ABCAddressBookGetImageStore(v2);
    CFStringRef result = ABCRecordGetValue(v1, kABCImageProperty);
    if (result)
    {
      CFArrayRef v3 = (const __CFArray *)result;
      CFStringRef result = CFArrayGetCount((CFArrayRef)result);
      if (result >= 1)
      {
        CFIndex v4 = result;
        for (CFIndex i = 0; i != v4; ++i)
        {
          CFArrayGetValueAtIndex(v3, i);
          CPRecordGetClass();
          if (CPRecordGetProperty() == -1)
          {
            CPRecordGetID();
            CPRecordSetProperty();
          }
          CFStringRef result = CPRecordGetID();
          if (result == -1) {
            CFStringRef result = CPRecordStoreAddRecord();
          }
        }
      }
    }
  }
  return result;
}

void loadSyntheticNameProperty(const void *a1, uint64_t a2, uint64_t a3)
{
  if (CPRecordGetProperty())
  {
    CFStringRef v85 = 0;
    CFStringRef v86 = 0;
    int v83 = -1;
    int v84 = -1;
    uint64_t v6 = ABCGetAddressBookForRecord();
    WordTokenizer = ABAddressBookGetWordTokenizer(v6);
    SortCollator = (void *)ABAddressBookGetSortCollator(v6);
    uint64_t SearchCollator = ABAddressBookGetSearchCollator(v6);
    CFMutableStringRef Mutable = 0;
    if (SortCollator)
    {
      uint64_t v11 = SearchCollator;
      CFMutableStringRef v12 = 0;
      CFStringRef v13 = 0;
      CFDataRef v14 = 0;
      CFDataRef v15 = 0;
      if (SearchCollator)
      {
        int Property = CPRecordGetProperty();
        unsigned int ShouldUseExtraTokenizations = ABAddressBookShouldUseExtraTokenizations(v6);
        CFStringRef v74 = (const __CFString *)ABAddressBookCopySectionNameTransform(v6);
        CFStringRef v17 = (const __CFString *)ABAddressBookCopySearchTransform(v6);
        CFStringRef v54 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v79 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v18 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v56 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v81 = (const __CFString *)CPRecordGetProperty();
        uint64_t v77 = (uint64_t)SortCollator;
        CFStringRef v82 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v75 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v68 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v70 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v72 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v64 = (const __CFString *)CPRecordGetProperty();
        CFStringRef v62 = (const __CFString *)CPRecordGetProperty();
        CFTypeRef cf = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v54, v17, ShouldUseExtraTokenizations, v11, 0);
        int v60 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v79, v17, ShouldUseExtraTokenizations, v11, 0);
        int v59 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v18, v17, ShouldUseExtraTokenizations, v11, 0);
        uint64_t v58 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v56, v17, ShouldUseExtraTokenizations, v11, 0);
        CFArrayRef theArray = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v81, v17, ShouldUseExtraTokenizations, v11, 0);
        uint64_t v66 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v82, v17, ShouldUseExtraTokenizations, v11, 0);
        int v76 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v75, v17, 0, v11, 0);
        int v57 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v68, v17, 0, v11, 0);
        CFDataRef v65 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v64, v17, ShouldUseExtraTokenizations, v11, 0);
        float v63 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v62, v17, ShouldUseExtraTokenizations, v11, 0);
        int v69 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v70, v17, 0, v11, 0);
        long long v55 = _copySortKeysForStringAndTransformedStringIfNotNull(WordTokenizer, v72, v17, 0, v11, 0);
        uint64_t v73 = _copyExtraSortKeysForOrganizationIfNotNull(WordTokenizer, v81, v17, v11, 0);
        CFStringRef v53 = v17;
        uint64_t v71 = _copyExtraSortKeysForOrganizationIfNotNull(WordTokenizer, v82, v17, v11, 0);
        CreateSectionSortKeys(v6, a1, Property, (uint64_t)v54, (uint64_t)v18, (uint64_t)v79, (uint64_t)v56, (uint64_t)v81, (uint64_t)v82, &v86, &v84, 0, SortCollator, v74);
        uint64_t v19 = (uint64_t)v18;
        CreateSectionSortKeys(v6, a1, Property, (uint64_t)v54, (uint64_t)v18, (uint64_t)v79, (uint64_t)v56, (uint64_t)v81, (uint64_t)v82, &v85, &v83, 1, SortCollator, v74);
        if (!v54 && !v79 && !v18 && !v56 && !v81 && !v82)
        {
          CFStringRef v13 = (const __CFString *)ABCCopyFallbackStringFromRecord(a1);
          if (v13)
          {
            CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
            int v20 = ABCCreateSortKeysForString(WordTokenizer, v13, 0, (uint64_t)SortCollator, 2);
            ABCMergeSortKeysIntoString(Mutable, v20, 0, 0);
            BOOL v21 = Mutable != 0;
            if (Mutable)
            {
              CFRetain(Mutable);
              CFRetain(Mutable);
            }
            CFRetain(v13);
          }
          else
          {
            CFMutableStringRef Mutable = 0;
            BOOL v21 = 0;
            int v20 = 0;
          }
          CFStringRef v30 = v53;
          uint64_t v31 = CFArrayCreateMutable(0, 0, 0);
          _appendSearchKeys(v31, v76);
          _appendSearchKeys(v31, v69);
          if (CFArrayGetCount(v31) < 1)
          {
            if (!v20)
            {
              CFDataRef v14 = 0;
              if (!v13) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }
            CFArrayRef v32 = v20;
          }
          else
          {
            CFArrayRef v32 = v31;
          }
          CFDataRef v14 = ABCopySortKeyForSortKeys(v32);
          if (!v13)
          {
LABEL_36:
            if (v21) {
              CFRelease(Mutable);
            }
            if (v20) {
              CFRelease(v20);
            }
            uint64_t v27 = v66;
            if (v31) {
              CFRelease(v31);
            }
            CFMutableStringRef v78 = Mutable;
            uint64_t v34 = theArray;
LABEL_79:
            int v42 = CFArrayCreateMutable(0, 0, 0);
            if (v42)
            {
              double v43 = v42;
              CFArrayRef v44 = v34;
              CFArrayRef v45 = v27;
              CFArrayRef v46 = v71;
              CFArrayRef v47 = v73;
              if (!Property)
              {
                _appendSearchKeys(v42, v59);
                _appendSearchKeys(v43, v58);
                _appendSearchKeys(v43, cf);
                _appendSearchKeys(v43, v57);
                _appendSearchKeys(v43, v60);
                CFArrayRef v44 = v76;
                CFArrayRef v45 = v55;
                CFArrayRef v46 = v63;
                CFArrayRef v47 = v65;
              }
              _appendSearchKeys(v43, v44);
              _appendSearchKeys(v43, v45);
              _appendSearchKeys(v43, v47);
              _appendSearchKeys(v43, v46);
              CFDataRef v15 = ABCopySortKeyForSortKeys(v43);
              CFRelease(v43);
              uint64_t v27 = v66;
              uint64_t v34 = theArray;
            }
            else
            {
              CFDataRef v15 = 0;
            }
            if (v74) {
              CFRelease(v74);
            }
            if (v30) {
              CFRelease(v30);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v60) {
              CFRelease(v60);
            }
            if (v59) {
              CFRelease(v59);
            }
            if (v58) {
              CFRelease(v58);
            }
            if (v34) {
              CFRelease(v34);
            }
            if (v27) {
              CFRelease(v27);
            }
            CFMutableStringRef v12 = v78;
            if (v76) {
              CFRelease(v76);
            }
            if (v57) {
              CFRelease(v57);
            }
            if (v69) {
              CFRelease(v69);
            }
            if (v55) {
              CFRelease(v55);
            }
            if (v73) {
              CFRelease(v73);
            }
            if (v71) {
              CFRelease(v71);
            }
            if (v65) {
              CFRelease(v65);
            }
            if (v63) {
              CFRelease(v63);
            }
            goto LABEL_116;
          }
LABEL_35:
          CFRelease(v13);
          goto LABEL_36;
        }
        v87[0] = 0;
        uint64_t v22 = ABCCreateSortKeysForString(WordTokenizer, v54, 0, (uint64_t)SortCollator, 2);
        v50 = ABCCreateSortKeysForString(WordTokenizer, v79, 0, v77, 2);
        uint64_t v49 = ABCCreateSortKeysForString(WordTokenizer, v18, 0, v77, 2);
        uint64_t v52 = ABCCreateSortKeysForString(WordTokenizer, v56, 0, v77, 2);
        long long v23 = ABCCreateSortKeysForString(WordTokenizer, v81, 0, v77, 2);
        long long v24 = ABCCreateSortKeysForString(WordTokenizer, v82, 0, v77, 2);
        CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v26 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        CFMutableStringRef Mutable = v26;
        v51 = v23;
        if (Property)
        {
          uint64_t v27 = v66;
          if (!((unint64_t)v23 | (unint64_t)v24))
          {
            ABCMergeSortKeysIntoString(v26, v49, v19, v87);
            ABCMergeSortKeysIntoString(Mutable, v52, (uint64_t)v56, v87);
            ABCMergeSortKeysIntoString(Mutable, v22, (uint64_t)v54, v87);
            uint64_t v28 = Mutable;
            CFArrayRef v29 = v50;
            uint64_t v33 = (uint64_t)v79;
            goto LABEL_44;
          }
          ABCMergeSortKeysIntoString(v26, v24, (uint64_t)v82, v87);
          uint64_t v28 = Mutable;
          CFArrayRef v29 = v23;
        }
        else
        {
          uint64_t v27 = v66;
          if (!v22 && !v50 && !v49 && !v52 && !v81 && !v24)
          {
LABEL_45:
            if (CFStringGetLength(Mutable) <= 0)
            {
              CFRelease(Mutable);
              CFMutableStringRef Mutable = 0;
            }
            CFMutableStringRef v78 = CFStringCreateMutable(v25, 0);
            v87[0] = 0;
            if (Property)
            {
              if ((unint64_t)v23 | (unint64_t)v24)
              {
                ABCMergeSortKeysIntoString(v78, v24, (uint64_t)v82, v87);
                ABCMergeSortKeysIntoString(v78, v23, (uint64_t)v81, v87);
                char v36 = v49;
                uint64_t v35 = v50;
LABEL_59:
                if (CFStringGetLength(v78) <= 0)
                {
                  CFRelease(v78);
                  CFMutableStringRef v78 = 0;
                }
                if (v22) {
                  CFRelease(v22);
                }
                if (v35) {
                  CFRelease(v35);
                }
                CFStringRef v30 = v53;
                if (v36) {
                  CFRelease(v36);
                }
                if (v52) {
                  CFRelease(v52);
                }
                if (v51) {
                  CFRelease(v51);
                }
                if (v24) {
                  CFRelease(v24);
                }
                char v40 = CFArrayCreateMutable(0, 0, 0);
                if (v40)
                {
                  BOOL v41 = v40;
                  _appendSearchKeys(v40, v65);
                  _appendSearchKeys(v41, v59);
                  _appendSearchKeys(v41, v58);
                  _appendSearchKeys(v41, cf);
                  _appendSearchKeys(v41, v57);
                  _appendSearchKeys(v41, v60);
                  _appendSearchKeys(v41, v63);
                  _appendSearchKeys(v41, v76);
                  _appendSearchKeys(v41, v69);
                  uint64_t v34 = theArray;
                  if (ShouldUseExtraTokenizations)
                  {
                    _appendSearchKeys(v41, theArray);
                    _appendSearchKeys(v41, v27);
                  }
                  _appendSearchKeys(v41, v73);
                  _appendSearchKeys(v41, v71);
                  CFDataRef v14 = ABCopySortKeyForSortKeys(v41);
                  CFRelease(v41);
                }
                else
                {
                  CFDataRef v14 = 0;
                  uint64_t v34 = theArray;
                }
                CFStringRef v13 = 0;
                goto LABEL_79;
              }
              ABCMergeSortKeysIntoString(v78, v52, (uint64_t)v56, v87);
              char v36 = v49;
              ABCMergeSortKeysIntoString(v78, v49, v19, v87);
              uint64_t v35 = v50;
              ABCMergeSortKeysIntoString(v78, v50, (uint64_t)v79, v87);
              uint64_t v37 = v78;
              CFArrayRef v38 = v22;
              uint64_t v39 = (uint64_t)v54;
            }
            else
            {
              char v36 = v49;
              uint64_t v35 = v50;
              if (!v22 && !v50 && !v49 && !v52 && !v81 && !v24) {
                goto LABEL_59;
              }
              ABCMergeSortKeysIntoString(v78, v52, (uint64_t)v56, v87);
              ABCMergeSortKeysIntoString(v78, v49, v19, v87);
              ABCMergeSortKeysIntoString(v78, v50, (uint64_t)v79, v87);
              ABCMergeSortKeysIntoString(v78, v22, (uint64_t)v54, v87);
              ABCMergeSortKeysIntoString(v78, v24, (uint64_t)v82, v87);
              uint64_t v37 = v78;
              CFArrayRef v38 = (const __CFArray *)v51;
              uint64_t v39 = (uint64_t)v81;
            }
            ABCMergeSortKeysIntoString(v37, v38, v39, v87);
            goto LABEL_59;
          }
          ABCMergeSortKeysIntoString(v26, v49, v19, v87);
          ABCMergeSortKeysIntoString(Mutable, v52, (uint64_t)v56, v87);
          ABCMergeSortKeysIntoString(Mutable, v22, (uint64_t)v54, v87);
          ABCMergeSortKeysIntoString(Mutable, v50, (uint64_t)v79, v87);
          ABCMergeSortKeysIntoString(Mutable, v24, (uint64_t)v82, v87);
          uint64_t v28 = Mutable;
          CFArrayRef v29 = v23;
        }
        uint64_t v33 = (uint64_t)v81;
LABEL_44:
        ABCMergeSortKeysIntoString(v28, v29, v33, v87);
        goto LABEL_45;
      }
    }
    else
    {
      CFMutableStringRef v12 = 0;
      CFStringRef v13 = 0;
      CFDataRef v14 = 0;
      CFDataRef v15 = 0;
    }
LABEL_116:
    CPRecordInitializeProperty();
    CPRecordSetProperty();
    CPRecordSetProperty();
    CPRecordSetProperty();
    CPRecordSetProperty();
    CPRecordSetProperty();
    CFStringRef v48 = v86;
    CPRecordSetProperty();
    CPRecordSetProperty();
    CPRecordSetProperty();
    CPRecordSetProperty();
    if (Mutable)
    {
      CFRelease(Mutable);
      CFStringRef v48 = v86;
    }
    if (v48) {
      CFRelease(v48);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v85) {
      CFRelease(v85);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v15) {
      CFRelease(v15);
    }
    return;
  }
  _ABCLoadSingleString((uint64_t)a1, a2, a3);
}

void CreateSectionSortKeys(uint64_t a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CFStringRef *a10, _DWORD *a11, int a12, void *a13, const __CFString *a14)
{
  CFStringRef NamePartForSorting = (const __CFString *)ABPersonCopyFirstNamePartForSorting(a2, a3, a4, a5, a6, a7, a8, a9, a12);
  if (!NamePartForSorting) {
    goto LABEL_35;
  }
  CFStringRef v16 = NamePartForSorting;
  if (CFStringGetLength(NamePartForSorting) <= 0)
  {
    uint64_t v19 = v16;
LABEL_34:
    CFRelease(v19);
    goto LABEL_35;
  }
  if (a14)
  {
    ABMutableMultiValueRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v16);
    if (CFStringTransform(MutableCopy, 0, a14, 0))
    {
      CFStringRef v18 = v16;
      CFStringRef v16 = MutableCopy;
    }
    else
    {
      CFStringRef v18 = MutableCopy;
      if (!MutableCopy) {
        goto LABEL_9;
      }
    }
    CFRelease(v18);
  }
LABEL_9:
  int v20 = ABCreateDataSortKey(v16, (uint64_t)a13, 0);
  CFRelease(v16);
  if (!v20)
  {
LABEL_35:
    *a11 = 0x7FFFFFFF;
    *a10 = 0;
    return;
  }
  CFArrayRef v42 = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v21 = (const __CFArray *)ABAddressBookCopySectionHeaderDictionaries(a1, (unint64_t)&theArray, (unint64_t)&v42, a13);
  if (!v21)
  {
    uint64_t v19 = v20;
    goto LABEL_34;
  }
  CFArrayRef v22 = v21;
  CFIndex Count = CFArrayGetCount(v21);
  if (Count >= 1)
  {
    CFIndex v24 = Count;
    BOOL v25 = 0;
    CFIndex v26 = 0;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, v26);
      CFArrayRef v28 = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v26);
      CFArrayRef v29 = (const __CFArray *)CFArrayGetValueAtIndex(v42, v26);
      CFIndex v30 = CFArrayGetCount(v28);
      v44.location = 0;
      v44.length = v30;
      uint64_t v31 = CFArrayBSearchValues(v29, v44, v20, (CFComparatorFunction)ABCompareDataSortKeys, 0);
      if (v31 >= v30)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"FirstCharacterAfterLanguage");
        if (Value)
        {
          uint64_t v34 = ABCreateDataSortKey(Value, (uint64_t)a13, 0);
          if (ABCompareDataSortKeys((const __CFData *)v20, (const __CFData *)v34) == -1)
          {
            uint64_t v31 = v30 - 1;
            BOOL v25 = 1;
          }
        }
        else
        {
          CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"LastCharacter");
          uint64_t v34 = ABCreateDataSortKey(v35, (uint64_t)a13, 0);
          char v36 = ABCreateUpperBoundingDataSortKey((const __CFData *)v34);
          if (ABCompareDataSortKeys((const __CFData *)v20, (const __CFData *)v36) < 1)
          {
            uint64_t v31 = v30 - 1;
            BOOL v25 = 1;
          }
          if (v36) {
            CFRelease(v36);
          }
        }
        if (v34) {
          CFRelease(v34);
        }
      }
      else
      {
        CFDataRef v32 = (const __CFData *)CFArrayGetValueAtIndex(v29, v31);
        if (v31)
        {
          if (v31 >= 1)
          {
            v31 -= ABCompareDataSortKeys(v32, (const __CFData *)v20) == 1;
            BOOL v25 = 1;
            goto LABEL_29;
          }
        }
        else
        {
          BOOL v25 = ABCompareDataSortKeys((const __CFData *)v20, v32) >= 0;
        }
      }
      if (!v25)
      {
        int v37 = 0;
        goto LABEL_30;
      }
LABEL_29:
      CFDataRef v38 = (const __CFData *)CFArrayGetValueAtIndex(v29, v31);
      BytePtr = (const char *)CFDataGetBytePtr(v38);
      *a11 = v26;
      size_t v40 = strlen(BytePtr);
      *a10 = CFStringCreateWithBytes(alloc, (const UInt8 *)BytePtr, v40, 0x201u, 0);
      int v37 = v25;
LABEL_30:
      if (++v26 >= v24 || v37) {
        goto LABEL_38;
      }
    }
  }
  BOOL v25 = 0;
LABEL_38:
  CFRelease(v22);
  CFRelease(theArray);
  CFRelease(v42);
  CFRelease(v20);
  if (!v25) {
    goto LABEL_35;
  }
}

uint64_t saveSearchKey()
{
  CFDataRef Property = (const __CFData *)CPRecordGetProperty();
  CFDataRef v1 = (const __CFData *)CPRecordGetProperty();
  uint64_t result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    uint64_t v3 = result;
    CFIndex v4 = *(sqlite3_stmt **)(result + 8);
    if (v4)
    {
      int ID = CPRecordGetID();
      sqlite3_bind_int(v4, 1, ID);
      uint64_t v6 = *(sqlite3_stmt **)(v3 + 8);
      if (Property)
      {
        BytePtr = CFDataGetBytePtr(Property);
        int Length = CFDataGetLength(Property);
        sqlite3_bind_blob(v6, 2, BytePtr, Length, 0);
      }
      else
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(v3 + 8), 2);
      }
      uint64_t v9 = *(sqlite3_stmt **)(v3 + 8);
      if (v1)
      {
        uint64_t v10 = CFDataGetBytePtr(v1);
        int v11 = CFDataGetLength(v1);
        sqlite3_bind_blob(v9, 3, v10, v11, 0);
      }
      else
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(v3 + 8), 3);
      }
      CPSqliteStatementPerform();
      return CPSqliteStatementReset();
    }
  }
  return result;
}

void loadAlternateBirthday(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)_ABCCreateSingleStringValue(a1, a2, a3);
  if (v3)
  {
    CFIndex v4 = v3;
    CFStringRef v5 = ABCreateAlternateBirthdayFromString(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      CPRecordInitializeProperty();
      CFRelease(v6);
    }
    CFRelease(v4);
  }
}

void saveAlternateBirthday(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDataRef Property = (void *)CPRecordGetProperty();
  CFStringRef v7 = (const __CFString *)ABCreateStringFromAlternateBirthday(Property);
  _ABCSaveSingleStringValue(a1, a2, a3, v7);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t _prepareForSave()
{
  if (CPRecordGetProperty())
  {
    CPRecordGetID();
    CPRecordSetProperty();
  }
  return CPRecordGetProperty();
}

void _didSave(const void *a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (ABCFTSIsEnabled())
  {
    if (CPRecordIsPendingAdd())
    {
      ABCDContextCreateSearchIndexEntryForPerson(a2, a1);
      ABCDContextUpdateSearchIndexForPerson(a2, a1);
    }
    else if (a3)
    {
      CFIndex Count = CFDictionaryGetCount(a3);
      CFStringRef v7 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(a3, v7, 0);
      CFArrayRef v8 = CFArrayCreate(0, v7, Count, 0);
      ABCDContextUpdateSearchIndexForPersonAndProperties(a2, a1, v8);
      free(v7);
      CFRelease(v8);
    }
    else
    {
      CFTypeRef v9 = ABRecordCopyValue(a1, kABPersonInternalUUIDProperty);
      uint64_t v10 = ABOSLogGeneral();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = 138543362;
        CFTypeRef v12 = v9;
        _os_log_impl(&dword_19DCDB000, v10, OS_LOG_TYPE_INFO, "ABCPerson _didSave() has no changes for contact identifier (%{public}@) to update the search index with", (uint8_t *)&v11, 0xCu);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void _appendTokenizedWordsToArray(__CFArray *a1, const __CFString *a2)
{
  if (a1)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, @"-");
    if (ArrayBySeparatingStrings)
    {
      CFArrayRef v4 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) >= 2)
      {
        v6.length = CFArrayGetCount(v4);
        v6.location = 0;
        CFArrayAppendArray(a1, v4, v6);
      }
      CFRelease(v4);
    }
  }
}

uint64_t _findFacebookStoreRowHandler(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 8);
  CFStringRef v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v5)
  {
    CFRange v6 = [NSString stringWithCString:v5 encoding:4];
    if ([v6 length])
    {
      CFStringRef v7 = ABAccountCachedTypeForAccountIdentifier((uint64_t)v6);
      CFArrayRef v8 = v7;
      if (v7)
      {
        id v9 = v7;
      }
      else
      {
        int v11 = [v4 displayTypeForAccountWithIdentifier:v6];
        id v9 = [v11 identifier];
      }
      if (+[ABFacebookMigrator isAccountTypeFacebook:v9])
      {
        CFTypeRef v12 = *(sqlite3_stmt **)(a1 + 8);
        uint64_t v10 = 1;
        *(_DWORD *)a2 = sqlite3_column_int(v12, 1);
      }
      else
      {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t ABCRecordSetContents()
{
  return 1;
}

uint64_t ABCRecordSetValue(const void *a1, uint64_t a2, __CFString *a3)
{
  return ABCRecordSetValueAndReturnError(a1, a2, a3, 0);
}

uint64_t ABCRecordSetIntValueAndReturnError(const void *a1, uint64_t a2, int a3, CFAllocatorRef *a4)
{
  int valuePtr = a3;
  CFStringRef v7 = (__CFString *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v7) {
    return 0;
  }
  CFArrayRef v8 = v7;
  uint64_t v9 = ABCRecordSetValueAndReturnError(a1, a2, v7, a4);
  CFRelease(v8);
  return v9;
}

uint64_t ABCRecordRemoveValue(const void *a1, uint64_t a2)
{
  return ABCRecordSetValueAndReturnError(a1, a2, 0, 0);
}

uint64_t ABCRecordRemoveValueAndReturnError(const void *a1, uint64_t a2)
{
  return ABCRecordSetValueAndReturnError(a1, a2, 0, 0);
}

uint64_t ABCRecordShow()
{
  return MEMORY[0x1F4109488]();
}

uint64_t ABCRecordCopyCompositeName(uint64_t a1)
{
  Class = (char **)CPRecordGetClass();
  if (Class == (char **)ABCPersonClass)
  {
    return ABCPersonCopyCompositeName(a1);
  }
  else if (Class == ABCGroupClass[0])
  {
    return ABCGroupCopyCompositeName(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t ABCRecordNameForProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
  if (!v3) {
    return 0;
  }
  return v3(a2);
}

void _ABCSaveSingleStringValue(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4)
{
  if (a1)
  {
    if (a3)
    {
      CFRange v6 = *(const char **)CPRecordGetClass();
      ABMutableMultiValueRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE ");
      CFStringAppendCString(MutableCopy, v6, 0x8000100u);
      CFStringAppend(MutableCopy, @" SET ");
      if (MutableCopy)
      {
        CFArrayRef v8 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
        CFStringRef v9 = v8 ? (const __CFString *)v8(a2) : 0;
        CFStringAppend(MutableCopy, v9);
        CFStringAppend(MutableCopy, @" = ? WHERE ROWint ID = ?;");
        uint64_t v10 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v10)
        {
          int v11 = *(sqlite3_stmt **)(v10 + 8);
          if (v11)
          {
            int ID = CPRecordGetID();
            sqlite3_bind_int(v11, 2, ID);
            if (a4)
            {
              CFIndex usedBufLen = 0;
              CFIndex Length = CFStringGetLength(a4);
              CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
              CFDataRef v15 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xF35561A2uLL);
              v17.location = 0;
              v17.length = Length;
              CFStringGetBytes(a4, v17, 0x8000100u, 0, 0, v15, MaximumSizeForEncoding, &usedBufLen);
              v15[usedBufLen] = 0;
              sqlite3_bind_text(*(sqlite3_stmt **)(v10 + 8), 1, (const char *)v15, -1, MEMORY[0x1E4F14838]);
            }
            else
            {
              sqlite3_bind_null(*(sqlite3_stmt **)(v10 + 8), 1);
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
}

uint64_t _ABCCreateSingleStringValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  if (!a3) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT ");
  if (!MutableCopy) {
    return 0;
  }
  CFStringRef v5 = MutableCopy;
  CFRange v6 = *(const char **)CPRecordGetClass();
  CFStringRef v7 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
  CFStringRef v8 = v7 ? (const __CFString *)v7(a2) : 0;
  CFStringAppend(v5, v8);
  CFStringAppend(v5, @" FROM ");
  CFStringAppendCString(v5, v6, 0x8000100u);
  CFStringAppend(v5, @" WHERE ROWint ID = ?;");
  uint64_t v9 = CPSqliteConnectionStatementForSQL();
  CFRelease(v5);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(sqlite3_stmt **)(v9 + 8);
  if (!v10) {
    return 0;
  }
  int ID = CPRecordGetID();
  sqlite3_bind_int(v10, 1, ID);
  uint64_t v12 = CPSqliteStatementCopyStringResult();
  CPSqliteStatementReset();
  return v12;
}

void _ABCSaveSingleString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  _ABCSaveSingleStringValue(a1, a2, a3, Property);
}

void _ABCLoadSingleString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = _ABCCreateSingleStringValue(a1, a2, a3);
  if (v3)
  {
    id v4 = (const void *)v3;
    CPRecordInitializeProperty();
    CFRelease(v4);
  }
}

void _ABCMultiSaveStrings(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v8 = CFArrayGetCount(theArray);
  CFMutableStringRef Mutable = CFArrayCreateMutable(v7, v8, 0);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(theArray, i);
      CFStringRef Property = (const void *)CPRecordGetProperty();
      CFArrayAppendValue(Mutable, Property);
    }
  }
  if (a1)
  {
    if (a3)
    {
      uint64_t v12 = *(const char **)CPRecordGetClass();
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v7, 0, @"UPDATE ");
      CFStringAppendCString(MutableCopy, v12, 0x8000100u);
      CFStringAppend(MutableCopy, @" SET ");
      if (MutableCopy)
      {
        CFIndex v14 = CFArrayGetCount(theArray);
        if (v14 >= 1)
        {
          for (CFIndex j = 0; j != v14; ++j)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, j);
            CFRange v17 = *(uint64_t (**)(const void *))(CPRecordGetClass() + 64);
            if (v17) {
              CFStringRef v18 = (const __CFString *)v17(ValueAtIndex);
            }
            else {
              CFStringRef v18 = 0;
            }
            CFStringAppend(MutableCopy, v18);
            if (j >= v14 - 1) {
              CFStringRef v19 = @" = ? WHERE ROWID = ?;";
            }
            else {
              CFStringRef v19 = @" = ?,";
            }
            CFStringAppend(MutableCopy, v19);
          }
        }
        uint64_t v20 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v20)
        {
          CFArrayRef v21 = *(sqlite3_stmt **)(v20 + 8);
          if (v21)
          {
            int v22 = CFArrayGetCount(theArray) + 1;
            int ID = CPRecordGetID();
            sqlite3_bind_int(v21, v22, ID);
            if (v14 >= 1)
            {
              for (CFIndex k = 0; k != v14; ++k)
              {
                CFStringRef v25 = (const __CFString *)CFArrayGetValueAtIndex(Mutable, k);
                if (v25)
                {
                  CFStringRef v26 = v25;
                  CFIndex usedBufLen = 0;
                  CFIndex Length = CFStringGetLength(v25);
                  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
                  CFArrayRef v29 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x6C510CC3uLL);
                  v31.location = 0;
                  v31.length = Length;
                  CFStringGetBytes(v26, v31, 0x8000100u, 0, 0, v29, MaximumSizeForEncoding, &usedBufLen);
                  v29[usedBufLen] = 0;
                  sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), k + 1, (const char *)v29, -1, MEMORY[0x1E4F14838]);
                }
                else
                {
                  sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), k + 1);
                }
              }
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
  CFRelease(Mutable);
}

void _ABCSaveSingleData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Property = CPRecordGetProperty();
  if (a1)
  {
    if (a3)
    {
      CFDataRef v7 = (const __CFData *)Property;
      CFIndex v8 = *(const char **)CPRecordGetClass();
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE ");
      CFStringAppendCString(MutableCopy, v8, 0x8000100u);
      CFStringAppend(MutableCopy, @" SET ");
      if (MutableCopy)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
        CFStringRef v11 = v10 ? (const __CFString *)v10(a2) : 0;
        CFStringAppend(MutableCopy, v11);
        CFStringAppend(MutableCopy, @" = ? WHERE ROWint ID = ?;");
        uint64_t v12 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v12)
        {
          uint64_t v13 = *(sqlite3_stmt **)(v12 + 8);
          if (v13)
          {
            int ID = CPRecordGetID();
            sqlite3_bind_int(v13, 2, ID);
            if (v7 && (CFIndex Length = CFDataGetLength(v7), Length >= 1))
            {
              int v16 = Length;
              BytePtr = CFDataGetBytePtr(v7);
              sqlite3_bind_blob(*(sqlite3_stmt **)(v12 + 8), 1, BytePtr, v16, 0);
            }
            else
            {
              sqlite3_bind_null(*(sqlite3_stmt **)(v12 + 8), 1);
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
}

void _ABCLoadSingleData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      id v4 = *(const char **)CPRecordGetClass();
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT ");
      if (MutableCopy)
      {
        CFDataRef v7 = MutableCopy;
        CFIndex v8 = *(uint64_t (**)(uint64_t))(CPRecordGetClass() + 64);
        CFStringRef v9 = v8 ? (const __CFString *)v8(a2) : 0;
        CFStringAppend(v7, v9);
        CFStringAppend(v7, @" FROM ");
        CFStringAppendCString(v7, v4, 0x8000100u);
        CFStringAppend(v7, @" WHERE ROWint ID = ?;");
        uint64_t v10 = CPSqliteConnectionStatementForSQL();
        CFRelease(v7);
        if (v10)
        {
          CFStringRef v11 = *(sqlite3_stmt **)(v10 + 8);
          if (v11)
          {
            int ID = CPRecordGetID();
            sqlite3_bind_int(v11, 1, ID);
            if (sqlite3_step(*(sqlite3_stmt **)(v10 + 8)) != 100
              || ((unsigned int v13 = sqlite3_column_bytes(*(sqlite3_stmt **)(v10 + 8), 0),
                   CFIndex v14 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v10 + 8), 0),
                   v13)
                ? (BOOL v15 = v14 == 0)
                : (BOOL v15 = 1),
                  v15))
            {
              CPSqliteStatementReset();
            }
            else
            {
              CFDataRef v16 = CFDataCreate(v5, v14, v13);
              CPSqliteStatementReset();
              if (v16)
              {
                CPRecordInitializeProperty();
                CFRelease(v16);
              }
            }
          }
        }
      }
    }
  }
}

void _ABCMultiSaveDatas(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v8 = CFArrayGetCount(theArray);
  CFMutableStringRef Mutable = CFArrayCreateMutable(v7, v8, 0);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFArrayGetValueAtIndex(theArray, i);
      uint64_t Property = (const void *)CPRecordGetProperty();
      CFArrayAppendValue(Mutable, Property);
    }
  }
  if (a1)
  {
    if (a3)
    {
      uint64_t v12 = *(const char **)CPRecordGetClass();
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v7, 0, @"UPDATE ");
      CFStringAppendCString(MutableCopy, v12, 0x8000100u);
      CFStringAppend(MutableCopy, @" SET ");
      if (MutableCopy)
      {
        CFIndex v14 = CFArrayGetCount(theArray);
        if (v14 >= 1)
        {
          for (CFIndex j = 0; j != v14; ++j)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, j);
            CFRange v17 = *(uint64_t (**)(const void *))(CPRecordGetClass() + 64);
            if (v17) {
              CFStringRef v18 = (const __CFString *)v17(ValueAtIndex);
            }
            else {
              CFStringRef v18 = 0;
            }
            CFStringAppend(MutableCopy, v18);
            if (j >= v14 - 1) {
              CFStringRef v19 = @" = ? WHERE ROWID = ?;";
            }
            else {
              CFStringRef v19 = @" = ?,";
            }
            CFStringAppend(MutableCopy, v19);
          }
        }
        uint64_t v20 = CPSqliteConnectionStatementForSQL();
        CFRelease(MutableCopy);
        if (v20)
        {
          CFArrayRef v21 = *(sqlite3_stmt **)(v20 + 8);
          if (v21)
          {
            int v22 = CFArrayGetCount(theArray) + 1;
            int ID = CPRecordGetID();
            sqlite3_bind_int(v21, v22, ID);
            if (v14 >= 1)
            {
              for (CFIndex k = 0; k != v14; ++k)
              {
                CFDataRef v25 = (const __CFData *)CFArrayGetValueAtIndex(Mutable, k);
                if (v25 && (v26 = v25, CFIndex Length = CFDataGetLength(v25), Length >= 1))
                {
                  int v28 = Length;
                  BytePtr = CFDataGetBytePtr(v26);
                  sqlite3_bind_blob(*(sqlite3_stmt **)(v20 + 8), k + 1, BytePtr, v28, 0);
                }
                else
                {
                  sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), k + 1);
                }
              }
            }
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
      }
    }
  }
  CFRelease(Mutable);
}

void loadGUIDProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (CPRecordGetID() == -1)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFUUIDRef v8 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    if (!v8) {
      return;
    }
    CFUUIDRef v9 = v8;
    CFRange v6 = CFUUIDCreateString(v7, v8);
    CFRelease(v9);
    if (!v6) {
      return;
    }
  }
  else
  {
    CFRange v6 = (const void *)_ABCCreateSingleStringValue(a1, a2, a3);
    if (!v6) {
      return;
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v6);
}

void loadLinkUUIDProperty(uint64_t a1)
{
  int IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty);
  if (IntValue != -1)
  {
    int v2 = IntValue;
    uint64_t v3 = CPSqliteConnectionStatementForSQL();
    if (v3)
    {
      id v4 = *(sqlite3_stmt **)(v3 + 8);
      if (v4)
      {
        sqlite3_bind_int(v4, 1, v2);
        CFAllocatorRef v5 = (const void *)CPSqliteStatementCopyStringResult();
        CPRecordInitializeProperty();
        CPSqliteStatementReset();
        CFRelease(v5);
      }
    }
  }
}

UInt8 *_ABCCreateUTF8StringFromCFString(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = 0;
  id v4 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xCC8B0DB1uLL);
  v7.location = 0;
  v7.length = Length;
  CFStringGetBytes(a1, v7, 0x8000100u, 0, 0, v4, MaximumSizeForEncoding, &usedBufLen);
  v4[usedBufLen] = 0;
  return v4;
}

CFDateRef _ABCCreateDateFromCFString(const __CFString *a1)
{
  CFAbsoluteTime at = 0.0;
  CFDataRef v1 = _ABCCreateUTF8StringFromCFString(a1);
  if (!v1) {
    return 0;
  }
  int v2 = v1;
  if (sscanf((const char *)v1, "%lf", &at) == 1) {
    CFDateRef v3 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], at);
  }
  else {
    CFDateRef v3 = 0;
  }
  free(v2);
  return v3;
}

CFStringRef _ABCCreateCFStringFromDate(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  cStr = 0;
  double v1 = MEMORY[0x19F3B2F50]();
  asprintf(&cStr, "%lf", v1);
  if (!cStr) {
    return 0;
  }
  CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  free(cStr);
  return v2;
}

void loadSingleDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3 = (const __CFString *)_ABCCreateSingleStringValue(a1, a2, a3);
  if (v3)
  {
    CFStringRef v4 = v3;
    CFDateRef v5 = _ABCCreateDateFromCFString(v3);
    if (v5)
    {
      CFDateRef v6 = v5;
      CPRecordInitializeProperty();
      CFRelease(v6);
    }
    CFRelease(v4);
  }
}

void saveSingleDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Property = CPRecordGetProperty();
  CFStringRef v7 = _ABCCreateCFStringFromDate(Property);
  _ABCSaveSingleStringValue(a1, a2, a3, v7);
  if (v7)
  {
    CFRelease(v7);
  }
}

__CFDictionary *ABCMultiDictionaryCreateCopy(const __CFDictionary *a1)
{
  return ABCCopyDictionaryWithTypes(a1, 1, 1);
}

uint64_t ABCIntShow(const void *a1)
{
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "%p\n", a1);
}

uint64_t (**ABCCallBacksForType(int a1))()
{
  if ((a1 & 0x100) != 0) {
    return &ABCMultiValueTypeCallBacks;
  }
  int v1 = a1 - 1;
  if (a1 - 1) < 5 && ((0x1Bu >> v1)) {
    return (uint64_t (**)())*(&off_1E5988680 + v1);
  }
  printf("Can't return type callbacks for %d\n", a1);
  return (uint64_t (**)())&ABUnknownTypeCallbacks;
}

__CFDictionary *ABCCopyDictionaryWithTypes(const __CFDictionary *a1, int a2, int a3)
{
  if (!a1) {
    return 0;
  }
  if (a2 == 1) {
    CFDateRef v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  }
  else {
    CFDateRef v6 = 0;
  }
  if (a3 == 1) {
    CFStringRef v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  }
  else {
    CFStringRef v7 = 0;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6, v7);
  CFIndex Count = CFDictionaryGetCount(a1);
  if (Count)
  {
    uint64_t v10 = Count;
    CFStringRef v11 = ABCCallBacksForType(a2);
    uint64_t v12 = ABCCallBacksForType(a3);
    unsigned int v13 = (const void **)malloc_type_malloc(8 * v10, 0x80040B8603338uLL);
    CFIndex v14 = (const void **)malloc_type_malloc(8 * v10, 0x80040B8603338uLL);
    BOOL v15 = v14;
    if (v13 && v14)
    {
      CFDictionaryGetKeysAndValues(a1, v13, v14);
      if (v10 >= 1)
      {
        CFDataRef v16 = v13;
        CFRange v17 = v15;
        while (1)
        {
          CFStringRef v18 = (const void *)((uint64_t (*)(const void *))*v11)(*v16);
          CFStringRef v19 = (const void *)((uint64_t (*)(const void *))*v12)(*v17);
          uint64_t v20 = v19;
          if (v18 && v19 != 0) {
            break;
          }
          if (v18) {
            goto LABEL_23;
          }
          if (v19) {
            goto LABEL_20;
          }
LABEL_21:
          ++v17;
          ++v16;
          if (!--v10) {
            goto LABEL_27;
          }
        }
        CFDictionarySetValue(Mutable, v18, v19);
LABEL_23:
        CFRelease(v18);
        if (!v20) {
          goto LABEL_21;
        }
LABEL_20:
        CFRelease(v20);
        goto LABEL_21;
      }
    }
    else if (!v13)
    {
      goto LABEL_28;
    }
LABEL_27:
    free(v13);
LABEL_28:
    if (v15) {
      free(v15);
    }
  }
  return Mutable;
}

uint64_t ABCSingleValueType(int a1)
{
  return a1 & 0xFFFFFEFF;
}

uint64_t ABCDBContextUpdateSortDataVersions()
{
  uint64_t result = CPRecordStoreGetDatabase();
  if (result)
  {
    CPSqliteDatabaseConnectionForWriting();
    ABCDBContextUpdateSortDataVersionsWithConnection();
    return CPSqliteDatabaseReleaseSqliteConnection();
  }
  return result;
}

void ABCDBContextUpdateSortDataVersionsWithConnection()
{
  uint64_t v1 = 0;
  CFLocaleIdentifier v0 = ABCCopyUserLanguage();
  ABCGetICUCollatorVersions((_DWORD *)&v1 + 1, &v1);
  CPSqliteConnectionSetValueForProperty();
  ABCGetICUVersion();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionSetIntegerForProperty();
  CPSqliteConnectionRemoveProperty();
  CPSqliteConnectionRemoveProperty();
  CFRelease(v0);
}

BOOL _migrationCheckDatabaseVersion(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = CPSqliteConnectionIntegerForProperty();
  return a3 < 102 || v4 < 9;
}

uint64_t _migrateStoreAndAccountTables(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 <= 45)
  {
    BOOL v5 = ABCDBContextPerformSQLResultDone();
    int v6 = v5 & _renameTable(a2, @"ABStore", @"ABStore_old");
    int v7 = v6 & ABCDBContextCreateABCSourceTables(a2, 0);
    ABCDBContextPerformSQLResultDone();
    BOOL v8 = ABCDBContextPerformSQLResultDone();
    int v9 = v8 & ABCDBContextCreateDefaultABSource();
    int v10 = v7 & v9 & ABCDBContextPerformSQLResultDone();
    int v11 = v10 & ABCDBContextPerformSQLResultDone();
    if (a3 <= 24) {
      v11 &= ABCDBContextPerformSQLResultDone();
    }
    LODWORD(v12) = v11 & _dropTable(a2, @"ABStore_old");
    return v12 & ABCDBContextPerformSQLResultDone();
  }
  if (a3 > 0x5E) {
    return 1;
  }
  int v13 = _renameTable(a2, @"ABStore", @"ABStore_old");
  int v14 = v13 & _renameTable(a2, @"ABAccount", @"ABAccount_old");
  BOOL ABCSourceTables = ABCDBContextCreateABCSourceTables(a2, 0);
  int v16 = v14 & ABCSourceTables & ABCDBContextPerformSQLResultDone();
  BOOL v17 = ABCDBContextPerformSQLResultDone();
  int v18 = v17 & ABCDBContextPerformSQLResultDone();
  int v19 = v16 & v18 & _dropTable(a2, @"ABStore_old");
  uint64_t v12 = v19 & _dropTable(a2, @"ABAccount_old");
  if (a3 <= 0x5B) {
    return v12 & ABCDBContextPerformSQLResultDone();
  }
  return v12;
}

uint64_t _renameTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringCreateWithFormat(0, 0, @"alter table %@ rename to %@;", a2, a3);
  if (ABCDBContextPerformSQLResultDone()) {
    return 1;
  }
  if (_dropTable(a1, a3))
  {
    if (ABCDBContextPerformSQLResultDone()) {
      return 1;
    }
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _renameTable(CPSqliteConnection *, CFStringRef, CFStringRef)", 415, 0, @"Failed to drop table %@ after failed rename attempt.", v7, v8, v9, a3);
  }
  ABDiagnosticsEnabled();
  _ABLog2(3, (uint64_t)"_Bool _renameTable(CPSqliteConnection *, CFStringRef, CFStringRef)", 420, 0, @"Failed to rename table %@ to %@.", v10, v11, v12, a2);
  return 0;
}

BOOL ABCDBContextPerformSQLResultDone()
{
  uint64_t v0 = CPSqliteConnectionPerformSQL();
  if (v0 != 101)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool ABCDBContextPerformSQLResultDone(CPSqliteConnection *, CFStringRef)", 142, 0, @"Failed to execute sqlite. Result: %d, statement: %@.", v1, v2, v3, v0);
  }
  return v0 == 101;
}

BOOL _dropTable(uint64_t a1, uint64_t a2)
{
  CFStringCreateWithFormat(0, 0, @"drop table IF EXISTS %@", a2);
  BOOL v3 = ABCDBContextPerformSQLResultDone();
  if (!v3)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _dropTable(CPSqliteConnection *, CFStringRef)", 398, 0, @"Failed to drop table %@.", v4, v5, v6, a2);
  }
  return v3;
}

uint64_t _migrateGroupTables(uint64_t a1, uint64_t a2)
{
  int v3 = _renameTable(a2, @"ABGroup", @"ABGroup_old");
  int v4 = _renameTable(a2, @"ABGroupChanges", @"ABGroupChanges_old");
  BOOL v5 = ABCDBContextPerformSQLResultDone();
  BOOL v6 = ABCDBContextPerformSQLResultDone();
  BOOL v7 = ABCDBContextPerformSQLResultDone();
  int v8 = v7 & ABCDBContextPerformSQLResultDone();
  int v9 = v3 & v4 & (v5 && v6) & v8 & _dropTable(a2, @"ABGroup_old");
  BOOL v10 = _dropTable(a2, @"ABGroupChanges_old");
  return v9 & v10 & _dropTable(a2, @"ABGroupBasicChanges");
}

uint64_t _migrationMigrateDatabase(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (a3 <= 0xB && ((1 << a3) & 0xB00) != 0)
  {
    int LimitedAccessTable = _migrateStoreAndAccountTables(a1, a2, a3);
    if (ABDiagnosticsEnabled())
    {
      int v8 = ABLogStringForBool(LimitedAccessTable);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 998, 0, @"success=%@", v9, v10, v11, (uint64_t)v8);
    }
    if (LimitedAccessTable)
    {
      uint64_t v12 = _recreatePersonTables(a2, a3);
      int LimitedAccessTable = v12;
      if (a3 == 11)
      {
        uint64_t v12 = ABCDBContextPerformSQLResultDone();
        if ((LimitedAccessTable & v12 & 1) == 0) {
          goto LABEL_65;
        }
      }
      else if (!v12)
      {
        goto LABEL_129;
      }
      int v31 = _migrateGroupTables(v12, a2);
      goto LABEL_21;
    }
    goto LABEL_129;
  }
  if (a3 <= 6)
  {
    int v13 = _renameTable(a2, @"ABPerson", @"ABPerson_old");
    int v14 = v13 & _renameTable(a2, @"ABGroup", @"ABGroup_old");
    int v15 = _renameTable(a2, @"ABGroupChanges", @"ABGroupChanges_old");
    int v16 = v14 & v15 & _renameTable(a2, @"ABPersonChanges", @"ABPersonChanges_old");
    int v17 = v16 & _renameTable(a2, @"ABMultiValue", @"ABMultiValue_old");
    if (a3 == 6) {
      v17 &= _renameTable(a2, @"ABStore", @"ABStore_old");
    }
    int ABDatabaseTables = _createABDatabaseTables(a2, a3, a3 != 6, 0);
    int ABDatabaseTriggersAndIndicesAndDropFirst = 0;
    if (v17 && ABDatabaseTables) {
      int ABDatabaseTriggersAndIndicesAndDropFirst = _createABDatabaseTriggersAndIndicesAndDropFirst(a2, 1);
    }
    int v20 = ABDatabaseTriggersAndIndicesAndDropFirst & ABCDBContextPerformSQLResultDone();
    BOOL v21 = ABCDBContextPerformSQLResultDone();
    int v22 = v20 & v21 & ABCDBContextPerformSQLResultDone();
    int v23 = v22 & ABCDBContextPerformSQLResultDone();
    if (a3 == 6)
    {
      BOOL v24 = ABCDBContextPerformSQLResultDone();
      int v25 = v24 & ABCDBContextPerformSQLResultDone();
      v23 &= v25 & ABCDBContextPerformSQLResultDone();
    }
    BOOL v26 = ABCDBContextPerformSQLResultDone();
    int v27 = v26 & _dropTable(a2, @"ABPerson_old");
    int v28 = v27 & _dropTable(a2, @"ABGroup_old");
    int v29 = v28 & _dropTable(a2, @"ABPersonChanges_old");
    int v30 = v23 & _dropTable(a2, @"ABGroupChanges_old");
    int LimitedAccessTable = v30 & v29 & _dropTable(a2, @"ABMultiValue_old");
    if (a3 == 6) {
      LimitedAccessTable &= _dropTable(a2, @"ABStore_old");
    }
    goto LABEL_22;
  }
  if (a3 == 14)
  {
    CFAllocatorRef v57 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v58 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT count() FROM ABStore WHERE Type != %i and Type != %i and Type != %i and Type != %i and Type != %i;",
            0,
            1209,
            16778425,
            1210,
            16778427);
    CPSqliteConnectionStatementForSQL();
    CFRelease(v58);
    LODWORD(v58) = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
    if (v58) {
      goto LABEL_65;
    }
    uint64_t v102 = 1;
    CFStringRef v59 = CFStringCreateWithFormat(v57, 0, @"SELECT count() FROM ABPerson WHERE Kind > %i;");
    CPSqliteConnectionStatementForSQL();
    CFRelease(v59);
    LODWORD(v59) = CPSqliteStatementIntegerResult();
    uint64_t v60 = CPSqliteStatementReset();
    if (v59) {
      goto LABEL_65;
    }
    uint64_t v61 = _migrateStoreAndAccountTables(v60, a2, 14);
    if (!v61 || !_migrateGroupTables(v61, a2)) {
      goto LABEL_65;
    }
    int v31 = _recreatePersonTables(a2, 14);
LABEL_21:
    int LimitedAccessTable = v31;
    goto LABEL_22;
  }
  int LimitedAccessTable = _migrateStoreAndAccountTables(a1, a2, a3);
  BOOL v62 = ABDiagnosticsEnabled();
  if (v62)
  {
    float v63 = ABLogStringForBool(LimitedAccessTable);
    _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1087, 0, @"success=%@", v64, v65, v66, (uint64_t)v63);
  }
  if (LimitedAccessTable)
  {
    int LimitedAccessTable = _migrateGroupTables(v62, a2);
    if (ABDiagnosticsEnabled())
    {
      int v67 = ABLogStringForBool(LimitedAccessTable);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1091, 0, @"success=%@", v68, v69, v70, (uint64_t)v67);
      if ((LimitedAccessTable & 1) == 0)
      {
LABEL_65:
        int LimitedAccessTable = 0;
        goto LABEL_129;
      }
    }
    else if (!LimitedAccessTable)
    {
      goto LABEL_129;
    }
    int LimitedAccessTable = _recreatePersonTables(a2, a3);
    if (ABDiagnosticsEnabled())
    {
      CFStringRef v85 = ABLogStringForBool(LimitedAccessTable);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1096, 0, @"success=%@", v86, v87, v88, (uint64_t)v85);
    }
LABEL_22:
    if (a3 <= 60 && LimitedAccessTable)
    {
      int v32 = _renameTable(a2, @"ABMultiValue", @"ABMultiValue_old");
      int MultiValueTables = ABCDBContextCreateMultiValueTables();
      int MultiValueTriggersAndIndicesAndDropFirst = 0;
      if (v32 && MultiValueTables) {
        int MultiValueTriggersAndIndicesAndDropFirst = ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(a2, 1);
      }
      BOOL v35 = ABCDBContextPerformSQLResultDone();
      BOOL v36 = _dropTable(a2, @"ABMultiValue_old");
      int LimitedAccessTable = 0;
      if (!MultiValueTriggersAndIndicesAndDropFirst || !v35 || !v36) {
        goto LABEL_129;
      }
    }
    else if (!LimitedAccessTable)
    {
      goto LABEL_129;
    }
    if (ABDiagnosticsEnabled())
    {
      int v37 = ABLogStringForBool(1);
      _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1113, 0, @"success=%@", v38, v39, v40, (uint64_t)v37);
    }
    BOOL v41 = _dropTable(a2, @"ABStoreChanges");
    int LimitedAccessTable = v41;
    if (a3 <= 32 && v41) {
      int LimitedAccessTable = ABCDBContextPerformSQLResultDone();
    }
    if (a3 <= 47 && LimitedAccessTable)
    {
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
      uint64_t v102 = 4;
      CFStringRef v43 = CFStringCreateWithFormat(0, 0, @"SELECT ROWID, ExternalIdentifier from ABStore where Type = %d OR Type = %d");
      uint64_t v44 = CPSqliteConnectionStatementForSQL();
      CFRelease(v43);
      if (v44)
      {
        int v45 = CPSqliteStatementSendResults();
        int LimitedAccessTable = v45 == 101;
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
        if (CFArrayGetCount(Mutable))
        {
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, @"(");
          if (CFArrayGetCount(Mutable) >= 2)
          {
            CFIndex v47 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v47);
              CFStringAppendFormat(MutableCopy, 0, @"%ld, ", ValueAtIndex);
              ++v47;
            }
            while (CFArrayGetCount(Mutable) - 1 > v47);
          }
          CFIndex Count = CFArrayGetCount(Mutable);
          v50 = CFArrayGetValueAtIndex(Mutable, Count - 1);
          CFStringAppendFormat(MutableCopy, 0, @"%ld"), v50);
          CFStringRef v51 = CFStringCreateWithFormat(0, 0, @"SELECT ROWID, ExternalIdentifier from ABPerson where StoreID in %@", MutableCopy);
          CPSqliteConnectionStatementForSQL();
          CFRelease(v51);
          int v52 = CPSqliteStatementSendResults();
          CPSqliteStatementReset();
          CPSqliteDatabaseReleaseSqliteStatement();
          uint64_t v102 = (uint64_t)MutableCopy;
          CFStringRef v53 = CFStringCreateWithFormat(0, 0, @"SELECT ROWID, ExternalIdentifier from ABGroup where StoreID in %@");
          CPSqliteConnectionStatementForSQL();
          CFRelease(v53);
          int v54 = CPSqliteStatementSendResults();
          int LimitedAccessTable = v52 == 101 && v54 == 101 && v45 == 101;
          CPSqliteStatementReset();
          CPSqliteDatabaseReleaseSqliteStatement();
          CFRelease(MutableCopy);
        }
      }
      else
      {
        int LimitedAccessTable = 1;
      }
      CFRelease(Mutable);
    }
    if (a3 <= 51 && LimitedAccessTable)
    {
      if (CPSqliteConnectionStatementForSQL()
        && (int v71 = CPSqliteStatementIntegerResult(), CPSqliteStatementReset(), v71))
      {
        BOOL v72 = ABCDBContextPerformSQLResultDone();
        int v73 = v72 & ABCDBContextPerformSQLResultDone();
        BOOL v74 = ABCDBContextPerformSQLResultDone();
        int LimitedAccessTable = v73 & v74 & ABCDBContextPerformSQLResultDone();
        if (CPSqliteConnectionStatementForSQL())
        {
          int v75 = CPSqliteStatementIntegerResult();
          CPSqliteStatementReset();
          if (!v75) {
            LimitedAccessTable &= ABCDBContextPerformSQLResultDone();
          }
        }
        uint64_t v76 = CPSqliteConnectionStatementForSQL();
        CFRelease(@"INSERT INTO ABStore (ROWID, Type, Enabled , StoreInternalIdentifier) VALUES('0', '0', '0', 'local');");
        if (v76)
        {
          if (CPSqliteStatementPerform() != 101) {
            int LimitedAccessTable = 0;
          }
          CPSqliteStatementReset();
        }
      }
      else
      {
        int LimitedAccessTable = 1;
      }
    }
    if (a3 < 63 && LimitedAccessTable) {
      int LimitedAccessTable = _dropTable(a2, @"ABRecent");
    }
    if (a3 <= 63 && LimitedAccessTable)
    {
      ABChangeHistoryCreateTables(a2, 0);
      BOOL v77 = _dropTable(a2, @"ABPersonMultiValueDeletes");
      int LimitedAccessTable = v77 & ABCDBContextCreateMultiValueTables();
    }
    else
    {
      char v78 = LimitedAccessTable ^ 1;
      if (a3 > 78) {
        char v78 = 1;
      }
      if ((v78 & 1) == 0) {
        int LimitedAccessTable = ABChangeHistoryMigrateAddingSaveTimestamp();
      }
    }
    if (a3 <= 67 && LimitedAccessTable) {
      int LimitedAccessTable = +[ABFacebookMigrator removeFacebookSensitiveInformation:a2];
    }
    if (a3 <= 69 && LimitedAccessTable)
    {
      uint64_t v79 = CPSqliteConnectionStatementForSQL();
      if (v79 && (uint64_t v80 = v79, (v81 = *(sqlite3_stmt **)(v79 + 8)) != 0))
      {
        sqlite3_bind_blob(v81, 1, @"Hiragana-Katakana", 8, 0);
        sqlite3_bind_blob(*(sqlite3_stmt **)(v80 + 8), 2, @"Hiragana-Katakana", 8, 0);
        sqlite3_bind_blob(*(sqlite3_stmt **)(v80 + 8), 3, @"Hiragana-Katakana", 8, 0);
        sqlite3_bind_blob(*(sqlite3_stmt **)(v80 + 8), 4, @"Hiragana-Katakana", 8, 0);
        int LimitedAccessTable = CPSqliteStatementPerform() == 101;
        CPSqliteStatementReset();
      }
      else
      {
        int LimitedAccessTable = 0;
      }
      *a4 |= 4u;
    }
    if (a3 <= 77 && LimitedAccessTable) {
      int LimitedAccessTable = +[ABDowntimeWhitelistMigrator moveDowntimeWhitelistFromUnknownProperties:a2];
    }
    if (a3 <= 83 && LimitedAccessTable) {
      int LimitedAccessTable = ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(a2, 0);
    }
    if (a3 <= 95 && LimitedAccessTable)
    {
      int LimitedAccessTable = _createLimitedAccessTable();
LABEL_123:
      if (a3 < 101 && LimitedAccessTable)
      {
        BOOL v96 = ABCDBContextPerformSQLResultDone();
        int LimitedAccessTable = v96 & ABCDBContextPerformSQLResultDone();
      }
      if (a3 <= 101 && LimitedAccessTable)
      {
        int LimitedAccessTable = 1;
        CPSqliteConnectionSetIntegerForProperty();
      }
      goto LABEL_129;
    }
    char v82 = LimitedAccessTable ^ 1;
    if (a3 > 97) {
      char v82 = 1;
    }
    if (v82) {
      goto LABEL_123;
    }
    if (CPSqliteConnectionStatementForSQL())
    {
      int v83 = CPSqliteStatementIntegerResult();
      CPSqliteStatementReset();
      if (v83 >= 1)
      {
        if (_renameTable(a2, @"LimitedAccess", @"LimitedAccess_old"))
        {
          int v84 = 1;
          goto LABEL_121;
        }
        ABDiagnosticsEnabled();
        _ABLog2(3, (uint64_t)"_Bool _migrateLimitedAccessTable(CPSqliteConnection *)", 943, 0, @"Failed to migrate LimitedAccess table", v89, v90, v91, v102);
      }
    }
    int v84 = 0;
LABEL_121:
    BOOL v92 = ABCDBContextPerformSQLResultDone();
    int v93 = v92 & ABCDBContextPerformSQLResultDone();
    BOOL v94 = _dropTable(a2, @"LimitedAccess");
    int LimitedAccessTable = v93 & v94 & _createLimitedAccessTable();
    if (v84)
    {
      BOOL v95 = ABCDBContextPerformSQLResultDone();
      LimitedAccessTable &= v95 & _dropTable(a2, @"LimitedAccess_old");
    }
    goto LABEL_123;
  }
LABEL_129:
  *a4 = ((a3 - 25) < 4) | (2 * ((a3 - 22) < 0xA)) | (8 * ((a3 - 57) < 0xF)) | *a4 & 0xF4;
  if (ABDiagnosticsEnabled())
  {
    CFDataRef v97 = ABLogStringForBool(LimitedAccessTable);
    _ABLog2(7, (uint64_t)"CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)", 1180, 0, @"success=%@", v98, v99, v100, (uint64_t)v97);
  }
  return LimitedAccessTable ^ 1u;
}

uint64_t _recreatePersonTables(uint64_t a1, int a2)
{
  int v4 = _renameTable(a1, @"ABPerson", @"ABPerson_old");
  int v5 = v4 & _renameTable(a1, @"ABPersonChanges", @"ABPersonChanges_old");
  unsigned int v6 = a2 - 22;
  if (a2 >= 22) {
    v5 &= _renameTable(a1, @"ABPersonLink", @"ABPersonLink_old");
  }
  unsigned int v7 = a2 - 11;
  if ((a2 - 11) > 0x18)
  {
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v5 & _renameTable(a1, @"ABPersonSearchKey", @"ABPersonSearchKey_old") & 1) == 0)
  {
LABEL_5:
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 441, 0, @"Failed to rename tables before recreate!", v8, v9, v10, v56);
    return 0;
  }
  int PersonTables = _createPersonTables();
  int SectionListTablesAndDropTablesWithTriggers = PersonTables & ABCDBContextCreateABPersonTriggersAndIndicesAndDropFirst(a1, 1);
  if (ABDiagnosticsEnabled())
  {
    int v14 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
    _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 448, 0, @"result=%@", v15, v16, v17, (uint64_t)v14);
  }
  char v18 = SectionListTablesAndDropTablesWithTriggers ^ 1;
  if (a2 != 44) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    BOOL v69 = ABCDBContextPerformSQLResultDone();
    BOOL v68 = ABCDBContextPerformSQLResultDone();
    BOOL v67 = ABCDBContextPerformSQLResultDone();
    BOOL v66 = ABCDBContextPerformSQLResultDone();
    BOOL v65 = ABCDBContextPerformSQLResultDone();
    BOOL v64 = ABCDBContextPerformSQLResultDone();
    BOOL v63 = ABCDBContextPerformSQLResultDone();
    BOOL v62 = ABCDBContextPerformSQLResultDone();
    BOOL v61 = ABCDBContextPerformSQLResultDone();
    BOOL v60 = ABCDBContextPerformSQLResultDone();
    BOOL v59 = ABCDBContextPerformSQLResultDone();
    BOOL v58 = ABCDBContextPerformSQLResultDone();
    BOOL v57 = ABCDBContextPerformSQLResultDone();
    BOOL v19 = ABCDBContextPerformSQLResultDone();
    BOOL v20 = ABCDBContextPerformSQLResultDone();
    BOOL v21 = ABCDBContextPerformSQLResultDone();
    BOOL v22 = ABCDBContextPerformSQLResultDone();
    BOOL v23 = ABCDBContextPerformSQLResultDone();
    BOOL v24 = ABCDBContextPerformSQLResultDone();
    BOOL v25 = ABCDBContextPerformSQLResultDone();
    BOOL v26 = ABCDBContextPerformSQLResultDone();
    int SectionListTablesAndDropTablesWithTriggers = 0;
    if (!v69) {
      goto LABEL_54;
    }
    if (!v68) {
      goto LABEL_54;
    }
    if (!v67) {
      goto LABEL_54;
    }
    if (!v66) {
      goto LABEL_54;
    }
    if (!v65) {
      goto LABEL_54;
    }
    if (!v64) {
      goto LABEL_54;
    }
    if (!v63) {
      goto LABEL_54;
    }
    if (!v62) {
      goto LABEL_54;
    }
    if (!v61) {
      goto LABEL_54;
    }
    if (!v60) {
      goto LABEL_54;
    }
    if (!v59) {
      goto LABEL_54;
    }
    if (!v58) {
      goto LABEL_54;
    }
    if (!v57) {
      goto LABEL_54;
    }
    if (!v19) {
      goto LABEL_54;
    }
    if (!v20) {
      goto LABEL_54;
    }
    if (!v21) {
      goto LABEL_54;
    }
    if (!v22) {
      goto LABEL_54;
    }
    if (!v23) {
      goto LABEL_54;
    }
    if (!v24) {
      goto LABEL_54;
    }
    if (!v25) {
      goto LABEL_54;
    }
    unsigned int v6 = a2 - 22;
    unsigned int v7 = a2 - 11;
    if (!v26) {
      goto LABEL_54;
    }
    goto LABEL_35;
  }
  if (SectionListTablesAndDropTablesWithTriggers)
  {
LABEL_35:
    int SectionListTablesAndDropTablesWithTriggers = ABCDBContextCreateSectionListTablesAndDropTablesWithTriggers(a1, 1);
    if (ABDiagnosticsEnabled())
    {
      int v27 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
      _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 455, 0, @"result=%@", v28, v29, v30, (uint64_t)v27);
    }
    if (!SectionListTablesAndDropTablesWithTriggers) {
      goto LABEL_54;
    }
    int SectionListTablesAndDropTablesWithTriggers = ABCDBContextCreateSectionListTriggersAndIndicesAndDropFirst(a1, 1);
    if (ABDiagnosticsEnabled())
    {
      int v31 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
      _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 458, 0, @"result=%@", v32, v33, v34, (uint64_t)v31);
    }
    if (SectionListTablesAndDropTablesWithTriggers) {
      int SectionListTablesAndDropTablesWithTriggers = a2 <= 56 && v6 >= 4 && a2 < 26 || ABCDBContextPerformSQLResultDone();
    }
    if (ABDiagnosticsEnabled())
    {
      BOOL v35 = ABLogStringForBool(SectionListTablesAndDropTablesWithTriggers);
      _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 479, 0, @"result=%@", v36, v37, v38, (uint64_t)v35);
    }
    if (!SectionListTablesAndDropTablesWithTriggers) {
      goto LABEL_54;
    }
    if (a2 >= 88 || a2 >= 50) {
      goto LABEL_52;
    }
    if (a2 > 22)
    {
      BOOL v54 = ABCDBContextPerformSQLResultDone();
      int SectionListTablesAndDropTablesWithTriggers = v54 & ABCDBContextPerformSQLResultDone();
      if (v7 > 0x18) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    if (a2 <= 10)
    {
LABEL_52:
      int SectionListTablesAndDropTablesWithTriggers = ABCDBContextPerformSQLResultDone();
    }
    else
    {
      BOOL v55 = ABCDBContextPerformSQLResultDone();
      int SectionListTablesAndDropTablesWithTriggers = v55 & ABCDBContextPerformSQLResultDone();
    }
LABEL_53:
    SectionListTablesAndDropTablesWithTriggers &= ABCDBContextPerformSQLResultDone();
  }
LABEL_54:
  int v39 = SectionListTablesAndDropTablesWithTriggers & ABCDBContextCreateSearchTablesAndDropFirst(a1, 0);
  BOOL v40 = _dropTable(a1, @"ABPerson_old");
  int v41 = v40 & _dropTable(a1, @"ABPersonChanges_old");
  BOOL v42 = _dropTable(a1, @"ABPersonLink_old");
  int v43 = v41 & v42 & _dropTable(a1, @"ABPersonSearchKey_old");
  int v44 = v43 & _dropTable(a1, @"ABPersonBasicChanges");
  if ((v44 & 1) == 0)
  {
    ABDiagnosticsEnabled();
    int v45 = ABLogStringForBool(0);
    _ABLog2(3, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 587, 0, @"_recreatePersonTables dropTablesResult=%@", v46, v47, v48, (uint64_t)v45);
  }
  uint64_t v11 = v39 & v44;
  if (ABDiagnosticsEnabled())
  {
    uint64_t v49 = ABLogStringForBool(v11);
    _ABLog2(7, (uint64_t)"_Bool _recreatePersonTables(CPSqliteConnection *, int)", 592, 0, @"_recreatePersonTables result=%@", v50, v51, v52, (uint64_t)v49);
  }
  return v11;
}

uint64_t _createABDatabaseTables(uint64_t a1, int a2, int a3, int a4)
{
  BOOL ABCSourceTables = ABCDBContextCreateABCSourceTables(a1, a3);
  int v8 = ABCSourceTables & _createPersonTables();
  BOOL v9 = ABCDBContextPerformSQLResultDone();
  int v10 = v9 & ABCDBContextPerformSQLResultDone();
  int v11 = ABCDBContextPerformSQLResultDone() & v8 & v10;
  if (a4) {
    LOBYTE(v1_ABCPostDatabaseChangedNotification(0, 1) = v11 & _createLimitedAccessTable();
  }
  if (a1)
  {
    if (ABCDBContextPerformSQLResultDone())
    {
      if (ABCDBContextCreateMultiValueTables())
      {
        if (ABCDBContextCreateSectionListTablesAndDropTablesWithTriggers(a1, a2 != -1))
        {
          if (ABCDBContextCreateSearchTablesAndDropFirst(a1, a2 != -1))
          {
            ABChangeHistoryCreateTables(a1, a2 != -1);
            if (v11) {
              return 1;
            }
          }
        }
      }
    }
    int v13 = (FILE *)*MEMORY[0x1E4F143C8];
    int v14 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  }
  else
  {
    int v13 = (FILE *)*MEMORY[0x1E4F143C8];
    int v14 = "no connection";
  }
  fprintf(v13, "error initializing AB database (_createABDatabaseTables): %s\n", v14);
  return 0;
}

uint64_t _createABDatabaseTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  if (a1
    && ABCDBContextCreateABPersonTriggersAndIndicesAndDropFirst(a1, a2)
    && ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(a1, a2)
    && ABCDBContextCreateSectionListTriggersAndIndicesAndDropFirst(a1, a2))
  {
    return 1;
  }
  int v5 = (FILE *)*MEMORY[0x1E4F143C8];
  unsigned int v6 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  fprintf(v5, "error initializing AB database (_createABDatabaseTriggersAndIndicesAndDropFirst): %s\n", v6);
  return 0;
}

uint64_t ABCDBContextCreateMultiValueTables()
{
  BOOL v0 = ABCDBContextPerformSQLResultDone();
  int v1 = v0 & ABCDBContextPerformSQLResultDone();
  BOOL v2 = ABCDBContextPerformSQLResultDone();
  int v3 = v1 & v2 & ABCDBContextPerformSQLResultDone();
  BOOL v4 = ABCDBContextPerformSQLResultDone();
  uint64_t v5 = v3 & v4 & ABCDBContextPerformSQLResultDone();
  if ((v5 & 1) == 0) {
    fwrite("***ABCDBContextCreateMultiValueTables failed\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  return v5;
}

uint64_t ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v2 = ABCDBContextPerformSQLResultDone();
    int v3 = v2 & ABCDBContextPerformSQLResultDone();
    BOOL v4 = ABCDBContextPerformSQLResultDone();
    int v5 = v3 & v4 & ABCDBContextPerformSQLResultDone();
    int v6 = v5 & ABCDBContextPerformSQLResultDone();
  }
  else
  {
    int v6 = 1;
  }
  int v7 = v6 & ABCDBContextPerformSQLResultDone();
  BOOL v8 = ABCDBContextPerformSQLResultDone();
  int v9 = v7 & v8 & ABCDBContextPerformSQLResultDone();
  BOOL v10 = ABCDBContextPerformSQLResultDone();
  int v11 = v10 & ABCDBContextPerformSQLResultDone();
  int v12 = v9 & v11 & ABCDBContextPerformSQLResultDone();
  BOOL v13 = ABCDBContextPerformSQLResultDone();
  uint64_t v14 = v12 & v13 & ABCDBContextPerformSQLResultDone();
  if ((v14 & 1) == 0) {
    fwrite("***ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst failed\n", 0x45uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  return v14;
}

uint64_t _createLimitedAccessTable()
{
  BOOL v0 = ABCDBContextPerformSQLResultDone();
  int v1 = v0 & ABCDBContextPerformSQLResultDone();
  BOOL v2 = ABCDBContextPerformSQLResultDone();
  int v3 = v1 & v2 & ABCDBContextPerformSQLResultDone();
  return v3 & ABCDBContextPerformSQLResultDone();
}

uint64_t _addLimitedAccessDeletionTriggers(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v2 = ABCDBContextPerformSQLResultDone();
    int v3 = v2 & ABCDBContextPerformSQLResultDone();
  }
  else
  {
    int v3 = 1;
  }
  int v4 = v3 & ABCDBContextPerformSQLResultDone();
  return v4 & ABCDBContextPerformSQLResultDone();
}

void _configureABDatabase(uint64_t a1, uint64_t a2)
{
  if (_createABDatabaseTables(a2, -1, 1, 1)) {
    _createABDatabaseTriggersAndIndicesAndDropFirst(a2, 0);
  }
  ABCDBContextUpdateSortDataVersionsWithConnection();
}

uint64_t _databaseCorrupted(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  ABDiagnosticsEnabled();
  _ABLog2(3, (uint64_t)"_Bool _databaseCorrupted(CPSqliteDatabase *)", 292, 0, @"database may be corrupted [%p]", v2, v3, v4, a1);
  ppDb = 0;
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5 && (int v6 = *(sqlite3 **)(v5 + 8)) != 0)
    {
      int v7 = 0;
      ppDb = *(sqlite3 **)(v5 + 8);
    }
    else
    {
      if (!*(void *)a1) {
        return 0;
      }
      CFIndex MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(*(CFStringRef *)a1);
      int v9 = (char *)malloc_type_calloc(MaximumSizeOfFileSystemRepresentation + 1, 1uLL, 0x100004077774924uLL);
      CFStringGetFileSystemRepresentation(*(CFStringRef *)a1, v9, MaximumSizeOfFileSystemRepresentation);
      sqlite3_open_v2(v9, &ppDb, 1, 0);
      free(v9);
      int v6 = ppDb;
      if (!ppDb) {
        return 0;
      }
      int v7 = 1;
    }
    int v31 = 0;
    sqlite3_file_control(v6, 0, 7, &v31);
    if (v31)
    {
      int v10 = v31[6];
      memset(buffer, 0, 512);
      pid_t v11 = getpid();
      if (proc_pidfdinfo(v11, v10, 2, buffer, 1200) == 1200)
      {
        ABDiagnosticsEnabled();
        uint64_t v15 = "new";
        if (v7) {
          uint64_t v15 = "current";
        }
        _ABLog2(3, (uint64_t)"void _logDatabaseHeader(CPSqliteDatabase *)", 275, 0, @"Corrupt database %s connection fd %d is opened to %s", v12, v13, v14, (uint64_t)v15);
      }
      uint64_t v27 = 0;
      uint64_t v28 = &v27;
      uint64_t v29 = 0x2020000000;
      CFMutableDataRef Mutable = 0;
      CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
      CFDataSetLength((CFMutableDataRef)v28[3], 0x2000);
      uint64_t v16 = v31;
      uint64_t v17 = *(void (**)(_DWORD *, UInt8 *, CFIndex, void))(*(void *)v31 + 16);
      MutableBytePtr = CFDataGetMutableBytePtr((CFMutableDataRef)v28[3]);
      CFIndex Length = CFDataGetLength((CFDataRef)v28[3]);
      v17(v16, MutableBytePtr, Length, 0);
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"void _logDatabaseHeader(CPSqliteDatabase *)", 282, 0, @"Corrupt database header:", v20, v21, v22, v25);
      uint64_t v23 = v28[3];
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = ___logDatabaseHeader_block_invoke;
      v26[3] = &unk_1E59886B0;
      v26[4] = &v27;
      ABLogAppendDataToLogFile(3, v23, v26);
      _Block_object_dispose(&v27, 8);
    }
    if (v7) {
      sqlite3_close(ppDb);
    }
  }
  return 0;
}

void sub_19DCFCE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _databaseDeleted_0(uint64_t *a1, int a2)
{
  ABDiagnosticsEnabled();
  _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 298, 0, @"database was deleted (%@) with reason %d", v4, v5, v6, *a1);
  if (!ABCImageStoreCreateWithAddressBookPath((CFStringRef)*a1)) {
    goto LABEL_6;
  }
  CPRecordStoreGetDatabase();
  int v7 = MEMORY[0x19F3B3ED0]();
  ABDiagnosticsEnabled();
  pid_t v11 = @"not deleted";
  if (v7) {
    pid_t v11 = @"deleted";
  }
  _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 307, 0, @"image database was %@ (%@) ", v8, v9, v10, (uint64_t)v11);
  if (v7) {
    uint64_t v12 = 2;
  }
  else {
LABEL_6:
  }
    uint64_t v12 = 0;
  uint64_t result = ABDatabaseIntegrityResolutionRecorder(v12);
  if (!a2)
  {
    ABAddressBookRef v14 = ABAddressBookCreateWithOptions(0, 0);
    CFStringRef v15 = ABCImageStoreCreateWithAddressBook((uint64_t)v14);
    if ((int)ABCImageStoreGetCountOfImagesWithFormat((uint64_t)v15, 0xFFFFFFFFLL) >= 1)
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)", 321, 0, @"image database still has orphans", v16, v17, v18, v19);
    }
    return ABLogDisplayInternalAlert(@"The main database was corrupt. Please attach sysdiagnose, AB logs and /tmp/AddressBook*");
  }
  return result;
}

uint64_t ABCDBContextDestroy()
{
  CPRecordStoreGetDatabase();
  uint64_t v0 = CPSqliteDatabaseConnectionForReading();
  if (v0) {
    int v1 = *(const void **)(v0 + 8);
  }
  else {
    int v1 = 0;
  }
  uint64_t Context = CPRecordStoreGetContext();
  if (Context)
  {
    uint64_t v3 = (void *)Context;
    uint64_t v4 = *(const void **)(Context + 8);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = (const void *)v3[2];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)v3[3];
    if (v6) {
      CFRelease(v6);
    }
    int v7 = (const void *)v3[4];
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = (const void *)v3[5];
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = (const void *)v3[6];
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = (const void *)v3[7];
    if (v10) {
      CFRelease(v10);
    }
    pid_t v11 = (const void *)v3[8];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = (const void *)v3[9];
    if (v12) {
      CFRelease(v12);
    }
    uint64_t v13 = (const void *)v3[10];
    if (v13) {
      CFRelease(v13);
    }
    ABAddressBookRef v14 = (const void *)v3[11];
    if (v14) {
      CFRelease(v14);
    }
    CFStringRef v15 = (const void *)v3[12];
    if (v15) {
      CFRelease(v15);
    }
    free(v3);
  }
  CPRecordStoreDestroy();
  return ABCFTSCollationContextFreeContextForDatabaseHandle(v1);
}

uint64_t ABCDBContextSaveMultiValue(uint64_t a1, const void *a2, int a3, const __CFArray *a4, int a5)
{
  int ID = CPRecordGetID();
  uint64_t v11 = CPSqliteConnectionStatementForSQL();
  if (v11)
  {
    uint64_t v12 = *(sqlite3_stmt **)(v11 + 8);
    sqlite3_bind_int(v12, 1, ID);
    sqlite3_bind_int(v12, 2, a3);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    CPSqliteDatabaseReleaseSqliteStatement();
    uint64_t v13 = CPSqliteConnectionStatementForSQL();
    if (v13)
    {
      ABAddressBookRef v14 = *(sqlite3_stmt **)(v13 + 8);
      sqlite3_bind_int(v14, 1, ID);
      sqlite3_bind_int(v14, 2, a3);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      CPSqliteDatabaseReleaseSqliteStatement();
    }
  }
  if (a4)
  {
    CFArrayRef v15 = (const __CFArray *)*((void *)a4 + 5);
    if (v15)
    {
      CFArrayRef v78 = (const __CFArray *)*((void *)a4 + 6);
      CFArrayRef theArray = (const __CFArray *)*((void *)a4 + 3);
      CFIndex Count = CFArrayGetCount(v15);
      if (Count >= 1)
      {
        CFArrayRef v76 = v15;
        char v82 = a2;
        int v80 = a3;
        CFIndex v16 = 0;
        unsigned int v17 = a5 & 0xFFFFFEFF;
        int v18 = 2 * (v17 != 2);
        if (v17 == 7) {
          int v18 = 4;
        }
        unsigned int v71 = kABSourceMeIdentifierProperty;
        int v72 = v18;
        CFArrayRef v75 = a4;
        int v81 = v17;
        while (1)
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
          CFStringRef LabelAtIndex = (const __CFString *)ABCMultiValueGetLabelAtIndex(a4, v16);
          CFDictionaryRef v21 = (const __CFDictionary *)CFArrayGetValueAtIndex(v76, v16);
          CFArrayGetValueAtIndex(v78, v16);
          char v84 = 0;
          if (LabelAtIndex)
          {
            uint64_t v22 = v82;
            uint64_t Store = CPRecordGetStore();
            uint64_t v24 = recordStoreContext(Store);
            if (v24) {
              uint64_t v25 = (const __CFDictionary **)(v24 + 8);
            }
            else {
              uint64_t v25 = 0;
            }
            int v26 = rowidForStringInTable(LabelAtIndex, a1, @"SELECT ROWID FROM ABMultiValueLabel WHERE value = ?;",
                                  @"INSERT INTO ABMultiValueLabel VALUES (?);",
                                  v25,
                                  &v84);
            int v27 = v80;
          }
          else
          {
            int v26 = -1;
            int v27 = v80;
            uint64_t v22 = v82;
          }
          AddressBooCFIndex k = ABRecordGetAddressBook();
          ABRecordID RecordID = ABRecordGetRecordID(v22);
          if (!AddressBook) {
            goto LABEL_29;
          }
          if (v84) {
            *(_DWORD *)(AddressBook + 376) |= 0x4000u;
          }
          if (kABCPhoneProperty == v27)
          {
            int v30 = 0x8000;
          }
          else
          {
            if (kABCEmailProperty != v27) {
              goto LABEL_24;
            }
            int v30 = 0x10000;
          }
          *(_DWORD *)(AddressBook + 376) |= v30;
LABEL_24:
          ABRecordRef v31 = ABPersonCopySource(v22);
          if (v31)
          {
            uint64_t v32 = v31;
            if (RecordID != -1 && ABRecordGetIntValue((uint64_t)v31, v71) == RecordID) {
              *(_DWORD *)(AddressBook + 376) |= 0x40000u;
            }
            CFRelease(v32);
          }
LABEL_29:
          if (!a1) {
            return 0;
          }
          uint64_t v33 = CPSqliteConnectionStatementForSQL();
          if (!v33) {
            return 0;
          }
          uint64_t v34 = *(sqlite3_stmt **)(v33 + 8);
          sqlite3_bind_int(v34, 1, RecordID);
          sqlite3_bind_int(v34, 2, v27);
          if (v26 < 0) {
            sqlite3_bind_null(v34, 3);
          }
          else {
            sqlite3_bind_int(v34, 3, v26);
          }
          sqlite3_bind_int(v34, 4, ValueAtIndex);
          CFDictionaryRef theDict = v21;
          if (v81 == 5)
          {
            sqlite3_bind_null(v34, 5);
            LODWORD(v36) = 0;
            LODWORD(v37) = 0;
            goto LABEL_40;
          }
          CFDataRef v35 = (const __CFData *)ABCCopySQLiteStringValueForValueOfType((uint64_t)v21, v81);
          CFDataRef v36 = v35;
          unint64_t v37 = (unint64_t)v35 >> 32;
          switch(v72)
          {
            case 4:
              if (v35)
              {
                BytePtr = CFDataGetBytePtr(v35);
                int Length = CFDataGetLength(v36);
                sqlite3_bind_blob(v34, 5, BytePtr, Length, 0);
                break;
              }
LABEL_99:
              sqlite3_bind_null(v34, 5);
              break;
            case 2:
              if (v35)
              {
                BOOL v69 = (const char *)_CPCreateUTF8StringFromCFString();
                sqlite3_bind_text(v34, 5, v69, -1, MEMORY[0x1E4F14838]);
                break;
              }
              goto LABEL_99;
            case 0:
              sqlite3_bind_int(v34, 5, (int)v35);
              break;
          }
LABEL_40:
          uint64_t v38 = (const char *)_CPCreateUTF8StringFromCFString();
          sqlite3_bind_text(v34, 6, v38, -1, MEMORY[0x1E4F14838]);
          int v39 = CPSqliteStatementPerform();
          CPSqliteStatementReset();
          BOOL v40 = v39 == 101;
          if (v39 == 101) {
            int Insert = CPSqliteConnectionRowidOfLastInsert();
          }
          else {
            int Insert = 0;
          }
          if (v81 != 5)
          {
            unint64_t v42 = v36 | ((unint64_t)v37 << 32);
            if (v42)
            {
              int v43 = ABCCallBacksForType(v81);
              if (v43)
              {
                int v44 = v43[1];
                if (v44) {
                  ((void (*)(unint64_t))v44)(v42);
                }
              }
            }
          }
          int v45 = 0;
          if (v39 != 101)
          {
            CFStringRef v46 = 0;
            goto LABEL_58;
          }
          CFStringRef v46 = 0;
          if (kABCPhoneProperty != v80) {
            goto LABEL_58;
          }
          int v45 = (const void *)CPPhoneNumberCopyHomeCountryCode();
          if (!v45)
          {
            CFStringRef v46 = 0;
LABEL_57:
            BOOL v40 = 1;
LABEL_58:
            CPSqliteDatabaseReleaseSqliteConnection();
            if (v81 == 5 && v40)
            {
              CFStringRef v73 = v46;
              BOOL v74 = v45;
              CFIndex v51 = CFDictionaryGetCount(theDict);
              uint64_t v52 = (const void **)malloc_type_malloc(8 * v51, 0x6004044C4A2DFuLL);
              if (v52)
              {
                CFStringRef v53 = v52;
                CFDictionaryGetKeysAndValues(theDict, v52, 0);
                if (v51 < 1)
                {
                  BOOL v40 = 1;
                }
                else
                {
                  uint64_t v54 = 0;
                  while (1)
                  {
                    CFStringRef v55 = (const __CFString *)v53[v54];
                    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, v55);
                    if (v55)
                    {
                      uint64_t v57 = CPRecordGetStore();
                      uint64_t v58 = recordStoreContext(v57);
                      BOOL v59 = v58 ? (const __CFDictionary **)(v58 + 16) : 0;
                      int v60 = rowidForStringInTable(v55, a1, @"SELECT ROWID FROM ABMultiValueEntryKey WHERE value = ?;",
                                            @"INSERT INTO ABMultiValueEntryKey VALUES(?);",
                                            v59,
                                            0);
                    }
                    else
                    {
                      int v60 = -1;
                    }
                    uint64_t v61 = CPSqliteConnectionStatementForSQL();
                    if (!v61) {
                      break;
                    }
                    BOOL v62 = *(sqlite3_stmt **)(v61 + 8);
                    sqlite3_bind_int(v62, 1, Insert);
                    if (v60 < 0) {
                      sqlite3_bind_null(v62, 2);
                    }
                    else {
                      sqlite3_bind_int(v62, 2, v60);
                    }
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      CFStringRef v63 = CFStringCreateByCombiningStrings(0, Value, @",");
                    }
                    else
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0) {
                        ABCDBContextSaveMultiValue_cold_1();
                      }
                      CFStringRef v63 = 0;
                    }
                    BOOL v64 = (const char *)_CPCreateUTF8StringFromCFString();
                    sqlite3_bind_text(v62, 3, v64, -1, MEMORY[0x1E4F14838]);
                    int v65 = CPSqliteStatementPerform();
                    CPSqliteStatementReset();
                    if (v63) {
                      CFRelease(v63);
                    }
                    BOOL v40 = v65 == 101;
                    if (++v54 >= v51 || v65 != 101) {
                      goto LABEL_84;
                    }
                  }
                  BOOL v40 = 0;
                }
LABEL_84:
                free(v53);
              }
              else
              {
                BOOL v40 = 1;
              }
              CFStringRef v46 = v73;
              int v45 = v74;
            }
            if (!v46) {
              goto LABEL_88;
            }
            goto LABEL_87;
          }
          CFStringRef FourDigitsOfLocalNumber = (const __CFString *)_PNCopyLastFourDigitsOfLocalNumber();
          CFStringRef v46 = FourDigitsOfLocalNumber;
          if (!FourDigitsOfLocalNumber || CFStringGetLength(FourDigitsOfLocalNumber) < 1) {
            goto LABEL_57;
          }
          uint64_t v48 = CPSqliteConnectionStatementForSQL();
          if (v48)
          {
            uint64_t v49 = *(sqlite3_stmt **)(v48 + 8);
            sqlite3_bind_int(v49, 1, Insert);
            uint64_t v50 = (const char *)_CPCreateUTF8StringFromCFString();
            sqlite3_bind_text(v49, 2, v50, -1, MEMORY[0x1E4F14838]);
            LODWORD(v49) = CPSqliteStatementPerform();
            CPSqliteStatementReset();
            BOOL v40 = v49 == 101;
            goto LABEL_58;
          }
          BOOL v40 = 1;
LABEL_87:
          CFRelease(v46);
LABEL_88:
          a4 = v75;
          if (v45) {
            CFRelease(v45);
          }
          if (++v16 >= Count || !v40) {
            return v40;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t ABCDBContextDeleteMultiValuesForRecord(uint64_t a1, int a2)
{
  uint64_t result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a2);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    CPSqliteDatabaseReleaseSqliteStatement();
    uint64_t result = CPSqliteConnectionStatementForSQL();
    if (result)
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a2);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      return CPSqliteDatabaseReleaseSqliteStatement();
    }
  }
  return result;
}

void appendSQLInitSingleValuePropertyString(__CFString *a1, CFStringRef appendedString, unsigned int a3)
{
  if (a1 && appendedString && a3)
  {
    CFStringAppend(a1, appendedString);
    CFStringAppend(a1, @" ");
    if (a3 <= 7 && ((0x4Fu >> (a3 - 1)) & 1) != 0) {
      CFStringAppend(a1, off_1E5988760[a3 - 1]);
    }
    if (CFEqual(appendedString, @"UID"))
    {
      CFStringAppend(a1, @" PRIMARY KEY");
    }
  }
}

BOOL ABCDBContextCreateGroupTables()
{
  return ABCDBContextPerformSQLResultDone();
}

__CFString *ABCDBContextCreateStringForIndexingForStringProperty(uint64_t a1, int a2, int a3)
{
  if (kABPersonPhoneProperty != a3)
  {
    uint64_t v16 = CPSqliteConnectionStatementForSQL();
    sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 2, a3);
    CFMutableDataRef Mutable = (__CFString *)CPSqliteStatementCopyStringResult();
LABEL_17:
    CPSqliteStatementReset();
    return Mutable;
  }
  uint64_t active = CPPhoneNumberCopyActiveCountryCode();
  if (active)
  {
    uint64_t v6 = (const void *)active;
    uint64_t v7 = CPSqliteConnectionStatementForSQL();
    sqlite3_bind_int(*(sqlite3_stmt **)(v7 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v7 + 8), 2, a3);
    uint64_t v8 = CPSqliteStatementCopyStringResult();
    if (v8)
    {
      CFStringRef v9 = (const __CFString *)v8;
      CFMutableDataRef Mutable = 0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        if (!Mutable) {
          CFMutableDataRef Mutable = CFStringCreateMutable(v11, 0);
        }
        CFStringAppend(Mutable, v9);
        CFArrayRef v12 = (const __CFArray *)_PNCopyIndexStringsForAddressBookSearch();
        if (v12)
        {
          CFArrayRef v13 = v12;
          CFStringRef v14 = CFStringCreateByCombiningStrings(0, v12, @" ");
          if (v14)
          {
            CFStringRef v15 = v14;
            CFStringAppend(Mutable, @" ");
            CFStringAppend(Mutable, v15);
            CFStringAppend(Mutable, @" ");
            CFRelease(v15);
          }
          CFRelease(v13);
        }
        CFRelease(v9);
        CFStringRef v9 = (const __CFString *)CPSqliteStatementCopyStringResult();
      }
      while (v9);
    }
    else
    {
      CFMutableDataRef Mutable = 0;
    }
    CFRelease(v6);
    goto LABEL_17;
  }
  return 0;
}

uint64_t ABCDBContextCreateStringForIndexingForDictionaryProperty(uint64_t a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (kABPersonAddressProperty == a3)
  {
    uint64_t v5 = &v20;
  }
  else if (kABPersonSocialProfileProperty == a3)
  {
    uint64_t v5 = &v19;
  }
  else
  {
    if (kABPersonInstantMessageProperty != a3) {
      return 0;
    }
    uint64_t v5 = &v18;
  }
  CFMutableDataRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  uint64_t v7 = Mutable;
  CFStringAppend(Mutable, @"SELECT group_concat(mve.value, ' ') FROM ABMultiValue mv, ABMultiValueEntry mve, ABMultiValueEntryKey mvek WHERE mv.record_id = ? AND mve.parent_id = mv.UID AND mv.property = ? AND mvek.rowid = mve.key AND(");
  if (*(void *)v5)
  {
    uint64_t v8 = 0;
    do
    {
      if (v8) {
        CFStringAppend(v7, @"OR ");
      }
      CFStringAppend(v7, @"mvek.value = ? ");
    }
    while (*(void *)&v5[8 * v8++ + 8]);
  }
  CFStringAppend(v7, @";"));
  uint64_t v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    uint64_t v11 = v10;
    sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, a3);
    CFStringRef v12 = *(const __CFString **)v5;
    if (*(void *)v5)
    {
      uint64_t v13 = 1;
      do
      {
        CFStringRef v14 = *(sqlite3_stmt **)(v11 + 8);
        CFStringRef v15 = _ABCCreateUTF8StringFromCFString(v12);
        sqlite3_bind_text(v14, v13 + 2, (const char *)v15, -1, MEMORY[0x1E4F14838]);
        CFStringRef v12 = *(const __CFString **)&v5[8 * v13++];
      }
      while (v12);
    }
    uint64_t v16 = CPSqliteStatementCopyStringResult();
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v16 = 0;
  }
  CFRelease(v7);
  return v16;
}

__CFString *ABCDBContextCopyStringForIndexingForProperty(uint64_t a1, int a2, ABPropertyID property)
{
  ABPropertyType TypeOfProperty = ABPersonGetTypeOfProperty(property);
  if (TypeOfProperty == 261)
  {
    return (__CFString *)ABCDBContextCreateStringForIndexingForDictionaryProperty(a1, a2, property);
  }
  else if (TypeOfProperty == 257)
  {
    return ABCDBContextCreateStringForIndexingForStringProperty(a1, a2, property);
  }
  else
  {
    return 0;
  }
}

void ABCDContextCreateSearchIndexEntryForPerson(uint64_t a1, const void *a2)
{
  uint64_t v4 = _ABCCreateUTF8StringFromCFString(@"INSERT OR REPLACE INTO ABPersonFullTextSearch(rowid) VALUES( ?)");
  if (v4)
  {
    uint64_t v5 = v4;
    ppStmt = 0;
    if (!sqlite3_prepare(*(sqlite3 **)(a1 + 8), (const char *)v4, -1, &ppStmt, 0))
    {
      uint64_t v6 = ppStmt;
      ABRecordID RecordID = ABRecordGetRecordID(a2);
      sqlite3_bind_int(v6, 1, RecordID);
      sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
    }
    free(v5);
  }
  uint64_t v8 = _ABCCreateUTF8StringFromCFString(@"INSERT OR REPLACE INTO ABPersonSmartDialerFullTextSearch(rowid) VALUES( ?)");
  if (v8)
  {
    CFStringRef v9 = v8;
    ppStmt = 0;
    if (!sqlite3_prepare(*(sqlite3 **)(a1 + 8), (const char *)v8, -1, &ppStmt, 0))
    {
      uint64_t v10 = ppStmt;
      ABRecordID v11 = ABRecordGetRecordID(a2);
      sqlite3_bind_int(v10, 1, v11);
      sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
    }
    free(v9);
  }
}

void ABCDContextUpdateSearchIndexForPerson(uint64_t a1, const void *a2)
{
  CFArrayRef ArrayOfAllFTSPropertyIDs = (const __CFArray *)_ABPersonGetArrayOfAllFTSPropertyIDs();
  ABCDContextUpdateSearchIndexForPersonAndProperties(a1, a2, ArrayOfAllFTSPropertyIDs);
}

void ABCDContextUpdateSearchIndexForPersonAndProperties(uint64_t a1, const void *a2, const __CFArray *a3)
{
  CFArrayRef ArrayOfAllFTSPropertyIDs = (const __CFArray *)_ABPersonGetArrayOfAllFTSPropertyIDs();
  CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, 0);
  uint64_t v6 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableArrayRef v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v8 = CFArrayCreateMutable(0, 0, 0);
  CFStringRef v63 = CFArrayCreateMutable(0, 0, v6);
  CFIndex Count = CFArrayGetCount(a3);
  CFArrayRef theArray = v7;
  BOOL v62 = v8;
  if (Count >= 1)
  {
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    int v12 = 0;
    CFStringRef value = (const __CFString *)*MEMORY[0x1E4F1D260];
    while (1)
    {
      CFIndex v13 = CFArrayGetCount(ArrayOfAllFTSPropertyIDs);
      int ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
      v69.location = 0;
      v69.length = v13;
      if (CFArrayContainsValue(ArrayOfAllFTSPropertyIDs, v69, ValueAtIndex))
      {
        int v15 = v12;
        signed int v16 = CFArrayGetValueAtIndex(a3, v11);
        ABPropertyID v17 = v16;
        BOOL v22 = kABPersonFirstNameProperty == v16
           || kABPersonLastNameProperty == v16
           || kABPersonMiddleNameProperty == v16
           || kABPersonPrefixProperty == v16
           || kABPersonSuffixProperty == v16;
        CFArrayAppendValue(Mutable, (const void *)v16);
        StringForIndexingForuint64_t Property = ABPersonCreateStringForIndexingForProperty(a2, v17);
        CFStringRef v24 = StringForIndexingForProperty;
        if (StringForIndexingForProperty && CFStringGetLength(StringForIndexingForProperty) >= 1)
        {
          uint64_t v25 = theArray;
          CFStringRef v26 = v24;
        }
        else
        {
          uint64_t v25 = theArray;
          CFStringRef v26 = value;
        }
        CFArrayAppendValue(v25, v26);
        int v12 = v22 | v15;
        int v27 = ABCSmartDialerPersonNameForProperty(v17);
        if (v27)
        {
          uint64_t v28 = v27;
          if (CFStringGetLength(v27))
          {
            if (!CFEqual(v28, @"UNKNOWN_PROPERTY"))
            {
              CFArrayAppendValue(v62, v28);
              if (v24 && CFStringGetLength(v24) >= 1)
              {
                CFArrayAppendValue(v63, v24);
              }
              else
              {
                CFArrayAppendValue(v63, value);
                if (!v24) {
                  goto LABEL_28;
                }
              }
LABEL_27:
              CFRelease(v24);
              goto LABEL_28;
            }
          }
        }
        if (v24) {
          goto LABEL_27;
        }
      }
LABEL_28:
      if (v10 == ++v11) {
        goto LABEL_36;
      }
    }
  }
  LOBYTE(v12) = 0;
LABEL_36:
  ABRecordID RecordID = ABRecordGetRecordID(a2);
  if (Mutable)
  {
    if (CFArrayGetCount(Mutable))
    {
      int v30 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (v30)
      {
        ABRecordRef v31 = v30;
        CFStringAppend(v30, @"UPDATE ABPersonFullTextSearch SET ");
        if (CFArrayGetCount(Mutable) >= 1)
        {
          CFIndex v32 = 0;
          do
          {
            int v33 = CFArrayGetValueAtIndex(Mutable, v32);
            uint64_t v34 = ABCPersonNameForProperty(v33);
            if (v32) {
              CFStringAppend(v31, @", ");
            }
            CFStringAppend(v31, v34);
            CFStringAppend(v31, @" = ? ");
            ++v32;
          }
          while (v32 < CFArrayGetCount(Mutable));
        }
        if (v12) {
          CFStringAppend(v31, @", SupplementalCompositeNameTerms = ? ");
        }
        CFStringAppend(v31, @"WHERE rowid = ?");
        uint64_t v35 = CPSqliteConnectionStatementForSQL();
        if (!v35) {
          goto LABEL_61;
        }
        uint64_t v36 = v35;
        if (CFArrayGetCount(theArray) < 1)
        {
          int v42 = 1;
          if ((v12 & 1) == 0)
          {
LABEL_60:
            sqlite3_bind_int(*(sqlite3_stmt **)(v36 + 8), v42, RecordID);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
LABEL_61:
            CFRelease(v31);
            goto LABEL_62;
          }
        }
        else
        {
          char v65 = v12;
          CFIndex v37 = 0;
          CFStringRef v38 = (const __CFString *)*MEMORY[0x1E4F1D260];
          do
          {
            CFStringRef v39 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v37);
            BOOL v40 = *(sqlite3_stmt **)(v36 + 8);
            if (v39 == v38)
            {
              sqlite3_bind_null(*(sqlite3_stmt **)(v36 + 8), v37 + 1);
            }
            else
            {
              int v41 = _ABCCreateUTF8StringFromCFString(v39);
              sqlite3_bind_text(v40, v37 + 1, (const char *)v41, -1, MEMORY[0x1E4F14838]);
            }
            ++v37;
          }
          while (v37 < CFArrayGetCount(theArray));
          int v42 = v37 + 1;
          if ((v65 & 1) == 0) {
            goto LABEL_60;
          }
        }
        SupplementalStringForIndexingForCompositeName = ABPersonCreateSupplementalStringForIndexingForCompositeName(a2);
        int v44 = *(sqlite3_stmt **)(v36 + 8);
        if (SupplementalStringForIndexingForCompositeName)
        {
          int v45 = SupplementalStringForIndexingForCompositeName;
          CFStringRef v46 = _ABCCreateUTF8StringFromCFString(SupplementalStringForIndexingForCompositeName);
          sqlite3_bind_text(v44, v42, (const char *)v46, -1, MEMORY[0x1E4F14838]);
          CFRelease(v45);
        }
        else
        {
          sqlite3_bind_null(*(sqlite3_stmt **)(v36 + 8), v42);
        }
        ++v42;
        goto LABEL_60;
      }
    }
  }
LABEL_62:
  CFArrayRef v47 = v63;
  if (v62)
  {
    if (CFArrayGetCount(v62))
    {
      uint64_t v48 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      if (v48)
      {
        uint64_t v49 = v48;
        CFStringAppend(v48, @"UPDATE ABPersonSmartDialerFullTextSearch SET ");
        if (CFArrayGetCount(v62) >= 1)
        {
          CFIndex v50 = 0;
          do
          {
            CFStringRef v51 = (const __CFString *)CFArrayGetValueAtIndex(v62, v50);
            if (v50) {
              CFStringAppend(v49, @", ");
            }
            CFStringAppend(v49, v51);
            CFStringAppend(v49, @" = ? ");
            ++v50;
          }
          while (v50 < CFArrayGetCount(v62));
        }
        CFStringAppend(v49, @"WHERE rowid = ?");
        uint64_t v52 = CPSqliteConnectionStatementForSQL();
        CFArrayRef v47 = v63;
        if (v52)
        {
          uint64_t v53 = v52;
          if (CFArrayGetCount(v63) < 1)
          {
            int v61 = 1;
          }
          else
          {
            CFIndex v54 = 0;
            CFStringRef v55 = (const __CFString *)*MEMORY[0x1E4F1D260];
            do
            {
              CFStringRef v56 = (const __CFString *)CFArrayGetValueAtIndex(v47, v54);
              if (v56 == v55)
              {
                sqlite3_bind_null(*(sqlite3_stmt **)(v53 + 8), v54 + 1);
              }
              else
              {
                SmartDialerStringForIndexingFromCFString = ABPersonCreateSmartDialerStringForIndexingFromCFString(v56);
                uint64_t v58 = *(sqlite3_stmt **)(v53 + 8);
                if (SmartDialerStringForIndexingFromCFString)
                {
                  BOOL v59 = SmartDialerStringForIndexingFromCFString;
                  int v60 = _ABCCreateUTF8StringFromCFString(SmartDialerStringForIndexingFromCFString);
                  sqlite3_bind_text(v58, v54 + 1, (const char *)v60, -1, MEMORY[0x1E4F14838]);
                  CFRelease(v59);
                }
                else
                {
                  sqlite3_bind_null(*(sqlite3_stmt **)(v53 + 8), v54 + 1);
                }
                CFArrayRef v47 = v63;
              }
              ++v54;
            }
            while (v54 < CFArrayGetCount(v47));
            int v61 = v54 + 1;
          }
          sqlite3_bind_int(*(sqlite3_stmt **)(v53 + 8), v61, RecordID);
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
        CFRelease(v49);
      }
    }
    CFRelease(v62);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (theArray)
  {
    CFRelease(theArray);
  }
}

void ABCDBContextDeleteSearchIndexEntryForRecord(uint64_t a1, ABRecordRef record)
{
  ABRecordID RecordID = ABRecordGetRecordID(record);
  _DeleteEntryFromTableForRecordId(a1, RecordID, @"ABPersonFullTextSearch");
  _DeleteEntryFromTableForRecordId(a1, RecordID, @"ABPersonSmartDialerFullTextSearch");
}

void _DeleteEntryFromTableForRecordId(uint64_t a1, int a2, uint64_t a3)
{
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"DELETE FROM %@ WHERE rowid = ?", a3);
  uint64_t v5 = CPSqliteConnectionStatementForSQL();
  if (v5)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 1, a2);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t ABCDBContextCreateSearchTablesAndDropFirst(uint64_t a1, int a2)
{
  if (!ABCFTSIsEnabled()) {
    return 1;
  }
  if (a2)
  {
    BOOL v4 = _dropTable(a1, @"ABPersonFullTextSearch");
    int v5 = v4 & _dropTable(a1, @"ABPersonSmartDialerFullTextSearch");
  }
  else
  {
    int v5 = 1;
  }
  CFLocaleIdentifier v7 = ABCCopyUserLanguage();
  CFStringRef v8 = ABAddressBookCopyCollatorType(0, 1);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDataRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v11 = Mutable;
  if (v8) {
    CFStringAppendFormat(Mutable, 0, @"collator=\"%@\"", v8);
  }
  CFStringRef v12 = CFStringCreateWithFormat(v9, 0, @"CREATE VIRTUAL TABLE IF NOT EXISTS ABPersonFullTextSearch USING fts4(tokenize=ab_cf_tokenizer language=\"%@\" %@, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, OrganizationPhonetic, Department, Note, Birthday, JobTitle, Nickname, Prefix, Suffix, DisplayName, Phone, Email, Address, SocialProfile, URL, RelatedNames, IM, Date, SupplementalCompositeNameTerms);",
          v7,
          v11);
  int v13 = v5 & ABCDBContextPerformSQLResultDone();
  CFStringRef v14 = CFStringCreateWithFormat(v9, 0, @"CREATE VIRTUAL TABLE IF NOT EXISTS ABPersonSmartDialerFullTextSearch USING fts4(tokenize=ab_cf_tokenizer language=\"en\" %@, FirstEncoding, MiddleEncoding, LastEncoding, OrganizationEncoding, NicknameEncoding);",
          v11);
  uint64_t v6 = v13 & ABCDBContextPerformSQLResultDone();
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v7);
  CFRelease(v11);
  if (v8) {
    CFRelease(v8);
  }
  return v6;
}

CFMutableDictionaryRef ABCDBContextFetchMultiValueEntries(CFArrayRef theArray, uint64_t a2, int a3)
{
  CFMutableDictionaryRef result = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  if (!theArray || !a2) {
    return result;
  }
  if (CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDataRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppend(Mutable, @"SELECT UID, identifier, record_id, (SELECT value FROM ABMultiValueLabel WHERE ROWint ID = label), value, guid FROM ABMultiValue WHERE record_id ");
  if (CFArrayGetCount(theArray) == 1)
  {
    CFStringRef v8 = @"= ? ";
  }
  else
  {
    CFStringAppend(Mutable, @"IN (");
    if (CFArrayGetCount(theArray) < 1)
    {
      CFStringRef v8 = @" ");
    }
    else
    {
      CFIndex v9 = 0;
      CFStringRef v8 = @" ");
      do
      {
        if (v9) {
          CFStringAppend(Mutable, @", ");
        }
        CFStringAppend(Mutable, @"?");
        ++v9;
      }
      while (v9 < CFArrayGetCount(theArray));
    }
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(Mutable, @"AND property+0 = ?;");
  v28[0] = 0;
  v28[1] = ABCDBContextCollectMultiValueUID;
  v28[2] = 0;
  v28[3] = 1;
  v28[4] = ABCDBContextCollectMultiValueIdentifier;
  v28[5] = 0;
  v28[6] = 2;
  v28[7] = ABCDBContextCollectMultiValueRecordID;
  v28[8] = 0;
  v28[9] = 0x200000003;
  v28[10] = ABCDBContextCollectMultiValueLabel;
  v28[11] = 0;
  int v29 = 4;
  CFArrayGetValueAtIndex(theArray, 0);
  int v10 = ABRecordTypeOfProperty() & 0xFFFFFEFF;
  BOOL v11 = v10 != 2;
  if (v10 == 7) {
    int v12 = 4;
  }
  else {
    int v12 = 2 * v11;
  }
  int v30 = v12;
  ABRecordRef v31 = ABCDBContextCollectMultiValueValue;
  BOOL v32 = v11;
  uint64_t v33 = 0x200000005;
  uint64_t v34 = ABCDBContextCollectMultiValueUUID;
  uint64_t v35 = 0;
  uint64_t v13 = CPSqliteConnectionStatementForSQL();
  if (!v13)
  {
    CFMutableDictionaryRef v14 = 0;
LABEL_38:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v14) {
      CFRelease(v14);
    }
    return 0;
  }
  CFMutableDictionaryRef v14 = *(CFMutableDictionaryRef *)(v13 + 8);
  if (!v14) {
    goto LABEL_38;
  }
  if (CFArrayGetCount(theArray) < 1)
  {
    int v17 = 1;
  }
  else
  {
    CFIndex v15 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v15);
      int ID = CPRecordGetID();
      sqlite3_bind_int(v14, ++v15, ID);
    }
    while (CFArrayGetCount(theArray) > v15);
    int v17 = v15 + 1;
  }
  sqlite3_bind_int(v14, v17, a3);
  CFIndex Count = CFArrayGetCount(theArray);
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v6, Count, MEMORY[0x1E4F1D530], 0);
  if (CFArrayGetCount(theArray) >= 1)
  {
    CFIndex v19 = 0;
    do
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
      int valuePtr = 0;
      int valuePtr = CPRecordGetID();
      CFNumberRef v21 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v14, v21, ValueAtIndex);
      if (v21) {
        CFRelease(v21);
      }
      ++v19;
    }
    while (v19 < CFArrayGetCount(theArray));
  }
  *(void *)&long long v25 = v14;
  DWORD2(v25) = a3;
  *(void *)&long long v26 = v28;
  DWORD2(v26) = 6;
  CFIndex v22 = CFArrayGetCount(theArray);
  CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(v6, v22, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v27) {
    goto LABEL_38;
  }
  int v23 = CPSqliteStatementSendResults();
  if (v23 != 101) {
    syslog(3, "Error fetching multivalue entries: %d", v23);
  }
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v27;
}

uint64_t ABCDBContextCollectMultiValueUID(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a3;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueIdentifier(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 16) = a3;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueRecordID(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 48) = a3;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueLabel(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 24) = cf;
  return 1;
}

uint64_t ABCSQLiteTypeForType(int a1)
{
  if ((a1 & 0xFFFFFEFF) == 7) {
    return 4;
  }
  else {
    return 2 * ((a1 & 0xFFFFFEFF) != 2);
  }
}

uint64_t ABCDBContextCollectMultiValueValue(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (a2 == 1 && cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 32) = cf;
  return 1;
}

uint64_t ABCDBContextCollectMultiValueUUID(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 40) = cf;
  return 1;
}

uint64_t CollectMultiValueEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040D1D23B1BuLL);
  if (v3)
  {
    BOOL v4 = v3;
    v3[3] = *(_DWORD *)(a2 + 8);
    CPSqliteStatementApplyValuesFromRecord();
    int valuePtr = v4[12];
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)a2, v6);
    if (Value)
    {
      *(void *)BOOL v4 = Value;
      CFMutableDataRef Mutable = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 32), v6);
      if (!Mutable)
      {
        CFMutableDataRef Mutable = CFArrayCreateMutable(v5, 0, 0);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 32), v6, Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      CFArrayAppendValue((CFMutableArrayRef)Mutable, v4);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  return 0;
}

uint64_t ABCDBContextFetchMultiValuePropertyIntoRecord(uint64_t a1, void *a2, int a3, int a4)
{
  values = a2;
  CFArrayRef v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  uint64_t MultiValuePropertyIntoRecords = ABCDBContextFetchMultiValuePropertyIntoRecords(a1, v7, a3, a4);
  if (v7) {
    CFRelease(v7);
  }
  return MultiValuePropertyIntoRecords;
}

uint64_t ABCDBContextFetchMultiValuePropertyIntoRecords(uint64_t a1, CFArrayRef theArray, int a3, int a4)
{
  if (!a1) {
    return 1;
  }
  if (CFArrayGetCount(theArray) < 1) {
    return 1;
  }
  CFIndex v8 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v8);
    if (CPRecordGetID() != -1) {
      break;
    }
    if (++v8 >= CFArrayGetCount(theArray)) {
      return 1;
    }
  }
  if (!a4)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s: invalid property type for %d\n", "ABCDBContextFetchMultiValuePropertyIntoRecords", a3);
    return 1;
  }
  CFMutableDictionaryRef MultiValueEntries = ABCDBContextFetchMultiValueEntries(theArray, a1, a3);
  if (!MultiValueEntries) {
    return 1;
  }
  CFDictionaryRef v11 = MultiValueEntries;
  CFIndex Count = CFArrayGetCount(theArray);
  CFMutableDataRef Mutable = CFSetCreateMutable(0, Count, 0);
  if (CFArrayGetCount(theArray) < 1)
  {
    unsigned __int8 Identifier = 1;
  }
  else
  {
    CFIndex v14 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned __int8 Identifier = 1;
    CFStringRef v51 = Mutable;
    int v50 = a4;
    CFDictionaryRef v49 = v11;
    do
    {
      CFArrayGetValueAtIndex(theArray, v14);
      LODWORD(value) = 0;
      LODWORD(value) = CPRecordGetID();
      if (!CFSetContainsValue(Mutable, (const void *)(int)value))
      {
        CFSetAddValue(Mutable, (const void *)(int)value);
        if (value != -1)
        {
          CFNumberRef v16 = CFNumberCreate(allocator, kCFNumberSInt32Type, &value);
          CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v11, v16);
          if (v16) {
            CFRelease(v16);
          }
          char v18 = ABCMultiValueCreateMutable(a4);
          if (v18)
          {
            uint64_t v26 = (uint64_t)v18;
            if (v17)
            {
              CFIndex v27 = CFArrayGetCount(v17);
              if (v27 >= 1 && (Identifier & 1) != 0)
              {
                CFIndex v28 = v27;
                uint64_t v29 = 1;
                CFArrayRef v52 = v17;
                do
                {
                  int ValueAtIndex = (const __CFString **)CFArrayGetValueAtIndex(v17, v29 - 1);
                  ABRecordRef v31 = ValueAtIndex;
                  int v32 = *(_DWORD *)(v26 + 16);
                  if (v32 == 260)
                  {
                    CFDateRef v40 = _ABCCreateDateFromCFString(ValueAtIndex[4]);
                    CFStringRef v41 = v31[3];
                    CFIndex v42 = ABCMultiValueGetCount(v26);
                    unsigned __int8 Identifier = ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)v26, v40, v41, v42, v31[5], (int *)v31 + 4, 0);
                    if (v40)
                    {
                      int v43 = ABCCallBacksForType(*(_DWORD *)(v26 + 16) & 0xFFFFFEFF);
                      if (v43)
                      {
                        int v44 = v43[1];
                        if (v44) {
                          ((void (*)(CFDateRef))v44)(v40);
                        }
                      }
                    }
                  }
                  else if (v32 == 261)
                  {
                    CFMutableDictionaryRef v33 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    int v34 = *((_DWORD *)v31 + 2);
                    uint64_t v35 = CPSqliteConnectionStatementForSQL();
                    if (v35)
                    {
                      uint64_t v36 = *(sqlite3_stmt **)(v35 + 8);
                      if (v36)
                      {
                        sqlite3_bind_int(v36, 1, v34);
                        int v37 = CPSqliteStatementSendResults();
                        if (v37 != 101) {
                          syslog(3, "Error fetching multivalue sub entries: %d", v37);
                        }
                        CPSqliteStatementReset();
                        CPSqliteDatabaseReleaseSqliteStatement();
                      }
                    }
                    CFStringRef v38 = v31[3];
                    CFIndex v39 = ABCMultiValueGetCount(v26);
                    unsigned __int8 Identifier = ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)v26, v33, v38, v39, v31[5], (int *)v31 + 4, 0);
                    CFRelease(v33);
                    CFArrayRef v17 = v52;
                  }
                  else
                  {
                    CFStringRef v46 = ValueAtIndex[3];
                    int v45 = (__CFString *)ValueAtIndex[4];
                    CFIndex v47 = ABCMultiValueGetCount(v26);
                    unsigned __int8 Identifier = ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)v26, v45, v46, v47, v31[5], (int *)v31 + 4, 0);
                  }
                  if (v29 >= v28) {
                    break;
                  }
                  ++v29;
                }
                while ((Identifier & 1) != 0);
                a4 = v50;
                CFDictionaryRef v11 = v49;
              }
            }
            ABMultiValueSetImmutable(v26, v19, v20, v21, v22, v23, v24, v25, v48);
            ABCRecordSetContents();
            CFRelease((CFTypeRef)v26);
          }
          CFMutableDataRef Mutable = v51;
          if (v17)
          {
            v55.length = CFArrayGetCount(v17);
            v55.location = 0;
            CFArrayApplyFunction(v17, v55, (CFArrayApplierFunction)freeEntriesStruct, 0);
          }
        }
      }
      ++v14;
    }
    while (v14 < CFArrayGetCount(theArray));
  }
  CFRelease(v11);
  CFRelease(Mutable);
  return Identifier & 1;
}

void freeEntriesStruct(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    if (a1[4])
    {
      int v3 = ABRecordTypeOfProperty();
      BOOL v4 = ABCCallBacksForType(v3 & 0xFFFFFEFF);
      if (v4)
      {
        CFAllocatorRef v5 = v4[1];
        if (v5) {
          ((void (*)(void))v5)(a1[4]);
        }
      }
    }
    CFNumberRef v6 = (const void *)a1[5];
    if (v6) {
      CFRelease(v6);
    }
    free(a1);
  }
}

uint64_t ABCDBContextCopyRecordsForUIDsOfType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41094E0](a1, a3, a2);
}

uint64_t ABCDBContextCopyRecordsForUUIDsOfType(uint64_t a1, CFArrayRef theArray, long long *a3)
{
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  CFMutableDataRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"guid IN (");
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      if (v8) {
        CFStringAppend(Mutable, @", ");
      }
      CFStringAppend(Mutable, @"?");
      ++v8;
    }
    while (Count != v8);
  }
  CFStringAppend(Mutable, @""));
  if (ABCPersonClass != a3)
  {
    CFMutableArrayRef v9 = 0;
    if (Mutable) {
      goto LABEL_10;
    }
LABEL_22:
    uint64_t v11 = 0;
    if (!v9) {
      return v11;
    }
LABEL_23:
    CFRelease(v9);
    return v11;
  }
  CFStringAppend(Mutable, CFSTR(" OR PersonLink in (select abpl.rowid from ABPersonLink abpl where abpl.guid in ("));
  if (Count >= 1)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      if (i) {
        CFStringAppend(Mutable, @", ");
      }
      CFStringAppend(Mutable, @"?");
    }
  }
  CFStringAppend(Mutable, @")"));
  CFIndex v13 = CFArrayGetCount(theArray);
  CFMutableArrayRef v9 = CFArrayCreateMutable(0, 2 * v13, MEMORY[0x1E4F1D510]);
  v15.length = CFArrayGetCount(theArray);
  v15.location = 0;
  CFArrayAppendArray(v9, theArray, v15);
  v16.length = CFArrayGetCount(theArray);
  v16.location = 0;
  CFArrayAppendArray(v9, theArray, v16);
  if (!Mutable) {
    goto LABEL_22;
  }
LABEL_10:
  if (v9) {
    CFArrayRef v10 = v9;
  }
  else {
    CFArrayRef v10 = theArray;
  }
  uint64_t v11 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, (uint64_t)a3, 0, Mutable, v10);
  CFRelease(Mutable);
  if (v9) {
    goto LABEL_23;
  }
  return v11;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const void *a5)
{
  CFIndex v14 = a5;
  values = a4;
  if (a4 && a5)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFArrayRef v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    CFArrayRef v11 = CFArrayCreate(v8, &v14, 1, v9);
    uint64_t v12 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates(a1, a2, a3, v10, v11);
    if (v10) {
      CFRelease(v10);
    }
    if (v11) {
      CFRelease(v11);
    }
    return v12;
  }
  else
  {
    return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates(a1, a2, a3, 0, 0);
  }
}

CFStringRef ABCCopySQLiteStringValueForValueOfType(uint64_t a1, int a2)
{
  unsigned int v3 = a2 & 0xFFFFFEFF;
  if ((a2 & 0xFFFFFEFF) > 7) {
    return (CFStringRef)a1;
  }
  if (((1 << a2) & 0xEE) != 0)
  {
    BOOL v4 = ABCCallBacksForType(v3);
    if (v4)
    {
      CFAllocatorRef v5 = *v4;
      if (*v4)
      {
        return (CFStringRef)((uint64_t (*)(uint64_t))v5)(a1);
      }
    }
    return (CFStringRef)a1;
  }
  if (v3 != 4) {
    return (CFStringRef)a1;
  }
  return _ABCCreateCFStringFromDate(a1);
}

CFDateRef ABCCopyValueOfTypeForSQLiteValue(const __CFString *a1, int a2)
{
  unsigned int v3 = a2 & 0xFFFFFEFF;
  if ((a2 & 0xFFFFFEFF) > 7) {
    return (CFDateRef)a1;
  }
  if (((1 << a2) & 0xEE) != 0)
  {
    BOOL v4 = ABCCallBacksForType(v3);
    if (v4)
    {
      CFAllocatorRef v5 = *v4;
      if (*v4)
      {
        return (CFDateRef)((uint64_t (*)(const __CFString *))v5)(a1);
      }
    }
    return (CFDateRef)a1;
  }
  if (v3 != 4) {
    return (CFDateRef)a1;
  }
  return _ABCCreateDateFromCFString(a1);
}

BOOL _runPhoneQueryWithContextForNumber(uint64_t a1)
{
  CPRecordStoreGetDatabase();
  uint64_t v2 = CPSqliteDatabaseStatementForReading();
  unsigned int v3 = (void *)recordStoreContext(a1);
  if (v3) {
    unsigned int v3 = (void *)*v3;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v3);
  if (!v2) {
    return 0;
  }
  if (!*(void *)(v2 + 8)) {
    return 0;
  }
  CFStringRef FourDigitsOfLocalNumber = (const __CFString *)_PNCopyLastFourDigitsOfLocalNumber();
  if (!FourDigitsOfLocalNumber) {
    return 0;
  }
  CFStringRef v5 = FourDigitsOfLocalNumber;
  CFIndex Length = CFStringGetLength(FourDigitsOfLocalNumber);
  BOOL v7 = Length > 0;
  if (Length >= 1)
  {
    CFAllocatorRef v8 = *(sqlite3_stmt **)(v2 + 8);
    CFMutableArrayRef v9 = _ABCCreateUTF8StringFromCFString(v5);
    sqlite3_bind_text(v8, 1, (const char *)v9, -1, MEMORY[0x1E4F14838]);
    CPSqliteStatementProcessPhoneQuery();
    CPSqliteStatementReset();
  }
  CFRelease(v5);
  return v7;
}

BOOL phoneQueryRowHandler(uint64_t a1, int a2, const char *a3, char a4, uint64_t a5)
{
  if (a2)
  {
    BOOL v7 = *(void *)(a5 + 16) == 0;
    int v8 = 3;
    goto LABEL_12;
  }
  CFArrayRef v11 = *(const char **)(a5 + 48);
  if (!a3 || !v11)
  {
    BOOL v7 = 0;
    int v8 = 1;
    if (!v11) {
      goto LABEL_12;
    }
LABEL_11:
    if (a4) {
      return v7;
    }
    goto LABEL_12;
  }
  size_t v12 = strlen(*(const char **)(a5 + 48));
  int v13 = strncmp(v11, a3, v12);
  BOOL v7 = 0;
  if (v13) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  if (v13) {
    goto LABEL_11;
  }
LABEL_12:
  int v14 = *(_DWORD *)(a5 + 40);
  if (v8 >= v14)
  {
    if (v8 > v14)
    {
      CFRange v15 = *(CFMutableArrayRef **)(a5 + 16);
      if (v15) {
        CFArrayRemoveAllValues(*v15);
      }
      CFRange v16 = *(CFMutableArrayRef **)(a5 + 24);
      if (v16) {
        CFArrayRemoveAllValues(*v16);
      }
      CFArrayRef v17 = *(CFMutableArrayRef **)(a5 + 32);
      if (v17) {
        CFArrayRemoveAllValues(*v17);
      }
      *(_DWORD *)(a5 + 40) = v8;
    }
    char v18 = *(__CFArray ***)(a5 + 16);
    if (v18)
    {
      uint64_t v19 = *v18;
      int v20 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
      CFArrayAppendValue(v19, (const void *)v20);
      uint64_t v21 = *(__CFArray ***)(a5 + 24);
      if (v21)
      {
        uint64_t v22 = *v21;
        int v23 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
        CFArrayAppendValue(v22, (const void *)v23);
      }
    }
    else
    {
      *(_DWORD *)a5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
      *(_DWORD *)(a5 + 4) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
    }
    if (*(void *)(a5 + 32) || *(void *)(a5 + 8))
    {
      uint64_t v24 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3);
      if (v24)
      {
        CFStringRef v25 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v24, 0x8000100u);
        uint64_t v26 = *(CFTypeRef **)(a5 + 8);
        if (v26)
        {
          if (*v26)
          {
            CFRelease(*v26);
            uint64_t v26 = *(CFTypeRef **)(a5 + 8);
          }
          *uint64_t v26 = v25;
        }
        else
        {
          CFArrayAppendValue(**(CFMutableArrayRef **)(a5 + 32), v25);
          CFRelease(v25);
        }
      }
      else
      {
        CFIndex v27 = *(CFMutableArrayRef **)(a5 + 32);
        if (v27 && *(void *)(a5 + 16)) {
          CFArrayAppendValue(*v27, (const void *)*MEMORY[0x1E4F1D260]);
        }
      }
    }
  }
  return v7;
}

CFMutableArrayRef _CopyPersonUIDsForPhoneNumber(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableArrayRef *a4, CFMutableArrayRef *a5)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (a4) {
    *a4 = CFArrayCreateMutable(v8, 0, 0);
  }
  if (a5) {
    *a5 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  }
  _runPhoneQueryWithContextForNumber(a1);
  return Mutable;
}

uint64_t _PersonUIDForPhoneNumber(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a4) {
    *a4 = -1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t ABPhoneNumberGetLastFour(const char *a1)
{
  size_t v2 = strlen(a1);
  if (v2 <= 4) {
    return (uint64_t)a1;
  }
  else {
    return (uint64_t)&a1[v2 - 4];
  }
}

void _FindUIDsMatchingPhoneNumbers(uint64_t a1, _DWORD *a2, _DWORD *a3, void *a4, int a5)
{
  LODWORD(v5) = a5;
  CFArrayRef v10 = (const void *)CPPhoneNumberCopyHomeCountryCode();
  CFArrayRef v11 = (uint64_t *)malloc_type_malloc(8 * (int)v5, 0x10040436913F5uLL);
  size_t v12 = malloc_type_malloc((uint64_t)(int)v5 << 6, 0x105004024FC7E8CuLL);
  CFDateRef v40 = v12;
  if ((int)v5 <= 0)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT value, record_id, identifier FROM ABMultiValue WHERE ");
  }
  else
  {
    int v13 = v12;
    uint64_t v34 = a1;
    int v35 = v5;
    uint64_t v14 = v5;
    long long v38 = *(_OWORD *)(MEMORY[0x1E4F5CC30] + 16);
    long long v39 = *MEMORY[0x1E4F5CC30];
    long long v36 = *(_OWORD *)(MEMORY[0x1E4F5CC30] + 48);
    long long v37 = *(_OWORD *)(MEMORY[0x1E4F5CC30] + 32);
    uint64_t v5 = v5;
    CFRange v15 = v11;
    do
    {
      _OWORD *v13 = v39;
      v13[1] = v38;
      v13[2] = v37;
      v13[3] = v36;
      if (*a4)
      {
        *CFRange v15 = CPPhoneNumberCopyNormalized();
        decomposePhoneNumber();
      }
      else
      {
        *CFRange v15 = 0;
      }
      *a2++ = -1;
      *a3++ = -1;
      ++v15;
      ++a4;
      v13 += 4;
      --v5;
    }
    while (v5);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT value, record_id, identifier FROM ABMultiValue WHERE ");
    uint64_t v17 = 0;
    char v18 = 0;
    do
    {
      while (1)
      {
        uint64_t v19 = v11[v17];
        if (!v19) {
          break;
        }
        size_t v20 = strlen((const char *)v11[v17]);
        uint64_t v21 = (unsigned char *)(v19 + v20 - 4);
        if (v20 <= 4) {
          uint64_t v21 = (unsigned char *)v11[v17];
        }
        if (!*v21) {
          break;
        }
        if (v18) {
          CFStringRef v22 = @"OR ";
        }
        else {
          CFStringRef v22 = CFSTR("UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE ");
        }
        CFStringAppend(MutableCopy, v22);
        CFStringAppend(MutableCopy, @"CFStringRef value = ? ");
        char v18 = 1;
        if (v14 - 1 == v17++) {
          goto LABEL_21;
        }
      }
      ++v17;
    }
    while (v14 != v17);
    if ((v18 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_21:
    CFStringAppend(MutableCopy, @";"));
LABEL_22:
    a1 = v34;
    LODWORD(v5) = v35;
  }
  CPRecordStoreGetDatabase();
  uint64_t v24 = CPSqliteDatabaseStatementForReading();
  CFStringRef v25 = (void *)recordStoreContext(a1);
  if (v25) {
    CFStringRef v25 = (void *)*v25;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v25);
  CFRelease(MutableCopy);
  if (v24 && *(void *)(v24 + 8))
  {
    if ((int)v5 >= 1)
    {
      uint64_t v26 = v5;
      int v27 = 1;
      CFIndex v28 = (const char **)v11;
      do
      {
        if (*v28)
        {
          size_t v29 = strlen(*v28);
          int v30 = v29 <= 4 ? *v28 : &(*v28)[v29 - 4];
          if (*v30) {
            sqlite3_bind_text(*(sqlite3_stmt **)(v24 + 8), v27++, v30, -1, 0);
          }
        }
        ++v28;
        --v26;
      }
      while (v26);
    }
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  if (v10) {
    CFRelease(v10);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v31 = v5;
    int v32 = (void **)v11;
    do
    {
      CFMutableDictionaryRef v33 = *v32++;
      free(v33);
      --v31;
    }
    while (v31);
  }
  free(v11);
  free(v40);
}

uint64_t ABDBContextBatchPhoneCallback(uint64_t a1, uint64_t a2)
{
  sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  uint64_t v4 = CPPhoneNumberCopyNormalized();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    decomposePhoneNumber();
    unint64_t v6 = *(unsigned int *)(a2 + 32);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (*(_DWORD *)(*(void *)a2 + 4 * v8) != -1 || !decomposedPhoneNumbersEqual())
      {
        ++v8;
        v7 += 64;
        if (v8 >= v6) {
          goto LABEL_9;
        }
      }
      *(_DWORD *)(*(void *)a2 + 4 * v8) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
      *(_DWORD *)(*(void *)(a2 + 8) + 4 * v8) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
    }
LABEL_9:
    free(v5);
  }
  return 0;
}

uint64_t _iteratePeopleWithCallbacksRowHandler(uint64_t a1, void *a2)
{
  sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), 0);
  uint64_t RecordIDForRowid = CPRecordStoreGetRecordIDForRowid();
  if (!(*(unsigned int (**)(uint64_t, void))a2[1])(RecordIDForRowid, *a2)) {
    return 1;
  }
  CPSqliteStatementApplyValuesFromRecord();
  return (*(unsigned int (**)(void))(a2[1] + 48))(*a2) ^ 1;
}

uint64_t ABCRecordStoreReadColumns()
{
  return CPRecordStoreCreateReadColumns();
}

uint64_t ABRecordStoreColumnTypeForPropertyType(int a1)
{
  int v1 = a1 - 1;
  if ((a1 - 1) >= 7 || ((0x5Fu >> v1) & 1) == 0) {
    abort();
  }
  return dword_19DD55590[v1];
}

uint64_t (*_setterForType(int a1))()
{
  if ((a1 - 1) < 5) {
    return off_1EF03DDD0[a1 - 1];
  }
  syslog(3, "ignoring column with type %d", a1);
  return 0;
}

void appendTokenizations(void *a1, const __CFArray *a2, uint64_t a3, __CFString *a4, __CFArray **a5, void *a6, int a7, int a8)
{
  values = a1;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  CFArrayRef v15 = a2;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1) {
    goto LABEL_7;
  }
  CFIndex v17 = Count;
  uint64_t v18 = 1;
  do
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v15, v18 - 1);
    v48.length = CFArrayGetCount(ValueAtIndex);
    v48.location = 0;
    int v20 = CFArrayContainsValue(ValueAtIndex, v48, a1);
    if (v18 >= v17) {
      break;
    }
    ++v18;
  }
  while (!v20);
  if (v20)
  {
    char v21 = 1;
    CFMutableStringRef MutableCopy = v15;
  }
  else
  {
LABEL_7:
    CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy(v14, 0, v15);
    CFArrayRef v23 = CFArrayCreate(v14, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(MutableCopy, v23);
    CFRelease(v23);
    char v21 = 0;
  }
  CFIndex v42 = CFArrayGetCount(MutableCopy);
  if (v42 >= 1)
  {
    char v37 = v21;
    long long v38 = a5;
    char v41 = 0;
    int v24 = 0;
    BOOL v25 = a8 == 0;
    CFIndex v26 = 0;
    if (v25) {
      CFStringRef v27 = @"abs.SearchKey";
    }
    else {
      CFStringRef v27 = @"abs.NameOnlySearchKey";
    }
    if (a7) {
      CFStringRef v28 = @", 1)");
    }
    else {
      CFStringRef v28 = @", 0)");
    }
    CFDateRef v40 = MutableCopy;
    do
    {
      CFArrayRef v29 = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, v26);
      if (v24 >= 1) {
        CFStringAppend(a4, @" OR");
      }
      CFIndex v30 = CFArrayGetCount(v29);
      if (v30 < 1)
      {
        int v24 = 0;
      }
      else
      {
        CFIndex v31 = v30;
        CFIndex v44 = v26;
        int v32 = malloc_type_malloc(8 * v30, 0x10040436913F5uLL);
        CFIndex v33 = 0;
        int v24 = 0;
        do
        {
          CFStringRef v34 = (const __CFString *)CFArrayGetValueAtIndex(v29, v33);
          if (CFStringGetLength(v34) >= 1)
          {
            int64_t v47 = 0;
            int v35 = (char *)ABCreateSortKey(v34, a3, 0, &v47);
            if (v47 < 1) {
              free(v35);
            }
            else {
              v32[v24++] = v35;
            }
          }
          ++v33;
        }
        while (v31 != v33);
        if (v24 < 1)
        {
          if (v32) {
            free(v32);
          }
          CFMutableStringRef MutableCopy = v40;
          CFIndex v26 = v44;
        }
        else
        {
          CFArrayAppendValue(theArray, (const void *)v24);
          CFArrayAppendValue(theArray, v32);
          CFStringAppend(a4, @" (");
          if ((v41 & 1) == 0) {
            CFStringAppend(a4, @" (");
          }
          int v36 = 0;
          CFMutableStringRef MutableCopy = v40;
          CFIndex v26 = v44;
          do
          {
            ++*a6;
            if (v36) {
              CFStringAppend(a4, @" AND");
            }
            CFStringAppend(a4, CFSTR(" (1 == has_sort_key_prefix("));
            CFStringAppend(a4, v27);
            CFStringAppend(a4, @", ?");
            CFStringAppend(a4, v28);
            ++v36;
          }
          while (v24 != v36);
          CFStringAppend(a4, @""));
          char v41 = 1;
        }
      }
      ++v26;
    }
    while (v26 != v42);
    a5 = v38;
    char v21 = v37;
    if (v41) {
      CFStringAppend(a4, @""));
    }
  }
  if ((v21 & 1) == 0) {
    CFRelease(MutableCopy);
  }
  *a5 = theArray;
}

uint64_t bindTokenizations(uint64_t a1, CFArrayRef theArray, int *a3)
{
  uint64_t result = CFArrayGetCount(theArray);
  if (result >= 0) {
    uint64_t v7 = result;
  }
  else {
    uint64_t v7 = result + 1;
  }
  if (result >= 2)
  {
    uint64_t v8 = 0;
    uint64_t v15 = v7 >> 1;
    do
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(theArray, 2 * v8);
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(theArray, (2 * v8) | 1);
      int v10 = *a3;
      if (ValueAtIndex >= 1)
      {
        CFArrayRef v11 = (const char **)result;
        uint64_t v12 = ValueAtIndex;
        do
        {
          int v13 = *v11++;
          int v14 = strlen(v13);
          uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), v10++, v13, v14, 0);
          --v12;
        }
        while (v12);
        int v10 = *a3;
      }
      *a3 = v10 + ValueAtIndex;
      ++v8;
    }
    while (v8 != v15);
  }
  return result;
}

void releaseTokenizationSortKeys(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 0) {
      uint64_t v3 = Count;
    }
    else {
      uint64_t v3 = Count + 1;
    }
    if (Count >= 2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = v3 >> 1;
      do
      {
        uint64_t ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(a1, 2 * v4);
        uint64_t v7 = (void *)CFArrayGetValueAtIndex(a1, (2 * v4) | 1);
        if (v7)
        {
          uint64_t v8 = v7;
          if (ValueAtIndex >= 1)
          {
            if (ValueAtIndex <= 1) {
              uint64_t ValueAtIndex = 1;
            }
            CFMutableArrayRef v9 = (void **)v7;
            do
            {
              int v10 = *v9++;
              free(v10);
              --ValueAtIndex;
            }
            while (ValueAtIndex);
          }
          free(v8);
        }
        ++v4;
      }
      while (v4 != v5);
    }
    CFRelease(a1);
  }
}

void ABCIteratePeopleMatchingStringWithCallbacks(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5, int a6, int a7, uint64_t a8, uint64_t a9, char a10)
{
  keys[8] = *(void **)MEMORY[0x1E4F143B8];
  v22[0] = a9;
  v22[1] = a8;
  v22[2] = ABCPersonClass;
  Columns = 0;
  uint64_t v24 = 0;
  uint64_t v25 = a1;
  if (*(void *)(a8 + 56) && *(int *)(a8 + 64) >= 1 && *(void *)(CPRecordStoreGetDatabase() + 8)) {
    CPSqliteConnectionEnableProgressHandlerCallback();
  }
  if (a10)
  {
    CFStringRef theString = 0;
    CFDictionaryRef v17 = 0;
  }
  else
  {
    keys[0] = (void *)kABPersonFirstNameProperty;
    keys[1] = (void *)kABPersonLastNameProperty;
    keys[2] = (void *)kABPersonMiddleNameProperty;
    keys[3] = (void *)kABPersonOrganizationProperty;
    keys[4] = (void *)kABPersonKindProperty;
    keys[5] = (void *)kABPersonPrefixProperty;
    keys[6] = (void *)kABPersonSuffixProperty;
    keys[7] = (void *)kABPersonCompositeNameFallbackProperty;
    *(_OWORD *)values = xmmword_19DD55550;
    long long v27 = unk_19DD55560;
    long long v28 = xmmword_19DD55570;
    long long v29 = unk_19DD55580;
    CFDictionaryRef v17 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 8, 0, 0);
    CFStringRef theString = @"SELECT ROWID, First, Last, Middle, Organization, Kind, Prefix, Suffix, CompositeNameFallback ";
  }
  Columns = (void *)CPRecordStoreCreateReadColumns();
  Prefix = ABCIteratePeopleMatchingStringWithCustomQueryPrefix(a1, a2, a3, a4, a5, a6, a7, (int)_iteratePeopleWithCallbacksRowHandler, (uint64_t)v22, theString, (uint64_t)v17);
  if (Prefix)
  {
    uint64_t v19 = Prefix;
    if (CFArrayGetCount(Prefix)) {
      ABCIteratePeopleMatchingStringWithCallbacks_cold_1();
    }
    CFRelease(v19);
  }
  if ((a10 & 1) == 0) {
    CFRelease(theString);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (*(void *)(a8 + 56) && *(void *)(CPRecordStoreGetDatabase() + 8)) {
    CPSqliteConnectionDisableProgressHandlerCallback();
  }
  free(Columns);
}

uint64_t _iteratePeopleProgressHandlerCallback(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2[1];
  if (v2 && (uint64_t v3 = *(uint64_t (**)(void))(v2 + 56)) != 0) {
    return v3(*a2);
  }
  else {
    return 0;
  }
}

sqlite3_stmt *ABCIteratePeopleMatchingStringWithCustomQueryPrefix(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5, int a6, int a7, int a8, uint64_t a9, CFStringRef theString, uint64_t a11)
{
  if ((ABCFTSIsEnabled() & 1) == 0)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"CFArrayRef ABCIteratePeopleMatchingStringWithCustomQueryPrefix(ABCDBContextRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABCPersonSortOrdering, _Bool, CPRecordStoreRowHandler, void *, CFStringRef, CFDictionaryRef)", 4074, 0, @"AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs) with simulated crash report.", v24, v25, v26, v57);
    ABLogSimulateCrashReport(@"AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs).");
    return 0;
  }
  uint64_t v18 = (const void *)ABTokenListCreate();
  uint64_t v19 = (void *)recordStoreContext(a1);
  if (v19) {
    uint64_t v19 = (void *)*v19;
  }
  uint64_t SearchCollator = ABAddressBookGetSearchCollator((uint64_t)v19);
  char v21 = (void *)recordStoreContext(a1);
  if (v21) {
    char v21 = (void *)*v21;
  }
  WordTokenizer = ABAddressBookGetWordTokenizer((uint64_t)v21);
  if (!SearchCollator)
  {
LABEL_74:
    CFMutableStringRef MutableCopy = 0;
    goto LABEL_75;
  }
  ABTokenListPopulateFromString((uint64_t)v18, WordTokenizer, 0, a2, 0, 1, 0);
  if (!v18) {
    return 0;
  }
  if (ABTokenListGetCount((uint64_t)v18) < 1)
  {
    long long v27 = 0;
    CFMutableStringRef MutableCopy = 0;
LABEL_67:
    CFRelease(v18);
    goto LABEL_68;
  }
  int v59 = a6;
  if (theString) {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  }
  else {
    CFMutableStringRef MutableCopy = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
  }
  CFStringAppend(MutableCopy, @" FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE");
  if (a1)
  {
    if (a4)
    {
      ABRecordID RecordID = ABRecordGetRecordID(a4);
      if (!a5) {
        goto LABEL_22;
      }
    }
    else
    {
      ABRecordID RecordID = -1;
      if (!a5) {
        goto LABEL_22;
      }
    }
    ABRecordID v29 = ABRecordGetRecordID(a5);
    if (v29 != -1)
    {
      int v30 = v29;
      char v31 = 0;
      CFStringRef v32 = @" abp.ROWID IN (select member_id FROM ABGroupMembers WHERE group_id = ? AND member_type = 0) AND";
      goto LABEL_26;
    }
LABEL_22:
    int v30 = -1;
    char v31 = 1;
    if (RecordID == -1)
    {
      if (!a3) {
        goto LABEL_27;
      }
      CFStringRef v32 = @" StoreID IN (SELECT abs.RowID FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?) AND";
    }
    else
    {
      CFStringRef v32 = @" StoreID = ? AND";
    }
LABEL_26:
    CFStringAppend(MutableCopy, v32);
LABEL_27:
    CFStringAppend(MutableCopy, @" abp.ROWID IN ");
    if (a7)
    {
      CFStringAppend(MutableCopy, @"(SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH '");
      if (ABTokenListGetCount((uint64_t)v18) >= 1)
      {
        ABRecordID v58 = RecordID;
        uint64_t v33 = 0;
        do
        {
          if (v33) {
            CFStringAppend(MutableCopy, @" AND ");
          }
          CFStringAppend(MutableCopy, @"(");
          uint64_t v34 = 0;
          while (1)
          {
            do
            {
              CFStringAppend(MutableCopy, gFTSearchNameOnlyProperties[v34]);
              CFStringAppend(MutableCopy, @":' || ? || '");
              ++v34;
            }
            while (!v34);
            if (v34 == 14) {
              break;
            }
            CFStringAppend(MutableCopy, @" OR ");
          }
          CFStringAppend(MutableCopy, @""));
          ++v33;
        }
        while (ABTokenListGetCount((uint64_t)v18) > v33);
        ABRecordID RecordID = v58;
      }
      CFStringRef v35 = @" '");
    }
    else
    {
      CFStringRef v35 = @"(SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH ?) ";
    }
    CFStringAppend(MutableCopy, v35);
    if (v59) {
      CFStringRef v36 = @" ORDER BY LastSortLanguageIndex+0, LastSortSection, LastSort";
    }
    else {
      CFStringRef v36 = @" ORDER BY FirstSortLanguageIndex+0, FirstSortSection, FirstSort";
    }
    CFStringAppend(MutableCopy, v36);
    CFStringAppend(MutableCopy, @";");
    CPRecordStoreGetDatabase();
    uint64_t v37 = CPSqliteDatabaseStatementForReading();
    long long v38 = (void *)recordStoreContext(a1);
    if (v38) {
      long long v38 = (void *)*v38;
    }
    ABRegulatoryLogReadContactsData((uint64_t)v38);
    CFRelease(MutableCopy);
    if (v37)
    {
      long long v27 = *(sqlite3_stmt **)(v37 + 8);
      if (!v27)
      {
LABEL_66:
        CFMutableStringRef MutableCopy = 0;
        goto LABEL_67;
      }
      if (v31)
      {
        if (RecordID == -1)
        {
          if (!a3)
          {
            int v41 = 1;
            goto LABEL_54;
          }
          CFStringRef v56 = _ABCCreateUTF8StringFromCFString(a3);
          sqlite3_bind_text(v27, 1, (const char *)v56, -1, MEMORY[0x1E4F14838]);
LABEL_53:
          int v41 = 2;
LABEL_54:
          CFIndex v42 = *(sqlite3_stmt **)(v37 + 8);
          if (a7)
          {
            if (ABTokenListGetCount((uint64_t)v18) >= 1)
            {
              uint64_t v43 = 0;
              CFAllocatorRef v44 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
              do
              {
                CFMutableStringRef Mutable = CFStringCreateMutable(v44, 0);
                CFStringRef TokenAtIndex = (const __CFString *)ABTokenListGetTokenAtIndex((uint64_t)v18, v43);
                CFStringAppend(Mutable, @"##&");
                CFStringAppend(Mutable, TokenAtIndex);
                CFStringAppend(Mutable, @"* ");
                for (int i = 0; i != 14; ++i)
                {
                  CFRange v48 = _ABCCreateUTF8StringFromCFString(Mutable);
                  sqlite3_bind_text(v42, v41 + i, (const char *)v48, -1, MEMORY[0x1E4F14838]);
                }
                CFRelease(Mutable);
                ++v43;
                v41 += 14;
              }
              while (ABTokenListGetCount((uint64_t)v18) > v43);
            }
          }
          else
          {
            CFMutableStringRef v49 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 0);
            uint64_t Count = ABTokenListGetCount((uint64_t)v18);
            if (Count >= 1)
            {
              uint64_t v51 = Count;
              for (uint64_t j = 0; j != v51; ++j)
              {
                CFStringRef v53 = (const __CFString *)ABTokenListGetTokenAtIndex((uint64_t)v18, j);
                CFStringAppend(v49, @"##&");
                CFStringAppend(v49, v53);
                CFStringAppend(v49, @"* ");
              }
            }
            CFIndex v54 = _ABCCreateUTF8StringFromCFString(v49);
            sqlite3_bind_text(v42, v41, (const char *)v54, -1, MEMORY[0x1E4F14838]);
            CFRelease(v49);
          }
          long long v27 = (sqlite3_stmt *)CPRecordStoreProcessStatementWithPropertyIndices();
          CPSqliteStatementReset();
          goto LABEL_66;
        }
        long long v39 = *(sqlite3_stmt **)(v37 + 8);
        int v40 = RecordID;
      }
      else
      {
        long long v39 = *(sqlite3_stmt **)(v37 + 8);
        int v40 = v30;
      }
      sqlite3_bind_int(v39, 1, v40);
      goto LABEL_53;
    }
    goto LABEL_74;
  }
LABEL_75:
  long long v27 = 0;
  if (v18) {
    goto LABEL_67;
  }
LABEL_68:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v27;
}

sqlite3_stmt *ABCDBCopyArrayOfAllPeopleMatchingString(uint64_t a1, const __CFString *a2, int a3, const __CFString *a4, const void *a5, const void *a6)
{
  return ABCIteratePeopleMatchingStringWithCustomQueryPrefix(a1, a2, a4, a5, a6, a3, 0, 0, 0, 0, 0);
}

void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7, uint64_t a8, uint64_t a9)
{
  int v10 = a7;
  CFArrayRef v11 = a6;
  uint64_t v12 = a5;
  CGRect v110 = 0;
  uint64_t v111 = 0;
  int v109 = 1;
  if (a5) {
    *a5 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  if (a7) {
    *a7 = 0;
  }
  CFRange v16 = (uint64_t *)recordStoreContext(a1);
  if (v16) {
    uint64_t v17 = *v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t SearchCollator = ABAddressBookGetSearchCollator(v17);
  WordTokenizer = ABAddressBookGetWordTokenizer(v17);
  if (SearchCollator)
  {
    if (WordTokenizer)
    {
      CFArrayRef v20 = ABCCreateArrayOfTokenizationsBySeparatingWordsInCompositeName(WordTokenizer, a2, 1);
      if (v20)
      {
        CFArrayRef v21 = v20;
        if (CFArrayGetCount(v20) < 1)
        {
          CFArrayRef v98 = v21;
          ABRecordID v29 = 0;
          CFArrayRef v30 = 0;
          CFArrayRef theArray = 0;
          CFArrayRef v31 = 0;
LABEL_87:
          if (ABLogContactsSearch())
          {
            if (ABDiagnosticsEnabled())
            {
              ABPersonNameForProperty(a4);
              _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4465, 0, @"Searching for %@ with property %i (%@):", v61, v62, v63, (uint64_t)a2);
            }
            CFDataRef v97 = v29;
            CFArrayRef v64 = theArray;
            if (v31 && CFArrayGetCount(v31) >= 1)
            {
              if (CFArrayGetCount(v31) >= 1)
              {
                CFIndex v65 = 0;
                if (v30) {
                  BOOL v66 = theArray == 0;
                }
                else {
                  BOOL v66 = 1;
                }
                int v67 = !v66;
                do
                {
                  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v31, v65);
                  CFMutableStringRef v69 = ABPersonCopyCompositeName(ValueAtIndex);
                  BOOL v70 = ABDiagnosticsEnabled();
                  if (v67)
                  {
                    if (v70)
                    {
                      ABRecordGetRecordID(ValueAtIndex);
                      CFArrayGetValueAtIndex(v64, v65);
                      CFArrayGetValueAtIndex(v30, v65);
                      CFArrayRef v64 = theArray;
                      _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4471, 0, @"%@ (%i) - %@ (%i)", v71, v72, v73, (uint64_t)v69);
                    }
                  }
                  else if (v30)
                  {
                    if (v70)
                    {
                      ABRecordGetRecordID(ValueAtIndex);
                      CFArrayGetValueAtIndex(v30, v65);
                      _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4473, 0, @"%@ (%i) - identifier %i", v74, v75, v76, (uint64_t)v69);
                    }
                  }
                  else if (v64)
                  {
                    if (v70)
                    {
                      ABRecordGetRecordID(ValueAtIndex);
                      CFArrayGetValueAtIndex(v64, v65);
                      _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4475, 0, @"%@ (%i) - %@", v77, v78, v79, (uint64_t)v69);
                    }
                  }
                  else if (v70)
                  {
                    ABRecordGetRecordID(ValueAtIndex);
                    _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4477, 0, @"%@ (%i)", v80, v81, v82, (uint64_t)v69);
                  }
                  if (v69) {
                    CFRelease(v69);
                  }
                  ++v65;
                }
                while (v65 < CFArrayGetCount(v31));
              }
            }
            else if (ABDiagnosticsEnabled())
            {
              _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4482, 0, @"No results found.", v83, v84, v85, v89);
            }
            ABRecordID v29 = v97;
            if (ABDiagnosticsEnabled()) {
              _ABLog2(6, (uint64_t)"void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)", 4484, 0, @"------", v86, v87, v88, v89);
            }
          }
          if (v12)
          {
            *uint64_t v12 = v31;
          }
          else if (v31)
          {
            CFRelease(v31);
          }
          if (v11) {
            *CFArrayRef v11 = v30;
          }
          CFArrayRef v21 = v98;
          if (v10) {
            *int v10 = theArray;
          }
          goto LABEL_126;
        }
        CFTypeRef v108 = 0;
        ColumnListWithAliasAndExtraColumns = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
        int v23 = a4;
        uint64_t v24 = ColumnListWithAliasAndExtraColumns;
        int v99 = v23;
        BOOL v25 = v23 < 0 || v11 == 0;
        int v26 = !v25;
        if (v25)
        {
          CFStringRef v28 = @" FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE";
        }
        else
        {
          if (v10) {
            CFStringRef v27 = @", identifier, abv.value, abv.label";
          }
          else {
            CFStringRef v27 = @", identifier";
          }
          CFStringAppend(ColumnListWithAliasAndExtraColumns, v27);
          CFStringRef v28 = @" FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID JOIN ABMultiValue abv ON abp.ROWID = abv.record_id WHERE";
        }
        CFStringAppend(v24, v28);
        if (!a1)
        {
          ABRecordID v29 = v24;
          goto LABEL_126;
        }
        appendTokenizations(a2, v21, SearchCollator, v24, &v110, &v111, 0, 0);
        ABRecordID v29 = v24;
        if (v111 < 1)
        {
          CFArrayRef v98 = v21;
          CFArrayRef v30 = 0;
          CFArrayRef theArray = 0;
          CFArrayRef v31 = 0;
          a4 = v99;
LABEL_85:
          if (v108) {
            CFRelease(v108);
          }
          goto LABEL_87;
        }
        uint64_t v106 = a8;
        uint64_t v107 = a9;
        CPRecordStoreGetDatabase();
        uint64_t v32 = CPSqliteDatabaseConnectionForWriting();
        if (a8) {
          BOOL v33 = v32 == 0;
        }
        else {
          BOOL v33 = 1;
        }
        int v34 = !v33;
        int v92 = v34;
        a4 = v99;
        if (!v33) {
          CPSqliteConnectionEnableProgressHandlerCallback();
        }
        if (v26) {
          CFStringAppend(v29, @" AND abv.property+0 = ?");
        }
        if (a3) {
          CFStringRef v35 = @" ORDER BY LastSortLanguageIndex+0, LastSortSection, LastSort";
        }
        else {
          CFStringRef v35 = @" ORDER BY FirstSortLanguageIndex+0, FirstSortSection, FirstSort";
        }
        CFStringAppend(v29, v35);
        if (v11) {
          CFStringAppend(v29, @", record_id, identifier");
        }
        CFStringAppend(v29, @";");
        BOOL v96 = v29;
        uint64_t v36 = CPSqliteConnectionStatementForSQL();
        if (v36)
        {
          uint64_t v37 = v36;
          if (*(void *)(v36 + 8))
          {
            bindTokenizations(v36, v110, &v109);
            CFArrayRef v98 = v21;
            if (!v11)
            {
              CFArrayRef v31 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
              CPSqliteStatementReset();
              CFArrayRef v30 = 0;
              CFArrayRef theArray = 0;
              ABRecordID v29 = v96;
LABEL_83:
              if (v92) {
                CPSqliteConnectionDisableProgressHandlerCallback();
              }
              goto LABEL_85;
            }
            BOOL v94 = v12;
            int v38 = v109;
            sqlite3_bind_int(*(sqlite3_stmt **)(v37 + 8), v109, v99);
            int v109 = v38 + 1;
            CFMutableArrayRef v103 = 0;
            CFMutableArrayRef v104 = 0;
            CFArrayRef v105 = 0;
            CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
            if (Mutable)
            {
              CFArrayRef v30 = Mutable;
              CFMutableArrayRef v103 = Mutable;
              if (v10)
              {
                CFMutableArrayRef v41 = CFArrayCreateMutable(v39, 0, MEMORY[0x1E4F1D510]);
                if (!v41) {
                  goto LABEL_54;
                }
                CFArrayRef v42 = v41;
                CFMutableArrayRef v104 = v41;
                CFArrayRef v105 = CFArrayCreateMutable(v39, 0, 0);
                if (!v105) {
                  goto LABEL_54;
                }
              }
              else
              {
                CFArrayRef v42 = 0;
                CFMutableArrayRef v104 = 0;
                CFArrayRef v105 = 0;
              }
              CFArrayRef theArray = v42;
              CFArrayRef v31 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
              CPSqliteStatementReset();
              ABRecordID v29 = v96;
              if (v10)
              {
                CPRecordStoreGetDatabase();
                uint64_t v43 = CPSqliteDatabaseStatementForReading();
                CFAllocatorRef v44 = (void *)recordStoreContext(a1);
                if (v44) {
                  CFAllocatorRef v44 = (void *)*v44;
                }
                ABRegulatoryLogReadContactsData((uint64_t)v44);
                CFDictionaryRef v45 = CFDictionaryCreateMutable(v39, 0, 0, MEMORY[0x1E4F1D540]);
                if (v43)
                {
                  CPSqliteStatementSendResults();
                  CPSqliteStatementReset();
                  CPSqliteDatabaseReleaseSqliteStatement();
                }
                if (v45)
                {
                  uint64_t v90 = v10;
                  CFIndex Count = CFArrayGetCount(v31);
                  if (Count >= 1)
                  {
                    CFIndex v46 = 0;
                    int64_t v47 = 0;
                    CFRange v48 = 0;
                    uint64_t v91 = v11;
                    do
                    {
                      CFMutableStringRef v49 = CFArrayGetValueAtIndex(v31, v46);
                      int v57 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 32);
                      if ((v57 - 262) <= 0xFFFFFFFD)
                      {
                        unsigned int v102 = 0;
                        unsigned int v102 = CFArrayGetValueAtIndex(v30, v46);
                        CFStringRef value = (void *)CFArrayGetValueAtIndex(theArray, v46);
                        signed int v58 = CFArrayGetValueAtIndex(v105, v46);
                        CFDictionaryRef v59 = v45;
                        int v60 = CFDictionaryGetValue(v45, (const void *)v58);
                        if (v49 == v48)
                        {
                          if (v47) {
                            ABCMultiValueInsertAndCreateIdentifier(v47, value, v60, 0, 0, (int *)&v102, 0);
                          }
                        }
                        else
                        {
                          if (v47)
                          {
                            ABCRecordSetContents();
                            CFRelease(v47);
                          }
                          if (CPRecordGetCachedProperty())
                          {
                            int64_t v47 = 0;
                          }
                          else
                          {
                            int64_t v47 = (CFMutableArrayRef *)ABCMultiValueCreateMutable(v57);
                            ABCMultiValueInsertAndCreateIdentifier(v47, value, v60, 0, 0, (int *)&v102, 0);
                          }
                          CFArrayRef v11 = v91;
                        }
                        CFDictionaryRef v45 = v59;
                        a4 = v99;
                      }
                      ++v46;
                      CFRange v48 = v49;
                    }
                    while (Count != v46);
                    if (v47)
                    {
                      ABMultiValueSetImmutable((uint64_t)v47, v50, v51, v52, v53, v54, v55, v56, v89);
                      ABCRecordSetContents();
                      CFRelease(v47);
                    }
                  }
                  CFRelease(v45);
                  int v10 = v90;
                  ABRecordID v29 = v96;
                }
              }
              if (v105) {
                CFRelease(v105);
              }
              uint64_t v12 = v94;
              goto LABEL_83;
            }
          }
        }
        else
        {
          CFShow(@"error");
        }
LABEL_54:
        ABRecordID v29 = v96;
LABEL_126:
        CFRelease(v21);
        if (v110) {
          releaseTokenizationSortKeys(v110);
        }
        if (v29) {
          CFRelease(v29);
        }
      }
    }
  }
}

uint64_t _copyPeopleAndMultiValuePropertiesCancellationCallback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))a2)(*(void *)(a2 + 8));
}

uint64_t ABCDBContextCopyPeopleAndIdentifiersMatchingName(uint64_t a1, __CFArray **a2)
{
  uint64_t v4 = *a2;
  int v5 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  int v6 = v5 - 1;
  if (a2[1])
  {
    int v7 = v5;
    int v8 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v6);
    CFArrayAppendValue(a2[2], (const void *)v8);
    CFMutableArrayRef v9 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v7 - 2);
    if (v9) {
      CFStringRef v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v9, 0x8000100u);
    }
    else {
      CFStringRef v10 = &stru_1EF03E278;
    }
    CFArrayAppendValue(a2[1], v10);
    CFRelease(v10);
    int v6 = v7 - 3;
  }
  int v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v6);
  CFArrayAppendValue(v4, (const void *)v11);
  return 2;
}

void ABCDBContextCopyArrayOfPhoneNumbersLabelAndPeopleInRange(uint64_t a1, int a2, int a3, void *a4, void *a5, void *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  ColumnListWithAliasAndExtraColumns = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
  CFStringAppend(ColumnListWithAliasAndExtraColumns, @", abv.value, abl.value from ABPerson abp JOIN ABMultiValue abv ON abp.ROWint ID = abv.record_id LEFT OUTER JOIN ABMultiValueLabel abl ON abv.label = abl.ROWID WHERE abv.property = ? LIMIT ? OFFSET ?;");
  CFDictionaryGetCount(0);
  CPRecordStoreGetDatabase();
  uint64_t v13 = CPSqliteDatabaseStatementForReading();
  int v14 = (void *)recordStoreContext(a1);
  if (v14) {
    int v14 = (void *)*v14;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v14);
  CFRelease(ColumnListWithAliasAndExtraColumns);
  if (v13 && (uint64_t v15 = *(sqlite3_stmt **)(v13 + 8)) != 0)
  {
    sqlite3_bind_int(v15, 1, kABPersonPhoneProperty);
    sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 3, a2);
    CFRange v16 = (const void *)CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
  }
  else
  {
    CFRange v16 = 0;
  }
  if (v16)
  {
    if (CFArrayGetCount((CFArrayRef)v16) < 1)
    {
      CFRelease(v16);
    }
    else
    {
      *a6 = v16;
      *a4 = 0;
      *a5 = 0;
    }
  }
}

uint64_t phoneNumbersAndLabelRowHandler(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8)) {
    *(void *)(a2 + 8) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  if (!*(void *)(a2 + 16)) {
    *(void *)(a2 + 16) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)a2);
  CFStringRef v5 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), v5);
  CFRelease(v5);
  int v6 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)a2 + 1);
  if (v6)
  {
    CFStringRef v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v7);
    CFRelease(v7);
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), (const void *)*MEMORY[0x1E4F1D260]);
  }
  return 2;
}

uint64_t multivalueSearchRowHandlerWithLabels(uint64_t a1, __CFArray ***a2)
{
  return 0;
}

uint64_t _PersonUIDWithValueForMultivalueProperty(uint64_t a1, int a2, const __CFString *a3, uint64_t a4)
{
  v20[6] = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  CFIndex usedBufLen = 0;
  CPRecordStoreGetDatabase();
  uint64_t v8 = CPSqliteDatabaseStatementForReading();
  CFMutableArrayRef v9 = (void *)recordStoreContext(a1);
  if (v9) {
    CFMutableArrayRef v9 = (void *)*v9;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v9);
  if (!v8) {
    return 0;
  }
  CFStringRef v10 = *(sqlite3_stmt **)(v8 + 8);
  if (!v10) {
    return 0;
  }
  sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 1, a2);
  CFIndex Length = CFStringGetLength(a3);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  uint64_t v13 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xC8162227uLL);
  v21.location = 0;
  v21.length = Length;
  CFStringGetBytes(a3, v21, 0x8000100u, 0, 0, v13, MaximumSizeForEncoding, &usedBufLen);
  v13[usedBufLen] = 0;
  sqlite3_bind_text(v10, 2, (const char *)v13, -1, MEMORY[0x1E4F14838]);
  v20[0] = 0;
  v20[1] = ABCDBContextFindMultivalueSetter;
  v20[2] = &v19;
  v20[3] = 1;
  v20[4] = ABCDBContextFindMultivalueSetter;
  v20[5] = a4;
  *(void *)&long long v17 = v20;
  DWORD2(v17) = 2;
  uint64_t v18 = 0;
  CPSqliteStatementSendResults();
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  return v19;
}

uint64_t ABCDBContextFindMultivalueSetter(uint64_t a1, _DWORD *a2, int a3)
{
  if (a2) {
    *a2 = a3;
  }
  return 1;
}

uint64_t ABCDBContextFindMultivalueCallback()
{
  return 1;
}

CFMutableArrayRef ABCDBContextCopyAllLabelsForProperty(uint64_t a1, uint64_t a2)
{
  CPRecordStoreGetDatabase();
  uint64_t v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a2 == -1) {
    CFStringRef v5 = @"SELECT value FROM ABMultiValueLabel;";
  }
  else {
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"select mvl.value from ABMultiValueLabel mvl where ROWID in (select distinct label from ABMultiValue WHERE property = %i);",
  }
           a2);
  uint64_t v6 = CPSqliteDatabaseStatementForReading();
  CFStringRef v7 = (void *)recordStoreContext(a1);
  if (v7) {
    CFStringRef v7 = (void *)*v7;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v7);
  if (a2 != -1) {
    CFRelease(v5);
  }
  if (!v6) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*v4, 0, MEMORY[0x1E4F1D510]);
  CPSqliteStatementSendResults();
  CPSqliteStatementReset();
  CPSqliteDatabaseReleaseSqliteStatement();
  return Mutable;
}

uint64_t addStringToArray(uint64_t a1, __CFArray *a2)
{
  uint64_t v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v3, 0x8000100u);
  CFArrayAppendValue(a2, v4);
  CFRelease(v4);
  return 0;
}

uint64_t ABCDBContextDeleteLabel(uint64_t a1, const __CFString *a2)
{
  CPRecordStoreGetDatabase();
  uint64_t result = CPSqliteDatabaseStatementForWriting();
  if (a1)
  {
    uint64_t v5 = result;
    if (result)
    {
      if (*(void *)(result + 8))
      {
        CFIndex usedBufLen = 0;
        CFIndex Length = CFStringGetLength(a2);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        uint64_t v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x3CB0C4DCuLL);
        v13.location = 0;
        v13.length = Length;
        CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen);
        v8[usedBufLen] = 0;
        sqlite3_bind_text(*(sqlite3_stmt **)(v5 + 8), 1, (const char *)v8, -1, MEMORY[0x1E4F14838]);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
        CPSqliteDatabaseReleaseSqliteStatement();
        uint64_t v9 = recordStoreContext(a1);
        if (v9)
        {
          if (*(void *)v9) {
            *(_DWORD *)(*(void *)v9 + 376) |= 0x1C000u;
          }
        }
      }
      uint64_t v10 = recordStoreContext(a1);
      if (v10)
      {
        int v11 = *(__CFDictionary **)(v10 + 8);
        if (v11) {
          CFDictionaryRemoveValue(v11, a2);
        }
      }
      return CPRecordStoreInvalidateCachedInstancesOfClass();
    }
  }
  return result;
}

uint64_t _clearCachedMultivalues()
{
  uint64_t v0 = ABCPersonClass;
  if (*((int *)ABCPersonClass + 18) >= 1)
  {
    uint64_t v1 = 0;
    uint64_t v2 = 32;
    do
    {
      if (*(unsigned char *)(*((void *)v0 + 10) + v2 + 1))
      {
        CPRecordUnloadProperty();
        uint64_t v0 = ABCPersonClass;
      }
      ++v1;
      v2 += 40;
    }
    while (v1 < *((int *)v0 + 18));
  }
  return 0;
}

void ABCDBContextMultiValueWillChange(const void *a1, int a2, uint64_t a3)
{
  if (!a1) {
    return;
  }
  int ID = CPRecordGetID();
  if (ID == -1) {
    return;
  }
  int v7 = ID;
  uint64_t Store = CPRecordGetStore();
  if (!Store) {
    return;
  }
  Cacheduint64_t Property = CPRecordGetCachedProperty();
  uint64_t v9 = (CFArrayRef *)CachedProperty;
  if (CachedProperty)
  {
    CFIndex Count = ABCMultiValueGetCount(CachedProperty);
    if (a3)
    {
LABEL_6:
      CFIndex v11 = ABCMultiValueGetCount(a3);
      goto LABEL_9;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a3) {
      goto LABEL_6;
    }
  }
  CFIndex v11 = 0;
LABEL_9:
  if (Count >= 1)
  {
    uint64_t v12 = 0;
    CFIndex v13 = 0;
    int v23 = (void *)a2;
    CFStringRef value = (void *)v7;
    ABPropertyID v14 = kABPersonInternalUUIDProperty;
    do
    {
      int IdentifierAtIndex = ABCMultiValueGetIdentifierAtIndex((uint64_t)v9, v13);
      if (v11 < 1)
      {
LABEL_15:
        if (!v12)
        {
          uint64_t v12 = recordStoreContext(Store);
          if (!v12) {
            return;
          }
        }
        long long v17 = *(__CFArray **)(v12 + 24);
        if (!v17)
        {
          *(void *)(v12 + 24) = CFArrayCreateMutable(0, 0, 0);
          *(void *)(v12 + 32) = CFArrayCreateMutable(0, 0, 0);
          *(void *)(v12 + 40) = CFArrayCreateMutable(0, 0, 0);
          uint64_t v18 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          *(void *)(v12 + 48) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, v18);
          *(void *)(v12 + 56) = Mutable;
          long long v17 = *(__CFArray **)(v12 + 24);
          if (!v17 || !*(void *)(v12 + 32) || !*(void *)(v12 + 40) || !*(void *)(v12 + 48) || !Mutable) {
            return;
          }
        }
        CFArrayAppendValue(v17, value);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 32), v23);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 40), (const void *)IdentifierAtIndex);
        CFTypeRef v20 = ABRecordCopyValue(a1, v14);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 48), v20);
        CFRelease(v20);
        CFRange v21 = ABCMultiValueCopyUUIDAtIndex(v9, v13);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 56), v21);
        CFRelease(v21);
      }
      else
      {
        CFIndex v16 = 0;
        while (IdentifierAtIndex != ABCMultiValueGetIdentifierAtIndex(a3, v16))
        {
          if (v11 == ++v16) {
            goto LABEL_15;
          }
        }
      }
      ++v13;
    }
    while (v13 != Count);
  }
}

void ABCDBContextLogChangeForPerson(uint64_t a1, ABRecordRef record, unsigned int a3)
{
  if (record)
  {
    ABRecordID RecordID = ABRecordGetRecordID(record);
    CFTypeRef v7 = ABRecordCopyValue(record, kABPersonInternalUUIDProperty);
    _appendToPersonChangeHistory(a1, a3, RecordID, (uint64_t)v7, 0, 0);
    if (v7)
    {
      CFRelease(v7);
    }
  }
  else
  {
    _appendToPersonChangeHistory(a1, a3, -1, 0, 0, 0);
  }
}

void _appendToPersonChangeHistory(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    uint64_t v11 = recordStoreContext(a1);
    uint64_t v12 = *(__CFArray **)(v11 + 64);
    if (v12) {
      goto LABEL_8;
    }
    *(void *)(v11 + 64) = CFArrayCreateMutable(0, 0, 0);
    *(void *)(v11 + 72) = CFArrayCreateMutable(0, 0, 0);
    CFIndex v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    *(void *)(v11 + 80) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v11 + 88) = CFArrayCreateMutable(0, 0, v13);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, v13);
    *(void *)(v11 + 96) = Mutable;
    uint64_t v12 = *(__CFArray **)(v11 + 64);
    if (v12)
    {
      if (*(void *)(v11 + 72) && *(void *)(v11 + 80) && *(void *)(v11 + 88) && Mutable)
      {
LABEL_8:
        CFArrayAppendValue(v12, (const void *)a3);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 72), (const void *)a2);
        uint64_t v15 = *(__CFArray **)(v11 + 80);
        uint64_t v16 = *MEMORY[0x1E4F5A2A8];
        long long v17 = (uint64_t (**)(uint64_t, uint64_t))(*MEMORY[0x1E4F5A2A8] + 16);
        uint64_t v18 = (const void *)(*v17)(*MEMORY[0x1E4F5A2A8], a4);
        CFArrayAppendValue(v15, v18);
        unsigned int v19 = *(__CFArray **)(v11 + 88);
        CFTypeRef v20 = (const void *)(*v17)(v16, a5);
        CFArrayAppendValue(v19, v20);
        CFRange v21 = *(__CFArray **)(v11 + 96);
        CFStringRef v22 = (const void *)(*v17)(v16, a6);
        CFArrayAppendValue(v21, v22);
      }
    }
  }
}

void ABCDBContextLogChangeForUnifiedPerson(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

void ABCDBContextLogChangeForLinkingPersons(uint64_t a1, ABRecordRef record, const void *a3, uint64_t a4)
{
  ABRecordID RecordID = ABRecordGetRecordID(record);
  ABPropertyID v9 = kABPersonInternalUUIDProperty;
  CFTypeRef v10 = ABRecordCopyValue(record, kABPersonInternalUUIDProperty);
  CFTypeRef v11 = ABRecordCopyValue(a3, v9);
  _appendToPersonChangeHistory(a1, 6u, RecordID, (uint64_t)v10, (uint64_t)v11, a4);
  CFRelease(v10);
  CFRelease(v11);
}

void ABCDBContextSaveCallback(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t Context = CPRecordStoreGetContext();
      if (Context)
      {
        uint64_t v5 = (CFArrayRef *)Context;
        uint64_t v42 = a2;
        int v6 = CPRecordStoreGetLastSequenceNumber() + 1;
        if (v5[3] && ABChangeHistoryHasSyncAgentClient(a1))
        {
          uint64_t v7 = CPSqliteConnectionStatementForSQL();
          if (v7)
          {
            uint64_t v8 = v7;
            CFIndex Count = CFArrayGetCount(v5[3]);
            if (Count >= 1)
            {
              for (CFIndex i = 0; i != Count; ++i)
              {
                int ValueAtIndex = CFArrayGetValueAtIndex(v5[3], i);
                int v11 = CFArrayGetValueAtIndex(v5[4], i);
                int v12 = CFArrayGetValueAtIndex(v5[5], i);
                CFStringRef v13 = (const __CFString *)CFArrayGetValueAtIndex(v5[6], i);
                CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex(v5[7], i);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 1, ValueAtIndex);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, v11);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 3, v12);
                sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 4, v6);
                uint64_t v15 = *(sqlite3_stmt **)(v8 + 8);
                uint64_t v16 = _ABCCreateUTF8StringFromCFString(v13);
                long long v17 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
                sqlite3_bind_text(v15, 5, (const char *)v16, -1, MEMORY[0x1E4F14838]);
                uint64_t v18 = *(sqlite3_stmt **)(v8 + 8);
                unsigned int v19 = _ABCCreateUTF8StringFromCFString(v14);
                sqlite3_bind_text(v18, 6, (const char *)v19, -1, v17);
                if (CPSqliteStatementPerform() != 101)
                {
                  CFTypeRef v20 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v21 = sqlite3_errcode(*(sqlite3 **)(v42 + 8));
                  CFStringRef v22 = sqlite3_errmsg(*(sqlite3 **)(v42 + 8));
                  fprintf(v20, "Error %d performing multivalue delete log statement: %s\n", v21, v22);
                }
                CPSqliteStatementReset();
              }
            }
          }
          else
          {
            int v23 = (FILE *)*MEMORY[0x1E4F143C8];
            int v24 = sqlite3_errcode(*(sqlite3 **)(v42 + 8));
            BOOL v25 = sqlite3_errmsg(*(sqlite3 **)(v42 + 8));
            fprintf(v23, "Error %d preparing multivalue delete log statement: %s\n", v24, v25);
          }
        }
        CFStringRef v26 = (const __CFString *)*((void *)*v5 + 43);
        if (!v26)
        {
          CFStringRef v26 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
          if (!v26) {
            CFStringRef v26 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "processName");
          }
        }
        ABChangeHistoryAssociateSequenceNumberWithClient(*((double *)*v5 + 44), v42, v6, v26);
        CFArrayRef v27 = v5[8];
        if (v27)
        {
          CFIndex v28 = CFArrayGetCount(v27);
          if (v28 >= 1)
          {
            CFIndex v29 = 0;
            uint64_t v30 = *MEMORY[0x1E4F5A2B0];
            CFIndex v43 = v28;
            do
            {
              int v31 = CFArrayGetValueAtIndex(v5[8], v29);
              int v32 = CFArrayGetValueAtIndex(v5[9], v29);
              BOOL v33 = CFArrayGetValueAtIndex(v5[10], v29);
              int v34 = (void *)(*(uint64_t (**)(uint64_t, const void *))(v30 + 16))(v30, v33);
              CFStringRef v35 = CFArrayGetValueAtIndex(v5[11], v29);
              uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, const void *))(v30 + 16))(v30, v35);
              uint64_t v37 = CFArrayGetValueAtIndex(v5[12], v29);
              int v38 = (void *)(*(uint64_t (**)(uint64_t, const void *))(v30 + 16))(v30, v37);
              ABChangeHistoryInsertPersonChangeRecord(a1, v31, v32, v6, 0, 0, -1, -1, v34, v36, v38);
              ++v29;
            }
            while (v43 != v29);
          }
        }
        CFArrayRef v39 = v5[3];
        if (v39)
        {
          CFRelease(v39);
          v5[3] = 0;
          CFRelease(v5[4]);
          v5[4] = 0;
          CFRelease(v5[5]);
          void v5[5] = 0;
          CFRelease(v5[6]);
          v5[6] = 0;
          CFRelease(v5[7]);
          v5[7] = 0;
        }
        CFArrayRef v40 = v5[8];
        if (v40)
        {
          CFRelease(v40);
          v5[8] = 0;
          CFRelease(v5[9]);
          v5[9] = 0;
          CFRelease(v5[10]);
          v5[10] = 0;
          CFRelease(v5[11]);
          v5[11] = 0;
          CFRelease(v5[12]);
          v5[12] = 0;
        }
      }
    }
  }
}

uint64_t *ABCDBContextPreCommitSaveCallback(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t)result;
      uint64_t result = (uint64_t *)CPRecordStoreGetContext();
      if (result)
      {
        uint64_t result = (uint64_t *)recordStoreContext(v2);
        if (result)
        {
          uint64_t v3 = *result;
          if (*result)
          {
            if ((*(_DWORD *)(v3 + 376) & 0x7E000) != 0)
            {
              uint64_t result = (uint64_t *)CPRecordStoreGetLastSequenceNumber();
              unsigned int v4 = *(_DWORD *)(v3 + 376);
              if ((v4 & 0x4000) != 0)
              {
                uint64_t result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
                unsigned int v4 = *(_DWORD *)(v3 + 376) & 0xFFFFBFFF;
                *(_DWORD *)(v3 + 376) = v4;
                if ((v4 & 0x8000) == 0)
                {
LABEL_9:
                  if ((v4 & 0x10000) == 0) {
                    goto LABEL_10;
                  }
                  goto LABEL_17;
                }
              }
              else if ((v4 & 0x8000) == 0)
              {
                goto LABEL_9;
              }
              uint64_t result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              unsigned int v4 = *(_DWORD *)(v3 + 376) & 0xFFFF7FFF;
              *(_DWORD *)(v3 + 376) = v4;
              if ((v4 & 0x10000) == 0)
              {
LABEL_10:
                if ((v4 & 0x2000) == 0) {
                  goto LABEL_11;
                }
                goto LABEL_18;
              }
LABEL_17:
              uint64_t result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              unsigned int v4 = *(_DWORD *)(v3 + 376) & 0xFFFEFFFF;
              *(_DWORD *)(v3 + 376) = v4;
              if ((v4 & 0x2000) == 0)
              {
LABEL_11:
                if ((v4 & 0x20000) == 0) {
                  goto LABEL_12;
                }
                goto LABEL_19;
              }
LABEL_18:
              uint64_t result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              unsigned int v4 = *(_DWORD *)(v3 + 376) & 0xFFFFDFFF;
              *(_DWORD *)(v3 + 376) = v4;
              if ((v4 & 0x20000) == 0)
              {
LABEL_12:
                if ((v4 & 0x40000) == 0) {
                  return result;
                }
                goto LABEL_13;
              }
LABEL_19:
              uint64_t result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              unsigned int v5 = *(_DWORD *)(v3 + 376) & 0xFFFDFFFF;
              *(_DWORD *)(v3 + 376) = v5;
              if ((v5 & 0x40000) == 0) {
                return result;
              }
LABEL_13:
              uint64_t result = (uint64_t *)CPSqliteConnectionSetIntegerForProperty();
              *(_DWORD *)(v3 + 376) &= ~0x40000u;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ABCDBContextGetMultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer(uint64_t a1, int a2, int a3, const char *a4, __CFArray **a5, __CFArray **a6, __CFArray **a7, CFMutableArrayRef *a8, CFMutableArrayRef *a9)
{
  uint64_t v9 = 0xFFFFFFFFLL;
  if (a1 && a5 && a6 && a7 && CPRecordStoreGetDatabase())
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFStringAppend(Mutable, @"SELECT ROWID, record_id, property_id, identifier, sequence_number");
    uint64_t v37 = a8;
    if (a8) {
      BOOL v17 = a9 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = !v17;
    if (!v17) {
      CFStringAppend(Mutable, @", record_uid, identifier_uid");
    }
    CFStringAppend(Mutable, @" FROM ABPersonMultiValueDeletes");
    BOOL v20 = a2 == -1 || a3 == -1 || a4 == 0;
    int v21 = !v20;
    if (!v20) {
      CFStringAppend(Mutable, @" WHERE record_id IN (SELECT ROWID FROM ABPerson WHERE Storeint ID = ?) AND sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)");
    }
    CFStringAppend(Mutable, @" ORDER BY ROWID ASC;");
    uint64_t v22 = CPSqliteDatabaseStatementForReading();
    int v23 = (void *)recordStoreContext(a1);
    if (v23) {
      int v23 = (void *)*v23;
    }
    ABRegulatoryLogReadContactsData((uint64_t)v23);
    if (v22 && (int v24 = *(sqlite3_stmt **)(v22 + 8)) != 0)
    {
      if (v21)
      {
        sqlite3_bind_int(v24, 1, a2);
        sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 2, a3);
        sqlite3_bind_text(*(sqlite3_stmt **)(v22 + 8), 3, a4, -1, 0);
      }
      *a5 = CFArrayCreateMutable(v15, 0, 0);
      *a6 = CFArrayCreateMutable(v15, 0, 0);
      *a7 = CFArrayCreateMutable(v15, 0, 0);
      if (v18)
      {
        BOOL v25 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        *uint64_t v37 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        *a9 = CFArrayCreateMutable(0, 0, v25);
      }
      if (sqlite3_step(*(sqlite3_stmt **)(v22 + 8)) == 100)
      {
        do
        {
          CFStringRef v26 = *a5;
          int v27 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 1);
          CFArrayAppendValue(v26, (const void *)v27);
          CFIndex v28 = *a6;
          int v29 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 2);
          CFArrayAppendValue(v28, (const void *)v29);
          uint64_t v30 = *a7;
          int v31 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 3);
          CFArrayAppendValue(v30, (const void *)v31);
          if (v18)
          {
            int v32 = sqlite3_column_text(*(sqlite3_stmt **)(v22 + 8), 5);
            if (v32)
            {
              CFStringRef v33 = CFStringCreateWithCString(0, (const char *)v32, 0x8000100u);
              CFArrayAppendValue(*v37, v33);
              CFRelease(v33);
            }
            int v34 = sqlite3_column_text(*(sqlite3_stmt **)(v22 + 8), 6);
            if (v34)
            {
              CFStringRef v35 = CFStringCreateWithCString(0, (const char *)v34, 0x8000100u);
              CFArrayAppendValue(*a9, v35);
              CFRelease(v35);
            }
          }
          uint64_t v9 = sqlite3_column_int(*(sqlite3_stmt **)(v22 + 8), 4);
        }
        while (sqlite3_step(*(sqlite3_stmt **)(v22 + 8)) == 100);
      }
      else
      {
        uint64_t v9 = 0xFFFFFFFFLL;
      }
      CPSqliteStatementReset();
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v9;
}

sqlite3_stmt *ABCDBContextDeleteMultiValueDeletesInSourceToSequenceNumber(sqlite3_stmt *result, int a2, int a3)
{
  if (result)
  {
    uint64_t result = (sqlite3_stmt *)CPRecordStoreGetDatabase();
    if (result)
    {
      uint64_t result = (sqlite3_stmt *)CPSqliteDatabaseStatementForWriting();
      if (result)
      {
        unsigned int v5 = result;
        uint64_t result = (sqlite3_stmt *)*((void *)result + 1);
        if (result)
        {
          sqlite3_bind_int(result, 1, a3);
          if (a2 != -1) {
            sqlite3_bind_int(*((sqlite3_stmt **)v5 + 1), 2, a2);
          }
          int v6 = CPSqliteStatementPerform();
          CPSqliteStatementReset();
          return (sqlite3_stmt *)(v6 == 101);
        }
      }
    }
  }
  return result;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray *a4, const __CFArray *a5)
{
  if (a3) {
    int UniqueId = ABCRecordGetUniqueId(a3);
  }
  else {
    int UniqueId = -1;
  }
  CPRecordStoreGetDatabase();
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  CFTypeRef v10 = SelectPrefix;
  if (UniqueId == -1)
  {
    if (!a4 || !a5) {
      goto LABEL_17;
    }
    CFStringRef v11 = @" WHERE ";
  }
  else
  {
    CFStringAppend(SelectPrefix, @" WHERE ");
    CFStringAppend(v10, @"StoreID == ? ");
    if (!a4 || !a5) {
      goto LABEL_17;
    }
    CFStringRef v11 = @" AND ";
  }
  CFStringAppend(v10, v11);
  CFIndex Count = CFArrayGetCount(a4);
  if (Count != CFArrayGetCount(a5)) {
    ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates_cold_1();
  }
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a4, i);
      CFStringAppend(v10, ValueAtIndex);
      if (i < Count - 1) {
        CFStringAppend(v10, @" AND ");
      }
    }
  }
LABEL_17:
  CFStringAppend(v10, @";");
  uint64_t v15 = CPSqliteDatabaseStatementForReading();
  uint64_t v16 = (void *)recordStoreContext(a1);
  if (v16) {
    uint64_t v16 = (void *)*v16;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v16);
  if (v15)
  {
    BOOL v17 = *(sqlite3_stmt **)(v15 + 8);
    if (v17)
    {
      if (UniqueId == -1)
      {
        int v18 = 1;
        if (!a4)
        {
LABEL_37:
          uint64_t v19 = CPRecordStoreProcessStatementWithPropertyIndices();
          CPSqliteStatementReset();
          goto LABEL_38;
        }
      }
      else
      {
        sqlite3_bind_int(v17, 1, UniqueId);
        int v18 = 2;
        if (!a4) {
          goto LABEL_37;
        }
      }
      if (a5)
      {
        CFIndex v20 = CFArrayGetCount(a5);
        if (v20 >= 1)
        {
          CFIndex v21 = v20;
          CFIndex v22 = 0;
          CFIndex v34 = v20;
          CFArrayRef v35 = a5;
          do
          {
            CFStringRef v23 = (const __CFString *)CFArrayGetValueAtIndex(a5, v22);
            CFTypeID v24 = CFGetTypeID(v23);
            if (v24 == CFArrayGetTypeID())
            {
              CFIndex v25 = CFArrayGetCount((CFArrayRef)v23);
              if (v25 >= 1)
              {
                CFIndex v26 = v25;
                for (CFIndex j = 0; j != v26; ++j)
                {
                  CFIndex v28 = *(sqlite3_stmt **)(v15 + 8);
                  CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v23, j);
                  uint64_t v30 = _ABCCreateUTF8StringFromCFString(v29);
                  sqlite3_bind_text(v28, v18 + j, (const char *)v30, -1, MEMORY[0x1E4F14838]);
                }
                v18 += j;
                CFIndex v21 = v34;
              }
              a5 = v35;
            }
            else
            {
              int v31 = *(sqlite3_stmt **)(v15 + 8);
              int v32 = _ABCCreateUTF8StringFromCFString(v23);
              sqlite3_bind_text(v31, v18++, (const char *)v32, -1, MEMORY[0x1E4F14838]);
            }
            ++v22;
          }
          while (v22 != v21);
        }
      }
      goto LABEL_37;
    }
  }
  fwrite("AB: Could not compile statement for query (ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates):\n", 0x69uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  CFShow(v10);
  uint64_t v19 = 0;
LABEL_38:
  CFRelease(v10);
  return v19;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifiers(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:@"ExternalIdentifier IN "];
  if (Count >= 1)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      if (i) {
        CFStringRef v11 = @", ?";
      }
      else {
        CFStringRef v11 = CFSTR("(?");
      }
      [v9 appendString:v11];
    }
  }
  [v9 appendString:@""]);
  uint64_t v12 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, v9, theArray);

  return v12;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, @"Externalunsigned __int8 Identifier = ?", a4);
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:@"ExternalUUID IN "];
  if (Count >= 1)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      if (i) {
        CFStringRef v11 = @", ?";
      }
      else {
        CFStringRef v11 = CFSTR("(?");
      }
      [v9 appendString:v11];
    }
  }
  [v9 appendString:@""]);
  uint64_t v12 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, v9, theArray);

  return v12;
}

uint64_t ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUID(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(a1, a2, a3, @"ExternalUUint ID = ?", a4);
}

uint64_t ABCCopyArrayOfAllPeopleWithSortOrdering(uint64_t a1, int a2)
{
  return _ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(a1, (uint64_t)ABCPersonClass, 0, a2);
}

uint64_t _ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  CPRecordStoreGetDatabase();
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  uint64_t v8 = SelectPrefix;
  if (a3)
  {
    CFStringAppend(SelectPrefix, @" WHERE");
    CFStringAppend(v8, @" outerPerson.StoreID in (select abs.ROWID from ABStore abs, ABAccount aba where abs.Accountint ID = aba.ROWID AND aba.AccountIdentifier = ?)");
  }
  if (a4) {
    CFStringRef v9 = @" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort";
  }
  else {
    CFStringRef v9 = @" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort";
  }
  CFStringAppend(v8, v9);
  CFStringAppend(v8, @";");
  uint64_t v10 = CPSqliteDatabaseStatementForReading();
  CFStringRef v11 = (void *)recordStoreContext(a1);
  if (v11) {
    CFStringRef v11 = (void *)*v11;
  }
  ABRegulatoryLogReadContactsData((uint64_t)v11);
  CFRelease(v8);
  if (!v10) {
    return 0;
  }
  uint64_t v12 = *(sqlite3_stmt **)(v10 + 8);
  if (!v12) {
    return 0;
  }
  if (a3)
  {
    CFStringRef v13 = _ABCCreateUTF8StringFromCFString(a3);
    sqlite3_bind_text(v12, 1, (const char *)v13, -1, MEMORY[0x1E4F14838]);
  }
  uint64_t v14 = CPRecordStoreProcessStatementWithPropertyIndices();
  CPSqliteStatementReset();
  return v14;
}

void ABClearAllInstancesOfClassInSourceWithExternalIdentifier(uint64_t a1, const char **a2, uint64_t a3)
{
  if (a3) {
    int UniqueId = ABCRecordGetUniqueId(a3);
  }
  else {
    int UniqueId = -1;
  }
  CPRecordStoreGetDatabase();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    int v6 = Mutable;
    CFStringAppend(Mutable, @"UPDATE ");
    CFStringAppendCString(v6, *a2, 0x8000100u);
    CFStringAppend(v6, @" SET ");
    CFStringAppendCString(v6, "ExternalIdentifier", 0x8000100u);
    CFStringAppend(v6, @" = NULL");
    if (UniqueId != -1)
    {
      CFStringAppend(v6, @" WHERE ");
      CFStringAppend(v6, @"StoreID == ? ");
    }
    CFStringAppend(v6, @";");
    uint64_t v7 = CPSqliteDatabaseStatementForWriting();
    if (v7)
    {
      if (UniqueId != -1) {
        sqlite3_bind_int(*(sqlite3_stmt **)(v7 + 8), 1, UniqueId);
      }
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    CFRelease(v6);
  }
}

BOOL ABCDBHasIndexes()
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  int v24 = CPSqliteConnectionPerformSQL();
  int v23 = CPSqliteConnectionPerformSQL();
  int v0 = CPSqliteConnectionPerformSQL();
  int v1 = CPSqliteConnectionPerformSQL();
  int v2 = CPSqliteConnectionPerformSQL();
  int v3 = CPSqliteConnectionPerformSQL();
  int v4 = CPSqliteConnectionPerformSQL();
  int v5 = CPSqliteConnectionPerformSQL();
  int v6 = CPSqliteConnectionPerformSQL();
  int v7 = CPSqliteConnectionPerformSQL();
  int v8 = CPSqliteConnectionPerformSQL();
  int v9 = CPSqliteConnectionPerformSQL();
  BOOL v21 = v24 != 1
     && v23 != 1
     && v0 != 1
     && v1 != 1
     && v2 != 1
     && v3 != 1
     && v4 != 1
     && v5 != 1
     && v6 != 1
     && v7 != 1
     && v8 != 1
     && v9 != 1;
  CPSqliteDatabaseReleaseSqliteConnection();
  return v21;
}

void ABSqliteGenerateUUID(sqlite3_context *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v3 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v3)
  {
    CFUUIDRef v4 = v3;
    CFStringRef v5 = CFUUIDCreateString(v2, v3);
    if (v5)
    {
      CFStringRef v6 = v5;
      CFIndex Length = CFStringGetLength(v5);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      CFIndex usedBufLen = 0;
      int v9 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xA86D5448uLL);
      v12.location = 0;
      v12.length = Length;
      CFStringGetBytes(v6, v12, 0x8000100u, 0, 0, v9, MaximumSizeForEncoding, &usedBufLen);
      v9[usedBufLen] = 0;
      sqlite3_result_text(a1, (const char *)v9, -1, MEMORY[0x1E4F14838]);
      CFRelease(v6);
      CFRelease(v4);
      return;
    }
    CFRelease(v4);
  }
  sqlite3_result_null(a1);
}

void ABSqliteRepairUUID(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 1
    && (CFStringRef v5 = (const char *)sqlite3_value_text(*a3)) != 0
    && *v5
    && !strnstr(v5, "CNSuggestedContactStore", 0x17uLL))
  {
    CFStringRef v6 = *a3;
    sqlite3_result_value(a1, v6);
  }
  else
  {
    ABSqliteGenerateUUID(a1);
  }
}

void ABSqliteKatakanaExclusively(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 1
    && (CFUUIDRef v4 = sqlite3_value_text(*a3)) != 0
    && (CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v4, 0x8000100u)) != 0)
  {
    CFStringRef v6 = (__CFString *)v5;
    uint64_t v7 = ABKatakanaCharacterSet();
    BOOL v8 = ABContentsExclusivelyInCharacterSet(v6, v7) != 0;
    sqlite3_result_int(a1, v8);
    CFRelease(v6);
  }
  else
  {
    sqlite3_result_int(a1, 0);
  }
}

void ABSqliteNormalizeDate(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (ABSqliteNormalizeDate_onceToken != -1) {
    dispatch_once(&ABSqliteNormalizeDate_onceToken, &__block_literal_global_1);
  }
  CFStringRef v5 = sqlite3_value_text(*a3);
  if (v5)
  {
    if (*v5)
    {
      CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v5, 0x8000100u);
      if (v6)
      {
        CFStringRef v7 = v6;
        CFDateRef v8 = _ABCCreateDateFromCFString(v6);
        if (v8)
        {
          CFDateRef v9 = v8;
          uint64_t v19 = 0;
          CFIndex v20 = &v19;
          uint64_t v21 = 0x3052000000;
          CFIndex v22 = __Block_byref_object_copy_;
          int v23 = __Block_byref_object_dispose_;
          uint64_t v10 = (void *)getIntlUtilityClass_softClass;
          uint64_t v24 = getIntlUtilityClass_softClass;
          if (!getIntlUtilityClass_softClass)
          {
            v18[0] = MEMORY[0x1E4F143A8];
            v18[1] = 3221225472;
            double v18[2] = __getIntlUtilityClass_block_invoke;
            _OWORD v18[3] = &unk_1E59886B0;
            v18[4] = &v19;
            __getIntlUtilityClass_block_invoke((uint64_t)v18);
            uint64_t v10 = (void *)v20[5];
          }
          _Block_object_dispose(&v19, 8);
          uint64_t v11 = ABSqliteNormalizeDate_s_gmtGregorian;
          uint64_t v12 = [(id)ABSqliteNormalizeDate_s_gmtGregorian components:254 fromDate:v9];
          if (([v10 isYearlessDate:v12 forCalendar:v11] & 1) != 0
            || (uint64_t v13 = [(id)ABSqliteNormalizeDate_s_gmtJapanese components:254 fromDate:v9],
                ([v10 isYearlessDate:v13 forCalendar:ABSqliteNormalizeDate_s_gmtJapanese] & 1) != 0)
            || (uint64_t v14 = [(id)ABSqliteNormalizeDate_s_gmtBuddhist components:254 fromDate:v9],
                [v10 isYearlessDate:v14 forCalendar:ABSqliteNormalizeDate_s_gmtBuddhist]))
          {
            [v10 setYearlessYear:v12 forCalendar:ABSqliteNormalizeDate_s_gmtGregorian];
          }
          CFStringRef v15 = _ABCCreateCFStringFromDate([(id)ABSqliteNormalizeDate_s_gmtGregorian dateFromComponents:v12]);
          if (v15)
          {
            CFStringRef v16 = v15;
            BOOL v17 = _ABCCreateUTF8StringFromCFString(v15);
            sqlite3_result_text(a1, (const char *)v17, -1, MEMORY[0x1E4F14838]);
            CFRelease(v16);
          }
          CFRelease(v9);
        }
        CFRelease(v7);
      }
    }
  }
}

void sub_19DD03EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ABSqliteNormalizeDate_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:0];
  id v1 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  ABSqliteNormalizeDate_s_gmtGregorian = [v1 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  [(id)ABSqliteNormalizeDate_s_gmtGregorian setTimeZone:v0];
  id v2 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  ABSqliteNormalizeDate_s_gmtJapanese = [v2 initWithCalendarIdentifier:*MEMORY[0x1E4F1C358]];
  [(id)ABSqliteNormalizeDate_s_gmtJapanese setTimeZone:v0];
  id v3 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  CFUUIDRef v4 = (void *)[v3 initWithCalendarIdentifier:*MEMORY[0x1E4F1C2E8]];
  ABSqliteNormalizeDate_s_gmtBuddhist = (uint64_t)v4;
  return [v4 setTimeZone:v0];
}

void ABSqliteTransformString(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if ((a2 - 3) > 1) {
    goto LABEL_19;
  }
  CFMutableStringRef MutableCopy = (char *)sqlite3_value_text(*a3);
  Boolean v7 = sqlite3_value_int(a3[1]) != 0;
  if (MutableCopy)
  {
    CFStringRef v8 = CFStringCreateWithCString(0, MutableCopy, 0x8000100u);
    if (v8)
    {
      CFStringRef v9 = v8;
      CFMutableStringRef MutableCopy = (char *)CFStringCreateMutableCopy(0, 0, v8);
      CFRelease(v9);
    }
    else
    {
      CFMutableStringRef MutableCopy = 0;
    }
  }
  if (a2 != 3)
  {
    CFStringRef v11 = (const __CFString *)sqlite3_value_blob(a3[3]);
LABEL_10:
    CFStringRef v12 = v11;
    if (MutableCopy && v11)
    {
      CFStringTransform((CFMutableStringRef)MutableCopy, 0, v11, v7);
      CFRelease(v12);
LABEL_16:
      uint64_t v13 = _ABCCreateUTF8StringFromCFString((const __CFString *)MutableCopy);
      sqlite3_result_text(a1, (const char *)v13, -1, MEMORY[0x1E4F14838]);
      CFRelease(MutableCopy);
      return;
    }
    if (v11) {
      CFRelease(v11);
    }
    goto LABEL_15;
  }
  uint64_t v10 = sqlite3_value_text(a3[2]);
  if (v10)
  {
    CFStringRef v11 = CFStringCreateWithCString(0, (const char *)v10, 0x8000100u);
    goto LABEL_10;
  }
LABEL_15:
  if (MutableCopy) {
    goto LABEL_16;
  }
LABEL_19:
  sqlite3_result_null(a1);
}

void ABSqliteIsStoreAllowed(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 4)
  {
    CFStringRef v5 = (void *)sqlite3_value_blob(a3[3]);
    if (v5
      && ((CFStringRef v6 = v5, ([v5 deviceHasManagementRestrictions] & 1) != 0)
       || [v6 hasContactProviderRestrictions]))
    {
      if (sqlite3_value_type(*a3) == 5)
      {
        int v7 = sqlite3_value_int(a3[1]);
        if (v7 == 7)
        {
          int v8 = objc_msgSend(v6, "canAccessProviderContainerWithIdentifier:", objc_msgSend(NSString, "stringWithUTF8String:", sqlite3_value_text(a3[2])));
        }
        else
        {
          if (v7)
          {
            int v9 = 0;
            goto LABEL_16;
          }
          int v8 = [v6 canReadFromLocalAccount];
        }
      }
      else
      {
        int v8 = objc_msgSend(v6, "canReadFromAccountWithIdentifier:", objc_msgSend(NSString, "stringWithUTF8String:", sqlite3_value_text(*a3)));
      }
      int v9 = v8;
    }
    else
    {
      int v9 = 1;
    }
LABEL_16:
    sqlite3_result_int(a1, v9);
    return;
  }
  sqlite3_result_null(a1);
}

unsigned char *ABSqliteSelectPreferredContact_Step(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t result = sqlite3_aggregate_context(a1, 8);
  if (a2 == 4)
  {
    CFStringRef v6 = result;
    if (result)
    {
      if (!result[4])
      {
        int v7 = sqlite3_value_int(*a3);
        int v8 = sqlite3_value_int(a3[1]);
        int v9 = sqlite3_value_int(a3[2]);
        uint64_t result = (unsigned char *)[(id)sqlite3_value_blob(a3[3]) containsIndex:v8];
        if (result)
        {
          if (v9)
          {
            v6[4] = 1;
LABEL_7:
            *(_DWORD *)CFStringRef v6 = v7;
            return result;
          }
          if (!*(_DWORD *)v6 || v7 < *(_DWORD *)v6) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  return result;
}

void ABSqliteSelectPreferredContact_Final(sqlite3_context *a1)
{
  id v2 = (int *)sqlite3_aggregate_context(a1, 8);
  if (v2 && (int v3 = *v2) != 0)
  {
    sqlite3_result_int(a1, v3);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void ABValueRowMapCollect(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 3)
  {
    int v5 = sqlite3_value_int(a3[2]);
    CFStringRef v6 = (NSMapTable *)sqlite3_value_blob(*a3);
    if (v6)
    {
      int v7 = v6;
      int v8 = sqlite3_value_text(a3[1]);
      if (v8)
      {
        uint64_t v9 = [NSString stringWithUTF8String:v8];
        id v10 = NSMapGet(v7, (const void *)v5);
        if (!v10)
        {
          id v10 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
          NSMapInsert(v7, (const void *)v5, v10);
        }
        [v10 addObject:v9];
      }
    }
    sqlite3_result_int(a1, v5);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t _createPersonTables()
{
  BOOL v0 = ABCDBContextPerformSQLResultDone();
  int v1 = v0 & ABCDBContextPerformSQLResultDone();
  BOOL v2 = ABCDBContextPerformSQLResultDone();
  return v1 & v2 & ABCDBContextPerformSQLResultDone();
}

uint64_t ABCDBContextCreateABPersonTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v4 = ABCDBContextPerformSQLResultDone();
    BOOL v5 = ABCDBContextPerformSQLResultDone();
    if (!v4) {
      return 0;
    }
    if (!v5) {
      return 0;
    }
    BOOL v6 = ABCDBContextPerformSQLResultDone();
    BOOL v7 = ABCDBContextPerformSQLResultDone();
    if (!v6) {
      return 0;
    }
    if (!v7) {
      return 0;
    }
    BOOL v8 = ABCDBContextPerformSQLResultDone();
    BOOL v9 = ABCDBContextPerformSQLResultDone();
    BOOL v10 = ABCDBContextPerformSQLResultDone();
    if (!v8) {
      return 0;
    }
    if (!v9) {
      return 0;
    }
    if (!v10) {
      return 0;
    }
    BOOL v11 = ABCDBContextPerformSQLResultDone();
    BOOL v12 = ABCDBContextPerformSQLResultDone();
    if (!v11 || !v12) {
      return 0;
    }
    BOOL v13 = ABCDBContextPerformSQLResultDone();
    int v14 = v13 & ABCDBContextPerformSQLResultDone();
    BOOL v15 = ABCDBContextPerformSQLResultDone();
    int v16 = v14 & v15 & ABCDBContextPerformSQLResultDone();
    BOOL v17 = ABCDBContextPerformSQLResultDone();
    int v18 = v16 & v17 & ABCDBContextPerformSQLResultDone();
  }
  else
  {
    if (!ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone())
    {
      return 0;
    }
    int v18 = 1;
  }
  BOOL v19 = ABCDBContextPerformSQLResultDone();
  if (!v18
    || !v19
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone()
    || !ABCDBContextPerformSQLResultDone())
  {
    return 0;
  }
  if (a2)
  {
    performSQLWithConnection();
    performSQLWithConnection();
    performSQLWithConnection();
  }
  if (!ABCDBContextPerformSQLResultDone() || !ABCDBContextPerformSQLResultDone() || !ABCDBContextPerformSQLResultDone()) {
    return 0;
  }
  if (a2)
  {
    BOOL v20 = ABCDBContextPerformSQLResultDone();
    BOOL v21 = ABCDBContextPerformSQLResultDone();
    if (!v20) {
      return 0;
    }
    if (!v21) {
      return 0;
    }
    BOOL v22 = ABCDBContextPerformSQLResultDone();
    BOOL v23 = ABCDBContextPerformSQLResultDone();
    if (!v22) {
      return 0;
    }
    if (!v23) {
      return 0;
    }
    BOOL v24 = ABCDBContextPerformSQLResultDone();
    BOOL v25 = ABCDBContextPerformSQLResultDone();
    if (!v24) {
      return 0;
    }
    if (!v25) {
      return 0;
    }
    BOOL v26 = ABCDBContextPerformSQLResultDone();
    BOOL v27 = ABCDBContextPerformSQLResultDone();
    if (!v26) {
      return 0;
    }
    if (!v27) {
      return 0;
    }
    BOOL v28 = ABCDBContextPerformSQLResultDone();
    BOOL v29 = ABCDBContextPerformSQLResultDone();
    if (!v28) {
      return 0;
    }
    if (!v29) {
      return 0;
    }
    BOOL v30 = ABCDBContextPerformSQLResultDone();
    BOOL v31 = ABCDBContextPerformSQLResultDone();
    if (!v30) {
      return 0;
    }
    if (!v31) {
      return 0;
    }
    BOOL v32 = ABCDBContextPerformSQLResultDone();
    BOOL v33 = ABCDBContextPerformSQLResultDone();
    if (!v32 || !v33) {
      return 0;
    }
    BOOL v34 = ABCDBContextPerformSQLResultDone();
  }
  else
  {
    if (!ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone())
    {
      return 0;
    }
    BOOL v34 = 1;
  }
  BOOL v35 = ABCDBContextPerformSQLResultDone();
  if (!v34 || !v35) {
    return 0;
  }
  return _addLimitedAccessDeletionTriggers(a1, a2);
}

uint64_t ABCDBContextCreateSectionListTablesAndDropTablesWithTriggers(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v2 = ABCDBContextPerformSQLResultDone();
    BOOL v3 = ABCDBContextPerformSQLResultDone();
    BOOL v4 = ABCDBContextPerformSQLResultDone();
    if (!v2) {
      goto LABEL_18;
    }
    if (!v3) {
      goto LABEL_18;
    }
    if (!v4) {
      goto LABEL_18;
    }
    BOOL v5 = ABCDBContextPerformSQLResultDone();
    BOOL v6 = ABCDBContextPerformSQLResultDone();
    BOOL v7 = ABCDBContextPerformSQLResultDone();
    if (!v5) {
      goto LABEL_18;
    }
    if (!v6) {
      goto LABEL_18;
    }
    if (!v7) {
      goto LABEL_18;
    }
    BOOL v8 = ABCDBContextPerformSQLResultDone();
    BOOL v9 = ABCDBContextPerformSQLResultDone();
    if (!v8 || !v9) {
      goto LABEL_18;
    }
    BOOL v10 = ABCDBContextPerformSQLResultDone();
  }
  else
  {
    if (!ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone()
      || !ABCDBContextPerformSQLResultDone())
    {
      goto LABEL_18;
    }
    BOOL v10 = 1;
  }
  BOOL v11 = ABCDBContextPerformSQLResultDone();
  if (v10 && v11) {
    return 1;
  }
LABEL_18:
  syslog(3, "Error creating section tables");
  return 0;
}

BOOL ABCDBContextCreateSectionListTriggersAndIndicesAndDropFirst(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v2 = ABCDBContextPerformSQLResultDone();
    BOOL v3 = ABCDBContextPerformSQLResultDone();
    BOOL v4 = ABCDBContextPerformSQLResultDone();
    BOOL result = 0;
    if (v2 && v3 && v4)
    {
      BOOL v6 = ABCDBContextPerformSQLResultDone();
      BOOL v7 = ABCDBContextPerformSQLResultDone();
      BOOL v8 = ABCDBContextPerformSQLResultDone();
      BOOL result = 0;
      if (v6 && v7 && v8)
      {
        BOOL v9 = ABCDBContextPerformSQLResultDone();
        BOOL v10 = ABCDBContextPerformSQLResultDone();
        BOOL v11 = ABCDBContextPerformSQLResultDone();
        BOOL result = 0;
        if (v9 && v10 && v11)
        {
          BOOL v12 = ABCDBContextPerformSQLResultDone();
          BOOL v13 = ABCDBContextPerformSQLResultDone();
          BOOL v14 = ABCDBContextPerformSQLResultDone();
          BOOL result = 0;
          if (v12 && v13 && v14)
          {
            BOOL v15 = ABCDBContextPerformSQLResultDone();
            BOOL v16 = ABCDBContextPerformSQLResultDone();
            BOOL v17 = ABCDBContextPerformSQLResultDone();
            BOOL result = 0;
            if (v15 && v16 && v17)
            {
              BOOL v18 = ABCDBContextPerformSQLResultDone();
              BOOL v19 = ABCDBContextPerformSQLResultDone();
              BOOL v20 = ABCDBContextPerformSQLResultDone();
              BOOL result = 0;
              if (v18 && v19 && v20)
              {
                BOOL v21 = ABCDBContextPerformSQLResultDone();
                BOOL v22 = ABCDBContextPerformSQLResultDone();
                BOOL result = 0;
                if (v21 && v22)
                {
                  BOOL v23 = ABCDBContextPerformSQLResultDone();
                  BOOL v24 = ABCDBContextPerformSQLResultDone();
                  BOOL result = 0;
                  if (v23 && v24)
                  {
                    BOOL v25 = ABCDBContextPerformSQLResultDone();
                    BOOL v26 = ABCDBContextPerformSQLResultDone();
                    BOOL result = 0;
                    if (v25 && v26)
                    {
                      BOOL v27 = ABCDBContextPerformSQLResultDone();
                      BOOL v28 = ABCDBContextPerformSQLResultDone();
                      BOOL result = 0;
                      if (v27 && v28)
                      {
                        BOOL v29 = ABCDBContextPerformSQLResultDone();
                        BOOL v30 = ABCDBContextPerformSQLResultDone();
                        BOOL result = 0;
                        if (v29 && v30)
                        {
                          BOOL v31 = ABCDBContextPerformSQLResultDone();
                          BOOL v32 = ABCDBContextPerformSQLResultDone();
                          BOOL result = 0;
                          if (v31 && v32)
                          {
                            BOOL v33 = ABCDBContextPerformSQLResultDone();
                            BOOL v34 = ABCDBContextPerformSQLResultDone();
                            BOOL result = 0;
                            if (v33 && v34)
                            {
                              BOOL v35 = ABCDBContextPerformSQLResultDone();
                              return v35 & ABCDBContextPerformSQLResultDone();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    BOOL result = ABCDBContextPerformSQLResultDone();
    if (!result) {
      return result;
    }
    if (ABCDBContextPerformSQLResultDone())
    {
      BOOL result = ABCDBContextPerformSQLResultDone();
      if (!result) {
        return result;
      }
      if (ABCDBContextPerformSQLResultDone())
      {
        BOOL result = ABCDBContextPerformSQLResultDone();
        if (!result) {
          return result;
        }
        if (ABCDBContextPerformSQLResultDone())
        {
          BOOL result = ABCDBContextPerformSQLResultDone();
          if (!result) {
            return result;
          }
          if (ABCDBContextPerformSQLResultDone())
          {
            BOOL result = ABCDBContextPerformSQLResultDone();
            if (!result) {
              return result;
            }
            if (ABCDBContextPerformSQLResultDone())
            {
              BOOL result = ABCDBContextPerformSQLResultDone();
              if (!result) {
                return result;
              }
              if (ABCDBContextPerformSQLResultDone() && ABCDBContextPerformSQLResultDone())
              {
                BOOL v35 = 1;
                return v35 & ABCDBContextPerformSQLResultDone();
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t performSQLWithConnection()
{
  uint64_t result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    CPSqliteStatementPerform();
    return CPSqliteStatementReset();
  }
  return result;
}

uint64_t trimStoreURLs(uint64_t a1, __CFArray **a2)
{
  BOOL v3 = *a2;
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(v3, (const void *)v4);
  BOOL v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  if (v5)
  {
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v5, 0x8000100u);
    if (v6)
    {
      CFStringRef v7 = v6;
      if (CFStringGetLength(v6))
      {
        CFURLRef v8 = CFURLCreateWithString(0, v7, 0);
        if (v8)
        {
          CFURLRef v9 = v8;
          CFStringRef v10 = CFURLCopyPath(v8);
          if (v10)
          {
            CFStringRef v11 = v10;
            uint64_t v12 = CPSqliteConnectionStatementForSQL();
            if (v12)
            {
              uint64_t v13 = v12;
              BOOL v14 = *(sqlite3_stmt **)(v12 + 8);
              BOOL v15 = _ABCCreateUTF8StringFromCFString(v11);
              sqlite3_bind_text(v14, 1, (const char *)v15, -1, MEMORY[0x1E4F14838]);
              sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, v4);
              CPSqliteStatementPerform();
              CPSqliteStatementReset();
            }
            CFRelease(v11);
          }
          CFRelease(v9);
        }
      }
      CFRelease(v7);
    }
  }
  return 0;
}

uint64_t trimMemberURLs(uint64_t a1)
{
  int v2 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  BOOL v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  if (v3)
  {
    CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v3, 0x8000100u);
    if (v4)
    {
      CFStringRef v5 = v4;
      if (CFStringGetLength(v4))
      {
        CFURLRef v6 = CFURLCreateWithString(0, v5, 0);
        CFStringRef v7 = CFURLCopyPath(v6);
        if (v7)
        {
          CFStringRef v8 = v7;
          uint64_t v9 = CPSqliteConnectionStatementForSQL();
          if (v9)
          {
            uint64_t v10 = v9;
            CFStringRef v11 = *(sqlite3_stmt **)(v9 + 8);
            uint64_t v12 = _ABCCreateUTF8StringFromCFString(v8);
            sqlite3_bind_text(v11, 1, (const char *)v12, -1, MEMORY[0x1E4F14838]);
            sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 2, v2);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
          CFRelease(v8);
        }
        CFRelease(v6);
      }
      CFRelease(v5);
    }
  }
  return 0;
}

uint64_t _abSqliteTraceCallback(int a1, uint64_t a2, sqlite3_stmt *pStmt, char *__s1)
{
  CFStringRef v4 = __s1;
  if (a1 == 2)
  {
    unint64_t v8 = *(void *)__s1;
    if (*(void *)__s1 >= 0x989681uLL && ABDiagnosticsEnabled()) {
      _ABLog2(6, (uint64_t)"int _abSqliteTraceCallback(unsigned int, void *, void *, void *)", 355, 0, @"sqlite profile: %llu ms, %s", v9, v10, v11, v8 / 0xF4240);
    }
  }
  else if (a1 == 1)
  {
    if (__s1 && !strncmp(__s1, "--", 2uLL))
    {
      int v7 = 0;
    }
    else
    {
      if (!pStmt) {
        return 0;
      }
      CFStringRef v4 = sqlite3_expanded_sql(pStmt);
      if (!v4) {
        goto LABEL_17;
      }
      int v7 = 1;
    }
    if (!strcasestr(v4, "-- TRIGGER") && ABDiagnosticsEnabled())
    {
      _ABLog2(6, (uint64_t)"int _abSqliteTraceCallback(unsigned int, void *, void *, void *)", 345, 0, @"sqlite trace [%p]: %s", v12, v13, v14, a2);
      if ((v7 & 1) == 0) {
        return 0;
      }
      goto LABEL_17;
    }
    if (v7) {
LABEL_17:
    }
      sqlite3_free(v4);
  }
  return 0;
}

void ABCDBUpdatePersonValueFromTrigger(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 3)
  {
    CFStringRef v5 = sqlite3_user_data(a1);
    CFURLRef v6 = *a3;
    sqlite3_value_text(a3[1]);
    uint64_t v7 = sqlite3_value_int(a3[2]);
    unsigned int v8 = CPRecordIndexOfPropertyNamed();
    if ((v8 & 0x80000000) == 0
      && (signed int)v8 < *((_DWORD *)ABCPersonClass + 18)
      && *(_DWORD *)(*((void *)ABCPersonClass + 10) + 40 * v8 + 8) == 1
      && sqlite3_value_type(v6) == 1
      && MEMORY[0x19F3B3BA0](v5[2], ABCPersonClass, v7))
    {
      sqlite3_value_int(v6);
      CPRecordInitializeProperty();
    }
    sqlite3_result_value(a1, v6);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void ___logDatabaseHeader_block_invoke(uint64_t a1)
{
}

const void *rowidForStringInTable(const __CFString *key, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary **a5, unsigned char *a6)
{
  if (a6) {
    *a6 = 0;
  }
  if (a5)
  {
    CFDictionaryRef Mutable = *a5;
    if (*a5
      || (CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0),
          (*a5 = Mutable) != 0))
    {
      if (CFDictionaryContainsKey(Mutable, key)) {
        return CFDictionaryGetValue(Mutable, key);
      }
      int v11 = 1;
    }
    else
    {
      int v11 = 0;
    }
  }
  else
  {
    int v11 = 0;
    CFDictionaryRef Mutable = 0;
  }
  uint64_t v12 = CPSqliteConnectionStatementForSQL();
  CFIndex usedBufLen = 0;
  if (v12)
  {
    uint64_t v13 = v12;
    CFIndex Length = CFStringGetLength(key);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    BOOL v16 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x2C514BACuLL);
    v25.location = 0;
    v25.length = Length;
    CFStringGetBytes(key, v25, 0x8000100u, 0, 0, v16, MaximumSizeForEncoding, &usedBufLen);
    v16[usedBufLen] = 0;
    sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 1, (const char *)v16, -1, MEMORY[0x1E4F14838]);
    CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
  }
  else
  {
    fwrite("SQL error\n", 0xAuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  uint64_t v17 = CPSqliteConnectionStatementForSQL();
  if (!v17)
  {
    uint64_t Insert = 0xFFFFFFFFLL;
    if (!a6) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v18 = v17;
  CFIndex v19 = CFStringGetLength(key);
  CFIndex v20 = CFStringGetMaximumSizeForEncoding(v19, 0x8000100u);
  BOOL v21 = (UInt8 *)malloc_type_malloc(v20 + 1, 0xFE42E907uLL);
  v26.location = 0;
  v26.length = v19;
  CFStringGetBytes(key, v26, 0x8000100u, 0, 0, v21, v20, &usedBufLen);
  v21[usedBufLen] = 0;
  sqlite3_bind_text(*(sqlite3_stmt **)(v18 + 8), 1, (const char *)v21, -1, MEMORY[0x1E4F14838]);
  CPSqliteStatementPerform();
  CPSqliteStatementReset();
  uint64_t Insert = CPSqliteConnectionRowidOfLastInsert();
  if (a6) {
LABEL_16:
  }
    *a6 = 1;
LABEL_17:
  if ((int)Insert >= 0) {
    int v22 = v11;
  }
  else {
    int v22 = 0;
  }
  if (v22 == 1) {
    CFDictionarySetValue(Mutable, key, (const void *)Insert);
  }
  return (const void *)Insert;
}

uint64_t AddEntryToDictionary(uint64_t a1, __CFDictionary *a2)
{
  CFStringRef v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFURLRef v6 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v4, 0x8000100u);
    uint64_t v7 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
    if (v7) {
      unsigned int v8 = (__CFString *)CFStringCreateWithCString(v5, (const char *)v7, 0x8000100u);
    }
    else {
      unsigned int v8 = &stru_1EF03E278;
    }
    int v9 = [(__CFString *)v6 isEqualToString:@"bundleIdentifiers"];
    uint64_t v10 = v8;
    if (v9) {
      uint64_t v10 = (__CFString *)[(__CFString *)v8 componentsSeparatedByString:@","];
    }
    CFDictionarySetValue(a2, v6, v10);
    CFRelease(v6);
    CFRelease(v8);
  }
  return 0;
}

uint64_t _setInt(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a1[1] + 8);
  if (v3) {
    return v3(a2, a3, *a1);
  }
  else {
    return 1;
  }
}

uint64_t _setRawString(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a1[1] + 32);
  if (v3) {
    return v3(a2, a3, *a1);
  }
  else {
    return 1;
  }
}

uint64_t _setRawData(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1[1] + 40);
  if (v4) {
    return v4(a2, a3, a4, *a1);
  }
  else {
    return 1;
  }
}

uint64_t addLabelToDictionary(uint64_t a1, __CFDictionary *a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFAllocatorRef v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v5, 0x8000100u);
  CFDictionarySetValue(a2, (const void *)v4, v6);
  CFRelease(v6);
  return 0;
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

Class __getIntlUtilityClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!IntlPreferencesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __IntlPreferencesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5988748;
    uint64_t v5 = 0;
    IntlPreferencesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!IntlPreferencesLibraryCore_frameworkLibrary) {
    __getIntlUtilityClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("IntlUtility");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getIntlUtilityClass_block_invoke_cold_2();
  }
  getIntlUtilityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __IntlPreferencesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  IntlPreferencesLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t ABIntFromUVersionInfo(unsigned __int8 *a1)
{
  return (*a1 << 24) | (a1[1] << 16);
}

uint64_t ABCCreateCollator(uint64_t a1, int a2)
{
  return ABCCreateCollatorWithPreferredLocale(a1, a2, 0);
}

uint64_t ABCCreateCollatorWithPreferredLocale(uint64_t a1, int a2, CFTypeRef cf)
{
  int v16 = 0;
  if (cf && (CFStringRef v5 = (const __CFString *)CFRetain(cf)) != 0 || (CFStringRef v5 = ABAddressBookCopyCollatorType(a1, a2)) != 0)
  {
    if (CFStringGetLength(v5)) {
      goto LABEL_7;
    }
    CFRelease(v5);
  }
  CFStringRef v5 = ABCCopyUserLanguage();
  if (!v5)
  {
    uint64_t v7 = 0;
    char v8 = 1;
    goto LABEL_11;
  }
LABEL_7:
  CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
  if (!CStringPtr)
  {
    CFIndex Length = CFStringGetLength(v5);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
    CFIndex usedBufLen = 0;
    uint64_t v7 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xB257DAF1uLL);
    v17.location = 0;
    v17.length = Length;
    CFStringGetBytes(v5, v17, 0x600u, 0, 0, v7, MaximumSizeForEncoding, &usedBufLen);
    char v8 = 0;
    char v11 = 0;
    v7[usedBufLen] = 0;
    goto LABEL_12;
  }
  uint64_t v7 = (UInt8 *)CStringPtr;
  char v8 = 0;
LABEL_11:
  char v11 = 1;
LABEL_12:
  if (!v7) {
    uint64_t v7 = (UInt8 *)"en";
  }
  uint64_t v12 = ucol_open();
  if (v16 >= 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  ucol_setAttribute();
  if ((v8 & 1) == 0) {
    CFRelease(v5);
  }
  if ((v11 & 1) == 0) {
    free(v7);
  }
  return v13;
}

uint64_t ABCReleaseCollator(uint64_t result)
{
  if (result) {
    return ucol_close();
  }
  return result;
}

const char *ABCreateSortKey(CFStringRef theString, uint64_t a2, uint64_t a3, int64_t *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (theString) {
    uint64_t Length = CFStringGetLength(theString);
  }
  else {
    uint64_t Length = 0;
  }
  uint64_t v8 = a2;
  if (!a2) {
    uint64_t v8 = ABCCreateCollatorWithPreferredLocale(0, 0, 0);
  }
  if (Length < 1)
  {
    BOOL v15 = 0;
    int v17 = 1;
    goto LABEL_21;
  }
  CharactersPtr = CFStringGetCharactersPtr(theString);
  uint64_t v10 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
  {
    uint64_t v10 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
    v23.location = 0;
    v23.length = Length;
    CFStringGetCharacters(theString, v23, v10);
  }
  ucol_setStrength();
  unsigned int SortKey = ucol_getSortKey();
  if (!SortKey)
  {
    CFIndex v19 = ABOSLogGeneral();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      ABCreateSortKey_cold_1((uint64_t)theString, v19);
    }
    BOOL v15 = 0;
    int v17 = 1;
    if (!CharactersPtr) {
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  unsigned int v12 = SortKey;
  size_t v13 = SortKey;
  uint64_t v14 = (char *)malloc_type_calloc(SortKey, 1uLL, 0xC2B5088EuLL);
  BOOL v15 = v14;
  if (v12 >= 0xFA1)
  {
    unsigned int v12 = ucol_getSortKey();
    if (a4) {
      goto LABEL_12;
    }
LABEL_29:
    int v17 = 0;
    if (CharactersPtr) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  memcpy(v14, __src, v13);
  if (!a4) {
    goto LABEL_29;
  }
LABEL_12:
  int64_t v16 = strlen(v15);
  int v17 = 0;
  int64_t v18 = v12 - 1;
  if (v16 < v18) {
    int64_t v18 = v16;
  }
  *a4 = v18;
  if (!CharactersPtr) {
LABEL_20:
  }
    free(v10);
LABEL_21:
  if (a4 && v17) {
    *a4 = 0;
  }
  if (v8 != a2 && v8) {
    ucol_close();
  }
  return v15;
}

uint64_t ABCreateUpperBoundingSortKey(const char *a1)
{
  return 0;
}

const char *ABCreateDataSortKey(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CFIndex length = 0;
  uint64_t result = ABCreateSortKey(a1, a2, a3, &length);
  if (result) {
    return (const char *)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)result, length, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  }
  return result;
}

const char *ABCreateUpperBoundingDataSortKey(const __CFData *a1)
{
  BytePtr = (const char *)CFDataGetBytePtr(a1);
  uint64_t result = (const char *)ABCreateUpperBoundingSortKey(BytePtr);
  if (result)
  {
    BOOL v3 = (const UInt8 *)result;
    size_t v4 = strlen(result);
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return (const char *)CFDataCreateWithBytesNoCopy(v6, v3, v4, v5);
  }
  return result;
}

__CFArray *ABCCreateSortKeysForString(__CFStringTokenizer *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 0;
  }
  CFArrayRef v7 = _copyComponentsForString(a1, a2, a3, a5);
  if (!v7) {
    return 0;
  }
  CFArrayRef v8 = v7;
  CFIndex Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
    CFDictionaryRef Mutable = 0;
  }
  else
  {
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    CFDictionaryRef Mutable = 0;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
      if (ValueAtIndex)
      {
        CFStringRef v14 = ValueAtIndex;
        if (CFStringGetLength(ValueAtIndex) >= 1)
        {
          int64_t v18 = 0;
          BOOL v15 = (char *)ABCreateSortKey(v14, a4, a5, &v18);
          if (v15)
          {
            int64_t v16 = v15;
            if (v18 < 1)
            {
              free(v15);
            }
            else
            {
              if (!Mutable) {
                CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &ABCreateSortKeysMutableArray_callbacks);
              }
              CFArrayAppendValue(Mutable, v16);
            }
          }
        }
      }
      ++v11;
    }
    while (v10 != v11);
  }
  CFRelease(v8);
  return Mutable;
}

CFArrayRef _copyComponentsForString(__CFStringTokenizer *a1, CFStringRef theString, uint64_t a3, int a4)
{
  if (a4 != 2)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v10 = ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, theString, a3, 1);
    CFArrayRef v11 = v10;
    if (a3)
    {
      CFArrayRef v12 = ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, theString, 0, 1);
      CFArrayRef v13 = v12;
      if (v11)
      {
        CFIndex Count = CFArrayGetCount(v11);
        CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v8, Count, v11);
        CFIndex v16 = CFArrayGetCount(MutableCopy);
        if (v13)
        {
          CFIndex v17 = v16;
          CFIndex v18 = CFArrayGetCount(v13);
          if (v18 >= 1)
          {
            CFIndex v19 = v18;
            for (CFIndex i = 0; i != v19; ++i)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
              v27.location = 0;
              v27.CFIndex length = v17;
              if (!CFArrayContainsValue(MutableCopy, v27, ValueAtIndex)) {
                CFArrayAppendValue(MutableCopy, ValueAtIndex);
              }
            }
          }
          CFRelease(v13);
        }
        CFRelease(v11);
        if (!MutableCopy) {
          return Mutable;
        }
        goto LABEL_19;
      }
      CFArrayRef MutableCopy = v12;
      if (v12)
      {
LABEL_19:
        CFIndex v22 = CFArrayGetCount(MutableCopy);
        if (v22 >= 1)
        {
          CFIndex v23 = v22;
          for (CFIndex j = 0; j != v23; ++j)
          {
            CFArrayRef v25 = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, j);
            v28.CFIndex length = CFArrayGetCount(v25);
            v28.location = 0;
            CFArrayAppendArray(Mutable, v25, v28);
          }
        }
        CFRelease(MutableCopy);
      }
    }
    else
    {
      CFArrayRef MutableCopy = v10;
      if (v10) {
        goto LABEL_19;
      }
    }
    return Mutable;
  }
  return ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, theString, a3, 0);
}

CFMutableArrayRef ABCreateSortKeysMutableArray()
{
  return CFArrayCreateMutable(0, 0, &ABCreateSortKeysMutableArray_callbacks);
}

void _freeSortKey(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

void ABCMergeSortKeysIntoString(__CFString *a1, CFArrayRef theArray, uint64_t a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      contentsDeCFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
      do
      {
        CFStringRef ValueAtIndex = (const char *)CFArrayGetValueAtIndex(theArray, v8);
        if (ValueAtIndex)
        {
          CFArrayRef v10 = ValueAtIndex;
          if (CFStringGetLength(a1) < 1)
          {
            size_t v17 = strlen(v10);
            CFStringRef v18 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)v10, v17, 0x201u, 0, contentsDeallocator);
            if (v18)
            {
              CFStringRef v19 = v18;
              CFStringAppend(a1, v18);
              CFRelease(v19);
            }
            if (a4 && !*a4) {
              *a4 = a3;
            }
            goto LABEL_21;
          }
          CFIndex Length = CFStringGetLength(a1);
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x201u);
          size_t v13 = strlen(v10);
          CFIndex usedBufLen = 0;
          if (MaximumSizeForEncoding < 200)
          {
            BOOL v15 = 0;
            CFIndex v16 = v28;
          }
          else
          {
            CFStringRef v14 = malloc_type_malloc(MaximumSizeForEncoding + 1, 0xDD2EC9DAuLL);
            BOOL v15 = v14;
            if (v14)
            {
              CFIndex v16 = (UInt8 *)v14;
            }
            else
            {
              CFIndex MaximumSizeForEncoding = 199;
              CFIndex v16 = v28;
            }
          }
          v30.location = 0;
          v30.CFIndex length = Length;
          CFStringGetBytes(a1, v30, 0x201u, 0, 0, v16, MaximumSizeForEncoding + 1, &usedBufLen);
          v16[usedBufLen] = 0;
          CFIndex v20 = malloc_type_malloc(2 * (usedBufLen + v13), 0x100004077774924uLL);
          if ((int)ucol_mergeSortkeys() < 1)
          {
            free(v20);
            if (!v15) {
              goto LABEL_21;
            }
          }
          else
          {
            size_t v21 = strlen((const char *)v20);
            CFStringRef v22 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)v20, v21, 0x201u, 0, 0);
            if (v22)
            {
              CFStringRef v23 = v22;
              CFStringReplaceAll(a1, v22);
              CFRelease(v23);
            }
            if (!v15) {
              goto LABEL_21;
            }
          }
          free(v15);
        }
LABEL_21:
        ++v8;
      }
      while (v7 != v8);
    }
  }
}

CFDataRef ABCopySortKeyForSortKeys(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  uint64_t v3 = Count;
  size_t v4 = 0;
  for (CFIndex i = 0; i != v3; ++i)
  {
    CFStringRef ValueAtIndex = (const char *)CFArrayGetValueAtIndex(a1, i);
    v4 += strlen(ValueAtIndex) + 1;
  }
  CFIndex v7 = malloc_type_calloc(1uLL, v4, 0x404EAF46uLL);
  CFIndex v8 = malloc_type_calloc(1uLL, v4, 0xE5C27A59uLL);
  int v9 = (const char *)CFArrayGetValueAtIndex(a1, 0);
  size_t v10 = strlen(v9);
  memmove(v7, v9, v10);
  memmove(v8, v9, v10);
  if (v3 >= 2)
  {
    for (CFIndex j = 1; j != v3; ++j)
    {
      CFArrayRef v12 = (const char *)CFArrayGetValueAtIndex(a1, j);
      strlen(v12);
      size_t v13 = (int)ucol_mergeSortkeys();
      memmove(v8, v7, v13);
    }
    size_t v4 = v13;
  }
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v7, v4, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  free(v8);
  return v14;
}

__CFArray *ABCopySortKeysForStrings(__CFStringTokenizer *a1, const __CFArray *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, &ABCreateSortKeysMutableArray_callbacks);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v10 = Count;
    for (CFIndex i = 0; i != v10; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
      CFArrayRef v13 = _copyComponentsForString(a1, ValueAtIndex, a3, a5);
      if (v13)
      {
        CFArrayRef v14 = v13;
        CFIndex v15 = CFArrayGetCount(v13);
        if (v15 >= 1)
        {
          CFIndex v16 = v15;
          for (CFIndex j = 0; j != v16; ++j)
          {
            CFStringRef v18 = (const __CFString *)CFArrayGetValueAtIndex(v14, j);
            if (CFStringGetLength(v18) >= 1)
            {
              int64_t v23 = 0;
              CFStringRef v19 = (char *)ABCreateSortKey(v18, a4, a5, &v23);
              if (v23 < 1) {
                free(v19);
              }
              else {
                CFArrayAppendValue(Mutable, v19);
              }
            }
          }
        }
        CFRelease(v14);
      }
    }
  }
  return Mutable;
}

uint64_t ABCompareDataSortKeys(const __CFData *a1, const __CFData *a2)
{
  BytePtr = (char *)CFDataGetBytePtr(a1);
  size_t v4 = (char *)CFDataGetBytePtr(a2);
  return ABCompareSortKeys(BytePtr, v4);
}

uint64_t ABCompareSortKeys(char *a1, char *__s)
{
  if (a1) {
    uint64_t result = -1;
  }
  else {
    uint64_t result = __s != 0;
  }
  if (a1 && __s)
  {
    signed int v5 = strchr(__s, 1) - __s;
    signed int v6 = strchr(a1, 1) - a1;
    if (v6 >= v5) {
      signed int v6 = v5;
    }
    int v7 = strncmp(a1, __s, v6);
    if (v7 >= 0) {
      return v7 != 0;
    }
    else {
      return -1;
    }
  }
  return result;
}

uint64_t ABCompareStringsUsingICUSortKey(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  signed int v5 = (char *)ABCreateSortKey(a1, a3, 2, 0);
  signed int v6 = (char *)ABCreateSortKey(a2, a3, 2, 0);
  uint64_t v7 = ABCompareSortKeys(v5, v6);
  free(v5);
  free(v6);
  return v7;
}

CFArrayRef ABCCreateArrayOfTokenizationsBySeparatingWordsInCompositeName(__CFStringTokenizer *a1, const __CFString *a2, uint64_t a3)
{
  return ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, a2, a3, 1);
}

CFArrayRef ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(__CFStringTokenizer *a1, CFStringRef theString, uint64_t a3, int a4)
{
  CFIndex Length = CFStringGetLength(theString);
  if (a1)
  {
    v16.location = 0;
    v16.CFIndex length = Length;
    CFStringTokenizerSetString(a1, theString, v16);
    CFStringTokenizerRef v8 = a1;
    goto LABEL_10;
  }
  CFArrayRef v9 = CFLocaleCopyPreferredLanguages();
  if (v9)
  {
    CFArrayRef v10 = v9;
    if (CFArrayGetCount(v9))
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, 0);
      CFLocaleRef v12 = CFLocaleCreate(0, ValueAtIndex);
      CFRelease(v10);
      if (v12) {
        goto LABEL_9;
      }
    }
    else
    {
      CFRelease(v10);
    }
  }
  CFLocaleRef v12 = CFLocaleCopyCurrent();
LABEL_9:
  v17.location = 0;
  v17.CFIndex length = Length;
  CFStringTokenizerRef v8 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, v17, 0, v12);
  CFRelease(v12);
  if (!v8) {
    return 0;
  }
LABEL_10:
  if (a4) {
    uint64_t PossibleNamePartsArrayWithStringAsCompositeName = _CFStringTokenizerCreatePossibleNamePartsArrayWithStringAsCompositeName();
  }
  else {
    uint64_t PossibleNamePartsArrayWithStringAsCompositeName = _CFStringTokenizerCreateNamePartsArrayWithStringAsCompositeName();
  }
  CFArrayRef v14 = (CFArrayRef)PossibleNamePartsArrayWithStringAsCompositeName;
  if (PossibleNamePartsArrayWithStringAsCompositeName)
  {
    if (!a1) {
      goto LABEL_17;
    }
  }
  else
  {
    CFArrayRef v14 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
    if (!a1) {
LABEL_17:
    }
      CFRelease(v8);
  }
  return v14;
}

__CFArray *ABCCreateArrayBySeparatingWordsInPropertyString(__CFStringTokenizer *a1, const __CFString *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex Length = CFStringGetLength(a2);
  if (a1)
  {
    v11.CFIndex length = Length;
    v11.location = 0;
    CFStringTokenizerSetString(a1, a2, v11);
    while (CFStringTokenizerAdvanceToNextToken(a1))
    {
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(a1);
      if (CurrentTokenRange.length >= 1)
      {
        CFStringRef v8 = CFStringCreateWithSubstring(v4, a2, CurrentTokenRange);
        if (v8)
        {
          CFStringRef v9 = v8;
          CFArrayAppendValue(Mutable, v8);
          CFRelease(v9);
        }
      }
    }
  }
  return Mutable;
}

CFArrayRef ABCCreateArrayBySeparatingWordsInCompositeNameString(__CFStringTokenizer *a1, const __CFString *a2, uint64_t a3)
{
  return ABCCreateArrayBySeparatingWordsInCompositeNameStringWithAllPossibleDecompositions(a1, a2, a3, 0);
}

__CFString *ABCreateASCIINumericStringFromString(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Length >= 1)
  {
    CFIndex v4 = 0;
    UniChar chars = 0;
    do
    {
      UChar32 CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v4);
      UniChar chars = CharacterAtIndex;
      NumericCFArrayRef Value = u_getNumericValue(CharacterAtIndex);
      if (NumericValue <= 9.0)
      {
        double v7 = ceil(NumericValue);
        if (NumericValue >= 0.0 && NumericValue == v7) {
          UniChar chars = (int)NumericValue + 48;
        }
      }
      CFStringAppendCharacters(Mutable, &chars, 1);
      ++v4;
    }
    while (Length != v4);
  }
  return Mutable;
}

__CFString *ABCStoreNameForProperty(int a1)
{
  if (kABCSourceNameProperty == a1) {
    return @"Name";
  }
  if (kABCSourceExternalIdentifierProperty == a1) {
    return @"ExternalIdentifier";
  }
  if (kABCSourceTypeProperty == a1) {
    return @"Type";
  }
  if (kABCSourceConstraintsPathProperty == a1) {
    return @"ConstraintsPath";
  }
  if (kABCSourceExternalModificationTagProperty == a1) {
    return @"ExternalModificationTag";
  }
  if (kABCSourceExternalSyncTagProperty == a1) {
    return @"ExternalSyncTag";
  }
  if (kABCSourceAccountIDProperty == a1) {
    return @"AccountID";
  }
  if (kABCSourcePolicyProperty == a1) {
    return @"Policy";
  }
  if (kABCSourceEnabledProperty == a1) {
    return @"Enabled";
  }
  if (kABCSourceSyncDataProperty == a1) {
    return @"SyncData";
  }
  if (kABCSourceMeIdentifierProperty == a1) {
    return @"MeIdentifier";
  }
  if (kABCSourceCapabilitiesProperty == a1) {
    return @"Capabilities";
  }
  if (kABCSourceInternalUUIDProperty == a1) {
    return @"guid";
  }
  if (kABCSourceLastSyncDateProperty == a1) {
    return @"LastSyncDate";
  }
  if (kABCSourceProviderIdentifierProperty == a1) {
    return @"ProviderIdentifier";
  }
  if (kABCSourceProviderMetadataProperty == a1) {
    return @"ProviderMetadata";
  }
  return 0;
}

BOOL ABCDBContextCreateDefaultABSource()
{
  CPSqliteConnectionStatementForSQL();
  int v0 = CPSqliteStatementPerform();
  CPSqliteStatementReset();
  return v0 == 101;
}

BOOL ABCDBContextCreateABCSourceTables(uint64_t a1, int a2)
{
  if (CPSqliteConnectionStatementForSQL())
  {
    int v3 = CPSqliteStatementPerform();
    CPSqliteStatementReset();
    CFRelease(@"CREATE TABLE IF NOT EXISTS ABStore (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, ExternalIdentifier TEXT, Type INTEGER, ConstraintsPath TEXT, ExternalModificationTag TEXT, ExternalSyncTag TEXT, StoreInternalIdentifier TEXT, AccountID INTEGER DEFAULT -1,Enabled INTEGER DEFAULT 1, SyncData BLOB, MeIdentifier INTEGER DEFAULT -1, Capabilities INTEGER DEFAULT 0, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), LastSyncDate TEXT, ProviderIdentifier TEXT, ProviderMetadata BLOB, UNIQUE(StoreInternalIdentifier), UNIQUE(guid));");
    if (v3 == 101 && a2 != 0)
    {
      ABCDBContextCreateDefaultABSource();
      int v3 = 101;
    }
  }
  else
  {
    CFRelease(@"CREATE TABLE IF NOT EXISTS ABStore (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, ExternalIdentifier TEXT, Type INTEGER, ConstraintsPath TEXT, ExternalModificationTag TEXT, ExternalSyncTag TEXT, StoreInternalIdentifier TEXT, AccountID INTEGER DEFAULT -1,Enabled INTEGER DEFAULT 1, SyncData BLOB, MeIdentifier INTEGER DEFAULT -1, Capabilities INTEGER DEFAULT 0, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), LastSyncDate TEXT, ProviderIdentifier TEXT, ProviderMetadata BLOB, UNIQUE(StoreInternalIdentifier), UNIQUE(guid));");
    int v3 = 1;
  }
  return v3 == 101;
}

uint64_t ABCSourceCreateNewSourceAndReturnError()
{
  ABCInitializeLibrary();
  uint64_t v0 = CPRecordCreate();
  CPRecordInitializeProperty();
  CPRecordInitializeProperty();
  return v0;
}

const void *ABCSourceCopyLocalSource(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = (const void *)ABCDBContextRecordForUIDOfType(*(void *)(a1 + 16), 0, (uint64_t)ABCSourceClass);
  if (!v2)
  {
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForWriting();
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      CPSqliteDatabaseReleaseSqliteConnection();
      int v2 = (const void *)ABCDBContextRecordForUIDOfType(*(void *)(a1 + 16), 0, (uint64_t)ABCSourceClass);
      if (!v2) {
        return v2;
      }
      goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  CFRetain(v2);
  return v2;
}

uint64_t _ABCGetActualDefaultSource(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  uint64_t v2 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 16);
  signed int v5 = ABCSourceClass;
  return ABCDBContextRecordForUIDOfType(v4, v3, (uint64_t)v5);
}

uint64_t ABCSourceCopyRecordsForUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result) {
    return ABCDBContextCopyRecordsForUUIDsOfType(*(void *)(result + 16), a2, (long long *)ABCSourceClass);
  }
  return result;
}

uint64_t ABCSourceCopyArrayOfAllSourcesIncludingDisabledSources(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = @"Enabled = ?";
    uint64_t v4 = @"1";
  }
  return ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(v2, (uint64_t)ABCSourceClass, 0, v3, v4);
}

uint64_t ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    signed int v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier(ABCAddressBookRef, CFStringRef)", 275, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (a2) {
    return CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  }
  values = (void *)ABCSourceCopyLocalSource(a1);
  if (!values) {
    return 0;
  }
  CFArrayRef v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  CFRelease(values);
  return (uint64_t)v10;
}

void __ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(sqlite3_stmt **)(a2 + 8);
    if (v2)
    {
      uint64_t v3 = (const char *)_CPCreateUTF8StringFromCFString();
      uint64_t v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
      sqlite3_bind_text(v2, 1, v3, -1, v4);
    }
  }
}

uint64_t ABCPersonCopyArrayOfPeopleWithExternalIdentifierInSource(const void *a1, uint64_t a2)
{
  uint64_t v4 = ABCGetAddressBookForRecord();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = ABCPersonClass;
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifier(v5, (uint64_t)v6, a2, a1);
}

uint64_t ABCGroupCopyArrayOfGroupsWithExternalIdentifierInSource(const void *a1, uint64_t a2)
{
  uint64_t v4 = ABCGetAddressBookForRecord();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = ABCGroupClass[0];
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifier(v5, (uint64_t)v6, a2, a1);
}

uint64_t ABCGroupCopyArrayOfGroupsWithExternalIdentifiersInSource(const __CFArray *a1, uint64_t a2)
{
  uint64_t v4 = ABCGetAddressBookForRecord();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = ABCGroupClass[0];
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifiers(v5, (uint64_t)v6, a2, a1);
}

uint64_t ABSourceGetPolicy(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPolicyRef ABSourceGetPolicy(ABRecordRef)", 336, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCSourceGetPolicy(a1);
}

const void *ABCSourceGetPolicy(const void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t Property = (const void *)CPRecordGetProperty();
  if (!Property)
  {
    CFStringRef v3 = (const __CFString *)ABRecordCopyValue(a1, kABSourceConstraintsPathProperty);
    if (v3)
    {
      CFStringRef v4 = v3;
      uint64_t Property = (const void *)ABPolicyCreateFromDictionaryAtPath(v3);
      CFRelease(v4);
      if (Property) {
        goto LABEL_17;
      }
    }
    if (ABSourceIsContactProvider((uint64_t)a1))
    {
      AddressBooCFIndex k = ABRecordGetAddressBook();
      if (AddressBook)
      {
        if (ABAddressBookIgnoresContactProviderRestrictions(AddressBook))
        {
          ABPolicyCreatePermissive();
          uint64_t Property = v6;
          if (v6) {
            goto LABEL_17;
          }
        }
      }
    }
    if ((ABSourceIsContentReadonlyInCapabilityRestrictions((uint64_t)a1) & 1) != 0
      || ABSourceIsGuardianRestricted((uint64_t)a1)
      && (uint64_t v8 = ABRecordGetAddressBook()) != 0
      && !ABAddressBookIgnoresGuardianRestrictions(v8))
    {
      ABPolicyCreateReadOnly();
      uint64_t Property = v7;
      if (v7) {
        goto LABEL_17;
      }
    }
    ABPolicyCreatePermissive();
    uint64_t Property = v9;
    if (v9)
    {
LABEL_17:
      CPRecordInitializeProperty();
      CFRelease(Property);
    }
  }
  return Property;
}

uint64_t ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(void *a1, const __CFString *a2, int a3, int a4)
{
  if (ABLogAPIUsage())
  {
    CFRange v11 = _isMainThread();
    CFLocaleRef v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v11);
    uint64_t v13 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, _Bool)", 342, v12, @"%@", v14, v15, v16, v13);
    CFRelease(v12);
    if (a4)
    {
LABEL_3:
      if (a2)
      {
        CFArrayRef v8 = (const __CFArray *)ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier((uint64_t)a1, (uint64_t)a2);
        uint64_t v9 = ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(a1, 0, v8, a3);
        if (v8) {
          CFRelease(v8);
        }
        return v9;
      }
      else
      {
        return ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(a1, a3);
      }
    }
  }
  else if (a4)
  {
    goto LABEL_3;
  }
  uint64_t v17 = a1[2];
  CFStringRef v18 = ABCPersonClass;
  return ABCCopyArrayOfAllInstancesOfClassInAccountWithSortOrdering(v17, (uint64_t)v18, a2, a3);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrdering(void *a1, const __CFString *a2, int a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrdering(ABAddressBookRef, CFStringRef, ABPersonSortOrdering)", 368, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(a1, a2, a3, 0);
}

uint64_t ABCSourceTypeOfProperty(int a1)
{
  return *(unsigned int *)&ABCSourceClass[10][40 * a1 + 32];
}

void ABAddressBookSetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValue(ABAddressBookRef, CFStringRef, CFStringRef)", 111, v11, @"%@, key=%@, value=%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  if (a1 && *(void *)(a1 + 16)) {
    CPRecordStoreSetValueForProperty();
  }
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValue(ABAddressBookRef, CFStringRef, CFStringRef)", 118, @">> ", 0, v16, v17, v18, a9);
  }
}

uint64_t ABAddressBookCopyValue(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    CFStringRef v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValue(ABAddressBookRef, CFStringRef)", 123, v3, @"%@, key=%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (a1 && *(void *)(a1 + 16)) {
    uint64_t v8 = CPRecordStoreCopyValueForProperty();
  }
  else {
    uint64_t v8 = 0;
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValue(ABAddressBookRef, CFStringRef)", 131, @">> ", @"value=%@", v9, v10, v11, v8);
  }
  return v8;
}

uint64_t _CallStackSymbolsIncludeFrameworkWithName(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = 0;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(a1);
        }
        v6 |= [*(id *)(*((void *)&v10 + 1) + 8 * i) rangeOfString:objc_msgSend(NSString, "stringWithFormat:", @"^[ 0-9]*%@ .*$", a2), 1024 options] != 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v5 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t _CurrentProcessHasDirectDatabaseAccessEntitlement()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  CFErrorRef error = 0;
  int v1 = (void *)SecTaskCopyValueForEntitlement(v0, @"com.apple.Contacts.database-allow", &error);
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [v1 BOOLValue];
    if (!v0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  ABDiagnosticsEnabled();
  _ABLog2(3, (uint64_t)"BOOL _CurrentProcessHasDirectDatabaseAccessEntitlement(void)", 158, 0, @"Couldn't get entitlement value: %@", v5, v6, v7, (uint64_t)error);
  uint64_t v3 = 0;
  if (v0) {
LABEL_3:
  }
    CFRelease(v0);
LABEL_4:
  if (v2) {
    CFRelease(v2);
  }
  if (error) {
    CFRelease(error);
  }
  return v3;
}

void _VerifyDirectDatabaseAccessEntitlementPresence()
{
  if (_VerifyDirectDatabaseAccessEntitlementPresence_onceToken != -1) {
    dispatch_once(&_VerifyDirectDatabaseAccessEntitlementPresence_onceToken, &__block_literal_global_3);
  }
}

uint64_t ABAddressBookDirectoryOnlyKeepFamilyDatabasesWithDSIDs(void *a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)ABCAddressBookCopyDBDirectory();
  uint64_t v3 = (void *)[v2 stringByAppendingString:@"Family/"];
  CFRelease(v2);
  int v4 = open((const char *)[v3 fileSystemRepresentation], 32);
  if (v4 == -1)
  {
    ABDiagnosticsEnabled();
    __error();
    _ABLog2(3, (uint64_t)"void ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs(CFArrayRef)", 274, 0, @"error opening Family directory lock at path %@, errno %d", v5, v6, v7, (uint64_t)v3);
  }
  uint64_t v8 = [v3 stringByAppendingPathComponent:@"family.plist"];
  id v9 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithContentsOfFile:", v8), "mutableCopy");
  if (v9)
  {
    long long v10 = v9;
    int v44 = v4;
    id v11 = (id)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", @"Mappings"), "mutableCopy");
    long long v12 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    uint64_t v13 = [a1 countByEnumeratingWithState:&v46 objects:v57 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v47 != v15) {
            objc_enumerationMutation(a1);
          }
          uint64_t v17 = *(void *)(*((void *)&v46 + 1) + 8 * i);
          uint64_t v18 = [v11 objectForKey:v17];
          if (v18) {
            [v12 setObject:v18 forKey:v17];
          }
        }
        uint64_t v14 = [a1 countByEnumeratingWithState:&v46 objects:v57 count:16];
      }
      while (v14);
    }
    uint64_t v19 = [v11 count];
    if (v19 != [v12 count])
    {
      [v10 setObject:v12 forKeyedSubscript:@"Mappings"];
      CFIndex v20 = (void *)[MEMORY[0x1E4F28F98] dataWithPropertyList:v10 format:200 options:0 error:0];
      if (v20) {
        [v20 writeToFile:v8 atomically:0];
      }
    }
    size_t v21 = objc_msgSend((id)objc_msgSend(v12, "allValues"), "arrayByAddingObject:", @"family.plist");
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = __ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs_block_invoke;
    v45[3] = &unk_1E5988BB8;
    v45[4] = v3;
    CFStringRef v22 = objc_msgSend(v21, "_cn_map:", v45);
    int64_t v23 = (void *)ABCAddressBookCopyDBDirectory();
    BOOL v24 = (void *)[v23 stringByAppendingString:@"Family/"];
    CFRelease(v23);
    uint64_t v54 = 0;
    CFArrayRef v25 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "contentsOfDirectoryAtPath:error:", v24, &v54);
    if (!v25)
    {
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"void ABPrepareForDeletionOrDeleteAllDelegateDatabasesExcludingPaths(CFArrayRef)", 256, 0, @"error fetching family directory contents %@:", v26, v27, v28, v54);
    }
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v29 = [v25 countByEnumeratingWithState:&v50 objects:v58 count:16];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = *(void *)v51;
      do
      {
        for (uint64_t j = 0; j != v30; ++j)
        {
          if (*(void *)v51 != v31) {
            objc_enumerationMutation(v25);
          }
          uint64_t v33 = [v24 stringByAppendingPathComponent:*(void *)(*((void *)&v50 + 1) + 8 * j)];
          if (([v22 containsObject:v33] & 1) == 0)
          {
            char v55 = 0;
            if (!ABCAddressBookIsDirectoryMarkedForDeletion(v33, &v55))
            {
              ABCAddressBookMarkDirectoryForDeletion(v33);
              continue;
            }
            if (v55)
            {
              uint64_t v56 = 0;
              char v34 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v33, &v56);
              ABDiagnosticsEnabled();
              if (v34)
              {
                _ABLog2(5, (uint64_t)"void ABAddressBookDeleteDatabaseAtPath(CFStringRef)", 231, 0, @"ABAddressBookDeleteDatabaseAtURL deleted database directory at URL: %@.", v35, v36, v37, v33);
                continue;
              }
              uint64_t v43 = v33;
              int v38 = 3;
              CFArrayRef v39 = "void ABAddressBookDeleteDatabaseAtPath(CFStringRef)";
              uint64_t v40 = 229;
              CFMutableArrayRef v41 = @"could not delete database at path:%@ :%@";
            }
            else
            {
              if (!ABDiagnosticsEnabled()) {
                continue;
              }
              int v38 = 6;
              CFArrayRef v39 = "void ABAddressBookPrepareDirectoryForDeletionOrDeleteIfPossibleAtPath(CFStringRef)";
              uint64_t v40 = 244;
              CFMutableArrayRef v41 = @"Database already marked for deletion but not yet eligible for unlink. Delete will not occur until this call is repeated on a subsequent system reboot.";
            }
            _ABLog2(v38, (uint64_t)v39, v40, 0, (uint64_t)v41, v35, v36, v37, v43);
          }
        }
        uint64_t v30 = [v25 countByEnumeratingWithState:&v50 objects:v58 count:16];
      }
      while (v30);
    }
    int v4 = v44;
  }
  return close(v4);
}

ABAddressBookRef ABAddressBookCreateWithDatabaseDirectoryAndForceInProcessMigrationAndResetSortKeys(const __CFString *a1, int a2, int a3)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, a2, 0, a3);
}

ABAddressBookRef ABAddressBookCreateWithDatabaseDirectoryAndForceInProcessMigration(const __CFString *a1, int a2)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, a2, 0, 1);
}

ABAddressBookRef ABAddressBookCreateWithDatabaseDirectoryAndForceInProcessLinking(const __CFString *a1, int a2)
{
  return ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(a1, 0, a2, 1);
}

ABAddressBookRef ABAddressBookCreate(void)
{
  if (ABLogAPIUsage())
  {
    id v11 = _isMainThread();
    uint64_t v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreate(void)", 476, v0, 0, v1, v2, v3, (uint64_t)v11);
    CFRelease(v0);
  }
  BOOL v4 = !ABLinkedOnOrAfter() && !ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled();
  uint64_t v5 = ABAddressBookCreateWithOptionsAndPolicy(0, v4, 0);
  if (ABLogAPIUsage())
  {
    uint64_t v6 = ABLogAddressBook((uint64_t)v5);
    _ABLog2(6, (uint64_t)"ABAddressBookRef ABAddressBookCreate(void)", 484, @">> ", @"%@", v7, v8, v9, v6);
  }
  return v5;
}

BOOL ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled()
{
  if (ABLogAPIUsage())
  {
    long long v10 = _isMainThread();
    uint64_t v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled(void)", 1540, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  CFPreferencesSynchronize(@".GlobalPreferences", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"ABForceNullDatabaseForAccessDenied", @".GlobalPreferences", 0);
  if (ABLogAPIUsage())
  {
    uint64_t v5 = ABLogStringForBool(AppBooleanValue != 0);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled(void)", 1546, @">> ", @"override=%@", v6, v7, v8, (uint64_t)v5);
  }
  return AppBooleanValue != 0;
}

CFTypeRef ABAddressBookCopyDatabaseDirectory(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyDatabaseDirectory(ABAddressBookRef)", 490, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFTypeRef v8 = ABCAddressBookCopyAddressBookDBDirectory(a1);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyDatabaseDirectory(ABAddressBookRef)", 494, @">> ", @"databaseDirectory=%@", v9, v10, v11, (uint64_t)v8);
  }
  return v8;
}

void ABAddressBookSetIsBackgroundProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIsBackgroundProcess(ABAddressBookRef, _Bool)", 500, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseSetShouldYieldWhenRequested();
  CPSqliteDatabaseSetShouldRequestUnlock();
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIsBackgroundProcess(ABAddressBookRef, _Bool)", 507, @">> ", 0, v16, v17, v18, a9);
  }
}

void ABAddressBookRegisterYieldBlock(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v11);
    uint64_t v13 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterYieldBlock(ABAddressBookRef, void (^)(void))", 512, v12, @"%@", v14, v15, v16, v13);
    CFRelease(v12);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 280));
  uint64_t v17 = *(const void **)(a1 + 272);
  if (a2) {
    uint64_t v18 = _Block_copy(a2);
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)(a1 + 272) = v18;
  if (v17) {
    _Block_release(v17);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 280));
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookRegisterYieldBlock(ABAddressBookRef, void (^)(void))", 527, @">> ", 0, v19, v20, v21, a9);
  }
}

CFStringRef ABAddressBookSetSaveTransactionIdentifier(CFStringRef result, CFStringRef theString)
{
  if (result)
  {
    CFStringRef v3 = result;
    info = (const void *)result[11].info;
    if (info) {
      CFRelease(info);
    }
    uint64_t result = 0;
    if (theString) {
      uint64_t result = CFStringCreateCopy(0, theString);
    }
    v3[11].info = (uint64_t)result;
  }
  return result;
}

CFStringRef ABAddressBookCopySaveTransactionIdentifier(uint64_t a1)
{
  if (a1 && (CFStringRef v1 = *(const __CFString **)(a1 + 360)) != 0) {
    return CFStringCreateCopy(0, v1);
  }
  else {
    return 0;
  }
}

uint64_t ABAddressBookSetIgnoresGuardianRestrictions(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      int v2 = 0x200000;
    }
    else {
      int v2 = 0;
    }
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFFDFFFFF | v2;
  }
  return result;
}

BOOL ABAddressBookIgnoresGuardianRestrictions(uint64_t a1)
{
  return a1 && (*(unsigned char *)(a1 + 378) & 0x20) != 0;
}

uint64_t ABAddressBookSetIgnoresContactProviderRestrictions(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      int v2 = 0x1000000;
    }
    else {
      int v2 = 0;
    }
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFEFFFFFF | v2;
  }
  return result;
}

BOOL ABAddressBookIgnoresContactProviderRestrictions(uint64_t a1)
{
  return a1 && (*(unsigned char *)(a1 + 379) & 1) != 0;
}

uint64_t ABAddressBookSetSuppressChangeNotifications(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      int v2 = 0x800000;
    }
    else {
      int v2 = 0;
    }
    *(_DWORD *)(result + 376) = *(_DWORD *)(result + 376) & 0xFF7FFFFF | v2;
  }
  return result;
}

BOOL ABAddressBookHasMeCardChanges(uint64_t a1)
{
  return a1 && (*(unsigned char *)(a1 + 378) & 4) != 0;
}

BOOL ABAddressBookSave(ABAddressBookRef addressBook, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSave(ABAddressBookRef, CFErrorRef *)", 639, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (ABAddressBookIsAccessPermitted(error)) {
    int v10 = ABCSave((uint64_t)addressBook);
  }
  else {
    int v10 = 0;
  }
  if (ABLogAPIUsage())
  {
    uint64_t v11 = ABLogStringForBool(v10);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSave(ABAddressBookRef, CFErrorRef *)", 646, @">> ", @"result=%@", v12, v13, v14, (uint64_t)v11);
  }
  return v10;
}

BOOL ABAddressBookIsAccessPermitted(CFErrorRef *a1)
{
  int v2 = ABTCCIsAccessGranted();
  int v3 = v2;
  if (a1 && !v2) {
    *a1 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 1, 0);
  }
  return v3 != 0;
}

BOOL ABAddressBookHasUnsavedChanges(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookHasUnsavedChanges(ABAddressBookRef)", 652, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (addressBook) {
    LODWORD(addressBook) = CPRecordStoreHasUnsavedChanges();
  }
  if (ABLogAPIUsage())
  {
    uint64_t v8 = ABLogStringForBool((int)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookHasUnsavedChanges(ABAddressBookRef)", 660, @">> ", @"result=%@", v9, v10, v11, (uint64_t)v8);
  }
  return (char)addressBook;
}

BOOL ABAddressBookAddRecord(ABAddressBookRef addressBook, ABRecordRef record, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookAddRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 666, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (ABAddressBookIsAccessPermitted(error)) {
    int v12 = ABCAddRecord(addressBook, record, (CFTypeRef *)error);
  }
  else {
    int v12 = 0;
  }
  if (ABLogAPIUsage())
  {
    uint64_t v13 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookAddRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 673, @">> ", @"result=%@", v14, v15, v16, (uint64_t)v13);
  }
  return v12;
}

BOOL ABAddressBookRemoveRecord(ABAddressBookRef addressBook, ABRecordRef record, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookRemoveRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 679, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (ABAddressBookIsAccessPermitted(error)) {
    int v12 = ABCRemoveRecord((uint64_t)addressBook, record, (const void **)error);
  }
  else {
    int v12 = 0;
  }
  if (ABLogAPIUsage())
  {
    uint64_t v13 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookRemoveRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)", 686, @">> ", @"result=%@", v14, v15, v16, (uint64_t)v13);
  }
  return v12;
}

uint64_t ABAddressBookCopyUniqueIdentifier(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)", 692, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  uint64_t v8 = *(const void **)(a1 + 64);
  if (v8
    || (CPRecordStoreGetDatabase(),
        uint64_t v8 = (const void *)CPSqliteDatabaseCopyUniqueIdentifier(),
        (*(void *)(a1 + 64) = v8) != 0))
  {
    CFRetain(v8);
    uint64_t v9 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (ABDiagnosticsEnabled()) {
    _ABLog2(7, (uint64_t)"CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)", 704, 0, @"returning %@", v10, v11, v12, v9);
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)", 705, @">> ", @"uniqueIdentifier=%@", v13, v14, v15, v9);
  }
  return v9;
}

void ABAddressBookSetUniqueIdentifierToNULL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetUniqueIdentifierToNULL(ABAddressBookRef)", 711, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  uint64_t v16 = *(const void **)(a1 + 64);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 64) = 0;
  }
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookSetUniqueIdentifierToNULL(ABAddressBookRef)", 719, @">> ", 0, v17, v18, v19, a9);
  }
}

CFURLRef ABAddressBookCopyBundleURL()
{
  uint64_t v0 = (__CFBundle *)_ABBundle();
  return CFBundleCopyBundleURL(v0);
}

CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef label)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef)", 743, v3, @"label=%@", v4, v5, v6, (uint64_t)label);
    CFRelease(v3);
  }
  CFStringRef v7 = ABAddressBookCopyLocalizedLabelAllowingAbbreviations(label, 1);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef)", 747, @">> ", @"localizedLabel=%@", v8, v9, v10, (uint64_t)v7);
  }
  return v7;
}

CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(const __CFString *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    ABLogStringForBool(a2);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(CFStringRef, _Bool)", 753, v5, @"label=%@, allowAbbrevations=%@", v6, v7, v8, (uint64_t)a1);
    CFRelease(v5);
  }
  uint64_t v9 = (__CFBundle *)_ABBundle();
  if (!a2)
  {
    CFStringRef v12 = CFBundleCopyLocalizedString(v9, a1, a1, @"NonAbbreviated");
    goto LABEL_8;
  }
  CFStringRef v10 = CFBundleCopyLocalizedString(v9, a1, @"notFound", @"Localized");
  if (CFStringCompare(v10, @"notFound", 0)) {
    goto LABEL_9;
  }
  CFRelease(v10);
  uint64_t v11 = (const void *)[MEMORY[0x1E4F5A4A0] localizedStringForPostalAddressString:a1 returningNilIfNotFound:0];
  if (v11)
  {
    CFStringRef v12 = (const __CFString *)CFRetain(v11);
LABEL_8:
    CFStringRef v10 = v12;
LABEL_9:
    if (v10) {
      goto LABEL_11;
    }
  }
  CFStringRef v10 = (const __CFString *)CFRetain(&stru_1EF03E278);
LABEL_11:
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(CFStringRef, _Bool)", 772, @">> ", @"localizedLabel=%@", v13, v14, v15, (uint64_t)v10);
  }
  return v10;
}

void *ABAddressBookCopyLocalizedStringsForLanguageArray(void *a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    id v4 = ABLogStringForStringArray(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)", 778, v3, @"languageArray=%@", v5, v6, v7, (uint64_t)v4);
    CFRelease(v3);
  }
  if (a1)
  {
    uint64_t v8 = (__CFBundle *)_ABBundle();
    CFArrayRef v9 = CFBundleCopyBundleLocalizations(v8);
    if (v9 && (CFArrayRef v10 = v9, v11 = CFBundleCopyLocalizationsForPreferences(v9, (CFArrayRef)a1), CFRelease(v10), v11))
    {
      if (CFArrayGetCount(v11) < 1)
      {
        a1 = 0;
      }
      else
      {
        CFArrayGetValueAtIndex(v11, 0);
        a1 = (void *)CFBundleCopyLocalizedStringTableForLocalization();
      }
      CFRelease(v11);
    }
    else
    {
      a1 = 0;
    }
  }
  if (ABDiagnosticsEnabled())
  {
    uint64_t v12 = ABLogStringForDictionary(a1);
    _ABLog2(7, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)", 801, 0, @"dictionary={\n%@\n}", v13, v14, v15, v12);
  }
  if (ABLogAPIUsage())
  {
    uint64_t v16 = [a1 count];
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)", 802, @">> ", @"localized strings count = %ld", v17, v18, v19, v16);
  }
  return a1;
}

void ABAddressBookBeginExclusiveRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v10 = _isMainThread();
    CFArrayRef v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookBeginExclusiveRead(ABAddressBookRef)", 810, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCAddressBookBeginExclusiveRead(a1);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookBeginExclusiveRead(ABAddressBookRef)", 812, @">> ", 0, v16, v17, v18, a9);
  }
}

void ABAddressBookEndExclusiveRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v10 = _isMainThread();
    CFArrayRef v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookEndExclusiveRead(ABAddressBookRef)", 817, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCAddressBookEndExclusiveRead(a1);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookEndExclusiveRead(ABAddressBookRef)", 819, @">> ", 0, v16, v17, v18, a9);
  }
}

void ABAddressBookProcessAddedRecords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v10 = _isMainThread();
    CFArrayRef v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookProcessAddedRecords(ABAddressBookRef)", 824, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCProcessAddedRecords(a1);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookProcessAddedRecords(ABAddressBookRef)", 826, @">> ", 0, v16, v17, v18, a9);
  }
}

void ABProcessAddedImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v10 = _isMainThread();
    CFArrayRef v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABProcessAddedImages(ABAddressBookRef)", 833, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCProcessAddedImages(a1);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABProcessAddedImages(ABAddressBookRef)", 835, @">> ", 0, v16, v17, v18, a9);
  }
}

void ABInvalidateCachedImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v10 = _isMainThread();
    CFArrayRef v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABInvalidateCachedImages(ABAddressBookRef)", 842, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  ABCInvalidateCachedImages(a1);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABInvalidateCachedImages(ABAddressBookRef)", 844, @">> ", 0, v16, v17, v18, a9);
  }
}

uint64_t ABAddressBookFlushStatementCache(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookFlushStatementCache(ABAddressBookRef)", 856, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    CPRecordStoreGetDatabase();
    uint64_t result = CPSqliteDatabaseConnectionForWriting();
    if (result)
    {
      return MEMORY[0x1F4109710]();
    }
  }
  return result;
}

uint64_t ABAddressBookSaveWithConflictPolicy(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSaveWithConflictPolicy(ABAddressBookRef, ABConflictPolicy, CFErrorRef *)", 871, v7, @"%@, policy=%i, error=%p", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (ABAddressBookIsAccessPermitted(a3)) {
    uint64_t v12 = ABCAddressBookSaveWithConflictPolicy(a1, a2, a3);
  }
  else {
    uint64_t v12 = 0;
  }
  if (ABLogAPIUsage())
  {
    uint64_t v13 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSaveWithConflictPolicy(ABAddressBookRef, ABConflictPolicy, CFErrorRef *)", 878, @">> ", @"result=%@", v14, v15, v16, (uint64_t)v13);
  }
  return v12;
}

CFMutableArrayRef ABAddressBookCopyAllLabels(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabels(ABAddressBookRef)", 884, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFMutableArrayRef v8 = ABAddressBookCopyAllLabelsForProperty(a1, 0xFFFFFFFFLL);
  if (ABLogAPIUsage())
  {
    id v9 = ABLogStringForStringArray(v8);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabels(ABAddressBookRef)", 886, @">> ", @"labels=%@", v10, v11, v12, (uint64_t)v9);
  }
  return v8;
}

CFMutableArrayRef ABAddressBookCopyAllLabelsForProperty(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabelsForProperty(ABAddressBookRef, ABPropertyID)", 892, v5, @"%@, property=%i", v7, v8, v9, v6);
    CFRelease(v5);
  }
  CFMutableArrayRef v10 = ABCCopyAllLabelsForProperty(a1, a2);
  if (ABLogAPIUsage())
  {
    id v11 = ABLogStringForStringArray(v10);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyAllLabelsForProperty(ABAddressBookRef, ABPropertyID)", 894, @">> ", @"labels=%@", v12, v13, v14, (uint64_t)v11);
  }
  return v10;
}

void ABAddressBookDeleteLabel(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    id v11 = _isMainThread();
    uint64_t v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v11);
    uint64_t v13 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookDeleteLabel(ABAddressBookRef, CFStringRef)", 900, v12, @"%@, label=%@", v14, v15, v16, v13);
    CFRelease(v12);
  }
  ABCDeleteLabel(a1, a2);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookDeleteLabel(ABAddressBookRef, CFStringRef)", 902, @">> ", 0, v17, v18, v19, a9);
  }
}

void ABAddressBookSetIntegerProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFMutableArrayRef v10 = _isMainThread();
    id v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIntegerProperty(ABAddressBookRef, CFStringRef, int)", 919, v11, @"%@, key=%@, value=%i", v13, v14, v15, v12);
    CFRelease(v11);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  CPSqliteConnectionSetIntegerForProperty();
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookSetIntegerProperty(ABAddressBookRef, CFStringRef, int)", 925, @">> ", 0, v16, v17, v18, a9);
  }
}

uint64_t ABAddressBookCopyValueForProperty(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValueForProperty(ABAddressBookRef, CFStringRef)", 930, v3, @"%@, key=%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  uint64_t v8 = CPSqliteConnectionCopyValueForProperty();
  if (ABLogAPIUsage())
  {
    uint64_t v12 = @"nil";
    if (v8) {
      uint64_t v12 = (__CFString *)v8;
    }
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressBookCopyValueForProperty(ABAddressBookRef, CFStringRef)", 936, @">> ", @"value=%@", v9, v10, v11, (uint64_t)v12);
  }
  return v8;
}

void ABAddressBookSetValueForProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValueForProperty(ABAddressBookRef, CFStringRef, CFStringRef)", 942, v11, @"%@, key=%@, value=%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  CPSqliteConnectionSetValueForProperty();
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookSetValueForProperty(ABAddressBookRef, CFStringRef, CFStringRef)", 948, @">> ", 0, v16, v17, v18, a9);
  }
}

uint64_t ABAddressBookGetNextSequenceNumber(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetNextSequenceNumber(ABAddressBookRef)", 965, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  uint64_t v8 = ABAddressBookGetSequenceNumber(a1) + 1;
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"int ABAddressBookGetNextSequenceNumber(ABAddressBookRef)", 967, @">> ", @"nextSequenceNumber=%i", v9, v10, v11, v8);
  }
  return v8;
}

uint64_t ABAddressBookGetImagesSequenceNumber(const __CFString *a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"int ABAddressBookGetImagesSequenceNumber(ABAddressBookRef)", 973, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  ABCAddressBookGetImageStore(a1);
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"int ABAddressBookGetImagesSequenceNumber(ABAddressBookRef)", 978, @">> ", @"sequenceNumber=%i", v9, v10, v11, SequenceNumber);
  }
  return SequenceNumber;
}

__CFDictionary *ABAddressBookCopyChangesSinceSequenceNumber(uint64_t a1, int a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyChangesSinceSequenceNumber(ABAddressBookRef, int)", 991, v5, @"%@, sequenceNumber=%i", v7, v8, v9, v6);
    CFRelease(v5);
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v12 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"ABChangesToLabels", v12);
    CFRelease(v12);
  }
  int valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v13 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"ABChangesToPhoneLabels", v13);
    CFRelease(v13);
  }
  int valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v14 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"ABChangesToEmailLabels", v14);
    CFRelease(v14);
  }
  int valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v15 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"ABChangesToNames", v15);
    CFRelease(v15);
  }
  int valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v16 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"ABChangesToBirthdays", v16);
    CFRelease(v16);
  }
  int valuePtr = ABAddressBookGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v17 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"ABChangesToMeCards", v17);
    CFRelease(v17);
  }
  if (ABLogAPIUsage())
  {
    uint64_t v18 = ABLogStringForDictionary(Mutable);
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookCopyChangesSinceSequenceNumber(ABAddressBookRef, int)", 1037, @">> ", @"changes={\n%@\n}", v19, v20, v21, v18);
  }
  return Mutable;
}

uint64_t ABAddressBookForceResetSortData(uint64_t a1)
{
  CPRecordStoreGetDatabase();
  uint64_t result = CPSqliteDatabaseConnectionForReading();
  if (result)
  {
    int v3 = (void *)[MEMORY[0x1E4F1C9C8] date];
    uint64_t v4 = v3;
    if (ABAddressBookForceResetSortData_lastForceResetAttempt)
    {
      uint64_t result = objc_msgSend(v3, "timeIntervalSinceDate:");
      if (v5 < 600.0) {
        return result;
      }
      uint64_t v6 = (void *)ABAddressBookForceResetSortData_lastForceResetAttempt;
    }
    else
    {
      uint64_t v6 = 0;
    }

    ABAddressBookForceResetSortData_lastForceResetAttempt = v4;
    CPSqliteConnectionSetIntegerForProperty();
    return ABCStartSortDataReset(a1);
  }
  return result;
}

void ABAddressBookResetSortDataInProcessIfNeeded()
{
  CFStringRef v0 = (const __CFString *)ABCAddressBookCopyDBDirectory();
  ABAddressBookRef v1 = ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(v0, 0, 0, 0);
  CFRelease(v0);
  if (v1)
  {
    if ((ABCIsSortDataValid((uint64_t)v1, 0) & 1) == 0) {
      ABCResetSortData((uint64_t)v1, 100);
    }
    CFRelease(v1);
  }
}

BOOL ABAddressBookSetMeCard(const void *a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogStringForPerson(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMeCard(ABRecordRef)", 1174, v3, @"me=%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  uint64_t v8 = ABCGetAddressBookForRecord();
  BOOL v9 = ABAddressBookSetMe(v8, a1);
  if (ABLogAPIUsage())
  {
    CFAllocatorRef v10 = ABLogStringForBool(v9);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMeCard(ABRecordRef)", 1179, @">> ", @"result=%@", v11, v12, v13, (uint64_t)v10);
  }
  return v9;
}

BOOL ABAddressBookSetMe(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    ABLogStringForPerson(a2);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMe(ABAddressBookRef, ABRecordRef)", 1201, v5, @"%@, me=%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (a2)
  {
    ABRecordRef v10 = ABPersonCopySource(a2);
    uint64_t v11 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v11, OS_LOG_TYPE_DEFAULT, "AddressBook will set the Me card", buf, 2u);
    }
    if (v10)
    {
      CFTypeRef cf = 0;
      BOOL v12 = ABSourceSetMe(v10, a2, (CFAllocatorRef *)&cf);
      uint64_t v13 = ABOSLogMeCardChanges();
      CFNumberRef v14 = v13;
      if (v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v35 = 0;
          _os_log_impl(&dword_19DCDB000, v14, OS_LOG_TYPE_INFO, "AddressBook did successfully set the Me card", v35, 2u);
        }
        uint64_t RecordID = ABRecordGetRecordID(v10);
        ABAddressBookSetIntegerProperty(a1, @"MeSourceID", RecordID, v16, v17, v18, v19, v20, v33);
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        ABAddressBookSetMe_cold_2((__CFString **)&cf, v14);
      }
      if (cf) {
        CFRelease(cf);
      }
      CFRelease(v10);
    }
    else
    {
      uint64_t v27 = ABOSLogMeCardChanges();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        ABAddressBookSetMe_cold_1();
      }
      BOOL v12 = 0;
    }
  }
  else
  {
    uint64_t v21 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v34 = 0;
      _os_log_impl(&dword_19DCDB000, v21, OS_LOG_TYPE_DEFAULT, "AddressBook will clear the existing Me card", v34, 2u);
    }
    ABAddressBookSetIntegerProperty(a1, @"MeSourceID", 0xFFFFFFFFLL, v22, v23, v24, v25, v26, v33);
    ABCDBContextLogChangeForPerson(*(void *)(a1 + 16), 0, 0xAu);
    BOOL v12 = 1;
  }
  if (ABLogAPIUsage())
  {
    uint64_t v28 = ABLogStringForBool(v12);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetMe(ABAddressBookRef, ABRecordRef)", 1230, @">> ", @"success=%@", v29, v30, v31, (uint64_t)v28);
  }
  return v12;
}

CFArrayRef ABAddressBookCopyArrayOfAllMeCards(const void *a1)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    int v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllMeCards(ABAddressBookRef)", 1185, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFTypeRef v8 = ABAddressBookCopyMe(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    CFArrayRef v10 = ABPersonCopyArrayOfAllLinkedPeople(v8);
    CFRelease(v9);
  }
  else
  {
    CFArrayRef v10 = 0;
  }
  if (ABLogAPIUsage())
  {
    id v11 = ABLogStringForPeople(v10);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllMeCards(ABAddressBookRef)", 1195, @">> ", @"meCards=%@", v12, v13, v14, (uint64_t)v11);
  }
  return v10;
}

void ABAddressBookClearPreferredMeSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ABAddressBookSetIntegerProperty(a1, @"MeSourceID", 0xFFFFFFFFLL, a4, a5, a6, a7, a8, v10);
  uint64_t v9 = *(void *)(a1 + 16);
  ABCDBContextLogChangeForPerson(v9, 0, 0xAu);
}

BOOL ABAddressBookSetBestMeIfNeeded(const void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (ABLogAPIUsage())
  {
    CFTypeRef v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetBestMeIfNeeded(ABAddressBookRef, CFStringRef, CFStringRef, CFStringRef)", 1358, v9, @"%@, first=%@, last=%@, email=%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  CFTypeRef v14 = ABAddressBookCopyMe(a1);
  if (v14)
  {
    CFRelease(v14);
    BOOL v15 = 0;
    goto LABEL_44;
  }
  if (![a2 length]) {
    a2 = 0;
  }
  if (![a3 length]) {
    a3 = 0;
  }
  id v46 = 0;
  id v47 = 0;
  if ([a4 length]) {
    uint64_t v16 = (uint64_t)a4;
  }
  else {
    uint64_t v16 = 0;
  }
  int v44 = 0;
  CFDictionaryRef v45 = 0;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __ABAddressBookSetBestMeIfNeeded_block_invoke;
  v43[3] = &__block_descriptor_40_e42_v28__0__ABSearchOperation_8__NSArray_16B24l;
  v43[4] = Current;
  uint64_t v18 = objc_opt_new();
  [v18 setMaxConcurrentOperationCount:1];
  _addOperation((uint64_t)a2, kABPersonFirstNameProperty, (uint64_t)&v47, (uint64_t)v43, (uint64_t)a1, v18);
  uint64_t v40 = a3;
  _addOperation((uint64_t)a3, kABPersonLastNameProperty, (uint64_t)&v46, (uint64_t)v43, (uint64_t)a1, v18);
  _addOperation(v16, kABPersonEmailProperty, (uint64_t)&v45, (uint64_t)v43, (uint64_t)a1, v18);
  uint64_t v19 = ABPhoneUtilitiesCopyDevicePhoneNumber();
  if (v19)
  {
    uint64_t v20 = v19;
    if (CFStringGetLength((CFStringRef)v19))
    {
      uint64_t v21 = objc_opt_new();
      uint64_t active = (void *)CPPhoneNumberCopyActiveCountryCode();
      objc_msgSend(v21, "setPredicate:", +[ABSearchOperation personPredicateWithPhoneLike:countryHint:addressBook:](ABSearchOperation, "personPredicateWithPhoneLike:countryHint:addressBook:", v20, active, a1));

      [v21 setContext:&v44];
      [v21 setProgressBlock:v43];
      [v21 setAddressBook:a1];
      [v18 addOperation:v21];
    }
    CFRelease(v20);
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v23 = (void *)[v18 operations];
  uint64_t v24 = [v23 countByEnumeratingWithState:&v48 objects:v52 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    while (2)
    {
      uint64_t v26 = *(void *)v49;
LABEL_19:
      uint64_t v27 = 0;
      while (1)
      {
        if (*(void *)v49 != v26) {
          objc_enumerationMutation(v23);
        }
        if (![*(id *)(*((void *)&v48 + 1) + 8 * v27) isFinished]) {
          break;
        }
        if (v25 == ++v27)
        {
          uint64_t v25 = [v23 countByEnumeratingWithState:&v48 objects:v52 count:16];
          if (v25) {
            goto LABEL_19;
          }
          goto LABEL_27;
        }
      }
      uint64_t v28 = objc_opt_new();
      CFRunLoopRunInMode(kABSearchOperationRunloopMode, 10.0, 1u);

      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      uint64_t v23 = (void *)[v18 operations];
      uint64_t v25 = [v23 countByEnumeratingWithState:&v48 objects:v52 count:16];
      if (v25) {
        continue;
      }
      break;
    }
  }
LABEL_27:

  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  uint64_t v30 = objc_opt_new();
  v52[0] = 0;
  id v31 = v47;
  if (a2 && v40 && v47 && v46)
  {
    objc_msgSend(v47, "intersectSet:");

    id v46 = v47;
    id v31 = v47;
  }
  _countInstancesOfRecord(Mutable, v31, v52, v30);
  _countInstancesOfRecord(Mutable, v46, v52, v30);
  _countInstancesOfRecord(Mutable, v45, v52, v30);
  _countInstancesOfRecord(Mutable, v44, v52, v30);
  if ((unint64_t)[v30 count] >= 2)
  {
    BOOL v32 = objc_opt_new();
    v42[0] = MEMORY[0x1E4F143A8];
    v42[1] = 3221225472;
    v42[2] = __ABAddressBookSetBestMeIfNeeded_block_invoke_2;
    v42[3] = &unk_1E5988B68;
    v42[4] = v32;
    [v30 enumerateObjectsUsingBlock:v42];
    if ([v32 count])
    {
      ABRecordRef v33 = ABAddressBookCopyDefaultSource(a1);
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 3221225472;
      v41[2] = __ABAddressBookSetBestMeIfNeeded_block_invoke_3;
      v41[3] = &__block_descriptor_40_e11_q24__0_8_16l;
      v41[4] = v33;
      [v30 sortUsingComparator:v41];
      if (v33) {
        CFRelease(v33);
      }
      char v34 = (const void *)[v30 lastObject];
    }
    else
    {
      char v34 = 0;
    }

    if (!v34) {
      goto LABEL_41;
    }
LABEL_38:
    BOOL v15 = ABAddressBookSetMe((uint64_t)a1, v34);
    goto LABEL_42;
  }
  char v34 = (const void *)[v30 lastObject];
  if (v34) {
    goto LABEL_38;
  }
LABEL_41:
  BOOL v15 = 0;
LABEL_42:

  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_44:
  if (ABLogAPIUsage())
  {
    uint64_t v35 = ABLogStringForBool(v15);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetBestMeIfNeeded(ABAddressBookRef, CFStringRef, CFStringRef, CFStringRef)", 1487, @">> ", @"changed=%@", v36, v37, v38, (uint64_t)v35);
  }
  return v15;
}

void __ABAddressBookSetBestMeIfNeeded_block_invoke(uint64_t a1, void *a2, void *a3, char a4)
{
  uint64_t v7 = (void **)[a2 context];
  if ([a3 count])
  {
    CFTypeRef v8 = *v7;
    if (!*v7)
    {
      CFTypeRef v8 = objc_opt_new();
      *uint64_t v7 = v8;
    }
    [v8 addObjectsFromArray:a3];
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v9 = *(__CFRunLoop **)(a1 + 32);
    CFRunLoopStop(v9);
  }
}

void _addOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1)
  {
    id v12 = (id)objc_opt_new();
    objc_msgSend(v12, "setPredicate:", +[ABSearchOperation personPredicateWithValue:comparison:forProperty:addressBook:](ABSearchOperation, "personPredicateWithValue:comparison:forProperty:addressBook:", a1, 0, a2, a5));
    [v12 setContext:a3];
    [v12 setProgressBlock:a4];
    [v12 setAddressBook:a5];
    [a6 addOperation:v12];
  }
}

uint64_t _countInstancesOfRecord(const __CFDictionary *a1, void *a2, _DWORD *a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)v15;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(a2);
        }
        id v12 = *(const void **)(*((void *)&v14 + 1) + 8 * v11);
        uint64_t v13 = (const void *)(CFDictionaryGetValue(a1, v12) + 1);
        if (v13 != *a3)
        {
          if (v13 <= *a3) {
            goto LABEL_10;
          }
          *a3 = v13;
          [a4 removeAllObjects];
        }
        [a4 addObject:v12];
LABEL_10:
        CFDictionarySetValue(a1, v12, v13);
        ++v11;
      }
      while (v9 != v11);
      uint64_t result = [a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v9 = result;
    }
    while (result);
  }
  return result;
}

void __ABAddressBookSetBestMeIfNeeded_block_invoke_2(uint64_t a1, ABRecordRef person, uint64_t a3, unsigned char *a4)
{
  ABRecordRef v6 = ABPersonCopySource(person);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = [*(id *)(a1 + 32) containsObject:v6];
    uint64_t v9 = *(void **)(a1 + 32);
    if (v8)
    {
      [v9 removeAllObjects];
      *a4 = 1;
    }
    else
    {
      [v9 addObject:v7];
    }
    CFRelease(v7);
  }
}

uint64_t __ABAddressBookSetBestMeIfNeeded_block_invoke_3(uint64_t a1, ABRecordRef person, const void *a3)
{
  ABRecordRef v4 = *(ABRecordRef *)(a1 + 32);
  ABRecordRef v5 = ABPersonCopySource(person);
  ABRecordRef v6 = ABPersonCopySource(a3);
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v10 = 0;
    if (!v5) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 1;
    if (!v5) {
      goto LABEL_23;
    }
LABEL_22:
    CFRelease(v5);
    goto LABEL_23;
  }
  if (v6 != v4)
  {
    if (v5 && v6)
    {
      int IntValue = ABRecordGetIntValue((uint64_t)v5, kABSourceTypeProperty);
      int v9 = ABRecordGetIntValue((uint64_t)v7, kABSourceTypeProperty);
      if ((int)(IntValue & 0xFEFFFFFF) <= (int)(v9 & 0xFEFFFFFF))
      {
        if ((int)(v9 & 0xFEFFFFFF) <= (int)(IntValue & 0xFEFFFFFF)) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = -1;
        }
      }
      else
      {
        uint64_t v10 = 1;
      }
    }
    else
    {
      if (v5) {
        uint64_t v10 = v6 == 0;
      }
      else {
        uint64_t v10 = -1;
      }
      if (!v5) {
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  uint64_t v10 = -1;
  if (v5) {
    goto LABEL_22;
  }
LABEL_23:
  if (v7) {
    CFRelease(v7);
  }
  return v10;
}

ABAuthorizationStatus ABAddressBookGetAuthorizationStatus(void)
{
  int v0 = ABTCCIsAccessRestricted();
  if (ABTCCIsAccessUnknown()) {
    return (unint64_t)(v0 != 0);
  }
  if (ABTCCIsAccessDenied())
  {
    if (v0) {
      return 1;
    }
    else {
      return 2;
    }
  }
  else if (ABTCCIsAccessGranted())
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef addressBook, ABAddressBookRequestAccessCompletionHandler completion)
{
  if (ABLogAPIUsage())
  {
    ABRecordRef v4 = _isMainThread();
    ABRecordRef v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef, ABAddressBookRequestAccessCompletionHandler)", 1509, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  ABTCCRequestAccessWithCompletion((uint64_t)completion);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef, ABAddressBookRequestAccessCompletionHandler)", 1511, @">> ", 0, v10, v11, v12, v14);
  }
}

BOOL ABAddressBookIsAvailable()
{
  if (ABLogAPIUsage())
  {
    ABRecordRef v5 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookIsAvailable(void)", 1516, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABTCCIsAccessGranted() != 0;
}

BOOL ABAddressBookIsNeverAvailable()
{
  if (ABLogAPIUsage())
  {
    ABRecordRef v5 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookIsNeverAvailable(void)", 1522, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABTCCIsAccessDenied();
}

void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    long long v17 = _isMainThread();
    uint64_t v10 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(CFPropertyListRef)", 1552, v10, 0, v11, v12, v13, (uint64_t)v17);
    CFRelease(v10);
  }
  CFPreferencesSetAppValue(@"ABForceNullDatabaseForAccessDenied", a1, @".GlobalPreferences");
  CFPreferencesSynchronize(@".GlobalPreferences", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(CFPropertyListRef)", 1555, @">> ", 0, v14, v15, v16, a9);
  }
}

uint64_t ABAddressBookGetSharedAddressFormatsDictionary()
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookGetSharedAddressFormatsDictionary(void)", 1560, v0, 0, v1, v2, v3, (uint64_t)v10);
    CFRelease(v0);
  }
  uint64_t v4 = ABGetSharedAddressFormatsDictionary();
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABAddressBookGetSharedAddressFormatsDictionary(void)", 1562, @">> ", 0, v5, v6, v7, v9);
  }
  return v4;
}

BOOL ABAddressBookHasLocalContent(uint64_t a1)
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  if (CPSqliteConnectionStatementForSQL() && (int v2 = CPSqliteStatementIntegerResult(), CPSqliteStatementReset(), v2 > 0)) {
    return 1;
  }
  else {
    return +[ABFacebookMigrator mayHaveFacebookContacts:a1];
  }
}

BOOL ABAddressBookShouldAnalyzeDatabase(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = ABOSLogAnalyzeDatabase();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ABAddressBookShouldAnalyzeDatabase_cold_1();
    return 0;
  }
  CPRecordStoreGetDatabase();
  if (!CPSqliteDatabaseConnectionForWriting())
  {
    uint64_t v9 = ABOSLogAnalyzeDatabase();
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ABAddressBookShouldAnalyzeDatabase_cold_2();
    return 0;
  }
  int v3 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  int v4 = v3;
  if (v3 == -1)
  {
    uint64_t v10 = ABOSLogAnalyzeDatabase();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_19DCDB000, v10, OS_LOG_TYPE_DEFAULT, "Never analyzed database before! Should analyze.", (uint8_t *)v12, 2u);
    }
  }
  else
  {
    if (v3 <= a2) {
      int v5 = a2;
    }
    else {
      int v5 = v3;
    }
    if (v3 >= a2) {
      int v6 = a2;
    }
    else {
      int v6 = v3;
    }
    if (v6)
    {
      if (v5 / v6 < 10) {
        return 0;
      }
    }
    else if (v5 <= 0)
    {
      return 0;
    }
  }
  uint64_t v11 = ABOSLogAnalyzeDatabase();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = v4;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl(&dword_19DCDB000, v11, OS_LOG_TYPE_DEFAULT, "Old count = %d, current count = %d. Should analyze database.", (uint8_t *)v12, 0xEu);
  }
  return 1;
}

void ABAddressBookAnalyzeDatabase(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = ABOSLogAnalyzeDatabase();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_19DCDB000, v2, OS_LOG_TYPE_DEFAULT, "Will analyze database", (uint8_t *)&v15, 2u);
  }
  if (*(void *)(a1 + 16))
  {
    CPRecordStoreGetDatabase();
    uint64_t v3 = CPSqliteDatabaseConnectionForWriting();
    if (v3)
    {
      uint64_t v4 = v3;
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A3D8], "currentEnvironment"), "timeProvider"), "timestamp");
      double v6 = v5;
      int v7 = sqlite3_exec(*(sqlite3 **)(v4 + 8), "PRAGMA analysis_limit=5000;", 0, 0, 0);
      if (!v7) {
        int v7 = sqlite3_exec(*(sqlite3 **)(v4 + 8), "ANALYZE;", 0, 0, 0);
      }
      CPSqliteConnectionSetIntegerForProperty();
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A3D8], "currentEnvironment"), "timeProvider"), "timestamp");
      uint64_t v9 = [MEMORY[0x1E4F5A530] stringForTimeInterval:v8 - v6];
      uint64_t v10 = ABOSLogAnalyzeDatabase();
      uint64_t v11 = v10;
      if (v7)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = sqlite3_errmsg(*(sqlite3 **)(v4 + 8));
          int v15 = 67109634;
          *(_DWORD *)uint64_t v16 = v7;
          *(_WORD *)&v16[4] = 2080;
          *(void *)&v16[6] = v12;
          __int16 v17 = 2114;
          uint64_t v18 = v9;
          _os_log_error_impl(&dword_19DCDB000, v11, OS_LOG_TYPE_ERROR, "Failed to analyze database: (%d) %s (%{public}@)", (uint8_t *)&v15, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138543362;
        *(void *)uint64_t v16 = v9;
        _os_log_impl(&dword_19DCDB000, v11, OS_LOG_TYPE_DEFAULT, "Did analyze database (%{public}@)", (uint8_t *)&v15, 0xCu);
      }
    }
    else
    {
      int v14 = ABOSLogAnalyzeDatabase();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        ABAddressBookShouldAnalyzeDatabase_cold_2();
      }
    }
  }
  else
  {
    __int16 v13 = ABOSLogAnalyzeDatabase();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      ABAddressBookShouldAnalyzeDatabase_cold_1();
    }
  }
}

uint64_t __ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) stringByAppendingPathComponent:a2];
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

ABRecordID ABRecordGetRecordID(ABRecordRef record)
{
  if (ABLogAPIUsage())
  {
    uint64_t v12 = _isMainThread();
    int v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordID ABRecordGetRecordID(ABRecordRef)", 32, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  ABRecordID UniqueId = ABCRecordGetUniqueId(record);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABRecordID ABRecordGetRecordID(ABRecordRef)", 34, @">> ", 0, v7, v8, v9, v11);
  }
  return UniqueId;
}

CFDateRef _ABRecordCopyWrappedCPPropertyRef(const void *a1, int a2, const void *a3)
{
  int valuePtr = a3;
  if (kABPersonCreationDateProperty != a2 && kABPersonModificationDateProperty != a2)
  {
    int PropertyType = ABRecordGetPropertyType(a1, a2);
    if (PropertyType == 2) {
      return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    }
    if (a3)
    {
      return (CFDateRef)CFRetain(a3);
    }
    return 0;
  }
  if (!a3) {
    return 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  return CFDateCreate(v5, (double)(int)a3);
}

CFDateRef ABRecordCopyOriginalValue(const void *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    int v15 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyOriginalValue(ABRecordRef, ABPropertyID)", 79, v4, 0, v5, v6, v7, (uint64_t)v15);
    CFRelease(v4);
  }
  Originaluint64_t Property = (const void *)CPRecordGetOriginalProperty();
  CFDateRef v9 = _ABRecordCopyWrappedCPPropertyRef(a1, a2, OriginalProperty);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFTypeRef ABRecordCopyOriginalValue(ABRecordRef, ABPropertyID)", 82, @">> ", 0, v10, v11, v12, v14);
  }
  return v9;
}

BOOL ABRecordRemoveValue(ABRecordRef record, ABPropertyID property, CFErrorRef *error)
{
  uint64_t v3 = *(void *)&property;
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABRecordRemoveValue(ABRecordRef, ABPropertyID, CFErrorRef *)", 132, v5, 0, v6, v7, v8, (uint64_t)v10);
    CFRelease(v5);
  }
  return ABCRecordRemoveValueAndReturnError(record, v3);
}

CFStringRef ABRecordCopyCompositeName(ABRecordRef record)
{
  if (ABLogAPIUsage())
  {
    uint64_t v12 = _isMainThread();
    int v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABRecordCopyCompositeName(ABRecordRef)", 138, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  Class = (char **)CPRecordGetClass();
  if (Class == (char **)ABCPersonClass)
  {
    return ABPersonCopyCompositeName(record);
  }
  else if (Class == ABCGroupClass[0])
  {
    return (CFStringRef)ABGroupCopyCompositeName((uint64_t)record);
  }
  else if (Class == ABCSourceClass)
  {
    return (CFStringRef)ABSourceCopyCompositeName();
  }
  else
  {
    if (ABLogAPIUsage()) {
      _ABLog2(6, (uint64_t)"CFStringRef ABRecordCopyCompositeName(ABRecordRef)", 152, @">> ", 0, v7, v8, v9, v11);
    }
    return 0;
  }
}

uint64_t ABRecordShow()
{
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABRecordShow(ABRecordRef)", 160, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCRecordShow();
}

uint64_t ABRecordSetIntValue(const void *a1, uint64_t a2, int a3, CFAllocatorRef *a4)
{
  if (ABLogAPIUsage())
  {
    __int16 v13 = _isMainThread();
    uint64_t v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABRecordSetIntValue(ABRecordRef, ABPropertyID, int, CFErrorRef *)", 178, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  return ABCRecordSetIntValueAndReturnError(a1, a2, a3, a4);
}

uint64_t ABRecordNameForProperty(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABRecordNameForProperty(ABRecordRef, ABPropertyID)", 190, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCRecordNameForProperty(a1, a2);
}

uint64_t ABRecordGetPolicy(const void *a1)
{
  AddressBooCFIndex k = (const void *)ABRecordGetAddressBook();
  if (ABRecordGetRecordType(a1) == 1)
  {
    ABRecordRef v3 = ABGroupCopySource(a1);
    goto LABEL_6;
  }
  if (!ABRecordGetRecordType(a1))
  {
    ABRecordRef v3 = ABPersonCopySource(a1);
LABEL_6:
    if (v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  ABRecordRef v3 = 0;
LABEL_7:
  if (AddressBook)
  {
    ABRecordRef v3 = ABAddressBookCopyDefaultSource(AddressBook);
    CPRecordSetProperty();
  }
LABEL_9:
  if (!v3) {
    return 0;
  }
  uint64_t Policy = ABSourceGetPolicy((uint64_t)v3);
  CFRelease(v3);
  return Policy;
}

BOOL ABPersonPropertyIsStub(int a1)
{
  return *(void *)(*((void *)ABCPersonClass + 10) + 40 * a1 + 16) == (void)&_ABCEmptyMethods;
}

CFStringRef ABPersonCopyLocalizedLowercasePropertyName(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLocalizedLowercasePropertyName(ABPropertyID)", 300, v2, 0, v3, v4, v5, (uint64_t)v9);
    CFRelease(v2);
  }
  uint64_t v6 = ABPersonNameForProperty(a1);
  uint64_t v7 = (__CFBundle *)_ABBundle();
  return CFBundleCopyLocalizedString(v7, v6, v6, @"LocalizedLowercaseProperties");
}

__CFString *ABPersonNameForProperty(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonNameForProperty(ABPropertyID)", 1915, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonNameForProperty(a1);
}

CFStringRef ABPersonCopyLocalizedPropertyName(ABPropertyID property)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLocalizedPropertyName(ABPropertyID)", 307, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  uint64_t v6 = ABPersonNameForProperty(property);
  return ABCCopyLocalizedPropertyOrLabel(v6);
}

uint64_t _setImageDataWithCropRect(const void *a1, int a2, const __CFData *a3, int a4, double a5, double a6, double a7, double a8)
{
  *(void *)&v48[3] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v38 = 0;
  if (ABImageUtilsCopyImageSourceAndGetSizeFromData(a3, (CGImageSource **)&cf, (int *)&v38 + 1, (int *)&v38))
  {
    if (a4)
    {
      double v16 = (double)(int)v38 - a6 - a8;
      __int16 v17 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134219008;
        double v40 = a5;
        __int16 v41 = 2048;
        double v42 = a6;
        __int16 v43 = 2048;
        double v44 = a7;
        __int16 v45 = 2048;
        double v46 = a8;
        __int16 v47 = 2048;
        *(double *)long long v48 = v16;
        _os_log_debug_impl(&dword_19DCDB000, v17, OS_LOG_TYPE_DEBUG, "[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} inverted Y-origin to %.2f", buf, 0x34u);
      }
    }
    else
    {
      double v16 = a6;
    }
    if ((objc_msgSend(MEMORY[0x1E4F5A420], "cropRect:fitsWithinSize:", a5, v16, a7, a8, (double)SHIDWORD(v38), (double)(int)v38) & 1) == 0)
    {
      uint64_t v19 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134219264;
        double v40 = a5;
        __int16 v41 = 2048;
        double v42 = v16;
        __int16 v43 = 2048;
        double v44 = a7;
        __int16 v45 = 2048;
        double v46 = a8;
        __int16 v47 = 1024;
        v48[0] = HIDWORD(v38);
        LOWORD(v48[1]) = 1024;
        *(_DWORD *)((char *)&v48[1] + 2) = v38;
        _os_log_error_impl(&dword_19DCDB000, v19, OS_LOG_TYPE_ERROR, "[Likeness Update] Attempting to set imageData with cropRect {%.2f, %.2f, %.2f, %.2f} extending beyond image of size (%i x %i), forcing a centered square cropRect", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F5A420], "centeredSquareCropRectInRect:", 0.0, 0.0, (double)SHIDWORD(v38), (double)(int)v38);
      a5 = v20;
      double v16 = v21;
      a7 = v22;
      a8 = v23;
    }
    if (v16 >= 0.0)
    {
      double v25 = v16;
    }
    else
    {
      uint64_t v24 = ABOSLogImageMetadata();
      double v25 = 0.0;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134219008;
        double v40 = a5;
        __int16 v41 = 2048;
        double v42 = v16;
        __int16 v43 = 2048;
        double v44 = a7;
        __int16 v45 = 2048;
        double v46 = a8;
        __int16 v47 = 1024;
        v48[0] = v38;
        _os_log_error_impl(&dword_19DCDB000, v24, OS_LOG_TYPE_ERROR, "[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} Y-origin forced to 0 because it was negative (availableHeight = %i)", buf, 0x30u);
      }
    }
    uint64_t v26 = ABPersonSetImageDataAndCropRect(a1, a2);
    uint64_t v18 = v26;
    if (a2 == 2 && v26)
    {
      uint64_t v27 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134219264;
        double v40 = a5;
        __int16 v41 = 2048;
        double v42 = v25;
        __int16 v43 = 2048;
        double v44 = a7;
        __int16 v45 = 2048;
        double v46 = a8;
        __int16 v47 = 1024;
        v48[0] = HIDWORD(v38);
        LOWORD(v48[1]) = 1024;
        *(_DWORD *)((char *)&v48[1] + 2) = v38;
        _os_log_impl(&dword_19DCDB000, v27, OS_LOG_TYPE_DEFAULT, "[Likeness Update] Setting original size imageData with cropRect {%.2f, %.2f, %.2f, %.2f} for image of size (%i x %i). Also setting thumbnail & fullscreen derivatives.", buf, 0x36u);
      }
      double v28 = *MEMORY[0x1E4F1DB28];
      double v29 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
      double v30 = (double)SHIDWORD(v38);
      double v31 = (double)(int)v38;
      double v32 = ABImageUtilsCenteredOverflowRectWithFullScreenRatioForRectWithAvailableSize(a5, v25, a7, a8, (double)SHIDWORD(v38), (double)(int)v38);
      _resizeAndStoreImageSourceForFormat(a1, (CGImageSource *)cf, 4u, 0, v28, v29, v30, v31, v32, v33, v34, v35);
      _resizeAndStoreImageSourceForFormat(a1, (CGImageSource *)cf, 0, 1, v28, v29, v30, v31, a5, v25, a7, a8);
    }
    CFRelease(cf);
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return ABCPersonRemoveImageData(a1);
  }
  return v18;
}

uint64_t ABPersonSetImageDataAndCropRect(const void *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetImageDataAndCropRect(ABCRecordRef, ABPersonImageFormat, CFDataRef, int, int, int, int, CFErrorRef *)", 533, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

void _resizeAndStoreImageSourceForFormat(const void *a1, CGImageSource *a2, unsigned int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double PixelHeight)
{
  if (ABPersonImageFormatIsLessThanOrEqualToPixelSize(a3, (int)a7, (int)a8))
  {
    double v29 = PixelHeight;
    double Scale = ABPersonImageFormatGetScale(a3);
    double PixelWidth = (double)(int)ABPersonImageFormatGetPixelWidth(a3);
    double PixelHeight = (double)(int)ABPersonImageFormatGetPixelHeight(a3);
LABEL_5:
    CGImageRef ImageFromImageSourceWithSizeCropRectMaxSize = ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize(a2, a7, a8, a9, a10, a11, v29, PixelWidth, PixelHeight);
    if (Scale != 1.0)
    {
      double PixelWidth = PixelWidth / Scale;
      double PixelHeight = PixelHeight / Scale;
    }
    CFStringRef v25 = (const __CFString *)*MEMORY[0x1E4F22678];
    CFStringRef Type = CGImageSourceGetType(a2);
    if (UTTypeConformsTo(v25, Type)) {
      CFStringRef v27 = @"public.png";
    }
    else {
      CFStringRef v27 = @"public.jpeg";
    }
    ScaledImageData = ABImageUtilsCreateScaledImageData(ImageFromImageSourceWithSizeCropRectMaxSize, 8u, v27, 0, PixelWidth, PixelHeight, Scale);
    ABPersonSetImageDataAndCropRect(a1, a3);
    CGImageRelease(ImageFromImageSourceWithSizeCropRectMaxSize);
    if (ScaledImageData)
    {
      CFRelease(ScaledImageData);
    }
    return;
  }
  if (a4)
  {
    double Scale = 1.0;
    double v29 = PixelHeight;
    double PixelWidth = a11;
    goto LABEL_5;
  }
  ABCPersonRemoveImageDataAndReturnError(a1, a3);
}

BOOL ABPersonSetImageData(ABRecordRef person, CFDataRef imageData, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    uint64_t v14 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetImageData(ABRecordRef, CFDataRef, CFErrorRef *)", 483, v5, 0, v6, v7, v8, (uint64_t)v14);
    CFRelease(v5);
  }
  uint64_t v15 = 0;
  ABImageUtilsCopyImageSourceAndGetSizeFromData(imageData, 0, (int *)&v15 + 1, (int *)&v15);
  double v9 = ABImageUtilsCenteredSquareForRect(0.0, 0.0, (double)SHIDWORD(v15), (double)(int)v15);
  return _setImageDataWithCropRect(person, 2, imageData, 0, v9, v10, v11, v12);
}

uint64_t ABPersonSetImageDataWithCropRect(const void *a1, int a2, const __CFData *a3, int a4, int a5, int a6, int a7)
{
  return _setImageDataWithCropRect(a1, a2, a3, 0, (double)a4, (double)a5, (double)a6, (double)a7);
}

uint64_t ABPersonSetImageDataWithInvertedCropRect(const void *a1, int a2, const __CFData *a3, int a4, int a5, int a6, int a7)
{
  return _setImageDataWithCropRect(a1, a2, a3, 1, (double)a4, (double)a5, (double)a6, (double)a7);
}

uint64_t ABPersonGetDerivedFromFormatFromImageWithFormat(uint64_t a1, int a2)
{
  if (ABLogAPIUsage())
  {
    double v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPersonImageFormat ABPersonGetDerivedFromFormatFromImageWithFormat(ABRecordRef, ABPersonImageFormat)", 505, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCPersonGetDerivedFromFormatFromImageWithFormat(a1, a2);
}

CFDataRef ABPersonCopyImageDataAndInvertedCropRect(uint64_t a1, int a2, _DWORD *a3, int *a4, _DWORD *a5, _DWORD *a6)
{
  if (ABLogAPIUsage())
  {
    uint64_t v19 = _isMainThread();
    double v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageDataAndInvertedCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)", 510, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  int v21 = 0;
  CFDataRef v16 = (const __CFData *)ABCPersonCopyImageDataAndCropRect(a1, a2, a3, &v21, a5, a6);
  CFDataRef v17 = v16;
  if (v16)
  {
    int v20 = 0;
    if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v16, 0, 0, &v20) && a4 && a6) {
      *a4 = (v20 - (v21 + *a6)) & ~((v20 - (v21 + *a6)) >> 31);
    }
  }
  return v17;
}

uint64_t ABPersonCopyImageDataAndCropRect(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if (ABLogAPIUsage())
  {
    CFDataRef v17 = _isMainThread();
    double v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageDataAndCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)", 528, v12, 0, v13, v14, v15, (uint64_t)v17);
    CFRelease(v12);
  }
  return ABCPersonCopyImageDataAndCropRect(a1, a2, a3, a4, a5, a6);
}

uint64_t ABPersonSetImageDataDerivedFromFormatAndReturnError(const void *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    double v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetImageDataDerivedFromFormatAndReturnError(ABRecordRef, ABPersonImageFormat, ABPersonImageFormat, CFDataRef, CFErrorRef *)", 538, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCPersonSetImageDataDerivedFromFormatAndCropRectAndReturnError(a1, a2);
}

BOOL ABPersonSetImageHashForImageData(const void *a1, void *a2, CFErrorRef *a3)
{
  uint64_t v5 = (const void *)objc_msgSend(a2, "_cn_md5Hash");
  ABPropertyID v6 = kABPersonImageHashProperty;
  return ABRecordSetValue(a1, v6, v5, a3);
}

void ABPersonResetImageTypeIfNeeded(const void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFTypeRef v2 = ABRecordCopyValue(a1, kABPersonImageTypeProperty);
  if (([(id)(id)CFMakeCollectable(v2) isEqualToString:@"PHOTO"] & 1) == 0)
  {
    if (((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A2A0] + 16))() & 1) == 0)
    {
      ABRecordSetValue(a1, kABPersonImageTypeProperty, @"PHOTO", 0);
      CFTypeRef v3 = ABRecordCopyValue(a1, kABPersonInternalUUIDProperty);
      CFTypeRef v4 = (id)CFMakeCollectable(v3);
      uint64_t v5 = ABOSLogImageMetadata();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138543362;
        CFTypeRef v15 = v4;
        _os_log_impl(&dword_19DCDB000, v5, OS_LOG_TYPE_DEFAULT, "AddressBook set empty image type to photo for contact identifier %{public}@", (uint8_t *)&v14, 0xCu);
      }
    }
    CFTypeRef v6 = ABRecordCopyValue(a1, kABPersonImageHashProperty);
    CFTypeRef v7 = (id)CFMakeCollectable(v6);
    if (v7)
    {
      CFTypeRef v8 = v7;
      CFDataRef v9 = ABPersonCopyImageDataWithFormat(a1, (ABPersonImageFormat)5u);
      if ((objc_msgSend((id)objc_msgSend((id)(id)CFMakeCollectable(v9), "_cn_md5Hash"), "isEqualToData:", v8) & 1) == 0)
      {
        CFDataRef v10 = ABPersonCopyImageDataWithFormat(a1, kABPersonImageFormatOriginalSize);
        if ((objc_msgSend((id)objc_msgSend((id)(id)CFMakeCollectable(v10), "_cn_md5Hash"), "isEqualToData:", v8) & 1) == 0)
        {
          ABRecordSetValue(a1, kABPersonImageTypeProperty, @"PHOTO", 0);
          CFTypeRef v11 = ABRecordCopyValue(a1, kABPersonInternalUUIDProperty);
          CFTypeRef v12 = (id)CFMakeCollectable(v11);
          uint64_t v13 = ABOSLogImageMetadata();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int v14 = 138543362;
            CFTypeRef v15 = v12;
            _os_log_impl(&dword_19DCDB000, v13, OS_LOG_TYPE_DEFAULT, "AddressBook reset image type to photo for contact identifier %{public}@", (uint8_t *)&v14, 0xCu);
          }
        }
      }
    }
  }
}

CFDataRef ABPersonCopyImageDataWithFormat(ABRecordRef person, ABPersonImageFormat format)
{
  if (ABLogAPIUsage())
  {
    CFDataRef v9 = _isMainThread();
    CFTypeRef v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageDataWithFormat(ABRecordRef, ABPersonImageFormat)", 611, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return (CFDataRef)ABCPersonCopyImageData((uint64_t)person, format);
}

void ABPersonResetSharedPhotoDisplayPreference(const void *a1)
{
  CFTypeRef v2 = ABRecordCopyValue(a1, kABPersonDisplayFlagsProperty);
  CFTypeRef v3 = (const void *)objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend((id)(id)CFMakeCollectable(v2), "integerValue") & 0xFFFFFFFFFFFFFF3FLL | 0x80);
  if (v3) {
    CFTypeRef v4 = CFRetain(v3);
  }
  else {
    CFTypeRef v4 = 0;
  }
  ABRecordSetValue(a1, kABPersonDisplayFlagsProperty, v4, 0);
  CFRelease(v4);
}

CFDataRef ABPersonCopyImageData(ABRecordRef person)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFTypeRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCopyImageData(ABRecordRef)", 605, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABPersonCopyImageDataWithFormat(person, kABPersonImageFormatOriginalSize);
}

BOOL ABPersonHasImageData(ABRecordRef person)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFTypeRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonHasImageData(ABRecordRef)", 618, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonHasImageData((uint64_t)person);
}

BOOL ABPersonRemoveImageData(ABRecordRef person, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v8 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonRemoveImageData(ABRecordRef, CFErrorRef *)", 624, v3, 0, v4, v5, v6, (uint64_t)v8);
    CFRelease(v3);
  }
  return ABCPersonRemoveImageDataAndReturnError(person, -1);
}

CFComparisonResult ABPersonComparePeopleByName(ABRecordRef person1, ABRecordRef person2, ABPersonSortOrdering ordering)
{
  if (ABLogAPIUsage())
  {
    uint64_t v16 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFComparisonResult ABPersonComparePeopleByName(ABRecordRef, ABRecordRef, ABPersonSortOrdering)", 631, v6, 0, v7, v8, v9, (uint64_t)v16);
    CFRelease(v6);
  }
  CFComparisonResult v10 = ABCPersonCompareNameOfPeople((uint64_t)person1, (uint64_t)person2, ordering);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFComparisonResult ABPersonComparePeopleByName(ABRecordRef, ABRecordRef, ABPersonSortOrdering)", 633, @">> ", 0, v11, v12, v13, v15);
  }
  return v10;
}

uint64_t ABAddressBookGetEmailCount(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetEmailCount(ABAddressBookRef)", 678, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _countProperty(a1, kABPersonEmailProperty, 0);
}

uint64_t _countProperty(uint64_t a1, int a2, ABRecordRef record)
{
  if (!a1) {
    return 0;
  }
  int v5 = record ? ABRecordGetRecordID(record) : -1;
  CPRecordStoreGetDatabase();
  uint64_t v6 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData(a1);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(sqlite3_stmt **)(v6 + 8);
  if (!v7) {
    return 0;
  }
  sqlite3_bind_int(v7, 1, a2);
  if (v5 != -1) {
    sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 2, v5);
  }
  uint64_t v8 = (int)CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v8;
}

uint64_t ABAddressBookGetPhoneNumberCountInSource(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    int v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPhoneNumberCountInSource(ABAddressBookRef, ABRecordRef)", 684, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return _countProperty(a1, kABPersonPhoneProperty, a2);
}

uint64_t ABAddressBookGetPhoneNumberCount(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPhoneNumberCount(ABAddressBookRef)", 690, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return _countProperty(a1, kABPersonPhoneProperty, 0);
}

void ABPersonCopyArrayOfPhoneNumbersLabelsAndPeopleInRange(uint64_t a1, int a2, int a3, void *a4, void *a5, void *a6)
{
  if (ABLogAPIUsage())
  {
    uint64_t v12 = _isMainThread();
    uint64_t v13 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v12);
    uint64_t v14 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABPersonCopyArrayOfPhoneNumbersLabelsAndPeopleInRange(ABAddressBookRef, CFRange, CFArrayRef *, CFArrayRef *, CFArrayRef *)", 696, v13, @"%@", v15, v16, v17, v14);
    CFRelease(v13);
  }
  uint64_t v18 = *(void *)(a1 + 16);
  ABCDBContextCopyArrayOfPhoneNumbersLabelAndPeopleInRange(v18, a2, a3, a4, a5, a6);
}

CFMutableArrayRef ABAddressBookCopyArrayOfAllEmailAddresses(CFMutableArrayRef Mutable)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)Mutable);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllEmailAddresses(ABAddressBookRef)", 720, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    uint64_t v8 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData((uint64_t)Mutable);
    if (v8 && *(void *)(v8 + 8))
    {
      CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 1, kABPersonEmailProperty);
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

uint64_t _accumulateEmails(uint64_t a1, __CFArray *a2)
{
  uint64_t v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3)
  {
    CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v3, 0x8000100u);
    if (v4)
    {
      CFStringRef v5 = v4;
      if (CFStringGetLength(v4)) {
        CFArrayAppendValue(a2, v5);
      }
      CFRelease(v5);
    }
  }
  return 0;
}

CFIndex ABAddressBookGetPersonCount(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPersonCount(ABAddressBookRef)", 746, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return (int)ABCGetPersonCountInSourceShowingLinks((uint64_t)addressBook, 0, 0);
}

uint64_t ABAddressBookGetPersonCountInSource(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetPersonCountInSource(ABAddressBookRef, ABRecordRef)", 752, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (int)ABCGetPersonCountInSourceShowingLinks(a1, a2, 0);
}

uint64_t ABAddressBookCopyPeopleWithUUIDs(uint64_t a1, const __CFArray *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithUUIDs(ABAddressBookRef, CFArrayRef)", 764, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  uint64_t v10 = ABCPersonCopyRecordsForUUIDs(a1, a2);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithUUIDs(ABAddressBookRef, CFArrayRef)", 766, @">> ", 0, v11, v12, v13, v15);
  }
  return v10;
}

uint64_t ABAddressBookCopyPeopleWithLinkIdentifiers(uint64_t a1, const __CFArray *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithLinkIdentifiers(ABAddressBookRef, CFArrayRef)", 773, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  uint64_t v10 = ABCPersonCopyRecordsForLinkIdentifers(a1, a2);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithLinkIdentifiers(ABAddressBookRef, CFArrayRef)", 775, @">> ", 0, v11, v12, v13, v15);
  }
  return v10;
}

CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef)", 781, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFArrayRef v8 = ABCCopyArrayOfAllPeople((uint64_t)addressBook);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef)", 783, @">> ", 0, v9, v10, v11, v13);
  }
  return v8;
}

__CFString *ABAddressBookCopyWhereClauseForLinkedPeopleInGroupsAndSources(int a1, char a2, CFArrayRef theArray, const __CFArray *a4, uint64_t a5)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (a4)
    {
LABEL_3:
      CFIndex v11 = CFArrayGetCount(a4);
      goto LABEL_6;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  CFIndex v11 = 0;
LABEL_6:
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (a5)
  {
    CFStringRef v14 = CFStringCreateWithFormat(v12, 0, @"%@.", a5);
    CFStringRef v15 = CFStringCreateWithFormat(v12, 0, @"%@_inner", a5);
    if (!a1) {
      goto LABEL_13;
    }
  }
  else
  {
    CFStringRef v15 = @"innerPerson";
    CFStringRef v14 = &stru_1EF03E278;
    if (!a1) {
      goto LABEL_13;
    }
  }
  if ((a2 & 1) == 0)
  {
    CFStringAppendFormat(Mutable, 0, @"%@IsPreferredName = 1", v14);
    if (!a5) {
      return Mutable;
    }
    goto LABEL_22;
  }
LABEL_13:
  if (Count < 1 || v11 < 1)
  {
    if (Count < 1)
    {
      if (v11 < 1)
      {
        CFRelease(Mutable);
        CFDictionaryRef Mutable = 0;
        if (!a5) {
          return Mutable;
        }
        goto LABEL_22;
      }
      CFStringRef SubqueryForLinkedPersonIDsInSources = _createSubqueryForLinkedPersonIDsInSources(a4, (uint64_t)v15, a1);
    }
    else
    {
      CFStringRef SubqueryForLinkedPersonIDsInSources = _createSubqueryForLinkedPersonIDsInGroups(theArray, (uint64_t)v15, a1);
    }
    CFStringRef v17 = SubqueryForLinkedPersonIDsInSources;
    CFStringAppendFormat(Mutable, 0, @"%@ROWID IN (%@)", v14, SubqueryForLinkedPersonIDsInSources);
  }
  else
  {
    CFStringRef SubqueryForLinkedPersonIDsInGroups = _createSubqueryForLinkedPersonIDsInGroups(theArray, (uint64_t)v15, a1);
    CFStringRef v17 = _createSubqueryForLinkedPersonIDsInSources(a4, (uint64_t)v15, a1);
    CFStringAppendFormat(Mutable, 0, @"%@ROWID IN (%@ UNION %@)", v14, SubqueryForLinkedPersonIDsInGroups, v17);
    CFRelease(SubqueryForLinkedPersonIDsInGroups);
  }
  CFRelease(v17);
  if (a5)
  {
LABEL_22:
    CFRelease(v14);
    CFRelease(v15);
  }
  return Mutable;
}

CFStringRef _createSubqueryForLinkedPersonIDsInGroups(const __CFArray *a1, uint64_t a2, int a3)
{
  CFIndex Count = CFArrayGetCount(a1);
  PlaceholdersForNumberOfItems = _createPlaceholdersForNumberOfItems(Count);
  if (a3) {
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"IFNULL(abpl.PreferredNamePersonID, %@.ROWID)", a2);
  }
  else {
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@.ROWID", a2);
  }
  CFStringRef v8 = v7;
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"SELECT %@ FROM ABGroupMembers abgm JOIN ABPerson %@ ON abgm.member_id = %@.ROWID LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE abgm.group_id IN (%@) AND abgm.member_type = 0", v7, a2, a2, a2, PlaceholdersForNumberOfItems);
  CFRelease(v8);
  CFRelease(PlaceholdersForNumberOfItems);
  return v9;
}

CFStringRef _createSubqueryForLinkedPersonIDsInSources(const __CFArray *a1, uint64_t a2, int a3)
{
  CFIndex Count = CFArrayGetCount(a1);
  PlaceholdersForNumberOfItems = _createPlaceholdersForNumberOfItems(Count);
  if (a3) {
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"IFNULL(abpl.PreferredNamePersonID, %@.ROWID)", a2);
  }
  else {
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@.ROWID", a2);
  }
  CFStringRef v8 = v7;
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"SELECT %@ FROM ABPerson %@ LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE %@.StoreID IN (%@)", v7, a2, a2, a2, PlaceholdersForNumberOfItems);
  CFRelease(v8);
  CFRelease(PlaceholdersForNumberOfItems);
  return v9;
}

uint64_t ABAddressBookBindWhereClauseForLinkedPeopleInGroupsAndSources(uint64_t result, CFArrayRef theArray, CFArrayRef a3, sqlite3_stmt *a4, _DWORD *a5)
{
  if (result)
  {
    if (theArray)
    {
      BOOL result = CFArrayGetCount(theArray);
      uint64_t v9 = (uint64_t)(ceil((double)result / 10.0) * 10.0);
      if (v9 >= 1)
      {
        uint64_t v10 = result;
        for (CFIndex i = 0; i != v9; ++i)
        {
          if (i >= v10)
          {
            int v15 = (*a5)++;
            BOOL result = sqlite3_bind_null(a4, v15);
          }
          else
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            ABRecordID RecordID = ABRecordGetRecordID(ValueAtIndex);
            int v14 = (*a5)++;
            BOOL result = sqlite3_bind_int(a4, v14, RecordID);
          }
        }
      }
    }
    if (a3)
    {
      BOOL result = CFArrayGetCount(a3);
      uint64_t v16 = (uint64_t)(ceil((double)result / 10.0) * 10.0);
      if (v16 >= 1)
      {
        uint64_t v17 = result;
        for (CFIndex j = 0; j != v16; ++j)
        {
          if (j >= v17)
          {
            int v22 = (*a5)++;
            BOOL result = sqlite3_bind_null(a4, v22);
          }
          else
          {
            uint64_t v19 = CFArrayGetValueAtIndex(a3, j);
            ABRecordID v20 = ABRecordGetRecordID(v19);
            int v21 = (*a5)++;
            BOOL result = sqlite3_bind_int(a4, v21, v20);
          }
        }
      }
    }
  }
  return result;
}

uint64_t _copyArrayOfPreferredNamePeopleForOptionalGroupsAndSourcesWithSortOrdering(const void *a1, BOOL a2, CFArrayRef theArray, const __CFArray *a4, int a5)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a4)
    {
LABEL_3:
      CFIndex v11 = CFArrayGetCount(a4);
      if (!a2) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
  }
  CFIndex v11 = 0;
  if (!a2) {
    goto LABEL_10;
  }
LABEL_7:
  if (!Count && !v11) {
    return 0;
  }
LABEL_10:
  if (a2 && v11 >= 1)
  {
    CFArrayRef v13 = ABAddressBookCopyArrayOfAllSources(a1);
    if (v13)
    {
      CFArrayRef v14 = v13;
      if (CFArrayGetCount(v13) < 1)
      {
LABEL_18:
        int v17 = 0;
      }
      else
      {
        CFIndex v15 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
          if ((ABRecordGetIntValue((uint64_t)ValueAtIndex, kABSourceTypeProperty) & 0x1000000) == 0)
          {
            v27.CFIndex length = CFArrayGetCount(a4);
            v27.location = 0;
            if (!CFArrayContainsValue(a4, v27, ValueAtIndex)) {
              break;
            }
          }
          if (++v15 >= CFArrayGetCount(v14)) {
            goto LABEL_18;
          }
        }
        int v17 = 1;
      }
      CFRelease(v14);
    }
    else
    {
      int v17 = 0;
    }
    a2 = v17 != 0;
  }
  CFTypeRef cf = 0;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  uint64_t v19 = ABAddressBookCopyWhereClauseForLinkedPeopleInGroupsAndSources(1, a2, theArray, a4, @"outerPerson");
  if (v19)
  {
    CFStringRef v20 = v19;
    CFStringAppend(SelectPrefix, @" WHERE ");
    CFStringAppend(SelectPrefix, v20);
    CFRelease(v20);
  }
  if (a5) {
    CFStringRef v21 = @" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort";
  }
  else {
    CFStringRef v21 = @" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort";
  }
  CFStringAppend(SelectPrefix, v21);
  CFStringAppend(SelectPrefix, @";");
  CPRecordStoreGetDatabase();
  uint64_t v22 = CPSqliteDatabaseStatementForReading();
  ABRegulatoryLogReadContactsData((uint64_t)a1);
  CFRelease(SelectPrefix);
  if (v22 && (double v23 = *(sqlite3_stmt **)(v22 + 8)) != 0)
  {
    int v25 = 1;
    ABAddressBookBindWhereClauseForLinkedPeopleInGroupsAndSources(a2, theArray, a4, v23, &v25);
    uint64_t v12 = CPRecordStoreProcessStatementWithPropertyIndices();
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(const void *a1, const __CFArray *a2, const __CFArray *a3, int a4)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(ABAddressBookRef, CFArrayRef, CFArrayRef, ABPersonSortOrdering)", 1002, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  return _copyArrayOfPreferredNamePeopleForOptionalGroupsAndSourcesWithSortOrdering(a1, 1, a2, a3, a4);
}

uint64_t ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(const void *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(ABAddressBookRef, ABPersonSortOrdering)", 1008, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return _copyArrayOfPreferredNamePeopleForOptionalGroupsAndSourcesWithSortOrdering(a1, 0, 0, 0, a2);
}

CFArrayRef ABAddressBookCopyPeopleWithName(ABAddressBookRef addressBook, CFStringRef name)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyPeopleWithName(ABAddressBookRef, CFStringRef)", 1014, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  ABPersonSortOrdering SortOrdering = ABPersonGetSortOrdering();
  CFArrayRef v12 = 0;
  ABCCopyPeopleAndIdentifiersMatchingName((uint64_t)addressBook, (__CFString *)name, SortOrdering, -1, &v12, 0);
  CFArrayRef result = v12;
  if (!v12) {
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  }
  return result;
}

void ABAddressBookMapPeopleMatchingString(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    int v17 = _isMainThread();
    uint64_t v18 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v17);
    uint64_t v19 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookMapPeopleMatchingString(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABPersonSortOrdering, _Bool, ABAddressBookMapPeopleCallbacks *, void *)", 1030, v18, @"%@", v20, v21, v22, v19);
    CFRelease(v18);
  }
  if (a1)
  {
    if (a2) {
      ABCIteratePeopleMatchingStringWithCallbacks(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9, 0);
    }
  }
}

CFStringRef ABPersonInvalidateImageData(const __CFString *a1)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"void ABPersonInvalidateImageData(ABAddressBookRef, ABImagePredicateFunction, void *)", 1044, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return ABCPersonInvalidateImageData(a1);
}

CFStringRef ABPersonInvalidateSpecificImageData(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFTypeRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonInvalidateSpecificImageData(ABRecordRef, ABPersonImageFormat)", 1048, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonInvalidateSpecificImageData(a1);
}

CFStringRef ABPersonInvalidateAllImageData(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFTypeRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonInvalidateAllImageData(ABRecordRef)", 1052, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonInvalidateAllImageData(a1);
}

uint64_t __ABCopyArrayOfSectionListOffsetsForManagedConfiguration_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return sqlite3_bind_int(v4, v6, a2);
}

uint64_t __ABCopyArrayOfSectionListOffsetsForManagedConfiguration_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return sqlite3_bind_int(v4, v6, a2);
}

uint64_t ABCopyArrayOfPeopleAtOffset(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v10 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v9);
    uint64_t v11 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABCopyArrayOfPeopleAtOffset(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering, int, int)", 1113, v10, @"%@", v12, v13, v14, v11);
    CFRelease(v10);
  }
  return ABCCopyArrayOfPeopleAtOffsetIncludingOnlyPreferredNamePeople(a1, a3, a4, a5, 0);
}

uint64_t __ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return sqlite3_bind_int(v4, v6, a2);
}

uint64_t __ABAddressBookGetPreferredNamePeopleCountForManagedConfiguration_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return sqlite3_bind_int(v4, v6, a2);
}

uint64_t ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  if (a2 && ([a2 deviceHasManagementRestrictions] & 1) != 0)
  {
    uint64_t v10 = ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(a1, a2, 0);
    uint64_t v11 = SQLInClauseStringForParameterCount([v10 count]);
    SelectPrefixFromRecordDescriptor = (void *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
    [SelectPrefixFromRecordDescriptor appendFormat:@" WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlinCFIndex k = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ?) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) ", v11, v11];
    if (a3) {
      uint64_t v13 = @" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort";
    }
    else {
      uint64_t v13 = @" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort";
    }
    [SelectPrefixFromRecordDescriptor appendString:v13];
    [SelectPrefixFromRecordDescriptor appendString:@" LIMIT ? OFFSET ?"];
    ABRegulatoryLogReadContactsData(a1);
    CPRecordStoreGetDatabase();
    uint64_t v14 = CPSqliteDatabaseStatementForReading();
    if (v14 && (uint64_t v15 = v14, *(void *)(v14 + 8)))
    {
      uint64_t v26 = 0;
      CFRange v27 = &v26;
      uint64_t v28 = 0x2020000000;
      int v29 = 1;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = __ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration_block_invoke;
      v25[3] = &unk_1E5988E70;
      v25[4] = &v26;
      v25[5] = v14;
      [v10 enumerateIndexesUsingBlock:v25];
      uint64_t v16 = *(sqlite3_stmt **)(v15 + 8);
      int v17 = *((_DWORD *)v27 + 6);
      *((_DWORD *)v27 + 6) = v17 + 1;
      sqlite3_bind_blob(v16, v17, v10, 8, 0);
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = __ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration_block_invoke_2;
      v24[3] = &unk_1E5988E70;
      v24[4] = &v26;
      v24[5] = v15;
      [v10 enumerateIndexesUsingBlock:v24];
      uint64_t v18 = *(sqlite3_stmt **)(v15 + 8);
      int v19 = *((_DWORD *)v27 + 6);
      *((_DWORD *)v27 + 6) = v19 + 1;
      sqlite3_bind_int(v18, v19, a5);
      uint64_t v20 = *(sqlite3_stmt **)(v15 + 8);
      int v21 = *((_DWORD *)v27 + 6);
      *((_DWORD *)v27 + 6) = v21 + 1;
      sqlite3_bind_int(v20, v21, a4 & ~(a4 >> 31));
      uint64_t v22 = CPRecordStoreProcessStatement();
      CPSqliteStatementReset();
      _Block_object_dispose(&v26, 8);
    }
    else
    {
      uint64_t v22 = 0;
    }

    return v22;
  }
  else
  {
    return ABCopyArrayOfPreferredNamePeopleAtOffset(a1, a3, a4, a5);
  }
}

void sub_19DD0EC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ABCopyArrayOfPreferredNamePeopleAtOffset(uint64_t a1, int a2, int a3, int a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABCopyArrayOfPreferredNamePeopleAtOffset(ABAddressBookRef, ABPersonSortOrdering, int, int)", 1208, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCCopyArrayOfPeopleAtOffsetIncludingOnlyPreferredNamePeople(a1, a2, a3, a4, 1);
}

uint64_t __ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return sqlite3_bind_int(v4, v6, a2);
}

uint64_t __ABCopyArrayOfPreferredNamePeopleAtOffsetForManagedConfiguration_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return sqlite3_bind_int(v4, v6, a2);
}

uint64_t ABPersonRetrieveCompositeNameFormat()
{
  __personCompositeNameFormCFAbsoluteTime at = 0;
  uint64_t result = [MEMORY[0x1E4F28F38] _defaultDisplayNameOrder];
  if (result == 1)
  {
    int v1 = 0;
  }
  else
  {
    if (result != 2) {
      return result;
    }
    int v1 = 1;
  }
  __personCompositeNameFormCFAbsoluteTime at = v1;
  return result;
}

void ABPersonSetCompositeNameFormat(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    CFTypeRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetCompositeNameFormat(ABPersonCompositeNameFormat)", 1227, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  if (__personCompositeNameFormat != a1)
  {
    __personCompositeNameFormCFAbsoluteTime at = a1;
    if (a1) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    [(id)getNSPersonNameComponentsFormatterPreferencesClass() setDefaultDisplayNameOrder:v6];
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.AddressBook.PreferenceChanged", 0, 0, 1u);
  }
}

uint64_t getNSPersonNameComponentsFormatterPreferencesClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__0;
  uint64_t v7 = __Block_byref_object_dispose__0;
  uint64_t v0 = getNSPersonNameComponentsFormatterPreferencesClass_softClass;
  uint64_t v8 = getNSPersonNameComponentsFormatterPreferencesClass_softClass;
  if (!getNSPersonNameComponentsFormatterPreferencesClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke;
    v2[3] = &unk_1E59886B0;
    v2[4] = &v3;
    __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19DD0EF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ABPersonCompositeNameFormat ABPersonGetCompositeNameFormat(void)
{
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    uint64_t v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPersonCompositeNameFormat ABPersonGetCompositeNameFormat(void)", 1245, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personCompositeNameFormat;
}

uint64_t ABPersonGetEditNameFormat()
{
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    uint64_t v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPersonEditNameFormat ABPersonGetEditNameFormat(void)", 1268, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return __personEditNameFormat;
}

CFStringRef ABPersonCopyCompositeNameDelimiterForRecord(ABRecordRef record)
{
  CFStringRef v2 = 0;
  ABPersonGetCompositeNameFormatAndDelimiterForRecord(record, &v2);
  return v2;
}

CFArrayRef ABPersonCopyNamePieces(const void *a1, int a2, uint64_t *a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyNamePieces(ABRecordRef, ABPersonSortOrdering, CFIndex *)", 1336, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCPersonCopyNamePieces(a1, a2, a3);
}

uint64_t ABPersonCopy(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopy(ABRecordRef)", 1461, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return MEMORY[0x1F41093D8](a1);
}

uint64_t ABPersonShow(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonShow(ABRecordRef)", 1466, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonShow(a1);
}

CFMutableStringRef ABPersonCopyCompositePhoneticName(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyCompositePhoneticName(ABRecordRef)", 1478, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCPersonCopyCompositePhoneticName(a1);
}

void ABPersonSetShortNameFormat(unsigned int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    CFStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetShortNameFormat(ABPersonShortNameFormat)", 1513, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  if (__personShortNameFormat != a1)
  {
    __personint ShortNameFormat = a1;
    if (a1 < 4) {
      uint64_t v6 = a1 + 1;
    }
    else {
      uint64_t v6 = 3;
    }
    [(id)getNSPersonNameComponentsFormatterPreferencesClass() setShortNameFormat:v6];
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.AddressBook.PreferenceChanged", 0, 0, 1u);
  }
}

void ABPersonSetShortNameFormatEnabled(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetShortNameFormatEnabled(_Bool)", 1549, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if (__personShortNameFormatEnabled != a1)
  {
    [(id)getNSPersonNameComponentsFormatterPreferencesClass() setShortNameIsEnabled:a1];
    __personShortNameFormatEnabled = a1;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.AddressBook.PreferenceChanged", 0, 0, 1u);
  }
}

void ABPersonSetShortNamePreferNicknames(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetShortNamePreferNicknames(_Bool)", 1567, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if (__personShortNamePreferNicknames != a1)
  {
    [(id)getNSPersonNameComponentsFormatterPreferencesClass() setPreferNicknamesDefault:a1];
    __personShortNamePreferNicknames = a1;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.AddressBook.PreferenceChanged", 0, 0, 1u);
  }
}

void _replaceNameWithInitial(CFStringRef *a1)
{
  if (CFStringGetLength(*a1) >= 2)
  {
    v3.location = 0;
    v3.CFIndex length = 1;
    CFStringRef v2 = CFStringCreateWithSubstring(0, *a1, v3);
    CFRelease(*a1);
    *a1 = v2;
  }
}

uint64_t __PreferencesChanged()
{
  CFStringRef v0 = (const __CFString *)ABPeoplePickerPrefs();
  CFPreferencesAppSynchronize(v0);
  __personCompositeNameFormCFAbsoluteTime at = 0;
  uint64_t v1 = [MEMORY[0x1E4F28F38] _defaultDisplayNameOrder];
  if (v1 == 1)
  {
    int v2 = 0;
  }
  else
  {
    if (v1 != 2) {
      goto LABEL_6;
    }
    int v2 = 1;
  }
  __personCompositeNameFormCFAbsoluteTime at = v2;
LABEL_6:
  ABPersonRetrieveEditNameFormat();
  return ABPersonRetrieveShortNameSettings();
}

CFTypeRef ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(const void *a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(ABRecordRef, int)", 1802, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  if ((a2 & 0x80000000) != 0) {
    CFStringRef v8 = 0;
  }
  else {
    CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", a2);
  }
  CFTypeRef v9 = ABRecordCopyValue(a1, kABPersonSoundProperty);
  if (!v9)
  {
    CFTypeRef v12 = 0;
    if (!v8) {
      return v12;
    }
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  IndexForunsigned __int8 Identifier = ABMultiValueGetIndexForIdentifier(v9, a2);
  if (IndexForIdentifier == -1) {
    CFTypeRef v12 = 0;
  }
  else {
    CFTypeRef v12 = ABMultiValueCopyValueAtIndex(v10, IndexForIdentifier);
  }
  CFRelease(v10);
  if (v8) {
LABEL_13:
  }
    CFRelease(v8);
  return v12;
}

const void *ABPersonCopySoundIdentifierForMultiValueIdentifierIncludingLinkedContacts(const void *a1, uint64_t a2)
{
  CFArrayRef v4 = ABPersonCopyArrayOfAllLinkedPeople(a1);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  CFTypeRef v7 = ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(a1, a2);
  CFTypeRef v8 = v7;
  if (Count < 1)
  {
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v9 = 1;
    uint64_t v10 = v7;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v9 - 1);
      CFTypeRef v12 = ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(ValueAtIndex, a2);
      if (v12)
      {
        uint64_t v13 = v12;
        if (v10)
        {
          int v14 = CFEqual(v12, v10);
          BOOL v15 = v14 == 0;
          if (!v14 && !v8)
          {
            CFRelease(v10);
            uint64_t v10 = 0;
            BOOL v15 = 1;
          }
          CFRelease(v13);
        }
        else
        {
          BOOL v15 = 0;
          uint64_t v10 = v12;
        }
      }
      else
      {
        BOOL v15 = 0;
      }
      if (v9 >= Count) {
        break;
      }
      ++v9;
    }
    while (!v15);
  }
  CFRelease(v5);
  return v10;
}

CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef person)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v12 = _isMainThread();
    int v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef)", 2438, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  CFArrayRef v6 = (const __CFArray *)ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier((void *)person, 0);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef)", 2440, @">> ", 0, v7, v8, v9, v11);
  }
  return v6;
}

void ABPersonSetSoundIdentifierForMultiValueIdentifier(const void *a1, uint64_t a2, void *a3)
{
  int v17 = a2;
  if (ABLogAPIUsage())
  {
    uint64_t v16 = _isMainThread();
    CFArrayRef v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetSoundIdentifierForMultiValueIdentifier(ABRecordRef, int, CFStringRef)", 1869, v6, 0, v7, v8, v9, (uint64_t)v16);
    CFRelease(v6);
  }
  if ((a2 & 0x80000000) != 0) {
    CFStringRef v10 = 0;
  }
  else {
    CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", a2);
  }
  CFTypeRef v11 = ABRecordCopyValue(a1, kABPersonSoundProperty);
  if (v11)
  {
    CFTypeRef v12 = v11;
    CFArrayRef MutableCopy = (__CFString *)ABMultiValueCreateMutableCopy(v11);
    CFRelease(v12);
  }
  else
  {
    CFArrayRef MutableCopy = (__CFString *)ABMultiValueCreateMutable(0x101u);
  }
  IndexForunsigned __int8 Identifier = ABMultiValueGetIndexForIdentifier(MutableCopy, a2);
  if (IndexForIdentifier == -1)
  {
    if (a3)
    {
      CFIndex Count = ABMultiValueGetCount(MutableCopy);
      ABMultiValueInsertAndCreateIdentifier((uint64_t)MutableCopy, a3, 0, Count, 0, &v17, 0);
    }
    if (MutableCopy) {
      goto LABEL_16;
    }
  }
  else
  {
    if (a3)
    {
      ABMultiValueReplaceValueAtIndex(MutableCopy, a3, IndexForIdentifier);
      if (!MutableCopy) {
        goto LABEL_17;
      }
LABEL_16:
      ABCRecordSetValue(a1, kABCSoundProperty, MutableCopy);
      CFRelease(MutableCopy);
      goto LABEL_17;
    }
    ABMultiValueRemoveValueAndLabelAtIndex(MutableCopy, IndexForIdentifier);
    if (MutableCopy) {
      goto LABEL_16;
    }
  }
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
}

CFComparisonResult ABPersonCompareNameOfPeople(uint64_t a1, uint64_t a2, int a3)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v11 = _isMainThread();
    CFArrayRef v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFComparisonResult ABPersonCompareNameOfPeople(ABRecordRef, ABRecordRef, ABPersonSortOrdering)", 1910, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCPersonCompareNameOfPeople(a1, a2, a3);
}

uint64_t ABAddressBookFindPersonMatchingPhoneNumber(uint64_t a1, uint64_t a2, int *a3, void *a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingPhoneNumber(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)", 1924, v9, @"%@, phoneNumber=%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCFindPersonMatchingPhoneNumber(a1, a2, a3, a4);
}

uint64_t ABAddressBookFindPersonMatchingPhoneNumberWithCountry(uint64_t a1, uint64_t a2, void *a3, int *a4, void *a5)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountry(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)", 1928, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  return ABCFindPersonMatchingPhoneNumberWithCountry(a1, a2, a3, a4, a5);
}

uint64_t ABAddressBookFindPersonMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, int *a4, void *a5)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountryAndHint(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *, const char *)", 1932, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  return ABCFindPersonMatchingPhoneNumberWithCountryAndHint(a1, a2, a3, a4, a5);
}

CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(uint64_t a1, uint64_t a2, void *a3, const __CFArray **a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(ABCAddressBookRef, CFStringRef, CFStringRef, CFArrayRef *, const char *)", 1937, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  return ABCCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(a1, a2, a3, a4);
}

uint64_t ABAddressBookFindPersonMatchingURL(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingURL(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)", 1942, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCFindPersonMatchingURL(a1, a2, a3);
}

uint64_t ABAddressBookFindPersonMatchingEmailAddress(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingEmailAddress(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)", 1946, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCFindPersonMatchingEmailAddress(a1, a2, a3);
}

void ABAddressBookCopyPeopleAndIdentifiersMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6)
{
  if (ABLogAPIUsage())
  {
    uint64_t v12 = _isMainThread();
    uint64_t v13 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v12);
    uint64_t v14 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookCopyPeopleAndIdentifiersMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *)", 1960, v13, @"%@", v15, v16, v17, v14);
    CFRelease(v13);
  }
  ABCCopyPeopleAndIdentifiersMatchingName(a1, a2, a3, a4, a5, a6);
}

void ABAddressBookCopyPeopleAndMultiValuePropertiesMatchingName(uint64_t a1, __CFString *a2, int a3, int a4, const __CFArray **a5, const __CFArray **a6, const __CFArray **a7)
{
  if (ABLogAPIUsage())
  {
    uint64_t v14 = _isMainThread();
    uint64_t v15 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v14);
    uint64_t v16 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookCopyPeopleAndMultiValuePropertiesMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *)", 1968, v15, @"%@", v17, v18, v19, v16);
    CFRelease(v15);
  }
  ABCCopyPeopleAndMultiValuePropertiesMatchingName(a1, a2, a3, a4, a5, a6, a7);
}

sqlite3_stmt *ABAddressBookCopyArrayOfAllPeopleMatching(uint64_t a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v10);
    uint64_t v12 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleMatching(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef)", 1975, v11, @"%@", v13, v14, v15, v12);
    CFRelease(v11);
  }
  uint64_t v16 = *(void *)(a1 + 16);
  ABPersonSortOrdering SortOrdering = ABPersonGetSortOrdering();
  return ABCDBCopyArrayOfAllPeopleMatchingString(v16, a2, SortOrdering, a3, a4, a5);
}

CFMutableArrayRef ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(CFMutableArrayRef Mutable)
{
  if (ABLogAPIUsage())
  {
    int v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)Mutable);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(ABAddressBookRef, CFStringRef)", 1992, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (Mutable)
  {
    CPRecordStoreGetDatabase();
    uint64_t v8 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData((uint64_t)Mutable);
    if (v8 && *(void *)(v8 + 8))
    {
      CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, 0);
      uint64_t v9 = *(sqlite3_stmt **)(v8 + 8);
      uint64_t v10 = (const char *)_CPCreateUTF8StringFromCFString();
      sqlite3_bind_text(v9, 1, v10, -1, MEMORY[0x1E4F14838]);
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

uint64_t _accumulateUIDsMatchingExternalUUID(uint64_t a1, __CFArray *a2)
{
  int v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(a2, (const void *)v3);
  return 0;
}

uint64_t ABAddressBookFindPersonMatchingMultiValueUUID(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v7);
    uint64_t v9 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingMultiValueUUID(ABAddressBookRef, CFStringRef, ABPropertyID *, ABMultiValueIdentifier *)", 2016, v8, @"%@, multiValueUUID=%@", v10, v11, v12, v9);
    CFRelease(v8);
  }
  if (a1)
  {
    CPRecordStoreGetDatabase();
    uint64_t v13 = CPSqliteDatabaseStatementForReading();
    ABRegulatoryLogReadContactsData(a1);
    if (v13)
    {
      uint64_t v14 = *(sqlite3_stmt **)(v13 + 8);
      if (v14)
      {
        uint64_t v15 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v14, 1, v15, -1, MEMORY[0x1E4F14838]);
        if (sqlite3_step(*(sqlite3_stmt **)(v13 + 8)) == 100)
        {
          uint64_t v16 = sqlite3_column_int(*(sqlite3_stmt **)(v13 + 8), 0);
          int v17 = sqlite3_column_int(*(sqlite3_stmt **)(v13 + 8), 1);
          int v18 = sqlite3_column_int(*(sqlite3_stmt **)(v13 + 8), 2);
          CPSqliteStatementReset();
          if (v16 == -1)
          {
            a1 = 0;
            if (!a3)
            {
LABEL_13:
              if (a4) {
                *a4 = v18;
              }
              goto LABEL_15;
            }
          }
          else
          {
            a1 = ABCDBContextRecordForUIDOfType(*(void *)(a1 + 16), v16, (uint64_t)ABCPersonClass);
            if (!a3) {
              goto LABEL_13;
            }
          }
LABEL_12:
          *a3 = v17;
          goto LABEL_13;
        }
        CPSqliteStatementReset();
      }
    }
    a1 = 0;
    int v18 = -1;
    int v17 = -1;
    if (!a3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_15:
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookFindPersonMatchingMultiValueUUID(ABAddressBookRef, CFStringRef, ABPropertyID *, ABMultiValueIdentifier *)", 2052, @">> ", 0, v19, v20, v21, v23);
  }
  return a1;
}

const void *ABAddressBookCopyPersonMatchingInternalUUID(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyPersonMatchingInternalUUID(ABAddressBookRef, CFStringRef)", 2086, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  int v10 = kABPersonInternalUUIDProperty;
  return _copyPersonMatchingPrivateProperty(a1, v10, a2);
}

const void *_copyPersonMatchingPrivateProperty(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  int v3 = ABPersonNameForProperty(a2);
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"WHERE %@ = ?", v3);
  CFArrayRef v5 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFRelease(v4);
  if (!v5) {
    return 0;
  }
  if (CFArrayGetCount(v5) < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    uint64_t v7 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
  }
  CFRelease(v5);
  return v7;
}

const void *ABAddressBookCopyPersonMatchingMapData(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v4 = _isMainThread();
    CFArrayRef v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyPersonMatchingMapData(ABAddressBookRef, CFStringRef)", 2091, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a2) {
    return 0;
  }
  CFRetain(a2);
  int v10 = _copyPersonMatchingPrivateProperty(a1, kABPersonMapsDataProperty, (uint64_t)a2);
  CFRelease(a2);
  return v10;
}

__CFString *ABPersonCopyStringForIndexing(void *a1, int a2, int a3)
{
  values = a1;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (a2) {
    CFArrayRef v8 = ABPersonCopyArrayOfAllLinkedPeople(a1);
  }
  else {
    CFArrayRef v8 = CFArrayCreate(v6, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  }
  CFArrayRef v9 = v8;
  if (_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken != -1) {
    dispatch_once(&_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken, &__block_literal_global_391);
  }
  CFArrayRef v10 = (const __CFArray *)_ABPersonGetArrayOfAllFTSPropertyIDs_retVal;
  CFIndex Count = CFArrayGetCount((CFArrayRef)_ABPersonGetArrayOfAllFTSPropertyIDs_retVal);
  if (v9)
  {
    uint64_t v12 = Count;
    CFAllocatorRef v31 = v6;
    int v32 = a3;
    CFIndex v13 = CFArrayGetCount(v9);
    if (v13 >= 1)
    {
      CFIndex v14 = v13;
      for (CFIndex i = 0; i != v14; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
        if (v12 >= 1)
        {
          int v17 = ValueAtIndex;
          for (CFIndex j = 0; j != v12; ++j)
          {
            ABPropertyID v19 = CFArrayGetValueAtIndex(v10, j);
            StringForIndexingForuint64_t Property = ABPersonCreateStringForIndexingForProperty(v17, v19);
            if (StringForIndexingForProperty)
            {
              uint64_t v21 = StringForIndexingForProperty;
              CFStringAppend(Mutable, StringForIndexingForProperty);
              CFStringAppend(Mutable, @" ");
              CFRelease(v21);
            }
          }
        }
      }
    }
    CFRelease(v9);
    a3 = v32;
    CFAllocatorRef v6 = v31;
  }
  if (!a3) {
    return Mutable;
  }
  uint64_t v22 = CFStringCreateMutable(v6, 0);
  uint64_t v23 = (const void *)ABTokenListCreate();
  AddressBoouint64_t k = ABRecordGetAddressBook();
  WordTokenizer = ABAddressBookGetWordTokenizer(AddressBook);
  ABTokenListPopulateFromString((uint64_t)v23, WordTokenizer, 0, Mutable, 1, 1, 0);
  uint64_t v26 = ABTokenListGetCount((uint64_t)v23);
  if (v26 >= 1)
  {
    uint64_t v27 = v26;
    for (uint64_t k = 0; k != v27; ++k)
    {
      CFStringRef TokenAtIndex = (const __CFString *)ABTokenListGetTokenAtIndex((uint64_t)v23, k);
      CFStringAppend(v22, TokenAtIndex);
      CFStringAppend(v22, @" ");
    }
  }
  CFRelease(v23);
  CFRelease(Mutable);
  return v22;
}

uint64_t _ABPersonGetArrayOfAllFTSPropertyIDs()
{
  if (_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken != -1) {
    dispatch_once(&_ABPersonGetArrayOfAllFTSPropertyIDs_onceToken, &__block_literal_global_391);
  }
  return _ABPersonGetArrayOfAllFTSPropertyIDs_retVal;
}

__CFString *ABPersonCreateStringForIndexingForProperty(const void *a1, ABPropertyID property)
{
  if (kABPersonPhoneProperty == property)
  {
    uint64_t active = CPPhoneNumberCopyActiveCountryCode();
    if (active)
    {
      CFArrayRef v5 = (const void *)active;
      CFArrayRef v6 = (const __CFArray *)ABRecordCopyValue(a1, property);
      if (v6)
      {
        CFArrayRef v7 = v6;
        CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
        CFIndex Count = ABMultiValueGetCount(v7);
        if (Count >= 1)
        {
          CFIndex v10 = Count;
          for (CFIndex i = 0; i != v10; ++i)
          {
            CFStringRef v12 = (const __CFString *)ABMultiValueCopyValueAtIndex(v7, i);
            if (v12)
            {
              CFStringRef v13 = v12;
              CFStringAppend(Mutable, v12);
              CFArrayRef v14 = (const __CFArray *)_PNCopyIndexStringsForAddressBookSearch();
              if (v14)
              {
                CFArrayRef v15 = v14;
                CFStringRef v16 = CFStringCreateByCombiningStrings(0, v14, @" ");
                if (v16)
                {
                  CFStringRef v17 = v16;
                  CFStringAppend(Mutable, @" ");
                  CFStringAppend(Mutable, v17);
                  CFStringAppend(Mutable, @" ");
                  CFRelease(v17);
                }
                CFRelease(v15);
              }
              CFRelease(v13);
            }
          }
        }
        goto LABEL_51;
      }
      goto LABEL_29;
    }
    return 0;
  }
  ABPropertyType TypeOfProperty = ABPersonGetTypeOfProperty(property);
  if (TypeOfProperty == 261)
  {
    uint64_t v20 = (__CFString *)ABRecordCopyValue(a1, property);
    if (!v20) {
      return 0;
    }
    uint64_t v21 = v20;
    if (ABPersonCreateStringForIndexingForProperty_onceToken != -1) {
      dispatch_once(&ABPersonCreateStringForIndexingForProperty_onceToken, &__block_literal_global_4);
    }
    if (kABPersonAddressProperty == property)
    {
      uint64_t v22 = &ABPersonCreateStringForIndexingForProperty_addressKeys;
    }
    else if (kABPersonSocialProfileProperty == property)
    {
      uint64_t v22 = &ABPersonCreateStringForIndexingForProperty_socialKeys;
    }
    else
    {
      if (kABPersonInstantMessageProperty != property) {
        goto LABEL_47;
      }
      uint64_t v22 = &ABPersonCreateStringForIndexingForProperty_instantMessagingKeys;
    }
    int v25 = (const void **)*v22;
    if (*v22)
    {
      CFArrayRef v26 = ABMultiValueCopyArrayOfAllValues(v21);
      if (v26)
      {
        CFArrayRef v27 = v26;
        CFIndex v28 = CFArrayGetCount(v26);
        if (v28)
        {
          uint64_t v29 = v28;
          CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
          if (v29 >= 1)
          {
            for (CFIndex j = 0; j != v29; ++j)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v27, j);
              int v32 = *v25;
              if (*v25)
              {
                CFDictionaryRef v33 = ValueAtIndex;
                double v34 = v25 + 1;
                do
                {
                  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v33, v32);
                  if (Value)
                  {
                    CFStringRef v36 = Value;
                    if (CFStringGetLength(Value))
                    {
                      CFStringAppend(Mutable, v36);
                      CFStringAppend(Mutable, @" ");
                    }
                  }
                  uint64_t v37 = *v34++;
                  int v32 = v37;
                }
                while (v37);
              }
            }
          }
        }
        else
        {
          CFMutableStringRef Mutable = 0;
        }
        CFRelease(v27);
        CFRelease(v21);
        if (!Mutable || CFStringGetLength(Mutable)) {
          return Mutable;
        }
        uint64_t v38 = Mutable;
        goto LABEL_48;
      }
    }
LABEL_47:
    uint64_t v38 = v21;
LABEL_48:
    CFRelease(v38);
    return 0;
  }
  if (TypeOfProperty == 257)
  {
    CFTypeRef v23 = ABRecordCopyValue(a1, property);
    if (v23)
    {
      CFArrayRef v5 = v23;
      CFArrayRef v24 = ABMultiValueCopyArrayOfAllValues(v23);
      if (v24)
      {
        CFArrayRef v7 = v24;
        if (CFArrayGetCount(v24)) {
          CFMutableStringRef Mutable = (__CFString *)CFStringCreateByCombiningStrings(0, v7, @" ");
        }
        else {
          CFMutableStringRef Mutable = 0;
        }
LABEL_51:
        CFRelease(v7);
        goto LABEL_52;
      }
LABEL_29:
      CFMutableStringRef Mutable = 0;
LABEL_52:
      CFRelease(v5);
      return Mutable;
    }
    return 0;
  }
  if (TypeOfProperty != 1) {
    return 0;
  }
  return (__CFString *)ABRecordCopyValue(a1, property);
}

void *__ABPersonCreateStringForIndexingForProperty_block_invoke()
{
  CFStringRef v0 = malloc_type_calloc(9uLL, 8uLL, 0x6004044C4A2DFuLL);
  ABPersonCreateStringForIndexingForProperty_addressKeys = (uint64_t)v0;
  void *v0 = @"Street";
  v0[1] = @"ZIP";
  v0[2] = @"State";
  v0[3] = @"Country";
  v0[4] = @"CountryCode";
  v0[5] = @"City";
  v0[6] = @"SubLocality";
  v0[7] = @"SubAdministrativeArea";
  uint64_t v1 = malloc_type_calloc(3uLL, 8uLL, 0x6004044C4A2DFuLL);
  ABPersonCreateStringForIndexingForProperty_socialKeys = (uint64_t)v1;
  void *v1 = @"username";
  v1[1] = @"identifier";
  uint64_t result = malloc_type_calloc(2uLL, 8uLL, 0x6004044C4A2DFuLL);
  ABPersonCreateStringForIndexingForProperty_instantMessagingKeys = (uint64_t)result;
  *uint64_t result = @"username";
  return result;
}

__CFString *ABPersonCreateSupplementalStringForIndexingForCompositeName(const void *a1)
{
  CFMutableStringRef v2 = ABPersonCopyCompositeName(a1);
  if (ABPersonCreateSupplementalStringForIndexingForCompositeName___onceToken != -1) {
    dispatch_once(&ABPersonCreateSupplementalStringForIndexingForCompositeName___onceToken, &__block_literal_global_346);
  }
  if (ABContentsExclusivelyInCharacterSet(v2, ABPersonCreateSupplementalStringForIndexingForCompositeName___invertedKorean))
  {
    CFMutableStringRef Mutable = 0;
  }
  else
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    for (unsigned int i = 0; i != 32; ++i)
    {
      if (i > 0x10 || ((1 << i) & 0x10116) == 0)
      {
        CFArrayRef v7 = CFStringCreateMutable(v5, 0);
        if (v7)
        {
          CFStringRef v8 = v7;
          ABPersonAppendNameParts(a1, i, v7, 1, 0, 1);
          if (CFStringGetLength(v8))
          {
            CFStringAppend(Mutable, v8);
            CFStringAppend(Mutable, @" ");
          }
          CFRelease(v8);
        }
      }
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  return Mutable;
}

void *__ABPersonCreateSupplementalStringForIndexingForCompositeName_block_invoke()
{
  uint64_t result = ABGetCharacterSetWithPattern(@"[^[:Hangul:]]");
  ABPersonCreateSupplementalStringForIndexingForCompositeName___invertedKorean = (uint64_t)result;
  return result;
}

__CFString *ABPersonCreateSmartDialerStringForIndexingFromCFString(const __CFString *a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (a1)
  {
    CFIndex Length = CFStringGetLength(a1);
    if (Length)
    {
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, Length, a1);
      if (!CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1D4F0], 0))
      {
        ABDiagnosticsEnabled();
        _ABLog2(3, (uint64_t)"CFStringRef ABPersonCreateSmartDialerStringForIndexingFromCFString(CFStringRef)", 2348, 0, @"Smart dialer stripDiacritics transform failure for string: %@", v5, v6, v7, (uint64_t)a1);
      }
      CFIndex v8 = CFStringGetLength(MutableCopy);
      if (v8)
      {
        uint64_t v9 = v8;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        *(_OWORD *)buffer = 0u;
        long long v33 = 0u;
        CFStringRef v40 = MutableCopy;
        uint64_t v43 = 0;
        CFIndex v44 = v8;
        CharactersPtr = CFStringGetCharactersPtr(MutableCopy);
        CStringPtr = 0;
        __int16 v41 = CharactersPtr;
        if (!CharactersPtr) {
          CStringPtr = CFStringGetCStringPtr(MutableCopy, 0x600u);
        }
        double v42 = CStringPtr;
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        if (v9 >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = 64;
          while (1)
          {
            uint64_t v15 = (unint64_t)v13 >= 4 ? 4 : v13;
            UniChar chars = 0;
            CFIndex v16 = v44;
            if (v44 > v13) {
              break;
            }
LABEL_45:
            ++v13;
            --v12;
            ++v14;
            if (v9 == v13) {
              goto LABEL_49;
            }
          }
          if (v41)
          {
            UniChar v17 = v41[v13 + v43];
          }
          else if (v42)
          {
            UniChar v17 = v42[v43 + v13];
          }
          else
          {
            uint64_t v18 = v45;
            BOOL v19 = v46 > v13 && v45 <= v13;
            if (!v19)
            {
              uint64_t v20 = -v15;
              uint64_t v21 = v15 + v12;
              uint64_t v22 = v14 - v15;
              uint64_t v23 = v13 + v20;
              CFIndex v24 = v23 + 64;
              if (v23 + 64 >= v44) {
                CFIndex v24 = v44;
              }
              uint64_t v45 = v23;
              uint64_t v46 = v24;
              if (v44 >= v22) {
                CFIndex v16 = v22;
              }
              v47.CFIndex length = v16 + v21;
              v47.location = v23 + v43;
              CFStringGetCharacters(v40, v47, buffer);
              uint64_t v18 = v45;
            }
            UniChar v17 = buffer[v13 - v18];
          }
          UniChar chars = v17;
          int v25 = v17;
          if ((unsigned __int16)(v17 - 65) > 0x19u)
          {
            if ((unsigned __int16)(v17 - 97) > 0x19u)
            {
              if ((unsigned __int16)(v17 + 223) > 0x19u)
              {
                if ((unsigned __int16)(v17 + 191) > 0x19u)
                {
                  if ((unsigned __int16)(v17 + 240) > 9u) {
                    goto LABEL_39;
                  }
                  v17 += 288;
LABEL_38:
                  UniChar chars = v17;
LABEL_39:
                  if ((unsigned __int16)(v17 - 48) < 0xAu
                    || ((BOOL v19 = v17 > 0x2Bu, v28 = (1 << v17) & 0xC0900000000, !v19) ? (v29 = v28 == 0) : (v29 = 1),
                        !v29))
                  {
                    CFStringAppendCharacters(Mutable, &chars, 1);
                  }
                  goto LABEL_45;
                }
                int v27 = -65345;
              }
              else
              {
                int v27 = -65313;
              }
              unsigned int v26 = v25 + v27;
            }
            else
            {
              unsigned int v26 = v17 - 97;
            }
          }
          else
          {
            unsigned int v26 = v17 - 65;
          }
          UniChar v17 = _LetterNumberMap[v26] + 48;
          goto LABEL_38;
        }
      }
LABEL_49:
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
  }
  return Mutable;
}

const void *ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(void *a1, uint64_t a2, uint64_t a3)
{
  values = a1;
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a3);
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(ABRecordRef, CFStringRef, ABAddressBookRef)", 2390, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  int IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
  int v13 = IntValue;
  if (!a3 || IntValue == -1) {
    goto LABEL_10;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"WHERE PersonLink = ?");
  uint64_t v15 = MutableCopy;
  if (a2) {
    CFStringAppend(MutableCopy, @" AND StoreID IN (SELECT abs.rowid FROM ABStore abs, ABAccount aba WHERE abs.Accountint ID = aba.ROWID AND aba.AccountIdentifier = ?)");
  }
  CFIndex v16 = (const void *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFRelease(v15);
  if (!v16) {
    goto LABEL_10;
  }
  if (!CFArrayGetCount((CFArrayRef)v16))
  {
    CFRelease(v16);
LABEL_10:
    if (!a2 || v13 == -1) {
      CFIndex v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    }
    else {
      CFIndex v16 = 0;
    }
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(ABRecordRef, CFStringRef, ABAddressBookRef)", 2423, @">> ", 0, v17, v18, v19, v21);
  }
  return v16;
}

sqlite3_stmt *__ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook_block_invoke(sqlite3_stmt *result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    uint64_t result = *(sqlite3_stmt **)(a2 + 8);
    if (result)
    {
      sqlite3_bind_int(result, 1, *((_DWORD *)v3 + 10));
      uint64_t result = (sqlite3_stmt *)*((void *)v3 + 4);
      if (result)
      {
        CFStringRef v4 = *(sqlite3_stmt **)(a2 + 8);
        uint64_t v5 = (const char *)_CPCreateUTF8StringFromCFString();
        uint64_t v6 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
        return (sqlite3_stmt *)sqlite3_bind_text(v4, 2, v5, -1, v6);
      }
    }
  }
  return result;
}

const void *ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(void *a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v15 = _isMainThread();
    CFStringRef v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(ABRecordRef, CFStringRef)", 2428, v4, 0, v5, v6, v7, (uint64_t)v15);
    CFRelease(v4);
  }
  AddressBoouint64_t k = ABRecordGetAddressBook();
  uint64_t v9 = ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(a1, a2, AddressBook);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(ABRecordRef, CFStringRef)", 2431, @">> ", 0, v10, v11, v12, v14);
  }
  return v9;
}

uint64_t ABPersonCopyLinkUUID(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v18 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLinkUUID(ABRecordRef)", 2447, v2, 0, v3, v4, v5, (uint64_t)v18);
    CFRelease(v2);
  }
  AddressBoouint64_t k = ABRecordGetAddressBook();
  if (AddressBook
    && (uint64_t v7 = AddressBook, CPRecordStoreGetDatabase())
    && (int IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty), IntValue != -1)
    && (int v9 = IntValue, v10 = CPSqliteDatabaseStatementForReading(), ABRegulatoryLogReadContactsData(v7), v10)
    && (uint64_t v11 = *(sqlite3_stmt **)(v10 + 8)) != 0)
  {
    sqlite3_bind_int(v11, 1, v9);
    uint64_t v12 = CPSqliteStatementCopyStringResult();
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABPersonCopyLinkUUID(ABRecordRef)", 2466, @">> ", 0, v13, v14, v15, v17);
  }
  return v12;
}

uint64_t ABPersonSetLinkUUID(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v14 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonSetLinkUUID(ABRecordRef, CFStringRef)", 2472, v2, 0, v3, v4, v5, (uint64_t)v14);
    CFRelease(v2);
  }
  if (!ABRecordGetAddressBook()) {
    return 0;
  }
  if (!CPRecordStoreGetDatabase()) {
    return 0;
  }
  int IntValue = ABRecordGetIntValue(a1, kABPersonLinkProperty);
  if (IntValue == -1) {
    return 0;
  }
  int v7 = IntValue;
  uint64_t v8 = CPSqliteDatabaseStatementForWriting();
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(sqlite3_stmt **)(v8 + 8);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (const char *)_CPCreateUTF8StringFromCFString();
  uint64_t v12 = 1;
  sqlite3_bind_text(v10, 1, v11, -1, MEMORY[0x1E4F14838]);
  sqlite3_bind_int(*(sqlite3_stmt **)(v9 + 8), 2, v7);
  CPSqliteStatementPerform();
  CPSqliteStatementReset();
  return v12;
}

uint64_t ABPersonLinkPerson(const void *a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    long long v50 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2502, v4, 0, v5, v6, v7, (uint64_t)v50);
    CFRelease(v4);
  }
  uint64_t result = ABRecordGetAddressBook();
  if (result)
  {
    uint64_t v9 = result;
    if (result != ABRecordGetAddressBook()) {
      return 0;
    }
    int IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
    int v11 = ABRecordGetIntValue((uint64_t)a2, kABPersonLinkProperty);
    CFTypeRef v12 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a2);
    if (!v12) {
      CFTypeRef v12 = CFRetain(a2);
    }
    CFTypeRef v13 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a1);
    if (!v13) {
      CFTypeRef v13 = CFRetain(a1);
    }
    if (IntValue != -1 && v11 != -1)
    {
      uint64_t v22 = ABPersonCopyLinkUUID((uint64_t)a2);
      CFArrayRef v23 = ABPersonCopyArrayOfAllLinkedPeople(a2);
      if (v23)
      {
        CFArrayRef v24 = v23;
        CFTypeRef v53 = v12;
        CFIndex Count = CFArrayGetCount(v23);
        if (Count < 1)
        {
          CFRelease(v24);
        }
        else
        {
          CFIndex v26 = Count;
          uint64_t v51 = v22;
          CFIndex v27 = 0;
          LOBYTE(v28) = 1;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v24, v27);
            if ((_BYTE)v28) {
              int v28 = ABCRecordSetIntValueAndReturnError(ValueAtIndex, kABPersonLinkProperty, IntValue, 0);
            }
            else {
              int v28 = 0;
            }
            ++v27;
          }
          while (v26 != v27);
          CFRelease(v24);
          uint64_t v22 = v51;
          CFTypeRef v12 = v53;
          if (!v28)
          {
            int v17 = 0;
LABEL_42:
            if (!v22) {
              goto LABEL_56;
            }
            CFStringRef v40 = (const void *)v22;
            goto LABEL_55;
          }
        }
      }
      if (v22)
      {
        ABCDBContextLogChangeForUnifiedPerson(*(void *)(v9 + 16), v22, 5u);
      }
      else
      {
        ABDiagnosticsEnabled();
        uint64_t v30 = ABLogStringForPerson(a1);
        ABLogStringForPerson(a2);
        _ABLog2(3, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2545, 0, @"Failure getting toPersonLinkUUID while linking contact %@ to %@", v31, v32, v33, v30);
      }
      uint64_t v34 = ABPersonCopyLinkUUID((uint64_t)a1);
      if (v34)
      {
        long long v35 = (const void *)v34;
        ABCDBContextLogChangeForLinkingPersons(*(void *)(v9 + 16), a1, a2, v34);
        ABCDBContextLogChangeForUnifiedPerson(*(void *)(v9 + 16), (uint64_t)v35, 4u);
        CFRelease(v35);
      }
      else
      {
        ABDiagnosticsEnabled();
        uint64_t v36 = ABLogStringForPerson(a1);
        ABLogStringForPerson(a2);
        _ABLog2(3, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2555, 0, @"Failure getting personLinkUUID while linking contact %@ to %@", v37, v38, v39, v36);
      }
      int v17 = 1;
      goto LABEL_42;
    }
    BOOL v15 = (IntValue & v11) == -1;
    if ((IntValue & v11) == 0xFFFFFFFF)
    {
      CPRecordStoreGetDatabase();
      uint64_t v16 = CPSqliteDatabaseStatementForWriting();
      int v17 = v16;
      if (!v16) {
        goto LABEL_56;
      }
      BOOL v52 = (IntValue & v11) == -1;
      CFTypeRef v18 = v12;
      uint64_t v19 = *(sqlite3_stmt **)(v16 + 8);
      if (!v19
        || (ABRecordID RecordID = ABRecordGetRecordID(a1),
            sqlite3_bind_int(v19, 1, RecordID),
            int v21 = CPSqliteStatementPerform(),
            CPSqliteDatabaseConnectionForReading(),
            int IntValue = CPSqliteConnectionRowidOfLastInsert(),
            CPSqliteStatementReset(),
            v21 != 101))
      {
        int v17 = 0;
        CFTypeRef v12 = v18;
        goto LABEL_56;
      }
      CFTypeRef v12 = v18;
      BOOL v15 = v52;
    }
    else
    {
      if (IntValue != -1) {
        goto LABEL_33;
      }
      int IntValue = v11;
      if (v11 == -1)
      {
        int v17 = 0;
        goto LABEL_56;
      }
    }
    if (!ABCRecordSetIntValueAndReturnError(a1, kABPersonLinkProperty, IntValue, 0))
    {
      int v17 = 0;
      goto LABEL_46;
    }
    ABCDBContextLogChangeForPerson(*(void *)(v9 + 16), a1, 5u);
LABEL_33:
    int v17 = 1;
LABEL_46:
    if (v11 == -1)
    {
      if (ABCRecordSetIntValueAndReturnError(a2, kABPersonLinkProperty, IntValue, 0))
      {
        ABCDBContextLogChangeForPerson(*(void *)(v9 + 16), a2, 5u);
        int v17 = 1;
      }
      else
      {
        int v17 = 0;
      }
    }
    uint64_t v41 = ABPersonCopyLinkUUID((uint64_t)a1);
    if (v41)
    {
      uint64_t v42 = v41;
      ABCDBContextLogChangeForLinkingPersons(*(void *)(v9 + 16), a1, a2, v41);
      if (v15) {
        unsigned int v43 = 3;
      }
      else {
        unsigned int v43 = 4;
      }
      ABCDBContextLogChangeForUnifiedPerson(*(void *)(v9 + 16), v42, v43);
      CFStringRef v40 = (const void *)v42;
LABEL_55:
      CFRelease(v40);
      goto LABEL_56;
    }
    ABDiagnosticsEnabled();
    uint64_t v46 = ABLogStringForPerson(a1);
    ABLogStringForPerson(a2);
    _ABLog2(3, (uint64_t)"_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)", 2605, 0, @"Failure getting linkUUID while linking contact %@ to %@", v47, v48, v49, v46);
LABEL_56:
    BOOL HasImageData = ABPersonHasImageData(v12);
    BOOL v45 = ABPersonHasImageData(v13);
    if (!HasImageData || !v45) {
      _updatePreferredImageForPerson(a2, 1, 1, 1);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v13) {
      CFRelease(v13);
    }
    return v17 != 0;
  }
  return result;
}

CFTypeRef ABPersonCopyPreferredLinkedPersonForImageIfExists(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopyPreferredLinkedPersonForImageIfExists(ABRecordRef)", 2833, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return _copyPreferredPersonWithPreferredColumnIfExists(a1, 0);
}

uint64_t ABPersonUnlink(CFTypeRef a1)
{
  if (ABLogAPIUsage())
  {
    CFIndex v27 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonUnlink(ABRecordRef, CFErrorRef *)", 2629, v2, 0, v3, v4, v5, (uint64_t)v27);
    CFRelease(v2);
  }
  int IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
  uint64_t v7 = ABPersonCopyLinkUUID((uint64_t)a1);
  uint64_t v8 = (const void *)v7;
  if (IntValue == -1)
  {
    uint64_t v21 = 1;
    if (!v7) {
      return v21;
    }
  }
  else
  {
    AddressBoouint64_t k = ABRecordGetAddressBook();
    CFTypeRef v10 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a1);
    if (v10 == a1) {
      _updatePreferredImageForPerson(a1, 0, 0, 1);
    }
    if (v10) {
      CFRelease(v10);
    }
    CFArrayRef v11 = ABPersonCopyArrayOfAllLinkedPeople(a1);
    if (v11)
    {
      CFArrayRef v12 = v11;
      CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
      CFIndex Count = CFArrayGetCount(v12);
      if (Count >= 1)
      {
        CFIndex v15 = Count;
        for (CFIndex i = 0; i != v15; ++i)
        {
          CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(v12, i);
          if (ValueAtIndex != a1)
          {
            CFTypeRef v18 = ValueAtIndex;
            if (ABRecordGetIntValue((uint64_t)ValueAtIndex, kABPersonLinkProperty) == IntValue) {
              CFArrayAppendValue(Mutable, v18);
            }
          }
        }
      }
      if (CFArrayGetCount(Mutable) == 1)
      {
        uint64_t v19 = CFArrayGetValueAtIndex(Mutable, 0);
        if (ABCRecordSetIntValueAndReturnError(v19, kABPersonLinkProperty, -1, 0)) {
          ABCDBContextLogChangeForPerson(*(void *)(AddressBook + 16), v19, 3u);
        }
        unsigned int v20 = 5;
      }
      else
      {
        unsigned int v20 = 4;
      }
      CFRelease(Mutable);
      CFRelease(v12);
    }
    else
    {
      unsigned int v20 = 4;
    }
    uint64_t v21 = ABCRecordSetIntValueAndReturnError(a1, kABPersonLinkProperty, -1, 0);
    if (v21)
    {
      ABCDBContextLogChangeForPerson(*(void *)(AddressBook + 16), a1, 7u);
      ABCDBContextLogChangeForPerson(*(void *)(AddressBook + 16), a1, 3u);
    }
    if (!v8)
    {
      ABDiagnosticsEnabled();
      uint64_t v22 = ABLogStringForPerson(a1);
      _ABLog2(3, (uint64_t)"_Bool ABPersonUnlink(ABRecordRef, CFErrorRef *)", 2687, 0, @"Failure getting linkUUID while unlinking contact %@ ", v23, v24, v25, v22);
      return v21;
    }
    ABCDBContextLogChangeForUnifiedPerson(*(void *)(AddressBook + 16), (uint64_t)v8, v20);
  }
  CFRelease(v8);
  return v21;
}

uint64_t ABPersonIsDowntimeWhitelisted(const void *a1)
{
  ABRecordID RecordID = ABRecordGetRecordID(a1);
  if (!a1) {
    return 0;
  }
  if (RecordID == -1) {
    return 0;
  }
  uint64_t v3 = (void *)ABRecordCopyValue(a1, kABPersonDowntimeWhitelistProperty);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = [v3 isEqualToString:@"true"];
  CFRelease(v4);
  return v5;
}

ABRecordRef ABPersonIsReadonly(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPersonIsReadonly(ABRecordRef)", 2782, v2, 0, v3, v4, v5, (uint64_t)v9);
    CFRelease(v2);
  }
  ABRecordRef result = ABPersonCopySource(a1);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t IsContentReadonly = ABSourceIsContentReadonly((uint64_t)result);
    CFRelease(v7);
    return (ABRecordRef)IsContentReadonly;
  }
  return result;
}

CFTypeRef ABPersonCopyPreferredLinkedPersonForImage(const void *a1)
{
  if (ABLogAPIUsage())
  {
    CFIndex v15 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopyPreferredLinkedPersonForImage(ABRecordRef)", 2794, v2, 0, v3, v4, v5, (uint64_t)v15);
    CFRelease(v2);
  }
  CFTypeRef v6 = ABPersonCopyPreferredLinkedPersonForImageIfExists((uint64_t)a1);
  if (v6) {
    return v6;
  }
  CFArrayRef v8 = ABPersonCopyArrayOfAllLinkedPeople(a1);
  if (!v8) {
    goto LABEL_23;
  }
  CFArrayRef v9 = v8;
  CFIndex Count = CFArrayGetCount(v8);
  if (Count < 1)
  {
    CFTypeRef v6 = 0;
    goto LABEL_21;
  }
  CFIndex v11 = Count;
  CFTypeRef v12 = 0;
  uint64_t v13 = 1;
  do
  {
    CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v13 - 1);
    if (ABPersonHasImageData(ValueAtIndex))
    {
      if (v12 || !ABPersonIsReadonly(ValueAtIndex))
      {
        CFTypeRef v6 = CFRetain(ValueAtIndex);
        goto LABEL_14;
      }
      CFTypeRef v12 = CFRetain(ValueAtIndex);
    }
    CFTypeRef v6 = 0;
LABEL_14:
    if (v13 >= v11) {
      break;
    }
    ++v13;
  }
  while (!v6);
  if (v12 && v6)
  {
    CFRelease(v12);
    CFRelease(v9);
    return v6;
  }
  if (!v12) {
LABEL_21:
  }
    CFTypeRef v12 = v6;
  CFRelease(v9);
  CFTypeRef v6 = v12;
  if (v12) {
    return v6;
  }
LABEL_23:
  return CFRetain(a1);
}

void ABPersonSetPreferredLinkedPersonForImage(const void *a1)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v6 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetPreferredLinkedPersonForImage(ABRecordRef)", 2839, v2, 0, v3, v4, v5, (uint64_t)v6);
    CFRelease(v2);
  }
  _updatePreferredImageForPerson(a1, 1, 1, 1);
}

void ABPersonSetPreferredLinkedPersonForName(const void *a1)
{
  if (ABLogAPIUsage())
  {
    unsigned int v20 = _isMainThread();
    CFMutableStringRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonSetPreferredLinkedPersonForName(ABRecordRef)", 2845, v2, 0, v3, v4, v5, (uint64_t)v20);
    CFRelease(v2);
  }
  uint64_t v6 = ABCGetAddressBookForRecord();
  if (v6)
  {
    uint64_t v7 = v6;
    ABRecordID RecordID = ABRecordGetRecordID(a1);
    int IntValue = ABRecordGetIntValue((uint64_t)a1, kABPersonLinkProperty);
    if (IntValue != -1)
    {
      int v10 = IntValue;
      CPRecordStoreGetDatabase();
      uint64_t v11 = CPSqliteDatabaseStatementForWriting();
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(sqlite3_stmt **)(v11 + 8);
        if (v13)
        {
          sqlite3_bind_int(v13, 1, RecordID);
          sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 2, v10);
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
      }
      uint64_t v14 = ABPersonCopyLinkUUID((uint64_t)a1);
      if (v14)
      {
        CFIndex v15 = (const void *)v14;
        ABCDBContextLogChangeForPerson(*(void *)(v7 + 16), a1, 8u);
        ABCDBContextLogChangeForUnifiedPerson(*(void *)(v7 + 16), (uint64_t)v15, 4u);
        CFRelease(v15);
      }
      else
      {
        ABDiagnosticsEnabled();
        uint64_t v16 = ABLogStringForPerson(a1);
        _ABLog2(3, (uint64_t)"void ABPersonSetPreferredLinkedPersonForName(ABRecordRef)", 2872, 0, @"Failure getting linkUUID while setting contact %@ as preferred name", v17, v18, v19, v16);
      }
    }
  }
}

uint64_t ABAddressBookClearAllMeCards(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 1;
  CFArrayRef v2 = (const __CFArray *)ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(a1, 1);
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    uint64_t v5 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      CFIndex v13 = Count;
      _os_log_impl(&dword_19DCDB000, v5, OS_LOG_TYPE_DEFAULT, "Will clear all Me cards from %ld sources", buf, 0xCu);
    }
    if (Count < 1)
    {
      LOBYTE(v7) = 1;
    }
    else
    {
      CFIndex v6 = 0;
      int v7 = 1;
      do
      {
        CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        if (ValueAtIndex)
        {
          CFArrayRef v9 = ValueAtIndex;
          if (ABSourceGetMe((uint64_t)ValueAtIndex))
          {
            int v10 = ABOSLogMeCardChanges();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134218240;
              CFIndex v13 = v6 + 1;
              __int16 v14 = 2048;
              CFIndex v15 = Count;
              _os_log_impl(&dword_19DCDB000, v10, OS_LOG_TYPE_INFO, "Removing Me card for source %ld of %ld", buf, 0x16u);
            }
            v7 &= ABSourceSetMe(v9, 0, 0);
          }
        }
        ++v6;
      }
      while (Count != v6);
    }
    CFRelease(v3);
    return v7 & 1;
  }
  return v1;
}

CFArrayRef ABPersonCreateArrayOfAllPropertyIDs()
{
  values[31] = *(void **)MEMORY[0x1E4F143B8];
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    CFStringRef v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCreateArrayOfAllPropertyIDs(void)", 2902, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  values[0] = (void *)kABPersonPrefixProperty;
  values[1] = (void *)kABPersonFirstNameProperty;
  values[2] = (void *)kABPersonMiddleNameProperty;
  values[3] = (void *)kABPersonLastNameProperty;
  values[4] = (void *)kABPersonSuffixProperty;
  values[5] = (void *)kABPersonPreviousFamilyNameProperty;
  values[6] = (void *)kABPersonFirstNamePhoneticProperty;
  values[7] = (void *)kABPersonMiddleNamePhoneticProperty;
  values[8] = (void *)kABPersonLastNamePhoneticProperty;
  values[9] = (void *)kABPersonFirstNamePronunciationProperty;
  values[10] = (void *)kABPersonMiddleNamePronunciationProperty;
  values[11] = (void *)kABPersonLastNamePronunciationProperty;
  values[12] = (void *)kABPersonNicknameProperty;
  values[13] = (void *)kABPersonAddressingGrammarProperty;
  values[14] = (void *)kABPersonJobTitleProperty;
  values[15] = (void *)kABPersonDepartmentProperty;
  values[16] = (void *)kABPersonOrganizationProperty;
  values[17] = (void *)kABPersonOrganizationPhoneticProperty;
  values[18] = (void *)kABPersonOrganizationPronunciationProperty;
  values[19] = (void *)kABPersonPhoneProperty;
  values[20] = (void *)kABPersonEmailProperty;
  values[21] = (void *)kABPersonSoundProperty;
  values[22] = (void *)kABPersonURLProperty;
  values[23] = (void *)kABPersonAddressProperty;
  values[24] = (void *)kABPersonBirthdayProperty;
  values[25] = (void *)kABPersonAlternateBirthdayProperty;
  values[26] = (void *)kABPersonDateProperty;
  values[27] = (void *)kABPersonRelatedNamesProperty;
  values[28] = (void *)kABPersonSocialProfileProperty;
  values[29] = (void *)kABPersonInstantMessageProperty;
  values[30] = (void *)kABPersonNoteProperty;
  return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 31, 0);
}

uint64_t ABPersonGetSetOfModificationDateTouchingPropertyIDs()
{
  if (ABPersonGetSetOfModificationDateTouchingPropertyIDs_onceToken != -1) {
    dispatch_once(&ABPersonGetSetOfModificationDateTouchingPropertyIDs_onceToken, &__block_literal_global_393);
  }
  return ABPersonGetSetOfModificationDateTouchingPropertyIDs_retVal;
}

CFSetRef __ABPersonGetSetOfModificationDateTouchingPropertyIDs_block_invoke()
{
  v1[37] = *(const void **)MEMORY[0x1E4F143B8];
  v1[0] = (const void *)kABPersonPrefixProperty;
  v1[1] = (const void *)kABPersonFirstNameProperty;
  v1[2] = (const void *)kABPersonMiddleNameProperty;
  v1[3] = (const void *)kABPersonLastNameProperty;
  v1[4] = (const void *)kABPersonSuffixProperty;
  v1[5] = (const void *)kABPersonPreviousFamilyNameProperty;
  v1[6] = (const void *)kABPersonFirstNamePhoneticProperty;
  v1[7] = (const void *)kABPersonMiddleNamePhoneticProperty;
  v1[8] = (const void *)kABPersonLastNamePhoneticProperty;
  v1[9] = (const void *)kABPersonFirstNamePronunciationProperty;
  v1[10] = (const void *)kABPersonMiddleNamePronunciationProperty;
  v1[11] = (const void *)kABPersonLastNamePronunciationProperty;
  v1[12] = (const void *)kABPersonNicknameProperty;
  v1[13] = (const void *)kABPersonDisplayNameProperty;
  v1[14] = (const void *)kABPersonAddressingGrammarProperty;
  v1[15] = (const void *)kABPersonJobTitleProperty;
  v1[16] = (const void *)kABPersonDepartmentProperty;
  v1[17] = (const void *)kABPersonOrganizationProperty;
  v1[18] = (const void *)kABPersonOrganizationPhoneticProperty;
  v1[19] = (const void *)kABPersonOrganizationPronunciationProperty;
  v1[20] = (const void *)kABPersonPhoneProperty;
  v1[21] = (const void *)kABPersonEmailProperty;
  v1[22] = (const void *)kABPersonURLProperty;
  v1[23] = (const void *)kABPersonAddressProperty;
  v1[24] = (const void *)kABPersonBirthdayProperty;
  v1[25] = (const void *)kABPersonAlternateBirthdayProperty;
  v1[26] = (const void *)kABPersonDateProperty;
  v1[27] = (const void *)kABPersonRelatedNamesProperty;
  v1[28] = (const void *)kABPersonSocialProfileProperty;
  v1[29] = (const void *)kABPersonInstantMessageProperty;
  v1[30] = (const void *)kABPersonNoteProperty;
  v1[31] = (const void *)kABPersonImageProperty;
  v1[32] = (const void *)kABPersonImageTypeProperty;
  v1[33] = (const void *)kABPersonImageHashProperty;
  v1[34] = (const void *)kABPersonMemojiMetadataProperty;
  v1[35] = (const void *)kABPersonWallpaperProperty;
  v1[36] = (const void *)kABPersonWallpaperMetadataProperty;
  CFSetRef result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, 37, 0);
  ABPersonGetSetOfModificationDateTouchingPropertyIDs_retVal = (uint64_t)result;
  return result;
}

CFArrayRef ABPersonCopyPropertyIDsExcludingPropertyIDs(const __CFArray *a1, const __CFArray *a2)
{
  if (ABLogAPIUsage())
  {
    CFIndex v15 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCopyPropertyIDsExcludingPropertyIDs(CFArrayRef, CFArrayRef)", 3111, v4, 0, v5, v6, v7, (uint64_t)v15);
    CFRelease(v4);
  }
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
  if (a2)
  {
    if (CFArrayGetCount(a2))
    {
      CFIndex Count = CFArrayGetCount(MutableCopy);
      CFIndex v10 = CFArrayGetCount(a2);
      if (v10 >= 1)
      {
        unint64_t v11 = v10 + 1;
        do
        {
          signed int ValueAtIndex = CFArrayGetValueAtIndex(a2, v11 - 2);
          v16.location = 0;
          v16.CFIndex length = Count;
          FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(MutableCopy, v16, (const void *)ValueAtIndex);
          if (FirstIndexOfValue != -1)
          {
            CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
            --Count;
          }
          --v11;
        }
        while (v11 > 1);
      }
    }
  }
  return MutableCopy;
}

void ABMergePropertiesFromPersonIntoPerson(const __CFArray *a1, const void *a2, const void *a3)
{
  CFArrayRef v5 = a1;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    CFArrayRef v21 = v5;
    uint64_t v22 = a2;
    do
    {
      ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
      if ((ABPersonGetTypeOfProperty(ValueAtIndex) & 0x100) != 0)
      {
        CFTypeRef v10 = ABRecordCopyValue(a2, ValueAtIndex);
        if (v10)
        {
          unint64_t v11 = v10;
          CFTypeRef v12 = ABRecordCopyValue(a3, ValueAtIndex);
          if (v12)
          {
            CFIndex v13 = v12;
            CFArrayRef MutableCopy = ABMultiValueCreateMutableCopy(v12);
            CFRelease(v13);
          }
          else
          {
            ABPropertyType PropertyType = ABMultiValueGetPropertyType(v11);
            CFArrayRef MutableCopy = ABMultiValueCreateMutable(PropertyType);
          }
          CFIndex v16 = ABMultiValueGetCount(v11);
          if (v16 >= 1)
          {
            CFIndex v17 = v16;
            for (CFIndex i = 0; i != v17; ++i)
            {
              CFTypeRef v19 = ABMultiValueCopyValueAtIndex(v11, i);
              CFStringRef v20 = ABMultiValueCopyLabelAtIndex(v11, i);
              if (v19)
              {
                ABMultiValueAddValueAndLabelIfUnique(MutableCopy, v19, v20, 1, 0);
                CFRelease(v19);
              }
              if (v20) {
                CFRelease(v20);
              }
            }
          }
          ABRecordSetValue(a3, ValueAtIndex, MutableCopy, 0);
          CFRelease(MutableCopy);
          CFRelease(v11);
          CFArrayRef v5 = v21;
          a2 = v22;
        }
      }
      else
      {
        _mergeSingleValuePropertyFromRecordIntoRecord(ValueAtIndex, a2, a3);
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void _mergeSingleValuePropertyFromRecordIntoRecord(ABPropertyID property, const void *a2, ABRecordRef record)
{
  CFTypeRef v6 = ABRecordCopyValue(record, property);
  if (!v6)
  {
    CFTypeRef v7 = ABRecordCopyValue(a2, property);
    if (!v7) {
      return;
    }
    CFTypeRef v6 = v7;
    ABRecordSetValue(record, property, v7, 0);
  }
  CFRelease(v6);
}

void ABPersonMergePersonIntoPerson(const void *a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABPersonMergePersonIntoPerson(ABRecordRef, ABRecordRef)", 3194, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  CFArrayRef ArrayOfAllPropertyIDs = ABPersonCreateArrayOfAllPropertyIDs();
  ABMergePropertiesFromPersonIntoPerson(ArrayOfAllPropertyIDs, a1, a2);
  CFRelease(ArrayOfAllPropertyIDs);
}

const void *ABPersonCreateUnifiedPerson(const void *a1)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v12 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCreateUnifiedPerson(ABRecordRef)", 3202, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 0;
  }
  CFArrayRef v7 = Mutable;
  CFArrayAppendValue(Mutable, a1);
  ArrayOfUnifiedPeople = ABPersonCreateArrayOfUnifiedPeople(v7);
  if (ArrayOfUnifiedPeople)
  {
    CFArrayRef v9 = ArrayOfUnifiedPeople;
    if (CFArrayGetCount(ArrayOfUnifiedPeople) == 1)
    {
      ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
      CFRetain(ValueAtIndex);
    }
    else
    {
      ABPropertyID ValueAtIndex = 0;
    }
    CFRelease(v9);
  }
  else
  {
    ABPropertyID ValueAtIndex = 0;
  }
  CFRelease(v7);
  return ValueAtIndex;
}

__CFArray *ABPersonCreateArrayOfUnifiedPeople(const __CFArray *a1)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeople(CFArrayRef)", 3225, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(a1, 0);
}

__CFArray *ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(const __CFArray *a1, uint64_t a2)
{
  values[9] = *(void **)MEMORY[0x1E4F143B8];
  if (ABLogAPIUsage())
  {
    uint64_t v32 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(CFArrayRef, CFStringRef)", 3261, v4, 0, v5, v6, v7, (uint64_t)v32);
    CFRelease(v4);
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    CFMutableSetRef v10 = CFSetCreateMutable(v8, 0, MEMORY[0x1E4F1D548]);
    if (v10)
    {
      unint64_t v11 = v10;
      CFArrayRef ArrayOfAllPropertyIDs = ABPersonCreateArrayOfAllPropertyIDs();
      values[0] = (void *)kABPersonPrefixProperty;
      values[1] = (void *)kABPersonFirstNameProperty;
      values[2] = (void *)kABPersonMiddleNameProperty;
      values[3] = (void *)kABPersonLastNameProperty;
      values[4] = (void *)kABPersonSuffixProperty;
      values[5] = (void *)kABPersonFirstNamePhoneticProperty;
      values[6] = (void *)kABPersonMiddleNamePhoneticProperty;
      values[7] = (void *)kABPersonLastNamePhoneticProperty;
      values[8] = (void *)kABPersonPreviousFamilyNameProperty;
      CFArrayRef v13 = CFArrayCreate(v8, (const void **)values, 9, 0);
      if (v13 && ArrayOfAllPropertyIDs)
      {
        CFArrayRef cf = ABPersonCopyPropertyIDsExcludingPropertyIDs(ArrayOfAllPropertyIDs, v13);
        if (!cf) {
          goto LABEL_36;
        }
        CFArrayRef v35 = v13;
        CFIndex Count = CFArrayGetCount(a1);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          CFIndex v16 = 0;
          uint64_t v33 = Mutable;
          uint64_t v34 = a2;
          CFIndex v36 = Count;
          do
          {
            ABPropertyID ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v16);
            if (ValueAtIndex)
            {
              uint64_t v18 = ValueAtIndex;
              if (!CFSetContainsValue(v11, ValueAtIndex))
              {
                if (!a2 && ABRecordGetIntValue((uint64_t)v18, kABPersonLinkProperty) == -1)
                {
                  CFArrayAppendValue(Mutable, v18);
                }
                else
                {
                  CFArrayRef v19 = (const __CFArray *)ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(v18, a2);
                  if (v19)
                  {
                    CFArrayRef v20 = v19;
                    IndexValueIfExists = ABAddressBookCopyArrayOfLinkedPeopleMovingPreferredNameToFirstIndexValueIfExists(v19);
                    CFRelease(v20);
                    if (IndexValueIfExists)
                    {
                      CFIndex v22 = CFArrayGetCount(IndexValueIfExists);
                      if (v22 >= 1)
                      {
                        CFIndex v23 = v22;
                        CFIndex v24 = 0;
                        TemporaryNewPersonWithABRecordID RecordID = 0;
                        uint64_t v37 = IndexValueIfExists;
                        do
                        {
                          CFIndex v26 = CFArrayGetValueAtIndex(IndexValueIfExists, v24);
                          CFSetAddValue(v11, v26);
                          if (TemporaryNewPersonWithRecordID)
                          {
                            ABMergePropertiesFromPersonIntoPerson(cf, v26, TemporaryNewPersonWithRecordID);
                          }
                          else
                          {
                            ABRecordGetRecordID(v26);
                            TemporaryNewPersonWithABRecordID RecordID = (const void *)ABPersonCreateTemporaryNewPersonWithRecordID();
                            CFArrayRef v27 = ArrayOfAllPropertyIDs;
                            ABMergePropertiesFromPersonIntoPerson(ArrayOfAllPropertyIDs, v26, TemporaryNewPersonWithRecordID);
                            CFTypeRef v28 = ABRecordCopyValue(v26, kABPersonLinkProperty);
                            ABRecordSetValue(TemporaryNewPersonWithRecordID, kABPersonLinkProperty, v28, 0);
                            if (v28) {
                              CFRelease(v28);
                            }
                            CFTypeRef v29 = ABRecordCopyValue(v26, kABPersonInternalUUIDProperty);
                            ABRecordSetValue(TemporaryNewPersonWithRecordID, kABPersonInternalUUIDProperty, v29, 0);
                            if (v29) {
                              CFRelease(v29);
                            }
                            CFTypeRef v30 = ABRecordCopyValue(v26, kABPersonKindProperty);
                            ABRecordSetValue(TemporaryNewPersonWithRecordID, kABPersonKindProperty, v30, 0);
                            if (v30) {
                              CFRelease(v30);
                            }
                            CFArrayRef ArrayOfAllPropertyIDs = v27;
                            IndexValueIfExists = v37;
                          }
                          _mergeSingleValuePropertyFromRecordIntoRecord(kABPersonPhonemeDataProperty, v26, TemporaryNewPersonWithRecordID);
                          ++v24;
                        }
                        while (v23 != v24);
                        CFMutableStringRef Mutable = v33;
                        a2 = v34;
                        if (TemporaryNewPersonWithRecordID)
                        {
                          CFArrayAppendValue(v33, TemporaryNewPersonWithRecordID);
                          CFRelease(TemporaryNewPersonWithRecordID);
                        }
                      }
                      CFRelease(IndexValueIfExists);
                      CFIndex v15 = v36;
                    }
                  }
                }
              }
            }
            ++v16;
          }
          while (v16 != v15);
        }
        CFRelease(cf);
        CFArrayRef v13 = v35;
      }
      if (!v13)
      {
LABEL_37:
        if (ArrayOfAllPropertyIDs) {
          CFRelease(ArrayOfAllPropertyIDs);
        }
        CFRelease(v11);
        return Mutable;
      }
LABEL_36:
      CFRelease(v13);
      goto LABEL_37;
    }
  }
  return Mutable;
}

__CFArray *ABAddressBookCopyArrayOfLinkedPeopleMovingPreferredNameToFirstIndexValueIfExists(const __CFArray *a1)
{
  if (!a1 || CFArrayGetCount(a1) < 1) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(a1);
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, a1);
  ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  CFTypeRef v5 = ABPersonCopyPreferredLinkedPersonForName(ValueAtIndex);
  if (v5)
  {
    uint64_t v6 = v5;
    ABRecordID RecordID = ABRecordGetRecordID(ValueAtIndex);
    if (RecordID != ABRecordGetRecordID(v6) && Count >= 1)
    {
      CFIndex v8 = 0;
      while (1)
      {
        CFArrayRef v9 = CFArrayGetValueAtIndex(a1, v8);
        ABRecordID v10 = ABRecordGetRecordID(v9);
        if (v10 == ABRecordGetRecordID(v6)) {
          break;
        }
        if (Count == ++v8) {
          goto LABEL_12;
        }
      }
      CFArraySetValueAtIndex(MutableCopy, 0, v6);
      CFArraySetValueAtIndex(MutableCopy, v8, ValueAtIndex);
    }
LABEL_12:
    CFRelease(v6);
  }
  return MutableCopy;
}

uint64_t ABPersonIsLinkedToMe(const void *a1, ABRecordRef record)
{
  if (ABRecordGetRecordID(record) == -1) {
    return 0;
  }
  uint64_t result = 0;
  if (!a1 || !record) {
    return result;
  }
  ABRecordID IntegerProperty = ABAddressBookGetIntegerProperty((uint64_t)a1);
  if (IntegerProperty == -1) {
    return 0;
  }
  uint64_t result = (uint64_t)ABAddressBookGetSourceWithRecordID(a1, IntegerProperty);
  if (result)
  {
    uint64_t result = (uint64_t)ABSourceGetMe(result);
    if (result)
    {
      uint64_t v6 = result;
      if ((ABRecordRef)result == record) {
        return 1;
      }
      int IntValue = ABRecordGetIntValue((uint64_t)record, kABPersonLinkProperty);
      if (IntValue != -1) {
        return IntValue == ABRecordGetIntValue(v6, kABPersonLinkProperty);
      }
      return 0;
    }
  }
  return result;
}

ABMutableMultiValueRef ABPersonCreatePhoneNumberValueSanitized(const void *a1)
{
  if (!a1) {
    return 0;
  }
  ABMutableMultiValueRef MutableCopy = ABMultiValueCreateMutableCopy(a1);
  CFIndex Count = ABMultiValueGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0; i != v4; ++i)
    {
      uint64_t v6 = (void *)ABMultiValueCopyValueAtIndex(a1, i);
      uint64_t v7 = (const void *)objc_msgSend(v6, "_cn_stringBySanitizingPhoneNumber");
      if (v6 != v7) {
        ABMultiValueReplaceValueAtIndex(MutableCopy, v7, i);
      }
    }
  }
  return MutableCopy;
}

__CFString *_createPlaceholdersForNumberOfItems(uint64_t a1)
{
  uint64_t v1 = (uint64_t)(ceil((double)a1 / 10.0) * 10.0);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 2 * v1 - 1);
  if (v1 >= 2)
  {
    uint64_t v3 = v1 - 1;
    do
    {
      CFStringAppend(Mutable, @"?,");
      --v3;
    }
    while (v3);
  }
  CFStringAppend(Mutable, @"?");
  return Mutable;
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

Class __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!IntlPreferencesLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __IntlPreferencesLibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5988EB0;
    uint64_t v5 = 0;
    IntlPreferencesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!IntlPreferencesLibraryCore_frameworkLibrary_0) {
    __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("NSPersonNameComponentsFormatterPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_2();
  }
  getNSPersonNameComponentsFormatterPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 40);
  return result;
}

uint64_t __IntlPreferencesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  IntlPreferencesLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void ___copyPersonMatchingPrivateProperty_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(sqlite3_stmt **)(a2 + 8);
    if (v2)
    {
      uint64_t v3 = (const char *)_CPCreateUTF8StringFromCFString();
      long long v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
      sqlite3_bind_text(v2, 1, v3, -1, v4);
    }
  }
}

ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef multiValue)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v12 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef)", 21, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  int v6 = ABCMultiValuePropertyType((uint64_t)multiValue);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef)", 23, @">> ", 0, v7, v8, v9, v11);
  }
  return v6 & 0xFFFFFEFF;
}

CFIndex ABMultiValueGetCount(ABMultiValueRef multiValue)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v12 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetCount(ABMultiValueRef)", 29, v2, 0, v3, v4, v5, (uint64_t)v12);
    CFRelease(v2);
  }
  CFIndex Count = ABCMultiValueGetCount((uint64_t)multiValue);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetCount(ABMultiValueRef)", 31, @">> ", 0, v7, v8, v9, v11);
  }
  return Count;
}

CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef multiValue, CFIndex index)
{
  if (ABLogAPIUsage())
  {
    __int16 v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef, CFIndex)", 37, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  CFArrayRef v8 = ABCMultiValueCopyValueAtIndex((const __CFArray *)multiValue, index);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef, CFIndex)", 39, @">> ", 0, v9, v10, v11, v13);
  }
  return v8;
}

CFArrayRef ABMultiValueCopyArrayOfAllValues(ABMultiValueRef multiValue)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABMultiValueCopyArrayOfAllValues(ABMultiValueRef)", 44, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCopyValues((uint64_t)multiValue);
}

CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef multiValue, CFIndex index)
{
  if (ABLogAPIUsage())
  {
    __int16 v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef, CFIndex)", 50, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  CFArrayRef v8 = ABCMultiValueCopyLabelAtIndex((CFArrayRef *)multiValue, index);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef, CFIndex)", 52, @">> ", 0, v9, v10, v11, v13);
  }
  return (CFStringRef)v8;
}

CFIndex ABMultiValueGetIndexForIdentifier(ABMultiValueRef multiValue, ABMultiValueIdentifier identifier)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetIndexForIdentifier(ABMultiValueRef, ABMultiValueIdentifier)", 58, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCMultiValueIndexForIdentifier((uint64_t)multiValue, identifier);
}

ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef multiValue, CFIndex index)
{
  if (ABLogAPIUsage())
  {
    __int16 v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef, CFIndex)", 64, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  ABMultiValueIdentifier IdentifierAtIndex = ABCMultiValueGetIdentifierAtIndex((uint64_t)multiValue, index);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef, CFIndex)", 66, @">> ", 0, v9, v10, v11, v13);
  }
  return IdentifierAtIndex;
}

CFArrayRef *ABMultiValueCopyUUIDAtIndex(CFArrayRef *a1, CFIndex a2)
{
  if (ABLogAPIUsage())
  {
    __int16 v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyUUIDAtIndex(ABMultiValueRef, CFIndex)", 72, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  CFArrayRef v8 = ABCMultiValueCopyUUIDAtIndex(a1, a2);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABMultiValueCopyUUIDAtIndex(ABMultiValueRef, CFIndex)", 74, @">> ", 0, v9, v10, v11, v13);
  }
  return v8;
}

CFIndex ABMultiValueGetFirstIndexOfValue(ABMultiValueRef multiValue, CFTypeRef value)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetFirstIndexOfValue(ABMultiValueRef, CFTypeRef)", 81, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCMultiValueGetFirstIndexOfValue((uint64_t)multiValue, value);
}

uint64_t ABMultiValueGetFirstIndexOfValueWithCallback(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, const void *))
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetFirstIndexOfValueWithCallback(ABMultiValueRef, CFTypeRef, CFArrayEqualCallBack)", 87, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCMultiValueGetFirstIndexOfValueWithCallback(a1, a2, a3);
}

CFIndex ABMultiValueGetFirstIndexOfLabel(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFIndex ABMultiValueGetFirstIndexOfLabel(ABMultiValueRef, CFStringRef)", 93, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCMultiValueGetFirstIndexOfLabel(a1, a2);
}

ABMutableMultiValueRef ABMultiValueCreateMutable(ABPropertyType type)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABMutableMultiValueRef ABMultiValueCreateMutable(ABPropertyType)", 101, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreateMutable(type);
}

ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef multiValue)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef)", 106, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreateMutableCopy(multiValue);
}

void ABMultiValueSetImmutable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFIndex v17 = _isMainThread();
    uint64_t v10 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABMultiValueSetImmutable(ABMultiValueRef)", 111, v10, 0, v11, v12, v13, (uint64_t)v17);
    CFRelease(v10);
  }
  if (a1) {
    *(unsigned char *)(a1 + 60) &= ~1u;
  }
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABMultiValueSetImmutable(ABMultiValueRef)", 116, @">> ", 0, v14, v15, v16, a9);
  }
}

BOOL ABMultiValueAddValueAndLabel(ABMutableMultiValueRef multiValue, CFTypeRef value, CFStringRef label, ABMultiValueIdentifier *outIdentifier)
{
  if (ABLogAPIUsage())
  {
    uint64_t v13 = _isMainThread();
    uint64_t v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueAddValueAndLabel(ABMutableMultiValueRef, CFTypeRef, CFStringRef, ABMultiValueIdentifier *)", 123, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  if ((*((unsigned char *)multiValue + 60) & 1) == 0) {
    ABMultiValueAddValueAndLabel_cold_1();
  }
  return ABCMultiValueAdd((CFMutableArrayRef *)multiValue, (void *)value, label, 0, outIdentifier);
}

BOOL ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef multiValue, CFTypeRef value, CFStringRef label, CFIndex index, ABMultiValueIdentifier *outIdentifier)
{
  if (ABLogAPIUsage())
  {
    uint64_t v15 = _isMainThread();
    uint64_t v10 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)", 130, v10, 0, v11, v12, v13, (uint64_t)v15);
    CFRelease(v10);
  }
  return ABMultiValueInsertValueAndLabelAndUUIDAtIndex((uint64_t)multiValue, (void *)value, label, 0, index, outIdentifier);
}

__CFArray *ABMultiValueInsertValueAndLabelAndUUIDAtIndex(uint64_t a1, void *a2, const void *a3, const __CFString *a4, CFIndex a5, int *a6)
{
  if (ABLogAPIUsage())
  {
    CFIndex v17 = _isMainThread();
    uint64_t v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueInsertValueAndLabelAndUUIDAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)", 136, v12, 0, v13, v14, v15, (uint64_t)v17);
    CFRelease(v12);
  }
  if ((*(unsigned char *)(a1 + 60) & 1) == 0) {
    ABMultiValueInsertValueAndLabelAndUUIDAtIndex_cold_1();
  }
  return ABCMultiValueInsert((CFMutableArrayRef *)a1, a2, a3, a5, a4, a6);
}

BOOL ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef multiValue, CFIndex index)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef, CFIndex)", 143, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  if ((*((unsigned char *)multiValue + 60) & 1) == 0) {
    ABMultiValueRemoveValueAndLabelAtIndex_cold_1();
  }
  return ABCMultiValueRemove((uint64_t)multiValue, index);
}

BOOL ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef multiValue, CFTypeRef value, CFIndex index)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef, CFTypeRef, CFIndex)", 150, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  if ((*((unsigned char *)multiValue + 60) & 1) == 0) {
    ABMultiValueReplaceValueAtIndex_cold_1();
  }
  return ABCMultiValueReplaceValue((uint64_t)multiValue, value, index);
}

BOOL ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef multiValue, CFStringRef label, CFIndex index)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef, CFStringRef, CFIndex)", 157, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  if ((*((unsigned char *)multiValue + 60) & 1) == 0) {
    ABMultiValueReplaceLabelAtIndex_cold_1();
  }
  return ABCMultiValueReplaceLabel((uint64_t)multiValue, label, index);
}

BOOL ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef multiValue, CFStringRef identifier)
{
  int v2 = (int)identifier;
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef, ABMultiValueIdentifier)", 164, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  if ((*((unsigned char *)multiValue + 60) & 1) == 0) {
    ABMultiValueSetPrimaryIdentifier_cold_1();
  }
  return ABCMultiValueSetPrimaryIdentifier((uint64_t)multiValue, v2);
}

ABMultiValueRef ABMultiValueCreate(void)
{
  int v1 = v0;
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    int v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABMultiValueRef ABMultiValueCreate(ABPropertyType)", 172, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreate(v1);
}

ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef multiValue)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    int v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef)", 176, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCMultiValueCreateCopy(multiValue);
}

__CFArray *ABMultiValueInsertAndCreateIdentifier(uint64_t a1, void *a2, const void *a3, CFIndex a4, const __CFString *a5, int *a6, int a7)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v19 = _isMainThread();
    uint64_t v14 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueInsertAndCreateIdentifier(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, CFStringRef, ABMultiValueIdentifier *, _Bool)", 181, v14, 0, v15, v16, v17, (uint64_t)v19);
    CFRelease(v14);
  }
  if ((*(unsigned char *)(a1 + 60) & 1) == 0) {
    ABMultiValueInsertAndCreateIdentifier_cold_1();
  }
  return ABCMultiValueInsertAndCreateIdentifier((CFMutableArrayRef *)a1, a2, a3, a4, a5, a6, a7);
}

void ABMultiValueShow(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    int v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABMultiValueShow(ABMultiValueRef)", 187, v2, 0, v3, v4, v5, (uint64_t)v6);
    CFRelease(v2);
  }
  ABCMultiValueShow(a1);
}

uint64_t ABMultiValueLoad(void *a1, int a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABMultiValueLoad(ABRecordRef, ABPropertyID, CPSqliteConnection *)", 192, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABCMultiValueLoad(a1, a2, a3);
}

void ABMultiValueBatchLoad(const __CFArray *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v19 = _isMainThread();
    uint64_t v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABMultiValueBatchLoad(CFArrayRef, ABPropertyID, ABAddressBookRef)", 198, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  ABCMultiValueBatchLoad(a1, a2, a3);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABMultiValueBatchLoad(CFArrayRef, ABPropertyID, ABAddressBookRef)", 200, @">> ", 0, v16, v17, v18, a9);
  }
}

void ABMultiValueSave(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v19 = _isMainThread();
    uint64_t v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABMultiValueSave(ABRecordRef, ABPropertyID, CPSqliteConnection *)", 204, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  ABCMultiValueSave(a1, a2, a3);
  if (ABLogAPIUsage())
  {
    _ABLog2(6, (uint64_t)"void ABMultiValueSave(ABRecordRef, ABPropertyID, CPSqliteConnection *)", 206, @">> ", 0, v16, v17, v18, a9);
  }
}

BOOL kABMultiValueDefaultComparator_block_invoke(int a1, CFTypeRef cf1, CFTypeRef cf2)
{
  return CFEqual(cf1, cf2) != 0;
}

BOOL kABMultiValueAddressComparator_block_invoke_2(int a1, CFTypeRef cf1, CFTypeRef cf2, CFTypeRef *a4)
{
  if (CFEqual(cf1, cf2)) {
    return 1;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf2, @"CountryCode");
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf1, @"CountryCode");
  CFStringRef v10 = v9;
  if (Value)
  {
    BOOL v11 = CFStringGetLength(Value) < 1;
    if (v10)
    {
LABEL_5:
      BOOL v12 = CFStringGetLength(v10) < 1;
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v11 = 1;
    if (v9) {
      goto LABEL_5;
    }
  }
  BOOL v12 = 1;
LABEL_8:
  CFDictionaryRef v13 = _abCopyAddressDictionaryWithoutCountryCode((CFDictionaryRef)cf1);
  CFDictionaryRef v14 = _abCopyAddressDictionaryWithoutCountryCode((CFDictionaryRef)cf2);
  if (!CFEqual(v13, v14))
  {
    BOOL v7 = 0;
    goto LABEL_16;
  }
  if (v11 || !v12)
  {
    if (!v11 || v12)
    {
      BOOL v7 = 0;
      if (Value && v10)
      {
        BOOL v7 = CFStringCompare(v10, Value, 1uLL) == kCFCompareEqualTo;
        if (!v13) {
          goto LABEL_18;
        }
LABEL_17:
        CFRelease(v13);
        goto LABEL_18;
      }
LABEL_16:
      if (!v13) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else
  {
    *a4 = CFRetain(cf2);
  }
  BOOL v7 = 1;
  if (v13) {
    goto LABEL_17;
  }
LABEL_18:
  if (v14) {
    CFRelease(v14);
  }
  return v7;
}

CFDictionaryRef _abCopyAddressDictionaryWithoutCountryCode(CFDictionaryRef theDict)
{
  CFDictionaryRef MutableCopy = theDict;
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, @"CountryCode"))
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MutableCopy);
      CFDictionaryRemoveValue(MutableCopy, @"CountryCode");
    }
    else
    {
      CFRetain(MutableCopy);
    }
  }
  return MutableCopy;
}

BOOL ABMultiValueAddValueAndLabelIfUnique(unsigned char *a1, const void *a2, const __CFString *a3, int a4, uint64_t (**a5)(void *, CFTypeRef, const void *, CFTypeRef *))
{
  if (ABLogAPIUsage())
  {
    CFIndex v24 = _isMainThread();
    uint64_t v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABMultiValueAddValueAndLabelIfUnique(ABMutableMultiValueRef, CFTypeRef, CFStringRef, _Bool, ABMultiValueUniqueInsertionComparator)", 262, v8, 0, v9, v10, v11, (uint64_t)v24);
    CFRelease(v8);
  }
  if ((a1[60] & 1) == 0) {
    ABMultiValueAddValueAndLabelIfUnique_cold_1();
  }
  CFIndex Count = ABMultiValueGetCount(a1);
  if (a5) {
    CFDictionaryRef v13 = a5;
  }
  else {
    CFDictionaryRef v13 = (uint64_t (**)(void *, CFTypeRef, const void *, CFTypeRef *))&__block_literal_global_5;
  }
  if (Count >= 1)
  {
    CFIndex v14 = Count;
    CFIndex v15 = 0;
    BOOL v16 = 0;
    int v17 = 0;
    while (1)
    {
      CFTypeRef v18 = ABMultiValueCopyValueAtIndex(a1, v15);
      CFTypeRef value = 0;
      int v19 = v13[2](v13, v18, a2, &value);
      if (v19) {
        BOOL v20 = a4 == 0;
      }
      else {
        BOOL v20 = 1;
      }
      if (v20)
      {
        v17 |= v19;
        goto LABEL_22;
      }
      CFStringRef v21 = ABMultiValueCopyLabelAtIndex(a1, v15);
      CFIndex v22 = v21;
      if (!((unint64_t)a3 | (unint64_t)v21))
      {
        int v17 = 1;
        goto LABEL_22;
      }
      if (a3 && v21)
      {
        v17 |= CFEqual(a3, v21) != 0;
      }
      else if (!v21)
      {
        goto LABEL_22;
      }
      CFRelease(v22);
LABEL_22:
      if (value)
      {
        BOOL v16 = ABMultiValueReplaceValueAtIndex(a1, value, v15);
        if (value) {
          CFRelease(value);
        }
      }
      if (v18) {
        CFRelease(v18);
      }
      if (v14 == ++v15)
      {
        if (v17) {
          return v16;
        }
        goto LABEL_31;
      }
    }
  }
  BOOL v16 = 0;
LABEL_31:
  if (!v16) {
    return ABMultiValueAddValueAndLabel(a1, a2, a3, 0);
  }
  return v16;
}

uint64_t ABMultiValueGetTypeID()
{
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFTypeID ABMultiValueGetTypeID(void)", 308, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCMultiValueGetTypeID();
}

void ABMultiValueEnumerateWithBlock(const void *a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    BOOL v16 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABMultiValueEnumerateWithBlock(ABMultiValueRef, ABMultiValueEnumeratorBlock)", 313, v4, 0, v5, v6, v7, (uint64_t)v16);
    CFRelease(v4);
  }
  if (a1)
  {
    CFIndex Count = ABMultiValueGetCount(a1);
    CFIndex v9 = Count - 1;
    if (Count >= 1)
    {
      CFIndex v10 = 0;
      do
      {
        CFStringRef v11 = ABMultiValueCopyLabelAtIndex(a1, v10);
        CFTypeRef v12 = ABMultiValueCopyValueAtIndex(a1, v10);
        int v13 = (*(uint64_t (**)(uint64_t, CFIndex, CFStringRef, CFTypeRef))(a2 + 16))(a2, v10, v11, v12);
        if (v11) {
          CFRelease(v11);
        }
        if (v12) {
          CFRelease(v12);
        }
        if (v9 == v10++) {
          int v15 = 1;
        }
        else {
          int v15 = v13;
        }
      }
      while (v15 != 1);
    }
  }
}

ABRecordRef ABGroupCreate(void)
{
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABGroupCreate(void)", 24, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return (ABRecordRef)ABCGroupCreateNewGroup();
}

CFArrayRef ABGroupCopyArrayOfAllMembers(ABRecordRef group)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllMembers(ABRecordRef)", 30, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyArrayOfAllMembers((uint64_t)group);
}

CFArrayRef ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef group, ABPersonSortOrdering sortOrdering)
{
  if (ABLogAPIUsage())
  {
    CFIndex v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef, ABPersonSortOrdering)", 36, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCGroupCopyArrayOfAllMembersWithSortOrdering((uint64_t)group, sortOrdering);
}

BOOL ABGroupAddMember(ABRecordRef group, ABRecordRef person, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    CFIndex v10 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABGroupAddMember(ABRecordRef, ABRecordRef, CFErrorRef *)", 42, v5, 0, v6, v7, v8, (uint64_t)v10);
    CFRelease(v5);
  }
  return ABCGroupAddMemberAndReturnError(group, person);
}

BOOL ABGroupRemoveMember(ABRecordRef group, ABRecordRef member, CFErrorRef *error)
{
  if (ABLogAPIUsage())
  {
    CFIndex v10 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABGroupRemoveMember(ABRecordRef, ABRecordRef, CFErrorRef *)", 48, v5, 0, v6, v7, v8, (uint64_t)v10);
    CFRelease(v5);
  }
  return ABCGroupRemoveMemberAndReturnError(group, member);
}

ABRecordRef ABAddressBookGetGroupWithRecordID(ABAddressBookRef addressBook, ABRecordID recordID)
{
  uint64_t v2 = *(void *)&recordID;
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetGroupWithRecordID(ABAddressBookRef, ABRecordID)", 55, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (ABRecordRef)ABCGroupGetRecordForUniqueID((uint64_t)addressBook, v2);
}

uint64_t ABAddressBookCopyGroupsWithUUIDs(uint64_t a1, const __CFArray *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyGroupsWithUUIDs(ABAddressBookRef, CFArrayRef)", 61, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCGroupCopyRecordsForUUIDs(a1, a2);
}

CFIndex ABAddressBookGetGroupCount(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetGroupCount(ABAddressBookRef)", 68, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return (int)ABCGetGroupCount((uint64_t)addressBook, 0);
}

uint64_t ABAddressBookGetGroupCountInSource(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFIndex ABAddressBookGetGroupCountInSource(ABAddressBookRef, ABRecordRef)", 73, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (int)ABCGetGroupCount(a1, a2);
}

CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef)", 80, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFArrayRef v8 = (const __CFArray *)ABCCopyArrayOfAllGroups((uint64_t)addressBook);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef)", 82, @">> ", 0, v9, v10, v11, v13);
  }
  return v8;
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithSortOrdering(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithSortOrdering(ABAddressBookRef, ABGroupSortOrdering)", 88, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return ABCCopyArrayOfAllGroupsWithSortOrdering(a1);
}

uint64_t ABGroupCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(uint64_t a1, unsigned int a2, int a3, const __CFArray *a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v13 = _isMainThread();
    CFArrayRef v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(ABAddressBookRef, ABRecordType, _Bool, CFArrayRef)", 96, v8, 0, v9, v10, v11, (uint64_t)v13);
    CFRelease(v8);
  }
  return ABCCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(a1, a2, a3, a4);
}

CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABGroupRef group)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABRecordRef)", 101, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyArrayOfAllSubgroups((uint64_t)group);
}

CFArrayRef ABGroupCopyArrayOfAllMembersAndSubgroups(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABGroupCopyArrayOfAllMembersAndSubgroups(ABRecordRef)", 105, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyArrayOfAllMembersAndSubgroups(a1);
}

uint64_t ABGroupAddSubgroup(const void *a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABGroupAddSubgroup(ABRecordRef, ABRecordRef)", 110, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCGroupAddSubgroup(a1, a2);
}

uint64_t ABGroupRemoveSubgroup(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABGroupRemoveSubgroup(ABRecordRef, ABRecordRef)", 114, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  return ABCGroupRemoveSubgroup(a1, a2);
}

uint64_t ABGroupDelete(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABGroupDelete(ABRecordID, ABRecordRef, CPSqliteConnection *)", 122, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupDelete(a1);
}

uint64_t ABGroupCopyCompositeName(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABGroupCopyCompositeName(ABRecordRef)", 127, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCopyCompositeName(a1);
}

uint64_t ABGroupGetTypeOfProperty(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPropertyType ABGroupGetTypeOfProperty(ABPropertyID)", 162, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupTypeOfProperty(a1);
}

__CFString *ABGroupNameForProperty(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABGroupNameForProperty(ABPropertyID)", 169, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupNameForProperty(a1);
}

uint64_t _updateDowntimeWhitelistForPerson(uint64_t a1)
{
  int v2 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  id v3 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  uint64_t v4 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), 1);
  uint64_t v5 = objc_msgSend(v3, "initWithBytes:length:", v4, sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), 1));
  uint64_t v6 = +[ABDowntimeWhitelistMigrator unknownPropertiesFromExternalRepresentation:v5];
  uint64_t v7 = [v6 objectForKeyedSubscript:AB_DOWNTIME_WHITELIST_KEY];
  CFArrayRef v8 = [v7 objectAtIndex:0];

  if (v8)
  {
    uint64_t v9 = (void *)[v6 mutableCopy];
    [v9 setObject:0 forKeyedSubscript:AB_DOWNTIME_WHITELIST_KEY];
    uint64_t v10 = +[ABDowntimeWhitelistMigrator externalRepresentationFromUnknownProperties:v9];

    uint64_t v11 = CPSqliteConnectionStatementForSQL();
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(sqlite3_stmt **)(v11 + 8);
      CFIndex v14 = _ABCCreateUTF8StringFromCFString(v8);
      sqlite3_bind_text(v13, 1, (const char *)v14, -1, MEMORY[0x1E4F14838]);
      uint64_t v15 = [v10 length];
      BOOL v16 = *(sqlite3_stmt **)(v12 + 8);
      if (v15)
      {
        id v17 = v10;
        sqlite3_bind_blob(v16, 2, (const void *)[v17 bytes], objc_msgSend(v17, "length"), 0);
      }
      else
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(v12 + 8), 2);
      }
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 3, v2);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
  }
  else
  {
    uint64_t v10 = v5;
  }

  return 0;
}

void invokeOnThread(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v9 = objc_alloc_init(ABCCallbackInvoker);
  BOOL v8 = [MEMORY[0x1E4F29060] currentThread] == a4;
  CFRetain(a1);
  v9->cb = a2;
  v9->ab = a1;
  v9->context = a3;
  [(ABCCallbackInvoker *)v9 performSelector:sel_invoke onThread:a4 withObject:0 waitUntilDone:v8];
}

uint64_t ABSourceCreate()
{
  if (ABLogAPIUsage())
  {
    uint64_t v5 = _isMainThread();
    int v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABSourceCreate(void)", 40, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return ABCSourceCreateNewSourceAndReturnError();
}

uint64_t ABAddressBookGetAccountForSource(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetAccountForSource(ABAddressBookRef, ABRecordRef)", 46, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  uint64_t IntValue = ABRecordGetIntValue(a2, kABSourceAccountIDProperty);
  if (!a1) {
    return 0;
  }
  uint64_t v11 = IntValue;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12 || v11 == -1) {
    return 0;
  }
  uint64_t v13 = ABAccountClass;
  return ABCDBContextRecordForUIDOfType(v12, v11, (uint64_t)v13);
}

uint64_t ABAddressBookSetAccountForSource(uint64_t a1, const void *a2, const void *a3, CFAllocatorRef *a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetAccountForSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)", 58, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  if (!a3) {
    return 1;
  }
  ABRecordID RecordID = ABRecordGetRecordID(a3);
  if (RecordID == -1)
  {
    if (a4)
    {
      CFErrorRef v17 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, 0);
      uint64_t result = 0;
      *a4 = v17;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v15 = kABSourceAccountIDProperty;
    return ABRecordSetIntValue(a2, v15, RecordID, a4);
  }
  return result;
}

CFTypeRef ABAddressBookCopyAccountIdentifierForSource(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = (CFTypeRef)ABAddressBookGetAccountForSource(a1, a2);
  if (result)
  {
    return ABAccountCopyIdentifier(result);
  }
  return result;
}

const void *ABAddressBookCopyLocalSource(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyLocalSource(ABAddressBookRef)", 88, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFTypeRef result = ABCSourceCopyLocalSource(a1);
  if (!result)
  {
    return (const void *)ABSourceCreate();
  }
  return result;
}

CFTypeRef ABAddressBookCopyDefaultSourceIsPersistableFallback(const void *a1, unsigned char *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyDefaultSourceIsPersistableFallback(ABAddressBookRef, BOOL *)", 135, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a1)
  {
    CFIndex v14 = ABOSLogGeneral();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v14, OS_LOG_TYPE_DEFAULT, "No addressBook, returning an empty source", buf, 2u);
    }
    return (CFTypeRef)ABSourceCreate();
  }
  uint64_t v10 = _ABCGetActualDefaultSource((uint64_t)a1);
  uint64_t v11 = (const void *)v10;
  if (v10
    && ABRecordGetIntValue(v10, kABSourceEnabledProperty) == 1
    && ABRecordGetIntValue((uint64_t)v11, kABSourceTypeProperty) != 6
    && (ABSourceIsRemote((uint64_t)v11) & 1) == 0
    && (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)v11, 0) & 1) == 0)
  {
    uint64_t v34 = ABOSLogGeneral();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      ABRecordID RecordID = ABRecordGetRecordID(v11);
      _os_log_impl(&dword_19DCDB000, v34, OS_LOG_TYPE_DEFAULT, "Returning a valid actual default source (recordID %d)", buf, 8u);
    }
    return CFRetain(v11);
  }
  uint64_t v12 = ABOSLogGeneral();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (v11) {
      ABRecordID v13 = ABRecordGetRecordID(v11);
    }
    else {
      ABRecordID v13 = -1;
    }
    *(_DWORD *)buf = 67109120;
    ABRecordID RecordID = v13;
    _os_log_impl(&dword_19DCDB000, v12, OS_LOG_TYPE_DEFAULT, "Actual default source is invalid (recordID %d), trying fallbacks to find replacement default source", buf, 8u);
  }
  CFErrorRef v17 = (const void *)ABAddressBookCopyArrayOfAllAccounts((uint64_t)a1);
  CFTypeRef v18 = (void *)[(id)(id)CFMakeCollectable(v17) mutableCopy];
  if (!v11) {
    goto LABEL_24;
  }
  AccountForSource = (const void *)ABAddressBookGetAccountForSource((uint64_t)a1, (uint64_t)v11);
  if (!AccountForSource) {
    goto LABEL_24;
  }
  BOOL v20 = AccountForSource;
  CFTypeRef v21 = ABAddressBookCopySuitableDefaultSourceInAccount(a1, AccountForSource);
  if (!v21)
  {
    [v18 removeObject:v20];
LABEL_24:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v25 = [v18 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (!v25)
    {
LABEL_32:
      CFTypeRef v30 = ABOSLogGeneral();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19DCDB000, v30, OS_LOG_TYPE_DEFAULT, "Failed to find a valid default source, returning the local source", buf, 2u);
      }
      BOOL v16 = ABCSourceCopyLocalSource((uint64_t)a1);
      goto LABEL_38;
    }
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)v36;
LABEL_26:
    uint64_t v28 = 0;
    while (1)
    {
      if (*(void *)v36 != v27) {
        objc_enumerationMutation(v18);
      }
      CFTypeRef v29 = ABAddressBookCopySuitableDefaultSourceInAccount(a1, *(const void **)(*((void *)&v35 + 1) + 8 * v28));
      if (v29) {
        break;
      }
      if (v26 == ++v28)
      {
        uint64_t v26 = [v18 countByEnumeratingWithState:&v35 objects:v39 count:16];
        if (v26) {
          goto LABEL_26;
        }
        goto LABEL_32;
      }
    }
    BOOL v16 = v29;
    CFIndex v22 = ABOSLogGeneral();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_38;
    }
    ABRecordID v31 = ABRecordGetRecordID(v16);
    *(_DWORD *)buf = 67109120;
    ABRecordID RecordID = v31;
    CFIndex v24 = "Found another syncing source (recordID %d) to use as default source";
    goto LABEL_37;
  }
  BOOL v16 = v21;
  CFIndex v22 = ABOSLogGeneral();
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_38;
  }
  ABRecordID v23 = ABRecordGetRecordID(v16);
  *(_DWORD *)buf = 67109120;
  ABRecordID RecordID = v23;
  CFIndex v24 = "Found another source (recordID %d) in the same account as invalid default, using that instead";
LABEL_37:
  _os_log_impl(&dword_19DCDB000, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 8u);
LABEL_38:
  if (a2 && v16)
  {
    *a2 = 1;
  }
  else if (!v16)
  {
    uint64_t v32 = ABOSLogGeneral();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v32, OS_LOG_TYPE_DEFAULT, "Returning an empty source", buf, 2u);
    }
    BOOL v16 = (const void *)ABSourceCreate();
  }

  return v16;
}

CFTypeRef ABAddressBookCopySuitableDefaultSourceInAccount(const void *a1, const void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  ABRecordRef DefaultSourceForAccount = ABAddressBookGetDefaultSourceForAccount(a1, (uint64_t)a2);
  uint64_t v5 = DefaultSourceForAccount;
  if (!DefaultSourceForAccount
    || ABRecordGetIntValue((uint64_t)DefaultSourceForAccount, kABSourceEnabledProperty) != 1
    || ABRecordGetIntValue((uint64_t)v5, kABSourceTypeProperty) == 6
    || (ABSourceIsRemote((uint64_t)v5) & 1) != 0
    || (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)v5, 0) & 1) != 0
    || (CFTypeRef result = CFRetain(v5)) == 0)
  {
    uint64_t v7 = (const void *)ABAddressBookCopyArrayOfAllSourcesInAccount((uint64_t)a1, a2);
    uint64_t v8 = (id)CFMakeCollectable(v7);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    CFTypeRef result = (CFTypeRef)[v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (result)
    {
      CFTypeRef v9 = result;
      uint64_t v10 = *(void *)v15;
      while (2)
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(const void **)(*((void *)&v14 + 1) + 8 * (void)v11);
          BOOL v13 = v12 == v5 || v12 == 0;
          if (!v13
            && ABRecordGetIntValue(*(void *)(*((void *)&v14 + 1) + 8 * (void)v11), kABSourceEnabledProperty) == 1&& ABRecordGetIntValue((uint64_t)v12, kABSourceTypeProperty) != 6&& (ABSourceIsRemote((uint64_t)v12) & 1) == 0&& (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)v12, 0) & 1) == 0)
          {
            return CFRetain(v12);
          }
          uint64_t v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        CFTypeRef result = (CFTypeRef)[v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
        CFTypeRef v9 = result;
        if (result) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

ABRecordRef ABAddressBookCopyDefaultSource(ABAddressBookRef addressBook)
{
  return ABAddressBookCopyDefaultSourceIsPersistableFallback(addressBook, 0);
}

void ABAddressBookSetDefaultSource(uint64_t a1, const void *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookSetDefaultSource(ABAddressBookRef, ABRecordRef, _Bool)", 208, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (a1 && (!a3 || !_ABCGetActualDefaultSource(a1)))
  {
    if (a2)
    {
      ABRecordID RecordID = ABRecordGetRecordID(a2);
      if ((ABRecordGetIntValue((uint64_t)a2, kABSourceTypeProperty) & 0x1000000) != 0) {
        return;
      }
    }
    else
    {
      ABRecordID RecordID = -1;
    }
    BOOL v13 = ABOSLogGeneral();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      ABRecordID v15 = RecordID;
      __int16 v16 = 2112;
      uint64_t v17 = ABLogBacktrace();
      _os_log_impl(&dword_19DCDB000, v13, OS_LOG_TYPE_DEFAULT, "Setting default source to recordID %d, %@", buf, 0x12u);
    }
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    CPSqliteConnectionSetIntegerForProperty();
  }
}

void ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded(const void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19DCDB000, v2, OS_LOG_TYPE_DEFAULT, "ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded - start", buf, 2u);
  }
  char v35 = 0;
  CFTypeRef v3 = ABAddressBookCopyDefaultSourceIsPersistableFallback(a1, &v35);
  if (!v35)
  {
    int v7 = 0;
    goto LABEL_15;
  }
  CFTypeRef v4 = ABAddressBookCopyLocalSource((uint64_t)a1);
  uint64_t v5 = ABOSLogGeneral();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3 != v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v5, OS_LOG_TYPE_DEFAULT, "Persisting the non-local source as the default source", buf, 2u);
    }
    ABAddressBookSetDefaultSource((uint64_t)a1, v3, 0);
    goto LABEL_13;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19DCDB000, v5, OS_LOG_TYPE_DEFAULT, "The local source is the default source fallback", buf, 2u);
  }
  if (ABRecordGetIntValue((uint64_t)v3, kABSourceEnabledProperty)
    || (uint64_t v8 = [MEMORY[0x1E4F179C8] defaultStore],
        uint64_t v9 = (void *)[MEMORY[0x1E4F5A318] providerWithStore:v8],
        char v10 = [v9 isAnyAccountSyncableIgnoringAccount:0],
        v9,
        (v10 & 1) != 0))
  {
LABEL_13:
    int v7 = 0;
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v26 = ABOSLogGeneral();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19DCDB000, v26, OS_LOG_TYPE_DEFAULT, "The local source is disabled and no other accounts are syncable. Enabling the local source to use as the default source", buf, 2u);
  }
  ABRecordSetValue(v3, kABSourceEnabledProperty, (CFTypeRef)*MEMORY[0x1E4F1CFD0], 0);
  int v7 = 1;
  if (v4) {
LABEL_14:
  }
    CFRelease(v4);
LABEL_15:
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v11 = (const void *)ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources((uint64_t)a1, 1);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v12 = (id)CFMakeCollectable(v11);
  uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v38 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v32 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(const void **)(*((void *)&v31 + 1) + 8 * i);
        int IntValue = ABRecordGetIntValue((uint64_t)v17, kABSourceTypeProperty);
        if (IntValue == 6)
        {
          v7 |= ABAddressBookRemoveRecord(a1, v17, 0);
        }
        else if ((IntValue & 0x1000000) != 0)
        {
          CFArrayRef v19 = ABAddressBookCopyArrayOfAllPeopleInSource(a1, v17);
          BOOL v20 = (id)CFMakeCollectable(v19);
          long long v27 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          uint64_t v21 = [v20 countByEnumeratingWithState:&v27 objects:v37 count:16];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = *(void *)v28;
            do
            {
              for (uint64_t j = 0; j != v22; ++j)
              {
                if (*(void *)v28 != v23) {
                  objc_enumerationMutation(v20);
                }
                v7 |= ABAddressBookRemoveRecord(a1, *(ABRecordRef *)(*((void *)&v27 + 1) + 8 * j), 0);
              }
              uint64_t v22 = [v20 countByEnumeratingWithState:&v27 objects:v37 count:16];
            }
            while (v22);
          }
        }
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v31 objects:v38 count:16];
    }
    while (v14);
  }
  if (v7) {
    ABAddressBookSave(a1, 0);
  }
  uint64_t v25 = ABOSLogGeneral();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19DCDB000, v25, OS_LOG_TYPE_DEFAULT, "ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded - end", buf, 2u);
  }
}

uint64_t ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(uint64_t a1, int a2)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(ABAddressBookRef, _Bool)", 327, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCSourceCopyArrayOfAllSourcesIncludingDisabledSources(a1, a2);
}

CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef addressBook, ABRecordRef source)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef, ABRecordRef)", 509, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCCopyArrayOfAllPeopleInSource((uint64_t)addressBook, (uint64_t)source);
}

uint64_t ABAddressBookCopySourcesWithUUIDs(uint64_t a1, const __CFArray *a2)
{
  if (ABLogAPIUsage())
  {
    CFTypeRef v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopySourcesWithUUIDs(ABAddressBookRef, CFArrayRef)", 301, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return ABCSourceCopyRecordsForUUIDs(a1, a2);
}

uint64_t ABAddressBookGetSourceCountIncludingDisabled()
{
  return (int)CPRecordStoreGetCountOfInstancesOfClassWhere();
}

uint64_t ABAddressBookGetCountOfRecordsOutsideSource(int a1, ABRecordRef record)
{
  objc_msgSend(NSString, "stringWithFormat:", @"StoreID != %d", ABRecordGetRecordID(record));
  int CountOfInstancesOfClassWhere = CPRecordStoreGetCountOfInstancesOfClassWhere();
  return (int)(CPRecordStoreGetCountOfInstancesOfClassWhere() + CountOfInstancesOfClassWhere);
}

CFArrayRef ABAddressBookCopyArrayOfAllSources(ABAddressBookRef addressBook)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    CFTypeRef v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSources(ABAddressBookRef)", 332, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  CFArrayRef result = (CFArrayRef)ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources((uint64_t)addressBook, 0);
  if (!result)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreate(v9, 0, 0, v10);
  }
  return result;
}

void *ABAddressBookIndexSetOfAllowedSourceIdentifiersIncludingDisabledSources(uint64_t a1, const void *a2, int a3)
{
  uint64_t v5 = (void *)[MEMORY[0x1E4F28E60] indexSet];
  uint64_t v6 = @"AND store.Enabled = 1";
  if (a3) {
    uint64_t v6 = &stru_1EF03E278;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"SELECT store.rowid from ABStore store LEFT JOIN ABAccount account on store.Accountint ID = account.ROWID WHERE ab_is_store_allowed(account.AccountIdentifier, store.type, store.guid, ?) = 1 %@;",
    v6);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  uint64_t v7 = CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    uint64_t v8 = v7;
    CFAllocatorRef v9 = *(sqlite3_stmt **)(v7 + 8);
    if (v9)
    {
      sqlite3_bind_blob(v9, 1, a2, 8, 0);
      while (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100)
        objc_msgSend(v5, "addIndex:", sqlite3_column_int(*(sqlite3_stmt **)(v8 + 8), 0));
      CPSqliteStatementReset();
    }
  }
  return v5;
}

const void *ABAddressBookCopySourceWithAccountAndExternalIdentifiers(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopySourceWithAccountAndExternalIdentifiers(ABAddressBookRef, CFStringRef, CFStringRef)", 367, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a1 || !*(void *)(a1 + 16)) {
    return 0;
  }
  CFArrayRef v10 = (const __CFArray *)(a2
                          ? CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter()
                          : CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock());
  CFArrayRef v11 = v10;
  if (!v10) {
    return 0;
  }
  if (CFArrayGetCount(v10) < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
    uint64_t v13 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
  }
  CFRelease(v11);
  return v13;
}

void __ABAddressBookCopySourceWithAccountAndExternalIdentifiers_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFTypeRef v3 = *(sqlite3_stmt **)(a2 + 8);
    if (v3)
    {
      uint64_t v4 = (const char *)_CPCreateUTF8StringFromCFString();
      uint64_t v5 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
      sqlite3_bind_text(v3, 1, v4, -1, MEMORY[0x1E4F14838]);
      uint64_t v6 = *(sqlite3_stmt **)(a2 + 8);
      uint64_t v7 = (const char *)_CPCreateUTF8StringFromCFString();
      sqlite3_bind_text(v6, 2, v7, -1, v5);
    }
  }
}

void __ABAddressBookCopySourceWithAccountAndExternalIdentifiers_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(sqlite3_stmt **)(a2 + 8);
    if (v2)
    {
      CFTypeRef v3 = (const char *)_CPCreateUTF8StringFromCFString();
      uint64_t v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
      sqlite3_bind_text(v2, 1, v3, -1, v4);
    }
  }
}

uint64_t ABAddressBookCopySourceWithProviderIdentifier(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    CFTypeRef v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopySourceWithProviderIdentifier(ABAddressBookRef, CFStringRef)", 403, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  if (a1)
  {
    if (*(void *)(a1 + 16)
      && (CFArrayRef v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock()) != 0)
    {
      CFArrayRef v9 = v8;
      if (CFArrayGetCount(v8) < 1)
      {
        a1 = 0;
      }
      else
      {
        ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
        a1 = (uint64_t)ValueAtIndex;
        if (ValueAtIndex) {
          CFRetain(ValueAtIndex);
        }
      }
      CFRelease(v9);
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

void __ABAddressBookCopySourceWithProviderIdentifier_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(sqlite3_stmt **)(a2 + 8);
    if (v2)
    {
      CFTypeRef v3 = (const char *)_CPCreateUTF8StringFromCFString();
      uint64_t v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
      sqlite3_bind_text(v2, 1, v3, -1, v4);
    }
  }
}

void ABAddressBookPrepareSourceForFamilyDelegate(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    uint64_t v2 = CPSqliteConnectionStatementForSQL();
    uint64_t v3 = CPSqliteConnectionStatementForSQL();
    uint64_t v4 = CPSqliteConnectionStatementForSQL();
    if (v2)
    {
      uint64_t v5 = *(sqlite3_stmt **)(v2 + 8);
      if (v5)
      {
        uint64_t v6 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v5, 1, v6, -1, MEMORY[0x1E4F14838]);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
    }
    if (v3)
    {
      uint64_t v7 = *(sqlite3_stmt **)(v3 + 8);
      if (v7)
      {
        CFArrayRef v8 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v7, 1, v8, -1, MEMORY[0x1E4F14838]);
        sqlite3_bind_int(*(sqlite3_stmt **)(v3 + 8), 2, 4);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
    }
    if (v4)
    {
      CFArrayRef v9 = *(sqlite3_stmt **)(v4 + 8);
      if (v9)
      {
        CFArrayRef v10 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v9, 1, v10, -1, MEMORY[0x1E4F14838]);
        CPSqliteStatementPerform();
        CPSqliteStatementReset();
      }
    }
  }
}

ABRecordRef ABPersonCreateInSource(ABRecordRef source)
{
  return ABPersonCreateInSourceAndReturnError(source, 0);
}

const void *ABPersonCreateInSourceAndReturnError(const void *a1, const void **a2)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v9 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCreateInSourceAndReturnError(ABRecordRef, CFErrorRef *)", 477, v4, 0, v5, v6, v7, (uint64_t)v9);
    CFRelease(v4);
  }
  if (ABSourceIsContentReadonlyIncludingGuardianRestrictions((uint64_t)a1, 1))
  {
    if (a2) {
      ABPolicyPopulateRecordReadOnlyError(a2, 0, @"SourceNotWritable");
    }
    return 0;
  }
  else
  {
    return ABCPersonCreateNewPersonInSourceAndReturnError(0, a1, (CFErrorRef *)a2);
  }
}

uint64_t ABSourceIsContentReadonly(uint64_t a1)
{
  return ABSourceIsContentReadonlyIncludingGuardianRestrictions(a1, 1);
}

ABRecordRef ABGroupCreateInSource(ABRecordRef source)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABGroupCreateInSource(ABRecordRef)", 489, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCGroupCreateNewGroupInSourceAndReturnError(0, source, 0);
}

ABRecordRef ABPersonCopySource(ABRecordRef person)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABPersonCopySource(ABRecordRef)", 496, v1, 0, v2, v3, v4, (uint64_t)v6);
    CFRelease(v1);
  }
  return (ABRecordRef)ABCPersonCopySource();
}

ABRecordRef ABGroupCopySource(ABRecordRef group)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABGroupCopySource(ABRecordRef)", 502, v1, 0, v2, v3, v4, (uint64_t)v6);
    CFRelease(v1);
  }
  return (ABRecordRef)ABCGroupCopySource();
}

CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef addressBook, ABRecordRef source, ABPersonSortOrdering sortOrdering)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering)", 515, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  CFArrayRef v12 = ABCCopyArrayOfAllPeopleInSourceWithSortOrdering((uint64_t)addressBook, (uint64_t)source, sortOrdering);
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering)", 517, @">> ", 0, v13, v14, v15, v17);
  }
  return v12;
}

CFArrayRef ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef addressBook, ABRecordRef source)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)addressBook);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef, ABRecordRef)", 523, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  return (CFArrayRef)ABCCopyArrayOfAllGroupsInSource((uint64_t)addressBook, (uint64_t)source);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifierInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 530, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCPersonCopyArrayOfPeopleWithExternalIdentifierInSource(a2, a3);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifiersInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 536, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
  {
    a1 = ABCGetAddressBookForRecord();
    if (!a1) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = ABCPersonClass;
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalIdentifiers(v12, (uint64_t)v13, a3, a2);
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifierInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 552, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  return ABCGroupCopyArrayOfGroupsWithExternalIdentifierInSource(a2, a3);
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifiersInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 558, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
  {
    a1 = ABCGetAddressBookForRecord();
    if (!a1) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = ABCGroupClass[0];
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(v12, (uint64_t)v13, a3, a2);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 575, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
  {
    a1 = ABCGetAddressBookForRecord();
    if (!a1) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = ABCPersonClass;
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUID(v12, (uint64_t)v13, a3, a2);
}

uint64_t ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDsInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 591, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
  {
    a1 = ABCGetAddressBookForRecord();
    if (!a1) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = ABCPersonClass;
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(v12, (uint64_t)v13, a3, a2);
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDInSource(uint64_t a1, const void *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 607, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
  {
    a1 = ABCGetAddressBookForRecord();
    if (!a1) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = ABCGroupClass[0];
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUID(v12, (uint64_t)v13, a3, a2);
}

uint64_t ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDsInSource(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 622, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1)
  {
    a1 = ABCGetAddressBookForRecord();
    if (!a1) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = ABCGroupClass[0];
  return ABCCopyArrayOfAllInstancesOfClassInSourceWithExternalUUIDs(v12, (uint64_t)v13, a3, a2);
}

void ABAddressBookClearExternalIdentifiersInRecordsWithSource(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"void ABAddressBookClearExternalIdentifiersInRecordsWithSource(ABAddressBookRef, ABRecordRef)", 636, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  ABClearAllInstancesOfClassInSourceWithExternalIdentifier(a1, (const char **)ABCPersonClass, a2);
  uint64_t v10 = (const char **)ABCGroupClass[0];
  ABClearAllInstancesOfClassInSourceWithExternalIdentifier(a1, v10, a2);
}

uint64_t ABSourceGetTypeOfProperty(int a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABPropertyType ABSourceGetTypeOfProperty(ABPropertyID)", 677, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABCSourceTypeOfProperty(a1);
}

uint64_t ABSourceCopyCompositeName()
{
  return 0;
}

CFMutableArrayRef copyRecordIDsInSource(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT ROWID from %s where StoreID = %i;",
         *a3,
         a4);
  if (!v5) {
    return 0;
  }
  CFStringRef v6 = v5;
  if (CPSqliteConnectionStatementForSQL())
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, 0);
    CPSqliteStatementIntegerResult();
    int v8 = 0;
    CPSqliteStatementReset();
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    int v8 = 1;
  }
  CFRelease(v6);
  if (!v8 && Mutable)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

sqlite3_stmt *removeSyncImagesForRecord(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  CFStringRef ImageStore = ABCAddressBookGetImageStore(a1);
  if (!ImageStore) {
    return 0;
  }
  return ABCImageStoreRemoveImagesForRecord((uint64_t)a1, (uint64_t)ImageStore, a3, 5);
}

BOOL removeSyncImagesFromSource(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef v4 = copyRecordIDsInSource((uint64_t)a1, a2, ABCPersonClass, a3);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  BOOL v7 = CFArrayGetCount(v4)
    && (CFStringRef ImageStore = ABCAddressBookGetImageStore(a1)) != 0
    && ABCImageStoreRemoveImagesForRecordIds(a1, (uint64_t)ImageStore, v5, 5) != 0;
  CFRelease(v5);
  return v7;
}

CFIndex updateRecordsForMoveToSource(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, const char **a5, int a6)
{
  uint64_t v9 = *a5;
  size_t v10 = strlen(*(const char **)ABCPersonClass);
  LODWORD(v9) = strncmp(v9, *(const char **)ABCPersonClass, v10);
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  CPRecordIndexOfPropertyNamed();
  int v11 = (int)v9;
  if (!v9) {
    CPRecordIndexOfPropertyNamed();
  }
  if (a6) {
    CPRecordIndexOfPropertyNamed();
  }
  CFIndex result = CFArrayGetCount(a3);
  if (result >= 1)
  {
    CFIndex v13 = result;
    for (CFIndex i = 0; i != v13; ++i)
    {
      ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(a3, i);
      CFIndex result = MEMORY[0x19F3B3BA0](*(void *)(a1 + 16), a5, ValueAtIndex);
      if (result)
      {
        CPRecordUnloadProperty();
        CPRecordInitializeProperty();
        CPRecordUnloadProperty();
        CPRecordUnloadProperty();
        CPRecordUnloadProperty();
        CFIndex result = CPRecordUnloadProperty();
        if (a6) {
          CFIndex result = CPRecordUnloadProperty();
        }
        if (!v11) {
          CFIndex result = CPRecordUnloadProperty();
        }
      }
    }
  }
  return result;
}

uint64_t moveRecordsToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5, int a6)
{
  CFArrayRef v10 = copyRecordIDsInSource(a1, a2, a5, a3);
  if (a6) {
    int v11 = @", ImageURI = NULL";
  }
  else {
    int v11 = &stru_1EF03E278;
  }
  uint64_t v12 = *a5;
  size_t v13 = strlen(*(const char **)ABCPersonClass);
  int v14 = strncmp(*a5, *(const char **)ABCPersonClass, v13);
  uint64_t v15 = @", DowntimeWhitelist = NULL";
  if (v14) {
    uint64_t v15 = &stru_1EF03E278;
  }
  CFStringRef v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@ WHERE StoreID = %i;",
          v12,
          a4,
          v11,
          v15,
          a3);
  if (v16)
  {
    CFStringRef v17 = v16;
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
      CFRelease(v17);
      if (!v10) {
        return 1;
      }
      updateRecordsForMoveToSource(a1, v18, v10, a4, a5, a6);
      uint64_t v19 = 1;
      goto LABEL_12;
    }
    CFRelease(v17);
  }
  uint64_t v19 = 0;
  if (v10) {
LABEL_12:
  }
    CFRelease(v10);
  return v19;
}

BOOL moveRecordForIDToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5, int a6, int a7)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a7) {
    int v11 = @", ImageURI = NULL";
  }
  else {
    int v11 = &stru_1EF03E278;
  }
  if (a6) {
    uint64_t v12 = @", ExternalUUID = NULL";
  }
  else {
    uint64_t v12 = &stru_1EF03E278;
  }
  size_t v13 = *a5;
  size_t v14 = strlen(*(const char **)ABCPersonClass);
  int v15 = strncmp(v13, *(const char **)ABCPersonClass, v14);
  CFStringRef v16 = @", DowntimeWhitelist = NULL";
  if (v15) {
    CFStringRef v16 = &stru_1EF03E278;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@%@ WHERE ROWID = %i;",
          v13,
          a4,
          v11,
          v12,
          v16,
          a3);
  if (v18)
  {
    CFStringRef v19 = v18;
    uint64_t v20 = CPSqliteConnectionStatementForSQL();
    BOOL v21 = v20 != 0;
    if (v20)
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    CFRelease(v19);
  }
  else
  {
    BOOL v21 = 0;
  }
  values[0] = (void *)(int)a3;
  CFArrayRef v22 = CFArrayCreate(v17, (const void **)values, 1, 0);
  if (v22)
  {
    CFArrayRef v24 = v22;
    if (v21) {
      updateRecordsForMoveToSource(a1, v23, v22, a4, a5, a7);
    }
    CFRelease(v24);
  }
  return v21;
}

uint64_t ABAddressBookMovePersonToSource(uint64_t a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __ABAddressBookMovePersonToSource_block_invoke;
  v6[3] = &__block_descriptor_40_e614_B48__0_______CFRuntimeBase_QAQ___CPRecordStore___CPRecordStore_____CFString_____CFDictionary_____CFDictionary_____CFDictionary_____CFString_____CFString___opaque_pthread_mutex_t_q_56c______CFArray_____CFArray_____CFArray_____CFArray_____CFArray_____CFDictionary___UCollator___UCollator_____CFString_____CFString_____CFStringTokenizer_____CFString_____CFString_C____CFArray_CC____opaque_pthread_mutex_t_q_56c______CFString_d____CFString________ABBookflags_b1b1b8b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1__8__CPSqliteConnection___CPSqliteDatabase___sqlite3_____CFDictionary_____CFDictionary__v_____vIB_16_v24_v32_____CFError_40l;
  v6[4] = a2;
  ABAddressBookMoveRecordToSource(a1, a2, a3, (uint64_t)v6, a4, a5);
  return 0;
}

sqlite3_stmt *__ABAddressBookMovePersonToSource_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = removeSyncImagesForRecord(a2, (uint64_t)a2, *(void *)(a1 + 32));
  if ((v2 & 1) == 0)
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool ABAddressBookMovePersonToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, _Bool, CFErrorRef *)_block_invoke", 898, 0, @"removeSyncImagesForRecord returned an error while moving contacts between sources. Continuing with move anyway.", v3, v4, v5, v7);
  }
  return v2;
}

void ABAddressBookMoveRecordToSource(uint64_t a1, const void *a2, const void *a3, uint64_t a4, int a5, uint64_t a6)
{
  if (ABLogAPIUsage())
  {
    int v11 = _isMainThread();
    uint64_t v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v11);
    uint64_t v13 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookMoveRecordToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, RecordTypeSpecificMoveWork, _Bool, CFErrorRef *)", 865, v12, @"%@", v14, v15, v16, v13);
    CFRelease(v12);
  }
  if (a2)
  {
    if (a3)
    {
      uint64_t RecordID = ABRecordGetRecordID(a3);
      uint64_t v18 = ABRecordGetRecordID(a2);
      ABRecordType RecordType = ABRecordGetRecordType(a2);
      uint64_t Class = CPRecordGetClass();
      if (a1)
      {
        BOOL v21 = (const char **)Class;
        CPRecordStoreGetDatabase();
        uint64_t v22 = CPSqliteDatabaseConnectionForWriting();
        if (a4) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, const void *, const void *, uint64_t))(a4 + 16))(a4, a1, v22, a2, a3, a6);
        }
        moveRecordForIDToSource(a1, v22, v18, RecordID, v21, a5, RecordType == 0);
        if (v22)
        {
          CPSqliteDatabaseReleaseSqliteConnection();
        }
      }
    }
  }
}

uint64_t ABAddressBookMoveGroupToSource(uint64_t a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  return 0;
}

uint64_t ABAddressBookMoveAllRecordsInSourceToSource(uint64_t a1, const void *a2, const void *a3)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookMoveAllRecordsInSourceToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)", 913, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  unint64_t v12 = (unint64_t)ABRecordCopyValue(a2, kABSourceConstraintsPathProperty);
  unint64_t v13 = (unint64_t)ABRecordCopyValue(a3, kABSourceConstraintsPathProperty);
  if (ABRecordGetIntValue((uint64_t)a2, kABSourceTypeProperty) == 2 && v12)
  {
    CFRelease((CFTypeRef)v12);
    unint64_t v12 = 0;
  }
  if (ABRecordGetIntValue((uint64_t)a3, kABSourceTypeProperty) == 2 && v13)
  {
    CFRelease((CFTypeRef)v13);
    unint64_t v13 = 0;
  }
  if (v12 | v13)
  {
    if (v12) {
      CFRelease((CFTypeRef)v12);
    }
    if (v13) {
      CFRelease((CFTypeRef)v13);
    }
    return 0;
  }
  else
  {
    uint64_t RecordID = ABRecordGetRecordID(a2);
    uint64_t v15 = ABRecordGetRecordID(a3);
    if (a1)
    {
      uint64_t v16 = v15;
      CPRecordStoreGetDatabase();
      uint64_t v17 = CPSqliteDatabaseConnectionForWriting();
      BOOL v18 = removeSyncImagesFromSource((const __CFString *)a1, v17, RecordID);
      int v19 = moveRecordsToSource(a1, v17, RecordID, v16, (const char **)ABCPersonClass, 1);
      a1 = moveRecordsToSource(a1, v17, RecordID, v16, (const char **)ABCGroupClass[0], 0) & v19 & v18;
      if (v17) {
        CPSqliteDatabaseReleaseSqliteConnection();
      }
      int IntValue = ABRecordGetIntValue((uint64_t)a2, kABSourceMeIdentifierProperty);
      int v21 = ABRecordGetIntValue((uint64_t)a3, kABSourceMeIdentifierProperty);
      if (v21 != -1) {
        int IntValue = v21;
      }
      ABRecordSetIntValue(a2, kABSourceMeIdentifierProperty, -1, 0);
      ABRecordSetIntValue(a3, kABSourceMeIdentifierProperty, IntValue, 0);
    }
  }
  return a1;
}

BOOL sourceContainsPerson(ABRecordRef record, uint64_t a2)
{
  BOOL result = 0;
  if (record)
  {
    if (a2)
    {
      ABRecordID RecordID = ABRecordGetRecordID(record);
      return RecordID == ABRecordGetIntValue(a2, kABPersonStoreIDProperty);
    }
  }
  return result;
}

BOOL ABSourceSetMe(const void *a1, const void *a2, CFAllocatorRef *a3)
{
  if (ABLogAPIUsage())
  {
    long long v36 = _isMainThread();
    CFStringRef v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceSetMe(ABRecordRef, ABRecordRef, CFErrorRef *)", 981, v6, 0, v7, v8, v9, (uint64_t)v36);
    CFRelease(v6);
  }
  int IntValue = ABRecordGetIntValue((uint64_t)a1, kABSourceMeIdentifierProperty);
  if (!a2)
  {
    uint64_t v15 = ABOSLogMeCardChanges();
    uint64_t v16 = v15;
    if (IntValue == -1)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        ABSourceSetMe_cold_1();
      }
      return 1;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v16, OS_LOG_TYPE_DEFAULT, "Asked to set a nil Me card and will remove the existing card", buf, 2u);
    }
    if (ABRecordSetIntValue(a1, kABSourceMeIdentifierProperty, -1, a3)) {
      goto LABEL_24;
    }
    uint64_t v17 = ABOSLogMeCardChanges();
    BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ABSourceSetMe_cold_3((__CFString **)a3);
    return 0;
  }
  if (!sourceContainsPerson(a1, (uint64_t)a2))
  {
    int v19 = ABOSLogMeCardChanges();
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ABSourceSetMe_cold_7();
    return 0;
  }
  ABRecordID RecordID = ABRecordGetRecordID(a2);
  if (RecordID == -1)
  {
    uint64_t v20 = ABOSLogMeCardChanges();
    BOOL result = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ABSourceSetMe_cold_4();
    return 0;
  }
  int v12 = RecordID;
  unint64_t v13 = ABOSLogMeCardChanges();
  uint64_t v14 = v13;
  if (v12 == IntValue)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      ABSourceSetMe_cold_5();
    }
    return 1;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v40 = 0;
    _os_log_impl(&dword_19DCDB000, v14, OS_LOG_TYPE_DEFAULT, "Asked to set a new Me card and will replace the existing card", v40, 2u);
  }
  if (ABRecordSetIntValue(a1, kABSourceMeIdentifierProperty, v12, a3))
  {
LABEL_24:
    AddressBoouint64_t k = ABRecordGetAddressBook();
    if (AddressBook)
    {
      uint64_t v22 = AddressBook;
      if (ABAddressBookGetIntegerProperty(AddressBook) == -1)
      {
        uint64_t v23 = ABOSLogMeCardChanges();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v39 = 0;
          _os_log_impl(&dword_19DCDB000, v23, OS_LOG_TYPE_INFO, "Updated the Me card and now adding the preferred souce", v39, 2u);
        }
        uint64_t v24 = ABRecordGetRecordID(a1);
        ABAddressBookSetIntegerProperty(v22, @"MeSourceID", v24, v25, v26, v27, v28, v29, v35);
      }
      *(_DWORD *)(v22 + 376) |= 0x40000u;
      ABCDBContextLogChangeForPerson(*(void *)(v22 + 16), a2, 0xAu);
      if (!a2)
      {
LABEL_30:
        long long v30 = ABOSLogMeCardChanges();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v37 = 0;
          long long v31 = "We successfully removed the Me card";
          long long v32 = (uint8_t *)&v37;
LABEL_36:
          _os_log_impl(&dword_19DCDB000, v30, OS_LOG_TYPE_DEFAULT, v31, v32, 2u);
          return 1;
        }
        return 1;
      }
    }
    else
    {
      long long v33 = ABOSLogMeCardChanges();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        ABSourceSetMe_cold_2();
        if (!a2) {
          goto LABEL_30;
        }
      }
      else if (!a2)
      {
        goto LABEL_30;
      }
    }
    CPRecordMarkChanged();
    long long v30 = ABOSLogMeCardChanges();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v38 = 0;
      long long v31 = "We successfully set a new Me card";
      long long v32 = v38;
      goto LABEL_36;
    }
    return 1;
  }
  long long v34 = ABOSLogMeCardChanges();
  BOOL result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ABSourceSetMe_cold_6((__CFString **)a3);
    return 0;
  }
  return result;
}

uint64_t ABSourceIsRemote(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsRemote(ABRecordRef)", 1061, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if (a1) {
    return (ABRecordGetIntValue(a1, kABSourceTypeProperty) >> 24) & 1;
  }
  else {
    return 0;
  }
}

uint64_t ABAddressBookTrimWhitespaceFromPersonPropertyIDsInSource(const void *a1, const __CFArray *a2, const void *a3)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookTrimWhitespaceFromPersonPropertyIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)", 1074, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      uint64_t result = 0;
      if (a3)
      {
        if (Count >= 1)
        {
          CFArrayRef v14 = ABAddressBookCopyArrayOfAllPeopleInSource(a1, a3);
          if (v14)
          {
            CFArrayRef v15 = v14;
            CFIndex v29 = CFArrayGetCount(v14);
            if (v29 < 1)
            {
              char v17 = 0;
            }
            else
            {
              CFIndex v16 = 0;
              char v17 = 0;
              CFArrayRef v28 = v15;
              do
              {
                ABPropertyID ValueAtIndex = CFArrayGetValueAtIndex(v15, v16);
                if (ValueAtIndex)
                {
                  int v19 = ValueAtIndex;
                  CFIndex v20 = CFArrayGetCount(a2);
                  if (v20 >= 1)
                  {
                    CFIndex v21 = v20;
                    for (CFIndex i = 0; i != v21; ++i)
                    {
                      ABPropertyID v23 = CFArrayGetValueAtIndex(a2, i);
                      if (ABRecordTypeOfProperty() == 1)
                      {
                        uint64_t v24 = (__CFString *)ABRecordCopyValue(v19, v23);
                        if (v24)
                        {
                          CFStringRef v25 = v24;
                          CFStringRef v26 = (const __CFString *)_ABStringByTrimmingWhiteSpace(v24);
                          CFIndex Length = CFStringGetLength(v25);
                          if (Length != CFStringGetLength(v26))
                          {
                            ABRecordSetValue(v19, v23, v26, 0);
                            char v17 = 1;
                          }
                          CFRelease(v25);
                        }
                      }
                    }
                  }
                }
                ++v16;
                CFArrayRef v15 = v28;
              }
              while (v16 != v29);
            }
            CFRelease(v15);
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        }
      }
    }
  }
  return result;
}

BOOL ABSourceGetCapabilitiesFlag(uint64_t a1, int a2)
{
  return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) & a2) != 0;
}

uint64_t ABSourceSetCapabilitiesFlag(const void *a1, int a2, int a3)
{
  int IntValue = ABRecordGetIntValue((uint64_t)a1, kABSourceCapabilitiesProperty);
  if (a3) {
    int v7 = IntValue | a2;
  }
  else {
    int v7 = IntValue & ~a2;
  }
  uint64_t v8 = kABSourceCapabilitiesProperty;
  return ABRecordSetIntValue(a1, v8, v7, 0);
}

uint64_t ABSourceSetShouldIgnoreCapabilitiesRestrictions(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v10 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABSourceSetShouldIgnoreCapabilitiesRestrictions(ABRecordRef, _Bool)", 1143, v4, 0, v5, v6, v7, (uint64_t)v10);
    CFRelease(v4);
  }
  uint64_t Policy = ABSourceGetPolicy(a1);
  return ABPolicySetShouldIgnoreCapabilitiesRestrictions(Policy, a2);
}

uint64_t ABSourceIsReadonly(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsReadonly(ABRecordRef)", 1150, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABSourceIsContentReadonlyIncludingGuardianRestrictions(a1, 1);
}

uint64_t ABSourceIsSearchable(uint64_t a1)
{
  return (ABRecordGetIntValue(a1, kABSourceTypeProperty) >> 24) & 1;
}

BOOL ABSourceIsContactProvider(uint64_t a1)
{
  return ABRecordGetIntValue(a1, kABSourceTypeProperty) == 7;
}

uint64_t ABSourceIsContentReadonlyInCapabilityRestrictions(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsContentReadonlyInCapabilityRestrictions(ABRecordRef)", 1163, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if ((ABRecordGetIntValue(a1, kABSourceTypeProperty) & 0x1000000) != 0
    || ABRecordGetIntValue(a1, kABSourceTypeProperty) == 7)
  {
    return 1;
  }
  else
  {
    return ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) & 1;
  }
}

uint64_t ABSourceIsGuardianRestricted(uint64_t a1)
{
  return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) >> 2) & 1;
}

uint64_t ABSourceIsContentReadonlyIncludingGuardianRestrictions(uint64_t a1, int a2)
{
  if (ABLogAPIUsage())
  {
    CFArrayRef v14 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceIsContentReadonlyIncludingGuardianRestrictions(ABRecordRef, _Bool)", 1175, v4, 0, v5, v6, v7, (uint64_t)v14);
    CFRelease(v4);
  }
  AddressBoouint64_t k = ABRecordGetAddressBook();
  uint64_t v9 = AddressBook;
  if (AddressBook && ABAddressBookIgnoresContactProviderRestrictions(AddressBook)) {
    return 0;
  }
  uint64_t Policy = ABSourceGetPolicy(a1);
  if (ABPolicyShouldIgnoreCapabilitiesRestrictions(Policy)) {
    return 0;
  }
  uint64_t IsContentReadonlyInCapabilityRestrictions = ABSourceIsContentReadonlyInCapabilityRestrictions(a1);
  uint64_t v11 = IsContentReadonlyInCapabilityRestrictions;
  if (v9 && !IsContentReadonlyInCapabilityRestrictions && a2 && !ABAddressBookIgnoresGuardianRestrictions(v9)) {
    return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) >> 2) & 1;
  }
  return v11;
}

uint64_t ABSourceSetContentReadonly(const void *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABSourceSetContentReadonly(ABRecordRef, _Bool)", 1203, v4, 0, v5, v6, v7, (uint64_t)v11);
    CFRelease(v4);
  }
  int v8 = ABRecordGetIntValue((uint64_t)a1, kABSourceCapabilitiesProperty) & 0xFFFFFFFE | a2;
  uint64_t v9 = kABSourceCapabilitiesProperty;
  return ABRecordSetIntValue(a1, v9, v8, 0);
}

uint64_t ABSourceAreFoldersReadonlyInCapabilityRestrictions(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceAreFoldersReadonlyInCapabilityRestrictions(ABRecordRef)", 1208, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  if ((ABRecordGetIntValue(a1, kABSourceTypeProperty) & 0x1000000) != 0) {
    return 1;
  }
  else {
    return (ABRecordGetIntValue(a1, kABSourceCapabilitiesProperty) >> 1) & 1;
  }
}

uint64_t ABSourceAreFoldersReadonly(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    int v8 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABSourceAreFoldersReadonly(ABRecordRef)", 1213, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  uint64_t Policy = ABSourceGetPolicy(a1);
  if (ABPolicyShouldIgnoreCapabilitiesRestrictions(Policy)) {
    return 0;
  }
  return ABSourceAreFoldersReadonlyInCapabilityRestrictions(a1);
}

uint64_t ABSourceSetFoldersReadonly(const void *a1, int a2)
{
  if (ABLogAPIUsage())
  {
    int v12 = _isMainThread();
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"void ABSourceSetFoldersReadonly(ABRecordRef, _Bool)", 1219, v4, 0, v5, v6, v7, (uint64_t)v12);
    CFRelease(v4);
  }
  int v8 = ABRecordGetIntValue((uint64_t)a1, kABSourceCapabilitiesProperty) & 0xFFFFFFFD;
  if (a2) {
    int v9 = 2;
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = kABSourceCapabilitiesProperty;
  return ABRecordSetIntValue(a1, v10, v8 | v9, 0);
}

uint64_t ABSourceCopyPeopleWithImageSyncFailedTimeBefore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (ABLogAPIUsage())
  {
    uint64_t v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABSourceCopyPeopleWithImageSyncFailedTimeBefore(ABAddressBookRef, ABRecordRef, CFDateRef)", 1225, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  CFStringRef v12 = _ABCCreateCFStringFromDate(a3);
  uint64_t v13 = ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicate(*(void *)(a1 + 16), (uint64_t)ABCPersonClass, a2, @"ImageSyncFailedTime < ?", v12);
  CFRelease(v12);
  CFRelease(@"ImageSyncFailedTime < ?");
  return v13;
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

double ABPolicyCreateWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14)
{
  pthread_once(&kABPolicyRegisterClass, (void (*)(void))ABPolicyRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    double result = 0.0;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(void *)(Instance + 16) = a1;
    *(void *)(Instance + 24) = a2;
    *(void *)(Instance + 32) = a3;
    *(void *)(Instance + 40) = a4;
    *(void *)(Instance + 48) = a5;
    *(void *)(Instance + 56) = a6;
    *(void *)(Instance + 64) = a7;
    *(void *)(Instance + 72) = a8;
    *(void *)(Instance + 80) = a9;
    *(void *)(Instance + 88) = a10;
    *(void *)(Instance + 96) = a11;
    *(void *)(Instance + 104) = a12;
    *(_DWORD *)(Instance + 112) = a13;
    *(void *)(Instance + 120) = a14;
  }
  return result;
}

uint64_t ABPolicyCopySupportedRecordTypes(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))(*(void *)(result + 104));
  }
  return result;
}

uint64_t ABPolicyMaximumNumberOfValuesForProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 24))(a2, a3, *(void *)(result + 104));
  }
  return result;
}

uint64_t ABPolicyCopySupportedLabelsForProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 32))(a2, a3, *(void *)(result + 104));
  }
  return result;
}

uint64_t ABPolicyCopyPreferredLabelsForProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 40))(a2, a3, *(void *)(result + 104));
  }
  return result;
}

uint64_t ABPolicyShouldAddRecord(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(void))(result + 96))(*(void *)(result + 104)))
    {
      return 1;
    }
    else
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 48);
      uint64_t v9 = *(void *)(v7 + 104);
      return v8(a2, a3, v9, a4);
    }
  }
  return result;
}

uint64_t ABPolicyShouldIgnoreCapabilitiesRestrictions(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 96))(*(void *)(result + 104));
  }
  return result;
}

uint64_t ABPolicyShouldRemoveRecord(uint64_t result, uint64_t a2, const void *a3, const void **a4)
{
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(void))(result + 96))(*(void *)(result + 104)))
    {
      return 1;
    }
    else if (ABRecordGetRecordType(a3) {
           || a2 && ABAddressBookIgnoresGuardianRestrictions(a2)
    }
           || !ABPersonIsDowntimeWhitelisted(a3))
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, const void *, uint64_t, const void **))(v7 + 56);
      uint64_t v9 = *(void *)(v7 + 104);
      return v8(a2, a3, v9, a4);
    }
    else
    {
      ABPolicyPopulateRecordReadOnlyError(a4, 0, @"RecordNotWritable");
      return 0;
    }
  }
  return result;
}

uint64_t ABPolicyPopulateRecordReadOnlyError(const void **a1, int a2, const void *a3)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        CFRelease(v5);
      }
    }
    if (a3)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"PolicyRejectionReason", a3);
    }
    else
    {
      CFMutableArrayRef Mutable = 0;
    }
    *a1 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return 0;
}

uint64_t ABPolicyShouldAddMember(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(void))(result + 96))(*(void *)(result + 104)))
    {
      return 1;
    }
    else
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 64);
      uint64_t v9 = *(void *)(v7 + 104);
      return v8(a2, a3, a4, v9);
    }
  }
  return result;
}

uint64_t ABPolicyShouldRemoveMember(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    if ((*(uint64_t (**)(void))(result + 96))(*(void *)(result + 104)))
    {
      return 1;
    }
    else
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 72);
      uint64_t v9 = *(void *)(v7 + 104);
      return v8(a2, a3, a4, v9);
    }
  }
  return result;
}

BOOL ABPolicyIsPropertyGuardianRestricted(int a1, int a2)
{
  return !a1 && kABPersonDowntimeWhitelistProperty == a2;
}

uint64_t ABPolicyRecordIsWriteable(const void *a1, void *a2)
{
  uint64_t v18 = 0;
  if (a2) {
    uint64_t v4 = (const void **)&v18;
  }
  else {
    uint64_t v4 = 0;
  }
  ABRecordType RecordType = ABRecordGetRecordType(a1);
  if (RecordType == 2)
  {
    if ((ABSourceIsContentReadonly((uint64_t)a1) & 1) == 0 && !ABSourceAreFoldersReadonly((uint64_t)a1)) {
      return 1;
    }
    uint64_t v8 = &ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonSourceNotWritable;
LABEL_28:
    ABPolicyPopulateRecordReadOnlyError(v4, 1, *v8);
LABEL_29:
    uint64_t v11 = 0;
    if (!a2) {
      return v11;
    }
    goto LABEL_30;
  }
  if (RecordType != 1)
  {
    if (!RecordType)
    {
      ABRecordRef v6 = ABPersonCopySource(a1);
      if (v6)
      {
        uint64_t v7 = v6;
        if (ABSourceIsContentReadonly((uint64_t)v6))
        {
          ABPolicyPopulateRecordReadOnlyError(v4, 1, @"SourceNotWritable");
          CFRelease(v7);
          goto LABEL_29;
        }
        CFRelease(v7);
      }
      AddressBoouint64_t k = ABRecordGetAddressBook();
      if (AddressBook)
      {
        if (ABAddressBookIgnoresGuardianRestrictions(AddressBook)) {
          return 1;
        }
        ABRecordRef v13 = ABPersonCopySource(a1);
        if (v13)
        {
          CFArrayRef v14 = v13;
          uint64_t Policy = ABSourceGetPolicy((uint64_t)v13);
          if (Policy)
          {
            char v16 = (*(uint64_t (**)(void))(Policy + 96))(*(void *)(Policy + 104));
            CFRelease(v14);
            if (v16) {
              return 1;
            }
          }
          else
          {
            CFRelease(v14);
          }
        }
      }
      if (ABPersonIsDowntimeWhitelisted(a1))
      {
        uint64_t v8 = ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonRecordNotWritable;
        goto LABEL_28;
      }
    }
    return 1;
  }
  ABRecordRef v9 = ABGroupCopySource(a1);
  if (!v9) {
    return 1;
  }
  uint64_t v10 = v9;
  uint64_t v11 = ABSourceIsContentReadonly((uint64_t)v9) ^ 1;
  if ((v11 & 1) == 0) {
    ABPolicyPopulateRecordReadOnlyError(v4, 1, @"SourceNotWritable");
  }
  CFRelease(v10);
  if (a2)
  {
LABEL_30:
    if ((v11 & 1) == 0)
    {
      uint64_t v11 = 0;
      *a2 = v18;
    }
  }
  return v11;
}

uint64_t ABPolicyShouldSetValue(uint64_t a1, ABAddressBookRef addressBook, ABRecordRef record, uint64_t a4, void *a5, uint64_t a6, CFTypeRef *a7)
{
  CFTypeRef cf = 0;
  if (a7) {
    p_CFTypeRef cf = &cf;
  }
  else {
    p_CFTypeRef cf = 0;
  }
  if (record)
  {
    ABRecordType RecordType = ABRecordGetRecordType(record);
    int v15 = ABPolicyRecordIsWriteable(record, p_cf) ^ 1;
    if (!RecordType)
    {
      if (ABPersonPropertyIsStub(a4))
      {
        char v16 = ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonRecordPropertyNotWritable;
        goto LABEL_26;
      }
      int v18 = 1;
      BOOL v19 = kABPersonLinkProperty == a4 || kABPersonSoundProperty == a4;
      uint64_t v20 = 1;
      if (v19) {
        goto LABEL_34;
      }
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (addressBook)
  {
    ABRecordRef v17 = ABAddressBookCopyDefaultSource(addressBook);
    if (ABSourceIsContentReadonly((uint64_t)v17)) {
      int v15 = 1;
    }
    else {
      int v15 = ABSourceAreFoldersReadonly((uint64_t)v17);
    }
    CFRelease(v17);
LABEL_20:
    int v18 = 0;
    goto LABEL_21;
  }
  int v18 = 0;
  int v15 = 0;
LABEL_21:
  uint64_t v21 = ABRecordGetRecordType(record);
  if (a1 && ((*(uint64_t (**)(void))(a1 + 96))(*(void *)(a1 + 104)) & 1) != 0) {
    goto LABEL_33;
  }
  if (v15)
  {
    if (cf)
    {
LABEL_27:
      uint64_t v20 = 0;
      goto LABEL_38;
    }
    char v16 = &ABAddressBookErrorUserInfoOperationNotPermittedByStoreReasonSourceNotWritable;
LABEL_26:
    ABPolicyPopulateRecordReadOnlyError(p_cf, 1, *v16);
    goto LABEL_27;
  }
  if (!record) {
    goto LABEL_33;
  }
  if (v21
    || kABPersonDowntimeWhitelistProperty != a4
    || ABAddressBookIgnoresGuardianRestrictions((uint64_t)addressBook))
  {
    if (ABPolicyShouldSetValueForRecordType(a1, v21, a4, (uint64_t)a5, a6, (uint64_t)p_cf))
    {
LABEL_33:
      uint64_t v20 = 1;
      goto LABEL_34;
    }
  }
  else
  {
    ABPolicyPopulateRecordReadOnlyError(p_cf, 1, @"RecordPropertyNotWritable");
  }
  CFTypeRef v24 = ABRecordCopyValue(record, a4);
  if (v24)
  {
    CFStringRef v25 = v24;
    uint64_t v20 = CFEqual(a5, v24) != 0;
    CFRelease(v25);
  }
  else
  {
    uint64_t v20 = a5 == 0;
  }
LABEL_34:
  if (v18 && v20 && kABPersonAlternateBirthdayProperty == a4) {
    uint64_t v20 = ABValidateAlternateBirthday(a5);
  }
LABEL_38:
  if (v20 || !cf)
  {
    if (cf) {
      int v22 = v20;
    }
    else {
      int v22 = 0;
    }
    if (v22 == 1) {
      CFRelease(cf);
    }
  }
  else
  {
    *a7 = cf;
  }
  return v20;
}

uint64_t ABPolicyShouldSetValueForRecordType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (ABLogAPIUsage())
  {
    BOOL v19 = _isMainThread();
    CFStringRef v12 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABPolicyShouldSetValueForRecordType(ABPolicyRef, ABRecordType, ABPropertyID, CFTypeRef, _Bool *, CFErrorRef *)", 414, v12, 0, v13, v14, v15, (uint64_t)v19);
    CFRelease(v12);
  }
  if (!a1) {
    return 0;
  }
  if ((*(uint64_t (**)(void))(a1 + 96))(*(void *)(a1 + 104))) {
    return 1;
  }
  ABRecordRef v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 104);
  return v17(a2, a3, a4, a5, v18, a6);
}

uint64_t ABPolicySetShouldIgnoreCapabilitiesRestrictions(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 88))(a2, *(void *)(result + 104));
  }
  return result;
}

void *createPermissivePolicyContext()
{
  return malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
}

double ABPolicyCreatePermissive()
{
  int v0 = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
  return ABPolicyCreateWithCallbacks((uint64_t)copyAllRecordTypes, (uint64_t)noMaximumValues, (uint64_t)anyLabels, (uint64_t)noPreferredLabels, (uint64_t)alwaysAddRecord, (uint64_t)alwaysRemoveRecord, (uint64_t)alwaysAddMember, (uint64_t)alwaysRemoveMember, (uint64_t)alwaysSetValue, (uint64_t)permissivePolicySetShouldIgnoreCapabilitiesRestrictions, (uint64_t)permissivePolicyIgnoreCapabilitiesRestrictions, (uint64_t)v0, 0, (uint64_t)freePermissivePolicyContext);
}

uint64_t copyAllRecordTypes()
{
  return 0;
}

uint64_t noMaximumValues(int a1, ABPropertyID property)
{
  if ((ABPersonGetTypeOfProperty(property) & 0x100) != 0) {
    return 0x7FFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t anyLabels()
{
  return 0;
}

uint64_t noPreferredLabels()
{
  return 0;
}

uint64_t alwaysAddRecord()
{
  return 1;
}

uint64_t alwaysRemoveRecord()
{
  return 1;
}

uint64_t alwaysAddMember()
{
  return 1;
}

uint64_t alwaysRemoveMember()
{
  return 1;
}

uint64_t alwaysSetValue()
{
  return 1;
}

uint64_t permissivePolicySetShouldIgnoreCapabilitiesRestrictions(uint64_t result, unsigned char *a2)
{
  *a2 = result;
  return result;
}

uint64_t permissivePolicyIgnoreCapabilitiesRestrictions(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t freePermissivePolicyContext(void *a1)
{
  if (a1) {
    free(a1);
  }
  return 1;
}

void *createReadOnlyPolicyContext()
{
  return malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
}

double ABPolicyCreateReadOnly()
{
  int v0 = malloc_type_calloc(1uLL, 1uLL, 0x100004077774924uLL);
  return ABPolicyCreateWithCallbacks((uint64_t)copyAllRecordTypes, (uint64_t)noMaximumValues, (uint64_t)anyLabels, (uint64_t)noPreferredLabels, (uint64_t)neverAddRecord, (uint64_t)neverRemoveRecord, (uint64_t)neverAddMember, (uint64_t)neverRemoveMember, (uint64_t)neverSetValue, (uint64_t)readOnlyPolicySetIgnoreCapabilitiesRestrictions, (uint64_t)readOnlyPolicyGetIgnoreCapabilitiesRestrictions, (uint64_t)v0, 1, (uint64_t)freeReadOnlyPolicyContext);
}

uint64_t neverAddRecord(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  return 0;
}

uint64_t neverRemoveRecord(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  return 0;
}

uint64_t neverAddMember()
{
  return 0;
}

uint64_t neverRemoveMember()
{
  return 0;
}

uint64_t neverSetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  return 0;
}

uint64_t readOnlyPolicySetIgnoreCapabilitiesRestrictions(uint64_t result, unsigned char *a2)
{
  *a2 = result;
  return result;
}

uint64_t readOnlyPolicyGetIgnoreCapabilitiesRestrictions(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t freeReadOnlyPolicyContext(void *a1)
{
  if (a1) {
    free(a1);
  }
  return 1;
}

double ABPolicyCreateWithCoder(void *a1, uint64_t a2)
{
  int v4 = [a1 decodeIntForKey:objc_msgSend(NSString, "stringWithFormat:", @"%@::%@", a2, @"context-type"];
  if (v4 == 1)
  {
    return ABPolicyCreateReadOnly();
  }
  else if (v4)
  {
    CFDataRef v6 = (const __CFData *)[a1 decodeObjectOfClass:objc_opt_class(), objc_msgSend(NSString, "stringWithFormat:", @"%@::%@", a2, @"context-data" forKey];
    CFPropertyListRef v7 = CFPropertyListCreateWithData(0, v6, 0, 0, 0);
    if (!v7) {
      ABPolicyCreateWithCoder_cold_1();
    }
    return ABPolicyCreateWithDictionary((uint64_t)v7);
  }
  else
  {
    return ABPolicyCreatePermissive();
  }
}

uint64_t ABPolicyPrefixedSecureCodingKey(uint64_t a1, uint64_t a2)
{
  return [NSString stringWithFormat:@"%@::%@", a1, a2];
}

void ABPolicyEncodeWithCoder(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 112);
  [a2 encodeInt:v6, objc_msgSend(NSString, "stringWithFormat:", @"%@::%@", a3, @"context-type" forKey];
  if (v6 == 2)
  {
    CFDataRef Data = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 104), kCFPropertyListBinaryFormat_v1_0, 0, 0);
    [a2 encodeObject:Data, objc_msgSend(NSString, "stringWithFormat:", @"%@::%@", a3, @"context-data" forKey];
    CFRelease(Data);
  }
}

uint64_t ABPolicyGetContextType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

BOOL ABPolicyIsEqualToPolicy(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 112);
  if (v2 != *(_DWORD *)(a2 + 112)) {
    return 0;
  }
  if (v2 == 2) {
    return CFEqual(*(CFTypeRef *)(a1 + 104), *(CFTypeRef *)(a2 + 104)) != 0;
  }
  return 1;
}

uint64_t ABPolicyRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  kABPolicyTypeint ID = result;
  return result;
}

uint64_t ABPolicyDestroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 120);
  if (v1) {
    return v1(*(void *)(result + 104));
  }
  return result;
}

void *ABPersonGetUserActivityUserInfo(const void *a1, int a2)
{
  return ABPersonGetUserActivityUserInfoWithInternalUUID(a1, a2, 1);
}

void *ABPersonGetUserActivityUserInfoWithInternalUUID(const void *a1, int a2, int a3)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  int v30 = a2;
  if (a2)
  {
    obuint64_t j = ABPersonCopyArrayOfAllLinkedPeople(a1);
    CFTypeRef v7 = ABPersonCopyPreferredLinkedPersonForName(a1);
  }
  else
  {
    v38[0] = a1;
    obuint64_t j = (CFArrayRef)(id)[MEMORY[0x1E4F1C978] arrayWithObjects:v38 count:1];
    CFTypeRef v7 = CFRetain(a1);
  }
  uint64_t v8 = v7;
  if (a3)
  {
    ABRecordRef v9 = (void *)ABRecordCopyValue(v7, kABPersonInternalUUIDProperty);
    if ([v9 length]) {
      [v6 setObject:v9 forKeyedSubscript:kABUserActivityUserInfoInternalUUIDKey];
    }
  }
  int IntValue = ABRecordGetIntValue((uint64_t)v8, kABPersonKindProperty);
  CFArrayRef v28 = v6;
  if (IntValue == 1)
  {
    uint64_t v10 = (void *)ABRecordCopyValue(v8, kABPersonOrganizationProperty);
    if (![v10 length]) {
      goto LABEL_16;
    }
    uint64_t v11 = kABUserActivityUserInfoOrganizationNameKey;
    goto LABEL_15;
  }
  CFStringRef v12 = (void *)ABRecordCopyValue(v8, kABPersonFirstNameProperty);
  if ([v12 length]) {
    [v6 setObject:v12 forKeyedSubscript:kABUserActivityUserInfoFirstNameKey];
  }

  uint64_t v10 = (void *)ABRecordCopyValue(v8, kABPersonLastNameProperty);
  if ([v10 length])
  {
    uint64_t v11 = kABUserActivityUserInfoLastNameKey;
LABEL_15:
    [v6 setObject:v10 forKeyedSubscript:*v11];
  }
LABEL_16:

  uint64_t v13 = (void *)[MEMORY[0x1E4F1CA48] array];
  CFStringRef v26 = (void *)[MEMORY[0x1E4F1CA48] array];
  id v36 = v26;
  uint64_t v27 = (void *)[MEMORY[0x1E4F1CA48] array];
  id v35 = v27;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v14 = [(__CFArray *)obj countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v32;
    ABPropertyID v17 = kABPersonExternalUUIDProperty;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v32 != v16) {
          objc_enumerationMutation(obj);
        }
        BOOL v19 = *(const void **)(*((void *)&v31 + 1) + 8 * i);
        uint64_t v20 = (void *)ABRecordCopyValue(v19, v17);
        if ([v20 length])
        {
          if (v30 && v19 == v8) {
            [v13 insertObject:v20 atIndex:0];
          }
          else {
            [v13 addObject:v20];
          }
        }

        _addUniqueValuesFromPersonMultiValuePropertyToArray(v19, kABPersonPhoneProperty, &v36);
        _addUniqueValuesFromPersonMultiValuePropertyToArray(v19, kABPersonEmailProperty, &v35);
      }
      uint64_t v15 = [(__CFArray *)obj countByEnumeratingWithState:&v31 objects:v37 count:16];
    }
    while (v15);
  }
  uint64_t v21 = v28;
  if ([v13 count]) {
    [v28 setObject:v13 forKeyedSubscript:kABUserActivityUserInfoCardDAVUUIDsKey];
  }
  if ([v26 count]) {
    [v28 setObject:v26 forKeyedSubscript:kABUserActivityUserInfoPhoneNumbersKey];
  }
  if ([v27 count]) {
    [v28 setObject:v27 forKeyedSubscript:kABUserActivityUserInfoEmailAddressesKey];
  }

  CFRelease(v8);
  if (![v28 count]) {
    return 0;
  }
  [v28 setObject:&unk_1EF0503E8 forKeyedSubscript:kABUserActivityUserInfoVersionKey];
  if (v30)
  {
    uint64_t v22 = [NSNumber numberWithBool:1];
    [v28 setObject:v22 forKeyedSubscript:kABUserActivityUserInfoUnifiedKey];
  }
  if (IntValue == 1)
  {
    uint64_t v23 = [NSNumber numberWithBool:1];
    [v28 setObject:v23 forKeyedSubscript:kABUserActivityUserInfoIsOrganizationKey];
  }
  return v21;
}

CFTypeRef ABAddressBookFindPersonMatchingUserActivityUserInfo(__CFArray *a1, void *a2)
{
  return _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(a1, a2, 1);
}

CFTypeRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(__CFArray *a1, void *a2, int a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  int v4 = a2;
  uint64_t v6 = (void *)[a2 objectForKeyedSubscript:kABUserActivityUserInfoVersionKey];
  int v7 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoUnifiedKey), "BOOLValue");
  if (![v6 isEqual:&unk_1EF0503E8])
  {
LABEL_95:
    if (ABDiagnosticsEnabled()) {
      _ABLog2(6, (uint64_t)"ABRecordRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(ABAddressBookRef, CFDictionaryRef, BOOL)", 465, 0, @"Activity continuity - Failed to find person", v75, v76, v77, RecordID);
    }
    return 0;
  }
  uint64_t v8 = [v4 objectForKeyedSubscript:kABUserActivityUserInfoInternalUUIDKey];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = ABAddressBookCopyPersonMatchingInternalUUID((uint64_t)a1, v8);
    if (v10)
    {
      CFTypeRef v11 = v10;
      CFAutorelease(v10);
      if (ABDiagnosticsEnabled())
      {
        ABRecordGetRecordID(v11);
        _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByInternalUUID(ABAddressBookRef, NSDictionary *)", 421, 0, @"Activity continuity - Found person with internal UUint ID = %@, recordint ID = %i", v12, v13, v14, v9);
      }
      goto LABEL_87;
    }
  }
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  obuint64_t j = (id)[v4 objectForKeyedSubscript:kABUserActivityUserInfoCardDAVUUIDsKey];
  uint64_t v15 = [obj countByEnumeratingWithState:&v105 objects:v109 count:16];
  uint64_t v80 = v4;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v106;
    while (2)
    {
      uint64_t v18 = 0;
      uint64_t v81 = v16;
      do
      {
        if (*(void *)v106 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = *(void *)(*((void *)&v105 + 1) + 8 * v18);
        CFArrayRef v20 = ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(a1);
        if (v20)
        {
          CFArrayRef v21 = v20;
          CFIndex Count = CFArrayGetCount(v20);
          if (Count >= 1)
          {
            CFIndex v23 = Count;
            CFIndex v24 = 0;
            while (1)
            {
              ABRecordID ValueAtIndex = CFArrayGetValueAtIndex(v21, v24);
              PersonWithuint64_t RecordID = ABAddressBookGetPersonWithRecordID(a1, ValueAtIndex);
              if (PersonWithRecordID) {
                break;
              }
              if (v23 == ++v24) {
                goto LABEL_17;
              }
            }
            CFTypeRef v11 = PersonWithRecordID;
            CFRelease(v21);
            if (ABDiagnosticsEnabled())
            {
              ABRecordGetRecordID(v11);
              _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByExternalUUID(ABAddressBookRef, NSDictionary *)", 400, 0, @"Activity continuity - Found person with external UUint ID = %@, recordint ID = %i", v30, v31, v32, v19);
            }
            goto LABEL_87;
          }
LABEL_17:
          CFRelease(v21);
          uint64_t v16 = v81;
        }
        ++v18;
      }
      while (v18 != v16);
      uint64_t v16 = [obj countByEnumeratingWithState:&v105 objects:v109 count:16];
      int v4 = v80;
      if (v16) {
        continue;
      }
      break;
    }
  }
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", kABUserActivityUserInfoIsOrganizationKey), "BOOLValue"))
  {
    uint64_t v27 = (void *)[v4 objectForKeyedSubscript:kABUserActivityUserInfoOrganizationNameKey[0]];
    CFArrayRef v28 = 0;
    CFIndex v29 = 0;
  }
  else
  {
    CFIndex v29 = (void *)[v4 objectForKeyedSubscript:kABUserActivityUserInfoFirstNameKey];
    CFArrayRef v28 = (void *)[v4 objectForKeyedSubscript:kABUserActivityUserInfoLastNameKey[0]];
    uint64_t v27 = 0;
  }
  long long v33 = (void *)[v4 objectForKeyedSubscript:kABUserActivityUserInfoEmailAddressesKey];
  long long v34 = (void *)[v4 objectForKeyedSubscript:kABUserActivityUserInfoPhoneNumbersKey];
  if ([v29 length]) {
    uint64_t v35 = (uint64_t)v29;
  }
  else {
    uint64_t v35 = 0;
  }
  if ([v28 length]) {
    uint64_t v36 = (uint64_t)v28;
  }
  else {
    uint64_t v36 = 0;
  }
  CFArrayRef v98 = 0;
  int v99 = 0;
  if ([v27 length]) {
    uint64_t v37 = (uint64_t)v27;
  }
  else {
    uint64_t v37 = 0;
  }
  BOOL v96 = 0;
  CFDataRef v97 = 0;
  BOOL v95 = 0;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 3221225472;
  v94[2] = ___findPersonByWeightedSearch_block_invoke;
  v94[3] = &__block_descriptor_40_e42_v28__0__ABSearchOperation_8__NSArray_16B24l;
  v94[4] = Current;
  uint64_t v39 = objc_opt_new();
  [v39 setMaxConcurrentOperationCount:1];
  id obja = (id)v35;
  _addOperation_0(v35, kABPersonFirstNameProperty, (uint64_t)&v99, (uint64_t)v94, (uint64_t)a1, v39, a3);
  uint64_t v82 = v36;
  _addOperation_0(v36, kABPersonLastNameProperty, (uint64_t)&v98, (uint64_t)v94, (uint64_t)a1, v39, a3);
  _addOperation_0(v37, kABPersonOrganizationProperty, (uint64_t)&v97, (uint64_t)v94, (uint64_t)a1, v39, a3);
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  uint64_t v40 = [v33 countByEnumeratingWithState:&v90 objects:&v105 count:16];
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v42 = *(void *)v91;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v91 != v42) {
          objc_enumerationMutation(v33);
        }
        _addOperation_0(*(void *)(*((void *)&v90 + 1) + 8 * i), kABPersonEmailProperty, (uint64_t)&v96, (uint64_t)v94, (uint64_t)a1, v39, a3);
      }
      uint64_t v41 = [v33 countByEnumeratingWithState:&v90 objects:&v105 count:16];
    }
    while (v41);
  }
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  uint64_t v44 = [v34 countByEnumeratingWithState:&v86 objects:v104 count:16];
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = *(void *)v87;
    do
    {
      for (uint64_t j = 0; j != v45; ++j)
      {
        if (*(void *)v87 != v46) {
          objc_enumerationMutation(v34);
        }
        _addOperation_0(*(void *)(*((void *)&v86 + 1) + 8 * j), kABPersonPhoneProperty, (uint64_t)&v95, (uint64_t)v94, (uint64_t)a1, v39, a3);
      }
      uint64_t v45 = [v34 countByEnumeratingWithState:&v86 objects:v104 count:16];
    }
    while (v45);
  }
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  uint64_t v48 = (void *)[v39 operations];
  uint64_t v49 = [v48 countByEnumeratingWithState:&v100 objects:v109 count:16];
  if (v49)
  {
    uint64_t v50 = v49;
    while (2)
    {
      uint64_t v51 = *(void *)v101;
LABEL_51:
      uint64_t v52 = 0;
      while (1)
      {
        if (*(void *)v101 != v51) {
          objc_enumerationMutation(v48);
        }
        if (![*(id *)(*((void *)&v100 + 1) + 8 * v52) isFinished]) {
          break;
        }
        if (v50 == ++v52)
        {
          uint64_t v50 = [v48 countByEnumeratingWithState:&v100 objects:v109 count:16];
          if (v50) {
            goto LABEL_51;
          }
          goto LABEL_59;
        }
      }
      CFTypeRef v53 = objc_opt_new();
      CFRunLoopRunInMode(kABSearchOperationRunloopMode, 0.1, 1u);

      long long v100 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      uint64_t v48 = (void *)[v39 operations];
      uint64_t v50 = [v48 countByEnumeratingWithState:&v100 objects:v109 count:16];
      if (v50) {
        continue;
      }
      break;
    }
  }
LABEL_59:

  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  char v55 = objc_opt_new();
  unsigned int v85 = 0;
  if (obja && v82)
  {
    if (v99 && v98)
    {
      objc_msgSend(v99, "intersectSet:");

      CFArrayRef v98 = v99;
    }
    else
    {

      int v99 = 0;
      CFArrayRef v98 = 0;
    }
  }
  _countInstancesOfRecord_0(Mutable, v99, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v98, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v97, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v96, &v85, v55);
  _countInstancesOfRecord_0(Mutable, v95, &v85, v55);
  if ((unint64_t)[v55 count] < 2)
  {
    CFTypeRef v11 = (CFTypeRef)[v55 lastObject];
    if (v11) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v56 = (void *)[MEMORY[0x1E4F28E78] string];
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    uint64_t v57 = [v55 countByEnumeratingWithState:&v100 objects:v109 count:16];
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = *(void *)v101;
      do
      {
        for (uint64_t k = 0; k != v58; ++k)
        {
          if (*(void *)v101 != v59) {
            objc_enumerationMutation(v55);
          }
          uint64_t RecordID = ABRecordGetRecordID(*(ABRecordRef *)(*((void *)&v100 + 1) + 8 * k));
          [v56 appendFormat:@"%i "];
        }
        uint64_t v58 = [v55 countByEnumeratingWithState:&v100 objects:v109 count:16];
      }
      while (v58);
    }
    if (ABDiagnosticsEnabled())
    {
      uint64_t v61 = [v55 count];
      _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByWeightedSearch(ABAddressBookRef, NSDictionary *, BOOL)", 346, 0, @"Activity continuity - Found %lu person(s) by weighted search, recordIDs = %@", v62, v63, v64, v61);
    }
    if (objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", kABUserActivityUserInfoUnifiedKey), "BOOLValue"))
    {
      CFArrayRef v65 = ABPersonCopyArrayOfAllLinkedPeople((ABRecordRef)[v55 lastObject]);
      if (objc_msgSend(v55, "isSubsetOfSet:", objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", v65)))
      {
        CFTypeRef v11 = ABPersonCopyPreferredLinkedPersonForName((const void *)[v55 lastObject]);
        CFAutorelease(v11);
      }
      else
      {
        CFTypeRef v11 = 0;
      }

      if (v11)
      {
LABEL_83:
        if (ABDiagnosticsEnabled())
        {
          uint64_t v66 = ABRecordGetRecordID(v11);
          CFDictionaryGetValue(Mutable, v11);
          _ABLog2(6, (uint64_t)"ABRecordRef _findPersonByWeightedSearch(ABAddressBookRef, NSDictionary *, BOOL)", 364, 0, @"Activity continuity - Found person by weighted search, recordID = %i, matchCFIndex Count = %i", v67, v68, v69, v66);
        }
      }
    }
    else
    {
      CFTypeRef v11 = 0;
    }
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_87:
  if (v11) {
    int v70 = v7;
  }
  else {
    int v70 = 0;
  }
  if (v70 == 1)
  {
    CFTypeRef v11 = ABPersonCopyPreferredLinkedPersonForName(v11);
    if (ABDiagnosticsEnabled())
    {
      uint64_t v71 = ABRecordGetRecordID(v11);
      _ABLog2(6, (uint64_t)"ABRecordRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(ABAddressBookRef, CFDictionaryRef, BOOL)", 459, 0, @"Activity continuity - Using preferred linked person, recordint ID = %i", v72, v73, v74, v71);
    }
    CFAutorelease(v11);
  }
  if (!v11) {
    goto LABEL_95;
  }
  return v11;
}

void *ABPersonGetMatchingDictionary(const void *a1, int a2)
{
  return ABPersonGetUserActivityUserInfoWithInternalUUID(a1, a2, 0);
}

CFTypeRef ABAddressBookFindPersonMatchingMatchingDictionary(__CFArray *a1, void *a2)
{
  return _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(a1, a2, 0);
}

void _addUniqueValuesFromPersonMultiValuePropertyToArray(const void *a1, ABPropertyID a2, id *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = ABRecordCopyValue(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    CFArrayRef v6 = ABMultiValueCopyArrayOfAllValues(v4);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v7 = [(__CFArray *)v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          CFTypeRef v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          if ([v11 length])
          {
            if (([*a3 containsObject:v11] & 1) == 0) {
              [*a3 addObject:v11];
            }
          }
        }
        uint64_t v8 = [(__CFArray *)v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }

    CFRelease(v5);
  }
}

void ___findPersonByWeightedSearch_block_invoke(uint64_t a1, void *a2, void *a3, char a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (id *)[a2 context];
  if ([a3 count])
  {
    if (!*v7) {
      *uint64_t v7 = (id)objc_opt_new();
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v8 = [a3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(a3);
          }
          [*v7 addObject:*(void *)(*((void *)&v12 + 1) + 8 * v11++)];
        }
        while (v9 != v11);
        uint64_t v9 = [a3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }
  }
  if ((a4 & 1) == 0) {
    CFRunLoopStop(*(CFRunLoopRef *)(a1 + 32));
  }
}

void _addOperation_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    long long v14 = objc_opt_new();
    if (kABPersonPhoneProperty == a2)
    {
      uint64_t active = (void *)CPPhoneNumberCopyActiveCountryCode();
      id v16 = +[ABSearchOperation personPredicateWithPhoneLike:a1 countryHint:active addressBook:a5];

      if (!a7)
      {
LABEL_4:
        uint64_t v17 = v14;
        uint64_t v18 = (uint64_t)v16;
LABEL_7:
        [v17 setPredicate:v18];
        [v14 setContext:a3];
        [v14 setProgressBlock:a4];
        [v14 setAddressBook:a5];
        [a6 addOperation:v14];

        return;
      }
    }
    else
    {
      id v16 = +[ABPredicate personPredicateWithValue:a1 comparison:0 forProperty:a2];
      if (!a7) {
        goto LABEL_4;
      }
    }
    v19[0] = v16;
    v19[1] = +[ABPredicate personPredicateWithValue:0 comparison:0 forProperty:kABPersonExternalUUIDProperty];
    uint64_t v18 = objc_msgSend(MEMORY[0x1E4F28BA0], "andPredicateWithSubpredicates:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v19, 2));
    uint64_t v17 = v14;
    goto LABEL_7;
  }
}

uint64_t _countInstancesOfRecord_0(const __CFDictionary *a1, void *a2, unsigned int *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)v16;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(a2);
        }
        long long v12 = *(const void **)(*((void *)&v15 + 1) + 8 * v11);
        unsigned int Value = CFDictionaryGetValue(a1, v12);
        unsigned int v14 = [a2 countForObject:v12] + Value;
        if (*a3 != v14)
        {
          if (*a3 >= v14) {
            goto LABEL_10;
          }
          *a3 = v14;
          [a4 removeAllObjects];
        }
        [a4 addObject:v12];
LABEL_10:
        CFDictionarySetValue(a1, v12, (const void *)v14);
        ++v11;
      }
      while (v9 != v11);
      uint64_t result = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      uint64_t v9 = result;
    }
    while (result);
  }
  return result;
}

uint64_t correctUnsupportedLabels(int a1, ABPropertyID property, const void *a3, unsigned char *a4, const __CFDictionary *a5)
{
  __int16 TypeOfProperty = ABPersonGetTypeOfProperty(property);
  uint64_t result = 1;
  if (a3 && (TypeOfProperty & 0x100) != 0)
  {
    CFMutableDictionaryRef v12 = copyLabels(a1, property, a5);
    if (!v12)
    {
      char v16 = 1;
      return v16 & 1;
    }
    CFDictionaryRef v13 = v12;
    CFIndex Count = ABMultiValueGetCount(a3);
    CFIndex v14 = CFDictionaryGetCount(v13);
    int v39 = a1;
    int v40 = property;
    if (v14) {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
    }
    else {
      CFDictionaryRef Mutable = 0;
    }
    if (Count < 1)
    {
      char v16 = 1;
      if (!Mutable) {
        goto LABEL_58;
      }
    }
    else
    {
      CFIndex v17 = 0;
      CFStringRef v18 = (CFStringRef)*MEMORY[0x1E4F1D260];
      char v16 = 1;
      uint64_t v42 = (uint64_t)a3;
      CFStringRef v43 = (const __CFString *)*MEMORY[0x1E4F1D260];
      do
      {
        CFStringRef v19 = ABMultiValueCopyLabelAtIndex(a3, v17);
        if (v19) {
          CFStringRef v20 = v19;
        }
        else {
          CFStringRef v20 = v18;
        }
        if (v20)
        {
          if (v14)
          {
            signed int Value = CFDictionaryGetValue(Mutable, v20);
            signed int v22 = CFDictionaryGetValue(v13, v20);
            CFDictionarySetValue(Mutable, v20, (const void *)(Value + 1));
            BOOL v36 = Value < v22;
            a3 = (const void *)v42;
            CFStringRef v18 = v43;
            char v23 = v36;
            v16 &= v23;
          }
          else if (v20 != v18)
          {
            ABCMultiValueReplaceLabel((uint64_t)a3, v18, v17);
            if (a4) {
              *a4 = 1;
            }
          }
          CFRelease(v20);
        }
        ++v17;
      }
      while (Count != v17);
      if ((v16 & 1) == 0)
      {
        uint64_t v37 = a4;
        CFDictionaryRef theDict = a5;
        CFDictionaryRef v24 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
        CFArrayRef PreferredLabels = 0;
        CFIndex v26 = 0;
        char v41 = 1;
        while (1)
        {
          CFStringRef v27 = ABMultiValueCopyLabelAtIndex(a3, v26);
          if (v27) {
            CFStringRef v18 = v27;
          }
          if (!v18) {
            goto LABEL_52;
          }
          int v28 = CFDictionaryGetValue(v24, v18);
          if (v28 >= (int)CFDictionaryGetValue(v13, v18))
          {
            if (!PreferredLabels)
            {
              CFArrayRef PreferredLabels = (const __CFArray *)getPreferredLabels(v39, v40, theDict);
              if (!PreferredLabels) {
                goto LABEL_50;
              }
            }
            CFIndex v30 = CFArrayGetCount(PreferredLabels);
            if (v30 < 1) {
              goto LABEL_50;
            }
            CFIndex v31 = v30;
            uint64_t v32 = 1;
            do
            {
              ABRecordID ValueAtIndex = CFArrayGetValueAtIndex(PreferredLabels, v32 - 1);
              int v33 = CFDictionaryGetValue(v24, ValueAtIndex);
              if (v33 <= (int)CFDictionaryGetValue(Mutable, ValueAtIndex)) {
                CFDictionaryRef v34 = Mutable;
              }
              else {
                CFDictionaryRef v34 = v24;
              }
              int v35 = CFDictionaryGetValue(v34, ValueAtIndex);
              if (v35 >= (int)CFDictionaryGetValue(v13, ValueAtIndex)) {
                ABRecordID ValueAtIndex = 0;
              }
              if (ValueAtIndex) {
                BOOL v36 = 0;
              }
              else {
                BOOL v36 = v32 < v31;
              }
              ++v32;
            }
            while (v36);
            if (!ValueAtIndex)
            {
LABEL_50:
              char v41 = 0;
              goto LABEL_51;
            }
            ABCMultiValueReplaceLabel(v42, ValueAtIndex, v26);
            if (v37) {
              *uint64_t v37 = 1;
            }
            int v28 = CFDictionaryGetValue(v24, ValueAtIndex);
          }
          else
          {
            ABRecordID ValueAtIndex = v18;
          }
          CFDictionarySetValue(v24, ValueAtIndex, (const void *)(v28 + 1));
LABEL_51:
          a3 = (const void *)v42;
          CFRelease(v18);
LABEL_52:
          CFStringRef v18 = v43;
          if (++v26 == Count)
          {
            if (v24) {
              CFRelease(v24);
            }
            char v16 = v41;
            break;
          }
        }
      }
      if (!Mutable) {
        goto LABEL_58;
      }
    }
    CFRelease(Mutable);
LABEL_58:
    CFRelease(v13);
    return v16 & 1;
  }
  return result;
}

CFMutableDictionaryRef copyLabels(int a1, int a2, CFDictionaryRef theDict)
{
  if (a1) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ABPerson");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v7 = Value;
  uint64_t v8 = ABPersonNameForProperty(a2);
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(v7, @"UnsupportedAttributes");
  if (!v9 || (CFArrayRef v10 = v9, v23.length = CFArrayGetCount(v9), v23.location = 0, !CFArrayContainsValue(v10, v23, v8)))
  {
    CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"MultiValueRestrictions");
    if (v12)
    {
      CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(v12, v8);
      if (v13)
      {
        CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v13, @"SupportedLabels");
        if (v14)
        {
          CFDictionaryRef v15 = v14;
          uint64_t Count = CFDictionaryGetCount(v14);
          CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D530], 0);
          if (Count >= 1)
          {
            unsigned int valuePtr = 0;
            CFIndex v17 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
            CFStringRef v18 = (const void **)malloc_type_malloc(8 * Count, 0x6004044C4A2DFuLL);
            CFDictionaryGetKeysAndValues(v15, v17, v18);
            for (uint64_t i = 0; i != Count; ++i)
            {
              CFNumberGetValue((CFNumberRef)v18[i], kCFNumberIntType, &valuePtr);
              uint64_t v20 = valuePtr;
              if ((valuePtr & 0x80000000) != 0)
              {
                unsigned int valuePtr = 0x7FFFFFFF;
                uint64_t v20 = 0x7FFFFFFFLL;
              }
              CFDictionarySetValue(Mutable, v17[i], (const void *)v20);
            }
            free(v18);
            free(v17);
          }
          return Mutable;
        }
      }
    }
    return 0;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  return CFDictionaryCreateMutable(v11, 0, 0, 0);
}

const void *getPreferredLabels(int a1, int a2, CFDictionaryRef theDict)
{
  if (a1) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ABPerson");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v6 = Value;
  CFDictionaryRef v7 = ABPersonNameForProperty(a2);
  CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(v6, @"MultiValueRestrictions");
  if (!v8) {
    return 0;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(v8, v7);
  if (!v9) {
    return 0;
  }
  return CFDictionaryGetValue(v9, @"PreferredLabels");
}

uint64_t ABPolicyCreateFromDictionaryAtPath(CFStringRef filePath)
{
  if (!filePath) {
    return 0;
  }
  CFURLRef v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], filePath, kCFURLPOSIXPathStyle, 0);
  if (!v1) {
    return 0;
  }
  CFURLRef v2 = v1;
  uint64_t v3 = ABPolicyCreateWithDictionaryAtURL(v1);
  CFRelease(v2);
  return v3;
}

uint64_t ABPolicyCreateWithDictionaryAtURL(CFURLRef fileURL)
{
  if (!fileURL) {
    return 0;
  }
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v2 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], fileURL);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (CFReadStreamOpen(v2))
  {
    CFPropertyListRef v4 = CFPropertyListCreateWithStream(v1, v3, 0, 1uLL, 0, 0);
    if (v4)
    {
      ABPolicyCreateWithCallbacks((uint64_t)copyRecordTypes, (uint64_t)getMaximumValues, (uint64_t)copyLabels, (uint64_t)copyPreferredLabels, (uint64_t)shouldAddRecord, (uint64_t)shouldRemoveRecord, (uint64_t)shouldAddMember, (uint64_t)shouldRemoveMember, (uint64_t)shouldSetValue, (uint64_t)setShouldIgnoreCapabilitiesRestrictions, (uint64_t)shouldIgnoreCapabilitiesRestrictions, (uint64_t)v4, 2, (uint64_t)freeContext);
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
    CFReadStreamClose(v3);
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

double ABPolicyCreateWithDictionary(uint64_t a1)
{
  return ABPolicyCreateWithCallbacks((uint64_t)copyRecordTypes, (uint64_t)getMaximumValues, (uint64_t)copyLabels, (uint64_t)copyPreferredLabels, (uint64_t)shouldAddRecord, (uint64_t)shouldRemoveRecord, (uint64_t)shouldAddMember, (uint64_t)shouldRemoveMember, (uint64_t)shouldSetValue, (uint64_t)setShouldIgnoreCapabilitiesRestrictions, (uint64_t)shouldIgnoreCapabilitiesRestrictions, a1, 2, (uint64_t)freeContext);
}

__CFArray *copyRecordTypes(const __CFDictionary *a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"ABGroup");
  BOOL v3 = !Value
    || (CFBooleanRef v2 = (const __CFBoolean *)CFDictionaryGetValue(Value, @"Multigroups")) == 0
    || CFBooleanGetValue(v2) != 0;
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, 0);
  CFArrayAppendValue(Mutable, 0);
  if (v3) {
    CFArrayAppendValue(Mutable, (const void *)1);
  }
  return Mutable;
}

uint64_t getMaximumValues(int a1, int a2, CFDictionaryRef theDict)
{
  uint64_t result = 0x7FFFFFFFLL;
  unsigned int valuePtr = 0x7FFFFFFF;
  if (!a1)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ABPerson");
    if (!Value) {
      return 0x7FFFFFFFLL;
    }
    CFDictionaryRef v7 = Value;
    CFDictionaryRef v8 = ABPersonNameForProperty(a2);
    CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(v7, @"UnsupportedAttributes");
    if (v9)
    {
      CFArrayRef v10 = v9;
      v15.CFIndex length = CFArrayGetCount(v9);
      v15.location = 0;
      if (CFArrayContainsValue(v10, v15, v8)) {
        return 0;
      }
    }
    if ((ABPersonGetTypeOfProperty(a2) & 0x100) == 0) {
      return 1;
    }
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"MultiValueRestrictions");
    if (v11
      && (CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, v8)) != 0
      && (CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v12, @"MaximumNumber")) != 0)
    {
      CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 0x7FFFFFFFLL;
    }
  }
  return result;
}

CFArrayRef copyPreferredLabels(int a1, int a2, const __CFDictionary *a3)
{
  CFArrayRef result = (CFArrayRef)getPreferredLabels(a1, a2, a3);
  if (result)
  {
    CFArrayRef v4 = result;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CFArrayCreateCopy(v5, v4);
  }
  return result;
}

uint64_t shouldAddRecord(uint64_t a1, const void *a2, const __CFDictionary *a3, const void **a4)
{
  if (ABPolicyRecordIsWriteable(a2, 0))
  {
    CFDictionaryRef v7 = copyRecordTypes(a3);
    ABRecordType RecordType = ABRecordGetRecordType(a2);
    v11.CFIndex length = CFArrayGetCount(v7);
    v11.location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v7, v11, (const void *)RecordType);
    CFRelease(v7);
    if (FirstIndexOfValue != -1) {
      return 1;
    }
  }
  ABPolicyPopulateRecordReadOnlyError(a4, 0, @"SourceNotWritable");
  return 0;
}

uint64_t shouldRemoveRecord(uint64_t a1, const void *a2, uint64_t a3, const void **a4)
{
  uint64_t IsWriteable = ABPolicyRecordIsWriteable(a2, 0);
  if ((IsWriteable & 1) == 0) {
    ABPolicyPopulateRecordReadOnlyError(a4, 0, @"SourceNotWritable");
  }
  return IsWriteable;
}

uint64_t shouldAddMember(uint64_t a1, const void *a2)
{
  return ABPolicyRecordIsWriteable(a2, 0);
}

uint64_t shouldRemoveMember(uint64_t a1, const void *a2)
{
  return ABPolicyRecordIsWriteable(a2, 0);
}

uint64_t shouldSetValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, const __CFDictionary *a5)
{
  if (a4) {
    *a4 = 0;
  }
  unint64_t v10 = 0;
  do
  {
    uint64_t result = (*(&off_1EF03DE18 + v10))(a1, a2, a3, (int)a4, a5);
    if (result) {
      BOOL v12 = v10 >= 3;
    }
    else {
      BOOL v12 = 1;
    }
    ++v10;
  }
  while (!v12);
  return result;
}

void setShouldIgnoreCapabilitiesRestrictions(int a1, CFMutableDictionaryRef theDict)
{
  if (theDict)
  {
    if (a1) {
      CFDictionarySetValue(theDict, @"OverrideReadonly", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    else {
      CFDictionaryRemoveValue(theDict, @"OverrideReadonly");
    }
  }
}

CFDictionaryRef shouldIgnoreCapabilitiesRestrictions(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)(CFDictionaryGetValue(result, @"OverrideReadonly") == (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  return result;
}

uint64_t freeContext(const void *a1)
{
  return 1;
}

BOOL propertyIsSupported(int a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  if (a1) {
    uint64_t v6 = @"ABGroup";
  }
  else {
    uint64_t v6 = @"ABPerson";
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v6);
  if (!Value) {
    return 1;
  }
  CFDictionaryRef v8 = Value;
  CFArrayRef v9 = ABPersonNameForProperty(a2);
  CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue(v8, @"UnsupportedAttributes");
  if (!v10) {
    return 1;
  }
  CFArrayRef v11 = v10;
  v13.CFIndex length = CFArrayGetCount(v10);
  v13.location = 0;
  return CFArrayContainsValue(v11, v13, v9) == 0;
}

BOOL notTooManyValuesForSet(int a1, ABPropertyID property, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  BOOL result = 1;
  if (!a1 && a3)
  {
    if ((ABPersonGetTypeOfProperty(property) & 0x100) != 0
      && (int MaximumValues = getMaximumValues(0, property, a5), MaximumValues != 0x7FFFFFFF))
    {
      return ABMultiValueGetCount(a3) <= MaximumValues;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t correctUnsupportedValueKeys(int a1, ABPropertyID property, const void *a3, unsigned char *a4, const __CFDictionary *a5)
{
  ABPropertyType TypeOfProperty = ABPersonGetTypeOfProperty(property);
  if (!a1)
  {
    if (a3)
    {
      if (TypeOfProperty == 261)
      {
        CFIndex Count = ABMultiValueGetCount(a3);
        if (Count >= 1)
        {
          CFIndex v12 = Count;
          CFIndex v13 = 0;
          uint64_t v30 = (uint64_t)a3;
          CFIndex v31 = a4;
          do
          {
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"ABPerson");
            if (Value)
            {
              CFDictionaryRef v15 = Value;
              char v16 = ABPersonNameForProperty(property);
              CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"MultiValueRestrictions");
              if (v17)
              {
                CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(v17, v16);
                if (v18)
                {
                  CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(v18, @"UnsupportedValueKeys");
                  if (v19)
                  {
                    CFArrayRef v20 = v19;
                    CFDictionaryRef v21 = (const __CFDictionary *)ABMultiValueCopyValueAtIndex(a3, v13);
                    CFIndex v22 = CFArrayGetCount(v20);
                    if (v22 >= 1)
                    {
                      CFIndex v23 = v22;
                      CFIndex v24 = 0;
                      CFDictionaryRef MutableCopy = 0;
                      do
                      {
                        ABRecordID ValueAtIndex = CFArrayGetValueAtIndex(v20, v24);
                        if (CFDictionaryContainsKey(v21, ValueAtIndex))
                        {
                          if (!MutableCopy)
                          {
                            CFAllocatorRef Default = CFAllocatorGetDefault();
                            CFIndex v28 = CFDictionaryGetCount(v21);
                            CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(Default, v28, v21);
                          }
                          CFDictionaryRemoveValue(MutableCopy, ValueAtIndex);
                        }
                        ++v24;
                      }
                      while (v23 != v24);
                      a3 = (const void *)v30;
                      if (MutableCopy)
                      {
                        ABCMultiValueReplaceValue(v30, MutableCopy, v13);
                        CFRelease(MutableCopy);
                        if (v31) {
                          *CFIndex v31 = 1;
                        }
                      }
                    }
                    CFRelease(v21);
                  }
                }
              }
            }
            ++v13;
          }
          while (v13 != v12);
        }
      }
    }
  }
  return 1;
}

__CFDictionary *ABCreateAddressDictionaryWithString(const __CFString *a1)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v25 = _isMainThread();
    CFBooleanRef v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDictionaryRef ABCreateAddressDictionaryWithString(CFStringRef)", 136, v2, 0, v3, v4, v5, (uint64_t)v25);
    CFRelease(v2);
  }
  pthread_once(&__copyDataDetectorsResultsForString_sLoadDataDetectorsOnce, _loadDataDetectorsCoreFramework);
  CFDictionaryRef Mutable = 0;
  if (!a1 || !sSharedDataDetectorsScanner) {
    return Mutable;
  }
  pthread_mutex_lock(&__copyDataDetectorsResultsForString_sDataDetectorsLock);
  if (!_lazyDDScannerScanString(sSharedDataDetectorsScanner, a1))
  {
    pthread_mutex_unlock(&__copyDataDetectorsResultsForString_sDataDetectorsLock);
    return 0;
  }
  CFDictionaryRef v7 = (const void *)_lazyDDScannerCopyResults(sSharedDataDetectorsScanner);
  pthread_mutex_unlock(&__copyDataDetectorsResultsForString_sDataDetectorsLock);
  if (!v7) {
    return 0;
  }
  if (CFArrayGetCount((CFArrayRef)v7) != 1
    || (ABRecordID ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, 0),
        uint64_t Range = _lazyDDResultGetRange(),
        uint64_t v11 = v10,
        CFStringRef Type = (const __CFString *)_lazyDDResultGetType(ValueAtIndex),
        CFStringCompare(Type, @"FullAddress", 0) | Range)
    || v11 != CFStringGetLength(a1))
  {
    CFRelease(v7);
    return 0;
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef SubResults = (const __CFArray *)_lazyDDResultGetSubResults(ValueAtIndex);
  CFIndex Count = CFArrayGetCount(SubResults);
  if (Count < 1) {
    goto LABEL_31;
  }
  CFIndex v15 = Count;
  CFIndex v16 = 0;
  int v26 = 0;
  do
  {
    CFDictionaryRef v17 = CFArrayGetValueAtIndex(SubResults, v16);
    CFStringRef v18 = (const __CFString *)_lazyDDResultGetType(v17);
    if (CFStringCompare(v18, @"Street", 0))
    {
      if (CFStringCompare(v18, @"SubLocality", 0))
      {
        if (CFStringCompare(v18, @"City", 0))
        {
          if (CFStringCompare(v18, @"ZipCode", 0))
          {
            if (CFStringCompare(v18, @"SubAdministrativeArea", 0))
            {
              if (CFStringCompare(v18, @"State", 0))
              {
                if (CFStringCompare(v18, @"Country", 0)) {
                  goto LABEL_28;
                }
                int v26 = 1;
                CFArrayRef v19 = (__CFString **)&kABPersonAddressCountryKey;
              }
              else
              {
                CFArrayRef v19 = (__CFString **)&kABPersonAddressStateKey;
              }
            }
            else
            {
              CFArrayRef v19 = kABPersonAddressSubAdministrativeAreaKey;
            }
          }
          else
          {
            CFArrayRef v19 = (__CFString **)&kABPersonAddressZIPKey;
          }
        }
        else
        {
          CFArrayRef v19 = (__CFString **)&kABPersonAddressCityKey;
        }
      }
      else
      {
        CFArrayRef v19 = kABPersonAddressSubLocalityKey;
      }
    }
    else
    {
      CFArrayRef v19 = (__CFString **)&kABPersonAddressStreetKey;
    }
    CFArrayRef v20 = *v19;
    if (*v19)
    {
      MatchedString = (const void *)_lazyDDResultGetMatchedString(v17);
      CFDictionarySetValue(Mutable, v20, MatchedString);
    }
LABEL_28:
    ++v16;
  }
  while (v15 != v16);
  if (v26
    && (CFDictionaryRef Value = (void *)CFDictionaryGetValue(Mutable, @"Country"),
        (CFIndex v23 = (const void *)ABAddressCopyCountryCodeForCountryName(Value)) != 0))
  {
LABEL_33:
    CFDictionarySetValue(Mutable, @"CountryCode", v23);
    CFRelease(v23);
  }
  else
  {
LABEL_31:
    CFIndex v23 = (const void *)CPPhoneNumberCopyNetworkCountryCode();
    if (v23) {
      goto LABEL_33;
    }
    CFIndex v23 = (const void *)CPPhoneNumberCopyHomeCountryCode();
    if (v23) {
      goto LABEL_33;
    }
  }
  CFRelease(v7);
  return Mutable;
}

void _loadDataDetectorsCoreFramework()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)CPSystemRootDirectory();
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v0);
  CFStringAppend(MutableCopy, @"/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore");
  CFURLRef v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MutableCopy, kCFURLPOSIXPathStyle, 0);
  CFRelease(MutableCopy);
  if (v2)
  {
    int v3 = CFURLGetFileSystemRepresentation(v2, 1u, buffer, 1024);
    CFRelease(v2);
    if (v3)
    {
      uint64_t v4 = dlopen((const char *)buffer, 1);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = dlsym(v4, "DDScannerCreateWithType");
        _lazyDDScannerCreateWithCFStringRef Type = (uint64_t (*)(void, void, void))v6;
        CFDictionaryRef v7 = dlsym(v5, "DDScannerCopyResults");
        _lazyDDScannerCopyResults = v7;
        CFDictionaryRef v8 = dlsym(v5, "DDScannerScanString");
        _lazyDDScannerScanString = v8;
        CFArrayRef v9 = dlsym(v5, "DDResultGetSubResults");
        _lazyDDResultGetCFArrayRef SubResults = v9;
        uint64_t v10 = dlsym(v5, "DDResultGetType");
        _lazyDDResultGetCFStringRef Type = v10;
        uint64_t v11 = dlsym(v5, "DDResultGetMatchedString");
        _lazyDDResultGetMatchedString = v11;
        CFIndex v12 = dlsym(v5, "DDResultGetRange");
        _lazyDDResultGetuint64_t Range = v12;
        if (v6 && v7 && v8 && v9 && v10 && v11 && v12)
        {
          if (!sSharedDataDetectorsScanner) {
            sSharedDataDetectorsScanner = _lazyDDScannerCreateWithType(0, 0, 0);
          }
        }
        else
        {
          CFDictionaryRef v14 = (FILE *)*MEMORY[0x1E4F143C8];
          dlerror();
          fprintf(v14, "Failed to load some symbols from DataDetectorsCore.framework (%s)");
        }
      }
      else
      {
        CFIndex v13 = (FILE *)*MEMORY[0x1E4F143C8];
        dlerror();
        fprintf(v13, "Failed to load DataDetectorsCore.framework (%s)");
      }
    }
  }
}

uint64_t _getWriterConnection(uint64_t a1, uint64_t a2)
{
  CPRecordStoreGetDatabase();
  uint64_t v3 = CPSqliteDatabaseConnectionForWriting();
  if (v3)
  {
    int v4 = CPSqliteConnectionBeginTransactionType();
    if (v4 && v4 != 101)
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"CPSqliteConnection *_getWriterConnection(CPRecordStoreRef, const char *)", 21, 0, @"%s: failed to start transaction for writer connection (error %d)", v5, v6, v7, a2);
      return 0;
    }
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(4, (uint64_t)"CPSqliteConnection *_getWriterConnection(CPRecordStoreRef, const char *)", 24, 0, @"%s: failed to get writer connection", v8, v9, v10, a2);
  }
  return v3;
}

void _commitWriterConnection(uint64_t a1, uint64_t a2)
{
  int v3 = CPSqliteConnectionCommit();
  if (v3)
  {
    int v4 = v3;
    if (v3 != 101)
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void _commitWriterConnection(CPSqliteConnection *, const char *)", 33, 0, @"%s: failed to commit transaction (error %d)", v5, v6, v7, a2);
      if (v4 != 10)
      {
        CPSqliteConnectionRollback();
      }
    }
  }
}

uint64_t _dumpTableWithConnection(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)[MEMORY[0x1E4F28E78] stringWithCapacity:100];
  uint64_t v4 = [MEMORY[0x1E4F28E78] stringWithCapacity:1000];
  [NSString stringWithFormat:@"select ROWID, * from %@", a2];
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  if ([v3 length]) {
    return [NSString stringWithFormat:@"%@ (%li) = (\n%@\n%@)", a2, 0, v3, v4];
  }
  else {
    return [NSString stringWithFormat:@"%@ =()", a2, v6, v7, v8];
  }
}

uint64_t _dumpTableRowHandler(uint64_t a1, uint64_t a2)
{
  int v4 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  int v5 = v4 - 1;
  if (v4 >= 1)
  {
    int v6 = v4;
    if (![*(id *)a2 length])
    {
      [*(id *)a2 appendString:@"    "];
      for (int i = 0; i != v6; ++i)
      {
        uint64_t v8 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), i);
        uint64_t v9 = v8;
        if (i == 1 && !strcasecmp(v8, "rowid"))
        {
          **(unsigned char **)(a2 + 16) = 1;
        }
        else
        {
          objc_msgSend(*(id *)a2, "appendFormat:", @"%s", v9);
          if (i < v5) {
            [*(id *)a2 appendString:@"|"];
          }
        }
      }
    }
    [*(id *)(a2 + 8) appendString:@"    "];
    for (int j = 0; j != v6; ++j)
    {
      if (j != 1 || !**(unsigned char **)(a2 + 16))
      {
        switch(sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), j))
        {
          case 1:
            objc_msgSend(*(id *)(a2 + 8), "appendFormat:", @"%i", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), j));
            break;
          case 2:
            objc_msgSend(*(id *)(a2 + 8), "appendFormat:", @"%f", sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), j));
            break;
          case 3:
            objc_msgSend(*(id *)(a2 + 8), "appendFormat:", @"%s", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), j));
            break;
          case 4:
            uint64_t v11 = *(void **)(a2 + 8);
            CFIndex v12 = @"<BLOB>";
            goto LABEL_19;
          case 5:
            uint64_t v11 = *(void **)(a2 + 8);
            CFIndex v12 = @"<NULL>";
LABEL_19:
            objc_msgSend(v11, "appendFormat:", v12, v14);
            break;
          default:
            break;
        }
        if (j < v5) {
          [*(id *)(a2 + 8) appendString:@"|"];
        }
      }
    }
    [*(id *)(a2 + 8) appendString:@"\n"];
    ++**(void **)(a2 + 24);
  }
  return 0;
}

uint64_t _dumpTable(uint64_t a1, uint64_t a2)
{
  CPRecordStoreGetDatabase();
  uint64_t v3 = CPSqliteDatabaseConnectionForReading();
  return _dumpTableWithConnection(v3, a2);
}

void *SQLInClauseStringForParameterCount(uint64_t a1)
{
  CFURLRef v2 = (void *)[MEMORY[0x1E4F28E78] stringWithCapacity:(2 * a1) | 1];
  objc_msgSend(v2, "appendString:", @"(");
  if (a1)
  {
    uint64_t v3 = 0;
    do
    {
      if (v3) {
        int v4 = @",?";
      }
      else {
        int v4 = @"?";
      }
      [v2 appendString:v4];
      ++v3;
    }
    while (a1 != v3);
  }
  [v2 appendString:@""]);
  return v2;
}

uint64_t abPredicateSqliteEval(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  int v6 = sqlite3_user_data(a1);
  int v7 = sqlite3_value_int(*a3);
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", 2 * v7), "nonretainedObjectValue");
  uint64_t v9 = (void *)[v6 objectAtIndex:(2 * v7) | 1];
  if (objc_msgSend(v8, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null"))) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v8;
  }
  if (objc_msgSend(v9, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null"))) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  return [v10 evaluateCallbackWithSqliteContext:a1 predicateContext:v11 values:a3 count:a2];
}

uint64_t _predicateShouldInterruptSearch(uint64_t a1, uint64_t a2)
{
  return [*(id *)a2 predicateShouldContinue:*(void *)(a2 + 8)] ^ 1;
}

uint64_t _predicateIteratePeopleWithCallbacksRecordHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32) + 1;
  *(void *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = v4;
  *(void *)(a3 + 40) = objc_msgSend(*(id *)(a3 + 8), "ab_metadataForMatchingRow:columnOffset:", a1, *(void *)(a3 + 48));
  if (*(void *)(a3 + 24))
  {
    char v5 = objc_opt_respondsToSelector();
    int v6 = *(void **)a3;
    uint64_t v7 = *(void *)(a3 + 8);
    uint64_t v8 = *(void *)(a3 + 24);
    if (v5)
    {
      [v6 predicateShouldContinue:v7 afterFindingRecord:v8 metadata:*(void *)(a3 + 40)];
      int v9 = 1;
    }
    else
    {
      int v9 = [v6 predicateShouldContinue:v7 afterFindingRecord:v8];
    }
    *(void *)(a3 + 24) = 0;
  }
  else
  {
    int v9 = 1;
  }
  return v9 ^ 1u;
}

uint64_t excludeIdsRowHandler(uint64_t result, void *a2)
{
  if (result)
  {
    BOOL result = *(void *)(result + 8);
    if (result)
    {
      if (objc_msgSend(a2, "containsIndex:", sqlite3_column_int((sqlite3_stmt *)result, 0))) {
        return 0;
      }
      else {
        return 2;
      }
    }
  }
  return result;
}

uint64_t appendToBufferWithLineFolding(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 >= 75)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void **)a1;
    if (v6 == *(_DWORD *)(a1 + 12))
    {
      NSUInteger v8 = 2 * v6;
      *(_DWORD *)(a1 + 12) = v8;
      uint64_t v7 = NSZoneRealloc(0, v7, v8);
      *(void *)a1 = v7;
      int v6 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *((unsigned char *)v7 + v6) = 13;
    int v9 = *(_DWORD *)(a1 + 8);
    uint64_t v10 = *(void **)a1;
    if (v9 == *(_DWORD *)(a1 + 12))
    {
      NSUInteger v11 = 2 * v9;
      *(_DWORD *)(a1 + 12) = v11;
      uint64_t v10 = NSZoneRealloc(0, v10, v11);
      *(void *)a1 = v10;
      int v9 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v9 + 1;
    *((unsigned char *)v10 + v9) = 10;
    int v12 = *(_DWORD *)(a1 + 8);
    CFIndex v13 = *(void **)a1;
    if (v12 == *(_DWORD *)(a1 + 12))
    {
      NSUInteger v14 = 2 * v12;
      *(_DWORD *)(a1 + 12) = v14;
      CFIndex v13 = NSZoneRealloc(0, v13, v14);
      *(void *)a1 = v13;
      int v12 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v12 + 1;
    *((unsigned char *)v13 + v12) = 32;
    uint64_t v3 = 1;
  }
  int v15 = *(_DWORD *)(a1 + 8);
  uint64_t v16 = *(void **)a1;
  if (v15 == *(_DWORD *)(a1 + 12))
  {
    NSUInteger v17 = 2 * v15;
    *(_DWORD *)(a1 + 12) = v17;
    uint64_t v16 = NSZoneRealloc(0, v16, v17);
    *(void *)a1 = v16;
    int v15 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *((unsigned char *)v16 + v15) = a2;
  return v3 + 1;
}

uint64_t ABLimitedAccessContactIdentifiersForBundle(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  CPRecordStoreGetDatabase();
  if (!CPSqliteDatabaseConnectionForReading()) {
    return MEMORY[0x1E4F1CBF0];
  }
  uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
  if (((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A298] + 16))() & 1) == 0)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT LimitedAccess.guid FROM LimitedAccess WHERE LimitedAccess.Bundleint ID = '%@' and IsActive = %i;",
      a2,
      1);
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
  }
  return v3;
}

uint64_t _identifierRowHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3) {
    objc_msgSend(a2, "addObject:", objc_msgSend(NSString, "stringWithUTF8String:", v3));
  }
  return 0;
}

uint64_t ABPopulateSyncTableForLimitedAccessAboveSequenceNumber(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [MEMORY[0x1E4F28E78] string];
  uint64_t v5 = [MEMORY[0x1E4F28E78] string];
  uint64_t v6 = [MEMORY[0x1E4F28E78] string];
  uint64_t v7 = [MEMORY[0x1E4F28E78] string];
  uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v4, @"BundleID", v5, @"guid", v6, @"SequenceNumber", v7, @"IsActive", 0);
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  uint64_t v9 = v8;
  CPRecordStoreGetDatabase();
  if (CPSqliteDatabaseConnectionForReading())
  {
    uint64_t v10 = ABOSLogGeneral();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFIndex v13 = a2;
      _os_log_impl(&dword_19DCDB000, v10, OS_LOG_TYPE_DEFAULT, "ABPopulateSyncTableForLimitedAccessAboveSequenceNumber %@", buf, 0xCu);
    }
    objc_msgSend(NSString, "stringWithFormat:", @"select * from LimitedAccess WHERE SequenceNumber > %i ;",
      [a2 intValue]);
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
  }
  return v9;
}

uint64_t _syncTableRowHandler(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)[a2 objectForKey:@"BundleID"];
  uint64_t v5 = (void *)[a2 objectForKey:@"guid"];
  uint64_t v14 = (void *)[a2 objectForKey:@"SequenceNumber"];
  CFIndex v13 = (void *)[a2 objectForKey:@"IsActive"];
  int v6 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  if (v6 >= 1)
  {
    int v7 = v6;
    int v8 = 0;
    while (1)
    {
      uint64_t v9 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), v8);
      if (!strcasecmp(v9, "BundleID")) {
        break;
      }
      if (!strcasecmp(v9, "guid"))
      {
        objc_msgSend(v5, "appendFormat:", @"%s", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v8));
        NSUInteger v11 = v5;
        goto LABEL_12;
      }
      if (!strcasecmp(v9, "SequenceNumber"))
      {
        uint64_t v10 = v14;
        objc_msgSend(v14, "appendFormat:", @"%i", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v8));
LABEL_11:
        NSUInteger v11 = v10;
LABEL_12:
        objc_msgSend(v11, "appendFormat:", @"%s", ", ");
        goto LABEL_13;
      }
      if (!strcasecmp(v9, "IsActive"))
      {
        uint64_t v10 = v13;
        objc_msgSend(v13, "appendFormat:", @"%i", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v8));
        goto LABEL_11;
      }
LABEL_13:
      if (v7 == ++v8) {
        return 0;
      }
    }
    objc_msgSend(v4, "appendFormat:", @"%s", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v8));
    NSUInteger v11 = v4;
    goto LABEL_12;
  }
  return 0;
}

void *convertStringtoIntArray(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v1 = (void *)[a1 componentsSeparatedByString:@", "];
  CFURLRef v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = [*(id *)(*((void *)&v9 + 1) + 8 * v6) intValue];
        objc_msgSend(v2, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", v7));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return v2;
}

uint64_t ABLimitedAccessUpdateTable(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    NSUInteger v17 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v18 = *MEMORY[0x1E4F1C3C8];
    CFArrayRef v19 = @"parameter ‘addressBook’ must be nonnull";
    goto LABEL_18;
  }
  if (!a2)
  {
    NSUInteger v17 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v18 = *MEMORY[0x1E4F1C3C8];
    CFArrayRef v19 = @"parameter ‘table’ must be nonnull";
LABEL_18:
    objc_exception_throw((id)[v17 exceptionWithName:v18 reason:v19 userInfo:0]);
  }
  uint64_t v4 = (void *)[(id)objc_msgSend(a2 objectForKey:@"BundleID", "componentsSeparatedByString:", @", "];
  CFArrayRef v20 = (void *)[(id)objc_msgSend(a2 objectForKey:@"guid", "componentsSeparatedByString:", @", "];
  uint64_t v5 = convertStringtoIntArray((void *)[a2 objectForKey:@"SequenceNumber"]);
  uint64_t v6 = convertStringtoIntArray((void *)[a2 objectForKey:@"IsActive"]);
  int v7 = [v4 count];
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABLimitedAccessUpdateTable(ABAddressBookRef, NSDictionary *)");
  if (WriterConnection)
  {
    uint64_t v9 = WriterConnection;
    uint64_t v10 = (v7 - 1);
    long long v11 = ABOSLogGeneral();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v22 = v7 - 1;
      _os_log_impl(&dword_19DCDB000, v11, OS_LOG_TYPE_DEFAULT, "ABLimitedAccessUpdateTable update %d rows", buf, 8u);
    }
    if (v7 < 2)
    {
      char v13 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        uint64_t v14 = CPSqliteConnectionStatementForSQL();
        if (v14)
        {
          uint64_t v15 = v14;
          char v13 = 1;
          sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 1, (const char *)objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v12), "UTF8String"), -1, 0);
          sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 2, (const char *)objc_msgSend((id)objc_msgSend(v20, "objectAtIndex:", v12), "UTF8String"), -1, 0);
          sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 3, objc_msgSend((id)objc_msgSend(v5, "objectAtIndex:", v12), "intValue"));
          sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 4, objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", v12), "intValue"));
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
        ++v12;
      }
      while (v10 != v12);
    }
    _commitWriterConnection(v9, (uint64_t)"BOOL ABLimitedAccessUpdateTable(ABAddressBookRef, NSDictionary *)");
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t ABAddLimitedAccessForBundle(uint64_t a1, void *a2, uint64_t a3)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = a3;
  return ABAddLimitedAccessIdentifiersForBundle(a1, a2, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1]);
}

uint64_t ABAddLimitedAccessIdentifiersForBundle(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  uint64_t v5 = *MEMORY[0x1E4F5A298];
  if ((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A298] + 16))(*MEMORY[0x1E4F5A298])) {
    return 0;
  }
  uint64_t result = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABAddLimitedAccessIdentifiersForBundle(ABAddressBookRef, NSString *, NSArray<NSString *> *)");
  uint64_t v20 = result;
  if (result)
  {
    uint64_t v18 = [a3 count];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v7 = [a3 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      CFArrayRef v19 = a2;
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(a3);
          }
          uint64_t v12 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          if (((*(uint64_t (**)(uint64_t, void *))(v5 + 16))(v5, v12) & 1) == 0)
          {
            Freshuint64_t SequenceNumber = getFreshSequenceNumber(a1);
            uint64_t v14 = ABOSLogGeneral();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109120;
              int v27 = FreshSequenceNumber;
              _os_log_debug_impl(&dword_19DCDB000, v14, OS_LOG_TYPE_DEBUG, "ABAddLimitedAccessForBundle sequenceNumber %d ", buf, 8u);
            }
            uint64_t v15 = CPSqliteConnectionStatementForSQL();
            if (v15)
            {
              uint64_t v16 = v15;
              _bindStringAtIndex(*(sqlite3_stmt **)(v15 + 8), 1, v19);
              _bindStringAtIndex(*(sqlite3_stmt **)(v16 + 8), 2, v12);
              sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 3, FreshSequenceNumber);
              sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 4, 1);
              CPSqliteStatementPerform();
              CPSqliteStatementReset();
              ++v9;
            }
          }
        }
        uint64_t v8 = [a3 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }
      while (v8);
    }
    else
    {
      uint64_t v9 = 0;
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CNContactStoreLimitedAccessDidChangeNotification", 0, 0, 1u);
    _commitWriterConnection(v20, (uint64_t)"BOOL ABAddLimitedAccessIdentifiersForBundle(ABAddressBookRef, NSString *, NSArray<NSString *> *)");
    return v18 == v9;
  }
  return result;
}

uint64_t getFreshSequenceNumber(uint64_t a1)
{
  CFURLRef v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_19DCDB000, v2, OS_LOG_TYPE_DEFAULT, "getFreshSequenceNumber", (uint8_t *)&v10, 2u);
  }
  uint64_t v3 = getLastUsedSequenceNumber(a1) + 1;
  ABAddressBookSetIntegerProperty(a1, @"ABlimitedAccessLastSequenceNumber", v3, v4, v5, v6, v7, v8, v10);
  return v3;
}

uint64_t _bindStringAtIndex(sqlite3_stmt *a1, int a2, void *a3)
{
  if (a3)
  {
    uint64_t v5 = (const char *)[a3 UTF8String];
    return sqlite3_bind_text(a1, a2, v5, -1, 0);
  }
  else
  {
    return sqlite3_bind_null(a1, a2);
  }
}

uint64_t ABRemoveLimitedAccessForBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = a3;
  return ABRemoveLimitedAccessIdentifiersForBundle(a1, a2, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1]);
}

uint64_t ABRemoveLimitedAccessIdentifiersForBundle(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  uint64_t v4 = *MEMORY[0x1E4F5A298];
  if ((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A298] + 16))(*MEMORY[0x1E4F5A298])) {
    return 0;
  }
  uint64_t result = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABRemoveLimitedAccessIdentifiersForBundle(ABAddressBookRef, NSString *, NSArray<NSString *> *)");
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = ABOSLogGeneral();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      ABRemoveLimitedAccessIdentifiersForBundle_cold_1(a2, (uint64_t)a3, v7);
    }
    uint64_t v18 = [a3 count];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v8 = [a3 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      CFArrayRef v19 = (void *)a2;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v23 != v11) {
            objc_enumerationMutation(a3);
          }
          char v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          if (((*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v13) & 1) == 0)
          {
            Freshuint64_t SequenceNumber = getFreshSequenceNumber(a1);
            uint64_t v15 = CPSqliteConnectionStatementForSQL();
            if (v15)
            {
              uint64_t v16 = v15;
              sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 1, FreshSequenceNumber);
              sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 2, 0);
              _bindStringAtIndex(*(sqlite3_stmt **)(v16 + 8), 3, v19);
              _bindStringAtIndex(*(sqlite3_stmt **)(v16 + 8), 4, v13);
              CPSqliteStatementPerform();
              CPSqliteStatementReset();
              ++v10;
            }
          }
        }
        uint64_t v9 = [a3 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    _commitWriterConnection(v6, (uint64_t)"BOOL ABRemoveLimitedAccessIdentifiersForBundle(ABAddressBookRef, NSString *, NSArray<NSString *> *)");
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CNContactStoreLimitedAccessDidChangeNotification", 0, 0, 1u);
    return v18 == v10;
  }
  return result;
}

uint64_t ABRemoveContactIdentifierFromLimitedAccessForAllBundles(uint64_t a1, uint64_t a2)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = a2;
  return ABRemoveContactIdentifiersFromLimitedAccessForAllBundles(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1]);
}

uint64_t ABRemoveContactIdentifiersFromLimitedAccessForAllBundles(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_msgSend(a2, "_cn_filter:", CNLogicalNot());
  if ((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A258] + 16))()) {
    return 1;
  }
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABRemoveContactIdentifiersFromLimitedAccessForAllBundles(ABAddressBookRef, NSArray<NSString *> *)");
  if (!WriterConnection) {
    return 0;
  }
  uint64_t v7 = WriterConnection;
  uint64_t v8 = ABOSLogGeneral();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    ABRemoveContactIdentifiersFromLimitedAccessForAllBundles_cold_1((uint64_t)a2, v8);
  }
  objc_msgSend(NSString, "stringWithFormat:", @"DELETE FROM LimitedAccess WHERE guid IN %@;",
    SQLInClauseStringForParameterCount([v4 count]));
  uint64_t v9 = CPSqliteConnectionStatementForSQL();
  BOOL v5 = v9 != 0;
  if (v9)
  {
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x2020000000;
    int v14 = 1;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    _DWORD v12[2] = __ABRemoveContactIdentifiersFromLimitedAccessForAllBundles_block_invoke;
    v12[3] = &unk_1E59890C0;
    v12[4] = v13;
    v12[5] = v9;
    objc_msgSend(v4, "_cn_each:", v12);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
    _Block_object_dispose(v13, 8);
  }
  _commitWriterConnection(v7, (uint64_t)"BOOL ABRemoveContactIdentifiersFromLimitedAccessForAllBundles(ABAddressBookRef, NSArray<NSString *> *)");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CNContactStoreLimitedAccessDidChangeNotification", 0, 0, 1u);
  return v5;
}

void sub_19DD27E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __ABRemoveContactIdentifiersFromLimitedAccessForAllBundles_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 1;
  return _bindStringAtIndex(v4, v6, a2);
}

uint64_t ABLimitedAccessContactsCountForBundle(uint64_t a1, void *a2)
{
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  CPRecordStoreGetDatabase();
  uint64_t result = CPSqliteDatabaseConnectionForReading();
  if (result)
  {
    if (((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A298] + 16))() & 1) == 0)
    {
      uint64_t v4 = CPSqliteConnectionStatementForSQL();
      if (v4
        && (uint64_t v5 = v4, (v6 = *(sqlite3_stmt **)(v4 + 8)) != 0)
        && !sqlite3_bind_text(v6, 1, (const char *)[a2 UTF8String], -1, 0)
        && !sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 2, 1))
      {
        uint64_t v8 = CPSqliteStatementIntegerResult();
        CPSqliteStatementReset();
        if ((int)v8 >= 1) {
          return [NSNumber numberWithInt:v8];
        }
      }
      else
      {
        uint64_t v7 = ABOSLogGeneral();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          ABLimitedAccessContactsCountForBundle_cold_1((uint64_t)a2, v7);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t ABGetLimitedAccessLastSyncSequenceNumber(uint64_t a1)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  CFURLRef v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl(&dword_19DCDB000, v2, OS_LOG_TYPE_DEFAULT, "ABGetLimitedAccessLastSyncSequenceNumber", (uint8_t *)v13, 2u);
  }
  uint64_t v3 = NSNumber;
  uint64_t IntegerProperty = ABAddressBookGetIntegerProperty(a1);
  if (IntegerProperty == -1)
  {
    CPRecordStoreGetDatabase();
    if (!CPSqliteDatabaseConnectionForReading())
    {
      uint64_t IntegerProperty = 0xFFFFFFFFLL;
      return [v3 numberWithInt:IntegerProperty];
    }
    uint64_t IntegerProperty = lastSequenceNumber();
    uint64_t v5 = ABOSLogGeneral();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v13[0]) = 67109120;
      HIDWORD(v13[0]) = IntegerProperty;
      _os_log_impl(&dword_19DCDB000, v5, OS_LOG_TYPE_DEFAULT, "getCurrentSequenceNumber key not found, save %d", (uint8_t *)v13, 8u);
    }
    ABAddressBookSetIntegerProperty(a1, @"ABlimitedAccessTableCurrentSequenceNumber", IntegerProperty, v6, v7, v8, v9, v10, v13[0]);
  }
  uint64_t v11 = ABOSLogGeneral();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v13[0]) = 67109120;
    HIDWORD(v13[0]) = IntegerProperty;
    _os_log_impl(&dword_19DCDB000, v11, OS_LOG_TYPE_DEFAULT, "getCurrentSequenceNumber %d", (uint8_t *)v13, 8u);
  }
  return [v3 numberWithInt:IntegerProperty];
}

BOOL ABPurgeLimitedAccessRecordsForBundle(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  if ((*(uint64_t (**)(void))(*MEMORY[0x1E4F5A298] + 16))()) {
    return 0;
  }
  markFullSyncRequired(a1);
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABPurgeLimitedAccessRecordsForBundle(ABAddressBookRef, NSString *)");
  if (!WriterConnection) {
    return 0;
  }
  uint64_t v5 = WriterConnection;
  uint64_t v6 = ABOSLogGeneral();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412290;
    int v14 = a2;
    _os_log_impl(&dword_19DCDB000, v6, OS_LOG_TYPE_DEFAULT, "ABPurgeLimitedAccessRecordsForBundle bundleId:%@", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v7 = CPSqliteConnectionStatementForSQL();
  BOOL v8 = v7 != 0;
  if (v7)
  {
    uint64_t v9 = *(sqlite3_stmt **)(v7 + 8);
    int v10 = sqlite3_bind_parameter_index(v9, ":bundleId");
    if (v10 >= 1) {
      _bindStringAtIndex(v9, v10, a2);
    }
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v5, (uint64_t)"BOOL ABPurgeLimitedAccessRecordsForBundle(ABAddressBookRef, NSString *)");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CNContactStoreLimitedAccessDidChangeNotification", 0, 0, 1u);
  return v8;
}

void markFullSyncRequired(uint64_t a1)
{
  CFURLRef v2 = ABOSLogGeneral();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_19DCDB000, v2, OS_LOG_TYPE_DEFAULT, "markFullSyncRequired", (uint8_t *)&v9, 2u);
  }
  Freshuint64_t SequenceNumber = getFreshSequenceNumber(a1);
  ABAddressBookSetIntegerProperty(a1, @"ABlimitedAccessLastFullSyncSequencenumber", FreshSequenceNumber, v4, v5, v6, v7, v8, v9);
}

ABLimitedAccessSyncData *ABGetWatchLimitedAccessSyncDataStartingAtSequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"parameter ‘addressBook’ must be nonnull" userInfo:0]);
  }
  uint64_t v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = 67109120;
    HIDWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = a2;
    _os_log_impl(&dword_19DCDB000, v4, OS_LOG_TYPE_DEFAULT, "ABGetWatchLimitedAccessSyncDataStartingAtSequenceNumber requesterSeqNum:%d", (uint8_t *)&v21, 8u);
  }
  CPRecordStoreGetDatabase();
  if (!CPSqliteDatabaseConnectionForReading()) {
    return 0;
  }
  uint64_t v5 = objc_alloc_init(ABLimitedAccessSyncData);
  [(ABLimitedAccessSyncData *)v5 setFullSyncRequired:0];
  uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
  LODWORD(SequenceNumber) = ABAddressBookGetIntegerProperty(a1);
  if (SequenceNumber != -1) {
    goto LABEL_10;
  }
  CPRecordStoreGetDatabase();
  if (CPSqliteDatabaseConnectionForReading())
  {
    uint64_t SequenceNumber = lastSequenceNumber();
    uint64_t v8 = ABOSLogGeneral();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = 67109120;
      HIDWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = SequenceNumber;
      _os_log_impl(&dword_19DCDB000, v8, OS_LOG_TYPE_DEFAULT, "getFullSyncSequenceNumber key not found, save %d", (uint8_t *)&v21, 8u);
    }
    ABAddressBookSetIntegerProperty(a1, @"ABlimitedAccessLastFullSyncSequencenumber", SequenceNumber, v9, v10, v11, v12, v13, v21);
LABEL_10:
    int v14 = ABOSLogGeneral();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = 67109120;
      HIDWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = SequenceNumber;
      _os_log_impl(&dword_19DCDB000, v14, OS_LOG_TYPE_DEFAULT, "getFullSyncSequenceNumber %d", (uint8_t *)&v21, 8u);
    }
    goto LABEL_14;
  }
  LODWORD(SequenceNumber) = -1;
LABEL_14:
  if ((int)SequenceNumber > a2)
  {
    [(ABLimitedAccessSyncData *)v5 setFullSyncRequired:1];
    LODWORD(a2) = 0;
  }
  [(ABLimitedAccessSyncData *)v5 setCurrentSequenceNumber:(int)getLastUsedSequenceNumber(a1)];
  uint64_t v15 = ABOSLogGeneral();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = [(ABLimitedAccessSyncData *)v5 currentSequenceNumber];
    LODWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = 67109632;
    HIDWORD(v2_ABCPostDatabaseChangedNotification(0, 1) = a2;
    __int16 v22 = 1024;
    int v23 = SequenceNumber;
    __int16 v24 = 1024;
    int v25 = v16;
    _os_log_impl(&dword_19DCDB000, v15, OS_LOG_TYPE_DEFAULT, "ABLimitedAccess requesterSeqNum %d fullSyncVersion %d currentversion %d", (uint8_t *)&v21, 0x14u);
  }
  uint64_t v17 = CPSqliteConnectionStatementForSQL();
  if (v17)
  {
    uint64_t v18 = *(sqlite3_stmt **)(v17 + 8);
    int v19 = sqlite3_bind_parameter_index(v18, ":seqNumber");
    if (v19 >= 1) {
      sqlite3_bind_int(v18, v19, a2);
    }
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  [(ABLimitedAccessSyncData *)v5 setSyncEventsArray:v6];
  return v5;
}

uint64_t getLastUsedSequenceNumber(uint64_t a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t IntegerProperty = ABAddressBookGetIntegerProperty(a1);
  if (IntegerProperty == -1)
  {
    CPRecordStoreGetDatabase();
    if (!CPSqliteDatabaseConnectionForReading()) {
      return 0xFFFFFFFFLL;
    }
    uint64_t IntegerProperty = lastSequenceNumber();
    uint64_t v3 = ABOSLogGeneral();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11[0]) = 67109120;
      HIDWORD(v11[0]) = IntegerProperty;
      _os_log_impl(&dword_19DCDB000, v3, OS_LOG_TYPE_DEFAULT, "getLastUsedSequenceNumber key not found, save %d", (uint8_t *)v11, 8u);
    }
    ABAddressBookSetIntegerProperty(a1, @"ABlimitedAccessLastSequenceNumber", IntegerProperty, v4, v5, v6, v7, v8, v11[0]);
  }
  uint64_t v9 = ABOSLogGeneral();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v11[0]) = 67109120;
    HIDWORD(v11[0]) = IntegerProperty;
    _os_log_impl(&dword_19DCDB000, v9, OS_LOG_TYPE_DEFAULT, "getLastUsedSequenceNumber %d", (uint8_t *)v11, 8u);
  }
  return IntegerProperty;
}

uint64_t _syncDataRowHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_alloc_init(ABLimitedAccessSyncEvent);
  int v4 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  if (v4 >= 1)
  {
    int v5 = v4;
    for (int i = 0; i != v5; ++i)
    {
      uint64_t v7 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), i);
      if (!strcasecmp(v7, "BundleID"))
      {
        -[ABLimitedAccessSyncEvent setBundleID:](v3, "setBundleID:", objc_msgSend(NSString, "stringWithFormat:", @"%s", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), i)));
      }
      else if (!strcasecmp(v7, "guid"))
      {
        -[ABLimitedAccessSyncEvent setContactID:](v3, "setContactID:", objc_msgSend(NSString, "stringWithFormat:", @"%s", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), i)));
      }
      else if (!strcasecmp(v7, "SequenceNumber"))
      {
        [(ABLimitedAccessSyncEvent *)v3 setSequenceNumber:sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), i)];
      }
      else if (!strcasecmp(v7, "IsActive"))
      {
        [(ABLimitedAccessSyncEvent *)v3 setIsActive:sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), i) != 0];
      }
    }
  }
  [a2 addObject:v3];

  return 0;
}

uint64_t ABApplyLimitedAccessSyncEvents(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19DCDB000, v4, OS_LOG_TYPE_DEFAULT, "ABApplyLimitedAccessSyncEvents", buf, 2u);
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABApplyLimitedAccessSyncEvents(ABAddressBookRef, NSArray<ABLimitedAccessSyncEvent *> *)");
  if (WriterConnection)
  {
    uint64_t v6 = WriterConnection;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v7 = [a2 countByEnumeratingWithState:&v18 objects:v24 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      char v9 = 0;
      uint64_t v10 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(a2);
          }
          uint64_t v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v13 = ABOSLogGeneral();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int v14 = [v12 sequenceNumber];
            *(_DWORD *)buf = 67109120;
            int v23 = v14;
            _os_log_impl(&dword_19DCDB000, v13, OS_LOG_TYPE_DEFAULT, "ABApplyLimitedAccessSyncEvents sequenceNumber %d", buf, 8u);
          }
          uint64_t v15 = CPSqliteConnectionStatementForSQL();
          if (v15)
          {
            uint64_t v16 = v15;
            char v9 = 1;
            sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, (const char *)objc_msgSend((id)objc_msgSend(v12, "bundleID"), "UTF8String"), -1, 0);
            sqlite3_bind_text(*(sqlite3_stmt **)(v16 + 8), 2, (const char *)objc_msgSend((id)objc_msgSend(v12, "contactID"), "UTF8String"), -1, 0);
            sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 3, [v12 sequenceNumber]);
            sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 4, [v12 isActive]);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
        }
        uint64_t v8 = [a2 countByEnumeratingWithState:&v18 objects:v24 count:16];
      }
      while (v8);
    }
    else
    {
      char v9 = 0;
    }
    _commitWriterConnection(v6, (uint64_t)"BOOL ABApplyLimitedAccessSyncEvents(ABAddressBookRef, NSArray<ABLimitedAccessSyncEvent *> *)");
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

BOOL ABDropAllLimitedAccessRows(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v4 = ABOSLogGeneral();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl(&dword_19DCDB000, v4, OS_LOG_TYPE_DEFAULT, "ABDropAllLimitedAccessRows enableFullSyncNotify %d", (uint8_t *)v8, 8u);
  }
  if (a2) {
    markFullSyncRequired(a1);
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"BOOL ABDropAllLimitedAccessRows(ABAddressBookRef, BOOL)");
  if (WriterConnection)
  {
    CPSqliteConnectionPerformSQL();
    _commitWriterConnection(WriterConnection, (uint64_t)"BOOL ABDropAllLimitedAccessRows(ABAddressBookRef, BOOL)");
    if (a2)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CNContactStoreLimitedAccessDidChangeNotification", 0, 0, 1u);
    }
  }
  return WriterConnection != 0;
}

void ABSetLimitedAccessTableCurrentSequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t lastSequenceNumber()
{
  if (!CPSqliteConnectionStatementForSQL()) {
    return 0;
  }
  uint64_t v0 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v0;
}

uint64_t ABGetSharedAddressFormatsDictionary()
{
  return [MEMORY[0x1E4F5A4A0] addressFormats];
}

CFDictionaryRef ABGetLocalizedAddressFormatDictionaryForCountryCode(const void *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)[MEMORY[0x1E4F5A4A0] addressFormats];
  if (result)
  {
    return (const __CFDictionary *)CFDictionaryGetValue(result, a1);
  }
  return result;
}

CFDictionaryRef ABGetPreferredKeyboardSettingsForCountryCodeAndAddressPartKey(const void *a1, const void *a2)
{
  CFDictionaryRef result = (const __CFDictionary *)[MEMORY[0x1E4F5A4A0] addressFormats];
  if (result)
  {
    CFDictionaryRef v5 = result;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(result, a1);
    if (!Value
      || (CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"kbdSettings")) == 0
      || (CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v7, a2)) == 0)
    {
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v5, @"defaultKbdSettings");
      if (result)
      {
        return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
      }
    }
  }
  return result;
}

uint64_t ABAddressCopyCountryCodeForCountryName(void *a1)
{
  if (ABLogAPIUsage())
  {
    CFURLRef v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressCopyCountryCodeForCountryName(CFStringRef)", 140, v3, @"countryName=%@", v4, v5, v6, (uint64_t)a1);
    CFRelease(v3);
  }
  if (!ABAddressCopyCountryCodeForCountryName__countryCodeForCountryNameMappingDictionary)
  {
    CFDictionaryRef v7 = (const __CFDictionary *)[MEMORY[0x1E4F5A4A0] addressFormats];
    uint64_t Count = CFDictionaryGetCount(v7);
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    uint64_t v11 = Mutable;
    if (Count) {
      BOOL v12 = Mutable == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      if (v13)
      {
        int v14 = v13;
        CFDictionaryGetKeysAndValues(v7, v13, 0);
        if (Count >= 1)
        {
          uint64_t v15 = v14;
          do
          {
            if (CFStringCompare((CFStringRef)*v15, @"defaultKbdSettings", 0)) {
              CFArrayAppendValue(v11, *v15);
            }
            ++v15;
            --Count;
          }
          while (Count);
        }
        free(v14);
      }
    }
    uint64_t v16 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    CFDictionaryRef v17 = (const __CFDictionary *)[MEMORY[0x1E4F5A4A0] addressFormats];
    CFIndex v18 = CFArrayGetCount(v11);
    if (v18)
    {
      uint64_t v19 = v18;
      long long v20 = objc_opt_new();
      if (v19 >= 1)
      {
        for (CFIndex i = 0; i != v19; ++i)
        {
          ABRecordID ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v17, ValueAtIndex);
          __int16 v24 = CFDictionaryGetValue(Value, @"COUNTRY");
          if (v24) {
            CFArrayAppendValue(v16, (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A4A0], "localizedStringForPostalAddressString:returningNilIfNotFound:", v24, 0), "lowercaseString"));
          }
        }
      }
    }
    ABAddressCopyCountryCodeForCountryName__countryCodeForCountryNameMappingDictionary = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjects:v11 forKeys:v16];
    if (v11) {
      CFRelease(v11);
    }
    if (v16) {
      CFRelease(v16);
    }
  }
  uint64_t v25 = (const void *)[a1 lowercaseString];
  uint64_t v26 = CFDictionaryGetValue((CFDictionaryRef)ABAddressCopyCountryCodeForCountryName__countryCodeForCountryNameMappingDictionary, v25);
  uint64_t v27 = (uint64_t)v26;
  if (v26) {
    CFRetain(v26);
  }
  if (ABLogAPIUsage()) {
    _ABLog2(6, (uint64_t)"CFStringRef ABAddressCopyCountryCodeForCountryName(CFStringRef)", 157, @">> ", @"countryCode=%@", v28, v29, v30, v27);
  }
  return v27;
}

void *ABCreateSingleLineStringForAddressDictionary(const __CFDictionary *a1, int a2)
{
  id v4 = (id)objc_msgSend((id)CFDictionaryGetValue(a1, @"CountryCode"), "lowercaseString");
  if ([v4 length] != 2)
  {
    CFDictionaryRef Value = (void *)CFDictionaryGetValue(a1, @"Country");
    id v4 = (id)ABAddressCopyCountryCodeForCountryName(Value);
  }
  if (!v4) {
    id v4 = +[ABPhoneFormatting abDefaultCountryCode];
  }
  CFDictionaryRef v6 = (const __CFDictionary *)[MEMORY[0x1E4F5A4A0] addressFormats];
  if (v6) {
    CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(v6, v4);
  }
  CFDictionaryRef v7 = (void *)[(id)-[__CFDictionary valueForKey:](v6 valueForKey:@"URL_FORMAT", "componentsSeparatedByString:", @", "];
  uint64_t v8 = objc_opt_new();
  uint64_t v9 = [v7 count];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 0;
    uint64_t v15 = *MEMORY[0x1E4F1C400];
    do
    {
      BOOL v12 = (void *)[v7 objectAtIndex:v11];
      uint64_t v13 = (void *)CFDictionaryGetValue(a1, v12);
      if ([v12 isEqualToString:@"Country"] && a2 && !objc_msgSend(v13, "length")) {
        uint64_t v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA20], "currentLocale"), "displayNameForKey:value:", v15, v4);
      }
      if ([v13 length])
      {
        if ([v8 length]) {
          [v8 appendString:@" "];
        }
        [v8 appendString:v13];
      }
      ++v11;
    }
    while (v10 != v11);
  }
  objc_msgSend(v8, "replaceOccurrencesOfString:withString:options:range:", @"\n", @" ", 2, 0, objc_msgSend(v8, "length"));
  return v8;
}

#error "19DD2E348: call analysis failed (funcsize=19)"

#error "19DD30590: call analysis failed (funcsize=20)"

void sub_19DD3059C()
{
}

#error "19DD30B9C: call analysis failed (funcsize=20)"

void sub_19DD30BA8()
{
}

void ABDeviceRegisterCallbackForFirstUnlock(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __ABDeviceRegisterCallbackForFirstUnlock_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (ABDeviceRegisterCallbackForFirstUnlock___once2 != -1) {
    dispatch_once(&ABDeviceRegisterCallbackForFirstUnlock___once2, block);
  }
}

uint64_t __ABDeviceRegisterCallbackForFirstUnlock_block_invoke(uint64_t result)
{
  if (__isBeforeFirstUnlockWithDataProtected)
  {
    uint64_t v1 = result;
    CFDictionaryRef result = [MEMORY[0x1E4F5A450] isDevicePasscodeProtected];
    if (result)
    {
      CFDictionaryRef result = [MEMORY[0x1E4F5A450] isDeviceUnlockedSinceBoot];
      __isBeforeFirstUnlockWithDataProtected = result ^ 1;
      if ((result & 1) == 0)
      {
        int out_token = 0;
        CFURLRef v2 = (const char *)[MEMORY[0x1E4F5A450] firstUnlockNotificationID];
        global_queue = dispatch_get_global_queue(0, 0);
        v4[0] = MEMORY[0x1E4F143A8];
        v4[1] = 3221225472;
        void v4[2] = __ABDeviceRegisterCallbackForFirstUnlock_block_invoke_2;
        v4[3] = &__block_descriptor_40_e8_v12__0i8l;
        v4[4] = *(void *)(v1 + 32);
        return notify_register_dispatch(v2, &out_token, global_queue, v4);
      }
    }
    else
    {
      __isBeforeFirstUnlockWithDataProtected = 0;
    }
  }
  return result;
}

uint64_t __ABDeviceRegisterCallbackForFirstUnlock_block_invoke_2(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  if (!__isBeforeFirstUnlockWithDataProtected) {
    goto LABEL_6;
  }
  if (([MEMORY[0x1E4F5A450] isDevicePasscodeProtected] & 1) == 0)
  {
    __isBeforeFirstUnlockWithDataProtected = 0;
    goto LABEL_6;
  }
  uint64_t result = [MEMORY[0x1E4F5A450] isDeviceUnlockedSinceBoot];
  __isBeforeFirstUnlockWithDataProtected = result ^ 1;
  if (((result ^ 1) & 1) == 0)
  {
LABEL_6:
    ABDiagnosticsEnabled();
    _ABLog2(4, (uint64_t)"void ABDeviceRegisterCallbackForFirstUnlock(void (*)(void))_block_invoke_2", 42, 0, @"Invoking callback for first unlock", v4, v5, v6, v7);
    return (*(uint64_t (**)(void))(a1 + 32))();
  }
  return result;
}

id buildTokenTable(int a1)
{
  __int16 v21 = 10;
  if (!ABReturnDelimiterData) {
    ABReturnDelimiterCFDataRef Data = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&v21 length:1];
  }
  memset(&callBacks, 0, 24);
  callBacks.copyDescription = (CFArrayCopyDescriptionCallBack)copyDescriptionCallBack;
  callBacks.equal = (CFArrayEqualCallBack)equalCallBack;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  CFMutableArrayRef v3 = CFArrayCreateMutable(0, 9, &callBacks);
  [v2 addObject:v3];
  CFRelease(v3);
  Token = createToken(@";", 4097, a1);
  CFArrayAppendValue(v3, Token);
  uint64_t v5 = createToken(@":", 8193, a1);
  CFArrayAppendValue(v3, v5);
  uint64_t v6 = createToken(@" ", 16385, a1);
  CFArrayAppendValue(v3, v6);
  uint64_t v7 = createToken(@"=", 1025, a1);
  CFArrayAppendValue(v3, v7);
  uint64_t v8 = createToken(@"\r", 32770, a1);
  CFArrayAppendValue(v3, v8);
  uint64_t v9 = createToken(@"\n", 32769, a1);
  CFArrayAppendValue(v3, v9);
  uint64_t v10 = createToken(@"\\"", 513, a1);
  CFArrayAppendValue(v3, v10);
  uint64_t v11 = createToken(@".", 257, a1);
  CFArrayAppendValue(v3, v11);
  BOOL v12 = createToken(@",", 193, a1);
  CFArrayAppendValue(v3, v12);
  CFMutableArrayRef v13 = CFArrayCreateMutable(0, 1, &callBacks);
  [v2 addObject:v13];
  CFRelease(v13);
  int v14 = createToken(@"END", 7, a1);
  CFArrayAppendValue(v13, v14);
  CFMutableArrayRef v15 = CFArrayCreateMutable(0, 2, &callBacks);
  [v2 addObject:v15];
  CFRelease(v15);
  uint64_t v16 = createToken(@"BEGIN", 5, a1);
  CFArrayAppendValue(v15, v16);
  CFDictionaryRef v17 = createToken(@"VCARD", 6, a1);
  CFArrayAppendValue(v15, v17);
  CFMutableArrayRef v18 = CFArrayCreateMutable(0, 1, &callBacks);
  [v2 addObject:v18];
  CFRelease(v18);
  uint64_t v19 = createToken(@"VERSION", 2049, a1);
  CFArrayAppendValue(v18, v19);
  return v2;
}

__CFString *copyDescriptionCallBack()
{
  return @"token";
}

BOOL equalCallBack(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_DWORD *createToken(__CFString *a1, int a2, int a3)
{
  uint64_t v6 = malloc_type_malloc(0x18uLL, 0x1080040BEC857D6uLL);
  *(void *)uint64_t v6 = a1;
  v6[2] = a2;
  uint64_t v7 = [(__CFString *)a1 length];
  if (a3)
  {
    uint64_t v8 = (UInt8 *)malloc_type_malloc(2 * v7 + 2, 0x1000040BDFB0063uLL);
    [(__CFString *)a1 getCharacters:v8];
  }
  else
  {
    uint64_t v8 = (UInt8 *)malloc_type_malloc(v7 + 1, 0x100004077774924uLL);
    CFIndex v9 = [(__CFString *)a1 length];
    uint64_t v10 = [(__CFString *)a1 length];
    v12.location = 0;
    v12.CFIndex length = v9;
    CFStringGetBytes(a1, v12, 0x600u, 0, 0, v8, v10 + 1, 0);
  }
  *((void *)v6 + 2) = v8;
  return v6;
}

uint64_t ABIsDataAccess()
{
  if (dataAccessOnceToken != -1) {
    dispatch_once(&dataAccessOnceToken, &__block_literal_global_7);
  }
  return ABIsDataAccess_result;
}

id __ABIsDataAccess_block_invoke()
{
  id result = +[ABUtils mainBundleID];
  if (result)
  {
    id result = (id)CFEqual(result, @"com.apple.dataaccess.dataaccessd");
    BOOL v1 = result != 0;
  }
  else
  {
    BOOL v1 = 0;
  }
  ABIsDataAccess_id result = v1;
  return result;
}

uint64_t ABIsDatabaseDoctor()
{
  if (databaseDoctorOnceToken != -1) {
    dispatch_once(&databaseDoctorOnceToken, &__block_literal_global_3);
  }
  return ABIsDatabaseDoctor_result;
}

id __ABIsDatabaseDoctor_block_invoke()
{
  id result = +[ABUtils processName];
  if (result) {
    id result = (id)[result isEqualToString:@"ABDatabaseDoctor"];
  }
  ABIsDatabaseDoctor_id result = (char)result;
  return result;
}

CFComparisonResult _SortPeople(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 + 320);
  if (v5 && ![v5 isValid]) {
    return 0;
  }
  int v6 = _sortOrdering;
  return ABPersonCompareNameOfPeople(a1, a2, v6);
}

void ABImageUtilsCenteredRectWithFullScreenRatioForImage(CGImage *a1)
{
  if (a1)
  {
    double Width = (double)CGImageGetWidth(a1);
    size_t Height = CGImageGetHeight(a1);
    ABImageUtilsCenteredRectWithFullScreenRatioForRect(0.0, 0.0, Width, (double)Height);
  }
}

double ABImageUtilsCenteredRectWithFullScreenRatioForRect(double a1, double a2, double a3, double a4)
{
  if (a3 / a4 >= 0.666666667) {
    double v4 = ceil(a4 * 0.666666667);
  }
  else {
    double v4 = a3;
  }
  return floor((a3 - v4) * 0.5);
}

double ABImageUtilsCenteredOverflowRectWithFullScreenRatioForRectWithAvailableSize(double result, double a2, double a3, double a4, double a5, double a6)
{
  if (a3 / a4 >= 0.666666667)
  {
    if (ceil(a3 / 0.666666667) > a6) {
      return floor(result + (a3 - a6 * 0.666666667) * 0.5);
    }
  }
  else
  {
    double v7 = ceil(a4 * 0.666666667);
    if (v7 <= a5)
    {
      double v8 = floor(result + (v7 - a3) * -0.5);
      id result = 0.0;
      if (v8 > 0.0)
      {
        double v9 = v7 + v8 - a5;
        double v10 = floor(v8 - v9);
        if (v9 <= 0.0) {
          return v8;
        }
        else {
          return v10;
        }
      }
    }
    else
    {
      return 0.0;
    }
  }
  return result;
}

double ABImageUtilsCenteredSquareForRect(double a1, double a2, double a3, double a4)
{
  if (ABLogAPIUsage())
  {
    CFRange v12 = _isMainThread();
    double v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CGRect ABImageUtilsCenteredSquareForRect(CGRect)", 182, v7, 0, v8, v9, v10, (uint64_t)v12);
    CFRelease(v7);
  }
  if (a3 > a4) {
    return a1 + (a3 - a4) * 0.5;
  }
  return a1;
}

CGImageRef ABImageUtilsCreateImageFromData(const __CFData *a1)
{
  if (!a1) {
    return 0;
  }
  BOOL v1 = CGImageSourceCreateWithData(a1, 0);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  if (CGImageSourceGetCount(v1))
  {
    pthread_once(&__thumbnailPropertiesOnce, (void (*)(void))__initializeThumbnailProperties);
    CGImageRef ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v2, 0, (CFDictionaryRef)__thumbnailProperties);
  }
  else
  {
    CGImageRef ThumbnailAtIndex = 0;
  }
  CFRelease(v2);
  return ThumbnailAtIndex;
}

CGImageRef ABImageUtilsCreateImageFromImageSourceWithSizeCropRectMaxSize(CGImageSource *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  if (!a1 || !CGImageSourceGetCount(a1)) {
    return 0;
  }
  double v28 = a5;
  CFMutableArrayRef v18 = (void *)*MEMORY[0x1E4F2FE28];
  keys[0] = *(void **)MEMORY[0x1E4F2FE48];
  keys[1] = v18;
  keys[2] = *(void **)MEMORY[0x1E4F2FF68];
  double v19 = fmin(a6 / a8, a7 / a9);
  values[0] = *(void **)MEMORY[0x1E4F1CFD0];
  values[1] = values[0];
  unsigned int valuePtr = vcvtpd_s64_f64(fmax(a3, a2) / v19);
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionaryRef v21 = CFDictionaryCreate(v20, (const void **)keys, (const void **)values, 3, 0, 0);
  if (v21)
  {
    CFDictionaryRef v22 = v21;
    CGImageRef ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(a1, 0, v21);
    if (ThumbnailAtIndex)
    {
      __int16 v24 = ThumbnailAtIndex;
      if (v19 >= 1.0)
      {
        a4 = round(a4 / v19);
        double v25 = round(v28 / v19);
        a6 = a8;
        a7 = a9;
      }
      else
      {
        double v25 = v28;
      }
      CGImageRef ImageFromImageWithCropRect = ABImageUtilsCreateImageFromImageWithCropRect(ThumbnailAtIndex, a4, v25, a6, a7);
      CFRelease(v24);
    }
    else
    {
      CGImageRef ImageFromImageWithCropRect = 0;
    }
    CFRelease(v22);
  }
  else
  {
    CGImageRef ImageFromImageWithCropRect = 0;
  }
  CFRelease(cf);
  return ImageFromImageWithCropRect;
}

CGImageRef ABImageUtilsCreateImageFromImageWithCropRect(CGImage *a1, double a2, double a3, double a4, double a5)
{
  if (!a1) {
    return 0;
  }
  CGRect v30 = CGRectStandardize(*(CGRect *)&a2);
  CGRect v31 = CGRectIntegral(v30);
  DeviceRGB = 0;
  if (v31.size.width <= 0.0) {
    return DeviceRGB;
  }
  double height = v31.size.height;
  if (v31.size.height <= 0.0) {
    return DeviceRGB;
  }
  double x = v31.origin.x;
  double y = v31.origin.y;
  double width = v31.size.width;
  double v11 = (double)CGImageGetWidth(a1);
  double v12 = (double)CGImageGetHeight(a1);
  v32.origin.double x = 0.0;
  v32.origin.double y = 0.0;
  v32.size.double width = v11;
  v32.size.double height = v12;
  v43.origin.double x = x;
  v43.origin.double y = y;
  v43.size.double width = width;
  v43.size.double height = height;
  CGRect v33 = CGRectIntersection(v32, v43);
  CGRect v34 = CGRectStandardize(v33);
  if (v34.size.width < width || v34.size.height < height)
  {
    DeviceRGB = 0;
    if (v34.size.width < 0.0) {
      return DeviceRGB;
    }
    if (v34.size.height < 0.0) {
      return DeviceRGB;
    }
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    if (!DeviceRGB) {
      return DeviceRGB;
    }
    int v14 = CGBitmapContextCreate(0, (unint64_t)width, (unint64_t)height, 8uLL, vcvtd_n_u64_f64(width, 2uLL), DeviceRGB, 0x2006u);
    CGColorSpaceRelease(DeviceRGB);
    if (v14)
    {
      CGContextSetFillColor(v14, ABImageUtilsCreateImageFromImageWithCropRect_black);
      v35.origin.double x = 0.0;
      v35.origin.double y = 0.0;
      v35.size.double width = width;
      v35.size.double height = height;
      CGContextFillRect(v14, v35);
      v36.origin.double x = x;
      v36.origin.double y = y;
      v36.size.double width = width;
      v36.size.double height = height;
      CGImageRef v15 = CGImageCreateWithImageInRect(a1, v36);
      if (v15)
      {
        uint64_t v16 = v15;
        v44.origin.double x = -x;
        v44.origin.double y = -y;
        v37.origin.double x = 0.0;
        v37.origin.double y = 0.0;
        v37.size.double width = width;
        v37.size.double height = height;
        v44.size.double width = v11;
        v44.size.double height = v12;
        CGRect v38 = CGRectIntersection(v37, v44);
        CGFloat v17 = v38.origin.x;
        CGFloat v18 = v38.origin.y;
        CGFloat v19 = v38.size.width;
        CGFloat v20 = v38.size.height;
        memset(&v28, 0, sizeof(v28));
        CGAffineTransformMakeScale(&v28, 1.0, -1.0);
        memset(&v27, 0, sizeof(v27));
        CGAffineTransformMakeTranslation(&v27, 0.0, height);
        CGAffineTransform v26 = v28;
        v39.origin.double x = v17;
        v39.origin.double y = v18;
        v39.size.double width = v19;
        v39.size.double height = v20;
        CGRect v40 = CGRectApplyAffineTransform(v39, &v26);
        CGAffineTransform v26 = v27;
        CGRect v41 = CGRectApplyAffineTransform(v40, &v26);
        CGRect v42 = CGRectStandardize(v41);
        CGContextDrawImage(v14, v42, v16);
        DeviceRGB = CGBitmapContextCreateImage(v14);
        CGImageRelease(v16);
      }
      else
      {
        DeviceRGB = 0;
      }
      CFRelease(v14);
      return DeviceRGB;
    }
    return 0;
  }
  double v22 = x;
  double v23 = y;
  double v24 = width;
  double v25 = height;
  return CGImageCreateWithImageInRect(a1, *(CGRect *)&v22);
}

uint64_t _ABImageUtilsImageIsNormalOrientation(const __CFData *a1)
{
  if (!a1) {
    return 1;
  }
  BOOL v1 = CGImageSourceCreateWithData(a1, 0);
  if (!v1) {
    return 1;
  }
  id v2 = v1;
  CFDictionaryRef v3 = CGImageSourceCopyPropertiesAtIndex(v1, 0, 0);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F2FCA0]);
    if (Value)
    {
      int valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      BOOL v6 = valuePtr == 1;
    }
    else
    {
      BOOL v6 = 1;
    }
    CFRelease(v4);
  }
  else
  {
    BOOL v6 = 1;
  }
  CFRelease(v2);
  return v6;
}

BOOL ABImageUtilsCopyImageSourceAndGetSizeFromData(const __CFData *a1, CGImageSource **a2, int *a3, int *a4)
{
  if (ABLogAPIUsage())
  {
    double v22 = _isMainThread();
    uint64_t v8 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABImageUtilsCopyImageSourceAndGetSizeFromData(CFDataRef, CGImageSourceRef *, int *, int *)", 279, v8, 0, v9, v10, v11, (uint64_t)v22);
    CFRelease(v8);
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (!a1) {
    return 0;
  }
  double v12 = CGImageSourceCreateWithData(a1, 0);
  if (v12)
  {
    CFMutableArrayRef v13 = v12;
    CFDictionaryRef v14 = CGImageSourceCopyPropertiesAtIndex(v12, 0, 0);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      int valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E4F2FCA0]);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        BOOL v17 = valuePtr > 4;
      }
      else
      {
        BOOL v17 = 0;
      }
      CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E4F2FD00]);
      if (v20 && CFNumberGetValue(v20, kCFNumberIntType, &valuePtr))
      {
        if (v17)
        {
          if (a4) {
            *a4 = valuePtr;
          }
        }
        else if (a3)
        {
          *a3 = valuePtr;
        }
      }
      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E4F2FCE8]);
      if (v21 && CFNumberGetValue(v21, kCFNumberIntType, &valuePtr))
      {
        if (v17)
        {
          if (a3) {
            *a3 = valuePtr;
          }
        }
        else if (a4)
        {
          *a4 = valuePtr;
        }
      }
      CFRelease(v15);
      if (a2)
      {
        *a2 = v13;
        int v19 = 1;
        return v19 != 0;
      }
      int v19 = 1;
    }
    else
    {
      int v19 = 0;
    }
    CFRelease(v13);
    return v19 != 0;
  }
  int v19 = 0;
  return v19 != 0;
}

uint64_t ABImageUtilsIsImageDataInSyncCompatibleFormat(const __CFData *a1)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  id v2 = (void *)*MEMORY[0x1E4F22678];
  values[0] = *(void **)MEMORY[0x1E4F22610];
  values[1] = v2;
  CFArrayRef v3 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, 0);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  uint64_t IsImageDataOfFormatInUTIs = ABImageUtilsIsImageDataOfFormatInUTIs(a1, v3);
  CFRelease(v4);
  return IsImageDataOfFormatInUTIs;
}

uint64_t ABImageUtilsIsImageDataOfFormatInUTIs(const __CFData *a1, CFArrayRef theArray)
{
  uint64_t result = 0;
  if (a1 && theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    BOOL v6 = CGImageSourceCreateWithData(a1, 0);
    if (v6)
    {
      double v7 = v6;
      CFStringRef Type = CGImageSourceGetType(v6);
      char v9 = 0;
      if (Type && Count >= 1)
      {
        CFStringRef v10 = Type;
        char v9 = 0;
        uint64_t v11 = 1;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v11 - 1);
          if (UTTypeConformsTo(v10, ValueAtIndex)) {
            char v9 = 1;
          }
          if (v11 >= Count) {
            break;
          }
          ++v11;
        }
        while ((v9 & 1) == 0);
      }
      CFRelease(v7);
    }
    else
    {
      char v9 = 0;
    }
    return v9 & 1;
  }
  return result;
}

BOOL _ABImageUtilsCropRectMatchesOrignalSizeCropRectWithScalingFactor(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a9 != 1.0)
  {
    a5 = floor(a5 * a9);
    a6 = floor(a6 * a9);
    a7 = ceil(a7 * a9);
    a8 = ceil(a8 * a9);
  }
  return CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)&a5);
}

BOOL ABImageUtilsOriginalSizeCropRectMatchesSyncedCropRect(uint64_t a1, const __CFData *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  CFDataRef v11 = ABPersonCopyImageDataAndInvertedCropRect(a1, 2, (_DWORD *)&v25 + 1, (int *)&v25, (_DWORD *)&v24 + 1, &v24);
  double v12 = (double)SHIDWORD(v25);
  double v13 = (double)(int)v25;
  double v14 = (double)SHIDWORD(v24);
  double v15 = (double)(int)v24;
  uint64_t v16 = ABOSLogGeneral();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219776;
    *(double *)CGAffineTransform v27 = v12;
    *(_WORD *)&v27[8] = 2048;
    *(double *)CGAffineTransform v28 = v13;
    *(_WORD *)&v28[8] = 2048;
    double v29 = v14;
    __int16 v30 = 2048;
    double v31 = v15;
    __int16 v32 = 2048;
    CGFloat v33 = a3;
    __int16 v34 = 2048;
    CGFloat v35 = a4;
    __int16 v36 = 2048;
    CGFloat v37 = a5;
    __int16 v38 = 2048;
    CGFloat v39 = a6;
    _os_log_debug_impl(&dword_19DCDB000, v16, OS_LOG_TYPE_DEBUG, "[Likeness Update] original cropRect {%.2f, %.2f, %.2f, %.2f} vs syncedCropRect: {%.2f, %.2f, %.2f, %.2f}", buf, 0x52u);
  }
  v41.origin.double x = a3;
  v41.origin.double y = a4;
  v41.size.double width = a5;
  v41.size.double height = a6;
  v42.origin.double x = v12;
  v42.origin.double y = v13;
  v42.size.double width = v14;
  v42.size.double height = v15;
  if (CGRectEqualToRect(v41, v42))
  {
    BOOL v17 = 1;
  }
  else
  {
    uint64_t v23 = 0;
    SizeFromCFDataRef Data = ABImageUtilsCopyImageSourceAndGetSizeFromData(v11, 0, 0, (int *)&v23 + 1);
    BOOL v19 = ABImageUtilsCopyImageSourceAndGetSizeFromData(a2, 0, 0, (int *)&v23);
    BOOL v17 = 0;
    if (SizeFromData && v19)
    {
      BOOL v17 = _ABImageUtilsCropRectMatchesOrignalSizeCropRectWithScalingFactor(a3, a4, a5, a6, v12, v13, v14, v15, (double)(int)v23 / (double)SHIDWORD(v23));
      CFNumberRef v20 = ABOSLogGeneral();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        double v22 = @"NO";
        if (v17) {
          double v22 = @"YES";
        }
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)CGAffineTransform v27 = HIDWORD(v23);
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v23;
        *(_WORD *)CGAffineTransform v28 = 2112;
        *(void *)&v28[2] = v22;
        _os_log_debug_impl(&dword_19DCDB000, v20, OS_LOG_TYPE_DEBUG, "[Likeness Update] original height %i vs sync height: %i, cropRect is scaled down: %@", buf, 0x18u);
      }
    }
  }

  return v17;
}

__CFData *ABImageUtilsCreateScaledImageData(CGImage *a1, unsigned int a2, const __CFString *a3, void *a4, double a5, double a6, double a7)
{
  if (a2 != 5 && a2 != 8) {
    ABImageUtilsCreateScaledImageData_cold_1();
  }
  ImageCFDataRef Data = 0;
  if (a2 == 5) {
    uint32_t v15 = 4102;
  }
  else {
    uint32_t v15 = 8198;
  }
  BOOL v16 = a7 <= 0.0 || a1 == 0;
  if (!v16 && a6 > 0.0 && a5 > 0.0)
  {
    CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
    if (DeviceRGB)
    {
      CGFloat v18 = DeviceRGB;
      double v19 = round(a5 * a7);
      double v20 = round(a6 * a7);
      size_t Width = CGImageGetWidth(a1);
      size_t Height = CGImageGetHeight(a1);
      if (a3 && (v19 == (double)Width ? (BOOL v23 = v20 == (double)Height) : (BOOL v23 = 0), v23))
      {
        ImageCFDataRef Data = _ABImageUtilsCreateImageData(a1, a3, a7);
        if (a4) {
          *a4 = CFRetain(a1);
        }
      }
      else
      {
        double v24 = 4.0;
        if (a2 == 5) {
          double v24 = 2.0;
        }
        uint64_t v25 = CGBitmapContextCreate(0, (unint64_t)v19, (unint64_t)v20, a2, (unint64_t)(v19 * v24), v18, v15);
        if (v25)
        {
          CGAffineTransform v26 = v25;
          v32.origin.double x = 0.0;
          v32.origin.double y = 0.0;
          v32.size.double width = v19;
          v32.size.double height = v20;
          CGContextDrawImage(v25, v32, a1);
          if (a3)
          {
            Image = CGBitmapContextCreateImage(v26);
            ImageCFDataRef Data = _ABImageUtilsCreateImageData(Image, a3, a7);
            if (a4) {
              *a4 = Image;
            }
            else {
              CGImageRelease(Image);
            }
          }
          else
          {
            CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFDataRef Data = (const UInt8 *)CGBitmapContextGetData(v26);
            size_t BytesPerRow = CGBitmapContextGetBytesPerRow(v26);
            ImageCFDataRef Data = CFDataCreate(v28, Data, (uint64_t)(v19 * (double)BytesPerRow));
          }
          CFRelease(v26);
        }
        else
        {
          ImageCFDataRef Data = 0;
        }
      }
      CGColorSpaceRelease(v18);
    }
    else
    {
      return 0;
    }
  }
  return ImageData;
}

__CFData *_ABImageUtilsCreateImageData(CGImage *a1, const __CFString *a2, double a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v8 = CGImageDestinationCreateWithData(Mutable, a2, 1uLL, 0);
  if (v8)
  {
    char v9 = v8;
    if (a3 == 1.0)
    {
      CGImageDestinationAddImage(v8, a1, 0);
    }
    else
    {
      double v14 = a3 * 72.0;
      CFNumberRef v10 = CFNumberCreate(v6, kCFNumberDoubleType, &v14);
      CFDataRef v11 = (void *)*MEMORY[0x1E4F2F6A8];
      keys[0] = *(void **)MEMORY[0x1E4F2F6B0];
      keys[1] = v11;
      values[0] = v10;
      values[1] = v10;
      CFDictionaryRef v12 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CGImageDestinationAddImage(v9, a1, v12);
      CFRelease(v12);
      CFRelease(v10);
    }
    CGImageDestinationFinalize(v9);
    CFRelease(v9);
  }
  if (Mutable && !CFDataGetLength(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t ABPersonImageFormatGetPixelWidth(unsigned int a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return dword_19DD55734[a1];
  }
}

uint64_t ABPersonImageFormatGetPixelHeight(unsigned int a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return dword_19DD55748[a1];
  }
}

float ABPersonImageFormatGetScale(int a1)
{
  float result = 1.0;
  if (a1 == 4) {
    return 2.0;
  }
  return result;
}

BOOL ABPersonImageFormatIsLessThanOrEqualToPixelSize(unsigned int a1, signed int a2, signed int a3)
{
  if (a1 > 4) {
    signed int v3 = 0;
  }
  else {
    signed int v3 = dword_19DD55734[a1];
  }
  if (v3 > a2) {
    return 0;
  }
  if (a1 > 4) {
    signed int v5 = 0;
  }
  else {
    signed int v5 = dword_19DD55748[a1];
  }
  return v5 <= a3;
}

__CFData *ABImageUtilsCopySyncImageForPerson(const void *a1, unsigned int a2, unsigned char *a3, _DWORD *a4, int a5, int *a6, int *a7, int *a8, int *a9)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  BOOL v17 = ABOSLogGeneral();
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(_DWORD *)buf = 67109632;
  *(_DWORD *)uint64_t v66 = ABRecordGetRecordID(a1);
  *(_WORD *)&v66[4] = 1024;
  *(_DWORD *)&v66[6] = a2;
  *(_WORD *)uint64_t v67 = 1024;
  *(_DWORD *)&v67[2] = a5;
  _os_log_debug_impl(&dword_19DCDB000, v17, OS_LOG_TYPE_DEBUG, "[Likeness Update] Enter ABImageUtilsCopySyncImageForPerson: ABuint64_t RecordID = %i, maxSize = %i, allowOverflow = %i", buf, 0x14u);
  if (a3) {
LABEL_3:
  }
    *a3 = 1;
LABEL_4:
  if (a6) {
    *a6 = 0;
  }
  if (a7) {
    *a7 = 0;
  }
  if (a8) {
    *a8 = 0;
  }
  if (a9) {
    *a9 = 0;
  }
  if (a4) {
    *a4 = 2;
  }
  uint64_t v63 = 0;
  double v64 = 1.0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  CGImageSourceRef isrc = 0;
  CFDataRef v18 = ABPersonCopyImageDataAndInvertedCropRect((uint64_t)a1, 2, (_DWORD *)&v63 + 1, (int *)&v63, (_DWORD *)&v62 + 1, &v62);
  double v19 = (id)CFMakeCollectable(v18);
  double v20 = ABOSLogGeneral();
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
  if (!v19)
  {
    if (v21)
    {
      ABImageUtilsCopySyncImageForPerson_cold_1();
      if (a3) {
        goto LABEL_39;
      }
    }
    else if (a3)
    {
LABEL_39:
      __int16 v30 = 0;
      *a3 = 0;
      return v30;
    }
    return 0;
  }
  if (v21)
  {
    uint64_t v38 = [v19 length];
    *(_DWORD *)buf = 134219008;
    *(void *)uint64_t v66 = v38;
    *(_WORD *)&v66[8] = 1024;
    *(_DWORD *)uint64_t v67 = HIDWORD(v63);
    *(_WORD *)&v67[4] = 1024;
    *(_DWORD *)uint64_t v68 = v63;
    *(_WORD *)&v68[4] = 1024;
    int v69 = HIDWORD(v62);
    __int16 v70 = 1024;
    int v71 = v62;
    _os_log_debug_impl(&dword_19DCDB000, v20, OS_LOG_TYPE_DEBUG, "Original image has CFIndex length = %lu with thumbnail crop rect (%i, %i, %i, %i)", buf, 0x24u);
  }
  if (ABLogDebugLevelEnabled()) {
    [v19 writeToFile:objc_msgSend(NSString, "stringWithFormat:", @"/tmp/%i-origImage.jpg", ABRecordGetRecordID(a1)), 1 atomically];
  }
  if (!ABImageUtilsCopyImageSourceAndGetSizeFromData((const __CFData *)v19, &isrc, (int *)&v61 + 1, (int *)&v61))
  {
    CGImageSourceRef isrc = 0;
    uint64_t v61 = 0;
    goto LABEL_37;
  }
  if ((int)v61 < 1 || v61 <= 0)
  {
    if (isrc)
    {
      CFRelease(isrc);
      CGImageSourceRef isrc = 0;
    }
LABEL_37:
    double v31 = ABOSLogGeneral();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      ABImageUtilsCopySyncImageForPerson_cold_2();
      if (a3) {
        goto LABEL_39;
      }
    }
    else if (a3)
    {
      goto LABEL_39;
    }
    return 0;
  }
  unsigned int v58 = a2;
  CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F22678];
  CFStringRef Type = CGImageSourceGetType(isrc);
  int v24 = UTTypeConformsTo(v22, Type);
  if (v24 && (ImageAtIndedouble x = CGImageSourceCreateImageAtIndex(isrc, 0, 0)) != 0)
  {
    CGAffineTransform v26 = ImageAtIndex;
    CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
    if (AlphaInfo) {
      BOOL v28 = AlphaInfo - 7 >= 0xFFFFFFFE;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    int v57 = v29;
    CFRelease(v26);
  }
  else
  {
    int v57 = 0;
  }
  uint64_t v33 = ABPersonCopyImageDataAndCropRect((uint64_t)a1, 5, 0, 0, 0, 0);
  if (v33)
  {
    __int16 v30 = (__CFData *)v33;
    __int16 v34 = ABOSLogGeneral();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
      ABImageUtilsCopySyncImageForPerson_cold_7();
    }
    if (ABLogDebugLevelEnabled()) {
      -[__CFData writeToFile:atomically:](v30, "writeToFile:atomically:", objc_msgSend(NSString, "stringWithFormat:", @"/tmp/%i-savedSyncImage.jpg", ABRecordGetRecordID(a1)), 1);
    }
    uint64_t v59 = 0;
    if (ABImageUtilsCopyImageSourceAndGetSizeFromData(v30, 0, (int *)&v59 + 1, (int *)&v59))
    {
      double v64 = (double)(int)v59 / (double)(int)v61;
      if (vabdd_f64(v64, (double)SHIDWORD(v59) / (double)SHIDWORD(v61)) > 1.0)
      {
        CGFloat v35 = ABOSLogGeneral();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)uint64_t v66 = HIDWORD(v59);
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = v59;
          *(_WORD *)uint64_t v67 = 1024;
          *(_DWORD *)&v67[2] = HIDWORD(v61);
          *(_WORD *)uint64_t v68 = 1024;
          *(_DWORD *)&v68[2] = v61;
          _os_log_error_impl(&dword_19DCDB000, v35, OS_LOG_TYPE_ERROR, "[Likeness Update] ABImageUtilsCopySyncImageForPerson: inconsistent sync image ratio (%ix%i) vs original image ratio (%ix%i). Crop rect will be messed up", buf, 0x1Au);
          if (!a3) {
            goto LABEL_82;
          }
LABEL_58:
          *a3 = 0;
          goto LABEL_82;
        }
      }
LABEL_57:
      if (!a3) {
        goto LABEL_82;
      }
      goto LABEL_58;
    }
    CGFloat v37 = ABOSLogGeneral();
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      goto LABEL_57;
    }
    ABImageUtilsCopySyncImageForPerson_cold_6();
    if (a3) {
      goto LABEL_58;
    }
LABEL_82:
    double v48 = v64;
    if (v64 == 1.0)
    {
      if (a6) {
        *a6 = HIDWORD(v63);
      }
      if (a7) {
        *a7 = v63;
      }
      if (a8) {
        *a8 = HIDWORD(v62);
      }
      if (!a9) {
        goto LABEL_100;
      }
      unsigned int v49 = v62;
    }
    else
    {
      if (a6) {
        *a6 = vcvtmd_s64_f64(v64 * (double)SHIDWORD(v63));
      }
      if (a7) {
        *a7 = vcvtmd_s64_f64(v48 * (double)(int)v63);
      }
      if (a8) {
        *a8 = vcvtpd_s64_f64(v48 * (double)SHIDWORD(v62));
      }
      if (!a9) {
        goto LABEL_100;
      }
      unsigned int v49 = vcvtpd_s64_f64(v48 * (double)(int)v62);
    }
    *a9 = v49;
LABEL_100:
    if (ABLogDebugLevelEnabled()) {
      -[__CFData writeToFile:atomically:](v30, "writeToFile:atomically:", objc_msgSend(NSString, "stringWithFormat:", @"/tmp/%i-syncImage.jpg", ABRecordGetRecordID(a1)), 1);
    }
    ABPersonSetImageHashForImageData(a1, v30, 0);
    goto LABEL_103;
  }
  if (_ABImageUtilsImageIsNormalOrientation((const __CFData *)v19))
  {
    unsigned int v36 = v58;
  }
  else
  {
    CGFloat v39 = ABOSLogGeneral();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
      ABImageUtilsCopySyncImageForPerson_cold_5();
    }
    ImageFromCFDataRef Data = ABImageUtilsCreateImageFromData((const __CFData *)v19);
    CGRect v41 = ImageFromData;
    if (v24) {
      CFStringRef v42 = @"public.png";
    }
    else {
      CFStringRef v42 = @"public.jpeg";
    }
    ImageCFDataRef Data = _ABImageUtilsCreateImageData(ImageFromData, v42, 1.0);
    double v19 = (id)CFMakeCollectable(ImageData);
    if (v41) {
      CFRelease(v41);
    }
    unsigned int v36 = v58;
    if (ABLogDebugLevelEnabled()) {
      [v19 writeToFile:objc_msgSend(NSString, "stringWithFormat:", @"/tmp/%i-normalizedOrigImage.jpg", ABRecordGetRecordID(a1)), 1 atomically];
    }
  }
  unint64_t v44 = [v19 length];
  if (v19 && v44 <= v36 && ABImageUtilsIsImageDataInSyncCompatibleFormat((const __CFData *)v19))
  {
    uint64_t v45 = ABOSLogGeneral();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      ABImageUtilsCopySyncImageForPerson_cold_4();
    }
    __int16 v30 = v19;
    if (v30) {
      goto LABEL_82;
    }
  }
  __int16 v30 = _copyImageDataReducedUpToSize((const __CFData *)v19, (uint64_t)isrc, &v64, HIDWORD(v61), v61, v36, a5, v57);
  if (v30) {
    int v46 = 0;
  }
  else {
    int v46 = v57;
  }
  if (v46 == 1)
  {
    uint64_t v47 = ABOSLogGeneral();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19DCDB000, v47, OS_LOG_TYPE_DEFAULT, "[Likeness Update] Scaling failed to reduce to max size, trying again without alpha preservation by allowing JPEG conversion.", buf, 2u);
    }
    __int16 v30 = _copyImageDataReducedUpToSize((const __CFData *)v19, (uint64_t)isrc, &v64, HIDWORD(v61), v61, v36, a5, 0);
  }
  if (v30) {
    goto LABEL_82;
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v56 = ABOSLogGeneral();
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
    ABImageUtilsCopySyncImageForPerson_cold_3(v19, v36, v56);
  }
  __int16 v30 = 0;
LABEL_103:
  uint64_t v50 = ABOSLogGeneral();
  if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_114;
  }
  uint64_t v51 = [(__CFData *)v30 length];
  if (a6)
  {
    int v52 = *a6;
    if (a7) {
      goto LABEL_106;
    }
  }
  else
  {
    int v52 = -1;
    if (a7)
    {
LABEL_106:
      int v53 = *a7;
      if (a8) {
        goto LABEL_107;
      }
LABEL_111:
      int v54 = -1;
      if (a9) {
        goto LABEL_108;
      }
LABEL_112:
      int v55 = -1;
      goto LABEL_113;
    }
  }
  int v53 = -1;
  if (!a8) {
    goto LABEL_111;
  }
LABEL_107:
  int v54 = *a8;
  if (!a9) {
    goto LABEL_112;
  }
LABEL_108:
  int v55 = *a9;
LABEL_113:
  *(_DWORD *)buf = 134219008;
  *(void *)uint64_t v66 = v51;
  *(_WORD *)&v66[8] = 1024;
  *(_DWORD *)uint64_t v67 = v52;
  *(_WORD *)&v67[4] = 1024;
  *(_DWORD *)uint64_t v68 = v53;
  *(_WORD *)&v68[4] = 1024;
  int v69 = v54;
  __int16 v70 = 1024;
  int v71 = v55;
  _os_log_impl(&dword_19DCDB000, v50, OS_LOG_TYPE_DEFAULT, "[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: sync image CFIndex length = %lu with thumbnail crop rect (%i, %i, %i, %i)", buf, 0x24u);
LABEL_114:
  if (isrc) {
    CFRelease(isrc);
  }
  return v30;
}

__CFData *_copyImageDataReducedUpToSize(const __CFData *a1, uint64_t a2, double *a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8)
{
  if (a1 && a7 && (a8 & 1) == 0)
  {
    if (ABDiagnosticsEnabled()) {
      _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 716, 0, @"Trying to jpeg compresss the original image.", v10, v11, v12, v62);
    }
    uint64_t v65 = *MEMORY[0x1E4F2F430];
    float v13 = 0.8;
    double v14 = 0.800000012;
    do
    {
      uint32_t v15 = CGImageSourceCreateWithData(a1, 0);
      if (v15)
      {
        BOOL v16 = v15;
        if (CGImageSourceGetCount(v15)
          && (CFDictionaryRef v17 = CGImageSourceCopyPropertiesAtIndex(v16, 0, 0),
              CFTypeRef v18 = (id)CFMakeCollectable(v17),
              (ImageAtIndedouble x = CGImageSourceCreateImageAtIndex(v16, 0, 0)) != 0))
        {
          double v20 = ImageAtIndex;
          BOOL v21 = (__CFData *)objc_opt_new();
          CGImageDestinationRef v22 = CGImageDestinationCreateWithData(v21, @"public.jpeg", 1uLL, 0);
          if (v22)
          {
            BOOL v23 = v22;
            int v24 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v18];
            *(float *)&double v25 = v13;
            objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v25), v65);
            CGImageDestinationAddImage(v23, v20, (CFDictionaryRef)v24);
            CGImageDestinationFinalize(v23);
            CFRelease(v23);
          }
          CGImageRelease(v20);
        }
        else
        {
          BOOL v21 = 0;
        }
        CFRelease(v16);
      }
      else
      {
        BOOL v21 = 0;
      }
      if (ABDiagnosticsEnabled())
      {
        [(__CFData *)v21 length];
        _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 719, 0, @"Original image at quality %f has length %lu", v26, v27, v28, *(uint64_t *)&v14);
      }
      if (v21)
      {
        if ([(__CFData *)v21 length] < (unint64_t)a6) {
          return v21;
        }
        CFRelease(v21);
      }
      float v13 = v14 + -0.2;
      double v14 = v13;
    }
    while (v13 > 0.0);
  }
  if (a1)
  {
    if (ABDiagnosticsEnabled()) {
      _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 731, 0, @"Trying to scale down the original image.", v29, v30, v31, v62);
    }
    if (a2)
    {
      double v32 = (double)(int)a4;
      double v33 = (double)a5;
      if ((double)(int)a4 <= (double)a5) {
        double v34 = (double)a5;
      }
      else {
        double v34 = (double)(int)a4;
      }
      if ((double)(int)a4 >= (double)a5) {
        double v32 = (double)a5;
      }
      double v35 = v32 / v34;
      if (a8) {
        CFStringRef v36 = @"public.png";
      }
      else {
        CFStringRef v36 = @"public.jpeg";
      }
      unint64_t v37 = a6;
      uint64_t v66 = *MEMORY[0x1E4F2F430];
      unsigned int v38 = 1024;
      do
      {
        double v39 = (double)v38;
        if (v34 <= (double)v38)
        {
          BOOL v21 = 0;
        }
        else
        {
          if (v34 == v33) {
            double v40 = (double)(unint64_t)(v35 * v39);
          }
          else {
            double v40 = (double)v38;
          }
          if (v34 == v33) {
            double v41 = (double)v38;
          }
          else {
            double v41 = (double)(unint64_t)(v35 * v39);
          }
          CFStringRef v42 = CGImageSourceCreateWithData(a1, 0);
          if (v42)
          {
            CGRect v43 = v42;
            if (CGImageSourceGetCount(v42))
            {
              CFDictionaryRef v44 = CGImageSourceCopyPropertiesAtIndex(v43, 0, 0);
              CFTypeRef v45 = (id)CFMakeCollectable(v44);
              CGImageRef v46 = CGImageSourceCreateImageAtIndex(v43, 0, 0);
              if (v46)
              {
                uint64_t v47 = v46;
                if ((unint64_t)v40) {
                  BOOL v48 = (unint64_t)v41 == 0;
                }
                else {
                  BOOL v48 = 1;
                }
                if (!v48)
                {
                  uint64_t v49 = CGImageCreateByScaling();
                  CFRelease(v47);
                  uint64_t v47 = (void *)v49;
                }
                BOOL v21 = (__CFData *)objc_opt_new();
                CGImageDestinationRef v50 = CGImageDestinationCreateWithData(v21, v36, 1uLL, 0);
                if (v50)
                {
                  uint64_t v51 = v50;
                  CFDictionaryRef v52 = (const __CFDictionary *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v45];
                  CFStringRef v53 = v36;
                  CFDictionaryRef v54 = v52;
                  LODWORD(v55) = 0.5;
                  -[__CFDictionary setObject:forKeyedSubscript:](v52, "setObject:forKeyedSubscript:", [NSNumber numberWithFloat:v55], v66);
                  CFDictionaryRef v56 = v54;
                  CFStringRef v36 = v53;
                  CGImageDestinationAddImage(v51, (CGImageRef)v47, v56);
                  CGImageDestinationFinalize(v51);
                  CFRelease(v51);
                }
                CGImageRelease((CGImageRef)v47);
              }
              else
              {
                BOOL v21 = 0;
              }
              unint64_t v37 = a6;
            }
            else
            {
              BOOL v21 = 0;
            }
            CFRelease(v43);
            if (!a3) {
              goto LABEL_61;
            }
          }
          else
          {
            BOOL v21 = 0;
            if (!a3) {
              goto LABEL_61;
            }
          }
          *a3 = v41 / v33;
        }
LABEL_61:
        if (ABDiagnosticsEnabled())
        {
          [(__CFData *)v21 length];
          _ABLog2(7, (uint64_t)"NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)", 739, 0, @"Original image with size (%i, %i) at %d max edge has length %lu, scalingFactor = %f", v57, v58, v59, a4);
        }
        if (v21)
        {
          if ([(__CFData *)v21 length] < v37) {
            return v21;
          }
          CFRelease(v21);
        }
        BOOL v60 = v38 > 0x1FF;
        v38 >>= 1;
      }
      while (v60);
    }
  }
  return 0;
}

CFDictionaryRef __initializeThumbnailProperties()
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)*MEMORY[0x1E4F2FE28];
  keys[0] = *(void **)MEMORY[0x1E4F2FE48];
  keys[1] = v0;
  values[0] = *(void **)MEMORY[0x1E4F1CFD0];
  values[1] = values[0];
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 2, 0, 0);
  __thumbnailProperties = (uint64_t)result;
  return result;
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

CFArrayRef ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef source, CFDataRef vCardData)
{
  if (ABLogAPIUsage())
  {
    uint64_t v11 = _isMainThread();
    CFArrayRef v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFArrayRef ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef, CFDataRef)", 19, v4, 0, v5, v6, v7, (uint64_t)v11);
    CFRelease(v4);
  }
  uint64_t v8 = [[ABVCardParser alloc] initWithData:vCardData];
  [(ABVCardParser *)v8 setSource:source];
  CFArrayRef v9 = (const __CFArray *)[(ABVCardParser *)v8 sortedPeopleAndProperties:0];

  return v9;
}

CFDataRef ABPersonCreateVCardRepresentationWithPeople(CFArrayRef people)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    id v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFDataRef ABPersonCreateVCardRepresentationWithPeople(CFArrayRef)", 31, v2, 0, v3, v4, v5, (uint64_t)v8);
    CFRelease(v2);
  }
  id v6 = +[ABVCardExporter vCardRepresentationOfRecords:people mode:1];
  return (CFDataRef)v6;
}

uint64_t ABChangeHistoryCreateTables(uint64_t a1, int a2)
{
  if (a2)
  {
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
    CPSqliteConnectionPerformSQL();
  }
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  return CPSqliteConnectionPerformSQL();
}

uint64_t ABChangeHistoryMigrateAddingSaveTimestamp()
{
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  CPSqliteConnectionPerformSQL();
  uint64_t v0 = CPSqliteConnectionStatementForSQL();
  if (v0)
  {
    BOOL v1 = *(sqlite3_stmt **)(v0 + 8);
    double Current = CFAbsoluteTimeGetCurrent();
    sqlite3_bind_double(v1, 1, Current);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  CPSqliteConnectionPerformSQL();
  return 1;
}

uint64_t ABChangeHistoryRegisterClientForSource(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (!a2)
  {
    ABLogSimulateCrashReport(@"Unknown client registering for AB change history, creating simulated crash report.");
    ABLogDisplayInternalAlert(@"Unknown client registering for AB change history, creating simulated crash report.");
    return 0xFFFFFFFFLL;
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (!WriterConnection) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = WriterConnection;
  char v20 = 0;
  CString = _getCString(a2, &v20);
  if (!CString) {
    return 0xFFFFFFFFLL;
  }
  CFArrayRef v9 = (char *)CString;
  if (a3) {
    ABRecordID RecordID = ABRecordGetRecordID(a3);
  }
  else {
    ABRecordID RecordID = -1;
  }
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  uint64_t v13 = CPSqliteConnectionStatementForSQL();
  if (v13)
  {
    uint64_t v14 = v13;
    sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 1, v9, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 2, RecordID);
    sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 3, v9, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 4, RecordID);
    uint32_t v15 = *(sqlite3_stmt **)(v14 + 8);
    double Current = CFAbsoluteTimeGetCurrent();
    sqlite3_bind_double(v15, 5, Current);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v7, (uint64_t)"int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (v20) {
    free(v9);
  }
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
  {
    _dumpTable(a1, @"ClientCursor");
    _ABLog2(6, (uint64_t)"int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 191, 0, @"clientIdentifier = %@, storeID = %i\n>> latestuint64_t SequenceNumber = %i\n%@", v17, v18, v19, (uint64_t)a2);
  }
  return SequenceNumber;
}

UInt8 *_getCString(const __CFString *a1, unsigned char *a2)
{
  CStringPtr = (UInt8 *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr)
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    CFIndex usedBufLen = 0;
    CStringPtr = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xA6A166C0uLL);
    *a2 = 1;
    v9.location = 0;
    v9.CFIndex length = Length;
    CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, CStringPtr, MaximumSizeForEncoding, &usedBufLen);
    CStringPtr[usedBufLen] = 0;
  }
  return CStringPtr;
}

id ABChangeHistoryCopyAllRegisteredClientIdentifiers()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForWriting();
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementSendResults();
    CPSqliteStatementReset();
  }
  if (ABLogChangeHistory() && ABDiagnosticsEnabled()) {
    _ABLog2(6, (uint64_t)"CFArrayRef ABChangeHistoryCopyAllRegisteredClientIdentifiers(ABAddressBookRef)", 227, 0, @">> clientIdentifiers = %@", v1, v2, v3, (uint64_t)v0);
  }
  return v0;
}

uint64_t _allClientsRowHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3) {
    objc_msgSend(a2, "addObject:", objc_msgSend(NSString, "stringWithUTF8String:", v3));
  }
  return 0;
}

void ABChangeHistoryUnregisterClientForSource(uint64_t a1, const __CFString *a2, ABRecordRef record)
{
  if (record)
  {
    ABRecordID RecordID = ABRecordGetRecordID(record);
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    ABRecordID RecordID = -1;
    if (!a2) {
      goto LABEL_12;
    }
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (!WriterConnection) {
    return;
  }
  uint64_t v8 = WriterConnection;
  char v15 = 0;
  CString = _getCString(a2, &v15);
  uint64_t v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    uint64_t v11 = v10;
    sqlite3_bind_text(*(sqlite3_stmt **)(v10 + 8), 1, (const char *)CString, -1, 0);
    if (record) {
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, RecordID);
    }
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  _commitWriterConnection(v8, (uint64_t)"void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)");
  if (v15) {
    free(CString);
  }
LABEL_12:
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
    {
      _dumpTable(a1, @"ClientCursor");
      _ABLog2(6, (uint64_t)"void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)", 272, 0, @"clientIdentifier = %@, storeint ID = %i\n%@", v12, v13, v14, (uint64_t)a2);
    }
  }
}

void ABChangeHistorySetAddressBookClientIdentifier(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 344);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 344) = 0;
  }
  if (cf)
  {
    CFRetain(cf);
    *(void *)(a1 + 344) = cf;
  }
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled()) {
      _ABLog2(6, (uint64_t)"void ABChangeHistorySetAddressBookClientIdentifier(ABAddressBookRef, CFStringRef)", 295, 0, @"clientunsigned __int8 Identifier = %@", v5, v6, v7, (uint64_t)cf);
    }
  }
}

CFStringRef ABChangeHistoryCopyAddressBookClientIdentifier(uint64_t a1)
{
  if (a1 && (CFStringRef v1 = *(const __CFString **)(a1 + 344)) != 0) {
    return CFStringCreateCopy(0, v1);
  }
  else {
    return 0;
  }
}

void ABChangeHistorySetSaveTimestamp(uint64_t a1, double a2)
{
  *(double *)(a1 + 352) = a2;
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
    {
      uint64_t v3 = [NSNumber numberWithDouble:a2];
      _ABLog2(6, (uint64_t)"void ABChangeHistorySetSaveTimestamp(ABAddressBookRef, CFAbsoluteTime)", 314, 0, @"saveTimestamp = %@", v4, v5, v6, v3);
    }
  }
}

void ABChangeHistoryAssociateSequenceNumberWithClient(double Current, uint64_t a2, int a3, const __CFString *a4)
{
  char v9 = 0;
  CString = _getCString(a4, &v9);
  if (Current == 0.0) {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  uint64_t v7 = CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    uint64_t v8 = v7;
    sqlite3_bind_text(*(sqlite3_stmt **)(v7 + 8), 1, (const char *)CString, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a3);
    sqlite3_bind_double(*(sqlite3_stmt **)(v8 + 8), 3, Current);
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  if (v9)
  {
    free(CString);
  }
}

void *ABChangeHistoryGetEntityChangesSinceSequenceNumberForClient(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, const __CFString *a7, const void *a8)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    v18[0] = a7;
    uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
  }
  else
  {
    uint64_t v16 = 0;
  }
  return ABChangeHistoryGetChanges(a1, a2, a3, a4, a5, a6, a7, v16, a8);
}

void *ABChangeHistoryGetChanges(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, const __CFString *a7, uint64_t a8, const void *a9)
{
  v135[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v98 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:13];
  char v127 = 0;
  if (a7)
  {
    CString = (char *)_getCString(a7, &v127);
    if (a9)
    {
LABEL_3:
      uint64_t RecordID = ABRecordGetRecordID(a9);
      goto LABEL_6;
    }
  }
  else
  {
    CString = 0;
    if (a9) {
      goto LABEL_3;
    }
  }
  uint64_t RecordID = 0xFFFFFFFFLL;
LABEL_6:
  uint64_t v97 = a2;
  if (ABLogChangeHistory())
  {
    if (ABDiagnosticsEnabled())
    {
      BOOL v95 = ABLogStringForBool(a4 & 1);
      uint64_t v17 = ABLogStringForBool((a4 >> 1) & 1);
      uint64_t v18 = a5;
      a5 = RecordID;
      uint64_t v19 = a1;
      CFStringRef v20 = a7;
      uint64_t v21 = a6;
      CGImageDestinationRef v22 = ABLogStringForBool((a4 >> 2) & 1);
      uint64_t v77 = ABLogStringForBool((a4 >> 3) & 1);
      id v78 = ABLogStringForStringArray(a3);
      uint64_t v75 = v17;
      uint64_t v76 = v22;
      a6 = v21;
      a7 = v20;
      a1 = v19;
      uint64_t RecordID = a5;
      LODWORD(a5) = v18;
      uint64_t v73 = a6;
      uint64_t v74 = v95;
      uint64_t v71 = v97;
      uint64_t v72 = v18;
      uint64_t v70 = RecordID;
      _ABLog2(6, (uint64_t)"CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)", 715, 0, @"clientIdentifier = %@, storeint ID = %i, entityType = %i, sequenceNumber = %i, recordint ID = %i, compressChanges = %@, unifyResults = %@, linkingResults = %@, meCardResults = %@, changeKeys = %@", v23, v24, v25, (uint64_t)a7);
    }
    BOOL v96 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithCapacity:1000];
    if ((a4 & 1) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v96 = 0;
    if ((a4 & 1) == 0) {
      goto LABEL_13;
    }
  }
  if (([a3 containsObject:@"RecordGUIDs"] & 1) == 0)
  {
    uint64_t v26 = (void *)[MEMORY[0x1E4F1CA80] setWithArray:a3];
    [v26 addObject:@"RecordGUIDs"];
    if ((a4 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v26 = 0;
  if ((a4 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_16:
  if (([a3 containsObject:@"PersonLinks"] & 1) == 0)
  {
    if (!v26) {
      uint64_t v26 = (void *)[MEMORY[0x1E4F1CA80] setWithArray:a3];
    }
    [v26 addObject:@"PersonLinks"];
  }
LABEL_20:
  if ((a4 & 4) != 0
    && (![a3 containsObject:@"LinkToPersonUUIDs"]
     || ([a3 containsObject:@"PersonLinkUUIDs"] & 1) == 0))
  {
    if (!v26) {
      uint64_t v26 = (void *)[MEMORY[0x1E4F1CA80] setWithArray:a3];
    }
    [v26 addObject:@"LinkToPersonUUIDs"];
    [v26 addObject:@"PersonLinkUUIDs"];
  }
  if ((a4 & 8) != 0 && ([a3 containsObject:@"RecordGUIDs"] & 1) == 0)
  {
    uint64_t v26 = (void *)[MEMORY[0x1E4F1CA80] setWithArray:a3];
    [v26 addObject:@"RecordGUIDs"];
  }
  if (v26) {
    a3 = (void *)[v26 allObjects];
  }
  CPRecordStoreGetDatabase();
  uint64_t v92 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  int v126 = 0;
  uint64_t v27 = CPSqliteConnectionStatementForSQL();
  if (!v27)
  {
    unsigned int v33 = v97;
    goto LABEL_58;
  }
  uint64_t v28 = v27;
  sqlite3_bind_text(*(sqlite3_stmt **)(v27 + 8), 1, CString, -1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 2, RecordID);
  uint64_t v29 = CPSqliteStatementIntegerResult();
  int v88 = RecordID;
  if (IsRunningInExchangesyncd_onceToken != -1) {
    dispatch_once(&IsRunningInExchangesyncd_onceToken, &__block_literal_global_10);
  }
  uint64_t RecordID = a1;
  CFStringRef v30 = a7;
  if (IsRunningInExchangesyncd_isRunningInExchangesyncd == 1)
  {
    int v31 = a6;
    BOOL v32 = a5 == -1 || (int)v29 <= (int)a5;
LABEL_45:
    uint64_t v34 = !v32;
    goto LABEL_48;
  }
  if (a5 != -1 || v29 != -1)
  {
    int v31 = a6;
    BOOL v32 = (int)a5 <= 0 || (int)v29 <= (int)a5;
    goto LABEL_45;
  }
  int v31 = a6;
  uint64_t v34 = 1;
LABEL_48:
  objc_msgSend(v98, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v34), @"ChangesTruncated");
  if (ABLogChangeHistory()) {
    [v96 appendFormat:@"    %@ = %@\n", @"ChangesTruncated", ABLogStringForBool(v34)];
  }
  CPSqliteStatementReset();
  LODWORD(a6) = v31;
  a7 = v30;
  a1 = RecordID;
  LODWORD(RecordID) = v88;
  if (v34)
  {
    unsigned int v33 = v97;
    double v35 = v98;
    uint64_t MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = SequenceNumber;
    unint64_t v37 = v96;
    goto LABEL_118;
  }
  unsigned int v33 = v97;
  if (a5 == -1 && v29 != -1)
  {
    if (ABLogChangeHistory() && ABDiagnosticsEnabled()) {
      _ABLog2(6, (uint64_t)"CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)", 760, 0, @"using latest consumed sequenceNumber = %i", v38, v39, v40, v29);
    }
    LODWORD(a5) = v29;
  }
LABEL_58:
  CFRange v124 = 0;
  CFRange v125 = 0;
  uint64_t v123 = 0;
  CFArrayRef v122 = 0;
  CFIndex v120 = 0;
  __int16 v121 = 0;
  CFIndex v118 = 0;
  CFArrayRef theArray = 0;
  int v116 = 0;
  __int16 v117 = 0;
  v114 = 0;
  v115 = 0;
  CGRect v113 = 0;
  if (v33 == 2)
  {
    uint64_t MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = ABCDBContextGetMultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer(*(void *)(a1 + 16), RecordID, a5, CString, (__CFArray **)&v125, (__CFArray **)&v118, (__CFArray **)&v117, &theArray, (CFMutableArrayRef *)&v116);
    if ((a4 & 1) == 0)
    {
LABEL_113:
      uint64_t v47 = 0;
      goto LABEL_114;
    }
  }
  else
  {
    if (RecordID == -1)
    {
      if (a6 == -1)
      {
        if (a7)
        {
          double v41 = v102;
          v102[0] = MEMORY[0x1E4F143A8];
          v102[1] = 3221225472;
          v102[2] = __ABChangeHistoryGetChanges_block_invoke_3;
          v102[3] = &__block_descriptor_48_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          v102[4] = CString;
          int v103 = a5;
          unsigned int v104 = v33;
        }
        else
        {
          double v41 = v100;
          v100[0] = MEMORY[0x1E4F143A8];
          v100[1] = 3221225472;
          v100[2] = __ABChangeHistoryGetChanges_block_invoke_4;
          v100[3] = &__block_descriptor_44_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          int v101 = a5;
          v100[4] = a8;
        }
      }
      else
      {
        int v42 = a6;
        double v41 = v105;
        v105[0] = MEMORY[0x1E4F143A8];
        v105[1] = 3221225472;
        v105[2] = __ABChangeHistoryGetChanges_block_invoke_2;
        v105[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
        int v106 = a5;
        int v107 = v42;
        v105[4] = CString;
        unsigned int v108 = v33;
      }
    }
    else
    {
      double v41 = v109;
      v109[0] = MEMORY[0x1E4F143A8];
      v109[1] = 3221225472;
      v109[2] = __ABChangeHistoryGetChanges_block_invoke;
      v109[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
      int v110 = RecordID;
      int v111 = a5;
      v109[4] = CString;
      unsigned int v112 = v33;
    }
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    if ([a3 containsObject:@"RecordGUIDs"])
    {
      *(void *)&long long v131 = "guid";
      *(void *)&long long v128 = &theArray;
      unsigned int v43 = 1;
    }
    else
    {
      unsigned int v43 = 0;
    }
    if ([a3 containsObject:@"ExternalIDs"])
    {
      *(void *)((unint64_t)&v131 | (8 * v43)) = "ExternalIdentifier";
      *(void *)((unint64_t)&v128 & 0xFFFFFFFFFFFFFFF7 | (8 * (v43++ & 1))) = &v121;
    }
    if (!v33)
    {
      if ([a3 containsObject:@"ImagesChanged"])
      {
        *((void *)&v131 + v43) = "Image";
        *((void *)&v128 + v43++) = &v120;
      }
      if ([a3 containsObject:@"PersonLinks"])
      {
        *((void *)&v131 + v43) = "PersonLink";
        *((void *)&v128 + v43++) = &v115;
      }
      if ([a3 containsObject:@"LinkToPersonUUIDs"])
      {
        *((void *)&v131 + v43) = "LinkToPersonUUID";
        *((void *)&v128 + v43++) = &v114;
      }
      if ([a3 containsObject:@"PersonLinkUUIDs"])
      {
        *((void *)&v131 + v43) = "PersonLinkUUID";
        *((void *)&v128 + v43) = &v113;
      }
    }
    ABRegulatoryLogReadContactsData(a1);
    [a3 containsObject:@"ChangeTableRowIDs"];
    [a3 containsObject:@"SequenceNumbers"];
    uint64_t v81 = *((void *)&v130 + 1);
    uint64_t v82 = 0;
    uint64_t v79 = v130;
    uint64_t v80 = *((void *)&v133 + 1);
    uint64_t v77 = (__CFString *)*((void *)&v129 + 1);
    id v78 = (id)v133;
    uint64_t v75 = (__CFString *)v129;
    uint64_t v76 = (__CFString *)*((void *)&v132 + 1);
    uint64_t v73 = *((void *)&v128 + 1);
    uint64_t v74 = (__CFString *)v132;
    uint64_t v71 = v128;
    uint64_t v72 = *((void *)&v131 + 1);
    int v69 = v41;
    uint64_t v70 = v131;
    CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithOrderAndBindBlockAndProperties();
    uint64_t MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = SequenceNumber;
    if ((a4 & 1) == 0) {
      goto LABEL_113;
    }
  }
  CFArrayRef v44 = theArray;
  if (!theArray) {
    goto LABEL_113;
  }
  CFArrayRef v45 = (const __CFArray *)v124;
  CGImageRef v46 = v120;
  CFArrayRef v85 = (const __CFArray *)v114;
  CFArrayRef v86 = (const __CFArray *)v115;
  if (CFArrayGetCount(theArray) < 1) {
    goto LABEL_113;
  }
  uint64_t v83 = v46;
  uint64_t v94 = MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer;
  uint64_t v47 = (void *)[MEMORY[0x1E4F28E60] indexSet];
  long long v87 = v44;
  id v89 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFIndex Count = CFArrayGetCount(v44);
  if (Count >= 1)
  {
    CFIndex v49 = Count;
    CFIndex v50 = 0;
    CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F1D260];
    uint64_t v51 = -1;
    do
    {
      CFStringRef ValueAtIndex = (sqlite3_stmt *)CFArrayGetValueAtIndex(v45, v50);
      int v53 = (int)ValueAtIndex;
      unsigned int v54 = ValueAtIndex - 6;
      if (((a4 & 2) != 0 || v54 < 0xFFFFFFFD) && ((a4 & 4) != 0 || v54 >= 4))
      {
        if (ValueAtIndex != 10)
        {
          if ((a4 & 2) != 0 && ValueAtIndex == 1)
          {
            CFStringRef ValueAtIndex = (sqlite3_stmt *)CFArrayGetValueAtIndex(v86, v50);
            int v56 = (int)ValueAtIndex;
            if (ValueAtIndex != -1)
            {
              CFStringRef ValueAtIndex = (sqlite3_stmt *)CPSqliteDatabaseStatementForReading();
              if (ValueAtIndex)
              {
                CFStringRef ValueAtIndex = (sqlite3_stmt *)*((void *)ValueAtIndex + 1);
                if (ValueAtIndex)
                {
                  sqlite3_bind_int(ValueAtIndex, 1, v56);
                  uint64_t v57 = (const void *)CPSqliteStatementCopyStringResult();
                  if (v57)
                  {
                    CFTypeRef v58 = CFAutorelease(v57);
                    CFStringRef ValueAtIndex = (sqlite3_stmt *)CPSqliteStatementReset();
                    if (v58)
                    {
                      CFArraySetValueAtIndex(v87, v50, v58);
                      CFArraySetValueAtIndex(v45, v50, (const void *)4);
                    }
                  }
                  else
                  {
                    CFStringRef ValueAtIndex = (sqlite3_stmt *)CPSqliteStatementReset();
                  }
                }
              }
            }
          }
          contexta = (void *)MEMORY[0x19F3B4540](ValueAtIndex);
          uint64_t v59 = CFArrayGetValueAtIndex(v87, v50);
          v135[0] = v59;
          BOOL v60 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v135 count:1];
          if ((a4 & 4) != 0 && v53 == 6)
          {
            uint64_t v61 = CFArrayGetValueAtIndex(v85, v50);
            if (!CFEqual(v61, cf2))
            {
              *(void *)&long long v128 = v59;
              *((void *)&v128 + _ABCPostDatabaseChangedNotification(0, 1) = v61;
              BOOL v60 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v128 count:2];
            }
          }
          *(void *)&long long v131 = MEMORY[0x1E4F143A8];
          *((void *)&v131 + _ABCPostDatabaseChangedNotification(0, 1) = 3221225472;
          *(void *)&long long v132 = ___collateIndexByGuids_block_invoke;
          *((void *)&v132 + _ABCPostDatabaseChangedNotification(0, 1) = &unk_1E5989378;
          *(void *)&long long v133 = v89;
          *((void *)&v133 + _ABCPostDatabaseChangedNotification(0, 1) = v50;
          objc_msgSend(v60, "_cn_each:", &v131, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82);
          goto LABEL_94;
        }
        if ((a4 & 8) != 0)
        {
          CFIndex v55 = v50;
          if (v51 != -1)
          {
            [v47 addIndex:v51];
            CFIndex v55 = v50;
          }
          goto LABEL_95;
        }
      }
      objc_msgSend(v47, "addIndex:", v50, v69);
LABEL_94:
      CFIndex v55 = v51;
LABEL_95:
      ++v50;
      uint64_t v51 = v55;
    }
    while (v49 != v50);
  }
  *(void *)&long long v131 = MEMORY[0x1E4F143A8];
  *((void *)&v131 + _ABCPostDatabaseChangedNotification(0, 1) = 3221225472;
  *(void *)&long long v132 = ___filterAndCoalesceChangeResults_block_invoke;
  *((void *)&v132 + _ABCPostDatabaseChangedNotification(0, 1) = &unk_1E5989350;
  *(void *)&long long v133 = v47;
  *((void *)&v133 + _ABCPostDatabaseChangedNotification(0, 1) = v45;
  v134 = v83;
  objc_msgSend(v89, "_cn_each:", &v131, v69);

  unsigned int v33 = v97;
  uint64_t MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = v94;
LABEL_114:
  double v35 = v98;
  unint64_t v37 = v96;
  if (v122 && CFArrayGetCount(v122) >= 1)
  {
    CFArrayRef v62 = v122;
    CFIndex v63 = CFArrayGetCount(v122);
    uint64_t MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer = (uint64_t)CFArrayGetValueAtIndex(v62, v63 - 1);
  }
  _addResultToChanges(v125, @"RecordIDs", a3, v47, v98, v96, 1);
  _addResultToChanges(v124, @"EventTypes", a3, v47, v98, v96, 1);
  _addResultToChanges(v123, @"ChangeTableRowIDs", a3, v47, v98, v96, 1);
  _addResultToChanges((__CFString *)v122, @"SequenceNumbers", a3, v47, v98, v96, 1);
  _addResultToChanges(v121, @"ExternalIDs", a3, v47, v98, v96, 0);
  _addResultToChanges(v120, @"ImagesChanged", a3, v47, v98, v96, 1);
  _addResultToChanges((__CFString *)theArray, @"RecordGUIDs", a3, v47, v98, v96, 0);
  _addResultToChanges(v118, @"PropertyIDs", a3, v47, v98, v96, 1);
  _addResultToChanges(v117, @"MultiValueIdentifiers", a3, v47, v98, v96, 1);
  _addResultToChanges(v116, @"MultiValueGUIDs", a3, v47, v98, v96, 0);
  _addResultToChanges(v115, @"PersonLinks", a3, v47, v98, v96, 1);
  _addResultToChanges(v114, @"LinkToPersonUUIDs", a3, v47, v98, v96, 0);
  _addResultToChanges(v113, @"PersonLinkUUIDs", a3, v47, v98, v96, 0);
LABEL_118:
  objc_msgSend(v35, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer, v69), @"LatestSequenceNumber");
  if (ABLogChangeHistory())
  {
    [v37 appendFormat:@"    %@ = %i", @"LatestSequenceNumber", MultiValueDeletesInSourceFromSequenceNumberExcludingClientIdentifer];
    if (ABDiagnosticsEnabled())
    {
      _dumpTableWithConnection(v92, @"ClientCursor");
      _dumpTableWithConnection(v92, @"ClientCursorConsumed");
      _dumpTableWithConnection(v92, @"ClientSequence");
      if (v33 > 2) {
        double v64 = 0;
      }
      else {
        double v64 = off_1E59893C0[v33];
      }
      _dumpTableWithConnection(v92, (uint64_t)v64);
      _ABLog2(6, (uint64_t)"CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)", 909, 0, @">> changes = (\n%@\n) \n%@\n%@\n%@\n%@", v65, v66, v67, (uint64_t)v37);
    }
  }

  if (v127) {
    free(CString);
  }
  return v35;
}

uint64_t IsRunningInExchangesyncd()
{
  if (IsRunningInExchangesyncd_onceToken != -1) {
    dispatch_once(&IsRunningInExchangesyncd_onceToken, &__block_literal_global_10);
  }
  return IsRunningInExchangesyncd_isRunningInExchangesyncd;
}

uint64_t __IsRunningInExchangesyncd_block_invoke()
{
  uint64_t result = objc_msgSend(@"com.apple.exchangesyncd", "isEqualToString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"));
  if (result) {
    IsRunningInExchangesyncd_isRunningInExchangesyncd = 1;
  }
  return result;
}

uint64_t __ABChangeHistoryGetChanges_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 2, *(_DWORD *)(a1 + 44));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 4, *(const char **)(a1 + 32), -1, 0);
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  int v5 = *(_DWORD *)(a1 + 48);
  return sqlite3_bind_int(v4, 5, v5);
}

uint64_t __ABChangeHistoryGetChanges_block_invoke_2(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 2, *(_DWORD *)(a1 + 40));
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 3, *(_DWORD *)(a1 + 44));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 4, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 5, *(const char **)(a1 + 32), -1, 0);
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  int v5 = *(_DWORD *)(a1 + 48);
  return sqlite3_bind_int(v4, 6, v5);
}

uint64_t __ABChangeHistoryGetChanges_block_invoke_3(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 2, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 32), -1, 0);
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  int v5 = *(_DWORD *)(a1 + 44);
  return sqlite3_bind_int(v4, 4, v5);
}

uint64_t __ABChangeHistoryGetChanges_block_invoke_4(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  uint64_t v5 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "firstObject"), "UTF8String");
  if (v5) {
    uint64_t v6 = (const char *)v5;
  }
  else {
    uint64_t v6 = "";
  }
  return sqlite3_bind_text(v4, 2, v6, -1, 0);
}

void _addResultToChanges(__CFString *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, int a7)
{
  uint64_t v13 = a1;
  if (a1)
  {
    uint64_t v12 = a1;
    if ([a3 containsObject:a2])
    {
      if ([a4 count]) {
        [(__CFString *)v12 removeObjectsAtIndexes:a4];
      }
      [a5 setObject:v12 forKeyedSubscript:a2];
      if (ABLogChangeHistory())
      {
        if (a7) {
          uint64_t v12 = ABLogStringForIntArrayPtr((void **)&v13);
        }
        [a6 appendFormat:@"    %@ = %@\n", a2, v12];
        uint64_t v12 = v13;
      }
    }
    CFRelease(v12);
  }
}

uint64_t _entityChangesExistWithSequenceNumberAfterRecordID(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (a2 > 2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = off_1E59893C0[a2];
  }
  objc_msgSend(NSString, "stringWithFormat:", @"SELECT COUNT(*) FROM (SELECT NULL FROM %@ WHERE sequence_number = ? AND record > ? LIMIT 1);",
    v6);
  uint64_t result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    uint64_t v8 = result;
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a4);
    int v9 = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
    return v9 > 0;
  }
  return result;
}

void _clearChangesForClient(uint64_t a1, unsigned int a2, int a3, int a4, const __CFString *a5, int a6)
{
  LODWORD(v9) = a3;
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)");
  if (WriterConnection)
  {
    uint64_t v13 = WriterConnection;
    if (ABLogChangeHistory())
    {
      BOOL v14 = ABDiagnosticsEnabled();
      if (a2 == -1)
      {
        if (v14)
        {
          uint64_t v43 = _dumpTableWithConnection(v13, @"ClientCursor");
          _dumpTableWithConnection(v13, @"ClientCursorConsumed");
          _dumpTableWithConnection(v13, @"ClientSequence");
          _dumpTableWithConnection(v13, @"ABPersonChanges");
          _dumpTableWithConnection(v13, @"ABGroupChanges");
          _dumpTableWithConnection(v13, @"ABPersonMultiValueDeletes");
          _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 969, 0, @"Tables before clear changes:\n%@\n%@\n%@\n%@\n%@\n%@", v17, v18, v19, v43);
        }
      }
      else if (v14)
      {
        uint64_t v15 = _dumpTableWithConnection(v13, @"ClientCursor");
        _dumpTableWithConnection(v13, @"ClientCursorConsumed");
        _dumpTableWithConnection(v13, @"ClientSequence");
        if (a2 > 2) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = off_1E59893C0[a2];
        }
        _dumpTableWithConnection(v13, (uint64_t)v16);
        _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 975, 0, @"Tables before clear changes:\n%@\n%@\n%@\n%@", v20, v21, v22, v15);
      }
    }
    if (((a4 | v9) & 0x80000000) == 0)
    {
      if (_entityChangesExistWithSequenceNumberAfterRecordID(v13, 0, v9, a4))
      {
        uint64_t v9 = (v9 - 1);
        if (ABLogChangeHistory())
        {
          if (ABDiagnosticsEnabled()) {
            _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 985, 0, @"will clear up to previous sequenceNumber = %i", v23, v24, v25, v9);
          }
        }
      }
    }
    char v44 = 0;
    CString = _getCString(a5, &v44);
    uint64_t v27 = CPSqliteConnectionStatementForSQL();
    if (v27)
    {
      uint64_t v28 = v27;
      sqlite3_bind_text(*(sqlite3_stmt **)(v27 + 8), 1, (const char *)CString, -1, 0);
      sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 2, a6);
      sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 3, v9);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    uint64_t v29 = CPSqliteConnectionStatementForSQL();
    if (v29)
    {
      uint64_t v30 = v29;
      int v31 = *(sqlite3_stmt **)(v29 + 8);
      double Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v31, 1, Current);
      sqlite3_bind_int(*(sqlite3_stmt **)(v30 + 8), 2, v9);
      sqlite3_bind_text(*(sqlite3_stmt **)(v30 + 8), 3, (const char *)CString, -1, 0);
      sqlite3_bind_int(*(sqlite3_stmt **)(v30 + 8), 4, a6);
      sqlite3_bind_text(*(sqlite3_stmt **)(v30 + 8), 5, (const char *)CString, -1, 0);
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    _commitWriterConnection(v13, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)");
    if (v44) {
      free(CString);
    }
    if (ABLogChangeHistory())
    {
      BOOL v33 = ABDiagnosticsEnabled();
      if (a2 == -1)
      {
        if (v33)
        {
          uint64_t v36 = _dumpTable(a1, @"ClientCursor");
          _dumpTable(a1, @"ClientCursorConsumed");
          _dumpTable(a1, @"ClientSequence");
          _dumpTable(a1, @"ABPersonChanges");
          _dumpTable(a1, @"ABGroupChanges");
          _dumpTable(a1, @"ABPersonMultiValueDeletes");
          _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 1029, 0, @"Tables after clear changes:\n%@\n%@\n%@\n%@\n%@\n%@", v37, v38, v39, v36);
        }
      }
      else if (v33)
      {
        uint64_t v34 = _dumpTable(a1, @"ClientCursor");
        _dumpTable(a1, @"ClientCursorConsumed");
        _dumpTable(a1, @"ClientSequence");
        if (a2 > 2) {
          double v35 = 0;
        }
        else {
          double v35 = off_1E59893C0[a2];
        }
        _dumpTable(a1, (uint64_t)v35);
        _ABLog2(6, (uint64_t)"void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)", 1035, 0, @"Tables after clear changes:%@\n%@\n%@\n%@", v40, v41, v42, v34);
      }
    }
  }
}

void ABChangeHistoryClearChangesUpToSequenceNumberForClient(uint64_t a1, int a2, const __CFString *a3, ABRecordRef record)
{
  if (record) {
    ABRecordID RecordID = ABRecordGetRecordID(record);
  }
  else {
    ABRecordID RecordID = -1;
  }
  if (ABLogChangeHistory() && ABDiagnosticsEnabled()) {
    _ABLog2(6, (uint64_t)"void ABChangeHistoryClearChangesUpToSequenceNumberForClient(ABAddressBookRef, int, CFStringRef, ABRecordRef)", 1044, 0, @"clientIdentifier = %@, storeint ID = %i, sequenceNumber = %i", v8, v9, v10, (uint64_t)a3);
  }
  _clearChangesForClient(a1, 0xFFFFFFFF, a2, -1, a3, RecordID);
}

void ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(uint64_t a1, unsigned int a2, int a3, int a4, const __CFString *a5, ABRecordRef record)
{
  if (record) {
    ABRecordID RecordID = ABRecordGetRecordID(record);
  }
  else {
    ABRecordID RecordID = -1;
  }
  if (ABLogChangeHistory() && ABDiagnosticsEnabled()) {
    _ABLog2(6, (uint64_t)"void ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, ABRecordRef)", 1053, 0, @"clientIdentifier = %@, storeint ID = %i, entityType = %i, sequenceNumber = %i, recordint ID = %i", v12, v13, v14, (uint64_t)a5);
  }
  _clearChangesForClient(a1, a2, a3, a4, a5, RecordID);
}

uint64_t _latestConsumedSequenceNumberForClient(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  char v10 = 0;
  CString = _getCString(a2, &v10);
  uint64_t v7 = CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    uint64_t v8 = v7;
    sqlite3_bind_text(*(sqlite3_stmt **)(v7 + 8), 1, (const char *)CString, -1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, a3);
    a4 = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
  }
  if (v10) {
    free(CString);
  }
  return a4;
}

uint64_t ABChangeHistoryGetLatestConsumedSequenceNumberForClient(int a1, const __CFString *a2, ABRecordRef record)
{
  if (record) {
    ABRecordID RecordID = ABRecordGetRecordID(record);
  }
  else {
    ABRecordID RecordID = -1;
  }
  CPRecordStoreGetDatabase();
  uint64_t v5 = CPSqliteDatabaseConnectionForWriting();
  uint64_t v6 = _latestConsumedSequenceNumberForClient(v5, a2, RecordID, 0xFFFFFFFFLL);
  if (ABLogChangeHistory() && ABDiagnosticsEnabled()) {
    _ABLog2(6, (uint64_t)"int ABChangeHistoryGetLatestConsumedSequenceNumberForClient(ABAddressBookRef, CFStringRef, ABRecordRef)", 1094, 0, @"clientIdentifier = %@, storeID = %i\n>> latestConsumeduint64_t SequenceNumber = %i", v7, v8, v9, (uint64_t)a2);
  }
  return v6;
}

void ABChangeHistoryClearEntityChangeTableRowIDsForClient(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFString *a4, ABRecordRef record)
{
  CFArrayRef theArray = a3;
  if (record) {
    uint64_t RecordID = ABRecordGetRecordID(record);
  }
  else {
    uint64_t RecordID = 0xFFFFFFFFLL;
  }
  if (ABLogChangeHistory() && ABDiagnosticsEnabled())
  {
    uint64_t v29 = a2;
    uint64_t v30 = ABLogStringForIntArrayPtr((void **)&theArray);
    uint64_t v28 = RecordID;
    _ABLog2(6, (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)", 1130, 0, @"clientIdentifier = %@, storeint ID = %i, entityType = %i, changeTableRowIDs = %@", v9, v10, v11, (uint64_t)a4);
  }
  if (a2 >= 2) {
    ABChangeHistoryClearEntityChangeTableRowIDsForClient_cold_1();
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)");
  if (WriterConnection)
  {
    uint64_t v13 = WriterConnection;
    char v35 = 0;
    CString = _getCString(a4, &v35);
    uint64_t v33 = a1;
    if (a2) {
      uint64_t v15 = (long long **)ABCGroupClass;
    }
    else {
      uint64_t v15 = &ABCPersonClass;
    }
    uint64_t v16 = *v15;
    if (v16) {
      uint64_t v17 = (__CFString *)[NSString stringWithUTF8String:*(void *)v16];
    }
    else {
      uint64_t v17 = &stru_1EF03E278;
    }
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT sequence_number FROM %@Changes WHERE ROWint ID = ?;",
      v17,
      v28,
      v29,
      v30);
    [NSString stringWithFormat:@"INSERT INTO ClientCursorConsumed (client_identifier, store_id, consumed_entity_class, consumed_entity_id, consumed_change_id, sequence_number) VALUES (?, ?, ?, (SELECT record FROM %@Changes WHERE ROWint ID = ? LIMIT 1), ?, (SELECT sequence_number FROM %@Changes WHERE ROWint ID = ?))", v17, v17];
    uint64_t v18 = CPSqliteConnectionStatementForSQL();
    uint64_t v19 = CPSqliteConnectionStatementForSQL();
    if (v18 && (v20 = v19) != 0 && theArray && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
    {
      CFIndex v22 = Count;
      CFStringRef v31 = a4;
      ABRecordRef v32 = record;
      CFIndex v23 = 0;
      int v24 = -1;
      do
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v23);
        sqlite3_bind_int(*(sqlite3_stmt **)(v18 + 8), 1, ValueAtIndex);
        int v26 = CPSqliteStatementIntegerResult();
        int v27 = v26;
        if (v24 <= v26) {
          int v24 = v26;
        }
        CPSqliteStatementReset();
        if (v27 >= 1)
        {
          sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 1, (const char *)CString, -1, 0);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, RecordID);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 3, a2);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 4, ValueAtIndex);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 5, ValueAtIndex);
          sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 6, ValueAtIndex);
          CPSqliteStatementPerform();
          CPSqliteStatementReset();
        }
        ++v23;
      }
      while (v22 != v23);
      _commitWriterConnection(v13, (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)");
      if (v24 != -1) {
        ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(v33, a2, v24, -1, v31, v32);
      }
    }
    else
    {
      _commitWriterConnection(v13, (uint64_t)"void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)");
    }
    if (v35) {
      free(CString);
    }
  }
}

void ABChangeHistoryPurgeIdleClients(uint64_t a1, int a2, double a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (ABLogChangeHistory() && ABDiagnosticsEnabled()) {
    _ABLog2(6, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)", 1271, 0, @"timestamp = %f, numChanges = %i", v6, v7, v8, *(uint64_t *)&a3);
  }
  uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
  if (WriterConnection)
  {
    uint64_t v10 = WriterConnection;
    uint64_t v11 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v12 = CPSqliteConnectionStatementForSQL();
    if (v12)
    {
      uint64_t v13 = v12;
      sqlite3_bind_double(*(sqlite3_stmt **)(v12 + 8), 1, a3);
      sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 2, a2);
      CPSqliteStatementSendResults();
      CPSqliteStatementReset();
    }
    if ([v11 count] && (uint64_t v14 = CPSqliteConnectionStatementForSQL()) != 0)
    {
      uint64_t v15 = v14;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v16 = [v11 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v25 = v10;
        uint64_t v18 = *(void *)v27;
        do
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v27 != v18) {
              objc_enumerationMutation(v11);
            }
            uint64_t v20 = *(void **)(*((void *)&v26 + 1) + 8 * i);
            ABDiagnosticsEnabled();
            _ABLog2(4, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)", 1295, 0, @"Purging change-tracking client %@ which has been idle since %f or is tracking all stores and is behind more more than %d changes", v21, v22, v23, (uint64_t)v20);
            sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, (const char *)[v20 cStringUsingEncoding:4], -1, 0);
            CPSqliteStatementPerform();
            CPSqliteStatementReset();
          }
          uint64_t v17 = [v11 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v17);
        _commitWriterConnection(v25, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(DarwinNotifyCenter, @"ABChangeHistoryIdleClientWasPurgedNotification", 0, 0, 1u);
      }
      else
      {
        _commitWriterConnection(v10, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
      }
    }
    else
    {
      _commitWriterConnection(v10, (uint64_t)"void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)");
    }
  }
}

uint64_t _unusedClientRowHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v3) {
    objc_msgSend(a2, "addObject:", objc_msgSend(NSString, "stringWithUTF8String:", v3));
  }
  return 0;
}

uint64_t _findSequenceNumberForAgeLimit(double a1)
{
  if (a1 <= 0.0) {
    return 0;
  }
  uint64_t v2 = CPSqliteConnectionStatementForSQL();
  if (!v2) {
    return 0;
  }
  sqlite3_bind_double(*(sqlite3_stmt **)(v2 + 8), 1, a1);
  uint64_t v3 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v3;
}

uint64_t _findSequenceNumberForPersonChangesLimit(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = CPSqliteConnectionStatementForSQL();
  if (!v3) {
    return 0;
  }
  sqlite3_bind_int(*(sqlite3_stmt **)(v3 + 8), 1, a2);
  uint64_t v4 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v4;
}

uint64_t _findMinConsumedSequenceNumberForDataAccess()
{
  if (!CPSqliteConnectionStatementForSQL()) {
    return 0;
  }
  uint64_t v0 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v0;
}

void ABChangeHistoryUpdatePeakPersonCount(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PersonCFIndex Count = ABAddressBookGetPersonCount(a1);
  if ((int)PersonCount >= 1 && (int)ABAddressBookGetIntegerProperty((uint64_t)a1) < (int)PersonCount)
  {
    ABAddressBookSetIntegerProperty((uint64_t)a1, @"PeakContactCount", PersonCount, v11, v12, v13, v14, v15, a9);
  }
}

CFAbsoluteTime ABChangeHistoryGetDefaultAgeLimit()
{
  return CFAbsoluteTimeGetCurrent() + -2592000.0;
}

uint64_t ABChangeHistoryGetPersonChangesLimit(uint64_t a1, unsigned int a2)
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  unsigned int v3 = 5 * CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if ((int)v3 <= (int)a2) {
    return a2;
  }
  else {
    return v3;
  }
}

uint64_t ABChangeHistoryGetSequenceNumberForClearingChanges(uint64_t a1)
{
  double v2 = CFAbsoluteTimeGetCurrent() + -2592000.0;
  int PersonChangesLimit = ABChangeHistoryGetPersonChangesLimit(a1, 0x1F4u);
  return ABChangeHistoryGetSequenceNumberForClearingChangesWithAgeAndChangesLimits(v2, a1, PersonChangesLimit);
}

uint64_t ABChangeHistoryGetSequenceNumberForClearingChangesWithAgeAndChangesLimits(double a1, uint64_t a2, int a3)
{
  CPRecordStoreGetDatabase();
  uint64_t v5 = CPSqliteDatabaseConnectionForReading();
  unsigned int SequenceNumberForAgeLimit = _findSequenceNumberForAgeLimit(a1);
  SequenceNumberForint PersonChangesLimit = _findSequenceNumberForPersonChangesLimit(v5, a3);
  if ((int)SequenceNumberForAgeLimit <= (int)SequenceNumberForPersonChangesLimit) {
    uint64_t v8 = SequenceNumberForPersonChangesLimit;
  }
  else {
    uint64_t v8 = SequenceNumberForAgeLimit;
  }
  if ((int)v8 >= 1)
  {
    int MinConsumedSequenceNumberForDataAccess = _findMinConsumedSequenceNumberForDataAccess();
    if ((int)v8 >= MinConsumedSequenceNumberForDataAccess) {
      unsigned int v10 = MinConsumedSequenceNumberForDataAccess;
    }
    else {
      unsigned int v10 = v8;
    }
    if (MinConsumedSequenceNumberForDataAccess <= 0) {
      uint64_t v8 = v8;
    }
    else {
      uint64_t v8 = v10;
    }
    if (MinConsumedSequenceNumberForDataAccess == -1) {
      return 0;
    }
  }
  return v8;
}

BOOL _performQueryToClearSequenceNumber(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = CPSqliteConnectionStatementForSQL();
  if (!v5) {
    return 0;
  }
  sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 1, a3);
  int v6 = CPSqliteStatementPerform();
  BOOL v7 = v6 == 101;
  if (v6 != 101 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    _performQueryToClearSequenceNumber_cold_1(a1);
  }
  CPSqliteStatementReset();
  return v7;
}

void ABChangeHistoryClearChangesToSequenceNumber(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    CPRecordStoreGetDatabase();
    uint64_t v5 = CPSqliteDatabaseConnectionForWriting();
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __ABChangeHistoryClearChangesToSequenceNumber_block_invoke;
    v6[3] = &__block_descriptor_44_e18_v16__0__NSString_8l;
    v6[4] = v5;
    int v7 = a2;
    objc_msgSend(&unk_1EF050520, "_cn_each:", v6);
  }
}

void __ABChangeHistoryClearChangesToSequenceNumber_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 40;
  if (!_performQueryToClearSequenceNumber(*(void *)(a1 + 32), a2, *(_DWORD *)(a1 + 40))
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    __ABChangeHistoryClearChangesToSequenceNumber_block_invoke_cold_1(v3, a2, v4, v5, v6, v7, v8, v9);
  }
}

BOOL _hasClientWithIdentifier(uint64_t a1, const __CFString *a2)
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForWriting();
  char v7 = 0;
  CString = _getCString(a2, &v7);
  uint64_t v4 = CPSqliteConnectionStatementForSQL();
  if (v4)
  {
    sqlite3_bind_text(*(sqlite3_stmt **)(v4 + 8), 1, (const char *)CString, -1, 0);
    int v5 = CPSqliteStatementIntegerResult();
    CPSqliteStatementReset();
  }
  else
  {
    int v5 = 0;
  }
  if (v7) {
    free(CString);
  }
  return v5 > 0;
}

BOOL ABChangeHistoryHasClientWithIdentifier(uint64_t a1, CFStringRef theString)
{
  if (!theString || !CFStringGetLength(theString)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  return _hasClientWithIdentifier(v4, theString);
}

BOOL ABChangeHistoryHasClients(uint64_t a1)
{
  return _hasClientWithIdentifier(a1, @"%");
}

BOOL ABChangeHistoryHasSyncAgentClient(uint64_t a1)
{
  return _hasClientWithIdentifier(a1, @"com.apple.MobileSync");
}

uint64_t ABChangeHistoryTableCount(uint64_t a1, uint64_t a2)
{
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForWriting();
  [NSString stringWithFormat:@"SELECT COUNT(*) FROM (SELECT NULL FROM %@);", a2];
  if (!CPSqliteConnectionStatementForSQL()) {
    return 0;
  }
  uint64_t v3 = CPSqliteStatementIntegerResult();
  CPSqliteStatementReset();
  return v3;
}

void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  char HasPendingTransaction = ABAddressBookHasPendingTransaction();
  uint64_t v42 = a1;
  if (HasPendingTransaction)
  {
    CPRecordStoreGetDatabase();
    uint64_t WriterConnection = CPSqliteDatabaseConnectionForWriting();
  }
  else
  {
    uint64_t WriterConnection = _getWriterConnection(*(void *)(a1 + 16), (uint64_t)"void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(ABAddressBookRef, CFArrayRef (^)(void), CFStringRef)");
  }
  uint64_t v8 = WriterConnection;
  if (WriterConnection)
  {
    CFArrayRef v9 = (const __CFArray *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    unsigned int v43 = CPRecordStoreGetSequenceNumber() + 1;
    if (v9)
    {
      uint64_t v35 = v8;
      char v36 = HasPendingTransaction;
      CFStringRef v37 = a3;
      CFIndex Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        CFIndex v11 = Count;
        CFIndex v12 = 0;
        int v41 = kABGroupExternalIdentifierProperty;
        int v40 = kABGroupInternalUUIDProperty;
        propertdouble y = kABPersonExternalIdentifierProperty;
        int v38 = kABPersonInternalUUIDProperty;
        do
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
          ABRecordType RecordType = ABRecordGetRecordType(ValueAtIndex);
          if (RecordType == 1)
          {
            ABRecordRef v24 = ABGroupCopySource(ValueAtIndex);
            if (v24)
            {
              uint64_t v16 = v24;
              ABRecordID RecordID = ABRecordGetRecordID(v24);
              ABRecordID v26 = ABRecordGetRecordID(ValueAtIndex);
              uint64_t v18 = (void *)ABRecordCopyValue(ValueAtIndex, v41);
              long long v27 = (void *)ABRecordCopyValue(ValueAtIndex, v40);
              ABChangeHistoryInsertGroupChangeRecord(*(void *)(v42 + 16), v26, 1, v43, v18, RecordID, v27);
              long long v28 = ABOSLogGeneral();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109890;
                ABRecordID v45 = v26;
                __int16 v46 = 2114;
                uint64_t v47 = v27;
                __int16 v48 = 1024;
                ABRecordID v49 = RecordID;
                __int16 v50 = 1024;
                unsigned int v51 = v43;
                _os_log_impl(&dword_19DCDB000, v28, OS_LOG_TYPE_INFO, "Inserted change history record for group id %d (guid %{public}@) after moving to store id %d; sequence number = %d\n",
                  buf,
                  0x1Eu);
              }
              if (v27)
              {
                uint64_t v23 = v27;
LABEL_20:
                CFRelease(v23);
              }
LABEL_21:
              if (v18) {
                CFRelease(v18);
              }
              CFRelease(v16);
            }
          }
          else if (!RecordType)
          {
            ABRecordRef v15 = ABPersonCopySource(ValueAtIndex);
            if (v15)
            {
              uint64_t v16 = v15;
              ABRecordID v17 = ABRecordGetRecordID(v15);
              uint64_t v18 = (void *)ABRecordCopyValue(ValueAtIndex, property);
              uint64_t v19 = (void *)ABRecordCopyValue(ValueAtIndex, v38);
              int IntValue = ABRecordGetIntValue((uint64_t)ValueAtIndex, kABPersonLinkProperty);
              ABRecordID v21 = ABRecordGetRecordID(ValueAtIndex);
              ABChangeHistoryInsertPersonChangeRecord(*(void *)(v42 + 16), v21, 1, v43, 0, v18, v17, IntValue, v19, 0, 0);
              uint64_t v22 = ABOSLogGeneral();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109890;
                ABRecordID v45 = v21;
                __int16 v46 = 2114;
                uint64_t v47 = v19;
                __int16 v48 = 1024;
                ABRecordID v49 = v17;
                __int16 v50 = 1024;
                unsigned int v51 = v43;
                _os_log_impl(&dword_19DCDB000, v22, OS_LOG_TYPE_INFO, "Inserted change history record for person id %d (guid %{public}@) after moving to store id %d; sequence number = %d\n",
                  buf,
                  0x1Eu);
              }
              if (v19)
              {
                uint64_t v23 = v19;
                goto LABEL_20;
              }
              goto LABEL_21;
            }
          }
          ++v12;
        }
        while (v11 != v12);
      }
      CFRelease(v9);
      a3 = v37;
      char HasPendingTransaction = v36;
      uint64_t v8 = v35;
    }
    ABChangeHistoryAssociateSequenceNumberWithClient(0.0, v8, v43, a3);
    ABAddressBookSetIntegerProperty(v42, @"__CPRecordSequenceNumber", v43, v29, v30, v31, v32, v33, v34);
    if ((HasPendingTransaction & 1) == 0) {
      _commitWriterConnection(v8, (uint64_t)"void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(ABAddressBookRef, CFArrayRef (^)(void), CFStringRef)");
    }
  }
}

BOOL ABChangeHistoryInsertPersonChangeRecordIntoAddressBook(BOOL result, int a2, int a3, int a4, int a5, void *a6, int a7, int a8, void *a9)
{
  if (result) {
    return ABChangeHistoryInsertPersonChangeRecord(*(void *)(result + 16), a2, a3, a4, a5, a6, a7, a8, a9, 0, 0);
  }
  return result;
}

BOOL ABChangeHistoryInsertGroupChangeRecord(uint64_t a1, int a2, int a3, int a4, void *a5, int a6, void *a7)
{
  CPRecordStoreGetDatabase();
  uint64_t v13 = CPSqliteDatabaseConnectionForReading();
  uint64_t v14 = CPSqliteConnectionStatementForSQL();
  if (v14)
  {
    uint64_t v15 = v14;
    sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 2, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 3, a4);
    if (a5) {
      sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 4, (const char *)[a5 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_bind_null(*(sqlite3_stmt **)(v15 + 8), 4);
    }
    uint64_t v20 = *(sqlite3_stmt **)(v15 + 8);
    if (a6 == -1) {
      sqlite3_bind_null(v20, 5);
    }
    else {
      sqlite3_bind_int(v20, 5, a6);
    }
    sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 6, (const char *)[a7 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    int v21 = CPSqliteStatementPerform();
    BOOL v19 = v21 == 101;
    if (v21 != 101)
    {
      uint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
      int v23 = sqlite3_errcode(*(sqlite3 **)(v13 + 8));
      ABRecordRef v24 = sqlite3_errmsg(*(sqlite3 **)(v13 + 8));
      fprintf(v22, "Error %d adding group change log entry statement: %s\n", v23, v24);
    }
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = sqlite3_errcode(*(sqlite3 **)(v13 + 8));
    uint64_t v18 = sqlite3_errmsg(*(sqlite3 **)(v13 + 8));
    fprintf(v16, "Error %d preparing group changes log statement: %s\n", v17, v18);
    return 0;
  }
  return v19;
}

BOOL ABChangeHistoryInsertPersonChangeRecord(uint64_t a1, int a2, int a3, int a4, int a5, void *a6, int a7, int a8, void *a9, void *a10, void *a11)
{
  CPRecordStoreGetDatabase();
  uint64_t v18 = CPSqliteDatabaseConnectionForReading();
  uint64_t v19 = CPSqliteConnectionStatementForSQL();
  if (v19)
  {
    uint64_t v20 = v19;
    sqlite3_bind_int(*(sqlite3_stmt **)(v19 + 8), 1, a2);
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, a3);
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 3, a4);
    int v21 = *(sqlite3_stmt **)(v20 + 8);
    if (a5) {
      sqlite3_bind_int(v21, 4, 1);
    }
    else {
      sqlite3_bind_null(v21, 4);
    }
    if (a6) {
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 5, (const char *)[a6 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 5);
    }
    int v23 = *(sqlite3_stmt **)(v20 + 8);
    if (a7 == -1) {
      sqlite3_bind_null(v23, 6);
    }
    else {
      sqlite3_bind_int(v23, 6, a7);
    }
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 7, a8);
    if (a9) {
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 8, (const char *)[a9 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 8);
    }
    sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 9);
    if (a10) {
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 10, (const char *)[a10 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 10);
    }
    if (a11) {
      sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 11, (const char *)[a11 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    }
    else {
      sqlite3_bind_null(*(sqlite3_stmt **)(v20 + 8), 11);
    }
    int v24 = CPSqliteStatementPerform();
    BOOL v22 = v24 == 101;
    if (v24 != 101 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      ABChangeHistoryInsertPersonChangeRecord_cold_2(v18);
    }
    CPSqliteStatementReset();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      ABChangeHistoryInsertPersonChangeRecord_cold_1(v18);
    }
    return 0;
  }
  return v22;
}

uint64_t ABChangeHistoryInsertPersonImageChangeRecordForRecordsWithIdentifiers(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
      ppStmt = 0;
      CPRecordStoreGetDatabase();
      uint64_t v5 = CPSqliteDatabaseConnectionForReading();
      uint64_t v6 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", @"SELECT ROWID, StoreID, ExternalIdentifier, guid, PersonLink FROM ABPerson WHERE ROWID IN(? ");
      CFIndex Count = CFArrayGetCount(theArray);
      uint64_t v8 = Count;
      if (Count >= 2)
      {
        CFIndex v9 = Count - 1;
        do
        {
          [v6 appendString:@", ? "];
          --v9;
        }
        while (v9);
      }
      [v6 appendString:@";"]);
      if (sqlite3_prepare(*(sqlite3 **)(v5 + 8), (const char *)[v6 UTF8String], -1, &ppStmt, 0))
      {
        return 0;
      }
      else
      {
        if (v8 >= 1)
        {
          CFIndex v14 = 0;
          do
          {
            uint64_t v15 = ppStmt;
            CFIndex v16 = v14 + 1;
            int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
            sqlite3_bind_int(v15, v16, ValueAtIndex);
            CFIndex v14 = v16;
          }
          while (v8 != v16);
        }
        while (1)
        {
          int v18 = sqlite3_step(ppStmt);
          if (v18 != 100) {
            break;
          }
          objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(ppStmt, 0)));
          objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(ppStmt, 1)));
          uint64_t v19 = sqlite3_column_text(ppStmt, 2);
          if (v19) {
            uint64_t v20 = [NSString stringWithUTF8String:v19];
          }
          else {
            uint64_t v20 = [MEMORY[0x1E4F1CA98] null];
          }
          [v4 addObject:v20];
          int v21 = sqlite3_column_text(ppStmt, 3);
          if (v21) {
            uint64_t v22 = [NSString stringWithUTF8String:v21];
          }
          else {
            uint64_t v22 = [MEMORY[0x1E4F1CA98] null];
          }
          [v4 addObject:v22];
          objc_msgSend(v4, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(ppStmt, 4)));
        }
        if (v18 == 101)
        {
          uint64_t v23 = CPRecordStoreGetSequenceNumber() + 1;
          if ([v4 count])
          {
            unint64_t v29 = 0;
            uint64_t v30 = *MEMORY[0x1E4F5A2B0];
            do
            {
              int v31 = objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v29), "intValue");
              int v32 = objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v29 + 1), "intValue");
              uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v30, [v4 objectAtIndex:v29 + 2]);
              uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v30, [v4 objectAtIndex:v29 + 3]);
              ABChangeHistoryInsertPersonChangeRecord(*(void *)(v2 + 16), v31, 1, v23, 1, v33, v32, objc_msgSend((id)objc_msgSend(v4, "objectAtIndex:", v29 + 4), "intValue"), v34, 0, 0);
              v29 += 5;
            }
            while (v29 < [v4 count]);
          }
          ABAddressBookSetIntegerProperty(v2, @"__CPRecordSequenceNumber", v23, v24, v25, v26, v27, v28, v35);
          uint64_t v2 = 1;
        }
        else
        {
          uint64_t v2 = 0;
        }
        sqlite3_finalize(ppStmt);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool ABChangeHistoryInsertPersonImageChangeRecordForRecordsWithIdentifiers(ABAddressBookRef, CFArrayRef)", 1688, 0, @"failed to write change history records for deleted thumbnails because we were not passed an ABAddressBookRef", v10, v11, v12, v35);
  }
  return v2;
}

void ___filterAndCoalesceChangeResults_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  uint64_t v8 = 0;
  uint64_t v8 = [a3 count];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___filterAndCoalesceChangeResults_block_invoke_2;
  v5[3] = &unk_1E5989328;
  void v5[5] = a3;
  v5[6] = v7;
  v5[4] = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 40);
  objc_msgSend(a3, "_cn_each_reverse:", v5);
  _Block_object_dispose(v7, 8);
}

void sub_19DD41274(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_2(uint64_t result, void *a2)
{
  if (--*(void *)(*(void *)(*(void *)(result + 48) + 8) + 24))
  {
    uint64_t v2 = result;
    CFIndex v3 = [a2 longValue];
    uint64_t result = [*(id *)(v2 + 32) containsIndex:v3];
    if ((result & 1) == 0)
    {
      unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 56), v3);
      uint64_t result = objc_msgSend(*(id *)(v2 + 40), "_cn_take:", *(void *)(*(void *)(*(void *)(v2 + 48) + 8) + 24));
      switch(ValueAtIndex)
      {
        case 1u:
        case 4u:
          uint64_t v5 = *(void *)(v2 + 32);
          long long v6 = &v31;
          uint64_t v31 = MEMORY[0x1E4F143A8];
          uint64_t v32 = 3221225472;
          uint64_t v33 = ___filterAndCoalesceChangeResults_block_invoke_3;
          uint64_t v34 = &unk_1E59892B0;
          uint64_t v7 = *(void *)(v2 + 56);
          uint64_t v8 = *(void *)(v2 + 64);
          uint64_t v35 = v5;
          uint64_t v36 = v8;
          CFIndex v37 = v3;
          goto LABEL_9;
        case 2u:
        case 5u:
          uint64_t v7 = *(void *)(v2 + 56);
          uint64_t v5 = *(void *)(v2 + 32);
          long long v6 = &v25;
          uint64_t v25 = MEMORY[0x1E4F143A8];
          uint64_t v26 = 3221225472;
          uint64_t v27 = ___filterAndCoalesceChangeResults_block_invoke_4;
          uint64_t v28 = &unk_1E59892D8;
          uint64_t v29 = v5;
          CFIndex v30 = v3;
          goto LABEL_9;
        case 7u:
          uint64_t v7 = *(void *)(v2 + 56);
          uint64_t v5 = *(void *)(v2 + 32);
          long long v6 = &v9;
          uint64_t v9 = MEMORY[0x1E4F143A8];
          uint64_t v10 = 3221225472;
          uint64_t v11 = ___filterAndCoalesceChangeResults_block_invoke_7;
          uint64_t v12 = &unk_1E59892D8;
          uint64_t v13 = v5;
          CFIndex v14 = v3;
          goto LABEL_9;
        case 8u:
          uint64_t v7 = *(void *)(v2 + 56);
          uint64_t v5 = *(void *)(v2 + 32);
          long long v6 = &v20;
          uint64_t v20 = MEMORY[0x1E4F143A8];
          uint64_t v21 = 3221225472;
          uint64_t v22 = ___filterAndCoalesceChangeResults_block_invoke_5;
          uint64_t v23 = &unk_1E5989300;
          uint64_t v24 = v5;
          goto LABEL_9;
        case 9u:
          uint64_t v7 = *(void *)(v2 + 56);
          uint64_t v5 = *(void *)(v2 + 32);
          long long v6 = &v15;
          uint64_t v15 = MEMORY[0x1E4F143A8];
          uint64_t v16 = 3221225472;
          int v17 = ___filterAndCoalesceChangeResults_block_invoke_6;
          int v18 = &unk_1E5989300;
          uint64_t v19 = v5;
LABEL_9:
          v38[0] = MEMORY[0x1E4F143A8];
          v38[1] = 3221225472;
          uint8_t v38[2] = ___performBlockWithPreviousIndexes_block_invoke;
          void v38[3] = &unk_1E59893A0;
          v38[5] = v6;
          v38[6] = v7;
          v38[4] = v5;
          uint64_t result = objc_msgSend((id)result, "enumerateObjectsWithOptions:usingBlock:", 2, v38, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23,
                     v24,
                     v25,
                     v26,
                     v27,
                     v28,
                     v29,
                     v30,
                     v31,
                     v32,
                     v33,
                     v34,
                     v35,
                     v36,
                     v37);
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

void ___filterAndCoalesceChangeResults_block_invoke_3(uint64_t a1, CFIndex a2, int a3, unsigned char *a4)
{
  switch(a3)
  {
    case 0:
    case 3:
      [*(id *)(a1 + 32) addIndex:*(void *)(a1 + 48)];
      *a4 = 1;
      break;
    case 1:
    case 4:
      [*(id *)(a1 + 32) addIndex:a2];
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2) == 1)
      {
        uint64_t v7 = *(__CFArray **)(a1 + 40);
        CFIndex v8 = *(void *)(a1 + 48);
        CFArraySetValueAtIndex(v7, v8, (const void *)1);
      }
      break;
    default:
      return;
  }
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_4(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t result = [*(id *)(a1 + 32) addIndex:a2];
  if (a3 == 3 || !a3)
  {
    uint64_t result = [*(id *)(a1 + 32) addIndex:*(void *)(a1 + 40)];
    *a4 = 1;
  }
  return result;
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_5(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 8) {
    return [*(id *)(result + 32) addIndex:a2];
  }
  return result;
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_6(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 9) {
    return [*(id *)(result + 32) addIndex:a2];
  }
  return result;
}

uint64_t ___filterAndCoalesceChangeResults_block_invoke_7(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v4 = result;
  if ((a3 & 0xFFFFFFFE) == 8)
  {
    uint64_t v5 = *(void **)(result + 32);
    return [v5 addIndex:a2];
  }
  else if (a3 == 6)
  {
    [*(id *)(result + 32) addIndex:a2];
    uint64_t result = [*(id *)(v4 + 32) addIndex:*(void *)(v4 + 40)];
    *a4 = 1;
  }
  return result;
}

uint64_t ___collateIndexByGuids_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)[*(id *)(a1 + 32) objectForKey:a2];
  if (!v4)
  {
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
    [*(id *)(a1 + 32) setObject:v4 forKey:a2];
  }
  uint64_t v5 = [NSNumber numberWithLong:*(void *)(a1 + 40)];
  return [v4 addObject:v5];
}

uint64_t ___performBlockWithPreviousIndexes_block_invoke(uint64_t a1, void *a2)
{
  CFIndex v3 = [a2 longValue];
  uint64_t result = [*(id *)(a1 + 32) containsIndex:v3];
  if ((result & 1) == 0)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v3);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v5();
  }
  return result;
}

void OUTLINED_FUNCTION_1_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_19DD41EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DD41F7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _createDictionaryFromFile(const __CFString *a1)
{
  uint64_t v2 = (__CFBundle *)_ABBundle();
  CFURLRef v3 = CFBundleCopyResourceURL(v2, a1, 0, 0);
  uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithContentsOfFile:", -[__CFURL path](v3, "path"));
  CFRelease(v3);
  return v4;
}

uint64_t socialProfileURLForServiceAndUsername(void *key, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (socialProfileURLForServiceAndUsername_onceToken != -1) {
    dispatch_once(&socialProfileURLForServiceAndUsername_onceToken, &__block_literal_global_11);
  }
  CFDictionaryRef v4 = (const __CFDictionary *)socialProfileURLForServiceAndUsername_formats;
  if (!key || !socialProfileURLForServiceAndUsername_formats)
  {
LABEL_11:
    CFNumberRef Value = CFDictionaryGetValue(v4, @"UnknownServiceURLFormat");
    if (a2) {
      goto LABEL_7;
    }
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)socialProfileURLForServiceAndUsername_formats, key);
  if (!Value)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)socialProfileURLForServiceAndUsername_formats;
    goto LABEL_11;
  }
  if (!a2) {
    return 0;
  }
LABEL_7:
  uint64_t v10 = 0;
  uint64_t v6 = objc_msgSend(a2, "stringByAddingPercentEncodingWithAllowedCharacters:", objc_msgSend(MEMORY[0x1E4F28B88], "URLPathAllowedCharacterSet"));
  uint64_t v7 = [NSString stringWithValidatedFormat:Value, @"%@", &v10, v6 validFormatSpecifiers error];
  if (v10)
  {
    CFIndex v8 = ABOSLogGeneral();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543874;
      uint64_t v12 = Value;
      __int16 v13 = 2114;
      CFIndex v14 = a2;
      __int16 v15 = 2114;
      uint64_t v16 = v10;
      _os_log_error_impl(&dword_19DCDB000, v8, OS_LOG_TYPE_ERROR, "Error creating social profile URL from format = %{public}@, username = %{public}@, CFErrorRef error = %{public}@", buf, 0x20u);
    }
  }
  return v7;
}

uint64_t __socialProfileURLForServiceAndUsername_block_invoke()
{
  uint64_t result = _createDictionaryFromFile(@"SocialServicesURLFormats.plist");
  socialProfileURLForServiceAndUsername_formats = result;
  return result;
}

void *socialProfileFromURL(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (socialProfileFromURL_onceToken != -1) {
    dispatch_once(&socialProfileFromURL_onceToken, &__block_literal_global_11);
  }
  uint64_t v28 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", a3);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  obint j = (id)[(id)socialProfileFromURL_servicesDict allKeys];
  uint64_t v9 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v31 + 1) + 8 * i);
        CFIndex v14 = (void *)MEMORY[0x19F3B4540]();
        uint64_t v30 = 0;
        __int16 v15 = (void *)[MEMORY[0x1E4F28FD8] regularExpressionWithPattern:v13 options:1 error:&v30];
        uint64_t v16 = [a1 length];
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 3221225472;
        v29[2] = __socialProfileFromURL_block_invoke_2;
        v29[3] = &unk_1E59893E0;
        void v29[6] = a1;
        v29[7] = a4;
        v29[4] = v28;
        v29[5] = v13;
        objc_msgSend(v15, "enumerateMatchesInString:options:range:usingBlock:", a1, 0, 0, v16, v29);
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v10);
  }
  if (![v28 objectForKey:@"url"])
  {
    uint64_t v17 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:a1];
    if ([v17 scheme])
    {
      [v28 setObject:a1 forKey:@"url"];
      uint64_t v18 = v22;
      uint64_t v19 = (uint64_t)a2;
      if (v22 || (uint64_t v18 = _socialProfileUsernameFromURL((uint64_t)a1)) != 0) {
        [v28 setObject:v18 forKey:@"username"];
      }
      if (!a2)
      {
        uint64_t v19 = _socialProfileServiceFromURL((uint64_t)a1);
        if (!v19) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v19 = (uint64_t)a2;
      if (!a1 || !a2)
      {
LABEL_22:
        if (v17) {

        }
        goto LABEL_24;
      }
      objc_msgSend(v28, "setObject:forKey:", socialProfileURLForServiceAndUsername(a2, a1), @"url");
      [v28 setObject:a1 forKey:@"username"];
    }
    [v28 setObject:v19 forKey:@"service"];
    goto LABEL_22;
  }
LABEL_24:
  if (v28)
  {
    if (a5) {
      [v28 setObject:a5 forKey:@"displayname"];
    }
    if (a6) {
      [v28 setObject:a6 forKey:@"teamIdentifier"];
    }
    if (a7) {
      [v28 setObject:a7 forKey:@"bundleIdentifiers"];
    }
  }
  return v28;
}

uint64_t __socialProfileFromURL_block_invoke()
{
  uint64_t result = _createDictionaryFromFile(@"SocialServicesURLRegexes.plist");
  socialProfileFromURL_servicesDict = result;
  return result;
}

uint64_t __socialProfileFromURL_block_invoke_2(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 numberOfRanges] >= 3)
  {
    CFDictionaryRef v4 = *(void **)(a1 + 48);
    uint64_t v5 = [a2 rangeAtIndex:2];
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", objc_msgSend((id)objc_msgSend(v4, "substringWithRange:", v5, v6), "stringByRemovingPercentEncoding"), @"username");
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    [*(id *)(a1 + 32) setObject:v7 forKey:@"identifier"];
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", objc_msgSend((id)socialProfileFromURL_servicesDict, "objectForKey:", *(void *)(a1 + 40)), @"service");
  CFIndex v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  return [v8 setObject:v9 forKey:@"url"];
}

uint64_t _socialProfileUsernameFromURL(uint64_t a1)
{
  uint64_t v1 = (void *)[MEMORY[0x1E4F1CB10] URLWithString:a1];
  if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "lowercaseString"), "isEqualToString:", @"x-apple")|| !objc_msgSend(v1, "resourceSpecifier"))
  {
    return 0;
  }
  uint64_t v2 = (void *)[v1 resourceSpecifier];
  return [v2 stringByRemovingPercentEncoding];
}

uint64_t _socialProfileServiceFromURL(uint64_t a1)
{
  uint64_t v1 = (void *)[MEMORY[0x1E4F1CB10] URLWithString:a1];
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "lowercaseString"), "isEqualToString:", @"http") & 1) == 0&& !objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "lowercaseString"), "isEqualToString:", @"https")|| !objc_msgSend(v1, "host"))
  {
    return 0;
  }
  uint64_t v2 = (void *)[v1 host];
  if (![v2 hasPrefix:@"www."]) {
    return (uint64_t)v2;
  }
  return [v2 substringFromIndex:4];
}

CFStringRef ABCopyPreferredNameForPerson(const void *a1)
{
  CFTypeRef v2 = ABPersonCopyPreferredLinkedPersonForName(a1);
  if (v2)
  {
    CFURLRef v3 = v2;
    CFStringRef v4 = ABRecordCopyCompositeName(v2);
    CFRelease(v3);
    return v4;
  }
  else
  {
    return ABRecordCopyCompositeName(a1);
  }
}

uint64_t _ABFavoritesPhoneNumbersEqualCallback(void *a1, void *a2)
{
  CFStringRef v4 = (const void *)CPPhoneNumberCopyHomeCountryCode();
  [a1 UTF8String];
  [a2 UTF8String];
  uint64_t v5 = CPPhoneNumbersEqual();
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

void sub_19DD44A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _SpeedDialListChangedExternally(uint64_t a1, void *a2)
{
  return [a2 _listChangedExternally];
}

void _ABPhoneUtilitiesSetDevicePhoneNumber(CFTypeRef cf)
{
  if ((CFTypeRef)_globalPhoneNumberOverride != cf)
  {
    if (_globalPhoneNumberOverride) {
      CFRelease((CFTypeRef)_globalPhoneNumberOverride);
    }
    if (cf) {
      CFRetain(cf);
    }
    _globalPhoneNumberOverride = (uint64_t)cf;
  }
}

uint64_t (*ABPhoneUtilitiesCopyDevicePhoneNumber())(void)
{
  uint64_t v0 = (const void *)_globalPhoneNumberOverride;
  if (_globalPhoneNumberOverride)
  {
    return (uint64_t (*)(void))CFRetain(v0);
  }
  else
  {
    uint64_t result = (uint64_t (*)(void))ABPhoneUtilitiesCopyDevicePhoneNumber_AB_CTSettingCopyMyPhoneNumber;
    if (ABPhoneUtilitiesCopyDevicePhoneNumber__ctFrameworkHandle) {
      BOOL v2 = ABPhoneUtilitiesCopyDevicePhoneNumber_AB_CTSettingCopyMyPhoneNumber == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2
      || (+[ABDynamicLoader loadFrameworkAtPath:@"/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony" andStoreHandle:&ABPhoneUtilitiesCopyDevicePhoneNumber__ctFrameworkHandle bundle:0], uint64_t result = (uint64_t (*)(void))dlsym((void *)ABPhoneUtilitiesCopyDevicePhoneNumber__ctFrameworkHandle, "CTSettingCopyMyPhoneNumber"), (ABPhoneUtilitiesCopyDevicePhoneNumber_AB_CTSettingCopyMyPhoneNumber = result) != 0))
    {
      return (uint64_t (*)(void))result();
    }
  }
  return result;
}

uint64_t _ABPhoneUtilitiesSetIgnoreMatchingForLostMode(uint64_t result)
{
  _ignoreMatchingForLostMode = result;
  return result;
}

void sub_19DD479B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

const void *ABAddressBookPrimePersonContextForIdentifier(uint64_t a1, uint64_t a2, const void *a3)
{
  CFStringRef v4 = (const void *)CPRecordCreateWithRecordID();
  uint64_t v5 = v4;
  if (a3) {
    ABRecordSetValue(v4, kABPersonInternalUUIDProperty, a3, 0);
  }
  CPRecordStoreAddRecord();
  CFRelease(v5);
  return v5;
}

uint64_t ABAddressBookCopyAllPeopleForBufferPredicate(uint64_t a1, void *a2, int a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (a3 == 1) {
      uint64_t v5 = @" ORDER BY LastSortLanguageIndex, LastSortSection, LastSort";
    }
    else {
      uint64_t v5 = @" ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort";
    }
    [NSString stringWithFormat:@"WHERE rowid IN(%@) %@", objc_msgSend(a2, "query"), v5];
    return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  }
  return result;
}

void __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  int v11 = 1;
  CFStringRef v4 = objc_opt_new();
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_2;
  v9[3] = &unk_1E5989718;
  v9[4] = v10;
  v9[5] = a2;
  [v4 setIntBinder:v9];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_3;
  v8[3] = &unk_1E59890C0;
  v8[4] = v10;
  v8[5] = a2;
  [v4 setStringBinder:v8];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_4;
  void v7[3] = &unk_1E5989740;
  v7[4] = v10;
  void v7[5] = a2;
  [v4 setBlobBinder:v7];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_5;
  v6[3] = &unk_1E5989768;
  v6[4] = v10;
  void v6[5] = a2;
  [v4 setPointerBinder:v6];
  uint64_t v5 = [*(id *)(a1 + 32) bindBlock];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v4);
  _Block_object_dispose(v10, 8);
}

void sub_19DD48118(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a1 + 40) + 8), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_3(uint64_t a1, uint64_t a2)
{
  CFURLRef v3 = *(sqlite3_stmt **)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  int v5 = *(_DWORD *)(v4 + 24);
  if (a2)
  {
    uint64_t v6 = (const char *)_CPCreateUTF8StringFromCFString();
    uint64_t result = sqlite3_bind_text(v3, v5, v6, -1, MEMORY[0x1E4F14838]);
  }
  else
  {
    uint64_t result = sqlite3_bind_null(*(sqlite3_stmt **)(*(void *)(a1 + 40) + 8), *(_DWORD *)(v4 + 24));
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_4(uint64_t a1, void *a2, int n)
{
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(*(void *)(a1 + 40) + 8), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2, n, 0);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ABAddressBookCopyAllPeopleForBufferPredicate_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(*(void *)(a1 + 40) + 8), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), &v4, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL AppendPendingBlobData(void *a1)
{
  unint64_t v2 = objc_msgSend((id)objc_msgSend(a1, "mutableData"), "length");
  uint64_t v3 = [a1 blobLength];
  uint64_t v4 = v3 - [a1 blobBytesWritten];
  unint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "mutableData"), "length") + v4;
  unint64_t v6 = [a1 maxBufferSize];
  if (v5 > v6)
  {
    if (v2 >= [a1 maxBufferSize]) {
      return v5 <= v6;
    }
    uint64_t v4 = [a1 maxBufferSize] - v2;
  }
  if (v4)
  {
    objc_msgSend((id)objc_msgSend(a1, "mutableData"), "increaseLengthBy:", v4);
    sqlite3_blob_read((sqlite3_blob *)[a1 incompleteBlob], (void *)(objc_msgSend((id)objc_msgSend(a1, "mutableData"), "mutableBytes") + v2), v4, objc_msgSend(a1, "blobBytesWritten"));
    objc_msgSend(a1, "setBlobBytesWritten:", objc_msgSend(a1, "blobBytesWritten") + v4);
  }
  if (v5 <= v6)
  {
    sqlite3_blob_close((sqlite3_blob *)[a1 incompleteBlob]);
    [a1 setIncompleteBlob:0];
    [a1 setBlobLength:0];
    [a1 setBlobBytesWritten:0];
  }
  return v5 <= v6;
}

uint64_t _ABStringByTrimmingWhiteSpace(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
  return [a1 stringByTrimmingCharactersInSet:v2];
}

uint64_t ABCFTSIsEnabled()
{
  return gFTSEabled;
}

uint64_t ABCFTSSetEnabled(uint64_t result)
{
  gFTSEabled = result;
  return result;
}

void *ABCFTSSetCollatorOverrideForDatabaseConnectionHandle(const void *a1, void *a2)
{
  uint64_t result = ABCFTSGetCollationContextForDatabaseConnectionHandle(a1);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = (void *)*result;
    if (result != a2)
    {
      if (result) {
        uint64_t result = (void *)ABCReleaseCollator((uint64_t)result);
      }
      void *v4 = a2;
    }
  }
  return result;
}

const void *ABCFTSGetCollationContextForDatabaseConnectionHandle(const void *a1)
{
  if (ABCFTSGetCollationContextDictionary_predicate != -1) {
    dispatch_once(&ABCFTSGetCollationContextDictionary_predicate, &__block_literal_global_19);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)ABCFTSGetCollationContextDictionary_collalationContextDict;
  pthread_mutex_lock(&gDictionaryMutex);
  CFNumberRef Value = CFDictionaryGetValue(v2, a1);
  pthread_mutex_unlock(&gDictionaryMutex);
  return Value;
}

void *ABCFTSSetLocaleOverrideForDatabaseConnectionHandle(const void *a1, void *a2)
{
  uint64_t result = ABCFTSGetCollationContextForDatabaseConnectionHandle(a1);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = (void *)result[1];
    if (result != a2)
    {
      if (result) {
        CFRelease(result);
      }
      v4[1] = a2;
      return CFRetain(a2);
    }
  }
  return result;
}

uint64_t ABCFTSCollationContextFreeContextForDatabaseHandle(const void *a1)
{
  CFDictionaryRef v2 = (uint64_t *)ABCFTSGetCollationContextForDatabaseConnectionHandle(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *v2;
    if (v4) {
      ABCReleaseCollator(v4);
    }
    unint64_t v5 = (const void *)v3[1];
    if (v5) {
      CFRelease(v5);
    }
    unint64_t v6 = (const void *)v3[2];
    if (v6) {
      CFRelease(v6);
    }
    free((void *)v3[3]);
    free(v3);
  }
  return ABCFTSSetCollationContextForDatabaseConnectionHandle(a1, 0);
}

void ABCFSmartDialerFTSTokenizerPropertyMatchCollectFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 4)
  {
    int v5 = sqlite3_value_int(a3[3]);
    unint64_t v6 = (NSMapTable *)sqlite3_value_blob(*a3);
    uint64_t v7 = [MEMORY[0x1E4F28E10] mapTableWithKeyOptions:1282 valueOptions:0];
    CFIndex v8 = (unsigned int *)sqlite3_value_blob(a3[1]);
    CFArrayRef v9 = (const __CFArray *)sqlite3_value_blob(a3[2]);
    if (v6)
    {
      table = (NSMapTable *)v7;
      uint64_t v19 = v6;
      int v20 = v5;
      unsigned int v21 = v8[1];
      if (v21)
      {
        CFArrayRef v10 = v9;
        int v11 = 0;
        unsigned int v12 = *v8;
        int v13 = 2;
        do
        {
          if (v12)
          {
            unsigned int v14 = 0;
            __int16 v15 = 0;
            unsigned int v16 = 0;
            int v17 = v13;
            do
            {
              if (v8[v17])
              {
                if (!v15)
                {
                  __int16 v15 = (void *)[MEMORY[0x1E4F1CA48] array];
                  switch(v11)
                  {
                    case 0:
                      ABPropertyID v18 = kABPersonFirstNameProperty;
                      break;
                    case 1:
                      ABPropertyID v18 = kABPersonMiddleNameProperty;
                      break;
                    case 2:
                      ABPropertyID v18 = kABPersonLastNameProperty;
                      break;
                    case 3:
                      ABPropertyID v18 = kABPersonOrganizationProperty;
                      break;
                    case 4:
                      ABPropertyID v18 = kABPersonNicknameProperty;
                      break;
                    default:
                      ABPropertyID v18 = -1;
                      break;
                  }
                  NSMapInsert(table, (const void *)(v18 + 1), v15);
                }
                objc_msgSend(v15, "addObject:", CFArrayGetValueAtIndex(v10, v16));
              }
              ++v16;
              v17 += 3 * v21;
              v14 += 2;
            }
            while (v14 < v12);
          }
          ++v11;
          v13 += 3;
        }
        while (v11 != v21);
      }
      int v5 = v20;
      if (table) {
        NSMapInsert(v19, (const void *)v20, table);
      }
    }
    sqlite3_result_int(a1, v5);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t ABCFFTSTokenizerCreate(int a1, uint64_t a2, void *a3)
{
  unint64_t v6 = sqlite3_malloc(64);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  v6[2] = 0u;
  v6[3] = 0u;
  *unint64_t v6 = 0u;
  v6[1] = 0u;
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  *((void *)v7 + 3) = CFCharacterSetCreateInvertedSet(0, Predefined);
  CFCharacterSetRef v9 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  CFMutableStringRef MutableCopy = CFCharacterSetCreateMutableCopy(0, v9);
  *((void *)v7 + 4) = MutableCopy;
  if (MutableCopy) {
    CFCharacterSetAddCharactersInString(MutableCopy, @"*");
  }
  if (a1 <= 1)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "en", 0x8000100u);
LABEL_9:
    CFStringRef v14 = 0;
    goto LABEL_10;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const char **)(a2 + 8), 0x8000100u);
  if (a1 < 4) {
    goto LABEL_9;
  }
  int v13 = *(const char **)(a2 + 24);
  if (!v13) {
    goto LABEL_9;
  }
  CFStringRef v14 = CFStringCreateWithCString(v11, v13, 0x8000100u);
LABEL_10:
  *((void *)v7 + _ABCPostDatabaseChangedNotification(0, 1) = CFLocaleCreate(v11, v12);
  if (v14) {
    CFStringRef v15 = v14;
  }
  else {
    CFStringRef v15 = v12;
  }
  *((void *)v7 + 2) = ABCCreateCollatorWithPreferredLocale(0, 1, v15);
  v19.location = 0;
  v19.CFIndex length = 0;
  *((void *)v7 + 5) = CFStringTokenizerCreate(v11, &stru_1EF03E278, v19, 0x810000uLL, *((CFLocaleRef *)v7 + 1));
  *((void *)v7 + 7) = CFArrayCreateMutable(0, 2, MEMORY[0x1E4F1D510]);
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  unsigned int v16 = (const void *)*((void *)v7 + 3);
  if (v16)
  {
    if (*((void *)v7 + 4))
    {
      uint64_t result = 0;
      *a3 = v7;
      return result;
    }
    CFRelease(v16);
  }
  ABPropertyID v18 = (const void *)*((void *)v7 + 4);
  if (v18) {
    CFRelease(v18);
  }
  return 7;
}

uint64_t ABCFFTSTokenizerDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFDictionaryRef v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  if (!*(unsigned char *)(a1 + 49))
  {
    uint64_t v3 = *(const void **)(a1 + 8);
    if (v3) {
      CFRelease(v3);
    }
  }
  if (!*(unsigned char *)(a1 + 50))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      ABCReleaseCollator(v4);
    }
  }
  int v5 = *(const void **)(a1 + 56);
  if (v5) {
    CFRelease(v5);
  }
  sqlite3_free((void *)a1);
  return 0;
}

uint64_t ABCFFTSTokenizerOpen(uint64_t a1, char *__s, int a3, void *a4)
{
  int v5 = a3;
  *a4 = 0;
  if (a3 < 0)
  {
    if (!__s) {
      return 1;
    }
    int v5 = strlen(__s);
  }
  CFIndex v8 = sqlite3_malloc(56);
  if (!v8) {
    return 7;
  }
  CFCharacterSetRef v9 = v8;
  void v8[6] = 0;
  *((_OWORD *)v8 + _ABCPostDatabaseChangedNotification(0, 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)CFIndex v8 = 0u;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)))
  {
    unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0);
    *((void *)v9 + 6) = CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), 0);
  }
  else
  {
    *((void *)v9 + 6) = ABTokenListCreate();
  }
  CFStringRef v12 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!*(unsigned char *)(a1 + 48))
  {
    int v13 = ABCFTSGetCollationContextForDatabaseConnectionHandle(*(const void **)(*(void *)a1 + 48));
    if (v13)
    {
      CFLocaleRef v14 = (const __CFLocale *)*((void *)v13 + 1);
      if (v14)
      {
        *(unsigned char *)(a1 + 49) = 1;
        CFStringRef v15 = *(const void **)(a1 + 8);
        if (v15) {
          CFRelease(v15);
        }
        *(void *)(a1 + 8) = v14;
        unsigned int v16 = *(const void **)(a1 + 40);
        if (v16) {
          CFRelease(v16);
        }
        v25.location = 0;
        v25.CFIndex length = 0;
        *(void *)(a1 + 40) = CFStringTokenizerCreate(*v12, &stru_1EF03E278, v25, 0x810000uLL, v14);
      }
    }
    int v17 = (uint64_t *)ABCFTSGetCollationContextForDatabaseConnectionHandle(*(const void **)(*(void *)a1 + 48));
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17)
      {
        uint64_t v19 = *(void *)(a1 + 16);
        if (v19) {
          ABCReleaseCollator(v19);
        }
        *(void *)(a1 + 16) = v18;
        *(unsigned char *)(a1 + 50) = 1;
      }
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  CFStringRef v20 = CFStringCreateWithBytes(*v12, (const UInt8 *)__s, v5, 0x8000100u, 0);
  *((void *)v9 + _ABCPostDatabaseChangedNotification(0, 1) = v20;
  if (v20)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v20);
    CFStringTrimWhitespace(MutableCopy);
    if (CFStringHasPrefix(MutableCopy, @"##&"))
    {
      *((_DWORD *)v9 + 4) = 1;
      CFRange v22 = CFStringFind((CFStringRef)*((void *)v9 + 1), @"##&", 0);
      *((void *)v9 + 5) = v22.length + v22.location;
    }
    else
    {
      *((_DWORD *)v9 + 4) = 0;
    }
    CFRelease(MutableCopy);
    CFIndex Length = CFStringGetLength(*((CFStringRef *)v9 + 1));
    if (*((_DWORD *)v9 + 4))
    {
      v26.CFIndex length = Length;
      v26.location = 0;
      CFStringTokenizerSetString(*(CFStringTokenizerRef *)(a1 + 40), *((CFStringRef *)v9 + 1), v26);
    }
    else
    {
      ABTokenListPopulateFromString(*((void *)v9 + 6), *(__CFStringTokenizer **)(a1 + 40), *(void *)(a1 + 16), *((const __CFString **)v9 + 1), 1, 1, 0);
    }
    uint64_t v24 = (const void *)*((void *)v9 + 1);
    if (v24)
    {
      if (*(void *)(a1 + 40))
      {
        uint64_t result = 0;
        *a4 = v9;
        return result;
      }
      CFRelease(v24);
    }
  }
  sqlite3_free(v9);
  return 1;
}

uint64_t ABCFFTSTokenizerClose(CFTypeRef *a1)
{
  CFDictionaryRef v2 = (CFMutableArrayRef *)*a1;
  CFRelease(a1[1]);
  CFArrayAppendValue(v2[7], a1[6]);
  ABTokenListRemoveAllTokens((uint64_t)a1[6]);
  CFRelease(a1[6]);
  uint64_t v3 = (void *)a1[4];
  if (v3) {
    free(v3);
  }
  sqlite3_free(a1);
  return 0;
}

uint64_t ABCFFTSTokenizerNext(uint64_t *a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = *a1;
  *a3 = 0;
  int v12 = *((_DWORD *)a1 + 4);
  if (v12)
  {
    uint64_t v28 = a6;
    if (v12 == 1)
    {
      CFIndex v13 = a1[5];
      do
      {
        v35.CFIndex length = CFStringGetLength((CFStringRef)a1[1]) - a1[5];
        result.CFIndex location = 0;
        result.CFIndex length = 0;
        CFIndex v31 = 0;
        CFIndex usedBufLen = 0;
        int64_t v30 = 0;
        v35.CFIndex location = v13;
        if (!CFStringFindCharacterFromSet((CFStringRef)a1[1], *(CFCharacterSetRef *)(v11 + 24), v35, 0, &result)) {
          return 101;
        }
        v34.CFIndex length = result.location;
        v34.CFIndex location = 0;
        CFStringGetBytes((CFStringRef)a1[1], v34, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
        CFIndex location = result.location;
        *a4 = usedBufLen;
        v15.CFIndex length = CFStringGetLength((CFStringRef)a1[1]) - location;
        if (v15.length >= 1
          && (v15.CFIndex location = location,
              CFStringFindCharacterFromSet((CFStringRef)a1[1], *(CFCharacterSetRef *)(v11 + 32), v15, 0, &result)))
        {
          v16.CFIndex length = result.location;
          CFIndex v17 = result.location - v13;
          CFStringRef v18 = (const __CFString *)a1[1];
        }
        else
        {
          CFIndex Length = CFStringGetLength((CFStringRef)a1[1]);
          CFIndex v17 = Length - result.location;
          CFStringRef v18 = (const __CFString *)a1[1];
          v16.CFIndex length = CFStringGetLength(v18);
        }
        v16.CFIndex location = 0;
        CFStringGetBytes(v18, v16, 0x8000100u, 0, 0, 0, 0, &v31);
        *a5 = v31;
        v36.CFIndex location = v13;
        v36.CFIndex length = v17;
        CFStringRef v20 = CFStringCreateWithSubstring(0, (CFStringRef)a1[1], v36);
        unsigned int v21 = (void *)a1[4];
        if (v21) {
          free(v21);
        }
        CFRange v22 = ABCreateSortKey(v20, *(void *)(v11 + 16), 0, &v30);
        a1[4] = (uint64_t)v22;
        *a3 = v30;
        *a2 = v22;
        CFRelease(v20);
        CFIndex v23 = v17 + v13;
        if (*a3)
        {
          a1[5] = v23;
          break;
        }
        v37.CFIndex length = CFStringGetLength((CFStringRef)a1[1]) - v23;
        v29.CFIndex location = 0;
        v29.CFIndex length = 0;
        v37.CFIndex location = v23;
        if (!CFStringFindWithOptions((CFStringRef)a1[1], @"##&", v37, 0, &v29)) {
          return 101;
        }
        CFIndex v13 = v29.length + v29.location;
        a1[5] = v29.length + v29.location;
      }
      while (!*a3);
    }
  }
  else
  {
    uint64_t v24 = a1[6];
    if (!v24) {
      ABCFFTSTokenizerNext_cold_1();
    }
    uint64_t v25 = a1[3];
    if (*(void *)(v24 + 32) == v25) {
      return 101;
    }
    uint64_t v28 = a6;
    *a3 = ABTokenListGetTokenCollationKeyLengthAtIndex(v24, v25);
    *a2 = ABTokenListGetTokenCollationKeyAtIndex(a1[6], a1[3]);
    *a4 = ABTokenListGetTokenStartByteOffsetAtIndex(a1[6], a1[3]);
    *a5 = ABTokenListGetTokenEndByteOffsetAtIndex(a1[6], a1[3]);
  }
  uint64_t v26 = 0;
  uint64_t v27 = a1[3];
  a1[3] = v27 + 1;
  *uint64_t v28 = v27;
  return v26;
}

void ABCFFTSTokenizerNameRankFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 < 2) {
    goto LABEL_11;
  }
  uint64_t v4 = (unsigned int *)sqlite3_value_blob(*a3);
  unint64_t v5 = *v4;
  unsigned int v6 = v4[1];
  CFArrayRef v7 = (const __CFArray *)sqlite3_value_blob(a3[1]);
  if (v5) {
    goto LABEL_11;
  }
  CFArrayRef v8 = v7;
  CFIndex v20 = 2 * CFArrayGetCount(v7);
  BOOL v9 = v20 == v5 && v6 == 25;
  if (!v9 || v5 == 0)
  {
LABEL_11:
    int v12 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    int v12 = 0;
    unint64_t v13 = v5 >> 1;
    int v14 = 2;
    do
    {
      uint64_t v15 = 0;
      char v16 = 0;
      int v17 = v14;
      do
      {
        if (((0xFF6FF8uLL >> v15) & 1) == 0)
        {
          if (v4[v17])
          {
            ++v12;
            if (v11 < v13)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
              v12 += ((v16 & 1) == 0) + CFStringGetLength(ValueAtIndex);
              char v16 = 1;
            }
          }
        }
        ++v15;
        v17 += 3;
      }
      while (v15 != 25);
      ++v11;
      v14 += 75;
    }
    while (v11 != v20);
  }
  sqlite3_result_int(a1, v12);
}

void ABCFFTSTokenizerPropertyMatchFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  table = (NSMapTable *)[MEMORY[0x1E4F28E10] mapTableWithKeyOptions:1282 valueOptions:0];
  uint64_t v19 = table;
  if (a2 >= 2)
  {
    unint64_t v5 = (unsigned int *)sqlite3_value_blob(*a3);
    CFArrayRef v6 = (const __CFArray *)sqlite3_value_blob(a3[1]);
    unsigned int v17 = v5[1];
    if (v17)
    {
      CFArrayRef v7 = v6;
      int v8 = 0;
      unsigned int v9 = *v5;
      int v10 = 2;
      do
      {
        if (v9)
        {
          unsigned int v11 = 0;
          int v12 = 0;
          unsigned int v13 = 0;
          int v14 = v10;
          do
          {
            if (v5[v14])
            {
              if (!v12)
              {
                int v12 = (void *)[MEMORY[0x1E4F1CA48] array];
                int v15 = ABCFFTSColumnToABPropertyID(v8);
                NSMapInsert(table, (const void *)(v15 + 1), v12);
              }
              objc_msgSend(v12, "addObject:", CFArrayGetValueAtIndex(v7, v13));
            }
            ++v13;
            v14 += 3 * v17;
            v11 += 2;
          }
          while (v11 < v9);
        }
        ++v8;
        v10 += 3;
      }
      while (v8 != v17);
    }
  }
  sqlite3_result_blob(a1, &v19, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void ABCFSmartDialerFTSTokenizerPropertyMatchFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  table = (NSMapTable *)[MEMORY[0x1E4F28E10] mapTableWithKeyOptions:1282 valueOptions:0];
  uint64_t v19 = table;
  if (a2 >= 2)
  {
    unint64_t v5 = (unsigned int *)sqlite3_value_blob(*a3);
    CFArrayRef v6 = (const __CFArray *)sqlite3_value_blob(a3[1]);
    unsigned int v17 = v5[1];
    if (v17)
    {
      CFArrayRef v7 = v6;
      int v8 = 0;
      unsigned int v9 = *v5;
      int v10 = 2;
      do
      {
        if (v9)
        {
          unsigned int v11 = 0;
          int v12 = 0;
          unsigned int v13 = 0;
          int v14 = v10;
          do
          {
            if (v5[v14])
            {
              if (!v12)
              {
                int v12 = (void *)[MEMORY[0x1E4F1CA48] array];
                switch(v8)
                {
                  case 0:
                    ABPropertyID v15 = kABPersonFirstNameProperty;
                    break;
                  case 1:
                    ABPropertyID v15 = kABPersonMiddleNameProperty;
                    break;
                  case 2:
                    ABPropertyID v15 = kABPersonLastNameProperty;
                    break;
                  case 3:
                    ABPropertyID v15 = kABPersonOrganizationProperty;
                    break;
                  case 4:
                    ABPropertyID v15 = kABPersonNicknameProperty;
                    break;
                  default:
                    ABPropertyID v15 = -1;
                    break;
                }
                NSMapInsert(table, (const void *)(v15 + 1), v12);
              }
              objc_msgSend(v12, "addObject:", CFArrayGetValueAtIndex(v7, v13));
            }
            ++v13;
            v14 += 3 * v17;
            v11 += 2;
          }
          while (v11 < v9);
        }
        ++v8;
        v10 += 3;
      }
      while (v8 != v17);
    }
  }
  sqlite3_result_blob(a1, &v19, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void ABCFFTSTokenizerPropertyMatchCollectFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 4)
  {
    int v5 = sqlite3_value_int(a3[3]);
    CFArrayRef v6 = (NSMapTable *)sqlite3_value_blob(*a3);
    uint64_t v7 = [MEMORY[0x1E4F28E10] mapTableWithKeyOptions:1282 valueOptions:0];
    int v8 = (unsigned int *)sqlite3_value_blob(a3[1]);
    CFArrayRef v9 = (const __CFArray *)sqlite3_value_blob(a3[2]);
    if (v6)
    {
      table = (NSMapTable *)v7;
      uint64_t v19 = v6;
      int v20 = v5;
      unsigned int v21 = v8[1];
      if (v21)
      {
        CFArrayRef v10 = v9;
        int v11 = 0;
        unsigned int v12 = *v8;
        int v13 = 2;
        do
        {
          if (v12)
          {
            unsigned int v14 = 0;
            ABPropertyID v15 = 0;
            unsigned int v16 = 0;
            int v17 = v13;
            do
            {
              if (v8[v17])
              {
                if (!v15)
                {
                  ABPropertyID v15 = (void *)[MEMORY[0x1E4F1CA48] array];
                  int v18 = ABCFFTSColumnToABPropertyID(v11);
                  NSMapInsert(table, (const void *)(v18 + 1), v15);
                }
                objc_msgSend(v15, "addObject:", CFArrayGetValueAtIndex(v10, v16));
              }
              ++v16;
              v17 += 3 * v21;
              v14 += 2;
            }
            while (v14 < v12);
          }
          ++v11;
          v13 += 3;
        }
        while (v11 != v21);
      }
      int v5 = v20;
      if (table) {
        NSMapInsert(v19, (const void *)v20, table);
      }
    }
    sqlite3_result_int(a1, v5);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void ABCFFTSTokenizerSelectSnippetColumnFunction(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 >= 1 && (v4 = (unsigned int *)sqlite3_value_blob(*a3), unint64_t v5 = v4[1], v5))
  {
    unint64_t v6 = 0;
    int v7 = 2;
    do
    {
      if (*v4)
      {
        uint64_t v8 = *v4;
        int v9 = v7;
        while (!v4[v9])
        {
          v9 += 3 * v5;
          if (!--v8) {
            goto LABEL_8;
          }
        }
        if ((0xFF6FF8uLL >> v6)) {
          int v10 = v6;
        }
        else {
          int v10 = -1;
        }
      }
      else
      {
LABEL_8:
        int v10 = -1;
      }
      if (v10 != -1) {
        break;
      }
      ++v6;
      v7 += 3;
    }
    while (v6 < v5);
  }
  else
  {
    int v10 = -1;
  }
  sqlite3_result_int(a1, v10);
}

uint64_t ABTokenListCreate()
{
  pthread_once(&kABTokenListRegisterClass, (void (*)(void))ABTokenListRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v1 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    if (ABTokenListCreate_onceToken != -1) {
      dispatch_once(&ABTokenListCreate_onceToken, &__block_literal_global_13);
    }
    *(void *)(v1 + 40) = (id)ABTokenListCreate_sharedSubtokenRegex;
  }
  return v1;
}

void __ABTokenListCreate_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x19F3B4540]();
  ABTokenListCreate_sharedSubtokenRegedouble x = [objc_alloc(MEMORY[0x1E4F28FD8]) initWithPattern:@"[[:script=Hiragana:][:script=Katakana:]]+|[^[[:script=Hiragana:][:script=Katakana:]]]{1}" options:1 error:0];
}

void ABTokenListDestroy(uint64_t a1)
{
  if (!a1) {
    ABTokenListDestroy_cold_1();
  }
  ABTokenListRemoveAllTokens(a1);

  CFDictionaryRef v2 = *(void **)(a1 + 16);
  if (v2)
  {
    free(v2);
  }
}

void ABTokenListRemoveAllTokens(uint64_t a1)
{
  if (!a1) {
    ABTokenListRemoveAllTokens_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 16) + v3;
      CFRelease(*(CFTypeRef *)v4);
      unint64_t v5 = *(void **)(v4 + 8);
      if (v5) {
        free(v5);
      }
      v3 += 56;
      --v2;
    }
    while (v2);
  }
  *(void *)(a1 + 32) = 0;
}

CFStringTokenizerTokenType ABTokenListPopulateFromString(uint64_t a1, __CFStringTokenizer *a2, uint64_t a3, const __CFString *a4, int a5, int a6, uint64_t a7)
{
  if (!a1) {
    ABTokenListPopulateFromString_cold_1();
  }
  ABTokenListRemoveAllTokens(a1);
  v40.CFIndex length = CFStringGetLength(a4);
  v40.CFIndex location = 0;
  CFStringTokenizerSetString(a2, a4, v40);
  CFStringTokenizerTokenType result = CFStringTokenizerAdvanceToNextToken(a2);
  if (result)
  {
    char v12 = result;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v23 = a6;
    do
    {
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(a2);
      CFIndex v36 = 0;
      usedBufLen[0] = 0;
      v38.CFIndex location = 0;
      v38.CFIndex length = CurrentTokenRange.location;
      CFStringGetBytes(a4, v38, 0x8000100u, 0, 0, 0, 0, usedBufLen);
      v39.CFIndex length = CurrentTokenRange.location + CurrentTokenRange.length;
      v39.CFIndex location = 0;
      CFStringGetBytes(a4, v39, 0x8000100u, 0, 0, 0, 0, &v36);
      unsigned int v14 = (char *)usedBufLen[0];
      uint64_t v15 = v36 - usedBufLen[0];
      unsigned int v16 = (__CFString *)CFStringCreateWithSubstring(alloc, a4, CurrentTokenRange);
      if ((v12 & 0x20) == 0) {
        goto LABEL_8;
      }
      if (a6)
      {
        context = (void *)MEMORY[0x19F3B4540]();
        uint64_t v17 = a7;
        int v18 = *(void **)(a1 + 40);
        uint64_t v19 = [(__CFString *)v16 length];
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 3221225472;
        v29[2] = __ABTokenListPopulateFromString_block_invoke;
        v29[3] = &__block_descriptor_96_e37_v32__0__NSTextCheckingResult_8Q16_B24l;
        v29[4] = v16;
        CFRange v30 = CurrentTokenRange;
        uint64_t v31 = a1;
        CFStringRef v32 = a4;
        uint64_t v33 = a3;
        CFRange v34 = v14;
        uint64_t v35 = v15;
        int v20 = v18;
        a7 = v17;
        a6 = v23;
        objc_msgSend(v20, "enumerateMatchesInString:options:range:usingBlock:", v16, 0, 0, v19, v29);
      }
      if (a7) {
LABEL_8:
      }
        _AddTokenListEntryForRangeInString(a1, (uint64_t)a4, a3, v14, v15, (const void *)CurrentTokenRange.location, (const void *)CurrentTokenRange.length, v16);
      if (a5)
      {
        CFStringRef v21 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(a2, 0x10000uLL);
        if (v21)
        {
          CFStringRef v22 = v21;
          if (CFStringCompare(v21, v16, 0)) {
            _AddTokenListEntryForRangeInString(a1, (uint64_t)a4, a3, v14, v15, (const void *)CurrentTokenRange.location, (const void *)CurrentTokenRange.length, v22);
          }
          CFRelease(v22);
        }
      }
      if (v16) {
        CFRelease(v16);
      }
      CFStringTokenizerTokenType result = CFStringTokenizerAdvanceToNextToken(a2);
      char v12 = result;
    }
    while (result);
  }
  return result;
}

void __ABTokenListPopulateFromString_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 range];
  unint64_t v5 = v4;
  CFStringRef v6 = (const __CFString *)objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v3, v4);
  int v7 = (const void *)(*(void *)(a1 + 40) + v3);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  int v11 = *(char **)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  _AddTokenListEntryForRangeInString(v8, v9, v10, v11, v12, v7, v5, v6);
}

void _AddTokenListEntryForRangeInString(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, const void *a6, const void *a7, CFStringRef theString)
{
  if (a2 && a1 && theString && CFStringGetLength(theString))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15 == *(void *)(a1 + 24))
    {
      unsigned int v16 = malloc_type_realloc(*(void **)(a1 + 16), 56 * v15 + 2800, 0x1070040AB53498DuLL);
      uint64_t v17 = *(void *)(a1 + 24) + 50;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
    }
    CFStringRef v21 = 0;
    if (a3)
    {
      int v18 = (char *)ABCreateSortKey(theString, a3, 0, (int64_t *)&v21);
      if (!v18 || !v21)
      {
        if (v18) {
          free(v18);
        }
        return;
      }
    }
    else
    {
      int v18 = 0;
    }
    uint64_t v19 = &a4[a5];
    int v20 = (CFTypeRef *)(*(void *)(a1 + 16) + 56 * *(void *)(a1 + 32));
    v20[3] = a4;
    v20[4] = v19;
    v20[1] = v18;
    *int v20 = CFRetain(theString);
    v20[2] = v21;
    v20[5] = a6;
    v20[6] = a7;
    ++*(void *)(a1 + 32);
  }
}

uint64_t ABTokenListGetCount(uint64_t a1)
{
  if (!a1) {
    ABCFFTSTokenizerNext_cold_1();
  }
  return *(void *)(a1 + 32);
}

uint64_t ABTokenListGetTokenStartByteOffsetAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ABTokenListGetTokenStartByteOffsetAtIndex_cold_1();
  }
  if (*(void *)(a1 + 32) <= a2) {
    ABTokenListGetTokenStartByteOffsetAtIndex_cold_2();
  }
  return *(void *)(*(void *)(a1 + 16) + 56 * a2 + 24);
}

uint64_t ABTokenListGetTokenEndByteOffsetAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ABTokenListGetTokenEndByteOffsetAtIndex_cold_1();
  }
  if (*(void *)(a1 + 32) <= a2) {
    ABTokenListGetTokenEndByteOffsetAtIndex_cold_2();
  }
  return *(void *)(*(void *)(a1 + 16) + 56 * a2 + 32);
}

uint64_t ABTokenListGetTokenAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ABTokenListGetTokenAtIndex_cold_1();
  }
  if (*(void *)(a1 + 32) <= a2) {
    ABTokenListGetTokenAtIndex_cold_2();
  }
  return *(void *)(*(void *)(a1 + 16) + 56 * a2);
}

uint64_t ABTokenListGetTokenCollationKeyAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ABTokenListGetTokenCollationKeyAtIndex_cold_1();
  }
  if (*(void *)(a1 + 32) <= a2) {
    ABTokenListGetTokenCollationKeyAtIndex_cold_2();
  }
  return *(void *)(*(void *)(a1 + 16) + 56 * a2 + 8);
}

uint64_t ABTokenListGetTokenCollationKeyLengthAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ABTokenListGetTokenCollationKeyLengthAtIndex_cold_1();
  }
  if (*(void *)(a1 + 32) <= a2) {
    ABTokenListGetTokenCollationKeyLengthAtIndex_cold_2();
  }
  return *(void *)(*(void *)(a1 + 16) + 56 * a2 + 16);
}

uint64_t ABTokenListGetTokenRangeAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    ABTokenListGetTokenRangeAtIndex_cold_1();
  }
  if (*(void *)(a1 + 32) <= a2) {
    ABTokenListGetTokenRangeAtIndex_cold_2();
  }
  return *(void *)(*(void *)(a1 + 16) + 56 * a2 + 40);
}

uint64_t ABCFFTSColumnToABPropertyID(int a1)
{
  switch(a1)
  {
    case 0:
      uint64_t v1 = &kABPersonFirstNameProperty;
      goto LABEL_26;
    case 1:
      uint64_t v1 = &kABPersonLastNameProperty;
      goto LABEL_26;
    case 2:
      uint64_t v1 = &kABPersonMiddleNameProperty;
      goto LABEL_26;
    case 3:
      uint64_t v1 = &kABPersonFirstNamePhoneticProperty;
      goto LABEL_26;
    case 4:
      uint64_t v1 = &kABPersonMiddleNamePhoneticProperty;
      goto LABEL_26;
    case 5:
      uint64_t v1 = &kABPersonLastNamePhoneticProperty;
      goto LABEL_26;
    case 6:
      uint64_t v1 = &kABPersonOrganizationProperty;
      goto LABEL_26;
    case 7:
      uint64_t v1 = &kABPersonOrganizationPhoneticProperty;
      goto LABEL_26;
    case 8:
      uint64_t v1 = &kABPersonDepartmentProperty;
      goto LABEL_26;
    case 9:
      uint64_t v1 = &kABPersonNoteProperty;
      goto LABEL_26;
    case 10:
      uint64_t v1 = &kABPersonBirthdayProperty;
      goto LABEL_26;
    case 11:
      uint64_t v1 = &kABPersonJobTitleProperty;
      goto LABEL_26;
    case 12:
      uint64_t v1 = &kABPersonNicknameProperty;
      goto LABEL_26;
    case 13:
      uint64_t v1 = &kABPersonPrefixProperty;
      goto LABEL_26;
    case 14:
      uint64_t v1 = &kABPersonSuffixProperty;
      goto LABEL_26;
    case 15:
      uint64_t v1 = &kABPersonDisplayNameProperty;
      goto LABEL_26;
    case 16:
      uint64_t v1 = &kABPersonPhoneProperty;
      goto LABEL_26;
    case 17:
      uint64_t v1 = &kABPersonEmailProperty;
      goto LABEL_26;
    case 18:
      uint64_t v1 = &kABPersonAddressProperty;
      goto LABEL_26;
    case 19:
      uint64_t v1 = &kABPersonSocialProfileProperty;
      goto LABEL_26;
    case 20:
      uint64_t v1 = &kABPersonURLProperty;
      goto LABEL_26;
    case 21:
      uint64_t v1 = &kABPersonRelatedNamesProperty;
      goto LABEL_26;
    case 22:
      uint64_t v1 = &kABPersonInstantMessageProperty;
      goto LABEL_26;
    case 23:
      uint64_t v1 = &kABPersonDateProperty;
LABEL_26:
      uint64_t result = *(unsigned int *)v1;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t ABTokenListRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  kABTokenListTypeint ID = result;
  return result;
}

uint64_t ABAccountStoreGetAccountTypeForAccount(void *a1, const void *a2)
{
  id v4 = (id)__accountTypesCache;
  if (__accountTypesCache)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1C998]);
    __accountTypesCache = (uint64_t)v4;
    if (a2)
    {
LABEL_3:
      CFTypeRef v5 = ABAccountCopyIdentifier(a2);
      if (v5)
      {
        CFStringRef v6 = (void *)v5;
        uint64_t v7 = [(id)__accountTypesCache objectForKey:v5];
        if (v7)
        {
          uint64_t v8 = v7;
          if (v7 == [MEMORY[0x1E4F1CA98] null]) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = v8;
          }
        }
        else
        {
          uint64_t v9 = objc_msgSend((id)objc_msgSend(a1, "displayTypeForAccountWithIdentifier:", v6), "identifier");
          uint64_t v12 = __accountTypesCache;
          if (v9)
          {
            int v13 = (void *)__accountTypesCache;
            uint64_t v14 = v9;
          }
          else
          {
            uint64_t v14 = [MEMORY[0x1E4F1CA98] null];
            int v13 = (void *)v12;
          }
          [v13 setObject:v14 forKey:v6];
        }

        return v9;
      }
      return 0;
    }
  }
  if (![v4 objectForKey:@"com.apple.unit-testing"]) {
    return 0;
  }
  uint64_t v10 = (void *)__accountTypesCache;
  return [v10 objectForKey:@"com.apple.unit-testing"];
}

uint64_t ABAccountStoreGetAccountTypeForSource(void *a1, uint64_t a2)
{
  uint64_t result = ABRecordGetAddressBook();
  if (result)
  {
    AccountForSource = (const void *)ABAddressBookGetAccountForSource(result, a2);
    return ABAccountStoreGetAccountTypeForAccount(a1, AccountForSource);
  }
  return result;
}

uint64_t ABAccountCachedTypeForAccountIdentifier(uint64_t a1)
{
  return [(id)__accountTypesCache objectForKey:a1];
}

uint64_t ABAccountAddTypeToCache(uint64_t a1, uint64_t a2)
{
  id v4 = (id)__accountTypesCache;
  if (!__accountTypesCache)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1C998]);
    __accountTypesCache = (uint64_t)v4;
  }
  return [v4 setObject:a2 forKey:a1];
}

uint64_t ABAccountCacheClear()
{
  return [(id)__accountTypesCache removeAllObjects];
}

uint64_t ABAddressBookMergeRecordsInSourceIntoSource(const __CFString *a1, const void *a2, const void *a3)
{
  if (ABLogAPIUsage())
  {
    CFStringRef v6 = _isMainThread();
    uint64_t v7 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v6);
    uint64_t v8 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookMergeRecordsInSourceIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 28, v7, @"%@", v9, v10, v11, v8);
    CFRelease(v7);
  }
  if (!a1 || (ABSourceIsContentReadonly((uint64_t)a3) & 1) != 0) {
    return 0;
  }
  uint64_t v13 = _mergeRecordsIntoSource(a1, a2, a3);
  uint64_t v14 = kABSourceMeIdentifierProperty;
  int IntValue = ABRecordGetIntValue((uint64_t)a2, kABSourceMeIdentifierProperty);
  int v16 = ABRecordGetIntValue((uint64_t)a3, v14);
  if (v16 != -1) {
    int IntValue = v16;
  }
  ABAddressBookRevert(a1);
  ABRecordSetIntValue(a2, v14, -1, 0);
  ABRecordSetIntValue(a3, v14, IntValue, 0);
  return v13;
}

uint64_t _mergeRecordsIntoSource(const __CFString *a1, const void *a2, const void *a3)
{
  CFArrayRef v6 = ABAddressBookCopyArrayOfAllPeopleInSource(a1, a2);
  CFIndex Count = CFArrayGetCount(v6);
  if (!v6) {
    return 1;
  }
  uint64_t v8 = Count;
  ABDiagnosticsEnabled();
  _ABLog2(5, (uint64_t)"_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 134, 0, @"Merging linked contacts", v9, v10, v11, v24);
  if (v8 < 1)
  {
LABEL_6:
    int v14 = 1;
  }
  else
  {
    CFIndex v12 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v12);
      if (!_mergePersonIntoLinkedPeopleFromSource(a1, ValueAtIndex, a3)) {
        break;
      }
      if (v8 == ++v12) {
        goto LABEL_6;
      }
    }
    int v14 = 0;
  }
  CFErrorRef error = 0;
  if (!ABAddressBookSave(a1, &error))
  {
    if (error)
    {
      CFStringRef v16 = CFErrorCopyDescription(error);
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 147, 0, @"Error saving DB when moving people to source %@: %@", v17, v18, v19, (uint64_t)a3);
      CFRelease(v16);
    }
    int v14 = 0;
  }
  ABDiagnosticsEnabled();
  _ABLog2(5, (uint64_t)"_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 157, 0, @"Moving non linked contacts", v20, v21, v22, v25);
  if (v14) {
    BOOL v15 = _movePeopleAndGroupsToSource(a1, a2, a3);
  }
  else {
    BOOL v15 = 0;
  }
  CFRelease(v6);
  return v15;
}

BOOL _mergePersonIntoLinkedPeopleFromSource(const void *a1, ABRecordRef person, const void *a3)
{
  CFArrayRef v6 = ABPersonCopyArrayOfAllLinkedPeople(person);
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count < 2)
    {
      CFRelease(v7);
    }
    else
    {
      CFIndex v9 = Count;
      char v10 = 0;
      for (CFIndex i = 0; i != v9; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        ABRecordID RecordID = ABRecordGetRecordID(ValueAtIndex);
        if (RecordID != ABRecordGetRecordID(person))
        {
          ABRecordRef v14 = ABPersonCopySource(ValueAtIndex);
          if (v14)
          {
            BOOL v15 = v14;
            ABRecordID v16 = ABRecordGetRecordID(v14);
            if (v16 == ABRecordGetRecordID(a3))
            {
              ABDiagnosticsEnabled();
              _ABLog2(5, (uint64_t)"_Bool _mergePersonIntoLinkedPeopleFromSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 69, 0, @"Merging %@ into %@", v17, v18, v19, (uint64_t)person);
              ABPersonMergePersonIntoPerson(person, ValueAtIndex);
              _movePicturesFromPersonToPerson(v20, person, ValueAtIndex);
              char v10 = 1;
            }
            CFRelease(v15);
          }
        }
      }
      CFRelease(v7);
      if (v10) {
        return 1;
      }
    }
  }
  ABRecordRef v22 = ABPersonCreateInSource(a3);
  if (!v22) {
    return 0;
  }
  int v23 = v22;
  ABPersonMergePersonIntoPerson(person, v22);
  CFErrorRef error = 0;
  int v24 = ABAddressBookAddRecord(a1, v23, &error);
  int v25 = v24;
  if ((v24 & 1) == 0)
  {
    int v24 = (int)error;
    if (error)
    {
      CFStringRef v26 = CFErrorCopyDescription(error);
      ABDiagnosticsEnabled();
      _ABLog2(3, (uint64_t)"_Bool _mergePersonIntoLinkedPeopleFromSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 91, 0, @"Error when adding person %@ to source %@: %@", v27, v28, v29, (uint64_t)person);
      CFRelease(v26);
    }
  }
  if (v25) {
    BOOL v21 = _movePicturesFromPersonToPerson(v24, person, v23);
  }
  else {
    BOOL v21 = 0;
  }
  CFRelease(v23);
  return v21;
}

BOOL _movePicturesFromPersonToPerson(int a1, const void *a2, ABRecordRef person)
{
  if (ABPersonHasImageData(person)) {
    return 1;
  }
  CFDataRef v5 = ABPersonCopyImageData(a2);
  if (!v5) {
    return 1;
  }
  CFDataRef v6 = v5;
  CFErrorRef error = 0;
  BOOL v7 = ABPersonSetImageData(person, v5, &error);
  if (!v7 && error)
  {
    CFStringRef v8 = CFErrorCopyDescription(error);
    ABDiagnosticsEnabled();
    _ABLog2(3, (uint64_t)"_Bool _movePicturesFromPersonToPerson(ABAddressBookRef, ABRecordRef, ABRecordRef)", 179, 0, @"Error when merging image from person %@ into %@: %@", v9, v10, v11, (uint64_t)a2);
    CFRelease(v8);
  }
  CFRelease(v6);
  return v7;
}

BOOL _movePeopleAndGroupsToSource(const __CFString *a1, const void *a2, const void *a3)
{
  ABDiagnosticsEnabled();
  _ABLog2(5, (uint64_t)"_Bool _movePeopleAndGroupsToSource(ABAddressBookRef, ABRecordRef, ABRecordRef)", 110, 0, @"Moving contacts from %@ into %@", v6, v7, v8, (uint64_t)a2);
  CPRecordStoreGetDatabase();
  uint64_t v9 = CPSqliteDatabaseConnectionForWriting();
  uint64_t RecordID = ABRecordGetRecordID(a2);
  if (_removeSyncImagesFromSource(a1, v9, RecordID))
  {
    uint64_t v11 = ABRecordGetRecordID(a2);
    uint64_t v12 = ABRecordGetRecordID(a3);
    BOOL v13 = _moveRecordsInTableToSource(v12, v9, v11, v12, (uint64_t)"ABGroup", 0);
    if (!v9) {
      return v13;
    }
    goto LABEL_5;
  }
  BOOL v13 = 0;
  if (v9) {
LABEL_5:
  }
    CPSqliteDatabaseReleaseSqliteConnection();
  return v13;
}

BOOL _removeSyncImagesFromSource(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT ROWID from ABPerson where StoreID = %i;",
         a3);
  if (!v5) {
    return 0;
  }
  CFStringRef v6 = v5;
  if (CPSqliteConnectionStatementForSQL())
  {
    CFArrayRef Mutable = CFArrayCreateMutable(v4, 0, 0);
    CPSqliteStatementIntegerResult();
    BOOL v9 = CFArrayGetCount(Mutable)
      && (CFStringRef ImageStore = ABCAddressBookGetImageStore(a1)) != 0
      && ABCImageStoreRemoveImagesForRecordIds(a1, (uint64_t)ImageStore, Mutable, 5) != 0;
    CFRelease(Mutable);
  }
  else
  {
    BOOL v9 = 0;
  }
  CFRelease(v6);
  return v9;
}

BOOL _moveRecordsInTableToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  CFStringRef v6 = @", ImageURI = NULL";
  if (!a6) {
    CFStringRef v6 = &stru_1EF03E278;
  }
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@ WHERE StoreID = %i;",
         a5,
         a4,
         v6,
         a3);
  if (!v7) {
    return 0;
  }
  CFStringRef v8 = v7;
  uint64_t v9 = CPSqliteConnectionStatementForSQL();
  BOOL v10 = v9 != 0;
  if (v9)
  {
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  CFRelease(v8);
  return v10;
}

uint64_t ABLinkedOnOrAfterSimulateLinkedBefore(uint64_t result)
{
  __ABLinkedOnOrAfterSimulateLinkedBefore = result;
  return result;
}

uint64_t ABOSLogGeneral()
{
  if (ABOSLogGeneral_onceToken != -1) {
    dispatch_once(&ABOSLogGeneral_onceToken, &__block_literal_global_15);
  }
  return ABOSLogGeneral_generalLog;
}

os_log_t __ABOSLogGeneral_block_invoke()
{
  os_log_t result = os_log_create("com.apple.contacts.AddressBookLegacy", "General");
  ABOSLogGeneral_generalLog = (uint64_t)result;
  return result;
}

uint64_t ABOSLogMeCardChanges()
{
  if (ABOSLogMeCardChanges_onceToken != -1) {
    dispatch_once(&ABOSLogMeCardChanges_onceToken, &__block_literal_global_29);
  }
  return ABOSLogMeCardChanges_meCardLog;
}

os_log_t __ABOSLogMeCardChanges_block_invoke()
{
  os_log_t result = os_log_create("com.apple.contacts.AddressBookLegacy", "me-card-changes");
  ABOSLogMeCardChanges_meCardLog = (uint64_t)result;
  return result;
}

uint64_t ABOSLogAnalyzeDatabase()
{
  if (ABOSLogAnalyzeDatabase_onceToken != -1) {
    dispatch_once(&ABOSLogAnalyzeDatabase_onceToken, &__block_literal_global_35);
  }
  return ABOSLogAnalyzeDatabase_analyzeDatabaseLog;
}

os_log_t __ABOSLogAnalyzeDatabase_block_invoke()
{
  os_log_t result = os_log_create("com.apple.contacts.AddressBookLegacy", "analyze-database");
  ABOSLogAnalyzeDatabase_analyzeDatabaseLog = (uint64_t)result;
  return result;
}

BOOL ABLogDebugLevelEnabled()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  return __ABLogMaxConsoleLevel == 7 || __ABLogMaxFileLevel == 7;
}

uint64_t ABLogContactsSearch()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogContactsSearch) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t ABLogDataCollection()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogDataCollection) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t ABLogPersonDelete()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogPersonDelete) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t ABLogChangeHistory()
{
  if (_initIfNeeded_onceToken != -1) {
    dispatch_once(&_initIfNeeded_onceToken, &__block_literal_global_180);
  }
  LODWORD(result) = ABDiagnosticsEnabled();
  if (__ABLogChangeHistory) {
    return result;
  }
  else {
    return 0;
  }
}

void _ABLog2(int a1, uint64_t a2, uint64_t a3, __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = __ABLogMaxConsoleLevel;
  int v10 = __ABLogMaxFileLevel;
  if (__ABLogMaxConsoleLevel >= a1 || __ABLogMaxFileLevel >= a1)
  {
    if (a4) {
      ABRecordID v16 = a4;
    }
    else {
      ABRecordID v16 = &stru_1EF03E278;
    }
    if (a5)
    {
      ABRecordID v16 = (__CFString *)(id)[[NSString alloc] initWithFormat:a5 arguments:&a9];
      if (a4) {
        ABRecordID v16 = (__CFString *)[(__CFString *)a4 stringByAppendingString:v16];
      }
    }
    if (v9 >= a1) {
      NSLog(&cfstr_SI.isa, a2, a3, v16);
    }
    if (v10 >= a1)
    {
      __uint64_t v22 = 0;
      if (pthread_threadid_np(0, &v22))
      {
        uint64_t v17 = pthread_self();
        __uint64_t v18 = pthread_mach_thread_np(v17);
        __uint64_t v22 = v18;
      }
      else
      {
        __uint64_t v18 = v22;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ABLog2_block_invoke;
      block[3] = &unk_1E59898C0;
      block[4] = v16;
      void block[5] = v18;
      block[6] = a2;
      int v20 = a1;
      int v21 = a3;
      dispatch_async((dispatch_queue_t)__ABLogAslQueue, block);
    }
  }
}

uint64_t ABLogAddressBook(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"addressBookRef=%p", a1);
}

uint64_t ABLogStringForPerson(const void *a1)
{
  uint64_t v2 = NSString;
  if (a1)
  {
    CFMutableStringRef v3 = ABPersonCopyCompositeName(a1);
    CFAllocatorRef v4 = v3;
  }
  else
  {
    CFMutableStringRef v3 = @"NULL";
  }
  return [v2 stringWithFormat:@"%p(%@)", a1, v3];
}

id ABLogStringForPeople(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E78]), "initWithString:", @"(\n");
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(a1);
        }
        CFStringRef v8 = *(const void **)(*((void *)&v12 + 1) + 8 * v7);
        if (v5) {
          [v2 appendString:@"\n"];
        }
        if (v8)
        {
          CFMutableStringRef v9 = ABPersonCopyCompositeName(v8);
          int v10 = v9;
        }
        else
        {
          CFMutableStringRef v9 = @"NULL";
        }
        [v2 appendString:v9];
        ++v7;
        char v5 = 1;
      }
      while (v4 != v7);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  [v2 appendString:@"\n"]);
  return v2;
}

uint64_t ABLogErrorPtr(__CFString **a1)
{
  if (a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = @"NULL";
  }
  return [NSString stringWithFormat:@"error=%@", v1];
}

__CFString *ABLogStringForBool(int a1)
{
  if (a1) {
    return @"true";
  }
  else {
    return @"false";
  }
}

id ABLogStringForStringArray(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E78]), "initWithString:", @"(");
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(a1);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * v7);
        if (v5) {
          [v2 appendString:@", "];
        }
        [v2 appendString:v8];
        ++v7;
        char v5 = 1;
      }
      while (v4 != v7);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  [v2 appendString:@""]);
  return v2;
}

__CFString *ABLogStringForIntArrayPtr(void **a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!*a1) {
    return @"NULL";
  }
  uint64_t v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E78]), "initWithString:", @"(");
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = *a1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    char v6 = 0;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v3);
        }
        if (v6) {
          CFMutableStringRef v9 = @", %i";
        }
        else {
          CFMutableStringRef v9 = @"%i";
        }
        objc_msgSend(v2, "appendFormat:", v9, *(void *)(*((void *)&v11 + 1) + 8 * i));
        char v6 = 1;
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
  [v2 appendString:@""]);
  return (__CFString *)v2;
}

uint64_t ABLogBacktrace()
{
  return [NSString stringWithFormat:@"backtrace:\n%@", objc_msgSend(MEMORY[0x1E4F29060], "callStackSymbols")];
}

uint64_t ABLogEnableInternalAlert(uint64_t result)
{
  __ABAllowInternalAlert = result;
  return result;
}

uint64_t ABLogDisplayInternalAlert(uint64_t result)
{
  if (__ABAllowInternalAlert)
  {
    uint64_t v1 = (const void *)result;
    uint64_t result = os_variant_has_internal_content();
    if (result)
    {
      CFRetain(v1);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __ABLogDisplayInternalAlert_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = v1;
      dispatch_async(global_queue, block);
      return sleep(1u);
    }
  }
  return result;
}

void __ABLogDisplayInternalAlert_block_invoke(uint64_t a1)
{
  CFOptionFlags v8 = 0;
  CFUserNotificationDisplayAlert(0.0, 0, 0, 0, 0, @"AddressBook", *(CFStringRef *)(a1 + 32), @"Radar", @"Dismiss", 0, &v8);
  if (!v8)
  {
    if (*(void *)(a1 + 32)) {
      uint64_t v2 = *(__CFString **)(a1 + 32);
    }
    else {
      uint64_t v2 = &stru_1EF03E278;
    }
    uint64_t v3 = [(__CFString *)v2 stringByAppendingString:@"\n\nPlease mention what you were doing at the time of the error."];
    uint64_t v4 = (void *)[MEMORY[0x1E4F1CA48] array];
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Description", v3));
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Title", @"AddressBook error"));
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"Classification", @"Serious Bug"));
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"ComponentID", @"568785"));
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"ComponentName", @"PEP Contacts"));
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"ComponentVersion", @"1.0"));
    objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F290C8], "queryItemWithName:value:", @"AutoDiagnostics", @"phone"));
    id v5 = objc_alloc_init(MEMORY[0x1E4F29088]);
    [v5 setScheme:@"tap-to-radar"];
    [v5 setHost:@"new"];
    [v5 setQueryItems:v4];
    uint64_t v6 = [v5 URL];
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F223E0], "defaultWorkspace"), "openURL:", v6);
  }
  uint64_t v7 = *(const void **)(a1 + 32);
  if (v7) {
    CFRelease(v7);
  }
}

void *ABLogSimulateCrashReport(uint64_t a1)
{
  if (ABLogSimulateCrashReport___CrashReportHandle
    || (uint64_t v4 = dlopen((const char *)[@"/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport" fileSystemRepresentation], 1), (ABLogSimulateCrashReport___CrashReportHandle = (uint64_t)v4) == 0))
  {
    uint64_t result = ABLogSimulateCrashReport_ABSimulateCrash;
    if (!ABLogSimulateCrashReport_ABSimulateCrash) {
      return result;
    }
  }
  else
  {
    uint64_t result = dlsym(v4, "SimulateCrash");
    ABLogSimulateCrashReport_ABSimulateCrash = result;
    if (!result) {
      return result;
    }
  }
  id v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))result;
  uint64_t v3 = getpid();
  return (void *)v5(v3, 464366555, a1);
}

__CFString *_isMainThread()
{
  if ([MEMORY[0x1E4F29060] isMainThread]) {
    return @"YES";
  }
  else {
    return @"NO";
  }
}

uint64_t ABRegulatoryLogDeleteContactsData(uint64_t a1)
{
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A350], "sharedInstance"), "isAccessGranted")) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A4D8], "sharedInstanceForAddressBook"), "deletingContactsData");
  }
  uint64_t result = _shouldRegulatoryLog(a1);
  if (result)
  {
    uint64_t v3 = (void *)[MEMORY[0x1E4F5A4D8] sharedInstanceForAddressBook];
    return [v3 logContactsDataAccessEvent];
  }
  return result;
}

uint64_t ABRegulatoryLogModifyContactsData(uint64_t a1)
{
  uint64_t result = _shouldRegulatoryLog(a1);
  if (result)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A4D8], "sharedInstanceForAddressBook"), "modifyingContactsData");
    uint64_t v2 = (void *)[MEMORY[0x1E4F5A4D8] sharedInstanceForAddressBook];
    return [v2 logContactsDataAccessEvent];
  }
  return result;
}

uint64_t ABRegulatoryLogReadTransmitContactsData()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F5A4D8] sharedInstanceForAddressBook];
  return [v0 readAndTransmittingContactsData];
}

id ABCreateStringFromAlternateBirthday(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  if ([a1 objectForKeyedSubscript:@"calendarIdentifier"]) {
    objc_msgSend(v2, "appendString:", objc_msgSend(a1, "objectForKeyedSubscript:", @"calendarIdentifier"));
  }
  [v2 appendString:@","];
  if ([a1 objectForKeyedSubscript:@"isLeapMonth"]) {
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"isLeapMonth"), "stringValue"));
  }
  [v2 appendString:@","];
  if ([a1 objectForKeyedSubscript:@"era"]) {
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"era"), "stringValue"));
  }
  [v2 appendString:@","];
  if ([a1 objectForKeyedSubscript:@"year"]) {
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"year"), "stringValue"));
  }
  [v2 appendString:@","];
  if ([a1 objectForKeyedSubscript:@"month"]) {
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"month"), "stringValue"));
  }
  [v2 appendString:@","];
  if ([a1 objectForKeyedSubscript:@"day"]) {
    objc_msgSend(v2, "appendString:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"day"), "stringValue"));
  }
  return v2;
}

void *ABCreateAlternateBirthdayFromString(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:6];
  uint64_t v3 = (void *)[a1 componentsSeparatedByString:@","];
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 0), "length")) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(v3, "objectAtIndexedSubscript:", 0), @"calendarIdentifier");
  }
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 1), "length")) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 1), "BOOLValue")), @"isLeapMonth");
  }
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 2), "length")) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 2), "integerValue")), @"era");
  }
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 3), "length")) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 3), "integerValue")), @"year");
  }
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 4), "length")) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 4), "integerValue")), @"month");
  }
  if (objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 5), "length")) {
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", 5), "integerValue")), @"day");
  }
  return v2;
}

uint64_t ABValidateAlternateBirthday(void *a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t result = [a1 objectForKeyedSubscript:@"calendarIdentifier"];
  if (result)
  {
    uint64_t result = [a1 objectForKeyedSubscript:@"month"];
    if (result)
    {
      uint64_t result = [a1 objectForKeyedSubscript:@"day"];
      if (result)
      {
        uint64_t v3 = (void *)[a1 objectForKeyedSubscript:@"calendarIdentifier"];
        uint64_t v4 = [MEMORY[0x1E4F1C9A8] calendarWithIdentifier:v3];
        if (v4
          || (uint64_t v5 = [v3 lowercaseString],
              uint64_t v4 = [MEMORY[0x1E4F1C9A8] calendarWithIdentifier:v5],
              uint64_t result = v4 != 0,
              v4))
        {
          id v6 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
          [v6 setCalendar:v4];
          objc_msgSend(v6, "setMonth:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"month"), "integerValue"));
          objc_msgSend(v6, "setDay:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"day"), "integerValue"));
          if ([a1 objectForKeyedSubscript:@"isLeapMonth"]) {
            objc_msgSend(v6, "setLeapMonth:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"isLeapMonth"), "BOOLValue"));
          }
          if ([a1 objectForKeyedSubscript:@"era"]) {
            objc_msgSend(v6, "setEra:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"era"), "integerValue"));
          }
          if ([a1 objectForKeyedSubscript:@"year"]) {
            objc_msgSend(v6, "setYear:", objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"year"), "integerValue"));
          }
          uint64_t v7 = [v6 isValidDate];

          return v7;
        }
      }
    }
  }
  return result;
}

uint64_t sKeyComparator_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = [&unk_1EF050538 indexOfObject:a2];
  unint64_t v6 = [&unk_1EF050538 indexOfObject:a3];
  if (v5 == 0x7FFFFFFFFFFFFFFFLL && v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    return [a2 caseInsensitiveCompare:a3];
  }
  else
  {
    if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = -1;
    }
    if (v5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v9 = -1;
      if (v5 >= v6) {
        uint64_t v9 = v6 < v5;
      }
      if (v6 != 0x7FFFFFFFFFFFFFFFLL) {
        return v9;
      }
    }
    return v8;
  }
}

__CFString *ABAccountNameForProperty(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E59899E0[a1];
  }
}

uint64_t ABAccountCreate()
{
  if (ABLogAPIUsage())
  {
    unint64_t v5 = _isMainThread();
    uint64_t v0 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"ABRecordRef ABAccountCreate(void)", 83, v0, 0, v1, v2, v3, (uint64_t)v5);
    CFRelease(v0);
  }
  return CPRecordCreate();
}

CFTypeRef ABAccountCopyInternalUUID(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABAccountCopyInternalUUID(ABRecordRef)", 88, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABRecordCopyValue(a1, 3);
}

BOOL ABAccountSetInternalUUID(const void *a1, const void *a2, CFErrorRef *a3)
{
  if (ABLogAPIUsage())
  {
    long long v11 = _isMainThread();
    unint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABAccountSetInternalUUID(ABRecordRef, CFStringRef, CFErrorRef *)", 93, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABRecordSetValue(a1, 3, a2, a3);
}

CFTypeRef ABAccountCopyIdentifier(const void *a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v7 = _isMainThread();
    uint64_t v2 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"CFStringRef ABAccountCopyIdentifier(ABRecordRef)", 98, v2, 0, v3, v4, v5, (uint64_t)v7);
    CFRelease(v2);
  }
  return ABRecordCopyValue(a1, 0);
}

BOOL ABAccountSetIdentifier(const void *a1, const void *a2, CFErrorRef *a3)
{
  if (ABLogAPIUsage())
  {
    long long v11 = _isMainThread();
    unint64_t v6 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ");
    _ABLog2(6, (uint64_t)"_Bool ABAccountSetIdentifier(ABRecordRef, CFStringRef, CFErrorRef *)", 103, v6, 0, v7, v8, v9, (uint64_t)v11);
    CFRelease(v6);
  }
  return ABRecordSetValue(a1, 0, a2, a3);
}

ABRecordRef ABAddressBookGetDefaultSourceForAccount(const void *a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook((uint64_t)a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookGetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef)", 108, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  ABRecordID IntValue = ABRecordGetIntValue(a2, 2);
  if (IntValue < 1) {
    return 0;
  }
  return ABAddressBookGetSourceWithRecordID(a1, IntValue);
}

uint64_t ABAddressBookSetDefaultSourceForAccount(uint64_t a1, const void *a2, const void *a3, CFAllocatorRef *a4)
{
  if (ABLogAPIUsage())
  {
    uint64_t v8 = _isMainThread();
    uint64_t v9 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v8);
    uint64_t v10 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"_Bool ABAddressBookSetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)", 122, v9, @"%@", v11, v12, v13, v10);
    CFRelease(v9);
  }
  if (!a3 || (ABRecordID RecordID = ABRecordGetRecordID(a3), RecordID == -1))
  {
    if (a4) {
      *a4 = CFErrorCreate(0, @"ABAddressBookErrorDomain", 0, 0);
    }
    return 0;
  }
  else
  {
    return ABRecordSetIntValue(a2, 2, RecordID, a4);
  }
}

const void *ABAddressBookCopyAccountWithIdentifier(uint64_t a1, uint64_t a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"ABRecordRef ABAddressBookCopyAccountWithIdentifier(ABAddressBookRef, CFStringRef)", 146, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a2) {
    return 0;
  }
  CFArrayRef v10 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (!v10) {
    return 0;
  }
  CFArrayRef v11 = v10;
  if (CFArrayGetCount(v10) < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
    uint64_t v13 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
  }
  CFRelease(v11);
  return v13;
}

void __ABAddressBookCopyAccountWithIdentifier_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(sqlite3_stmt **)(a2 + 8);
    if (v2)
    {
      uint64_t v3 = (const char *)_CPCreateUTF8StringFromCFString();
      uint64_t v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
      sqlite3_bind_text(v2, 1, v3, -1, v4);
    }
  }
}

uint64_t ABAddressBookCopyAccountsWithUUIDs(uint64_t result, const __CFArray *a2)
{
  if (result) {
    return ABCDBContextCopyRecordsForUUIDsOfType(*(void *)(result + 16), a2, (long long *)ABAccountClass);
  }
  return result;
}

uint64_t ABAddressBookCopyArrayOfAllAccounts(uint64_t a1)
{
  if (ABLogAPIUsage())
  {
    uint64_t v2 = _isMainThread();
    uint64_t v3 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v2);
    uint64_t v4 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllAccounts(ABAddressBookRef)", 178, v3, @"%@", v5, v6, v7, v4);
    CFRelease(v3);
  }
  return CPRecordStoreCopyAllInstancesOfClass();
}

uint64_t ABAddressBookCopyArrayOfAllSourcesInAccount(uint64_t a1, const void *a2)
{
  if (ABLogAPIUsage())
  {
    uint64_t v4 = _isMainThread();
    uint64_t v5 = (__CFString *)CFStringCreateWithFormat(0, 0, @"<< Main thread:%@ | ", v4);
    uint64_t v6 = ABLogAddressBook(a1);
    _ABLog2(6, (uint64_t)"CFArrayRef ABAddressBookCopyArrayOfAllSourcesInAccount(ABAddressBookRef, ABRecordRef)", 184, v5, @"%@", v7, v8, v9, v6);
    CFRelease(v5);
  }
  if (!a2 || ABRecordGetRecordID(a2) == -1) {
    return 0;
  }
  else {
    return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  }
}

uint64_t __ABAddressBookCopyArrayOfAllSourcesInAccount_block_invoke(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8)) {
      return sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t ABAddressBookPrepareAccountForFamilyDelegate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2 && a3)
  {
    CPRecordStoreGetDatabase();
    CPSqliteDatabaseConnectionForReading();
    uint64_t v3 = CPSqliteConnectionStatementForSQL();
    uint64_t v4 = CPSqliteConnectionStatementForSQL();
    uint64_t result = CPSqliteConnectionStatementForSQL();
    uint64_t v5 = result;
    if (v3)
    {
      uint64_t v6 = *(sqlite3_stmt **)(v3 + 8);
      if (v6)
      {
        uint64_t v7 = (const char *)_CPCreateUTF8StringFromCFString();
        uint64_t v8 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
        sqlite3_bind_text(v6, 1, v7, -1, MEMORY[0x1E4F14838]);
        uint64_t v9 = *(sqlite3_stmt **)(v3 + 8);
        CFArrayRef v10 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v9, 2, v10, -1, v8);
        CPSqliteStatementPerform();
        uint64_t result = CPSqliteStatementReset();
      }
    }
    if (v4)
    {
      CFArrayRef v11 = *(sqlite3_stmt **)(v4 + 8);
      if (v11)
      {
        uint64_t v12 = (const char *)_CPCreateUTF8StringFromCFString();
        uint64_t v13 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
        sqlite3_bind_text(v11, 1, v12, -1, MEMORY[0x1E4F14838]);
        long long v14 = *(sqlite3_stmt **)(v4 + 8);
        uint64_t v15 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v14, 2, v15, -1, v13);
        CPSqliteStatementPerform();
        uint64_t result = CPSqliteStatementReset();
      }
    }
    if (v5)
    {
      uint64_t v16 = *(sqlite3_stmt **)(v5 + 8);
      if (v16)
      {
        uint64_t v17 = (const char *)_CPCreateUTF8StringFromCFString();
        __uint64_t v18 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
        sqlite3_bind_text(v16, 1, v17, -1, MEMORY[0x1E4F14838]);
        uint64_t v19 = *(sqlite3_stmt **)(v5 + 8);
        int v20 = (const char *)_CPCreateUTF8StringFromCFString();
        sqlite3_bind_text(v19, 2, v20, -1, v18);
        CPSqliteStatementPerform();
        return CPSqliteStatementReset();
      }
    }
  }
  return result;
}

uint64_t ABTCCIsAccessRestricted()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F5A350], "sharedInstance"), "isAccessRestricted");
}

uint64_t ABTCCRequestAccess()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F5A350] sharedInstance];
  return [v0 requestAccessWithError:0];
}

uint64_t ABTCCRequestAccessWithCompletion(uint64_t a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F5A350] sharedInstance];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __ABTCCRequestAccessWithCompletion_block_invoke;
  v4[3] = &unk_1E5989A08;
  v4[4] = v2;
  void v4[5] = a1;
  return [v2 requestAuthorization:1 completionHandler:v4];
}

uint64_t __ABTCCRequestAccessWithCompletion_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = [*(id *)(a1 + 32) isAccessGranted];
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v6(v4, v5, a3);
}

__CFSet *ABCopyROWIDsForOrphanedPeople()
{
  return _copyResultsForQueryWithRecordStore();
}

__CFSet *ABCopyUIDsForOrphanedMultiValues()
{
  return _copyResultsForQueryWithRecordStore();
}

__CFSet *ABCopyROWIDsForOrphanedMultiValueEntries()
{
  return _copyResultsForQueryWithRecordStore();
}

__CFSet *ABCopyMultiValueIDsOrphanedPhoneLastFour()
{
  return _copyResultsForQueryWithRecordStore();
}

CFMutableSetRef ABCopyRecordIDsForOrphanedImages()
{
  uint64_t v0 = _copyResultsForQueryWithRecordStore();
  uint64_t v1 = _copyResultsForQueryWithRecordStore();
  uint64_t v2 = _copyResultsForQueryWithRecordStore();
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  v5[0] = v0;
  v5[1] = Mutable;
  CFSetApplyFunction(v1, (CFSetApplierFunction)_subtractSetApplier, v5);
  CFSetApplyFunction(v2, (CFSetApplierFunction)_subtractSetApplier, v5);
  CFRelease(v0);
  CFRelease(v1);
  CFRelease(v2);
  return Mutable;
}

__CFSet *_copyResultsForQueryWithRecordStore()
{
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  CPRecordStoreGetDatabase();
  CPSqliteDatabaseConnectionForReading();
  uint64_t v1 = CPSqliteConnectionStatementForSQL();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(sqlite3_stmt **)(v1 + 8);
    if (v3)
    {
      while (sqlite3_step(v3) == 100)
      {
        int v4 = sqlite3_column_int(*(sqlite3_stmt **)(v2 + 8), 0);
        CFSetAddValue(Mutable, (const void *)v4);
        uint64_t v3 = *(sqlite3_stmt **)(v2 + 8);
      }
      CPSqliteStatementReset();
    }
  }
  return Mutable;
}

void _subtractSetApplier(void *value, CFSetRef *a2)
{
  if (!CFSetContainsValue(*a2, value))
  {
    int v4 = a2[1];
    CFSetAddValue(v4, value);
  }
}

void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(const __CFString *a1, uint64_t a2)
{
  int v4 = _copyResultsForQueryWithRecordStore();
  CFIndex Count = CFSetGetCount(v4);
  if (Count >= 1)
  {
    uint64_t v6 = Count;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 158, 0, @"deleted %ld orphaned people", v7, v8, v9, v6);
      objc_msgSend(MEMORY[0x1E4F5A590], "logDatabaseResolution:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", 3));
    }
  }
  CFRelease(v4);
  CFArrayRef v10 = _copyResultsForQueryWithRecordStore();
  CFIndex v11 = CFSetGetCount(v10);
  if (v11 >= 1)
  {
    uint64_t v12 = v11;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 166, 0, @"deleted %ld orphaned multi-values", v13, v14, v15, v12);
      objc_msgSend(MEMORY[0x1E4F5A590], "logDatabaseResolution:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", 4));
    }
  }
  CFRelease(v10);
  uint64_t v16 = _copyResultsForQueryWithRecordStore();
  CFIndex v17 = CFSetGetCount(v16);
  if (v17 >= 1)
  {
    uint64_t v18 = v17;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 174, 0, @"deleted %ld orphaned multi-value entries", v19, v20, v21, v18);
      objc_msgSend(MEMORY[0x1E4F5A590], "logDatabaseResolution:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", 5));
    }
  }
  CFRelease(v16);
  __uint64_t v22 = _copyResultsForQueryWithRecordStore();
  CFIndex v23 = CFSetGetCount(v22);
  if (v23 >= 1)
  {
    uint64_t v24 = v23;
    if (_performQuery())
    {
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 182, 0, @"deleted %ld orphaned phone last fours", v25, v26, v27, v24);
      objc_msgSend(MEMORY[0x1E4F5A590], "logDatabaseResolution:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", 6));
    }
  }
  CFRelease(v22);
  CFSetRef v28 = ABCopyRecordIDsForOrphanedImages();
  CFIndex v29 = CFSetGetCount(v28);
  if (v29 >= 1)
  {
    CFIndex v30 = v29;
    uint64_t v31 = (const void **)malloc_type_malloc(8 * v29, 0x80040B8603338uLL);
    CFSetGetValues(v28, v31);
    CFArrayRef v32 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v31, v30, 0);
    int v33 = ABCImageStoreRemoveImagesForRecordIds(a1, a2, v32, -1);
    CFRelease(v32);
    free(v31);
    if (v33)
    {
      CFIndex v34 = CFSetGetCount(v28);
      ABDiagnosticsEnabled();
      _ABLog2(4, (uint64_t)"void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)", 190, 0, @"deleted %ld orphaned images", v35, v36, v37, v34);
      objc_msgSend(MEMORY[0x1E4F5A590], "logDatabaseResolution:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", 7));
    }
  }
  CFRelease(v28);
}

uint64_t ABDatabaseIntegrityResolutionRecorder(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F5A590];
  uint64_t v2 = [NSNumber numberWithUnsignedInteger:a1];
  return [v1 logDatabaseResolution:v2];
}

void ABDatabaseIntegrityCheckWithAddressBook(const __CFString *a1)
{
  CFStringRef ImageStore = ABCAddressBookGetImageStore(a1);
  ABDatabaseIntegrityCheckWithAddressBookAndImageStore(a1, (uint64_t)ImageStore);
}

void ABDatabaseIntegrityCheck()
{
  CFStringRef v0 = (const __CFString *)ABAddressBookCreateWithOptions(0, 0);
  if (v0)
  {
    CFStringRef v1 = v0;
    CFStringRef ImageStore = ABCAddressBookGetImageStore(v0);
    ABDatabaseIntegrityCheckWithAddressBookAndImageStore(v1, (uint64_t)ImageStore);
    CFRelease(v1);
  }
}

BOOL _performQuery()
{
  return CPSqliteConnectionPerformSQL() == 101;
}

void ABCAddressBookMarkDirectoryForDeletion_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_19DCDB000, a2, a3, "Failed to mark address book database for deletion: _cn_setValue:forExtendedAttribute: returned  %@", a5, a6, a7, a8, 2u);
}

void ABCAddressBookMarkDirectoryForDeletion_cold_2(os_log_t log)
{
  *(_WORD *)CFStringRef v1 = 0;
  _os_log_error_impl(&dword_19DCDB000, log, OS_LOG_TYPE_ERROR, "Error fetching boot UUID (missing entitlements?); using an error value instead",
    v1,
    2u);
}

void ABCAddressBookIsDirectoryMarkedForDeletion_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ABCAddressBookSaveWithConflictPolicy_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_19DCDB000, a2, a3, "AddressBook failed to save: CPRecordStoreSaveWithCallbackAndTransactionType returned error: %{public}@", a5, a6, a7, a8, 2u);
}

void ABCAddressBookDatabaseChanged_cold_1()
{
  __assert_rtn("ABCAddressBookDatabaseChanged", "ABCAddressBook.m", 1415, "callback != NULL");
}

void ABAddressBookRegisterChangeCallback_cold_1()
{
  __assert_rtn("ABAddressBookRegisterChangeCallback", "ABCAddressBook.m", 2079, "addressBookRef != __sharedAddressBook");
}

void ABAddressBookUnregisterChangeCallback_cold_1()
{
  __assert_rtn("ABAddressBookUnregisterChangeCallback", "ABCAddressBook.m", 2096, "addressBookRef != __sharedAddressBook");
}

void ABAddressBookUnregisterAllChangeCallbacks_cold_1()
{
  __assert_rtn("ABAddressBookUnregisterAllChangeCallbacks", "ABCAddressBook.m", 2116, "addressBookRef != __sharedAddressBook");
}

void ___createStartABDatabaseDoctorCoalescingTimer_block_invoke_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ABCRecordSetValueAndReturnError_cold_1()
{
  __assert_rtn("ABCRecordSetValueAndReturnError", "ABCRecord.c", 99, "value != NULL && CFGetTypeID(value) == CFStringGetTypeID() && CFStringGetLength(value) != 0");
}

void ABCDBContextSaveMultiValue_cold_1()
{
}

void ABCIteratePeopleMatchingStringWithCallbacks_cold_1()
{
  __assert_rtn("ABCIteratePeopleMatchingStringWithCallbacks", "ABCDBContext.m", 4248, "CFArrayGetCount(results) == 0");
}

void ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates_cold_1()
{
  __assert_rtn("ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates", "ABCDBContext.m", 5265, "count == CFArrayGetCount(values)");
}

void __getIntlUtilityClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void *IntlPreferencesLibrary(void)"), @"ABCDBContext.m", 66, @"%s", *a1);
  __break(1u);
}

void __getIntlUtilityClass_block_invoke_cold_2()
{
  CFStringRef v0 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getIntlUtilityClass(void)_block_invoke"), @"ABCDBContext.m", 67, @"Unable to find class %s", "IntlUtility");
  __break(1u);
}

void __ABCGetICUCollatorVersions_block_invoke_cold_1(int *a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_19DCDB000, a2, OS_LOG_TYPE_ERROR, "Error opening root collator to retrieve version number, code=%d", (uint8_t *)v3, 8u);
}

void ABCreateSortKey_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19DCDB000, a2, OS_LOG_TYPE_ERROR, "Internal error from ucol_getSortKey for '%@'", (uint8_t *)&v2, 0xCu);
}

void ABAddressBookSetMe_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_19DCDB000, v0, v1, "AddressBook could not set the Me card because it could not find the Me card's source", v2, v3, v4, v5, v6);
}

void ABAddressBookSetMe_cold_2(__CFString **a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v3 = 138543362;
  uint64_t v4 = ABLogErrorPtr(a1);
  _os_log_error_impl(&dword_19DCDB000, a2, OS_LOG_TYPE_ERROR, "AddressBook could not set the Me card. %{public}@", (uint8_t *)&v3, 0xCu);
}

void ABAddressBookShouldAnalyzeDatabase_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_19DCDB000, v0, v1, "Failed to analyze database: No database context available", v2, v3, v4, v5, v6);
}

void ABAddressBookShouldAnalyzeDatabase_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_19DCDB000, v0, v1, "Failed to analyze database: No database connection available", v2, v3, v4, v5, v6);
}

void __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void *IntlPreferencesLibrary(void)"), @"ABPerson.m", 265, @"%s", *a1);
  __break(1u);
}

void __getNSPersonNameComponentsFormatterPreferencesClass_block_invoke_cold_2()
{
  CFStringRef v0 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getNSPersonNameComponentsFormatterPreferencesClass(void)_block_invoke"), @"ABPerson.m", 266, @"Unable to find class %s", "NSPersonNameComponentsFormatterPreferences");
  __break(1u);
}

void ABMultiValueAddValueAndLabel_cold_1()
{
}

void ABMultiValueInsertValueAndLabelAndUUIDAtIndex_cold_1()
{
}

void ABMultiValueRemoveValueAndLabelAtIndex_cold_1()
{
}

void ABMultiValueReplaceValueAtIndex_cold_1()
{
}

void ABMultiValueReplaceLabelAtIndex_cold_1()
{
}

void ABMultiValueSetPrimaryIdentifier_cold_1()
{
}

void ABMultiValueInsertAndCreateIdentifier_cold_1()
{
}

void ABMultiValueAddValueAndLabelIfUnique_cold_1()
{
}

void ABSourceSetMe_cold_1()
{
  OUTLINED_FUNCTION_1();
  _os_log_debug_impl(&dword_19DCDB000, v0, OS_LOG_TYPE_DEBUG, "Asked to remove the Me card, but we don't have one. Ignoring.", v1, 2u);
}

void ABSourceSetMe_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_19DCDB000, v0, v1, "Changed the Me card, but could not load the address book to record all changes", v2, v3, v4, v5, v6);
}

void ABSourceSetMe_cold_3(__CFString **a1)
{
  ABLogErrorPtr(a1);
  OUTLINED_FUNCTION_2(&dword_19DCDB000, v1, v2, "Asked to set a nil Me card, but could not remove the old one. %{public}@", v3, v4, v5, v6, 2u);
}

void ABSourceSetMe_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_19DCDB000, v0, v1, "Found the Me card we were asked to set in the container, but we could not load it.", v2, v3, v4, v5, v6);
}

void ABSourceSetMe_cold_5()
{
  OUTLINED_FUNCTION_1();
  _os_log_debug_impl(&dword_19DCDB000, v0, OS_LOG_TYPE_DEBUG, "Asked to set the Me card, but it's the same as the one we already have. Ignoring.", v1, 2u);
}

void ABSourceSetMe_cold_6(__CFString **a1)
{
  ABLogErrorPtr(a1);
  OUTLINED_FUNCTION_2(&dword_19DCDB000, v1, v2, "Error encountered while attempting to replace the existing Me card. %{public}@", v3, v4, v5, v6, 2u);
}

void ABSourceSetMe_cold_7()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_19DCDB000, v0, v1, "Asked to set the Me card to a contact we could not find in the container. Nothing more we can do here.", v2, v3, v4, v5, v6);
}

void ABPolicyCreateWithCoder_cold_1()
{
  __assert_rtn("ABPolicyCreateWithCoder", "ABPolicy.m", 587, "propertyList != NULL");
}

void ABRemoveLimitedAccessIdentifiersForBundle_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl(&dword_19DCDB000, log, OS_LOG_TYPE_DEBUG, "ABRemoveLimitedAccessIdentifiersForBundle remove %@ %@", (uint8_t *)&v3, 0x16u);
}

void ABRemoveContactIdentifiersFromLimitedAccessForAllBundles_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_19DCDB000, a2, OS_LOG_TYPE_DEBUG, "ABRemoveContactIdentifiersFromLimitedAccessForAllBundles remove %@", (uint8_t *)&v2, 0xCu);
}

void ABLimitedAccessContactsCountForBundle_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_19DCDB000, a2, OS_LOG_TYPE_ERROR, "ABLimitedAccessContactsCountForBundle unable to create statement (%@)", (uint8_t *)&v2, 0xCu);
}

void ABImageUtilsCreateScaledImageData_cold_1()
{
  __assert_rtn("ABImageUtilsCreateScaledImageData", "ABImageUtils.c", 511, "bitsPerComponent == 5 || bitsPerComponent == 8");
}

void ABImageUtilsCopySyncImageForPerson_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_1(&dword_19DCDB000, v0, v1, "[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: no original image available to sync.", v2, v3, v4, v5, v6);
}

void ABImageUtilsCopySyncImageForPerson_cold_2()
{
  OUTLINED_FUNCTION_1();
  _os_log_error_impl(&dword_19DCDB000, v0, OS_LOG_TYPE_ERROR, "[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: can't get size of original image to sync.", v1, 2u);
}

void ABImageUtilsCopySyncImageForPerson_cold_3(void *a1, int a2, NSObject *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = 134218240;
  uint64_t v6 = [a1 length];
  __int16 v7 = 1024;
  int v8 = a2;
  _os_log_error_impl(&dword_19DCDB000, a3, OS_LOG_TYPE_ERROR, "[Likeness Update] Scaling/compression failed to reduce image of size %lu to max size %u. Proceeding without sync image.", (uint8_t *)&v5, 0x12u);
}

void ABImageUtilsCopySyncImageForPerson_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_1(&dword_19DCDB000, v0, v1, "Returning the original image.", v2, v3, v4, v5, v6);
}

void ABImageUtilsCopySyncImageForPerson_cold_5()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_1(&dword_19DCDB000, v0, v1, "Transforming the original image to normal orientation.", v2, v3, v4, v5, v6);
}

void ABImageUtilsCopySyncImageForPerson_cold_6()
{
  OUTLINED_FUNCTION_1();
  _os_log_error_impl(&dword_19DCDB000, v0, OS_LOG_TYPE_ERROR, "[Likeness Update] ABImageUtilsCopySyncImageForPerson: Unable to get sync image size. Crop rect will be messed up", v1, 2u);
}

void ABImageUtilsCopySyncImageForPerson_cold_7()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_1(&dword_19DCDB000, v0, v1, "Returning the AB saved sync image.", v2, v3, v4, v5, v6);
}

void ABChangeHistoryClearEntityChangeTableRowIDsForClient_cold_1()
{
  __assert_rtn("ABChangeHistoryClearEntityChangeTableRowIDsForClient", "ABChangeHistory.m", 1133, "entityType == ABChangeHistoryEntityTypePerson || entityType == ABChangeHistoryEntityTypeGroup");
}

void _performQueryToClearSequenceNumber_cold_1(uint64_t a1)
{
  sqlite3_errcode(*(sqlite3 **)(a1 + 8));
  sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_1_0(&dword_19DCDB000, MEMORY[0x1E4F14500], v2, "Error %d with query to clear sequence number: %s\n", v3, v4, v5, v6, v7);
}

void __ABChangeHistoryClearChangesToSequenceNumber_block_invoke_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ABChangeHistoryInsertPersonChangeRecord_cold_1(uint64_t a1)
{
  sqlite3_errcode(*(sqlite3 **)(a1 + 8));
  sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_1_0(&dword_19DCDB000, MEMORY[0x1E4F14500], v2, "Error %d preparing person changes log statement: %s\n", v3, v4, v5, v6, v7);
}

void ABChangeHistoryInsertPersonChangeRecord_cold_2(uint64_t a1)
{
  sqlite3_errcode(*(sqlite3 **)(a1 + 8));
  sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_1_0(&dword_19DCDB000, MEMORY[0x1E4F14500], v2, "Error %d adding change log entry statement: %s\n", v3, v4, v5, v6, v7);
}

void ABCFFTSTokenizerNext_cold_1()
{
  __assert_rtn("ABTokenListGetCount", "ABSQLiteICUSupport.m", 1156, "list != NULL");
}

void ABTokenListDestroy_cold_1()
{
}

void ABTokenListRemoveAllTokens_cold_1()
{
}

void ABTokenListPopulateFromString_cold_1()
{
  __assert_rtn("ABTokenListPopulateFromString", "ABSQLiteICUSupport.m", 1108, "list != NULL");
}

void ABTokenListGetTokenStartByteOffsetAtIndex_cold_1()
{
}

void ABTokenListGetTokenStartByteOffsetAtIndex_cold_2()
{
}

void ABTokenListGetTokenEndByteOffsetAtIndex_cold_1()
{
}

void ABTokenListGetTokenEndByteOffsetAtIndex_cold_2()
{
}

void ABTokenListGetTokenAtIndex_cold_1()
{
}

void ABTokenListGetTokenAtIndex_cold_2()
{
}

void ABTokenListGetTokenCollationKeyAtIndex_cold_1()
{
}

void ABTokenListGetTokenCollationKeyAtIndex_cold_2()
{
}

void ABTokenListGetTokenCollationKeyLengthAtIndex_cold_1()
{
}

void ABTokenListGetTokenCollationKeyLengthAtIndex_cold_2()
{
}

void ABTokenListGetTokenRangeAtIndex_cold_1()
{
}

void ABTokenListGetTokenRangeAtIndex_cold_2()
{
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7110]();
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x1F40D7158](theArray, range.location, range.length, value, comparator, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1F40D7448](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7450](bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A8](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1F40D74B8]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1F40D74D8](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7710](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7720](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep)
{
  return (CFDateRef)MEMORY[0x1F40D78C8](allocator, formatter, string, rangep);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C10](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D7CA0](cf);
}

CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name)
{
  return (CFMessagePortRef)MEMORY[0x1F40D7CB8](allocator, name);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1F40D7CE0](remote, *(void *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

uint64_t CFPhoneNumberCreate()
{
  return MEMORY[0x1F4114220]();
}

uint64_t CFPhoneNumberCreateString()
{
  return MEMORY[0x1F4114228]();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1F40D8200](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8218](allocator, capacity, theSet);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x1F40D8230]();
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFShow(CFTypeRef obj)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1F40D83A8](*(void *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1F40D83B8](theString);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.CFIndex length = v4;
  result.CFIndex location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef tokenizer, CFOptionFlags attribute)
{
  return (CFTypeRef)MEMORY[0x1F40D8690](tokenizer, attribute);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.CFIndex length = v2;
  result.CFIndex location = v1;
  return result;
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1F40D86C0](string, range, transform, reverse);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A48](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1F40D9858](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1F40D9868](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
}

uint64_t CGImageCreateByScaling()
{
  return MEMORY[0x1F40E96A8]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1F40DA890](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9738](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D0](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9988](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E99F8](isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1F40E9A18](isrc);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

uint64_t CNLogicalNot()
{
  return MEMORY[0x1F4112C88]();
}

uint64_t CPCopySharedResourcesPreferencesDomainForDomain()
{
  return MEMORY[0x1F41092D8]();
}

uint64_t CPFileBuildDirectoriesToPath()
{
  return MEMORY[0x1F41092F8]();
}

uint64_t CPPhoneNumberCopyActiveCountryCode()
{
  return MEMORY[0x1F4109338]();
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return MEMORY[0x1F4109368]();
}

uint64_t CPPhoneNumberCopyNetworkCountryCode()
{
  return MEMORY[0x1F4109378]();
}

uint64_t CPPhoneNumberCopyNormalized()
{
  return MEMORY[0x1F4109380]();
}

uint64_t CPPhoneNumbersEqual()
{
  return MEMORY[0x1F41093A8]();
}

uint64_t CPPhoneNumbersEqualWithCountries()
{
  return MEMORY[0x1F41093B0]();
}

uint64_t CPRecordCopyChangedProperties()
{
  return MEMORY[0x1F41093C0]();
}

uint64_t CPRecordCopyProperty()
{
  return MEMORY[0x1F41093C8]();
}

uint64_t CPRecordCreate()
{
  return MEMORY[0x1F41093D0]();
}

uint64_t CPRecordCreateWithRecordID()
{
  return MEMORY[0x1F41093E0]();
}

uint64_t CPRecordGetCachedProperty()
{
  return MEMORY[0x1F41093E8]();
}

uint64_t CPRecordGetClass()
{
  return MEMORY[0x1F41093F0]();
}

uint64_t CPRecordGetID()
{
  return MEMORY[0x1F41093F8]();
}

uint64_t CPRecordGetOriginalProperty()
{
  return MEMORY[0x1F4109408]();
}

uint64_t CPRecordGetProperty()
{
  return MEMORY[0x1F4109410]();
}

uint64_t CPRecordGetPropertyDescriptor()
{
  return MEMORY[0x1F4109418]();
}

uint64_t CPRecordGetStore()
{
  return MEMORY[0x1F4109420]();
}

uint64_t CPRecordIndexOfPropertyNamed()
{
  return MEMORY[0x1F4109430]();
}

uint64_t CPRecordInitializeProperty()
{
  return MEMORY[0x1F4109438]();
}

uint64_t CPRecordInvalidateRecord()
{
  return MEMORY[0x1F4109440]();
}

uint64_t CPRecordIsPendingAdd()
{
  return MEMORY[0x1F4109450]();
}

uint64_t CPRecordMarkChanged()
{
  return MEMORY[0x1F4109460]();
}

uint64_t CPRecordMarkPropertyChanged()
{
  return MEMORY[0x1F4109468]();
}

uint64_t CPRecordSetProperty()
{
  return MEMORY[0x1F4109480]();
}

uint64_t CPRecordStoreAddExistingRecord()
{
  return MEMORY[0x1F4109490]();
}

uint64_t CPRecordStoreAddRecord()
{
  return MEMORY[0x1F4109498]();
}

uint64_t CPRecordStoreCopyAddedRecords()
{
  return MEMORY[0x1F41094A0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClass()
{
  return MEMORY[0x1F41094A8]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhere()
{
  return MEMORY[0x1F41094B0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock()
{
  return MEMORY[0x1F41094B8]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter()
{
  return MEMORY[0x1F41094C0]();
}

uint64_t CPRecordStoreCopyChangedRecords()
{
  return MEMORY[0x1F41094C8]();
}

uint64_t CPRecordStoreCopyDeletedRecordIDsOfClass()
{
  return MEMORY[0x1F41094D0]();
}

uint64_t CPRecordStoreCopyValueForProperty()
{
  return MEMORY[0x1F41094E8]();
}

uint64_t CPRecordStoreCreateColumnListWithAliasAndExtraColumns()
{
  return MEMORY[0x1F41094F8]();
}

uint64_t CPRecordStoreCreateReadColumns()
{
  return MEMORY[0x1F4109508]();
}

uint64_t CPRecordStoreCreateSelectPrefix()
{
  return MEMORY[0x1F4109510]();
}

uint64_t CPRecordStoreCreateSelectPrefixFromRecordDescriptor()
{
  return MEMORY[0x1F4109518]();
}

uint64_t CPRecordStoreCreateSelectStatement()
{
  return MEMORY[0x1F4109520]();
}

uint64_t CPRecordStoreCreateTablesForClass()
{
  return MEMORY[0x1F4109528]();
}

uint64_t CPRecordStoreCreateWithPath()
{
  return MEMORY[0x1F4109530]();
}

uint64_t CPRecordStoreCreateWithPathAndOptions()
{
  return MEMORY[0x1F4109538]();
}

uint64_t CPRecordStoreDestroy()
{
  return MEMORY[0x1F4109560]();
}

uint64_t CPRecordStoreGetCachedInstanceOfClassWithUID()
{
  return MEMORY[0x1F4109568]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithOrderAndBindBlockAndProperties()
{
  return MEMORY[0x1F4109580]();
}

uint64_t CPRecordStoreGetContext()
{
  return MEMORY[0x1F41095A8]();
}

uint64_t CPRecordStoreGetCountOfInstancesOfClassWhere()
{
  return MEMORY[0x1F41095B0]();
}

uint64_t CPRecordStoreGetDatabase()
{
  return MEMORY[0x1F41095C0]();
}

uint64_t CPRecordStoreGetLastSequenceNumber()
{
  return MEMORY[0x1F41095D0]();
}

uint64_t CPRecordStoreGetRecordIDForRowid()
{
  return MEMORY[0x1F41095D8]();
}

uint64_t CPRecordStoreGetSequenceNumber()
{
  return MEMORY[0x1F41095E8]();
}

uint64_t CPRecordStoreHasUnsavedChanges()
{
  return MEMORY[0x1F41095F0]();
}

uint64_t CPRecordStoreInvalidateCachedInstancesOfClass()
{
  return MEMORY[0x1F41095F8]();
}

uint64_t CPRecordStoreInvalidateCaches()
{
  return MEMORY[0x1F4109608]();
}

uint64_t CPRecordStoreLogChanges()
{
  return MEMORY[0x1F4109618]();
}

uint64_t CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType()
{
  return MEMORY[0x1F4109620]();
}

uint64_t CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType()
{
  return MEMORY[0x1F4109628]();
}

uint64_t CPRecordStoreProcessDeletedRecordsWithPolicyAndTransactionType()
{
  return MEMORY[0x1F4109638]();
}

uint64_t CPRecordStoreProcessQueryWithBindBlock()
{
  return MEMORY[0x1F4109640]();
}

uint64_t CPRecordStoreProcessRecordStatementWithPropertyIndices()
{
  return MEMORY[0x1F4109648]();
}

uint64_t CPRecordStoreProcessStatement()
{
  return MEMORY[0x1F4109650]();
}

uint64_t CPRecordStoreProcessStatementWithPropertyIndices()
{
  return MEMORY[0x1F4109658]();
}

uint64_t CPRecordStoreRegisterClass()
{
  return MEMORY[0x1F4109660]();
}

uint64_t CPRecordStoreRemoveRecord()
{
  return MEMORY[0x1F4109670]();
}

uint64_t CPRecordStoreRemoveRecordOfClassWithUID()
{
  return MEMORY[0x1F4109678]();
}

uint64_t CPRecordStoreRevert()
{
  return MEMORY[0x1F4109680]();
}

uint64_t CPRecordStoreSaveWithCallbackAndTransactionType()
{
  return MEMORY[0x1F4109688]();
}

uint64_t CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType()
{
  return MEMORY[0x1F4109690]();
}

uint64_t CPRecordStoreSetContext()
{
  return MEMORY[0x1F4109698]();
}

uint64_t CPRecordStoreSetSetupHandler()
{
  return MEMORY[0x1F41096A0]();
}

uint64_t CPRecordStoreSetValueForProperty()
{
  return MEMORY[0x1F41096A8]();
}

uint64_t CPRecordUnloadProperty()
{
  return MEMORY[0x1F41096B0]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1F41096C8]();
}

uint64_t CPSqliteConnectionBeginTransactionType()
{
  return MEMORY[0x1F41096E0]();
}

uint64_t CPSqliteConnectionCommit()
{
  return MEMORY[0x1F41096E8]();
}

uint64_t CPSqliteConnectionCopyValueForProperty()
{
  return MEMORY[0x1F41096F0]();
}

uint64_t CPSqliteConnectionDisableProgressHandlerCallback()
{
  return MEMORY[0x1F4109700]();
}

uint64_t CPSqliteConnectionEnableProgressHandlerCallback()
{
  return MEMORY[0x1F4109708]();
}

uint64_t CPSqliteConnectionIntegerForProperty()
{
  return MEMORY[0x1F4109720]();
}

uint64_t CPSqliteConnectionIntegerForPropertyWithDefaultValue()
{
  return MEMORY[0x1F4109728]();
}

uint64_t CPSqliteConnectionPerformSQL()
{
  return MEMORY[0x1F4109730]();
}

uint64_t CPSqliteConnectionRemoveProperty()
{
  return MEMORY[0x1F4109738]();
}

uint64_t CPSqliteConnectionRollback()
{
  return MEMORY[0x1F4109740]();
}

uint64_t CPSqliteConnectionRowidOfLastInsert()
{
  return MEMORY[0x1F4109748]();
}

uint64_t CPSqliteConnectionSetIntegerForProperty()
{
  return MEMORY[0x1F4109750]();
}

uint64_t CPSqliteConnectionSetValueForProperty()
{
  return MEMORY[0x1F4109758]();
}

uint64_t CPSqliteConnectionStatementForSQL()
{
  return MEMORY[0x1F4109760]();
}

uint64_t CPSqliteDatabaseConnectionForReading()
{
  return MEMORY[0x1F4109768]();
}

uint64_t CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags()
{
  return MEMORY[0x1F4109770]();
}

uint64_t CPSqliteDatabaseConnectionForWriting()
{
  return MEMORY[0x1F4109778]();
}

uint64_t CPSqliteDatabaseCopyUniqueIdentifier()
{
  return MEMORY[0x1F4109790]();
}

uint64_t CPSqliteDatabaseDeletePreservingOptions()
{
  return MEMORY[0x1F41097A0]();
}

uint64_t CPSqliteDatabaseRegisterFunction()
{
  return MEMORY[0x1F41097B0]();
}

uint64_t CPSqliteDatabaseReleaseSqliteConnection()
{
  return MEMORY[0x1F41097C8]();
}

uint64_t CPSqliteDatabaseReleaseSqliteStatement()
{
  return MEMORY[0x1F41097D0]();
}

uint64_t CPSqliteDatabaseSetAccessRequestHandler()
{
  return MEMORY[0x1F41097D8]();
}

uint64_t CPSqliteDatabaseSetAutoRetryStatements()
{
  return MEMORY[0x1F41097E0]();
}

uint64_t CPSqliteDatabaseSetAutoVacuumLevel()
{
  return MEMORY[0x1F41097E8]();
}

uint64_t CPSqliteDatabaseSetConnectionInitializer()
{
  return MEMORY[0x1F41097F8]();
}

uint64_t CPSqliteDatabaseSetCorruptionHandler()
{
  return MEMORY[0x1F4109800]();
}

uint64_t CPSqliteDatabaseSetDataProtectionLevel()
{
  return MEMORY[0x1F4109808]();
}

uint64_t CPSqliteDatabaseSetDatabaseDeletedCallback()
{
  return MEMORY[0x1F4109810]();
}

uint64_t CPSqliteDatabaseSetJournalModeWAL()
{
  return MEMORY[0x1F4109820]();
}

uint64_t CPSqliteDatabaseSetMigrationHandlers()
{
  return MEMORY[0x1F4109828]();
}

uint64_t CPSqliteDatabaseSetMigrationPluginBundleID()
{
  return MEMORY[0x1F4109830]();
}

uint64_t CPSqliteDatabaseSetShouldMigrateInProcess()
{
  return MEMORY[0x1F4109840]();
}

uint64_t CPSqliteDatabaseSetShouldRequestUnlock()
{
  return MEMORY[0x1F4109848]();
}

uint64_t CPSqliteDatabaseSetShouldUseInhibitorForConnections()
{
  return MEMORY[0x1F4109850]();
}

uint64_t CPSqliteDatabaseSetShouldYieldWhenRequested()
{
  return MEMORY[0x1F4109858]();
}

uint64_t CPSqliteDatabaseSetVersion()
{
  return MEMORY[0x1F4109878]();
}

uint64_t CPSqliteDatabaseStatementForReading()
{
  return MEMORY[0x1F4109880]();
}

uint64_t CPSqliteDatabaseStatementForWriting()
{
  return MEMORY[0x1F4109888]();
}

uint64_t CPSqliteRegisterYieldNotifyBlock()
{
  return MEMORY[0x1F4109898]();
}

uint64_t CPSqliteStatementApplyValuesFromRecord()
{
  return MEMORY[0x1F41098B0]();
}

uint64_t CPSqliteStatementCopyStringResult()
{
  return MEMORY[0x1F41098B8]();
}

uint64_t CPSqliteStatementIntegerResult()
{
  return MEMORY[0x1F41098C8]();
}

uint64_t CPSqliteStatementPerform()
{
  return MEMORY[0x1F41098D0]();
}

uint64_t CPSqliteStatementProcessPhoneQuery()
{
  return MEMORY[0x1F41098D8]();
}

uint64_t CPSqliteStatementReset()
{
  return MEMORY[0x1F41098E0]();
}

uint64_t CPSqliteStatementSendResults()
{
  return MEMORY[0x1F41098E8]();
}

uint64_t CPSystemRootDirectory()
{
  return MEMORY[0x1F4109900]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1F40E7180](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

void NSZoneFree(NSZone *zone, void *ptr)
{
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  return (void *)MEMORY[0x1F40E7310](zone, size);
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  return (void *)MEMORY[0x1F40E7318](zone, ptr, size);
}

uint64_t PNCopyBestGuessNormalizedNumberForCountry()
{
  return MEMORY[0x1F4114240]();
}

uint64_t PNCreateFormattedStringWithCountry()
{
  return MEMORY[0x1F4114250]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  return MEMORY[0x1F40DEE20](inUTI, inConformsToUTI);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1F40D8D00]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFStringTokenizerCreateNamePartsArrayWithStringAsCompositeName()
{
  return MEMORY[0x1F40D9180]();
}

uint64_t _CFStringTokenizerCreatePossibleNamePartsArrayWithStringAsCompositeName()
{
  return MEMORY[0x1F40D9188]();
}

uint64_t _CPCreateUTF8StringFromCFString()
{
  return MEMORY[0x1F4109948]();
}

uint64_t _PNCopyIndexStringsForAddressBookSearch()
{
  return MEMORY[0x1F4114288]();
}

uint64_t _PNCopyLastFourDigitsOfLocalNumber()
{
  return MEMORY[0x1F4114290]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

void asl_free(asl_object_t obj)
{
}

asl_object_t asl_new(uint32_t type)
{
  return (asl_object_t)MEMORY[0x1F40CA410](*(void *)&type);
}

asl_object_t asl_open(const char *ident, const char *facility, uint32_t opts)
{
  return (asl_object_t)MEMORY[0x1F40CA418](ident, facility, *(void *)&opts);
}

int asl_send(asl_object_t obj, asl_object_t msg)
{
  return MEMORY[0x1F40CA420](obj, msg);
}

int asl_set(asl_object_t obj, const char *key, const char *value)
{
  return MEMORY[0x1F40CA428](obj, key, value);
}

int asl_set_filter(asl_object_t client, int f)
{
  return MEMORY[0x1F40CA430](client, *(void *)&f);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t decomposePhoneNumber()
{
  return MEMORY[0x1F4109980]();
}

uint64_t decomposedPhoneNumbersEqual()
{
  return MEMORY[0x1F41142A8]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int proc_pidfdinfo(int pid, int fd, int flavor, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A0](*(void *)&pid, *(void *)&fd, *(void *)&flavor, buffer, *(void *)&buffersize);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1F40CDA60](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1F40CDB90](a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

void *__cdecl sqlite3_aggregate_context(sqlite3_context *a1, int nBytes)
{
  return (void *)MEMORY[0x1F4181F60](a1, *(void *)&nBytes);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1F4181FD0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_blob_bytes(sqlite3_blob *a1)
{
  return MEMORY[0x1F4182018](a1);
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  return MEMORY[0x1F4182020](a1);
}

int sqlite3_blob_open(sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  return MEMORY[0x1F4182028](a1, zDb, zTable, zColumn, iRow, *(void *)&flags, ppBlob);
}

int sqlite3_blob_read(sqlite3_blob *a1, void *Z, int N, int iOffset)
{
  return MEMORY[0x1F4182030](a1, Z, *(void *)&N, *(void *)&iOffset);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x1F4182058](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1F41820B0](a1, *(void *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return MEMORY[0x1F4182118](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1F4182148](a1, *(void *)&op);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x1F4182190](db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return (char *)MEMORY[0x1F41821B8](pStmt);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1F41821D0](a1, zDbName, *(void *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

void sqlite3_free(void *a1)
{
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  return MEMORY[0x1F41821F0](a1);
}

void sqlite3_interrupt(sqlite3 *a1)
{
}

void *__cdecl sqlite3_malloc(int a1)
{
  return (void *)MEMORY[0x1F4182248](*(void *)&a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182288](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
}

void sqlite3_result_null(sqlite3_context *a1)
{
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
}

void sqlite3_result_value(sqlite3_context *a1, sqlite3_value *a2)
{
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  return MEMORY[0x1F41823F8](a1, *(void *)&uMask, xCallback, pCtx);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1F4182408](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1F4182410](a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1F4182440](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1F4182468](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1F40CE140](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

void syslog(int a1, const char *a2, ...)
{
}

double u_getNumericValue(UChar32 c)
{
  MEMORY[0x1F417F768](*(void *)&c);
  return result;
}

void u_getVersion(UVersionInfo versionArray)
{
}

uint64_t ucol_close()
{
  return MEMORY[0x1F417FD08]();
}

uint64_t ucol_getBound()
{
  return MEMORY[0x1F417FD30]();
}

uint64_t ucol_getSortKey()
{
  return MEMORY[0x1F417FD68]();
}

uint64_t ucol_getUCAVersion()
{
  return MEMORY[0x1F417FD78]();
}

uint64_t ucol_getVersion()
{
  return MEMORY[0x1F417FD80]();
}

uint64_t ucol_mergeSortkeys()
{
  return MEMORY[0x1F417FD88]();
}

uint64_t ucol_open()
{
  return MEMORY[0x1F417FDA0]();
}

uint64_t ucol_setAttribute()
{
  return MEMORY[0x1F417FDC8]();
}

uint64_t ucol_setStrength()
{
  return MEMORY[0x1F417FDD0]();
}

uint64_t uset_containsAllCodePoints()
{
  return MEMORY[0x1F41806E8]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1F4180720]();
}

uint64_t uset_span()
{
  return MEMORY[0x1F4180748]();
}