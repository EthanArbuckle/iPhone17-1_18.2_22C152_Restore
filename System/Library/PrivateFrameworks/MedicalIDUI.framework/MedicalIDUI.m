void sub_255D79A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void type metadata accessor for AVMediaType(uint64_t a1)
{
}

void type metadata accessor for HKEmergencyCardOrganDonorStatus(uint64_t a1)
{
}

void type metadata accessor for HKBloodType(uint64_t a1)
{
}

void type metadata accessor for MIUIMedicalIDAccessPoint(uint64_t a1)
{
}

void type metadata accessor for MIUIEntryPoint(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for SourceType(uint64_t a1)
{
}

void type metadata accessor for AVAuthorizationStatus(uint64_t a1)
{
}

void sub_255D79DE8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t (*sub_255D79DF4())(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_255D7B264();
  sub_255EEEC30();
  if (!v2) {
    return 0;
  }
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  return sub_255D7B2F0;
}

uint64_t sub_255D79E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8, a1);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_255D7B3C4(255);
  sub_255EEE870();
  uint64_t v11 = sub_255D7A858((unint64_t *)&qword_269F34E00, sub_255D7B3C4);
  v14[0] = a2;
  v14[1] = v11;
  swift_getWitnessTable();
  uint64_t result = sub_255EEE930();
  *a3 = result;
  a3[1] = v13;
  return result;
}

uint64_t sub_255D7A034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v24[1] = a2;
  uint64_t v25 = a4;
  v24[0] = a3;
  uint64_t v26 = a5;
  uint64_t v6 = sub_255EEE8D0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D7B3C4(255);
  uint64_t v10 = sub_255EEE870();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v16 = (char *)v24 - v15;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, v9, v6);
  v29 = sub_255D7B670;
  uint64_t v30 = v18;
  uint64_t v19 = v25;
  sub_255EEF440();
  swift_release();
  swift_release();
  uint64_t v20 = sub_255D7A858((unint64_t *)&qword_269F34E00, sub_255D7B3C4);
  uint64_t v27 = v19;
  uint64_t v28 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_255DD37CC(v14, v10, WitnessTable);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, v10);
  sub_255DD37CC(v16, v10, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
}

uint64_t sub_255D7A30C(void *a1)
{
  return sub_255EEE8C0();
}

void *sub_255D7A368@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_255D7A378(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_255D7A384(uint64_t a1, uint64_t a2)
{
  return sub_255D7AB20(a1, a2, MEMORY[0x270FA9BA0]);
}

uint64_t sub_255D7A3A4(uint64_t a1, id *a2)
{
  uint64_t result = sub_255EEFD70();
  *a2 = 0;
  return result;
}

uint64_t sub_255D7A41C(uint64_t a1, id *a2)
{
  char v3 = sub_255EEFD80();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_255D7A49C@<X0>(uint64_t *a1@<X8>)
{
  sub_255EEFD90();
  uint64_t v2 = sub_255EEFD50();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_255D7A4E0()
{
  return sub_255EEE320();
}

uint64_t sub_255D7A4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x25A299D50](a1, &v6);
  char v4 = v7;
  uint64_t v5 = v6;
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_255D7A550(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x25A299D60](a1, &v7);
  char v4 = v8;
  uint64_t v5 = v7;
  if (v8) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_255D7A5A8(double *a1@<X8>)
{
  *a1 = MEMORY[0x25A299D70]();
}

BOOL sub_255D7A5D0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_255D7A5E4()
{
  return sub_255EF0580();
}

uint64_t sub_255D7A62C()
{
  return sub_255EF0550();
}

uint64_t sub_255D7A658()
{
  return sub_255EF0580();
}

uint64_t sub_255D7A6A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_255EEFD90();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_255D7A6D0(uint64_t a1, uint64_t a2)
{
  return sub_255D7A728(a1, a2, (void (*)(void))sub_255D7AF10, (void (*)(void))sub_255D7AF44);
}

uint64_t sub_255D7A6FC(uint64_t a1, uint64_t a2)
{
  return sub_255D7A728(a1, a2, (void (*)(void))sub_255D7B1B8, (void (*)(void))sub_255D7B1EC);
}

uint64_t sub_255D7A728(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4();
  return sub_255EF0450();
}

uint64_t sub_255D7A79C(uint64_t a1, uint64_t a2)
{
  return sub_255D7A728(a1, a2, (void (*)(void))sub_255D7B028, (void (*)(void))sub_255D7B05C);
}

uint64_t sub_255D7A7C8()
{
  return sub_255D7A858(&qword_269F34CE8, type metadata accessor for AttributeName);
}

uint64_t sub_255D7A810()
{
  return sub_255D7A858(&qword_269F34CF0, type metadata accessor for AttributeName);
}

uint64_t sub_255D7A858(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255D7A8A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_255EEFD50();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_255D7A8E8(uint64_t a1, uint64_t a2)
{
  return sub_255D7A728(a1, a2, (void (*)(void))sub_255D7AFC0, (void (*)(void))sub_255D7AFF4);
}

uint64_t sub_255D7A914()
{
  return sub_255D7A858(&qword_269F34CF8, type metadata accessor for TraitKey);
}

uint64_t sub_255D7A95C()
{
  return sub_255D7A858(&qword_269F34D00, type metadata accessor for TraitKey);
}

double sub_255D7A9A4@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_255D7A9B0()
{
  return sub_255EF0450();
}

uint64_t sub_255D7AA78()
{
  return sub_255D7A858(&qword_269F34D08, type metadata accessor for Weight);
}

uint64_t sub_255D7AAC0()
{
  return sub_255D7A858(&qword_269F34D10, type metadata accessor for Weight);
}

uint64_t sub_255D7AB08(uint64_t a1, uint64_t a2)
{
  return sub_255D7AB20(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_255D7AB20(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_255EEFD90();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_255D7AB64()
{
  sub_255EEFD90();
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255D7ABB8()
{
  sub_255EEFD90();
  sub_255EF0540();
  sub_255EEFDE0();
  uint64_t v0 = sub_255EF0580();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_255D7AC2C()
{
  return MEMORY[0x270F9DDC0](*v0);
}

uint64_t sub_255D7AC34()
{
  return sub_255EF0570();
}

uint64_t sub_255D7AC68(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return MEMORY[0x270F9FC40](a1, v2);
}

uint64_t sub_255D7AC78()
{
  uint64_t v0 = sub_255EEFD90();
  uint64_t v2 = v1;
  if (v0 == sub_255EEFD90() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_255EF04A0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_255D7AD04(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_255D7AD18()
{
  return sub_255D7A858(&qword_269F34D18, type metadata accessor for Weight);
}

uint64_t sub_255D7AD60()
{
  return sub_255D7A858(&qword_269F34D20, type metadata accessor for AVMediaType);
}

uint64_t sub_255D7ADA8()
{
  return sub_255D7A858(&qword_269F34D28, type metadata accessor for AVMediaType);
}

uint64_t sub_255D7ADF0()
{
  return sub_255D7A858(&qword_269F34D30, type metadata accessor for AVMediaType);
}

uint64_t sub_255D7AE38()
{
  return sub_255D7A858(&qword_269F34D38, type metadata accessor for HKBloodType);
}

uint64_t sub_255D7AE80()
{
  return sub_255D7A858(&qword_269F34D40, type metadata accessor for AttributeName);
}

uint64_t sub_255D7AEC8()
{
  return sub_255D7A858(&qword_269F34D48, type metadata accessor for TraitKey);
}

uint64_t sub_255D7AF10()
{
  return sub_255D7A858(&qword_269F34D50, type metadata accessor for AVMediaType);
}

uint64_t sub_255D7AF44()
{
  return sub_255D7A858(&qword_269F34D58, type metadata accessor for AVMediaType);
}

unint64_t sub_255D7AF78()
{
  unint64_t result = qword_269F34D70;
  if (!qword_269F34D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34D70);
  }
  return result;
}

uint64_t sub_255D7AFC0()
{
  return sub_255D7A858(&qword_269F34D78, type metadata accessor for TraitKey);
}

uint64_t sub_255D7AFF4()
{
  return sub_255D7A858(&qword_269F34D80, type metadata accessor for TraitKey);
}

uint64_t sub_255D7B028()
{
  return sub_255D7A858(&qword_269F34D88, type metadata accessor for AttributeName);
}

uint64_t sub_255D7B05C()
{
  return sub_255D7A858(&qword_269F34D90, type metadata accessor for AttributeName);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for InfoKey(uint64_t a1)
{
}

uint64_t sub_255D7B0E0()
{
  return sub_255D7A858(&qword_269F34DA8, type metadata accessor for InfoKey);
}

uint64_t sub_255D7B128()
{
  return sub_255D7A858(&qword_269F34DB0, type metadata accessor for InfoKey);
}

uint64_t sub_255D7B170()
{
  return sub_255D7A858(&qword_269F34DB8, type metadata accessor for InfoKey);
}

uint64_t sub_255D7B1B8()
{
  return sub_255D7A858(&qword_269F34DC0, type metadata accessor for InfoKey);
}

uint64_t sub_255D7B1EC()
{
  return sub_255D7A858(&qword_269F34DC8, type metadata accessor for InfoKey);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_255D7B264()
{
  unint64_t result = qword_269F34DD0;
  if (!qword_269F34DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34DD0);
  }
  return result;
}

uint64_t sub_255D7B2B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255D7B2F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_255DB2D18(a1, a2, a3, a4 & 1, *(uint64_t (**)(uint64_t, void *))(v4 + 16));
}

uint64_t sub_255D7B2FC()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_255D7B384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255D7A034(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_255D7B3C4(uint64_t a1)
{
}

void sub_255D7B3F8(uint64_t a1)
{
}

void sub_255D7B42C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_255D7B490()
{
  unint64_t result = qword_269F34DE8;
  if (!qword_269F34DE8)
  {
    sub_255D7B534();
    sub_255D7B58C(255, &qword_269F34DF8, MEMORY[0x263F1BB00], MEMORY[0x263F8D8F0]);
    sub_255EEFF70();
    unint64_t result = swift_getFunctionTypeMetadataGlobalActor();
    atomic_store(result, (unint64_t *)&qword_269F34DE8);
  }
  return result;
}

unint64_t sub_255D7B534()
{
  unint64_t result = qword_269F34DF0;
  if (!qword_269F34DF0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269F34DF0);
  }
  return result;
}

void sub_255D7B58C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255D7B5E0()
{
  uint64_t v1 = sub_255EEE8D0();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_255D7B670(void *a1)
{
  sub_255EEE8D0();
  return sub_255D7A30C(a1);
}

ValueMetadata *type metadata accessor for ScrollToProviderKey()
{
  return &type metadata for ScrollToProviderKey;
}

uint64_t HealthKitMedicalIDDataProvider.statePublisher.getter()
{
  sub_255D7E86C(0, &qword_269F34F90, (uint64_t (*)(uint64_t))sub_255D7B8A4, sub_255D7BA6C, MEMORY[0x263EFDAF8]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v5 = (char *)v8 - v4;
  v8[1] = *(void *)(v0 + 16);
  sub_255D7B8A4();
  sub_255D7BA6C();
  sub_255D7BAA0((unint64_t *)&qword_269F34FD0, (void (*)(uint64_t))sub_255D7B90C);
  sub_255EEE4B0();
  sub_255D7BAE8();
  uint64_t v6 = sub_255EEE4A0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v6;
}

void sub_255D7B8A4()
{
  if (!qword_269F34F98)
  {
    sub_255D7B90C();
    unint64_t v0 = sub_255EEE450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F34F98);
    }
  }
}

void sub_255D7B90C()
{
  if (!qword_269F34FA0)
  {
    sub_255D7ECB8(255, (unint64_t *)&qword_269F34FA8, (unint64_t *)&qword_269F34FB0);
    sub_255D7B988();
    unint64_t State = type metadata accessor for LoadState();
    if (!v1) {
      atomic_store(State, (unint64_t *)&qword_269F34FA0);
    }
  }
}

unint64_t sub_255D7B988()
{
  unint64_t result = qword_269F34FB8;
  if (!qword_269F34FB8)
  {
    sub_255D7ECB8(255, (unint64_t *)&qword_269F34FA8, (unint64_t *)&qword_269F34FB0);
    sub_255D7BA10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34FB8);
  }
  return result;
}

unint64_t sub_255D7BA10()
{
  unint64_t result = qword_269F34FC0;
  if (!qword_269F34FC0)
  {
    sub_255D7ED10(255, (unint64_t *)&qword_269F34FB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34FC0);
  }
  return result;
}

uint64_t sub_255D7BA6C()
{
  return sub_255D7BAA0(&qword_269F34FC8, (void (*)(uint64_t))sub_255D7B8A4);
}

uint64_t sub_255D7BAA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255D7BAE8()
{
  unint64_t result = qword_269F34FD8;
  if (!qword_269F34FD8)
  {
    sub_255D7E86C(255, &qword_269F34F90, (uint64_t (*)(uint64_t))sub_255D7B8A4, sub_255D7BA6C, MEMORY[0x263EFDAF8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34FD8);
  }
  return result;
}

uint64_t HealthKitMedicalIDDataProvider.state.getter()
{
  return sub_255EEE430();
}

uint64_t HealthKitMedicalIDDataProvider.medicalIDFetchTask.getter()
{
  return swift_retain();
}

void *HealthKitMedicalIDDataProvider.__allocating_init(fetchMedicalIDDataFromStore:saveMedicalIDDataToStore:medicalIDUpdateNotificationPublishers:externalMedicalIDData:displayConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  swift_allocObject();
  v14 = sub_255D7E35C(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return v14;
}

void *HealthKitMedicalIDDataProvider.init(fetchMedicalIDDataFromStore:saveMedicalIDDataToStore:medicalIDUpdateNotificationPublishers:externalMedicalIDData:displayConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v9 = sub_255D7E35C(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t sub_255D7BCFC()
{
  v0[2] = sub_255EEFF70();
  v0[3] = sub_255EEFF60();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  void *v1 = v0;
  v1[1] = sub_255D7BDA8;
  return sub_255D7BF44();
}

uint64_t sub_255D7BDA8()
{
  swift_task_dealloc();
  uint64_t v1 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255D7BEE4, v1, v0);
}

uint64_t sub_255D7BEE4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255D7BF44()
{
  v1[6] = v0;
  v1[7] = *v0;
  sub_255EEFF70();
  v1[8] = sub_255EEFF60();
  uint64_t v3 = sub_255EEFF20();
  v1[9] = v3;
  v1[10] = v2;
  return MEMORY[0x270FA2498](sub_255D7C004, v3, v2);
}

uint64_t sub_255D7C004()
{
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(*(void *)(v0 + 48) + 32) + **(int **)(*(void *)(v0 + 48) + 32));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7C0D0;
  return v3();
}

uint64_t sub_255D7C0D0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[10];
    uint64_t v7 = sub_255D7C444;
  }
  else
  {
    v4[13] = a1;
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[10];
    uint64_t v7 = sub_255D7C1F8;
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t sub_255D7C1F8()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v0[6];
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = v1;
  id v4 = v1;

  v0[5] = v1;
  sub_255EEE440();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_255D7C2BC;
  return sub_255D7C9D0();
}

uint64_t sub_255D7C2BC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return MEMORY[0x270FA2498](sub_255D7C3DC, v3, v2);
}

uint64_t sub_255D7C3DC()
{
  uint64_t v1 = *(void **)(v0 + 104);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_255D7C444()
{
  uint64_t v19 = v0;
  swift_release();
  if (qword_269F34C50 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = sub_255EEE3D0();
  __swift_project_value_buffer(v2, (uint64_t)qword_269F3FE80);
  id v3 = v1;
  id v4 = v1;
  uint64_t v5 = sub_255EEE3B0();
  os_log_type_t v6 = sub_255EF00C0();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = (void *)v0[12];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = v11;
    *(_DWORD *)uint64_t v9 = 136315650;
    uint64_t v12 = sub_255EF05E0();
    v0[2] = sub_255DB0024(v12, v13, &v18);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v0[3] = sub_255DB0024(0xD000000000000016, 0x8000000255EF8E40, &v18);
    sub_255EF0200();
    *(_WORD *)(v9 + 22) = 2112;
    id v14 = v8;
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    sub_255EF0200();
    *uint64_t v10 = v15;

    _os_log_impl(&dword_255D76000, v5, v6, "[%s][%s]: Could not refresh medical id. Store error: %@", (uint8_t *)v9, 0x20u);
    sub_255D7ECB8(0, (unint64_t *)&qword_269F35040, &qword_269F35048);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v11, -1, -1);
    MEMORY[0x25A29C8A0](v9, -1, -1);
  }
  else
  {
  }
  v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_255D7C734(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_255D7E86C(0, &qword_269F34FF8, (uint64_t (*)(uint64_t))sub_255D7E8EC, sub_255D7E958, MEMORY[0x263EFDC90]);
  v13[0] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)v13 - v6;
  v13[1] = a1;
  sub_255D7E8EC();
  sub_255D7E65C(0, &qword_269F35010, (uint64_t (*)(uint64_t))sub_255D7E8EC, MEMORY[0x263F8D488]);
  sub_255D7E958();
  sub_255D7E98C();
  swift_bridgeObjectRetain();
  sub_255EEE3E0();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v3;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_255D7EA84;
  *(void *)(v10 + 24) = v9;
  sub_255D7EAEC();
  uint64_t v11 = v13[0];
  sub_255EEE4C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v11);
  swift_beginAccess();
  sub_255EEE400();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_255D7C9D0()
{
  v1[9] = v0;
  v1[10] = *v0;
  sub_255EEFF70();
  v1[11] = sub_255EEFF60();
  uint64_t v3 = sub_255EEFF20();
  v1[12] = v3;
  v1[13] = v2;
  return MEMORY[0x270FA2498](sub_255D7CA90, v3, v2);
}

uint64_t sub_255D7CA90()
{
  v22 = v0;
  id v1 = objc_msgSend(*(id *)(v0[9] + 88), sel_entryPoint);
  uint64_t v2 = v0[9];
  if ((((unint64_t)v1 - 1) & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    uint64_t v3 = *(void **)(v2 + 72);
    v0[14] = v3;
    if (v3)
    {
      uint64_t v4 = *(void **)(v2 + 64);
      id v5 = v4;
      id v6 = v3;
      LOBYTE(v4) = sub_255D7D3B0(v4);

      if (v4)
      {
        if (qword_269F34C50 != -1) {
          swift_once();
        }
        uint64_t v7 = sub_255EEE3D0();
        v0[15] = __swift_project_value_buffer(v7, (uint64_t)qword_269F3FE80);
        uint64_t v8 = sub_255EEE3B0();
        os_log_type_t v9 = sub_255EF00B0();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = swift_slowAlloc();
          uint64_t v19 = swift_slowAlloc();
          uint64_t v21 = v19;
          *(_DWORD *)uint64_t v10 = 136315394;
          uint64_t v11 = sub_255EF05E0();
          v0[7] = sub_255DB0024(v11, v12, &v21);
          sub_255EF0200();
          swift_bridgeObjectRelease();
          *(_WORD *)(v10 + 12) = 2080;
          v0[8] = sub_255DB0024(0xD00000000000002BLL, 0x8000000255EF8E60, &v21);
          sub_255EF0200();
          _os_log_impl(&dword_255D76000, v8, v9, "[%s][%s]: Saving external medical id data", (uint8_t *)v10, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25A29C8A0](v19, -1, -1);
          MEMORY[0x25A29C8A0](v10, -1, -1);
        }

        uint64_t v13 = v0[9];
        id v14 = *(void **)(v2 + 72);
        *(void *)(v2 + 72) = 0;

        uint64_t v20 = (uint64_t (*)(id))(*(void *)(v13 + 48) + **(int **)(v13 + 48));
        uint64_t v15 = (void *)swift_task_alloc();
        v0[16] = v15;
        *uint64_t v15 = v0;
        v15[1] = sub_255D7CDD4;
        return v20(v6);
      }

      uint64_t v2 = v0[9];
    }
  }
  swift_release();
  unint64_t v17 = *(void **)(v2 + 72);
  *(void *)(v2 + 72) = 0;

  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_255D7CDD4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 96);
  if (v0) {
    id v5 = sub_255D7D0E4;
  }
  else {
    id v5 = sub_255D7CF10;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_255D7CF10()
{
  unint64_t v12 = v0;
  swift_release();
  id v1 = sub_255EEE3B0();
  os_log_type_t v2 = sub_255EF00B0();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (void *)v0[14];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v6 = sub_255EF05E0();
    v0[5] = sub_255DB0024(v6, v7, &v11);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v0[6] = sub_255DB0024(0xD00000000000002BLL, 0x8000000255EF8E60, &v11);
    sub_255EF0200();
    _os_log_impl(&dword_255D76000, v1, v2, "[%s][%s]: Saved external medical id data", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v5, -1, -1);
    MEMORY[0x25A29C8A0](v4, -1, -1);
  }
  else
  {
    uint64_t v8 = (void *)v0[14];
  }
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_255D7D0E4()
{
  uint64_t v19 = v0;
  id v1 = *(void **)(v0 + 136);
  swift_release();
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_255EEE3B0();
  os_log_type_t v5 = sub_255EF00C0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 136);
    unint64_t v17 = *(void **)(v0 + 112);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v9 = sub_255EF05E0();
    *(void *)(v0 + 16) = sub_255DB0024(v9, v10, &v18);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v0 + 24) = sub_255DB0024(0xD00000000000002BLL, 0x8000000255EF8E60, &v18);
    sub_255EF0200();
    *(_WORD *)(v7 + 22) = 2112;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v12;
    sub_255EF0200();
    *uint64_t v8 = v12;

    _os_log_impl(&dword_255D76000, v4, v5, "[%s][%s]: Could not save external medical id data due to store error: %@", (uint8_t *)v7, 0x20u);
    sub_255D7ECB8(0, (unint64_t *)&qword_269F35040, &qword_269F35048);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v16, -1, -1);
    MEMORY[0x25A29C8A0](v7, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 136);
  }
  id v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

BOOL MIUIEntryPoint.isEditingScreen.getter(uint64_t a1)
{
  return ((a1 - 1) & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

uint64_t sub_255D7D3B0(void *a1)
{
  if (!a1)
  {
    char v6 = 1;
    return v6 & 1;
  }
  sub_255D7ED10(0, (unint64_t *)&qword_269F34FB0);
  id v3 = v1;
  id v4 = a1;
  char v5 = sub_255EF01D0();

  if ((v5 & 1) == 0)
  {
    uint64_t v7 = sub_255EEE100();
    uint64_t v8 = *(void **)(v7 - 8);
    uint64_t v9 = v8[8];
    MEMORY[0x270FA5388](v7);
    unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    v41 = (char *)v34 - v10;
    id v42 = v4;
    id v11 = &off_2653EE000;
    id v12 = objc_msgSend(v3, sel_dateSaved);
    sub_255D7E65C(0, &qword_269F35058, MEMORY[0x270FA9270], MEMORY[0x263F8D8F0]);
    uint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
    uint64_t v15 = MEMORY[0x270FA5388](v13 - 8);
    unint64_t v17 = (char *)v34 - v16;
    if (v12)
    {
      v40 = v34;
      MEMORY[0x270FA5388](v15);
      sub_255EEE0D0();

      v38 = (void (*)(char *, char *, uint64_t))v8[4];
      v38(v17, (char *)v34 - v10, v7);
      uint64_t v18 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v8[7];
      v18(v17, 0, 1, v7);
      v39 = v8;
      uint64_t v19 = (unsigned int (*)(char *, uint64_t, uint64_t))v8[6];
      if (v19(v17, 1, v7) != 1)
      {
        v35 = v19;
        uint64_t v23 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v41, v17, v7);
        v37 = v34;
        MEMORY[0x270FA5388](v23);
        unint64_t v24 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v25 = (char *)v34 - v24;
        id v26 = objc_msgSend(v42, sel_dateSaved);
        uint64_t v27 = MEMORY[0x270FA5388](v26);
        uint64_t v28 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v36 = v29;
        if (v27)
        {
          v34[1] = v34;
          MEMORY[0x270FA5388](v27);
          sub_255EEE0D0();

          v38(v28, (char *)v34 - v24, v7);
          v18(v28, 0, 1, v7);
          if (v35(v28, 1, v7) != 1)
          {
            v38((char *)v34 - v24, v28, v7);
            sub_255D7EDCC();
            uint64_t v30 = v41;
            char v31 = sub_255EEFCA0();

            char v6 = v31 ^ 1;
            v32 = (void (*)(char *, uint64_t))v39[1];
            v32(v25, v7);
            v32(v30, v7);
            return v6 & 1;
          }
        }
        else
        {
          v18(v28, 1, 1, v7);
        }

        ((void (*)(char *, uint64_t))v39[1])(v41, v7);
        sub_255D7ED4C((uint64_t)v28);
        char v6 = 1;
        return v6 & 1;
      }
      uint64_t v8 = v39;
      id v11 = &off_2653EE000;
    }
    else
    {
      uint64_t v18 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v8[7];
      v18(v17, 1, 1, v7);
    }
    sub_255D7ED4C((uint64_t)v17);
    id v20 = v42;
    id v21 = [v42 (SEL)v11[233]];
    uint64_t v22 = MEMORY[0x270FA5388](v21);
    if (v22)
    {
      MEMORY[0x270FA5388](v22);
      sub_255EEE0D0();

      ((void (*)(char *, char *, uint64_t))v8[4])((char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      v18((char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v7);
      char v6 = 0;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v8[6])((char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v7) != 1)goto LABEL_17; {
    }
      }
    else
    {

      v18((char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v7);
    }
    char v6 = 1;
LABEL_17:
    sub_255D7ED4C((uint64_t)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    return v6 & 1;
  }
  char v6 = 0;
  return v6 & 1;
}

uint64_t sub_255D7D9BC()
{
  sub_255D7E65C(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  id v2 = (char *)&v24 - v1;
  uint64_t v3 = sub_255EEE3D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v3, (uint64_t)qword_269F3FE80);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
    unint64_t v10 = sub_255EEE3B0();
    os_log_type_t v11 = sub_255EF00B0();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      id v26 = v2;
      uint64_t v13 = v12;
      uint64_t v25 = swift_slowAlloc();
      v28[0] = v25;
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v14 = sub_255EF05E0();
      uint64_t v27 = sub_255DB0024(v14, v15, v28);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v27 = sub_255DB0024(0x6269726373627573, 0xEE00293A6F742865, v28);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v10, v11, "[%s][%s]: received a medical id update notification. Refreshing...", (uint8_t *)v13, 0x16u);
      uint64_t v16 = v25;
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v16, -1, -1);
      uint64_t v17 = v13;
      id v2 = v26;
      MEMORY[0x25A29C8A0](v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v18 = sub_255EEFFA0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v2, 1, 1, v18);
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    sub_255EEFF70();
    swift_retain();
    uint64_t v20 = sub_255EEFF60();
    id v21 = (void *)swift_allocObject();
    uint64_t v22 = MEMORY[0x263F8F500];
    v21[2] = v20;
    v21[3] = v22;
    v21[4] = v19;
    swift_release();
    uint64_t v23 = sub_255E09D10((uint64_t)v2, (uint64_t)&unk_269F35030, (uint64_t)v21);
    swift_beginAccess();
    *(void *)(v8 + 80) = v23;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_255D7DDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_255EEFF70();
  v4[6] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](sub_255D7DE74, v6, v5);
}

uint64_t sub_255D7DE74()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    id v2 = (void *)swift_task_alloc();
    v0[10] = v2;
    *id v2 = v0;
    v2[1] = sub_255D7DF68;
    return sub_255D7BF44();
  }
  else
  {
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_255D7DF68()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return MEMORY[0x270FA2498](sub_255D7E088, v3, v2);
}

uint64_t sub_255D7E088()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id *HealthKitMedicalIDDataProvider.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v0;
}

uint64_t HealthKitMedicalIDDataProvider.__deallocating_deinit()
{
  HealthKitMedicalIDDataProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t _s11MedicalIDUI09HealthKitA14IDDataProviderC37medicalIDUpdateNotificationPublishersSay7Combine12AnyPublisherVyyts5NeverOGGvgZ_0()
{
  uint64_t result = *MEMORY[0x263F0AD90];
  if (*MEMORY[0x263F0AD90])
  {
    sub_255EEFE10();
    sub_255EEE370();
    swift_allocObject();
    sub_255EEE360();
    uint64_t result = *MEMORY[0x263F0AD98];
    if (*MEMORY[0x263F0AD98])
    {
      sub_255EEFE10();
      swift_allocObject();
      sub_255EEE360();
      uint64_t v1 = MEMORY[0x263F8EE78];
      sub_255EF0350();
      sub_255D7BAA0(&qword_269F35068, MEMORY[0x263F44A18]);
      sub_255EEE4A0();
      sub_255EF0320();
      sub_255EF0360();
      sub_255EF0370();
      sub_255EF0330();
      sub_255EEE4A0();
      sub_255EF0320();
      sub_255EF0360();
      sub_255EF0370();
      sub_255EF0330();
      swift_release();
      swift_release();
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_255D7E35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v8 = v7;
  sub_255D7E65C(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v31 = 1;
  sub_255D7B8A4();
  swift_allocObject();
  uint64_t v19 = sub_255EEE460();
  uint64_t v20 = MEMORY[0x263F8EE88];
  v7[2] = v19;
  v7[3] = v20;
  v7[6] = a3;
  v7[7] = a4;
  v7[4] = a1;
  v7[5] = a2;
  v7[10] = 0;
  v7[11] = a7;
  v7[8] = 0;
  v7[9] = a6;
  swift_retain();
  swift_retain();
  id v21 = a7;
  id v22 = a6;
  if (a6)
  {
    uint64_t v31 = (uint64_t)a6;
    id v23 = v22;
    sub_255EEE440();
  }
  uint64_t v24 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v18, 1, 1, v24);
  sub_255EEFF70();
  swift_retain();
  uint64_t v25 = sub_255EEFF60();
  id v26 = (void *)swift_allocObject();
  uint64_t v27 = MEMORY[0x263F8F500];
  v26[2] = v25;
  v26[3] = v27;
  v26[4] = v8;
  uint64_t v28 = sub_255E09D10((uint64_t)v18, (uint64_t)&unk_269F34FF0, (uint64_t)v26);
  swift_beginAccess();
  v8[10] = v28;
  swift_release();
  sub_255D7C734(a5);
  return v8;
}

uint64_t sub_255D7E57C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_255EEE430();
  *a1 = v3;
  return result;
}

uint64_t sub_255D7E5BC(id *a1)
{
  return sub_255EEE440();
}

uint64_t type metadata accessor for HealthKitMedicalIDDataProvider()
{
  return self;
}

uint64_t method lookup function for HealthKitMedicalIDDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HealthKitMedicalIDDataProvider);
}

uint64_t dispatch thunk of HealthKitMedicalIDDataProvider.__allocating_init(fetchMedicalIDDataFromStore:saveMedicalIDDataToStore:medicalIDUpdateNotificationPublishers:externalMedicalIDData:displayConfiguration:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

id sub_255D7E64C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void sub_255D7E65C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255D7E6C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255D7BCFC();
}

uint64_t sub_255D7E778()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_255D7E86C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255D7E8EC()
{
  if (!qword_269F35000)
  {
    unint64_t v0 = sub_255EEE3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35000);
    }
  }
}

uint64_t sub_255D7E958()
{
  return sub_255D7BAA0(&qword_269F35008, (void (*)(uint64_t))sub_255D7E8EC);
}

unint64_t sub_255D7E98C()
{
  unint64_t result = qword_269F35018;
  if (!qword_269F35018)
  {
    sub_255D7E65C(255, &qword_269F35010, (uint64_t (*)(uint64_t))sub_255D7E8EC, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35018);
  }
  return result;
}

uint64_t sub_255D7EA14()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_255D7EA4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255D7EA84()
{
  return sub_255D7D9BC();
}

uint64_t sub_255D7EA8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255D7EAC4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_255D7EAEC()
{
  unint64_t result = qword_269F35020;
  if (!qword_269F35020)
  {
    sub_255D7E86C(255, &qword_269F34FF8, (uint64_t (*)(uint64_t))sub_255D7E8EC, sub_255D7E958, MEMORY[0x263EFDC90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_269F35020);
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255D7EC04(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_255D7EE18;
  return sub_255D7DDDC(a1, v4, v5, v6);
}

void sub_255D7ECB8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_255D7ED10(255, a3);
    unint64_t v4 = sub_255EF01E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255D7ED10(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_255D7ED4C(uint64_t a1)
{
  sub_255D7E65C(0, &qword_269F35058, MEMORY[0x270FA9270], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_255D7EDCC()
{
  unint64_t result = qword_269F35060;
  if (!qword_269F35060)
  {
    sub_255EEE100();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35060);
  }
  return result;
}

void sub_255D7EE1C()
{
  id v0 = objc_msgSend(self, sel_sharedBehavior);
  if (v0)
  {
    uint64_t v1 = v0;
    unsigned int v2 = objc_msgSend(v0, sel_isAppleWatch);

    sub_255EF02D0();
    swift_bridgeObjectRelease();
    sub_255EEFE00();
    uint64_t v3 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
    unint64_t v4 = (void *)sub_255EEFD50();
    sub_255D7EFC4();
    uint64_t v5 = (void *)sub_255EEFE90();
    BOOL v6 = v2 == 0;
    if (v2) {
      uint64_t v7 = 1109271;
    }
    else {
      uint64_t v7 = 616513;
    }
    if (v6) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 3;
    }
    id v9 = objc_msgSend(self, sel_hk_tapToHealthRadarURLForComponent_title_description_classification_reproducibility_keywords_autoDiagnostics_attachments_collaborationContactHandles_, v7, v3, v4, 5, 0, v5, v8, 0, 0);

    sub_255EEE010();
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_255D7EFC4()
{
  unint64_t result = qword_269F35070;
  if (!qword_269F35070)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F35070);
  }
  return result;
}

uint64_t MedicalIDListProperty.baseIdentifier.getter()
{
  if (*v0)
  {
    if (*v0 == 1)
    {
      uint64_t v1 = 0x65696772656C6C41;
      sub_255D7F1F0();
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_255EF1E20;
      *(void *)(v2 + 32) = 0x496C61636964654DLL;
      *(void *)(v2 + 40) = 0xE900000000000044;
      *(void *)(v2 + 48) = 0x65696772656C6C41;
      *(void *)(v2 + 56) = 0xE900000000000073;
    }
    else
    {
      uint64_t v1 = 0xD000000000000011;
      sub_255D7F1F0();
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_255EF1E20;
      *(void *)(v6 + 32) = 0x496C61636964654DLL;
      *(void *)(v6 + 40) = 0xE900000000000044;
      *(void *)(v6 + 48) = 0xD000000000000011;
      *(void *)(v6 + 56) = 0x8000000255EF8F00;
    }
    uint64_t v3 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    unint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
  }
  else
  {
    uint64_t v1 = 0x697461636964654DLL;
    sub_255D7F1F0();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_255EF1E20;
    *(void *)(v5 + 32) = 0x496C61636964654DLL;
    *(void *)(v5 + 40) = 0xE900000000000044;
    *(void *)(v5 + 48) = 0x697461636964654DLL;
    *(void *)(v5 + 56) = 0xEB00000000736E6FLL;
    uint64_t v3 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    unint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
  }
  id v7 = v4;

  if (v7)
  {
    uint64_t v1 = sub_255EEFD90();
  }
  return v1;
}

void sub_255D7F1F0()
{
  if (!qword_269F37DA0)
  {
    unint64_t v0 = sub_255EF0490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37DA0);
    }
  }
}

BOOL static MedicalIDListProperty.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MedicalIDListProperty.hash(into:)()
{
  return sub_255EF0550();
}

uint64_t MedicalIDListProperty.hashValue.getter()
{
  return sub_255EF0580();
}

BOOL sub_255D7F2D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_255D7F2E4()
{
  return sub_255EF0580();
}

uint64_t sub_255D7F32C()
{
  return sub_255EF0550();
}

uint64_t sub_255D7F358()
{
  return sub_255EF0580();
}

uint64_t sub_255D7F39C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

unint64_t sub_255D7F3B0()
{
  unint64_t result = qword_269F35078;
  if (!qword_269F35078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35078);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDListProperty(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MedicalIDListProperty(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255D7F570);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_255D7F598(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_255D7F5A0(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDListProperty()
{
  return &type metadata for MedicalIDListProperty;
}

uint64_t sub_255D7F5B8@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_255D7FD68();
  sub_255EEE2D0();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  swift_beginAccess();
  return sub_255D7FE80(v3, a1);
}

uint64_t sub_255D7F654@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255D7FD68();
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  swift_beginAccess();
  return sub_255D7FE80(v4, a2);
}

uint64_t sub_255D7F6F0(uint64_t a1, uint64_t *a2)
{
  sub_255D7FCEC();
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255D7FE80(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  unint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_255D7FD68();
  sub_255EEE2C0();
  swift_release();
  return sub_255D7FDC0((uint64_t)v6);
}

uint64_t sub_255D7F7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  swift_beginAccess();
  sub_255D7FE1C(a2, v3);
  return swift_endAccess();
}

uint64_t sub_255D7F854(void *a1)
{
  sub_255D7FCEC();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (void *)((char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    id v7 = objc_msgSend(a1, sel_firstName);
    v21[0] = sub_255EEFD90();
    uint64_t v9 = v8;

    id v10 = objc_msgSend(a1, sel_lastName);
    uint64_t v11 = sub_255EEFD90();
    uint64_t v13 = v12;

    id v14 = objc_msgSend(a1, sel_dateOfBirthComponents);
    unint64_t v15 = (int *)type metadata accessor for HealthDemographicData();
    sub_255EEDEC0();

    id v16 = objc_msgSend(a1, sel_heightQuantity);
    id v17 = objc_msgSend(a1, sel_weightQuantity);
    id v18 = objc_msgSend(a1, sel_bloodTypeObject);
    id v19 = objc_msgSend(v18, sel_bloodType);

    *uint64_t v4 = v21[0];
    v4[1] = v9;
    v4[2] = v11;
    v4[3] = v13;
    *(void *)((char *)v4 + v15[7]) = v16;
    *(void *)((char *)v4 + v15[8]) = v17;
    *(void *)((char *)v4 + v15[9]) = v19;
    (*(void (**)(void *, void, uint64_t, int *))(*((void *)v15 - 1) + 56))(v4, 0, 1, v15);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    v21[-2] = v6;
    v21[-1] = v4;
    v21[2] = v6;
    sub_255D7FD68();
    sub_255EEE2C0();
    swift_release();
    sub_255D7FDC0((uint64_t)v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_255D7FB04()
{
  sub_255D7FDC0(v0 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data);
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255D7FBBC()
{
  return type metadata accessor for HealthDemographicDataProvider();
}

uint64_t type metadata accessor for HealthDemographicDataProvider()
{
  uint64_t result = qword_269F35090;
  if (!qword_269F35090) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255D7FC10()
{
  sub_255D7FCEC();
  if (v0 <= 0x3F)
  {
    sub_255EEE310();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_255D7FCEC()
{
  if (!qword_269F350A0)
  {
    type metadata accessor for HealthDemographicData();
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F350A0);
    }
  }
}

uint64_t sub_255D7FD4C()
{
  return sub_255D7F7E8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_255D7FD68()
{
  unint64_t result = qword_269F350A8;
  if (!qword_269F350A8)
  {
    type metadata accessor for HealthDemographicDataProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F350A8);
  }
  return result;
}

uint64_t sub_255D7FDC0(uint64_t a1)
{
  sub_255D7FCEC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255D7FE1C(uint64_t a1, uint64_t a2)
{
  sub_255D7FCEC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D7FE80(uint64_t a1, uint64_t a2)
{
  sub_255D7FCEC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D7FEE4()
{
  return sub_255D7FD4C();
}

BOOL static PregnancyStatusLabelState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PregnancyStatusLabelState.hash(into:)()
{
  return sub_255EF0550();
}

uint64_t PregnancyStatusLabelState.hashValue.getter()
{
  return sub_255EF0580();
}

unint64_t sub_255D7FF88()
{
  unint64_t result = qword_269F350B0;
  if (!qword_269F350B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F350B0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PregnancyStatusLabelState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255D800A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PregnancyStatusLabelState()
{
  return &type metadata for PregnancyStatusLabelState;
}

void *sub_255D800E0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    uint64_t v25 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v84 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    uint64_t v7 = v84[5];
    v86 = a1;
    uint64_t v8 = (void *)((char *)a1 + v7);
    v78 = a2;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7);
    uint64_t v11 = *((void *)v9 + 1);
    *uint64_t v8 = v10;
    v8[1] = v11;
    uint64_t v12 = *((void *)v9 + 3);
    void v8[2] = *((void *)v9 + 2);
    v8[3] = v12;
    uint64_t v13 = *((void *)v9 + 5);
    v8[4] = *((void *)v9 + 4);
    v8[5] = v13;
    uint64_t v14 = *((void *)v9 + 7);
    v8[6] = *((void *)v9 + 6);
    v8[7] = v14;
    uint64_t v15 = *((void *)v9 + 9);
    v8[8] = *((void *)v9 + 8);
    v8[9] = v15;
    uint64_t v16 = *((void *)v9 + 11);
    v8[10] = *((void *)v9 + 10);
    v8[11] = v16;
    v80 = (void *)*((void *)v9 + 12);
    v81 = (void *)*((void *)v9 + 13);
    v8[12] = v80;
    v8[13] = v81;
    uint64_t v17 = type metadata accessor for MedicalIDData();
    uint64_t v18 = *(int *)(v17 + 52);
    __dst = (char *)v8 + v18;
    v83 = (int *)v17;
    v79 = &v9[v18];
    uint64_t v19 = sub_255EEE100();
    uint64_t v87 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v80;
    id v22 = v81;
    if (v20(v79, 1, v19))
    {
      sub_255D80868(0);
      memcpy(__dst, v79, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(__dst, v79, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v26 = v83[14];
    uint64_t v27 = (char *)v8 + v26;
    uint64_t v28 = &v9[v26];
    if (v20(&v9[v26], 1, v19))
    {
      sub_255D80868(0);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v27, v28, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v27, 0, 1, v19);
    }
    uint64_t v30 = v83[15];
    uint64_t v31 = (void *)((char *)v8 + v30);
    v32 = &v9[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *uint64_t v31 = *(void *)v32;
    v31[1] = v33;
    uint64_t v34 = v83[16];
    v35 = (void *)((char *)v8 + v34);
    uint64_t v36 = &v9[v34];
    uint64_t v37 = *((void *)v36 + 1);
    void *v35 = *(void *)v36;
    v35[1] = v37;
    *((unsigned char *)v8 + v83[17]) = v9[v83[17]];
    *((unsigned char *)v8 + v83[18]) = v9[v83[18]];
    uint64_t v38 = v83[19];
    v39 = (char *)v8 + v38;
    v40 = (uint64_t *)&v9[v38];
    unint64_t v41 = *(void *)&v9[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
    else
    {
      uint64_t v42 = *v40;
      sub_255D80890(*v40, v41);
      *(void *)v39 = v42;
      *((void *)v39 + 1) = v41;
    }
    uint64_t v43 = v83[20];
    v44 = (char *)v8 + v43;
    v45 = &v9[v43];
    uint64_t v46 = sub_255EEDF60();
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_255D85560(0, &qword_269F350B8, MEMORY[0x270FA81D0], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    uint64_t v49 = v83[21];
    v50 = *(void **)&v9[v49];
    *(void *)((char *)v8 + v49) = v50;
    uint64_t v51 = v83[22];
    v52 = (char *)v8 + v51;
    v53 = &v9[v51];
    id v54 = v50;
    if (v20(v53, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v52, v53, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v52, v53, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v52, 0, 1, v19);
    }
    uint64_t v25 = v86;
    uint64_t v56 = v84[6];
    v57 = (char *)v86 + v56;
    v58 = (char *)v78 + v56;
    uint64_t v59 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
    uint64_t v60 = v84[7];
    v61 = (char *)v86 + v60;
    v62 = (char *)v78 + v60;
    uint64_t v63 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
    *(void *)((char *)v86 + v84[8]) = *(void *)((char *)v78 + v84[8]);
    uint64_t v64 = v84[9];
    v65 = (char *)v86 + v64;
    v66 = (char *)v78 + v64;
    swift_retain();
    if (v20(v66, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v65, v66, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v65, 0, 1, v19);
    }
    uint64_t v68 = *(int *)(a3 + 24);
    *((unsigned char *)v86 + *(int *)(a3 + 20)) = *((unsigned char *)v78 + *(int *)(a3 + 20));
    v69 = (void *)((char *)v86 + v68);
    v70 = (char *)v78 + v68;
    uint64_t v71 = *(void *)((char *)v78 + v68 + 8);
    void *v69 = *(void *)((char *)v78 + v68);
    v69[1] = v71;
    sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    uint64_t v73 = *(int *)(v72 + 32);
    v74 = (char *)v69 + v73;
    v75 = &v70[v73];
    swift_retain();
    swift_retain();
    if (v20(v75, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v74, v75, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v74, 0, 1, v19);
    }
  }
  return v25;
}

void sub_255D80868(uint64_t a1)
{
}

uint64_t sub_255D80890(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_255D808E8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  int v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  int v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v6, v7);
  }
  uint64_t v9 = v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = v4 + v5[22];
  if (!v8(v15, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v15, v7);
  }
  uint64_t v16 = a1 + v3[6];
  uint64_t v17 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = a1 + v3[7];
  uint64_t v19 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_release();
  uint64_t v20 = a1 + v3[9];
  if (!v8(v20, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v7);
  }
  uint64_t v21 = a1 + *(int *)(a2 + 24);
  swift_release();
  swift_release();
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v23 = v21 + *(int *)(v22 + 32);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v23, 1, v7);
  if (!result)
  {
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
    return v25(v23, v7);
  }
  return result;
}

uint64_t sub_255D80D04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

void *sub_255D80D5C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v80 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = v80[5];
  v82 = a2;
  v83 = a1;
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6);
  uint64_t v10 = *((void *)v8 + 1);
  *uint64_t v7 = v9;
  v7[1] = v10;
  uint64_t v11 = *((void *)v8 + 3);
  v7[2] = *((void *)v8 + 2);
  v7[3] = v11;
  uint64_t v12 = *((void *)v8 + 5);
  v7[4] = *((void *)v8 + 4);
  v7[5] = v12;
  uint64_t v13 = *((void *)v8 + 7);
  v7[6] = *((void *)v8 + 6);
  v7[7] = v13;
  uint64_t v14 = *((void *)v8 + 9);
  v7[8] = *((void *)v8 + 8);
  v7[9] = v14;
  uint64_t v15 = *((void *)v8 + 11);
  v7[10] = *((void *)v8 + 10);
  v7[11] = v15;
  uint64_t v76 = (void *)*((void *)v8 + 12);
  v77 = (void *)*((void *)v8 + 13);
  v7[12] = v76;
  v7[13] = v77;
  uint64_t v16 = type metadata accessor for MedicalIDData();
  uint64_t v17 = *(int *)(v16 + 52);
  __dst = (char *)v7 + v17;
  v79 = (int *)v16;
  v75 = &v8[v17];
  uint64_t v18 = sub_255EEE100();
  uint64_t v84 = *(void *)(v18 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = v76;
  id v21 = v77;
  if (v19(v75, 1, v18))
  {
    sub_255D80868(0);
    memcpy(__dst, v75, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dst, v75, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v18);
  }
  uint64_t v23 = v79[14];
  uint64_t v24 = (char *)v7 + v23;
  uint64_t v25 = &v8[v23];
  if (v19(&v8[v23], 1, v18))
  {
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v24, v25, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v24, 0, 1, v18);
  }
  uint64_t v27 = v79[15];
  uint64_t v28 = (void *)((char *)v7 + v27);
  uint64_t v29 = &v8[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *uint64_t v28 = *(void *)v29;
  v28[1] = v30;
  uint64_t v31 = v79[16];
  v32 = (void *)((char *)v7 + v31);
  uint64_t v33 = &v8[v31];
  uint64_t v34 = *((void *)v33 + 1);
  void *v32 = *(void *)v33;
  v32[1] = v34;
  *((unsigned char *)v7 + v79[17]) = v8[v79[17]];
  *((unsigned char *)v7 + v79[18]) = v8[v79[18]];
  uint64_t v35 = v79[19];
  uint64_t v36 = (char *)v7 + v35;
  uint64_t v37 = (uint64_t *)&v8[v35];
  unint64_t v38 = *(void *)&v8[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *v37;
    sub_255D80890(*v37, v38);
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }
  uint64_t v40 = v79[20];
  unint64_t v41 = (char *)v7 + v40;
  uint64_t v42 = &v8[v40];
  uint64_t v43 = sub_255EEDF60();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_255D85560(0, &qword_269F350B8, MEMORY[0x270FA81D0], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v46 = v79[21];
  uint64_t v47 = *(void **)&v8[v46];
  *(void *)((char *)v7 + v46) = v47;
  uint64_t v48 = v79[22];
  uint64_t v49 = (char *)v7 + v48;
  v50 = &v8[v48];
  id v51 = v47;
  if (v19(v50, 1, v18))
  {
    sub_255D80868(0);
    memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v49, v50, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v49, 0, 1, v18);
  }
  uint64_t v53 = v80[6];
  id v54 = (char *)v83 + v53;
  uint64_t v55 = (char *)v82 + v53;
  uint64_t v56 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
  uint64_t v57 = v80[7];
  v58 = (char *)v83 + v57;
  uint64_t v59 = (char *)v82 + v57;
  uint64_t v60 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
  *(void *)((char *)v83 + v80[8]) = *(void *)((char *)v82 + v80[8]);
  uint64_t v61 = v80[9];
  v62 = (char *)v83 + v61;
  uint64_t v63 = (char *)v82 + v61;
  swift_retain();
  if (v19(v63, 1, v18))
  {
    sub_255D80868(0);
    memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v62, v63, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v62, 0, 1, v18);
  }
  uint64_t v65 = *(int *)(a3 + 24);
  *((unsigned char *)v83 + *(int *)(a3 + 20)) = *((unsigned char *)v82 + *(int *)(a3 + 20));
  v66 = (void *)((char *)v83 + v65);
  uint64_t v67 = (char *)v82 + v65;
  uint64_t v68 = *(void *)((char *)v82 + v65 + 8);
  void *v66 = *(void *)((char *)v82 + v65);
  v66[1] = v68;
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v70 = *(int *)(v69 + 32);
  uint64_t v71 = (char *)v66 + v70;
  uint64_t v72 = &v67[v70];
  swift_retain();
  swift_retain();
  if (v19(v72, 1, v18))
  {
    sub_255D80868(0);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v71, v72, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v71, 0, 1, v18);
  }
  return v83;
}

char *sub_255D81488(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v5 = v88[5];
  v92 = a1;
  uint64_t v6 = &a1[v5];
  uint64_t v7 = (void *)((char *)a2 + v5);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *((void *)v6 + 1) = *(void *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 2) = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 3) = v7[3];
  *((void *)v6 + 4) = v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 5) = v7[5];
  *((void *)v6 + 6) = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 7) = v7[7];
  *((void *)v6 + 8) = v7[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 9) = v7[9];
  *((void *)v6 + 10) = v7[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 11) = v7[11];
  uint64_t v8 = (void *)*((void *)v6 + 12);
  uint64_t v9 = (void *)v7[12];
  *((void *)v6 + 12) = v9;
  id v10 = v9;

  uint64_t v11 = (void *)*((void *)v6 + 13);
  uint64_t v12 = (void *)v7[13];
  *((void *)v6 + 13) = v12;
  id v13 = v12;

  uint64_t v14 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v15 = v14[13];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = (char *)v7 + v15;
  uint64_t v18 = sub_255EEE100();
  uint64_t v93 = *(void *)(v18 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 48);
  int v20 = v19(v16, 1, v18);
  v94 = v19;
  int v21 = v19(v17, 1, v18);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v16, v18);
LABEL_6:
    sub_255D80868(0);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v93 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v23 = v14[14];
  uint64_t v24 = &v6[v23];
  uint64_t v25 = (char *)v7 + v23;
  int v26 = v19(&v6[v23], 1, v18);
  int v27 = v19(v25, 1, v18);
  v91 = a2;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v24, v25, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v24, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v24, v18);
LABEL_12:
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v93 + 24))(v24, v25, v18);
LABEL_13:
  uint64_t v29 = v14[15];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = (void *)((char *)v7 + v29);
  *(void *)uint64_t v30 = *v31;
  *((void *)v30 + 1) = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v14[16];
  uint64_t v33 = &v6[v32];
  uint64_t v34 = (void *)((char *)v7 + v32);
  *(void *)uint64_t v33 = *v34;
  *((void *)v33 + 1) = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = *((unsigned char *)v7 + v14[17]);
  v6[v14[18]] = *((unsigned char *)v7 + v14[18]);
  uint64_t v35 = v14[19];
  uint64_t v36 = (uint64_t *)&v6[v35];
  uint64_t v37 = (void *)((char *)v7 + v35);
  unint64_t v38 = *(void *)((char *)v7 + v35 + 8);
  uint64_t v89 = v18;
  if (*(void *)&v6[v35 + 8] >> 60 == 15)
  {
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *v37;
      sub_255D80890(*v37, v38);
      *uint64_t v36 = v39;
      v36[1] = v38;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v38 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v36);
LABEL_18:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_20;
  }
  uint64_t v40 = *v37;
  sub_255D80890(*v37, v38);
  uint64_t v41 = *v36;
  unint64_t v42 = v36[1];
  *uint64_t v36 = v40;
  v36[1] = v38;
  sub_255D80D04(v41, v42);
LABEL_20:
  uint64_t v43 = v14[20];
  uint64_t v44 = &v6[v43];
  uint64_t v45 = (char *)v7 + v43;
  uint64_t v46 = sub_255EEDF60();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1, v46);
  int v50 = v48(v45, 1, v46);
  if (v49)
  {
    id v51 = v92;
    uint64_t v52 = v93;
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  id v51 = v92;
  uint64_t v52 = v93;
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
LABEL_25:
    sub_255D85560(0, &qword_269F350B8, MEMORY[0x270FA81D0], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v44, v45, v46);
LABEL_26:
  uint64_t v54 = v14[21];
  uint64_t v55 = *(void **)&v6[v54];
  uint64_t v56 = *(void **)((char *)v7 + v54);
  *(void *)&v6[v54] = v56;
  id v57 = v56;

  uint64_t v58 = v14[22];
  uint64_t v59 = &v6[v58];
  uint64_t v60 = (char *)v7 + v58;
  int v61 = v94(&v6[v58], 1, v89);
  int v62 = v94(v60, 1, v89);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v59, v60, v89);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v59, 0, 1, v89);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v59, v89);
LABEL_31:
    sub_255D80868(0);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v59, v60, v89);
LABEL_32:
  uint64_t v64 = v88[6];
  uint64_t v65 = &v51[v64];
  v66 = (char *)v91 + v64;
  uint64_t v67 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 24))(v65, v66, v67);
  uint64_t v68 = v88[7];
  uint64_t v69 = &v51[v68];
  uint64_t v70 = (char *)v91 + v68;
  uint64_t v71 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 24))(v69, v70, v71);
  *(void *)&v51[v88[8]] = *(void *)((char *)v91 + v88[8]);
  swift_retain();
  swift_release();
  uint64_t v72 = v88[9];
  uint64_t v73 = &v51[v72];
  v74 = (char *)v91 + v72;
  LODWORD(v70) = v94(&v51[v72], 1, v89);
  int v75 = v94(v74, 1, v89);
  if (v70)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v73, v74, v89);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v73, 0, 1, v89);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v73, v89);
LABEL_37:
    sub_255D80868(0);
    memcpy(v73, v74, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v73, v74, v89);
LABEL_38:
  v51[*(int *)(a3 + 20)] = *((unsigned char *)v91 + *(int *)(a3 + 20));
  uint64_t v77 = *(int *)(a3 + 24);
  v78 = &v51[v77];
  v79 = (char *)v91 + v77;
  *(void *)&v51[v77] = *(void *)((char *)v91 + v77);
  swift_retain();
  swift_release();
  *((void *)v78 + 1) = *((void *)v79 + 1);
  swift_retain();
  swift_release();
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v81 = *(int *)(v80 + 32);
  v82 = &v78[v81];
  v83 = &v79[v81];
  int v84 = v94(&v78[v81], 1, v89);
  int v85 = v94(v83, 1, v89);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v82, v83, v89);
      return v51;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v82, v89);
    goto LABEL_43;
  }
  if (v85)
  {
LABEL_43:
    sub_255D80868(0);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
    return v51;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v82, v83, v89);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v82, 0, 1, v89);
  return v51;
}

uint64_t sub_255D81EF8(uint64_t a1)
{
  return a1;
}

_OWORD *sub_255D81F4C(_OWORD *a1, char *a2, uint64_t a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v52 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v5 = v52[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = &a2[v5];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&a2[v5];
  *((void *)v6 + 2) = *(void *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((void *)v6 + 11) = *(void *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  uint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  id v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v55(v11, 1, v12))
  {
    sub_255D80868(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v54 = v13;
  if (v55(&v7[v15], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  int v20 = &v6[v19];
  int v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255D85560(0, &qword_269F350B8, MEMORY[0x270FA81D0], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  int v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v55(&v7[v25], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = v52[6];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = &a2[v29];
  uint64_t v32 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = v52[7];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = &a2[v33];
  uint64_t v36 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
  *(void *)((char *)a1 + v52[8]) = *(void *)&a2[v52[8]];
  uint64_t v37 = v52[9];
  unint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = &a2[v37];
  if (v55(&a2[v37], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v38, v39, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v38, 0, 1, v12);
  }
  uint64_t v41 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = a2[*(int *)(a3 + 20)];
  unint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = &a2[v41];
  uint64_t v44 = *(void *)&a2[v41];
  uint64_t v45 = *(void *)&a2[v41 + 8];
  *unint64_t v42 = v44;
  v42[1] = v45;
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v47 = *(int *)(v46 + 32);
  uint64_t v48 = (char *)v42 + v47;
  int v49 = &v43[v47];
  if (v55(&v43[v47], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v48, v49, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v48, 0, 1, v12);
  }
  return a1;
}

char *sub_255D82594(char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v90 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = v90[5];
  v94 = a1;
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = v8[2];
  swift_bridgeObjectRelease();
  uint64_t v10 = v8[4];
  *((void *)v7 + 3) = v8[3];
  *((void *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v8[6];
  *((void *)v7 + 5) = v8[5];
  *((void *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v8[8];
  *((void *)v7 + 7) = v8[7];
  *((void *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v8[10];
  *((void *)v7 + 9) = v8[9];
  *((void *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)*((void *)v7 + 12);
  uint64_t v15 = v8[12];
  *((void *)v7 + 11) = v8[11];
  *((void *)v7 + 12) = v15;

  uint64_t v16 = (void *)*((void *)v7 + 13);
  *((void *)v7 + 13) = v8[13];

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v7[v18];
  int v20 = (char *)v8 + v18;
  uint64_t v21 = sub_255EEE100();
  uint64_t v95 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  int v23 = v22(v19, 1, v21);
  v96 = v22;
  int v24 = v22(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v19, v21);
LABEL_6:
    sub_255D80868(0);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v26 = v17[14];
  int v27 = &v7[v26];
  uint64_t v28 = (char *)v8 + v26;
  int v29 = v22(&v7[v26], 1, v21);
  int v30 = v22(v28, 1, v21);
  uint64_t v93 = a2;
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v27, v28, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v27, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v27, v21);
LABEL_12:
    sub_255D80868(0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 40))(v27, v28, v21);
LABEL_13:
  uint64_t v32 = v17[15];
  uint64_t v33 = &v7[v32];
  uint64_t v34 = (void *)((char *)v8 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = v17[16];
  unint64_t v38 = &v7[v37];
  uint64_t v39 = (void *)((char *)v8 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)unint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v7[v17[17]] = *((unsigned char *)v8 + v17[17]);
  v7[v17[18]] = *((unsigned char *)v8 + v17[18]);
  uint64_t v42 = v17[19];
  uint64_t v43 = (uint64_t)&v7[v42];
  uint64_t v44 = (char *)v8 + v42;
  unint64_t v45 = *(void *)&v7[v42 + 8];
  uint64_t v91 = v21;
  if (v45 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    goto LABEL_18;
  }
  unint64_t v46 = *((void *)v44 + 1);
  if (v46 >> 60 == 15)
  {
    sub_255D81EF8(v43);
    goto LABEL_16;
  }
  uint64_t v47 = *(void *)v43;
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v43 + 8) = v46;
  sub_255D80D04(v47, v45);
LABEL_18:
  uint64_t v48 = v17[20];
  int v49 = &v7[v48];
  uint64_t v50 = (char *)v8 + v48;
  uint64_t v51 = sub_255EEDF60();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    uint64_t v56 = v94;
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v49, v50, v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v56 = v94;
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v49, v51);
LABEL_23:
    sub_255D85560(0, &qword_269F350B8, MEMORY[0x270FA81D0], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v49, v50, v51);
LABEL_24:
  uint64_t v58 = v17[21];
  uint64_t v59 = *(void **)&v7[v58];
  *(void *)&v7[v58] = *(void *)((char *)v8 + v58);

  uint64_t v60 = v17[22];
  int v61 = &v7[v60];
  int v62 = (char *)v8 + v60;
  int v63 = v96(&v7[v60], 1, v91);
  int v64 = v96(v62, 1, v91);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v61, v62, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v61, 0, 1, v91);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v61, v91);
LABEL_29:
    sub_255D80868(0);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 40))(v61, v62, v91);
LABEL_30:
  uint64_t v66 = v90[6];
  uint64_t v67 = &v56[v66];
  uint64_t v68 = (char *)v93 + v66;
  uint64_t v69 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 40))(v67, v68, v69);
  uint64_t v70 = v90[7];
  uint64_t v71 = &v56[v70];
  uint64_t v72 = (char *)v93 + v70;
  uint64_t v73 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 40))(v71, v72, v73);
  *(void *)&v56[v90[8]] = *(void *)((char *)v93 + v90[8]);
  swift_release();
  uint64_t v74 = v90[9];
  int v75 = &v56[v74];
  uint64_t v76 = (char *)v93 + v74;
  LODWORD(v72) = v96(&v56[v74], 1, v91);
  int v77 = v96(v76, 1, v91);
  if (v72)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v75, v76, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v75, 0, 1, v91);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v75, v91);
LABEL_35:
    sub_255D80868(0);
    memcpy(v75, v76, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 40))(v75, v76, v91);
LABEL_36:
  uint64_t v79 = *(int *)(a3 + 24);
  v56[*(int *)(a3 + 20)] = *((unsigned char *)v93 + *(int *)(a3 + 20));
  uint64_t v80 = &v56[v79];
  uint64_t v81 = (char *)v93 + v79;
  *(void *)&v56[v79] = *(void *)((char *)v93 + v79);
  swift_release();
  *((void *)v80 + 1) = *((void *)v81 + 1);
  swift_release();
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v83 = *(int *)(v82 + 32);
  int v84 = &v80[v83];
  int v85 = &v81[v83];
  int v86 = v96(&v80[v83], 1, v91);
  int v87 = v96(v85, 1, v91);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 40))(v84, v85, v91);
      return v56;
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v84, v91);
    goto LABEL_41;
  }
  if (v87)
  {
LABEL_41:
    sub_255D80868(0);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    return v56;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v84, v85, v91);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v84, 0, 1, v91);
  return v56;
}

uint64_t sub_255D82F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255D82F38);
}

uint64_t sub_255D82F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_255D830A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255D830B4);
}

uint64_t sub_255D830B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  else
  {
    sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDPregnancyStatusLabelView()
{
  uint64_t result = qword_269F350C8;
  if (!qword_269F350C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255D83258()
{
  type metadata accessor for MedicalIDPregnancyViewModel();
  if (v0 <= 0x3F)
  {
    sub_255D85560(319, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_255D83358()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255D83374(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_255D844EC(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v23 - v10;
  sub_255D80868(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MedicalIDPregnancyStatusLabelView();
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  MedicalIDPregnancyViewModel.pregnancyDueDateLabelState(_:)((uint64_t)v14, v42);
  sub_255D7ED4C((uint64_t)v14);
  unsigned __int8 v15 = v42[0];
  if (v42[0] == 3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, 1, 1, v5);
  }
  else
  {
    uint64_t v16 = sub_255EEED80();
    sub_255D83744(v15, (uint64_t)v2, (uint64_t)v39);
    sub_255D84CA8((uint64_t)v39, (uint64_t)v25);
    long long v26 = (unint64_t)v16;
    LOBYTE(v27[0]) = 0;
    sub_255D84CA8((uint64_t)v25, (uint64_t)v27 + 8);
    long long v35 = v27[5];
    long long v36 = v27[6];
    long long v37 = v27[7];
    __int16 v38 = v28;
    long long v31 = v27[1];
    long long v32 = v27[2];
    long long v33 = v27[3];
    long long v34 = v27[4];
    long long v29 = v26;
    long long v30 = v27[0];
    uint64_t v17 = sub_255EEF270();
    uint64_t KeyPath = swift_getKeyPath();
    v39[6] = v35;
    v39[7] = v36;
    v39[8] = v37;
    LOWORD(v40) = v38;
    v39[2] = v31;
    v39[3] = v32;
    v39[4] = v33;
    v39[5] = v34;
    v39[0] = v29;
    v39[1] = v30;
    *((void *)&v40 + 1) = KeyPath;
    v23[8] = v37;
    v23[9] = v40;
    v23[4] = v33;
    v23[5] = v34;
    uint64_t v41 = v17;
    uint64_t v24 = v17;
    v23[6] = v35;
    v23[7] = v36;
    v23[0] = v29;
    v23[1] = v30;
    v23[2] = v31;
    v23[3] = v32;
    sub_255D84D44(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_255EF1E20;
    uint64_t v20 = v2[1];
    *(void *)(v19 + 32) = *v2;
    *(void *)(v19 + 40) = v20;
    strcpy((char *)(v19 + 48), "DueDateStatus");
    *(_WORD *)(v19 + 62) = -4864;
    swift_bridgeObjectRetain();
    uint64_t v21 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v22 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v22)
    {
      sub_255EEFD90();

      sub_255D84520(0);
      sub_255D84D90();
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D84F14((uint64_t)v39);
      sub_255D85174((uint64_t)v9, (uint64_t)v11);
      sub_255D85174((uint64_t)v11, a1);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_255D83744@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  if (a1)
  {
    uint64_t v33 = a3;
    sub_255EEF7B0();
    sub_255D8421C(a1, (uint64_t)&v64);
    uint64_t v6 = v64;
    uint64_t v7 = v65;
    long long v37 = v66;
    char v36 = v67;
    if (qword_269F34C38 != -1) {
      swift_once();
    }
    uint64_t v35 = qword_269F3FE58;
    swift_retain();
    swift_release();
    if (*(unsigned char *)(a2 + *(int *)(type metadata accessor for MedicalIDPregnancyStatusLabelView() + 20)) == 1)
    {
      sub_255EEED10();
      if (qword_269F349A0 != -1) {
        swift_once();
      }
      id v8 = (id)qword_269F352A8;
      uint64_t v9 = sub_255EEF3C0();
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      uint64_t v15 = v14 & 1;
      uint64_t v16 = sub_255EEF190();
      char v17 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      uint64_t v16 = 0;
      char v17 = 0;
    }
    *(void *)&v45[0] = v6;
    *((void *)&v45[0] + 1) = v7;
    v45[1] = v37;
    LOBYTE(v46) = v36;
    *((void *)&v46 + 1) = v35;
    *(void *)&long long v47 = v9;
    uint64_t v34 = v13;
    *((void *)&v47 + 1) = v11;
    *(void *)&long long v48 = v15;
    *((void *)&v48 + 1) = v13;
    *(void *)int v49 = v16;
    memset(&v49[8], 0, 32);
    v49[40] = v17;
    v50[2] = v46;
    v50[3] = v47;
    v50[0] = v45[0];
    v50[1] = v37;
    *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)&v49[25];
    v50[5] = *(_OWORD *)v49;
    v51[0] = *(_OWORD *)&v49[16];
    v50[4] = v48;
    swift_retain();
    sub_255D851D8(v6, v7, v37);
    swift_retain();
    sub_255D85224(v9, v11, v15, v13);
    sub_255D851D8(v6, v7, v37);
    sub_255D85224(v9, v11, v15, v13);
    sub_255D85130(v9, v11, v15, v13);
    sub_255D850E4(v6, v7, v37);
    swift_release();
    *(_OWORD *)uint64_t v56 = v48;
    *(_OWORD *)&v56[16] = *(_OWORD *)v49;
    *(_OWORD *)&v56[32] = *(_OWORD *)&v49[16];
    *(_OWORD *)&v56[41] = *(_OWORD *)&v49[25];
    long long v52 = v45[0];
    long long v53 = v37;
    long long v54 = v46;
    long long v55 = v47;
    sub_255D85268((uint64_t)&v52);
    sub_255D85270((uint64_t)&v52, (uint64_t)&v64);
    sub_255D852F0((uint64_t *)v50);
    long long v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1BAC8];
    sub_255D85560(0, &qword_269F35100, (uint64_t (*)(uint64_t))sub_255D84748, MEMORY[0x263F1BAC8]);
    sub_255D85560(0, &qword_269F35140, (uint64_t (*)(uint64_t))sub_255D849A0, v31);
    sub_255D84BC8(&qword_269F35168, &qword_269F35100, (uint64_t (*)(uint64_t))sub_255D84748);
    sub_255D84BC8(&qword_269F35170, &qword_269F35140, (uint64_t (*)(uint64_t))sub_255D849A0);
    sub_255EEEE00();
    sub_255D85130(v9, v11, v15, v34);
    sub_255D8539C((uint64_t *)v45);
    sub_255D850E4(v6, v7, v37);
    swift_release();
    long long v61 = v42;
    long long v62 = v43;
    v63[0] = *(_OWORD *)v44;
    *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)&v44[10];
    long long v57 = v38;
    long long v58 = v39;
    long long v59 = v40;
    long long v60 = v41;
  }
  else
  {
    if (*(unsigned char *)(a2 + *(int *)(type metadata accessor for MedicalIDPregnancyStatusLabelView() + 20)) != 1)
    {
      sub_255D85448((uint64_t)&v57);
      sub_255D84CA8((uint64_t)&v57, (uint64_t)&v64);
      return sub_255D84CA8((uint64_t)&v64, v4);
    }
    uint64_t v33 = v4;
    sub_255D83F44(&v64);
    uint64_t v18 = v64;
    uint64_t v19 = v65;
    long long v20 = v66;
    sub_255EEED10();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    id v21 = (id)qword_269F352A8;
    uint64_t v22 = sub_255EEF3C0();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    char v28 = v27 & 1;
    char v29 = sub_255EEF190();
    sub_255D85224(v18, v19, v20, *((uint64_t *)&v20 + 1));
    sub_255D85214(v22, v24, v28);
    swift_bridgeObjectRetain();
    sub_255D85224(v18, v19, v20, *((uint64_t *)&v20 + 1));
    sub_255D85214(v22, v24, v28);
    swift_bridgeObjectRetain();
    sub_255D85120(v22, v24, v28);
    swift_bridgeObjectRelease();
    sub_255D85130(v18, v19, v20, *((uint64_t *)&v20 + 1));
    *(void *)&long long v52 = v18;
    *((void *)&v52 + 1) = v19;
    long long v53 = v20;
    *(void *)&long long v54 = v22;
    *((void *)&v54 + 1) = v24;
    LOBYTE(v55) = v28;
    *((void *)&v55 + 1) = v26;
    v56[0] = v29;
    memset(&v56[8], 0, 32);
    v56[40] = 1;
    sub_255D8546C((uint64_t)&v52);
    sub_255D85270((uint64_t)&v52, (uint64_t)&v64);
    long long v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1BAC8];
    sub_255D85560(0, &qword_269F35100, (uint64_t (*)(uint64_t))sub_255D84748, MEMORY[0x263F1BAC8]);
    sub_255D85560(0, &qword_269F35140, (uint64_t (*)(uint64_t))sub_255D849A0, v30);
    sub_255D84BC8(&qword_269F35168, &qword_269F35100, (uint64_t (*)(uint64_t))sub_255D84748);
    sub_255D84BC8(&qword_269F35170, &qword_269F35140, (uint64_t (*)(uint64_t))sub_255D849A0);
    sub_255EEEE00();
    sub_255D85120(v22, v24, v28);
    swift_bridgeObjectRelease();
    sub_255D85130(v18, v19, v20, *((uint64_t *)&v20 + 1));
    long long v61 = v42;
    long long v62 = v43;
    v63[0] = *(_OWORD *)v44;
    *(_OWORD *)((char *)v63 + 10) = *(_OWORD *)&v44[10];
    long long v57 = v38;
    long long v58 = v39;
    long long v59 = v40;
    long long v60 = v41;
  }
  nullsub_1(&v57);
  sub_255D84CA8((uint64_t)&v57, (uint64_t)&v64);
  uint64_t v4 = v33;
  return sub_255D84CA8((uint64_t)&v64, v4);
}

uint64_t sub_255D83F44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_255EEED00();
  MEMORY[0x270FA5388](v3 - 8);
  sub_255D80868(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
  sub_255D85560(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  MedicalIDPregnancyViewModel.gestationalAgeDescription(dueDate:)((uint64_t)v6);
  uint64_t v9 = v8;
  uint64_t result = sub_255D7ED4C((uint64_t)v6);
  if (v9)
  {
    sub_255EEECF0();
    sub_255EEECE0();
    sub_255EEECD0();
    swift_bridgeObjectRelease();
    sub_255EEECE0();
    sub_255EEED20();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    id v11 = (id)qword_269F352A8;
    uint64_t v12 = sub_255EEF3C0();
    uint64_t v14 = v13;
    char v16 = v15;
    if (*(unsigned char *)(v1 + *(int *)(v7 + 20)) == 1) {
      int v17 = sub_255EEEF20();
    }
    else {
      int v17 = sub_255EEEF30();
    }
    v26[2] = v17;
    char v22 = v16 & 1;
    uint64_t v18 = sub_255EEF370();
    uint64_t v19 = v23;
    uint64_t v21 = v24;
    uint64_t v20 = v25 & 1;
    sub_255D85120(v12, v14, v22);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v20;
  a1[3] = v21;
  return result;
}

double sub_255D8421C@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3 = a1;
  uint64_t v4 = sub_255EEED00();
  MEMORY[0x270FA5388](v4 - 8);
  if (v3 == 2)
  {
    sub_255EEECF0();
    sub_255EEECE0();
    sub_255EEECC0();
    sub_255EEECE0();
    sub_255EEED20();
    if (qword_269F349A0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_6;
  }
  sub_255EEECF0();
  sub_255EEECE0();
  sub_255EEECC0();
  sub_255EEECE0();
  sub_255EEED20();
  if (qword_269F349A0 != -1) {
LABEL_6:
  }
    swift_once();
LABEL_5:
  id v5 = (id)qword_269F352A8;
  sub_255EEF3C0();
  sub_255EEEE00();
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

uint64_t sub_255D844CC()
{
  return sub_255EEF4C0();
}

void sub_255D844EC(uint64_t a1)
{
}

void sub_255D84520(uint64_t a1)
{
}

void sub_255D84554(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255D845C8()
{
  if (!qword_269F350E8)
  {
    sub_255D85560(255, &qword_269F350F0, (uint64_t (*)(uint64_t))sub_255D8465C, MEMORY[0x263F8D8F0]);
    sub_255D84A68();
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F350E8);
    }
  }
}

void sub_255D8465C(uint64_t a1)
{
}

void sub_255D8467C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1BAC8];
    sub_255D85560(255, &qword_269F35100, (uint64_t (*)(uint64_t))sub_255D84748, MEMORY[0x263F1BAC8]);
    uint64_t v8 = v7;
    sub_255D85560(255, &qword_269F35140, (uint64_t (*)(uint64_t))sub_255D849A0, v6);
    unint64_t v10 = a3(a1, v8, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_255D84748()
{
  if (!qword_269F35108)
  {
    sub_255D847B8();
    sub_255D848CC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F35108);
    }
  }
}

void sub_255D847B8()
{
  if (!qword_269F35110)
  {
    sub_255D8484C();
    sub_255D84950(255, (unint64_t *)&qword_269F35128, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35110);
    }
  }
}

void sub_255D8484C()
{
  if (!qword_269F35118)
  {
    sub_255D84950(255, &qword_269F35120, MEMORY[0x263F1A830], MEMORY[0x263F1A830], MEMORY[0x263F19B28]);
    unint64_t v0 = sub_255EEF790();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35118);
    }
  }
}

void sub_255D848CC()
{
  if (!qword_269F35130)
  {
    sub_255D84950(255, &qword_269F35138, MEMORY[0x263F1A830], MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35130);
    }
  }
}

void sub_255D84950(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255D849A0()
{
  if (!qword_269F35148)
  {
    uint64_t v0 = MEMORY[0x263F1A830];
    sub_255D84D44(255, &qword_269F35150, MEMORY[0x263F1A830], MEMORY[0x263F8D8F0]);
    sub_255D84950(255, &qword_269F35138, v0, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F35148);
    }
  }
}

unint64_t sub_255D84A68()
{
  unint64_t result = qword_269F35158;
  if (!qword_269F35158)
  {
    sub_255D85560(255, &qword_269F350F0, (uint64_t (*)(uint64_t))sub_255D8465C, MEMORY[0x263F8D8F0]);
    sub_255D84B08();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35158);
  }
  return result;
}

unint64_t sub_255D84B08()
{
  unint64_t result = qword_269F35160;
  if (!qword_269F35160)
  {
    sub_255D8465C(255);
    sub_255D84BC8(&qword_269F35168, &qword_269F35100, (uint64_t (*)(uint64_t))sub_255D84748);
    sub_255D84BC8(&qword_269F35170, &qword_269F35140, (uint64_t (*)(uint64_t))sub_255D849A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35160);
  }
  return result;
}

uint64_t sub_255D84BC8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255D85560(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255D84C2C()
{
  if (!qword_269F35178)
  {
    sub_255D84D44(255, &qword_269F35180, MEMORY[0x263F1A738], MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EEF080();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35178);
    }
  }
}

uint64_t sub_255D84CA8(uint64_t a1, uint64_t a2)
{
  sub_255D85560(0, &qword_269F350F0, (uint64_t (*)(uint64_t))sub_255D8465C, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_255D84D44(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255D84D90()
{
  return sub_255D84DD8(&qword_269F35188, sub_255D84520, (void (*)(void))sub_255D84E64, (void (*)(void))sub_255D84EE0);
}

uint64_t sub_255D84DD8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255D84E64()
{
  return sub_255D84E98(&qword_269F35190, (void (*)(uint64_t))sub_255D845C8);
}

uint64_t sub_255D84E98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255D84EE0()
{
  return sub_255D84E98(&qword_269F35198, (void (*)(uint64_t))sub_255D84C2C);
}

uint64_t sub_255D84F14(uint64_t a1)
{
  return a1;
}

uint64_t sub_255D84F98(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  if (HIBYTE(a16) <= 0xFEu) {
    return sub_255D84FDC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (unsigned __int16)(a16 & 0x1FF) >> 8);
  }
  return result;
}

uint64_t sub_255D84FDC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17)
{
  if (a17)
  {
    sub_255D85130(a1, a2, a3, a4);
    sub_255D85120(a5, a6, a7 & 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_255D850E4(a1, a2, a3);
    swift_release();
    return sub_255D85130(a7, a8, a9, a10);
  }
}

uint64_t sub_255D850E4(uint64_t a1, uint64_t a2, char a3)
{
  sub_255D85120(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_255D85120(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_255D85130(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_255D85120(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_255D85174(uint64_t a1, uint64_t a2)
{
  sub_255D844EC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D851D8(uint64_t a1, uint64_t a2, char a3)
{
  sub_255D85214(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_255D85214(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_255D85224(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_255D85214(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_255D85268(uint64_t result)
{
  *(unsigned char *)(result + 121) = 0;
  return result;
}

uint64_t sub_255D85270(uint64_t a1, uint64_t a2)
{
  sub_255D8467C(0, &qword_269F351A0, MEMORY[0x263F19B20]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_255D852F0(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[6];
  uint64_t v3 = a1[9];
  sub_255D851D8(*a1, a1[1], a1[2]);
  swift_retain();
  sub_255D85224(v6, v5, v2, v3);
  return a1;
}

uint64_t *sub_255D8539C(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[6];
  uint64_t v3 = a1[9];
  sub_255D850E4(*a1, a1[1], a1[2]);
  swift_release();
  sub_255D85130(v6, v5, v2, v3);
  return a1;
}

double sub_255D85448(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 120) = -256;
  return result;
}

uint64_t sub_255D8546C(uint64_t result)
{
  *(unsigned char *)(result + 121) = 1;
  return result;
}

unint64_t sub_255D8547C()
{
  unint64_t result = qword_269F351A8;
  if (!qword_269F351A8)
  {
    sub_255D85560(255, &qword_269F351B0, (uint64_t (*)(uint64_t))sub_255D844EC, MEMORY[0x263F8D8F0]);
    sub_255D84DD8(&qword_269F351B8, sub_255D844EC, (void (*)(void))sub_255D84D90, (void (*)(void))sub_255D855C4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F351A8);
  }
  return result;
}

void sub_255D85560(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255D855C4()
{
  return sub_255D84E98(&qword_269F351C0, MEMORY[0x263F1A470]);
}

uint64_t BasicAlertModel.Action.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_255EEE140();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t BasicAlertModel.Action.buttonText.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BasicAlertModel.Action() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for BasicAlertModel.Action()
{
  uint64_t result = qword_269F351E8;
  if (!qword_269F351E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BasicAlertModel.Action.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for BasicAlertModel.Action() + 24);
  return sub_255D85730(v3, a1);
}

uint64_t sub_255D85730(uint64_t a1, uint64_t a2)
{
  sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BasicAlertModel.Action.handler.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for BasicAlertModel.Action() + 28));
  sub_255D85808(v1);
  return v1;
}

uint64_t sub_255D85808(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t BasicAlertModel.Action.init(buttonText:style:handler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_255EEE130();
  uint64_t v12 = (int *)type metadata accessor for BasicAlertModel.Action();
  uint64_t v13 = (void *)(a6 + v12[5]);
  *uint64_t v13 = a1;
  v13[1] = a2;
  uint64_t result = sub_255D8589C(a3, a6 + v12[6]);
  char v15 = (void *)(a6 + v12[7]);
  *char v15 = a4;
  v15[1] = a5;
  return result;
}

uint64_t sub_255D8589C(uint64_t a1, uint64_t a2)
{
  sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D85938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_255EEE140();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t BasicAlertModel.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.actions.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall BasicAlertModel.init(title:message:actions:code:)(MedicalIDUI::BasicAlertModel *__return_ptr retstr, Swift::String title, Swift::String_optional message, Swift::OpaquePointer actions, Swift::String_optional code)
{
  retstr->title = title;
  retstr->message = message;
  retstr->actions = actions;
  retstr->code = code;
}

uint64_t BasicAlertModel.init(title:message:action:code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_255D863FC(0, &qword_269F351D0, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8E0F8]);
  uint64_t v16 = *(void *)(type metadata accessor for BasicAlertModel.Action() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_255EF20B0;
  uint64_t result = sub_255D86460(a5, v18 + v17);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = v18;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t BasicAlertModel.errorDescription.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.failureReason.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.code.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BasicAlertModel.code.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*BasicAlertModel.code.modify())()
{
  return nullsub_1;
}

uint64_t sub_255D85C04()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_255D85C34()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_255D85C64()
{
  return sub_255EEDF80();
}

uint64_t sub_255D85C7C()
{
  return sub_255EEDF70();
}

uint64_t _s11MedicalIDUI15BasicAlertModelV6ActionV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEE4F0();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v56 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  long long v57 = &v52[-v7];
  sub_255D878CC();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  long long v60 = &v52[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v52[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  long long v61 = &v52[-v16];
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = &v52[-v18];
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  char v22 = &v52[-v21];
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  char v25 = &v52[-v24];
  MEMORY[0x270FA5388](v23);
  char v27 = &v52[-v26];
  char v28 = sub_255EEE120();
  sub_255D87960(a1, (uint64_t)v27);
  sub_255D87960(a2, (uint64_t)v25);
  if ((v28 & 1) == 0)
  {
    sub_255D879D4((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D879D4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D87960(a1, (uint64_t)v22);
    sub_255D87960(a2, (uint64_t)v19);
    uint64_t v34 = a2;
    goto LABEL_9;
  }
  uint64_t v55 = v11;
  uint64_t v29 = *(int *)(v11 + 20);
  uint64_t v30 = *(void *)&v27[v29];
  uint64_t v31 = *(void *)&v27[v29 + 8];
  long long v32 = &v25[v29];
  if (v30 == *v32 && v31 == v32[1])
  {
    sub_255D879D4((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D879D4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D87960(a1, (uint64_t)v22);
    uint64_t v34 = a2;
    sub_255D87960(a2, (uint64_t)v19);
    goto LABEL_11;
  }
  int v53 = sub_255EF04A0();
  sub_255D879D4((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
  sub_255D879D4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
  sub_255D87960(a1, (uint64_t)v22);
  uint64_t v34 = a2;
  sub_255D87960(a2, (uint64_t)v19);
  if ((v53 & 1) == 0)
  {
LABEL_9:
    sub_255D879D4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D879D4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
LABEL_17:
    long long v42 = v61;
    sub_255D87960(a1, (uint64_t)v61);
    sub_255D87960(v34, (uint64_t)v14);
LABEL_18:
    sub_255D879D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D879D4((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    return 0;
  }
LABEL_11:
  long long v54 = v14;
  uint64_t v35 = *(int *)(v55 + 24);
  uint64_t v36 = (uint64_t)&v19[v35];
  long long v37 = v60;
  uint64_t v38 = (uint64_t)&v60[*(int *)(v9 + 48)];
  sub_255D85730((uint64_t)&v22[v35], (uint64_t)v60);
  sub_255D85730(v36, v38);
  uint64_t v39 = v58;
  uint64_t v40 = v59;
  long long v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (v41((uint64_t)v37, 1, v59) == 1)
  {
    sub_255D879D4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D879D4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    if (v41(v38, 1, v40) == 1)
    {
      sub_255D87A34((uint64_t)v60);
      long long v42 = v61;
      sub_255D87960(a1, (uint64_t)v61);
      uint64_t v14 = v54;
      sub_255D87960(v34, (uint64_t)v54);
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  sub_255D85730((uint64_t)v37, (uint64_t)v57);
  if (v41(v38, 1, v40) == 1)
  {
    sub_255D879D4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    sub_255D879D4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v57, v40);
LABEL_16:
    sub_255D879D4((uint64_t)v60, (uint64_t (*)(void))sub_255D878CC);
    uint64_t v14 = v54;
    goto LABEL_17;
  }
  uint64_t v44 = v56;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v39 + 32))(v56, v38, v40);
  sub_255D87AC0();
  unint64_t v45 = v57;
  char v46 = sub_255EEFCC0();
  long long v47 = *(void (**)(unsigned char *, uint64_t))(v39 + 8);
  v47(v44, v40);
  sub_255D879D4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
  sub_255D879D4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
  v47(v45, v40);
  sub_255D87A34((uint64_t)v60);
  long long v42 = v61;
  sub_255D87960(a1, (uint64_t)v61);
  uint64_t v14 = v54;
  sub_255D87960(v34, (uint64_t)v54);
  if ((v46 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v48 = v55;
  uint64_t v49 = *(void *)&v42[*(int *)(v55 + 28)];
  sub_255D85808(v49);
  sub_255D879D4((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
  if (v49)
  {
    sub_255D879C4(v49);
    uint64_t v50 = *(void *)&v14[*(int *)(v48 + 28)];
    sub_255D85808(v50);
    sub_255D879D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    if (v50)
    {
      sub_255D879C4(v50);
      return 1;
    }
  }
  else
  {
    uint64_t v51 = *(void *)&v14[*(int *)(v48 + 28)];
    sub_255D85808(v51);
    sub_255D879D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
    if (!v51) {
      return 1;
    }
    sub_255D879C4(v51);
  }
  return 0;
}

void sub_255D863FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255D86460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BasicAlertModel.Action();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s11MedicalIDUI15BasicAlertModelV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_255EF04A0(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7) {
        return 0;
      }
      if (v2 != v8 || v4 != v7)
      {
        char v14 = sub_255EF04A0();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (sub_255DEB128(v3, v10))
    {
      if (v6)
      {
        if (v11 && (v5 == v9 && v6 == v11 || (sub_255EF04A0() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v11)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_255D865E8()
{
  unint64_t result = qword_269F351D8;
  if (!qword_269F351D8)
  {
    sub_255EEE140();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F351D8);
  }
  return result;
}

unint64_t sub_255D86638()
{
  unint64_t result = qword_269F351E0;
  if (!qword_269F351E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F351E0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MedicalIDEmergencyContact(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for BasicAlertModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for BasicAlertModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BasicAlertModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BasicAlertModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicAlertModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicAlertModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BasicAlertModel()
{
  return &type metadata for BasicAlertModel;
}

uint64_t *initializeBufferWithCopyOfBuffer for BasicAlertModel.Action(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_255EEE140();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    char v14 = (char *)a2 + v9;
    uint64_t v15 = sub_255EEE4F0();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v20 = a3[7];
    uint64_t v21 = (uint64_t *)((char *)a1 + v20);
    char v22 = (uint64_t *)((char *)a2 + v20);
    if (*v22)
    {
      uint64_t v23 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v23;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    }
  }
  return a1;
}

uint64_t destroy for BasicAlertModel.Action(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_255EEE4F0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  if (*(void *)(a1 + *(int *)(a2 + 28)))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (const void *)(a2 + v8);
  uint64_t v14 = sub_255EEE4F0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  if (*v20)
  {
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  return a1;
}

uint64_t assignWithCopy for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = sub_255EEE4F0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *(void *)(a1 + v19);
  uint64_t v23 = *v21;
  if (!v22)
  {
    if (v23)
    {
      uint64_t v25 = v21[1];
      *uint64_t v20 = v23;
      v20[1] = v25;
      swift_retain();
      return a1;
    }
LABEL_13:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v24 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v24;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_255EEE4F0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  if (*v15)
  {
    uint64_t v17 = v15[1];
    void *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  return a1;
}

uint64_t assignWithTake for BasicAlertModel.Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_255EEE4F0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *(void *)(a1 + v21);
  uint64_t v25 = *v23;
  if (!v24)
  {
    if (v25)
    {
      uint64_t v27 = v23[1];
      void *v22 = v25;
      v22[1] = v27;
      return a1;
    }
LABEL_13:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    return a1;
  }
  if (!v25)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v26 = v23[1];
  void *v22 = v25;
  v22[1] = v26;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicAlertModel.Action(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255D874F0);
}

uint64_t sub_255D874F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE140();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for BasicAlertModel.Action(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255D87664);
}

uint64_t sub_255D87664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_255EEE140();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_255D877C4()
{
  sub_255EEE140();
  if (v0 <= 0x3F)
  {
    sub_255D863FC(319, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_255D878CC()
{
  if (!qword_269F351F8)
  {
    sub_255D863FC(255, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F351F8);
    }
  }
}

uint64_t sub_255D87960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BasicAlertModel.Action();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D879C4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_255D879D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255D87A34(uint64_t a1)
{
  sub_255D863FC(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_255D87AC0()
{
  unint64_t result = qword_269F35200;
  if (!qword_269F35200)
  {
    sub_255EEE4F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35200);
  }
  return result;
}

uint64_t sub_255D87B1C(void *a1, void *a2, void *a3)
{
  id v51 = a3;
  sub_255D89674(0, &qword_269F34F90, (uint64_t (*)(uint64_t))sub_255D7B8A4, sub_255D7BA6C, MEMORY[0x263EFDAF8]);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  uint64_t v56 = v7;
  MEMORY[0x270FA5388](v6);
  long long v54 = (char *)&v49 - v8;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A4C8]), sel_initWithHealthStore_, a1);
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = v9;
  uint64_t v10 = v3;
  id v11 = objc_allocWithZone(MEMORY[0x263EFEA58]);
  id v12 = v9;
  id v13 = a1;
  id v14 = v12;
  id v15 = v13;
  id v16 = objc_msgSend(v11, sel_init);
  type metadata accessor for MedicalIDEmergencyContactProvider();
  swift_allocObject();
  uint64_t v17 = sub_255E2E260(v15, v16);

  *(void *)(v10 + 16) = v17;
  uint64_t v52 = v17;
  type metadata accessor for HealthDemographicDataProvider();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v18 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
  uint64_t v20 = type metadata accessor for HealthDemographicData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  id v21 = v15;
  swift_retain();
  sub_255EEE300();
  *(void *)(v18 + 16) = v21;
  uint64_t v22 = v10;
  uint64_t v57 = v10;
  *(void *)(v10 + 24) = v18;
  type metadata accessor for MedicalIDHealthStoreDataProvider();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v21;
  id v24 = objc_allocWithZone(MEMORY[0x263F0A620]);
  id v53 = v21;
  *(void *)(v23 + 24) = objc_msgSend(v24, sel_initWithHealthStore_, v53);
  *(void *)(v22 + 32) = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v14;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v14;
  uint64_t v27 = a2;
  id v28 = a2;
  id v50 = v28;
  id v29 = v51;
  id v30 = v14;
  swift_retain();
  uint64_t v31 = _s11MedicalIDUI09HealthKitA14IDDataProviderC37medicalIDUpdateNotificationPublishersSay7Combine12AnyPublisherVyyts5NeverOGGvgZ_0();
  type metadata accessor for HealthKitMedicalIDDataProvider();
  swift_allocObject();
  long long v32 = sub_255D7E35C((uint64_t)&unk_269F35228, v25, (uint64_t)&unk_269F35238, v26, v31, v27, v29);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v33 = v57;
  *(void *)(v57 + 40) = v32;
  type metadata accessor for MedicalIDSettingsProvider();
  swift_allocObject();
  *(void *)(v33 + 48) = sub_255EA3250();
  *(void *)(v33 + 64) = v29;
  uint64_t v58 = v32[2];
  sub_255D7B8A4();
  sub_255D7BA6C();
  sub_255D899F0();
  id v34 = v29;
  uint64_t v35 = v54;
  sub_255EEE4B0();
  sub_255D7BAE8();
  uint64_t v36 = v55;
  uint64_t v37 = sub_255EEE4A0();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v36);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v34;
  uint64_t v39 = *(void **)(v23 + 16);
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v39;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v30;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v30;
  type metadata accessor for MedicalIDDataManager();
  uint64_t v43 = swift_allocObject();
  id v44 = v30;
  uint64_t v45 = v52;
  swift_retain();
  id v46 = v39;
  uint64_t v47 = sub_255D89C30(v37, v45, (uint64_t)sub_255D89A8C, v38, (uint64_t)sub_255D89AB0, v40, (uint64_t)&unk_269F35248, v41, (uint64_t)&unk_269F35258, v42, v43);
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = v57;
  *(void *)(v57 + 56) = v47;
  return result;
}

uint64_t sub_255D880BC(uint64_t a1)
{
  v1[3] = a1;
  v1[4] = sub_255EEFF70();
  v1[5] = sub_255EEFF60();
  return MEMORY[0x270FA2498](sub_255D88138, 0, 0);
}

uint64_t sub_255D88138()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[6] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  sub_255D896F4();
  *uint64_t v3 = v0;
  v3[1] = sub_255D88240;
  return MEMORY[0x270FA2360](v0 + 2, 0, 0, 0x496C61636964656DLL, 0xED00006174614444, sub_255D89ED4, v2, v4);
}

uint64_t sub_255D88240()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_255D88444;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_255D8835C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_255D8835C()
{
  *(void *)(v0 + 72) = *(void *)(v0 + 16);
  uint64_t v2 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255D883DC, v2, v1);
}

uint64_t sub_255D883DC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 72);
  return v1(v2);
}

uint64_t sub_255D88444()
{
  swift_task_dealloc();
  uint64_t v1 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255D884C8, v1, v0);
}

uint64_t sub_255D884C8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255D8852C(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  sub_255EEFF70();
  v2[17] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v2[18] = v4;
  v2[19] = v3;
  return MEMORY[0x270FA2498](sub_255D885C4, v4, v3);
}

uint64_t sub_255D885C4()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = (void *)v0[16];
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_255D886C4;
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_255D888CC;
  v0[13] = &block_descriptor_24;
  v0[14] = v3;
  objc_msgSend(v1, sel_updateMedicalIDData_completion_, v2, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_255D886C4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 160) = v2;
  uint64_t v3 = *(void *)(v1 + 152);
  uint64_t v4 = *(void *)(v1 + 144);
  if (v2) {
    uint64_t v5 = sub_255D88858;
  }
  else {
    uint64_t v5 = sub_255D887F4;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_255D887F4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255D88858()
{
  swift_release();
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255D888CC(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_255D89E7C();
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return MEMORY[0x270FA2410](v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return MEMORY[0x270FA2408](v3);
  }
}

uint64_t sub_255D8897C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return MEMORY[0x270FA2498](sub_255D8899C, 0, 0);
}

uint64_t sub_255D8899C()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = (void *)v0[16];
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_255D88A9C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_255D888CC;
  v0[13] = &block_descriptor_22;
  v0[14] = v3;
  objc_msgSend(v1, sel_updateMedicalIDData_completion_, v2, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_255D88A9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_255D88BC8;
  }
  else {
    uint64_t v2 = sub_255D88BAC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_255D88BAC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 144));
}

uint64_t sub_255D88BC8()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_255D88C38(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return MEMORY[0x270FA2498](sub_255D88C58, 0, 0);
}

uint64_t sub_255D88C58()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[7] = v0 + 17;
  v0[3] = sub_255D88D54;
  uint64_t v2 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_255D888CC;
  v0[13] = &block_descriptor;
  v0[14] = v2;
  objc_msgSend(v1, sel_deleteMedicalIDDataWithCompletion_, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_255D88D54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 128) = v1;
  if (v1) {
    uint64_t v2 = sub_255D88E80;
  }
  else {
    uint64_t v2 = sub_255D88E64;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_255D88E64()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 136));
}

uint64_t sub_255D88E80()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_255D88EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v31 = a3;
  uint64_t v7 = type metadata accessor for MedicalIDData();
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v3 + 56);
  swift_beginAccess();
  id v14 = *(void **)(v13 + 16);
  swift_getKeyPath();
  uint64_t v32 = v13;
  sub_255D89568(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  id v15 = v14;
  sub_255EEE2D0();
  swift_release();
  uint64_t v16 = v13 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255D895B0(v16, (uint64_t)v12);
  LoadState<>.loadedValue.getter((uint64_t)v9);
  sub_255D89614((uint64_t)v12, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v17 = sub_255EEE280();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v20 + 16))(v19, a1);
  id v21 = *(void **)(*(void *)(v4 + 32) + 16);
  uint64_t v22 = sub_255EEE200();
  MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, a2);
  uint64_t v26 = *(void **)(v4 + 64);
  id v27 = v21;
  id v28 = v26;
  return MedicalIDDataViewModel.init(data:medicalIDData:calendar:healthStore:locale:displayConfiguration:)(v15, (uint64_t)v9, (uint64_t)v19, v27, (uint64_t)v24, v28, v31);
}

uint64_t sub_255D8920C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MedicalIDData();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v1 + 56);
  swift_getKeyPath();
  v21[1] = v10;
  sub_255D89568(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v11 = v10 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255D895B0(v11, (uint64_t)v9);
  LoadState<>.loadedValue.getter((uint64_t)v6);
  sub_255D89614((uint64_t)v9, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v12 = *(void *)(v2 + 32);
  uint64_t v13 = *(void **)(v12 + 24);
  id v14 = *(id *)(v12 + 16);
  id v15 = objc_msgSend(v13, sel_synchronouslyFetchFirstName);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = sub_255EEFD90();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  MedicalIDSettingsProvider.medicalIDSettingsViewModel(data:healthStore:profileFirstName:)((uint64_t)v6, v14, v17, v19, a1);

  swift_bridgeObjectRelease();
  return sub_255D89614((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
}

id *sub_255D8942C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_255D8948C()
{
  sub_255D8942C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MedicalIDModelProvider()
{
  return self;
}

void sub_255D894E4(uint64_t a1)
{
}

uint64_t sub_255D8952C()
{
  return sub_255D89568(&qword_269F35210, (void (*)(uint64_t))type metadata accessor for MedicalIDData);
}

uint64_t sub_255D89568(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255D895B0(uint64_t a1, uint64_t a2)
{
  sub_255D894E4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D89614(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255D89674(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255D896F4()
{
  if (!qword_269F34FA8)
  {
    sub_255D8974C();
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F34FA8);
    }
  }
}

unint64_t sub_255D8974C()
{
  unint64_t result = qword_269F34FB0;
  if (!qword_269F34FB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F34FB0);
  }
  return result;
}

uint64_t sub_255D8978C()
{
  return swift_deallocObject();
}

uint64_t sub_255D897C4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_255D89858;
  return sub_255D880BC(v2);
}

uint64_t sub_255D89858(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_255D89954(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_255D7E778;
  return sub_255D8852C(a1, v4);
}

unint64_t sub_255D899F0()
{
  unint64_t result = qword_269F34FD0;
  if (!qword_269F34FD0)
  {
    sub_255D89674(255, (unint64_t *)&qword_269F34FA0, (uint64_t (*)(uint64_t))sub_255D896F4, (uint64_t (*)(void))sub_255D7B988, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34FD0);
  }
  return result;
}

id sub_255D89A8C()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_shouldSaveDataToHealthDetails);
}

void sub_255D89AB0(void *a1)
{
}

uint64_t sub_255D89AD4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_255D89858;
  v5[15] = a1;
  v5[16] = v4;
  return MEMORY[0x270FA2498](sub_255D8899C, 0, 0);
}

uint64_t sub_255D89B84()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_255D89EF0;
  v3[15] = v2;
  return MEMORY[0x270FA2498](sub_255D88C58, 0, 0);
}

uint64_t sub_255D89C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v26[3] = type metadata accessor for MedicalIDEmergencyContactProvider();
  _DWORD v26[4] = &protocol witness table for MedicalIDEmergencyContactProvider;
  v26[0] = a2;
  *(void *)(a11 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9F8]), sel_init);
  *(void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions) = MEMORY[0x263F8EE88];
  sub_255EEE300();
  sub_255D89DC8((uint64_t)v26, a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider);
  uint64_t v18 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_shouldSaveDataToHealthDetails);
  *uint64_t v18 = a3;
  v18[1] = a4;
  uint64_t v19 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToHealthStore);
  *uint64_t v19 = a5;
  v19[1] = a6;
  uint64_t v20 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore);
  *uint64_t v20 = a7;
  v20[1] = a8;
  id v21 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore);
  *id v21 = a9;
  v21[1] = a10;
  uint64_t v22 = a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  uint64_t v23 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_255E8F1A0(a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return a11;
}

uint64_t sub_255D89DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_255D89E7C()
{
  unint64_t result = qword_269F36CF0;
  if (!qword_269F36CF0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269F36CF0);
  }
  return result;
}

void sub_255D89ED4(uint64_t a1)
{
  sub_255E3AEA4(a1, *(void **)(v1 + 16));
}

uint64_t MedicalIDDisplaySection.baseIdentifier.getter()
{
  switch(*v0)
  {
    case 1:
      uint64_t v1 = 0x636E616E67657250;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_255EF1E20;
      *(void *)(v5 + 32) = 0x496C61636964654DLL;
      *(void *)(v5 + 40) = 0xE900000000000044;
      *(void *)(v5 + 48) = 0x636E616E67657250;
      *(void *)(v5 + 56) = 0xE900000000000079;
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    case 2:
      uint64_t v1 = 0x697461636964654DLL;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_255EF1E20;
      *(void *)(v6 + 32) = 0x496C61636964654DLL;
      *(void *)(v6 + 40) = 0xE900000000000044;
      *(void *)(v6 + 48) = 0x697461636964654DLL;
      *(void *)(v6 + 56) = 0xEB00000000736E6FLL;
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    case 3:
      uint64_t v1 = 0x65696772656C6C41;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_255EF1E20;
      *(void *)(v7 + 32) = 0x496C61636964654DLL;
      *(void *)(v7 + 40) = 0xE900000000000044;
      *(void *)(v7 + 48) = 0x65696772656C6C41;
      *(void *)(v7 + 56) = 0xE900000000000073;
      nullsub_1(v7);
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    case 4:
      uint64_t v1 = 0xD000000000000011;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v8 = swift_allocObject();
      uint64_t v9 = sub_255D7F39C(v8, 2);
      *uint64_t v10 = 0x496C61636964654DLL;
      v10[1] = 0xE900000000000044;
      v10[2] = 0xD000000000000011;
      v10[3] = 0x8000000255EF9180;
      nullsub_1(v9);
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    case 5:
      uint64_t v1 = 0x697274656D6F6942;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = sub_255D7F39C(v11, 2);
      *uint64_t v13 = 0x496C61636964654DLL;
      v13[1] = 0xE900000000000044;
      v13[2] = 0x697274656D6F6942;
      v13[3] = 0xEA00000000007363;
      nullsub_1(v12);
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    case 6:
      uint64_t v1 = 0xD000000000000011;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v14 = swift_allocObject();
      uint64_t v15 = sub_255D7F39C(v14, 2);
      void *v16 = 0x496C61636964654DLL;
      v16[1] = 0xE900000000000044;
      v16[2] = 0xD000000000000011;
      v16[3] = 0x8000000255EF8F00;
      nullsub_1(v15);
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    case 7:
      uint64_t v1 = 0x4E6C61636964654DLL;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v17 = swift_allocObject();
      uint64_t v18 = sub_255D7F39C(v17, 2);
      *(void *)uint64_t v19 = 0x496C61636964654DLL;
      *(void *)(v19 + 8) = 0xE900000000000044;
      strcpy((char *)(v19 + 16), "MedicalNotes");
      *(unsigned char *)(v19 + 29) = 0;
      *(_WORD *)(v19 + 30) = -5120;
      nullsub_1(v18);
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
    default:
      uint64_t v1 = 0x6C616E6F73726550;
      sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_255EF1E20;
      *(void *)(v2 + 32) = 0x496C61636964654DLL;
      *(void *)(v2 + 40) = 0xE900000000000044;
      strcpy((char *)(v2 + 48), "PersonalInfo");
      *(unsigned char *)(v2 + 61) = 0;
      *(_WORD *)(v2 + 62) = -5120;
      uint64_t v3 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)HKUIJoinStringsForAutomationIdentifier();
      break;
  }
  id v20 = v4;

  if (v20)
  {
    uint64_t v1 = sub_255EEFD90();
  }
  return v1;
}

uint64_t MedicalIDDataViewModel.init(data:medicalIDData:calendar:healthStore:locale:displayConfiguration:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  id v97 = a6;
  uint64_t v100 = a5;
  id v84 = a4;
  uint64_t v105 = a2;
  id v94 = a1;
  uint64_t v92 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v92);
  uint64_t v93 = (void *)((char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255D8D508(0, &qword_269F35260, (void (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v89 = (char *)v83 - v15;
  sub_255D8D508(0, &qword_269F35268, (void (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v88 = (char *)v83 - v17;
  uint64_t v18 = type metadata accessor for MedicalIDData();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v98 = (uint64_t)v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v101 = (int *)((char *)v83 - v21);
  uint64_t v22 = (int *)type metadata accessor for MedicalIDDataViewModel();
  *(void *)((char *)a7 + v22[13]) = a6;
  *a7 = a1;
  uint64_t v23 = a7;
  sub_255D8BAAC(a2, (uint64_t)a7 + v22[5]);
  id v24 = (char *)a7 + v22[6];
  uint64_t v25 = sub_255EEE280();
  uint64_t v91 = *(void *)(v25 - 8);
  uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
  v102 = (void *)(v91 + 16);
  uint64_t v104 = a3;
  v95(v24, a3, v25);
  uint64_t v26 = v22[7];
  v106 = v23;
  *(void *)((char *)v23 + v26) = a4;
  id v27 = (char *)v23 + v22[8];
  uint64_t v103 = sub_255EEE200();
  uint64_t v90 = *(void *)(v103 - 8);
  uint64_t v28 = v90;
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
  id v29 = v27;
  uint64_t v30 = v100;
  v96(v29, v100, v103);
  uint64_t v31 = sub_255D8BAAC(v105, (uint64_t)v101);
  MEMORY[0x270FA5388](v31);
  uint64_t v86 = v32;
  unint64_t v85 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v33 = (char *)v83 - v85;
  uint64_t v99 = v25;
  uint64_t v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v95)((char *)v83 - v85, a3, v25);
  uint64_t v35 = *(void *)(v28 + 64);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (unsigned char *)((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v30;
  uint64_t v38 = v30;
  uint64_t v39 = v103;
  uint64_t v40 = (void (*)(int64_t, uint64_t, uint64_t))v96;
  v96((char *)((char *)v83 - v36), v38, v103);
  uint64_t v41 = (uint64_t)v106 + v22[10];
  id v97 = v97;
  id v87 = v94;
  id v94 = v84;
  uint64_t v42 = v41;
  uint64_t v43 = (uint64_t)v101;
  uint64_t v44 = (uint64_t)v33;
  uint64_t v45 = v37;
  MedicalIDPersonalInfoViewModel.init(data:calendar:locale:)((uint64_t)v101, v44, (char *)v83 - v36, v42);
  uint64_t v46 = sub_255D8BAAC(v105, v43);
  v83[1] = v35;
  MEMORY[0x270FA5388](v46);
  id v84 = v36;
  uint64_t v47 = (char *)((char *)v83 - v36);
  v40((char *)v83 - v36, v37, v39);
  uint64_t v48 = type metadata accessor for MedicalIDHeightFormatter();
  uint64_t v49 = (uint64_t)v88;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v88, 1, 1, v48);
  uint64_t v50 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v51 = (uint64_t)v89;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v89, 1, 1, v50);
  uint64_t v52 = v106;
  MedicalIDBiometricsViewModel.init(medicalIDData:locale:heightFormatter:weightFormatter:)((uint64_t)v101, v47, v49, v51, (void *)((char *)v106 + v22[9]));
  v101 = v22;
  id v53 = (void *)((char *)v52 + v22[11]);
  uint64_t v54 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v55 = v99;
  uint64_t v56 = (uint64_t (*)(char *, uint64_t, uint64_t))v95;
  ((void (*)(char *, uint64_t))v95)((char *)v53 + *(int *)(v54 + 20), v104);
  v40((int64_t)v53 + *(int *)(v54 + 24), v45, v39);
  uint64_t v57 = v87;
  void *v53 = v87;
  uint64_t v89 = v57;
  unsigned int v58 = objc_msgSend(v97, sel_suggestHealthData);
  uint64_t v59 = 0;
  if (v58)
  {
    type metadata accessor for PregnancySampleDataProvider();
    uint64_t v59 = PregnancySampleDataProvider.__allocating_init(healthStore:)((uint64_t)v94);
  }
  id v87 = (id)v59;
  uint64_t v60 = 0x636E616E67657250;
  uint64_t v61 = v105;
  uint64_t v62 = sub_255D8BAAC(v105, v98);
  uint64_t v88 = (char *)v83;
  MEMORY[0x270FA5388](v62);
  int v63 = (char *)v83 - v85;
  uint64_t v64 = v56((char *)v83 - v85, v104, v55);
  v102 = v83;
  MEMORY[0x270FA5388](v64);
  int64_t v65 = (char *)v83 - (unsigned char *)v84;
  v96((char *)((char *)v83 - (unsigned char *)v84), v45, v103);
  sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
  MEMORY[0x270FA5388](v66 - 8);
  uint64_t v68 = (char *)v83 - v67;
  uint64_t v69 = sub_255EEE100();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
  sub_255D8BD20(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = xmmword_255EF1E20;
  unint64_t v71 = 0xE900000000000079;
  *(void *)(v70 + 32) = 0x496C61636964654DLL;
  *(void *)(v70 + 40) = 0xE900000000000044;
  *(void *)(v70 + 48) = 0x636E616E67657250;
  *(void *)(v70 + 56) = 0xE900000000000079;
  uint64_t v72 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v73 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v74 = v61;
  if (v73)
  {
    uint64_t v60 = sub_255EEFD90();
    unint64_t v71 = v75;
  }
  uint64_t v76 = (uint64_t)v93;
  *uint64_t v93 = v60;
  *(void *)(v76 + 8) = v71;
  int v77 = (int *)v92;
  sub_255D8BBE0(v98, v76 + *(int *)(v92 + 20), (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  uint64_t v78 = v91;
  uint64_t v79 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v76 + v77[6], v63, v99);
  uint64_t v80 = v90;
  uint64_t v81 = v103;
  (*(void (**)(uint64_t, int64_t, uint64_t))(v90 + 32))(v76 + v77[7], v65, v103);
  *(void *)(v76 + v77[8]) = v87;
  sub_255D8BB10((uint64_t)v68, v76 + v77[9]);

  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v100, v81);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v104, v79);
  sub_255D8BB84(v74);
  return sub_255D8BBE0(v76, (uint64_t)v106 + v101[12], (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
}

void MedicalIDDisplaySection.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

MedicalIDUI::MedicalIDDisplaySection_optional __swiftcall MedicalIDDisplaySection.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_255EF0460();
  result.value = swift_bridgeObjectRelease();
  char v5 = 8;
  if (v3 < 8) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static MedicalIDDisplaySection.allCases.getter()
{
  return &unk_2704A3248;
}

unint64_t MedicalIDDisplaySection.rawValue.getter()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x636E616E67657270;
      break;
    case 2:
      unint64_t result = 0x697461636964656DLL;
      break;
    case 3:
      unint64_t result = 0x65696772656C6C61;
      break;
    case 4:
    case 6:
      return result;
    case 5:
      unint64_t result = 0x697274656D6F6962;
      break;
    case 7:
      unint64_t result = 0x4E6C61636964656DLL;
      break;
    default:
      unint64_t result = 0x6C616E6F73726570;
      break;
  }
  return result;
}

uint64_t sub_255D8AF84(unsigned __int8 *a1, char *a2)
{
  return sub_255D8B24C(*a1, *a2);
}

uint64_t sub_255D8AF90(char a1, char a2)
{
  if (*(void *)&aOngoing_1[8 * a1] == *(void *)&aOngoing_1[8 * a2]
    && *(void *)&aDidregisdidnot[8 * a1 + 16] == *(void *)&aDidregisdidnot[8 * a2 + 16])
  {
    char v3 = 1;
  }
  else
  {
    char v3 = sub_255EF04A0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_255D8B018(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x8000000255EF8D00;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x726F6E6F44746F6ELL;
      break;
    case 3:
      unint64_t v3 = 0xEA00000000006566;
      unint64_t v5 = 0x694C6574616E6F64;
      break;
    default:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x746553746F6ELL;
      break;
  }
  unint64_t v6 = 0x8000000255EF8D00;
  switch(a2)
  {
    case 1:
      goto LABEL_9;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v2 = 0x726F6E6F44746F6ELL;
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
      goto LABEL_12;
    case 3:
      unint64_t v6 = 0xEA00000000006566;
      if (v5 == 0x694C6574616E6F64) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x746553746F6ELL) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_255EF04A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_255D8B1A0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000015;
  }
  else {
    unint64_t v3 = 0xD000000000000013;
  }
  if (v2) {
    unint64_t v4 = 0x8000000255EF8CC0;
  }
  else {
    unint64_t v4 = 0x8000000255EF8CE0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000015;
  }
  else {
    unint64_t v5 = 0xD000000000000013;
  }
  if (a2) {
    unint64_t v6 = 0x8000000255EF8CE0;
  }
  else {
    unint64_t v6 = 0x8000000255EF8CC0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_255EF04A0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_255D8B24C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x8000000255EF8BB0;
  uint64_t v3 = a1;
  unint64_t v4 = 0xD000000000000011;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0x636E616E67657270;
      unint64_t v2 = 0xE900000000000079;
      break;
    case 2:
      unint64_t v2 = 0xEB00000000736E6FLL;
      unint64_t v4 = 0x697461636964656DLL;
      break;
    case 3:
      unint64_t v2 = 0xE900000000000073;
      unint64_t v4 = 0x65696772656C6C61;
      break;
    case 4:
      break;
    case 5:
      unint64_t v2 = 0xEA00000000007363;
      unint64_t v4 = 0x697274656D6F6962;
      break;
    case 6:
      unint64_t v2 = 0x8000000255EF8BD0;
      break;
    case 7:
      unint64_t v2 = 0xEC0000007365746FLL;
      unint64_t v4 = 0x4E6C61636964656DLL;
      break;
    default:
      unint64_t v2 = 0xEC0000006F666E49;
      unint64_t v4 = 0x6C616E6F73726570;
      break;
  }
  unint64_t v5 = 0x8000000255EF8BB0;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE900000000000079;
      if (v4 == 0x636E616E67657270) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v5 = 0xEB00000000736E6FLL;
      if (v4 != 0x697461636964656DLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v5 = 0xE900000000000073;
      if (v4 != 0x65696772656C6C61) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      goto LABEL_21;
    case 5:
      unint64_t v5 = 0xEA00000000007363;
      if (v4 != 0x697274656D6F6962) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v5 = 0x8000000255EF8BD0;
LABEL_21:
      if (v4 == 0xD000000000000011) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 7:
      unint64_t v5 = 0xEC0000007365746FLL;
      if (v4 != 0x4E6C61636964656DLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
      unint64_t v5 = 0xEC0000006F666E49;
      if (v4 != 0x6C616E6F73726570) {
        goto LABEL_25;
      }
LABEL_22:
      if (v2 == v5) {
        char v6 = 1;
      }
      else {
LABEL_25:
      }
        char v6 = sub_255EF04A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6 & 1;
  }
}

uint64_t sub_255D8B518(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD00000000000001BLL;
  unint64_t v3 = 0x8000000255EF8C20;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD00000000000001BLL;
  switch(v4)
  {
    case 1:
      break;
    case 2:
      char v6 = "disabledPropertyNotEditable";
      goto LABEL_5;
    case 3:
      unint64_t v5 = 0xD000000000000013;
      char v6 = "disabledFamilySetup";
LABEL_5:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x64656C62616E65;
      break;
  }
  unint64_t v7 = 0x8000000255EF8C20;
  switch(a2)
  {
    case 1:
      break;
    case 2:
      uint64_t v8 = "disabledPropertyNotEditable";
      goto LABEL_10;
    case 3:
      unint64_t v2 = 0xD000000000000013;
      uint64_t v8 = "disabledFamilySetup";
LABEL_10:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      unint64_t v7 = 0xE700000000000000;
      unint64_t v2 = 0x64656C62616E65;
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_255EF04A0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_255D8B67C()
{
  return sub_255EA4768();
}

uint64_t sub_255D8B688()
{
  return sub_255EA446C();
}

uint64_t sub_255D8B690()
{
  return sub_255EA4768();
}

MedicalIDUI::MedicalIDDisplaySection_optional sub_255D8B698(Swift::String *a1)
{
  return MedicalIDDisplaySection.init(rawValue:)(*a1);
}

unint64_t sub_255D8B6A4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MedicalIDDisplaySection.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_255D8B6CC(void *a1@<X8>)
{
  *a1 = &unk_2704A3248;
}

void sub_255D8B6DC(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void MedicalIDDataViewModel.SectionDisplayAction.section.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void MedicalIDDataViewModel.SectionDisplayAction.action.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction __swiftcall MedicalIDDataViewModel.SectionDisplayAction.init(section:action:)(MedicalIDUI::MedicalIDDisplaySection section, MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction::Action action)
{
  char v3 = *(unsigned char *)action;
  *unint64_t v2 = *(unsigned char *)section;
  v2[1] = v3;
  result.section = section;
  return result;
}

BOOL static MedicalIDDataViewModel.SectionDisplayAction.Action.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MedicalIDDataViewModel.SectionDisplayAction.Action.hash(into:)()
{
  return sub_255EF0550();
}

uint64_t MedicalIDDataViewModel.SectionDisplayAction.Action.hashValue.getter()
{
  return sub_255EF0580();
}

BOOL sub_255D8B7A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t static MedicalIDDataViewModel.SectionDisplayAction.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[1];
  int v3 = *(unsigned __int8 *)(a2 + 1);
  return sub_255D8B24C(*a1, *(unsigned char *)a2) & ~(v2 ^ v3) & 1;
}

uint64_t sub_255D8B7F4(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[1];
  int v3 = *(unsigned __int8 *)(a2 + 1);
  return sub_255D8B24C(*a1, *(unsigned char *)a2) & ~(v2 ^ v3) & 1;
}

char *MedicalIDDataViewModel.displayActionForFirstLaunch.getter@<X0>(__int16 *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDDataViewModel();
  uint64_t v4 = *(id *)((char *)v1 + *(int *)(v3 + 52));
  if ((((unint64_t)objc_msgSend(v4, sel_entryPoint) - 1) & 0xFFFFFFFFFFFFFFFDLL) == 0
    || !objc_msgSend(v4, sel_entryPoint))
  {
    unint64_t v7 = *(id *)((char *)v1 + *(int *)(v3 + 28));
    MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction result = (char *)objc_msgSend(v4, sel_isEditingAvailable);
    if (!result) {
      goto LABEL_14;
    }
    id v8 = objc_msgSend(v7, sel_profileIdentifier);
    id v9 = objc_msgSend(v8, sel_type);

    if (v9 == (id)3)
    {
      MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction result = (char *)objc_msgSend(v4, sel_accessPoint);
      if (result != (char *)8) {
        goto LABEL_14;
      }
    }
    if (objc_msgSend(v4, sel_entryPoint)
      || (MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction result = (char *)objc_msgSend(*v1, sel_isEmpty), (result & 1) == 0))
    {
      MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction result = (char *)objc_msgSend(v4, sel_entryPoint);
      if ((unint64_t)(result - 1) > 2) {
        goto LABEL_14;
      }
      unsigned int v10 = 0x10404u >> (8 * ((_BYTE)result - 1));
    }
    else
    {
      LOBYTE(v10) = 0;
    }
    __int16 v6 = v10 | 0x100;
    goto LABEL_15;
  }
  MedicalIDUI::MedicalIDDataViewModel::SectionDisplayAction result = (char *)objc_msgSend(v4, sel_entryPoint);
  if ((unint64_t)(result - 1) > 2)
  {
LABEL_14:
    __int16 v6 = 512;
    goto LABEL_15;
  }
  __int16 v6 = (0x10404u >> (8 * ((_BYTE)result - 1)));
LABEL_15:
  *a1 = v6;
  return result;
}

Swift::Bool __swiftcall MedicalIDDataViewModel.isDeletionVisible(with:healthStore:)(MIUIDisplayConfiguration *with, HKHealthStore healthStore)
{
  unsigned int v5 = [(MIUIDisplayConfiguration *)with isEditingAvailable];
  if (v5)
  {
    id v6 = [(objc_class *)healthStore.super.isa profileIdentifier];
    id v7 = objc_msgSend(v6, sel_type);

    if (v7 == (id)3 && (id)[(MIUIDisplayConfiguration *)with accessPoint] != (id)8)
    {
      LOBYTE(v5) = 0;
    }
    else
    {
      unsigned int v5 = [(MIUIDisplayConfiguration *)with isDeletionAvailable];
      if (v5) {
        LOBYTE(v5) = objc_msgSend(*v2, sel_isEmpty) ^ 1;
      }
    }
  }
  return v5;
}

uint64_t type metadata accessor for MedicalIDDataViewModel()
{
  uint64_t result = qword_269F35298;
  if (!qword_269F35298) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255D8BAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D8BB10(uint64_t a1, uint64_t a2)
{
  sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D8BB84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255D8BBE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_255D8BC4C()
{
  unint64_t result = qword_269F35270;
  if (!qword_269F35270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35270);
  }
  return result;
}

unint64_t sub_255D8BCA4()
{
  unint64_t result = qword_269F35278;
  if (!qword_269F35278)
  {
    sub_255D8BD20(255, &qword_269F35280, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35278);
  }
  return result;
}

void sub_255D8BD20(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255D8BD70()
{
  unint64_t result = qword_269F35288;
  if (!qword_269F35288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35288);
  }
  return result;
}

unint64_t sub_255D8BDC8()
{
  unint64_t result = qword_269F35290;
  if (!qword_269F35290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35290);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDDisplaySection(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MedicalIDDisplaySection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255D8BF78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDDisplaySection()
{
  return &type metadata for MedicalIDDisplaySection;
}

void **initializeBufferWithCopyOfBuffer for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  unsigned int v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v23 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3[5];
    unsigned int v6 = (void **)((char *)a1 + v5);
    BOOL v7 = (char *)a2 + v5;
    uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *unsigned int v6 = *(void **)((char *)a2 + v5);
    v6[1] = v8;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v5 + 16);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 24);
    v6[2] = v10;
    v6[3] = v9;
    uint64_t v11 = *((void *)v7 + 5);
    v6[4] = *((void *)v7 + 4);
    v6[5] = v11;
    uint64_t v12 = *((void *)v7 + 7);
    v6[6] = *((void *)v7 + 6);
    v6[7] = v12;
    uint64_t v13 = *((void *)v7 + 9);
    v6[8] = *((void *)v7 + 8);
    v6[9] = v13;
    uint64_t v14 = *((void *)v7 + 11);
    v6[10] = *((void *)v7 + 10);
    v6[11] = v14;
    v272 = (void *)*((void *)v7 + 12);
    v279 = (void *)*((void *)v7 + 13);
    v6[12] = v272;
    v6[13] = v279;
    v281 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v15 = v281[13];
    v276 = (char *)v6 + v15;
    v269 = &v7[v15];
    uint64_t v16 = sub_255EEE100();
    uint64_t v275 = *(void *)(v16 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v275 + 48);
    uint64_t v18 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = v272;
    id v20 = v279;
    v280 = v17;
    if (v17(v269, 1, v16))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v276, v269, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v22 = v275;
    }
    else
    {
      uint64_t v22 = v275;
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v276, v269, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v275 + 56))(v276, 0, 1, v16);
    }
    uint64_t v24 = v281[14];
    uint64_t v25 = (char *)v6 + v24;
    uint64_t v26 = &v7[v24];
    if (v280(&v7[v24], 1, v16))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v26, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v16);
    }
    uint64_t v28 = v281[15];
    id v29 = (void *)((char *)v6 + v28);
    uint64_t v30 = &v7[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *id v29 = *(void *)v30;
    v29[1] = v31;
    uint64_t v32 = v281[16];
    uint64_t v33 = (void *)((char *)v6 + v32);
    uint64_t v34 = &v7[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *uint64_t v33 = *(void *)v34;
    v33[1] = v35;
    *((unsigned char *)v6 + v281[17]) = v7[v281[17]];
    *((unsigned char *)v6 + v281[18]) = v7[v281[18]];
    uint64_t v36 = v281[19];
    uint64_t v37 = (char *)v6 + v36;
    uint64_t v38 = (uint64_t *)&v7[v36];
    unint64_t v39 = *(void *)&v7[v36 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    }
    else
    {
      uint64_t v40 = *v38;
      sub_255D80890(*v38, v39);
      *(void *)uint64_t v37 = v40;
      *((void *)v37 + 1) = v39;
    }
    uint64_t v41 = v281[20];
    uint64_t v42 = (char *)v6 + v41;
    uint64_t v43 = &v7[v41];
    uint64_t v44 = sub_255EEDF60();
    uint64_t v45 = *(void *)(v44 - 8);
    v270 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    if (v270(v43, 1, v44))
    {
      sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
      memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    uint64_t v47 = v281[21];
    uint64_t v48 = *(void **)&v7[v47];
    *(void *)((char *)v6 + v47) = v48;
    uint64_t v49 = v281[22];
    uint64_t v50 = (char *)v6 + v49;
    uint64_t v51 = &v7[v49];
    id v52 = v48;
    uint64_t v264 = v45;
    uint64_t v265 = v44;
    uint64_t v266 = v16;
    if (v280(v51, 1, v16))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v50, v51, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v50, 0, 1, v16);
    }
    uint64_t v54 = a3[6];
    uint64_t v55 = (char *)a1 + v54;
    uint64_t v56 = (char *)a2 + v54;
    uint64_t v57 = sub_255EEE280();
    v267 = *(void (**)(char *, char *))(*(void *)(v57 - 8) + 16);
    uint64_t v268 = v57;
    v267(v55, v56);
    uint64_t v58 = a3[7];
    uint64_t v59 = a3[8];
    uint64_t v60 = *(void **)((char *)a2 + v58);
    *(void **)((char *)a1 + v58) = v60;
    uint64_t v61 = (char *)a1 + v59;
    uint64_t v62 = (char *)a2 + v59;
    uint64_t v63 = sub_255EEE200();
    uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
    id v65 = v60;
    v271 = v64;
    uint64_t v273 = v63;
    v64(v61, v62, v63);
    uint64_t v66 = a3[9];
    uint64_t v67 = (char *)a1 + v66;
    uint64_t v68 = (char *)a2 + v66;
    uint64_t v69 = *(uint64_t *)((char *)a2 + v66 + 8);
    *(void *)uint64_t v67 = *(void **)((char *)a2 + v66);
    *((void *)v67 + 1) = v69;
    v255 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v258 = v68;
    uint64_t v70 = v255[5];
    v261 = v67;
    unint64_t v71 = &v67[v70];
    uint64_t v72 = &v68[v70];
    uint64_t v73 = *(void *)&v68[v70 + 8];
    *(void *)unint64_t v71 = *(void *)&v68[v70];
    *((void *)v71 + 1) = v73;
    uint64_t v75 = *(void *)&v68[v70 + 16];
    uint64_t v74 = *(void *)&v68[v70 + 24];
    *((void *)v71 + 2) = v75;
    *((void *)v71 + 3) = v74;
    uint64_t v76 = *((void *)v72 + 5);
    *((void *)v71 + 4) = *((void *)v72 + 4);
    *((void *)v71 + 5) = v76;
    uint64_t v77 = *((void *)v72 + 7);
    *((void *)v71 + 6) = *((void *)v72 + 6);
    *((void *)v71 + 7) = v77;
    uint64_t v78 = *((void *)v72 + 9);
    *((void *)v71 + 8) = *((void *)v72 + 8);
    *((void *)v71 + 9) = v78;
    uint64_t v79 = *((void *)v72 + 11);
    *((void *)v71 + 10) = *((void *)v72 + 10);
    *((void *)v71 + 11) = v79;
    uint64_t v80 = (void *)*((void *)v72 + 12);
    v251 = (void *)*((void *)v72 + 13);
    *((void *)v71 + 12) = v80;
    *((void *)v71 + 13) = v251;
    uint64_t v81 = v281[13];
    __dst = &v71[v81];
    uint64_t v82 = &v72[v81];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v83 = v80;
    id v84 = v251;
    if (v280(v82, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(__dst, v82, *(void *)(*(void *)(v85 - 8) + 64));
      uint64_t v86 = v275;
    }
    else
    {
      uint64_t v86 = v275;
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(__dst, v82, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v275 + 56))(__dst, 0, 1, v266);
    }
    uint64_t v87 = v281[14];
    uint64_t v88 = &v71[v87];
    uint64_t v89 = &v72[v87];
    if (v280(&v72[v87], 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v88, v89, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v88, 0, 1, v266);
    }
    uint64_t v91 = v281[15];
    uint64_t v92 = &v71[v91];
    uint64_t v93 = &v72[v91];
    uint64_t v94 = *((void *)v93 + 1);
    *(void *)uint64_t v92 = *(void *)v93;
    *((void *)v92 + 1) = v94;
    uint64_t v95 = v281[16];
    v96 = &v71[v95];
    id v97 = &v72[v95];
    uint64_t v98 = *((void *)v97 + 1);
    *(void *)v96 = *(void *)v97;
    *((void *)v96 + 1) = v98;
    v71[v281[17]] = v72[v281[17]];
    v71[v281[18]] = v72[v281[18]];
    uint64_t v99 = v281[19];
    uint64_t v100 = &v71[v99];
    v101 = (uint64_t *)&v72[v99];
    unint64_t v102 = *(void *)&v72[v99 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v102 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
    }
    else
    {
      uint64_t v103 = *v101;
      sub_255D80890(*v101, v102);
      *(void *)uint64_t v100 = v103;
      *((void *)v100 + 1) = v102;
    }
    uint64_t v104 = v281[20];
    uint64_t v105 = &v71[v104];
    v106 = &v72[v104];
    if (v270(&v72[v104], 1, v265))
    {
      sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
      memcpy(v105, v106, *(void *)(*(void *)(v107 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v105, v106, v265);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v264 + 56))(v105, 0, 1, v265);
    }
    uint64_t v108 = v281[21];
    v109 = *(void **)&v72[v108];
    *(void *)&v71[v108] = v109;
    uint64_t v110 = v281[22];
    v111 = &v71[v110];
    v112 = &v72[v110];
    id v113 = v109;
    if (v280(v112, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v111, v112, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v111, v112, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v111, 0, 1, v266);
    }
    v271(&v261[v255[6]], &v258[v255[6]], v273);
    uint64_t v115 = v255[7];
    v116 = &v261[v115];
    v117 = &v258[v115];
    v271(&v261[v115], &v258[v115], v273);
    uint64_t v118 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    v119 = *(void **)&v117[v118];
    *(void *)&v116[v118] = v119;
    uint64_t v120 = v255[8];
    v121 = &v261[v120];
    v122 = &v258[v120];
    id v123 = v119;
    v271(v121, v122, v273);
    uint64_t v124 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v125 = *(int *)(v124 + 20);
    v126 = *(void **)&v122[v125];
    *(void *)&v121[v125] = v126;
    uint64_t v127 = *(int *)(v124 + 24);
    v256 = *(void **)&v122[v127];
    *(void *)&v121[v127] = v256;
    uint64_t v128 = a3[10];
    v129 = (void **)((char *)a1 + v128);
    v130 = (char *)a2 + v128;
    uint64_t v131 = *(uint64_t *)((char *)a2 + v128 + 8);
    void *v129 = *(void **)((char *)a2 + v128);
    v129[1] = v131;
    uint64_t v133 = *(uint64_t *)((char *)a2 + v128 + 16);
    uint64_t v132 = *(uint64_t *)((char *)a2 + v128 + 24);
    v129[2] = v133;
    v129[3] = v132;
    uint64_t v134 = *((void *)v130 + 5);
    v129[4] = *((void *)v130 + 4);
    v129[5] = v134;
    uint64_t v135 = *((void *)v130 + 7);
    v129[6] = *((void *)v130 + 6);
    v129[7] = v135;
    uint64_t v136 = *((void *)v130 + 9);
    v129[8] = *((void *)v130 + 8);
    v129[9] = v136;
    uint64_t v137 = *((void *)v130 + 11);
    v129[10] = *((void *)v130 + 10);
    v129[11] = v137;
    v138 = (void *)*((void *)v130 + 12);
    v259 = (void *)*((void *)v130 + 13);
    v129[12] = v138;
    v129[13] = v259;
    uint64_t v139 = v281[13];
    v262 = (char *)v129 + v139;
    v140 = &v130[v139];
    id v141 = v126;
    id v142 = v256;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v143 = v138;
    id v144 = v259;
    if (v280(v140, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v262, v140, *(void *)(*(void *)(v145 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v262, v140, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v275 + 56))(v262, 0, 1, v266);
    }
    uint64_t v146 = v281[14];
    v147 = (char *)v129 + v146;
    v148 = &v130[v146];
    if (v280(&v130[v146], 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v147, v148, *(void *)(*(void *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v147, v148, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v275 + 56))(v147, 0, 1, v266);
    }
    uint64_t v150 = v281[15];
    v151 = (void *)((char *)v129 + v150);
    v152 = &v130[v150];
    uint64_t v153 = *((void *)v152 + 1);
    void *v151 = *(void *)v152;
    v151[1] = v153;
    uint64_t v154 = v281[16];
    v155 = (void *)((char *)v129 + v154);
    v156 = &v130[v154];
    uint64_t v157 = *((void *)v156 + 1);
    void *v155 = *(void *)v156;
    v155[1] = v157;
    *((unsigned char *)v129 + v281[17]) = v130[v281[17]];
    *((unsigned char *)v129 + v281[18]) = v130[v281[18]];
    uint64_t v158 = v281[19];
    v159 = (char *)v129 + v158;
    v160 = (uint64_t *)&v130[v158];
    unint64_t v161 = *(void *)&v130[v158 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v161 >> 60 == 15)
    {
      *(_OWORD *)v159 = *(_OWORD *)v160;
    }
    else
    {
      uint64_t v162 = *v160;
      sub_255D80890(*v160, v161);
      *(void *)v159 = v162;
      *((void *)v159 + 1) = v161;
    }
    uint64_t v163 = v281[20];
    v164 = (char *)v129 + v163;
    v165 = &v130[v163];
    if (v270(&v130[v163], 1, v265))
    {
      sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
      memcpy(v164, v165, *(void *)(*(void *)(v166 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v164, v165, v265);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v264 + 56))(v164, 0, 1, v265);
    }
    uint64_t v167 = v281[21];
    v168 = *(void **)&v130[v167];
    *(void *)((char *)v129 + v167) = v168;
    uint64_t v169 = v281[22];
    v170 = (char *)v129 + v169;
    v171 = &v130[v169];
    id v172 = v168;
    if (v280(v171, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v170, v171, *(void *)(*(void *)(v173 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v170, v171, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v275 + 56))(v170, 0, 1, v266);
    }
    v174 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v267)((char *)v129 + v174[5], &v130[v174[5]], v268);
    v271((char *)v129 + v174[6], &v130[v174[6]], v273);
    uint64_t v175 = v174[7];
    v176 = *(void **)&v130[v175];
    *(void *)((char *)v129 + v175) = v176;
    uint64_t v177 = v174[8];
    v178 = *(void **)&v130[v177];
    *(void *)((char *)v129 + v177) = v178;
    uint64_t v179 = v174[9];
    v180 = (void *)((char *)v129 + v179);
    v181 = &v130[v179];
    uint64_t v182 = *((void *)v181 + 1);
    void *v180 = *(void *)v181;
    v180[1] = v182;
    uint64_t v183 = a3[11];
    v184 = (char *)a1 + v183;
    v185 = (char *)a2 + v183;
    v186 = *(void **)((char *)a2 + v183);
    *(void **)((char *)a1 + v183) = v186;
    uint64_t v187 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v188 = *(int *)(v187 + 20);
    v189 = &v184[v188];
    v190 = &v185[v188];
    id v191 = v176;
    id v192 = v178;
    swift_bridgeObjectRetain();
    id v193 = v186;
    ((void (*)(char *, char *, uint64_t))v267)(v189, v190, v268);
    v271(&v184[*(int *)(v187 + 24)], &v185[*(int *)(v187 + 24)], v273);
    uint64_t v194 = a3[12];
    v195 = (char *)a1 + v194;
    v196 = (char *)a2 + v194;
    uint64_t v197 = *(uint64_t *)((char *)a2 + v194 + 8);
    *(void *)v195 = *(void **)((char *)a2 + v194);
    *((void *)v195 + 1) = v197;
    v257 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v260 = v195;
    uint64_t v198 = v257[5];
    v199 = &v195[v198];
    v263 = v196;
    v200 = &v196[v198];
    uint64_t v201 = *(void *)&v196[v198];
    uint64_t v202 = *((void *)v200 + 1);
    char *v199 = v201;
    v199[1] = v202;
    uint64_t v203 = *((void *)v200 + 3);
    v199[2] = *((void *)v200 + 2);
    v199[3] = v203;
    uint64_t v204 = *((void *)v200 + 5);
    v199[4] = *((void *)v200 + 4);
    v199[5] = v204;
    uint64_t v205 = *((void *)v200 + 7);
    v199[6] = *((void *)v200 + 6);
    v199[7] = v205;
    uint64_t v206 = *((void *)v200 + 9);
    v199[8] = *((void *)v200 + 8);
    v199[9] = v206;
    uint64_t v207 = *((void *)v200 + 11);
    v199[10] = *((void *)v200 + 10);
    v199[11] = v207;
    v208 = (void *)*((void *)v200 + 12);
    v252 = (void *)*((void *)v200 + 13);
    v199[12] = v208;
    v199[13] = v252;
    uint64_t v209 = v281[13];
    __dsta = (char *)v199 + v209;
    v210 = &v200[v209];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v211 = v208;
    id v212 = v252;
    if (v280(v210, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(__dsta, v210, *(void *)(*(void *)(v213 - 8) + 64));
      uint64_t v214 = v275;
    }
    else
    {
      uint64_t v214 = v275;
      (*(void (**)(char *, char *, uint64_t))(v275 + 16))(__dsta, v210, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v275 + 56))(__dsta, 0, 1, v266);
    }
    uint64_t v215 = v281[14];
    v216 = (char *)v199 + v215;
    v217 = &v200[v215];
    if (v280(&v200[v215], 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v216, v217, *(void *)(*(void *)(v218 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v216, v217, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v214 + 56))(v216, 0, 1, v266);
    }
    uint64_t v219 = v281[15];
    v220 = (void *)((char *)v199 + v219);
    v221 = &v200[v219];
    uint64_t v222 = *((void *)v221 + 1);
    void *v220 = *(void *)v221;
    v220[1] = v222;
    uint64_t v223 = v281[16];
    v224 = (void *)((char *)v199 + v223);
    v225 = &v200[v223];
    uint64_t v226 = *((void *)v225 + 1);
    void *v224 = *(void *)v225;
    v224[1] = v226;
    *((unsigned char *)v199 + v281[17]) = v200[v281[17]];
    *((unsigned char *)v199 + v281[18]) = v200[v281[18]];
    uint64_t v227 = v281[19];
    v228 = (char *)v199 + v227;
    v229 = (uint64_t *)&v200[v227];
    unint64_t v230 = *(void *)&v200[v227 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v230 >> 60 == 15)
    {
      *(_OWORD *)v228 = *(_OWORD *)v229;
    }
    else
    {
      uint64_t v231 = *v229;
      sub_255D80890(*v229, v230);
      *(void *)v228 = v231;
      *((void *)v228 + 1) = v230;
    }
    uint64_t v232 = v281[20];
    v233 = (char *)v199 + v232;
    v234 = &v200[v232];
    if (v270(&v200[v232], 1, v265))
    {
      sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
      memcpy(v233, v234, *(void *)(*(void *)(v235 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v264 + 16))(v233, v234, v265);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v264 + 56))(v233, 0, 1, v265);
    }
    uint64_t v236 = v281[21];
    v237 = *(void **)&v200[v236];
    *(void *)((char *)v199 + v236) = v237;
    uint64_t v238 = v281[22];
    v239 = (char *)v199 + v238;
    v240 = &v200[v238];
    id v241 = v237;
    if (v280(v240, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v239, v240, *(void *)(*(void *)(v242 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v239, v240, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v214 + 56))(v239, 0, 1, v266);
    }
    uint64_t v23 = a1;
    ((void (*)(char *, char *, uint64_t))v267)(&v260[v257[6]], &v263[v257[6]], v268);
    v271(&v260[v257[7]], &v263[v257[7]], v273);
    *(void *)&v260[v257[8]] = *(void *)&v263[v257[8]];
    uint64_t v243 = v257[9];
    v244 = &v260[v243];
    v245 = &v263[v243];
    swift_retain();
    if (v280(v245, 1, v266))
    {
      sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
      memcpy(v244, v245, *(void *)(*(void *)(v246 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v244, v245, v266);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v214 + 56))(v244, 0, 1, v266);
    }
    uint64_t v247 = a3[13];
    v248 = *(void **)((char *)a2 + v247);
    *(void **)((char *)a1 + v247) = v248;
    id v249 = v248;
  }
  return v23;
}

void sub_255D8D508(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EF01E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void destroy for MedicalIDDataViewModel(id *a1, int *a2)
{
  uint64_t v59 = a2;
  unint64_t v4 = (id *)((char *)a1 + a2[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  unsigned int v6 = (char *)v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v6, v7);
  }
  uint64_t v9 = (char *)v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)((char *)v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = (char *)v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v51 = *(void *)(v13 - 8);
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (!v57(v12, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v13);
  }

  uint64_t v14 = (char *)v4 + v5[22];
  if (!v8(v14, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v14, v7);
  }
  uint64_t v15 = (char *)a1 + v59[6];
  uint64_t v52 = sub_255EEE280();
  uint64_t v53 = (void (**)(char *))(*(void *)(v52 - 8) + 8);
  uint64_t v54 = *v53;
  (*v53)(v15);

  uint64_t v16 = (char *)a1 + v59[8];
  uint64_t v17 = sub_255EEE200();
  uint64_t v55 = *(void (**)(char *))(*(void *)(v17 - 8) + 8);
  uint64_t v56 = v17;
  v55(v16);
  uint64_t v58 = a1;
  uint64_t v18 = (char *)a1 + v59[9];
  swift_bridgeObjectRelease();
  id v19 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  id v20 = &v18[v19[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v21 = &v20[v5[13]];
  if (!v8(v21, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v7);
  }
  uint64_t v22 = &v20[v5[14]];
  if (!v8(v22, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t *)&v20[v5[19]];
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_255D80D04(*v23, v24);
  }
  uint64_t v25 = &v20[v5[20]];
  if (!v57(v25, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v25, v13);
  }

  uint64_t v26 = &v20[v5[22]];
  if (!v8(v26, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v26, v7);
  }
  ((void (*)(char *, uint64_t))v55)(&v18[v19[6]], v56);
  uint64_t v27 = &v18[v19[7]];
  ((void (*)(char *, uint64_t))v55)(v27, v56);

  uint64_t v28 = &v18[v19[8]];
  ((void (*)(char *, uint64_t))v55)(v28, v56);
  uint64_t v29 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v30 = (id *)((char *)v58 + v59[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v31 = (char *)v30 + v5[13];
  if (!v8(v31, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v7);
  }
  uint64_t v32 = (char *)v30 + v5[14];
  if (!v8(v32, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = (uint64_t *)((char *)v30 + v5[19]);
  unint64_t v34 = v33[1];
  if (v34 >> 60 != 15) {
    sub_255D80D04(*v33, v34);
  }
  uint64_t v35 = (char *)v30 + v5[20];
  if (!v57(v35, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v13);
  }

  uint64_t v36 = (char *)v30 + v5[22];
  if (!v8(v36, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v7);
  }
  uint64_t v37 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v54)((char *)v30 + v37[5], v52);
  ((void (*)(char *, uint64_t))v55)((char *)v30 + v37[6], v56);

  swift_bridgeObjectRelease();
  uint64_t v38 = (id *)((char *)v58 + v59[11]);

  uint64_t v39 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v54)((char *)v38 + *(int *)(v39 + 20), v52);
  ((void (*)(char *, uint64_t))v55)((char *)v38 + *(int *)(v39 + 24), v56);
  uint64_t v40 = (char *)v58 + v59[12];
  swift_bridgeObjectRelease();
  uint64_t v41 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v42 = &v40[v41[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v43 = &v42[v5[13]];
  if (!v8(v43, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v7);
  }
  uint64_t v44 = &v42[v5[14]];
  if (!v8(v44, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v44, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = (uint64_t *)&v42[v5[19]];
  unint64_t v46 = v45[1];
  if (v46 >> 60 != 15) {
    sub_255D80D04(*v45, v46);
  }
  uint64_t v47 = &v42[v5[20]];
  if (!v57(v47, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v13);
  }

  uint64_t v48 = &v42[v5[22]];
  if (!v8(v48, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v7);
  }
  ((void (*)(char *, uint64_t))v54)(&v40[v41[6]], v52);
  ((void (*)(char *, uint64_t))v55)(&v40[v41[7]], v56);
  swift_release();
  uint64_t v49 = &v40[v41[9]];
  if (!v8(v49, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v7);
  }
  uint64_t v50 = *(id *)((char *)v58 + v59[13]);
}

void **initializeWithCopy for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  v272 = *a2;
  *a1 = *a2;
  uint64_t v3 = a3[5];
  unint64_t v4 = (void **)((char *)a1 + v3);
  uint64_t v5 = (char *)a2 + v3;
  uint64_t v6 = *(uint64_t *)((char *)a2 + v3 + 8);
  *unint64_t v4 = *(void **)((char *)a2 + v3);
  v4[1] = v6;
  uint64_t v8 = *(uint64_t *)((char *)a2 + v3 + 16);
  uint64_t v7 = *(uint64_t *)((char *)a2 + v3 + 24);
  v4[2] = v8;
  v4[3] = v7;
  uint64_t v9 = *((void *)v5 + 5);
  v4[4] = *((void *)v5 + 4);
  v4[5] = v9;
  uint64_t v10 = *((void *)v5 + 7);
  v4[6] = *((void *)v5 + 6);
  v4[7] = v10;
  uint64_t v11 = *((void *)v5 + 9);
  v4[8] = *((void *)v5 + 8);
  v4[9] = v11;
  uint64_t v12 = *((void *)v5 + 11);
  v4[10] = *((void *)v5 + 10);
  v4[11] = v12;
  v270 = (void *)*((void *)v5 + 12);
  uint64_t v275 = (void *)*((void *)v5 + 13);
  v4[12] = v270;
  v4[13] = v275;
  v280 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v13 = v280[13];
  v277 = (char *)v4 + v13;
  v267 = &v5[v13];
  uint64_t v14 = sub_255EEE100();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  id v17 = v272;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v270;
  id v19 = v275;
  uint64_t v269 = v15;
  if (v16(v267, 1, v14))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v277, v267, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v277, v267, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v277, 0, 1, v14);
  }
  uint64_t v21 = v280[14];
  uint64_t v22 = (char *)v4 + v21;
  uint64_t v23 = &v5[v21];
  if (v16(&v5[v21], 1, v14))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v22, v23, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v22, 0, 1, v14);
  }
  uint64_t v25 = v280[15];
  uint64_t v26 = (void *)((char *)v4 + v25);
  uint64_t v27 = &v5[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *uint64_t v26 = *(void *)v27;
  v26[1] = v28;
  uint64_t v29 = v280[16];
  uint64_t v30 = (void *)((char *)v4 + v29);
  uint64_t v31 = &v5[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *uint64_t v30 = *(void *)v31;
  v30[1] = v32;
  *((unsigned char *)v4 + v280[17]) = v5[v280[17]];
  *((unsigned char *)v4 + v280[18]) = v5[v280[18]];
  uint64_t v33 = v280[19];
  unint64_t v34 = (char *)v4 + v33;
  uint64_t v35 = (uint64_t *)&v5[v33];
  unint64_t v36 = *(void *)&v5[v33 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
  }
  else
  {
    uint64_t v37 = *v35;
    sub_255D80890(*v35, v36);
    *(void *)unint64_t v34 = v37;
    *((void *)v34 + 1) = v36;
  }
  uint64_t v38 = v280[20];
  uint64_t v39 = (char *)v4 + v38;
  uint64_t v40 = &v5[v38];
  uint64_t v41 = sub_255EEDF60();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v268 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (v268(v40, 1, v41))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  uint64_t v263 = v41;
  uint64_t v44 = v280[21];
  uint64_t v45 = *(void **)&v5[v44];
  *(void *)((char *)v4 + v44) = v45;
  uint64_t v46 = v280[22];
  uint64_t v47 = (char *)v4 + v46;
  uint64_t v48 = &v5[v46];
  id v49 = v45;
  v276 = v16;
  uint64_t v262 = v42;
  uint64_t v264 = v14;
  if (v16(v48, 1, v14))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v47, v48, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v47, 0, 1, v14);
  }
  uint64_t v51 = a3[6];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)a2 + v51;
  uint64_t v54 = sub_255EEE280();
  uint64_t v265 = *(void (**)(char *, char *))(*(void *)(v54 - 8) + 16);
  uint64_t v266 = v54;
  v265(v52, v53);
  uint64_t v55 = a3[7];
  uint64_t v56 = a3[8];
  uint64_t v57 = *(void **)((char *)a2 + v55);
  *(void **)((char *)a1 + v55) = v57;
  uint64_t v58 = (char *)a1 + v56;
  uint64_t v59 = (char *)a2 + v56;
  uint64_t v60 = sub_255EEE200();
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
  id v62 = v57;
  v271 = v61;
  uint64_t v273 = v60;
  v61(v58, v59, v60);
  uint64_t v63 = a3[9];
  uint64_t v64 = (char *)a1 + v63;
  id v65 = (char *)a2 + v63;
  uint64_t v66 = *(uint64_t *)((char *)a2 + v63 + 8);
  *(void *)uint64_t v64 = *(void **)((char *)a2 + v63);
  *((void *)v64 + 1) = v66;
  v253 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v256 = v65;
  uint64_t v67 = v253[5];
  v259 = v64;
  uint64_t v68 = &v64[v67];
  uint64_t v69 = &v65[v67];
  uint64_t v70 = *(void *)&v65[v67 + 8];
  *(void *)uint64_t v68 = *(void *)&v65[v67];
  *((void *)v68 + 1) = v70;
  uint64_t v72 = *(void *)&v65[v67 + 16];
  uint64_t v71 = *(void *)&v65[v67 + 24];
  *((void *)v68 + 2) = v72;
  *((void *)v68 + 3) = v71;
  uint64_t v73 = *((void *)v69 + 5);
  *((void *)v68 + 4) = *((void *)v69 + 4);
  *((void *)v68 + 5) = v73;
  uint64_t v74 = *((void *)v69 + 7);
  *((void *)v68 + 6) = *((void *)v69 + 6);
  *((void *)v68 + 7) = v74;
  uint64_t v75 = *((void *)v69 + 9);
  *((void *)v68 + 8) = *((void *)v69 + 8);
  *((void *)v68 + 9) = v75;
  uint64_t v76 = *((void *)v69 + 11);
  *((void *)v68 + 10) = *((void *)v69 + 10);
  *((void *)v68 + 11) = v76;
  uint64_t v77 = (void *)*((void *)v69 + 12);
  id v249 = (void *)*((void *)v69 + 13);
  *((void *)v68 + 12) = v77;
  *((void *)v68 + 13) = v249;
  uint64_t v78 = v280[13];
  __dst = &v68[v78];
  uint64_t v79 = &v69[v78];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v80 = v77;
  id v81 = v249;
  if (v16(v79, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(__dst, v79, *(void *)(*(void *)(v82 - 8) + 64));
    uint64_t v83 = v269;
  }
  else
  {
    uint64_t v83 = v269;
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(__dst, v79, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(__dst, 0, 1, v264);
  }
  uint64_t v84 = v280[14];
  uint64_t v85 = &v68[v84];
  uint64_t v86 = &v69[v84];
  if (v16(&v69[v84], 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v85, v86, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v264);
  }
  uint64_t v88 = v280[15];
  uint64_t v89 = &v68[v88];
  uint64_t v90 = &v69[v88];
  uint64_t v91 = *((void *)v90 + 1);
  *(void *)uint64_t v89 = *(void *)v90;
  *((void *)v89 + 1) = v91;
  uint64_t v92 = v280[16];
  uint64_t v93 = &v68[v92];
  uint64_t v94 = &v69[v92];
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)uint64_t v93 = *(void *)v94;
  *((void *)v93 + 1) = v95;
  v68[v280[17]] = v69[v280[17]];
  v68[v280[18]] = v69[v280[18]];
  uint64_t v96 = v280[19];
  id v97 = &v68[v96];
  uint64_t v98 = (uint64_t *)&v69[v96];
  unint64_t v99 = *(void *)&v69[v96 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v99 >> 60 == 15)
  {
    *(_OWORD *)id v97 = *(_OWORD *)v98;
  }
  else
  {
    uint64_t v100 = *v98;
    sub_255D80890(*v98, v99);
    *(void *)id v97 = v100;
    *((void *)v97 + 1) = v99;
  }
  uint64_t v101 = v280[20];
  unint64_t v102 = &v68[v101];
  uint64_t v103 = &v69[v101];
  if (v268(&v69[v101], 1, v263))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v102, v103, v263);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v102, 0, 1, v263);
  }
  uint64_t v105 = v280[21];
  v106 = *(void **)&v69[v105];
  *(void *)&v68[v105] = v106;
  uint64_t v107 = v280[22];
  uint64_t v108 = &v68[v107];
  v109 = &v69[v107];
  id v110 = v106;
  if (v16(v109, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v108, v109, *(void *)(*(void *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v108, v109, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v108, 0, 1, v264);
  }
  v61(&v259[v253[6]], &v256[v253[6]], v273);
  uint64_t v112 = v253[7];
  id v113 = &v259[v112];
  uint64_t v114 = &v256[v112];
  v61(&v259[v112], &v256[v112], v273);
  uint64_t v115 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  v116 = *(void **)&v114[v115];
  *(void *)&v113[v115] = v116;
  uint64_t v117 = v253[8];
  uint64_t v118 = &v259[v117];
  v119 = &v256[v117];
  id v120 = v116;
  v61(v118, v119, v273);
  uint64_t v121 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v122 = *(int *)(v121 + 20);
  id v123 = *(void **)&v119[v122];
  *(void *)&v118[v122] = v123;
  uint64_t v124 = *(int *)(v121 + 24);
  v254 = *(void **)&v119[v124];
  *(void *)&v118[v124] = v254;
  uint64_t v125 = a3[10];
  v126 = (void **)((char *)a1 + v125);
  uint64_t v127 = (char *)a2 + v125;
  uint64_t v128 = *(uint64_t *)((char *)a2 + v125 + 8);
  void *v126 = *(void **)((char *)a2 + v125);
  v126[1] = v128;
  uint64_t v130 = *(uint64_t *)((char *)a2 + v125 + 16);
  uint64_t v129 = *(uint64_t *)((char *)a2 + v125 + 24);
  v126[2] = v130;
  v126[3] = v129;
  uint64_t v131 = *((void *)v127 + 5);
  v126[4] = *((void *)v127 + 4);
  v126[5] = v131;
  uint64_t v132 = *((void *)v127 + 7);
  v126[6] = *((void *)v127 + 6);
  v126[7] = v132;
  uint64_t v133 = *((void *)v127 + 9);
  v126[8] = *((void *)v127 + 8);
  v126[9] = v133;
  uint64_t v134 = *((void *)v127 + 11);
  v126[10] = *((void *)v127 + 10);
  v126[11] = v134;
  uint64_t v135 = (void *)*((void *)v127 + 12);
  v257 = (void *)*((void *)v127 + 13);
  v126[12] = v135;
  v126[13] = v257;
  uint64_t v136 = v280[13];
  v260 = (char *)v126 + v136;
  uint64_t v137 = &v127[v136];
  id v138 = v123;
  id v139 = v254;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v140 = v135;
  id v141 = v257;
  if (v276(v137, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v260, v137, *(void *)(*(void *)(v142 - 8) + 64));
    uint64_t v143 = v269;
  }
  else
  {
    uint64_t v143 = v269;
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(v260, v137, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v260, 0, 1, v264);
  }
  uint64_t v144 = v280[14];
  uint64_t v145 = (char *)v126 + v144;
  uint64_t v146 = &v127[v144];
  if (v276(&v127[v144], 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v145, v146, *(void *)(*(void *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v145, v146, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v145, 0, 1, v264);
  }
  uint64_t v148 = v280[15];
  uint64_t v149 = (void *)((char *)v126 + v148);
  uint64_t v150 = &v127[v148];
  uint64_t v151 = *((void *)v150 + 1);
  *uint64_t v149 = *(void *)v150;
  v149[1] = v151;
  uint64_t v152 = v280[16];
  uint64_t v153 = (void *)((char *)v126 + v152);
  uint64_t v154 = &v127[v152];
  uint64_t v155 = *((void *)v154 + 1);
  *uint64_t v153 = *(void *)v154;
  v153[1] = v155;
  *((unsigned char *)v126 + v280[17]) = v127[v280[17]];
  *((unsigned char *)v126 + v280[18]) = v127[v280[18]];
  uint64_t v156 = v280[19];
  uint64_t v157 = (char *)v126 + v156;
  uint64_t v158 = (uint64_t *)&v127[v156];
  unint64_t v159 = *(void *)&v127[v156 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v159 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
  }
  else
  {
    uint64_t v160 = *v158;
    sub_255D80890(*v158, v159);
    *(void *)uint64_t v157 = v160;
    *((void *)v157 + 1) = v159;
  }
  uint64_t v161 = v280[20];
  uint64_t v162 = (char *)v126 + v161;
  uint64_t v163 = &v127[v161];
  if (v268(&v127[v161], 1, v263))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v162, v163, *(void *)(*(void *)(v164 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v162, v163, v263);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v162, 0, 1, v263);
  }
  uint64_t v165 = v280[21];
  uint64_t v166 = *(void **)&v127[v165];
  *(void *)((char *)v126 + v165) = v166;
  uint64_t v167 = v280[22];
  v168 = (char *)v126 + v167;
  uint64_t v169 = &v127[v167];
  id v170 = v166;
  if (v276(v169, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v168, v169, *(void *)(*(void *)(v171 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v168, v169, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v168, 0, 1, v264);
  }
  id v172 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v265)((char *)v126 + v172[5], &v127[v172[5]], v266);
  v271((char *)v126 + v172[6], &v127[v172[6]], v273);
  uint64_t v173 = v172[7];
  v174 = *(void **)&v127[v173];
  *(void *)((char *)v126 + v173) = v174;
  uint64_t v175 = v172[8];
  v176 = *(void **)&v127[v175];
  *(void *)((char *)v126 + v175) = v176;
  uint64_t v177 = v172[9];
  v178 = (void *)((char *)v126 + v177);
  uint64_t v179 = &v127[v177];
  uint64_t v180 = *((void *)v179 + 1);
  void *v178 = *(void *)v179;
  v178[1] = v180;
  uint64_t v181 = a3[11];
  uint64_t v182 = (char *)a1 + v181;
  uint64_t v183 = (char *)a2 + v181;
  v184 = *(void **)((char *)a2 + v181);
  *(void **)((char *)a1 + v181) = v184;
  uint64_t v185 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v186 = *(int *)(v185 + 20);
  uint64_t v187 = &v182[v186];
  uint64_t v188 = &v183[v186];
  id v189 = v174;
  id v190 = v176;
  swift_bridgeObjectRetain();
  id v191 = v184;
  ((void (*)(char *, char *, uint64_t))v265)(v187, v188, v266);
  v271(&v182[*(int *)(v185 + 24)], &v183[*(int *)(v185 + 24)], v273);
  uint64_t v192 = a3[12];
  id v193 = (char *)a1 + v192;
  uint64_t v194 = (char *)a2 + v192;
  uint64_t v195 = *(uint64_t *)((char *)a2 + v192 + 8);
  *(void *)id v193 = *(void **)((char *)a2 + v192);
  *((void *)v193 + 1) = v195;
  v255 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v258 = v193;
  uint64_t v196 = v255[5];
  uint64_t v197 = &v193[v196];
  v261 = v194;
  uint64_t v198 = &v194[v196];
  uint64_t v199 = *(void *)&v194[v196];
  uint64_t v200 = *((void *)v198 + 1);
  *uint64_t v197 = v199;
  v197[1] = v200;
  uint64_t v201 = *((void *)v198 + 3);
  v197[2] = *((void *)v198 + 2);
  v197[3] = v201;
  uint64_t v202 = *((void *)v198 + 5);
  v197[4] = *((void *)v198 + 4);
  v197[5] = v202;
  uint64_t v203 = *((void *)v198 + 7);
  v197[6] = *((void *)v198 + 6);
  v197[7] = v203;
  uint64_t v204 = *((void *)v198 + 9);
  v197[8] = *((void *)v198 + 8);
  v197[9] = v204;
  uint64_t v205 = *((void *)v198 + 11);
  v197[10] = *((void *)v198 + 10);
  v197[11] = v205;
  uint64_t v206 = (void *)*((void *)v198 + 12);
  v250 = (void *)*((void *)v198 + 13);
  v197[12] = v206;
  v197[13] = v250;
  uint64_t v207 = v280[13];
  __dsta = (char *)v197 + v207;
  v208 = &v198[v207];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v209 = v206;
  id v210 = v250;
  if (v276(v208, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(__dsta, v208, *(void *)(*(void *)(v211 - 8) + 64));
    uint64_t v212 = v269;
  }
  else
  {
    uint64_t v212 = v269;
    (*(void (**)(char *, char *, uint64_t))(v269 + 16))(__dsta, v208, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(__dsta, 0, 1, v264);
  }
  uint64_t v213 = v280[14];
  uint64_t v214 = (char *)v197 + v213;
  uint64_t v215 = &v198[v213];
  if (v276(&v198[v213], 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v214, v215, *(void *)(*(void *)(v216 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v214, v215, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v212 + 56))(v214, 0, 1, v264);
  }
  uint64_t v217 = v280[15];
  uint64_t v218 = (void *)((char *)v197 + v217);
  uint64_t v219 = &v198[v217];
  uint64_t v220 = *((void *)v219 + 1);
  *uint64_t v218 = *(void *)v219;
  v218[1] = v220;
  uint64_t v221 = v280[16];
  uint64_t v222 = (void *)((char *)v197 + v221);
  uint64_t v223 = &v198[v221];
  uint64_t v224 = *((void *)v223 + 1);
  *uint64_t v222 = *(void *)v223;
  v222[1] = v224;
  *((unsigned char *)v197 + v280[17]) = v198[v280[17]];
  *((unsigned char *)v197 + v280[18]) = v198[v280[18]];
  uint64_t v225 = v280[19];
  uint64_t v226 = (char *)v197 + v225;
  uint64_t v227 = (uint64_t *)&v198[v225];
  unint64_t v228 = *(void *)&v198[v225 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v228 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
  }
  else
  {
    uint64_t v229 = *v227;
    sub_255D80890(*v227, v228);
    *(void *)uint64_t v226 = v229;
    *((void *)v226 + 1) = v228;
  }
  uint64_t v230 = v280[20];
  uint64_t v231 = (char *)v197 + v230;
  uint64_t v232 = &v198[v230];
  if (v268(&v198[v230], 1, v263))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v231, v232, *(void *)(*(void *)(v233 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v231, v232, v263);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v231, 0, 1, v263);
  }
  uint64_t v234 = v280[21];
  uint64_t v235 = *(void **)&v198[v234];
  *(void *)((char *)v197 + v234) = v235;
  uint64_t v236 = v280[22];
  v237 = (char *)v197 + v236;
  uint64_t v238 = &v198[v236];
  id v239 = v235;
  if (v276(v238, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v237, v238, *(void *)(*(void *)(v240 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v237, v238, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v212 + 56))(v237, 0, 1, v264);
  }
  ((void (*)(char *, char *, uint64_t))v265)(&v258[v255[6]], &v261[v255[6]], v266);
  v271(&v258[v255[7]], &v261[v255[7]], v273);
  *(void *)&v258[v255[8]] = *(void *)&v261[v255[8]];
  uint64_t v241 = v255[9];
  uint64_t v242 = &v258[v241];
  uint64_t v243 = &v261[v241];
  swift_retain();
  if (v276(v243, 1, v264))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v242, v243, *(void *)(*(void *)(v244 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v242, v243, v264);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v212 + 56))(v242, 0, 1, v264);
  }
  uint64_t v245 = a3[13];
  uint64_t v246 = *(void **)((char *)a2 + v245);
  *(void **)((char *)a1 + v245) = v246;
  id v247 = v246;
  return a1;
}

void **assignWithCopy for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  v293 = a3;
  v294 = a2;
  uint64_t v9 = a3[5];
  v295 = a1;
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (void **)((char *)a2 + v9);
  *(void *)uint64_t v10 = *v11;
  *((void *)v10 + 1) = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 2) = v11[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 3) = v11[3];
  *((void *)v10 + 4) = v11[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 5) = v11[5];
  *((void *)v10 + 6) = v11[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 7) = v11[7];
  *((void *)v10 + 8) = v11[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 9) = v11[9];
  *((void *)v10 + 10) = v11[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 11) = v11[11];
  uint64_t v12 = (void *)*((void *)v10 + 12);
  uint64_t v13 = (void *)v11[12];
  *((void *)v10 + 12) = v13;
  id v14 = v13;

  uint64_t v15 = (void *)*((void *)v10 + 13);
  uint64_t v16 = (void *)v11[13];
  *((void *)v10 + 13) = v16;
  id v17 = v16;

  id v18 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v19 = v18[13];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = (char *)v11 + v19;
  uint64_t v22 = sub_255EEE100();
  uint64_t v297 = *(void *)(v22 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v297 + 48);
  int v24 = v23(v20, 1, v22);
  v298 = v23;
  int v25 = v23(v21, 1, v22);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v20, v22);
LABEL_6:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v20, v21, v22);
LABEL_7:
  uint64_t v27 = v18[14];
  uint64_t v28 = &v10[v27];
  uint64_t v29 = (char *)v11 + v27;
  int v30 = v23(&v10[v27], 1, v22);
  int v31 = v23(v29, 1, v22);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v28, v29, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v28, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v28, v22);
LABEL_12:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v28, v29, v22);
LABEL_13:
  uint64_t v33 = v18[15];
  unint64_t v34 = &v10[v33];
  uint64_t v35 = (void *)((char *)v11 + v33);
  *(void *)unint64_t v34 = *v35;
  *((void *)v34 + 1) = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = v18[16];
  uint64_t v37 = &v10[v36];
  uint64_t v38 = (void *)((char *)v11 + v36);
  *(void *)uint64_t v37 = *v38;
  *((void *)v37 + 1) = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v18[17]] = *((unsigned char *)v11 + v18[17]);
  v10[v18[18]] = *((unsigned char *)v11 + v18[18]);
  uint64_t v39 = v18[19];
  uint64_t v40 = (uint64_t *)&v10[v39];
  uint64_t v41 = (void *)((char *)v11 + v39);
  unint64_t v42 = *(void *)((char *)v11 + v39 + 8);
  if (*(void *)&v10[v39 + 8] >> 60 == 15)
  {
    if (v42 >> 60 != 15)
    {
      uint64_t v43 = *v41;
      sub_255D80890(*v41, v42);
      uint64_t *v40 = v43;
      v40[1] = v42;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v42 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v40);
LABEL_18:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_20;
  }
  uint64_t v44 = *v41;
  sub_255D80890(*v41, v42);
  uint64_t v45 = *v40;
  unint64_t v46 = v40[1];
  uint64_t *v40 = v44;
  v40[1] = v42;
  sub_255D80D04(v45, v46);
LABEL_20:
  uint64_t v47 = v18[20];
  uint64_t v48 = &v10[v47];
  id v49 = (char *)v11 + v47;
  uint64_t v50 = sub_255EEDF60();
  uint64_t v287 = *(void *)(v50 - 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v287 + 48);
  int v52 = v51(v48, 1, v50);
  uint64_t v296 = v50;
  v291 = v51;
  int v53 = v51(v49, 1, v50);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v48, v49, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v287 + 56))(v48, 0, 1, v50);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v287 + 8))(v48, v50);
LABEL_25:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v48, v49, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v287 + 24))(v48, v49, v50);
LABEL_26:
  uint64_t v55 = v18[21];
  uint64_t v56 = *(void **)&v10[v55];
  uint64_t v57 = *(void **)((char *)v11 + v55);
  *(void *)&v10[v55] = v57;
  id v58 = v57;

  uint64_t v59 = v18[22];
  uint64_t v60 = &v10[v59];
  uint64_t v61 = (char *)v11 + v59;
  int v62 = v298(&v10[v59], 1, v22);
  int v63 = v298(v61, 1, v22);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v60, v61, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v60, 0, 1, v22);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v60, v22);
LABEL_31:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v60, v61, v22);
LABEL_32:
  uint64_t v65 = v293[6];
  uint64_t v66 = (char *)a1 + v65;
  uint64_t v67 = (char *)v294 + v65;
  uint64_t v290 = sub_255EEE280();
  v286 = *(void (**)(char *, char *))(*(void *)(v290 - 8) + 24);
  v286(v66, v67);
  uint64_t v68 = v293[7];
  uint64_t v69 = *(void **)((char *)v294 + v68);
  uint64_t v70 = *(void **)((char *)a1 + v68);
  *(void **)((char *)a1 + v68) = v69;
  id v71 = v69;

  uint64_t v72 = v293[8];
  uint64_t v73 = (char *)a1 + v72;
  uint64_t v74 = (char *)v294 + v72;
  uint64_t v75 = sub_255EEE200();
  v288 = (void (**)(char *, char *))(*(void *)(v75 - 8) + 24);
  uint64_t v289 = v75;
  v292 = *v288;
  (*v288)(v73, v74);
  uint64_t v76 = v293[9];
  uint64_t v77 = (void **)((char *)a1 + v76);
  uint64_t v78 = (char *)v294 + v76;
  void *v77 = *(void **)((char *)v294 + v76);
  v77[1] = *(void **)((char *)v294 + v76 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v281 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v282 = v78;
  uint64_t v79 = v281[5];
  v284 = v77;
  id v80 = (char *)v77 + v79;
  id v81 = &v78[v79];
  *(void *)id v80 = *(void *)&v78[v79];
  *((void *)v80 + 1) = *(void *)&v78[v79 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v80 + 2) = *((void *)v81 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v80 + 3) = *((void *)v81 + 3);
  *((void *)v80 + 4) = *((void *)v81 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v80 + 5) = *((void *)v81 + 5);
  *((void *)v80 + 6) = *((void *)v81 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v80 + 7) = *((void *)v81 + 7);
  *((void *)v80 + 8) = *((void *)v81 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v80 + 9) = *((void *)v81 + 9);
  *((void *)v80 + 10) = *((void *)v81 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v80 + 11) = *((void *)v81 + 11);
  uint64_t v82 = (void *)*((void *)v80 + 12);
  uint64_t v83 = (void *)*((void *)v81 + 12);
  *((void *)v80 + 12) = v83;
  id v84 = v83;

  uint64_t v85 = (void *)*((void *)v80 + 13);
  uint64_t v86 = (void *)*((void *)v81 + 13);
  *((void *)v80 + 13) = v86;
  id v87 = v86;

  uint64_t v88 = v18[13];
  uint64_t v89 = &v80[v88];
  uint64_t v90 = &v81[v88];
  LODWORD(v85) = v298(&v80[v88], 1, v22);
  int v91 = v298(v90, 1, v22);
  if (v85)
  {
    if (!v91)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v89, v90, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v89, 0, 1, v22);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v91)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v89, v22);
LABEL_37:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v89, v90, *(void *)(*(void *)(v92 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v89, v90, v22);
LABEL_38:
  uint64_t v93 = v18[14];
  uint64_t v94 = &v80[v93];
  uint64_t v95 = &v81[v93];
  int v96 = v298(&v80[v93], 1, v22);
  int v97 = v298(v95, 1, v22);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v94, v95, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v94, 0, 1, v22);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v94, v22);
LABEL_43:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v94, v95, v22);
LABEL_44:
  uint64_t v99 = v18[15];
  uint64_t v100 = &v80[v99];
  uint64_t v101 = &v81[v99];
  *(void *)uint64_t v100 = *(void *)v101;
  *((void *)v100 + 1) = *((void *)v101 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v102 = v18[16];
  uint64_t v103 = &v80[v102];
  uint64_t v104 = &v81[v102];
  *(void *)uint64_t v103 = *(void *)v104;
  *((void *)v103 + 1) = *((void *)v104 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v80[v18[17]] = v81[v18[17]];
  v80[v18[18]] = v81[v18[18]];
  uint64_t v105 = v18[19];
  v106 = (uint64_t *)&v80[v105];
  uint64_t v107 = (uint64_t *)&v81[v105];
  unint64_t v108 = *(void *)&v81[v105 + 8];
  if (*(void *)&v80[v105 + 8] >> 60 == 15)
  {
    if (v108 >> 60 != 15)
    {
      uint64_t v109 = *v107;
      sub_255D80890(v109, v108);
      uint64_t *v106 = v109;
      v106[1] = v108;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v108 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v106);
LABEL_49:
    *(_OWORD *)v106 = *(_OWORD *)v107;
    goto LABEL_51;
  }
  uint64_t v110 = *v107;
  sub_255D80890(v110, v108);
  uint64_t v111 = *v106;
  unint64_t v112 = v106[1];
  uint64_t *v106 = v110;
  v106[1] = v108;
  sub_255D80D04(v111, v112);
LABEL_51:
  uint64_t v113 = v18[20];
  uint64_t v114 = &v80[v113];
  uint64_t v115 = &v81[v113];
  int v116 = v51(&v80[v113], 1, v296);
  int v117 = v51(v115, 1, v296);
  if (v116)
  {
    uint64_t v118 = v22;
    if (!v117)
    {
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v114, v115, v296);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v287 + 56))(v114, 0, 1, v296);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v118 = v22;
  if (v117)
  {
    (*(void (**)(char *, uint64_t))(v287 + 8))(v114, v296);
LABEL_56:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v114, v115, *(void *)(*(void *)(v119 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v287 + 24))(v114, v115, v296);
LABEL_57:
  uint64_t v120 = v18[21];
  uint64_t v121 = *(void **)&v80[v120];
  uint64_t v122 = *(void **)&v81[v120];
  *(void *)&v80[v120] = v122;
  id v123 = v122;

  uint64_t v124 = v18[22];
  uint64_t v125 = &v80[v124];
  v126 = &v81[v124];
  LODWORD(v121) = v298(&v80[v124], 1, v118);
  int v127 = v298(v126, 1, v118);
  if (v121)
  {
    if (!v127)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v125, v126, v118);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v125, 0, 1, v118);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v125, v118);
LABEL_62:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v125, v126, *(void *)(*(void *)(v128 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v125, v126, v118);
LABEL_63:
  ((void (*)(char *, char *, uint64_t))v292)((char *)v284 + v281[6], &v282[v281[6]], v289);
  uint64_t v129 = v281[7];
  uint64_t v130 = (char *)v284 + v129;
  uint64_t v131 = &v282[v129];
  ((void (*)(char *, char *, uint64_t))v292)((char *)v284 + v129, &v282[v129], v289);
  uint64_t v132 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v133 = *(void **)&v131[v132];
  uint64_t v134 = *(void **)&v130[v132];
  *(void *)&v130[v132] = v133;
  id v135 = v133;

  uint64_t v136 = v281[8];
  uint64_t v137 = (char *)v284 + v136;
  id v138 = &v282[v136];
  ((void (*)(char *, char *, uint64_t))v292)((char *)v284 + v136, &v282[v136], v289);
  uint64_t v139 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v140 = *(int *)(v139 + 20);
  id v141 = *(void **)&v138[v140];
  uint64_t v142 = *(void **)&v137[v140];
  *(void *)&v137[v140] = v141;
  id v143 = v141;

  uint64_t v144 = *(int *)(v139 + 24);
  uint64_t v145 = *(void **)&v138[v144];
  uint64_t v146 = *(void **)&v137[v144];
  *(void *)&v137[v144] = v145;
  id v147 = v145;

  uint64_t v148 = v293[10];
  uint64_t v149 = (char *)v295 + v148;
  uint64_t v150 = (void **)((char *)v294 + v148);
  *(void *)uint64_t v149 = *(void **)((char *)v294 + v148);
  *((void *)v149 + 1) = *(void **)((char *)v294 + v148 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 2) = v150[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 3) = v150[3];
  *((void *)v149 + 4) = v150[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 5) = v150[5];
  *((void *)v149 + 6) = v150[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 7) = v150[7];
  *((void *)v149 + 8) = v150[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 9) = v150[9];
  *((void *)v149 + 10) = v150[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 11) = v150[11];
  uint64_t v151 = (void *)*((void *)v149 + 12);
  uint64_t v152 = (void *)v150[12];
  *((void *)v149 + 12) = v152;
  id v153 = v152;

  uint64_t v154 = (void *)*((void *)v149 + 13);
  uint64_t v155 = (void *)v150[13];
  *((void *)v149 + 13) = v155;
  id v156 = v155;

  uint64_t v157 = v18[13];
  uint64_t v158 = &v149[v157];
  unint64_t v159 = (char *)v150 + v157;
  LODWORD(v137) = v298(&v149[v157], 1, v118);
  int v160 = v298(v159, 1, v118);
  if (v137)
  {
    if (!v160)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v158, v159, v118);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v158, 0, 1, v118);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v158, v118);
LABEL_68:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v158, v159, *(void *)(*(void *)(v161 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v158, v159, v118);
LABEL_69:
  uint64_t v162 = v18[14];
  uint64_t v163 = &v149[v162];
  uint64_t v164 = (char *)v150 + v162;
  int v165 = v298(&v149[v162], 1, v118);
  int v166 = v298(v164, 1, v118);
  if (v165)
  {
    if (!v166)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v163, v164, v118);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v163, 0, 1, v118);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v166)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v163, v118);
LABEL_74:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v163, v164, v118);
LABEL_75:
  uint64_t v168 = v18[15];
  uint64_t v169 = &v149[v168];
  id v170 = (void *)((char *)v150 + v168);
  *(void *)uint64_t v169 = *v170;
  *((void *)v169 + 1) = v170[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v171 = v18[16];
  id v172 = &v149[v171];
  uint64_t v173 = (void *)((char *)v150 + v171);
  *(void *)id v172 = *v173;
  *((void *)v172 + 1) = v173[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v149[v18[17]] = *((unsigned char *)v150 + v18[17]);
  v149[v18[18]] = *((unsigned char *)v150 + v18[18]);
  uint64_t v174 = v18[19];
  uint64_t v175 = (uint64_t *)&v149[v174];
  v176 = (void *)((char *)v150 + v174);
  unint64_t v177 = *(void *)((char *)v150 + v174 + 8);
  if (*(void *)&v149[v174 + 8] >> 60 == 15)
  {
    if (v177 >> 60 != 15)
    {
      uint64_t v178 = *v176;
      sub_255D80890(*v176, v177);
      *uint64_t v175 = v178;
      v175[1] = v177;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v177 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v175);
LABEL_80:
    *(_OWORD *)uint64_t v175 = *(_OWORD *)v176;
    goto LABEL_82;
  }
  uint64_t v179 = *v176;
  sub_255D80890(*v176, v177);
  uint64_t v180 = *v175;
  unint64_t v181 = v175[1];
  *uint64_t v175 = v179;
  v175[1] = v177;
  sub_255D80D04(v180, v181);
LABEL_82:
  uint64_t v182 = v18[20];
  uint64_t v183 = &v149[v182];
  v184 = (char *)v150 + v182;
  int v185 = v291(&v149[v182], 1, v296);
  int v186 = v291(v184, 1, v296);
  if (v185)
  {
    if (!v186)
    {
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v183, v184, v296);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v287 + 56))(v183, 0, 1, v296);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v186)
  {
    (*(void (**)(char *, uint64_t))(v287 + 8))(v183, v296);
LABEL_87:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v183, v184, *(void *)(*(void *)(v187 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v287 + 24))(v183, v184, v296);
LABEL_88:
  uint64_t v188 = v18[21];
  id v189 = *(void **)&v149[v188];
  id v190 = *(void **)((char *)v150 + v188);
  *(void *)&v149[v188] = v190;
  id v191 = v190;

  uint64_t v192 = v18[22];
  id v193 = &v149[v192];
  uint64_t v194 = (char *)v150 + v192;
  int v195 = v298(&v149[v192], 1, v22);
  int v196 = v298(v194, 1, v22);
  if (v195)
  {
    if (!v196)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v193, v194, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v193, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v193, v22);
LABEL_93:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v193, v194, *(void *)(*(void *)(v197 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v193, v194, v22);
LABEL_94:
  uint64_t v198 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v286)(&v149[v198[5]], (char *)v150 + v198[5], v290);
  ((void (*)(char *, char *, uint64_t))v292)(&v149[v198[6]], (char *)v150 + v198[6], v289);
  uint64_t v199 = v198[7];
  uint64_t v200 = *(void **)&v149[v199];
  uint64_t v201 = *(void **)((char *)v150 + v199);
  *(void *)&v149[v199] = v201;
  id v202 = v201;

  uint64_t v203 = v198[8];
  uint64_t v204 = *(void **)((char *)v150 + v203);
  uint64_t v205 = *(void **)&v149[v203];
  *(void *)&v149[v203] = v204;
  id v206 = v204;

  uint64_t v207 = v198[9];
  v208 = &v149[v207];
  id v209 = (void *)((char *)v150 + v207);
  *(void *)v208 = *v209;
  *((void *)v208 + 1) = v209[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v210 = v293[11];
  uint64_t v211 = (void **)((char *)v295 + v210);
  uint64_t v212 = (char *)v294 + v210;
  uint64_t v213 = *(void **)((char *)v294 + v210);
  uint64_t v214 = *v211;
  *uint64_t v211 = v213;
  id v215 = v213;

  uint64_t v216 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v286)((char *)v211 + *(int *)(v216 + 20), &v212[*(int *)(v216 + 20)], v290);
  ((void (*)(char *, char *, uint64_t))v292)((char *)v211 + *(int *)(v216 + 24), &v212[*(int *)(v216 + 24)], v289);
  uint64_t v217 = v293[12];
  uint64_t v218 = (char *)v295 + v217;
  uint64_t v219 = (char *)v294 + v217;
  *(void *)uint64_t v218 = *(void **)((char *)v294 + v217);
  *((void *)v218 + 1) = *(void **)((char *)v294 + v217 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v283 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v285 = v219;
  uint64_t v220 = v283[5];
  uint64_t v221 = &v218[v220];
  uint64_t v222 = &v219[v220];
  *(void *)uint64_t v221 = *(void *)v222;
  *((void *)v221 + 1) = *((void *)v222 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v221 + 2) = *((void *)v222 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v221 + 3) = *((void *)v222 + 3);
  *((void *)v221 + 4) = *((void *)v222 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v221 + 5) = *((void *)v222 + 5);
  *((void *)v221 + 6) = *((void *)v222 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v221 + 7) = *((void *)v222 + 7);
  *((void *)v221 + 8) = *((void *)v222 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v221 + 9) = *((void *)v222 + 9);
  *((void *)v221 + 10) = *((void *)v222 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v221 + 11) = *((void *)v222 + 11);
  uint64_t v223 = (void *)*((void *)v221 + 12);
  uint64_t v224 = (void *)*((void *)v222 + 12);
  *((void *)v221 + 12) = v224;
  id v225 = v224;

  uint64_t v226 = (void *)*((void *)v221 + 13);
  uint64_t v227 = (void *)*((void *)v222 + 13);
  *((void *)v221 + 13) = v227;
  id v228 = v227;

  uint64_t v229 = v18[13];
  uint64_t v230 = &v221[v229];
  uint64_t v231 = &v222[v229];
  LODWORD(v226) = v298(&v221[v229], 1, v22);
  int v232 = v298(v231, 1, v22);
  if (v226)
  {
    if (!v232)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v230, v231, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v230, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v232)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v230, v22);
LABEL_99:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v230, v231, *(void *)(*(void *)(v233 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v230, v231, v22);
LABEL_100:
  uint64_t v234 = v18[14];
  uint64_t v235 = &v221[v234];
  uint64_t v236 = &v222[v234];
  int v237 = v298(&v221[v234], 1, v22);
  int v238 = v298(v236, 1, v22);
  if (v237)
  {
    if (!v238)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v235, v236, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v235, 0, 1, v22);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v238)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v235, v22);
LABEL_105:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v235, v236, *(void *)(*(void *)(v239 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v235, v236, v22);
LABEL_106:
  uint64_t v240 = v18[15];
  uint64_t v241 = &v221[v240];
  uint64_t v242 = &v222[v240];
  *(void *)uint64_t v241 = *(void *)v242;
  *((void *)v241 + 1) = *((void *)v242 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v243 = v18[16];
  uint64_t v244 = &v221[v243];
  uint64_t v245 = &v222[v243];
  *(void *)uint64_t v244 = *(void *)v245;
  *((void *)v244 + 1) = *((void *)v245 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v221[v18[17]] = v222[v18[17]];
  v221[v18[18]] = v222[v18[18]];
  uint64_t v246 = v18[19];
  id v247 = (uint64_t *)&v221[v246];
  v248 = (uint64_t *)&v222[v246];
  unint64_t v249 = *(void *)&v222[v246 + 8];
  if (*(void *)&v221[v246 + 8] >> 60 == 15)
  {
    if (v249 >> 60 != 15)
    {
      uint64_t v250 = *v248;
      sub_255D80890(v250, v249);
      *id v247 = v250;
      v247[1] = v249;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v249 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v247);
LABEL_111:
    *(_OWORD *)id v247 = *(_OWORD *)v248;
    goto LABEL_113;
  }
  uint64_t v251 = *v248;
  sub_255D80890(v251, v249);
  uint64_t v252 = *v247;
  unint64_t v253 = v247[1];
  *id v247 = v251;
  v247[1] = v249;
  sub_255D80D04(v252, v253);
LABEL_113:
  uint64_t v254 = v18[20];
  v255 = &v221[v254];
  v256 = &v222[v254];
  int v257 = v291(&v221[v254], 1, v296);
  int v258 = v291(v256, 1, v296);
  if (v257)
  {
    uint64_t v259 = v22;
    if (!v258)
    {
      (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v255, v256, v296);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v287 + 56))(v255, 0, 1, v296);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  uint64_t v259 = v22;
  if (v258)
  {
    (*(void (**)(char *, uint64_t))(v287 + 8))(v255, v296);
LABEL_118:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v255, v256, *(void *)(*(void *)(v260 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v287 + 24))(v255, v256, v296);
LABEL_119:
  uint64_t v261 = v18[21];
  uint64_t v262 = *(void **)&v221[v261];
  uint64_t v263 = *(void **)&v222[v261];
  *(void *)&v221[v261] = v263;
  id v264 = v263;

  uint64_t v265 = v18[22];
  uint64_t v266 = &v221[v265];
  v267 = &v222[v265];
  LODWORD(v262) = v298(v266, 1, v259);
  int v268 = v298(v267, 1, v259);
  if (v262)
  {
    if (!v268)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v266, v267, v259);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v266, 0, 1, v259);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v268)
  {
    (*(void (**)(char *, uint64_t))(v297 + 8))(v266, v259);
LABEL_124:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v266, v267, *(void *)(*(void *)(v269 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v266, v267, v259);
LABEL_125:
  ((void (*)(char *, char *, uint64_t))v286)(&v218[v283[6]], &v285[v283[6]], v290);
  ((void (*)(char *, char *, uint64_t))v292)(&v218[v283[7]], &v285[v283[7]], v289);
  *(void *)&v218[v283[8]] = *(void *)&v285[v283[8]];
  swift_retain();
  swift_release();
  uint64_t v270 = v283[9];
  v271 = &v218[v270];
  v272 = &v285[v270];
  int v273 = v298(&v218[v270], 1, v259);
  int v274 = v298(v272, 1, v259);
  if (!v273)
  {
    if (!v274)
    {
      (*(void (**)(char *, char *, uint64_t))(v297 + 24))(v271, v272, v259);
      goto LABEL_131;
    }
    (*(void (**)(char *, uint64_t))(v297 + 8))(v271, v259);
    goto LABEL_130;
  }
  if (v274)
  {
LABEL_130:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v271, v272, *(void *)(*(void *)(v275 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v297 + 16))(v271, v272, v259);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v297 + 56))(v271, 0, 1, v259);
LABEL_131:
  uint64_t v276 = v293[13];
  v277 = *(void **)((char *)v294 + v276);
  v278 = *(void **)((char *)v295 + v276);
  *(void **)((char *)v295 + v276) = v277;
  id v279 = v277;

  return v295;
}

void *initializeWithTake for MedicalIDDataViewModel(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)((char *)a2 + v5);
  *((void *)v6 + 2) = *(void *)((char *)a2 + v5 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)((char *)a2 + v5 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)((char *)a2 + v5 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)a2 + v5 + 72);
  *((void *)v6 + 11) = *(void *)((char *)a2 + v5 + 88);
  *((_OWORD *)v6 + 6) = *(_OWORD *)((char *)a2 + v5 + 96);
  id v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v132 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v132(v11, 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  id v17 = &v7[v15];
  uint64_t v131 = v13;
  if (v132(&v7[v15], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  uint64_t v20 = &v6[v19];
  uint64_t v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v125(v21, 1, v22))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  uint64_t v126 = v22;
  if (v132(&v7[v25], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = a3[6];
  int v30 = (char *)a1 + v29;
  int v31 = (char *)a2 + v29;
  uint64_t v124 = sub_255EEE280();
  uint64_t v121 = *(void (**)(char *, char *))(*(void *)(v124 - 8) + 32);
  v121(v30, v31);
  uint64_t v32 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v33 = (char *)a1 + v32;
  unint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = sub_255EEE200();
  uint64_t v122 = (void (**)(char *, char *))(*(void *)(v35 - 8) + 32);
  uint64_t v123 = v35;
  uint64_t v129 = *v122;
  (*v122)(v33, v34);
  uint64_t v36 = a3[9];
  int v127 = a2;
  uint64_t v128 = a1;
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  *(_OWORD *)((char *)a1 + v36) = *(_OWORD *)((char *)a2 + v36);
  uint64_t v39 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v40 = v39[5];
  uint64_t v41 = &v37[v40];
  unint64_t v42 = &v38[v40];
  *(_OWORD *)uint64_t v41 = *(_OWORD *)&v38[v40];
  *((void *)v41 + 2) = *(void *)&v38[v40 + 16];
  *(_OWORD *)(v41 + 24) = *(_OWORD *)&v38[v40 + 24];
  *(_OWORD *)(v41 + 40) = *(_OWORD *)&v38[v40 + 40];
  *(_OWORD *)(v41 + 56) = *(_OWORD *)&v38[v40 + 56];
  *(_OWORD *)(v41 + 72) = *(_OWORD *)&v38[v40 + 72];
  *((void *)v41 + 11) = *(void *)&v38[v40 + 88];
  *((_OWORD *)v41 + 6) = *(_OWORD *)&v38[v40 + 96];
  uint64_t v43 = v8[13];
  uint64_t v44 = &v41[v43];
  uint64_t v45 = &v42[v43];
  uint64_t v120 = v23;
  if (v132(&v42[v43], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v44, v45, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v44, 0, 1, v12);
  }
  uint64_t v47 = v8[14];
  uint64_t v48 = &v41[v47];
  id v49 = &v42[v47];
  if (v132(&v42[v47], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v48, v49, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v48, 0, 1, v12);
  }
  *(_OWORD *)&v41[v8[15]] = *(_OWORD *)&v42[v8[15]];
  *(_OWORD *)&v41[v8[16]] = *(_OWORD *)&v42[v8[16]];
  v41[v8[17]] = v42[v8[17]];
  v41[v8[18]] = v42[v8[18]];
  *(_OWORD *)&v41[v8[19]] = *(_OWORD *)&v42[v8[19]];
  uint64_t v51 = v8[20];
  int v52 = &v41[v51];
  int v53 = &v42[v51];
  if (v125(&v42[v51], 1, v126))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v52, v53, v126);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v52, 0, 1, v126);
  }
  *(void *)&v41[v8[21]] = *(void *)&v42[v8[21]];
  uint64_t v55 = v8[22];
  uint64_t v56 = &v41[v55];
  uint64_t v57 = &v42[v55];
  if (v132(&v42[v55], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v56, v57, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v56, 0, 1, v12);
  }
  ((void (*)(char *, char *, uint64_t))v129)(&v37[v39[6]], &v38[v39[6]], v123);
  uint64_t v59 = v39[7];
  uint64_t v60 = &v37[v59];
  uint64_t v61 = &v38[v59];
  ((void (*)(char *, char *, uint64_t))v129)(&v37[v59], &v38[v59], v123);
  uint64_t v62 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v60[*(int *)(v62 + 20)] = *(void *)&v61[*(int *)(v62 + 20)];
  uint64_t v63 = v39[8];
  uint64_t v64 = &v37[v63];
  uint64_t v65 = &v38[v63];
  ((void (*)(char *, char *, uint64_t))v129)(&v37[v63], &v38[v63], v123);
  uint64_t v66 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v64[*(int *)(v66 + 20)] = *(void *)&v65[*(int *)(v66 + 20)];
  *(void *)&v64[*(int *)(v66 + 24)] = *(void *)&v65[*(int *)(v66 + 24)];
  uint64_t v67 = a3[10];
  uint64_t v68 = (char *)v128 + v67;
  uint64_t v69 = (char *)v127 + v67;
  *(_OWORD *)uint64_t v68 = *(_OWORD *)((char *)v127 + v67);
  *((void *)v68 + 2) = *(void *)((char *)v127 + v67 + 16);
  *(_OWORD *)(v68 + 24) = *(_OWORD *)((char *)v127 + v67 + 24);
  *(_OWORD *)(v68 + 40) = *(_OWORD *)((char *)v127 + v67 + 40);
  *(_OWORD *)(v68 + 56) = *(_OWORD *)((char *)v127 + v67 + 56);
  *(_OWORD *)(v68 + 72) = *(_OWORD *)((char *)v127 + v67 + 72);
  *((void *)v68 + 11) = *(void *)((char *)v127 + v67 + 88);
  *((_OWORD *)v68 + 6) = *(_OWORD *)((char *)v127 + v67 + 96);
  uint64_t v70 = v8[13];
  id v71 = &v68[v70];
  uint64_t v72 = &v69[v70];
  if (v132(&v69[v70], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v71, v72, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v71, 0, 1, v12);
  }
  uint64_t v74 = v8[14];
  uint64_t v75 = &v68[v74];
  uint64_t v76 = &v69[v74];
  if (v132(&v69[v74], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v75, v76, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v75, 0, 1, v12);
  }
  *(_OWORD *)&v68[v8[15]] = *(_OWORD *)&v69[v8[15]];
  *(_OWORD *)&v68[v8[16]] = *(_OWORD *)&v69[v8[16]];
  v68[v8[17]] = v69[v8[17]];
  v68[v8[18]] = v69[v8[18]];
  *(_OWORD *)&v68[v8[19]] = *(_OWORD *)&v69[v8[19]];
  uint64_t v78 = v8[20];
  uint64_t v79 = &v68[v78];
  id v80 = &v69[v78];
  if (v125(&v69[v78], 1, v126))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v79, v80, v126);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v79, 0, 1, v126);
  }
  *(void *)&v68[v8[21]] = *(void *)&v69[v8[21]];
  uint64_t v82 = v8[22];
  uint64_t v83 = &v68[v82];
  id v84 = &v69[v82];
  if (v132(&v69[v82], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v83, v84, *(void *)(*(void *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v83, v84, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v83, 0, 1, v12);
  }
  uint64_t v86 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v121)(&v68[v86[5]], &v69[v86[5]], v124);
  ((void (*)(char *, char *, uint64_t))v129)(&v68[v86[6]], &v69[v86[6]], v123);
  *(void *)&v68[v86[7]] = *(void *)&v69[v86[7]];
  *(void *)&v68[v86[8]] = *(void *)&v69[v86[8]];
  *(_OWORD *)&v68[v86[9]] = *(_OWORD *)&v69[v86[9]];
  uint64_t v87 = a3[11];
  uint64_t v88 = (char *)v128 + v87;
  uint64_t v89 = (char *)v127 + v87;
  *(void *)((char *)v128 + v87) = *(void *)((char *)v127 + v87);
  uint64_t v90 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v121)(&v88[*(int *)(v90 + 20)], &v89[*(int *)(v90 + 20)], v124);
  ((void (*)(char *, char *, uint64_t))v129)(&v88[*(int *)(v90 + 24)], &v89[*(int *)(v90 + 24)], v123);
  uint64_t v91 = a3[12];
  uint64_t v92 = (char *)v128 + v91;
  uint64_t v93 = (char *)v127 + v91;
  *(_OWORD *)((char *)v128 + v91) = *(_OWORD *)((char *)v127 + v91);
  uint64_t v94 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v95 = v94[5];
  int v96 = &v92[v95];
  int v97 = &v93[v95];
  *(_OWORD *)int v96 = *(_OWORD *)&v93[v95];
  *((void *)v96 + 2) = *(void *)&v93[v95 + 16];
  *(_OWORD *)(v96 + 24) = *(_OWORD *)&v93[v95 + 24];
  *(_OWORD *)(v96 + 40) = *(_OWORD *)&v93[v95 + 40];
  *(_OWORD *)(v96 + 56) = *(_OWORD *)&v93[v95 + 56];
  *(_OWORD *)(v96 + 72) = *(_OWORD *)&v93[v95 + 72];
  *((void *)v96 + 11) = *(void *)&v93[v95 + 88];
  *((_OWORD *)v96 + 6) = *(_OWORD *)&v93[v95 + 96];
  uint64_t v98 = v8[13];
  uint64_t v99 = &v96[v98];
  uint64_t v100 = &v97[v98];
  uint64_t v101 = v12;
  if (v132(&v97[v98], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v99, v100, *(void *)(*(void *)(v102 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v99, v100, v12);
    uint64_t v101 = v12;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v99, 0, 1, v12);
  }
  uint64_t v103 = v8[14];
  uint64_t v104 = &v96[v103];
  uint64_t v105 = &v97[v103];
  if (v132(&v97[v103], 1, v101))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v104, v105, *(void *)(*(void *)(v106 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v104, v105, v101);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v104, 0, 1, v101);
  }
  *(_OWORD *)&v96[v8[15]] = *(_OWORD *)&v97[v8[15]];
  *(_OWORD *)&v96[v8[16]] = *(_OWORD *)&v97[v8[16]];
  v96[v8[17]] = v97[v8[17]];
  v96[v8[18]] = v97[v8[18]];
  *(_OWORD *)&v96[v8[19]] = *(_OWORD *)&v97[v8[19]];
  uint64_t v107 = v8[20];
  unint64_t v108 = &v96[v107];
  uint64_t v109 = &v97[v107];
  if (v125(&v97[v107], 1, v126))
  {
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v108, v109, v126);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v120 + 56))(v108, 0, 1, v126);
  }
  *(void *)&v96[v8[21]] = *(void *)&v97[v8[21]];
  uint64_t v111 = v8[22];
  unint64_t v112 = &v96[v111];
  uint64_t v113 = &v97[v111];
  if (v132(&v97[v111], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v112, v113, *(void *)(*(void *)(v114 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v112, v113, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v112, 0, 1, v12);
  }
  ((void (*)(char *, char *, uint64_t))v121)(&v92[v94[6]], &v93[v94[6]], v124);
  ((void (*)(char *, char *, uint64_t))v129)(&v92[v94[7]], &v93[v94[7]], v123);
  *(void *)&v92[v94[8]] = *(void *)&v93[v94[8]];
  uint64_t v115 = v94[9];
  int v116 = &v92[v115];
  int v117 = &v93[v115];
  if (v132(&v93[v115], 1, v12))
  {
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v116, v117, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v116, 0, 1, v12);
  }
  *(void *)((char *)v128 + a3[13]) = *(void *)((char *)v127 + a3[13]);
  return v128;
}

void **assignWithTake for MedicalIDDataViewModel(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  v288 = a3;
  uint64_t v289 = a2;
  uint64_t v7 = a3[5];
  uint64_t v290 = a1;
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = *(uint64_t *)((char *)a2 + v7 + 8);
  *(void *)id v8 = *(void **)((char *)a2 + v7);
  *((void *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((void *)v8 + 2) = v9[2];
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[4];
  *((void *)v8 + 3) = v9[3];
  *((void *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[6];
  *((void *)v8 + 5) = v9[5];
  *((void *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[8];
  *((void *)v8 + 7) = v9[7];
  *((void *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = v9[10];
  *((void *)v8 + 9) = v9[9];
  *((void *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)*((void *)v8 + 12);
  uint64_t v16 = v9[12];
  *((void *)v8 + 11) = v9[11];
  *((void *)v8 + 12) = v16;

  id v17 = (void *)*((void *)v8 + 13);
  *((void *)v8 + 13) = v9[13];

  uint64_t v18 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v19 = v18[13];
  uint64_t v20 = &v8[v19];
  uint64_t v21 = (char *)v9 + v19;
  uint64_t v22 = sub_255EEE100();
  uint64_t v292 = *(void *)(v22 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v292 + 48);
  int v24 = v23(v20, 1, v22);
  v293 = v23;
  int v25 = v23(v21, 1, v22);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v20, v22);
LABEL_6:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v20, v21, v22);
LABEL_7:
  uint64_t v27 = v18[14];
  uint64_t v28 = &v8[v27];
  uint64_t v29 = (char *)v9 + v27;
  int v30 = v23(&v8[v27], 1, v22);
  int v31 = v23(v29, 1, v22);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v28, v29, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v28, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v28, v22);
LABEL_12:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v28, v29, v22);
LABEL_13:
  uint64_t v33 = v18[15];
  unint64_t v34 = &v8[v33];
  uint64_t v35 = (void *)((char *)v9 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)unint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v18[16];
  uint64_t v39 = &v8[v38];
  uint64_t v40 = (void *)((char *)v9 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v8[v18[17]] = *((unsigned char *)v9 + v18[17]);
  v8[v18[18]] = *((unsigned char *)v9 + v18[18]);
  uint64_t v43 = v18[19];
  uint64_t v44 = (uint64_t)&v8[v43];
  uint64_t v45 = (char *)v9 + v43;
  unint64_t v46 = *(void *)&v8[v43 + 8];
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  unint64_t v47 = *((void *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_255D81EF8(v44);
    goto LABEL_16;
  }
  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_255D80D04(v48, v46);
LABEL_18:
  uint64_t v49 = v18[20];
  uint64_t v50 = &v8[v49];
  uint64_t v51 = (char *)v9 + v49;
  uint64_t v52 = sub_255EEDF60();
  uint64_t v282 = *(void *)(v52 - 8);
  int v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v282 + 48);
  int v54 = v53(v50, 1, v52);
  uint64_t v291 = v52;
  v286 = v53;
  int v55 = v53(v51, 1, v52);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v50, v52);
LABEL_23:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v50, v51, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v50, v51, v52);
LABEL_24:
  uint64_t v57 = v18[21];
  uint64_t v58 = *(void **)&v8[v57];
  *(void *)&v8[v57] = *(void *)((char *)v9 + v57);

  uint64_t v59 = v18[22];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = (char *)v9 + v59;
  int v62 = v293(&v8[v59], 1, v22);
  int v63 = v293(v61, 1, v22);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v60, v61, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v60, 0, 1, v22);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v60, v22);
LABEL_29:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v60, v61, v22);
LABEL_30:
  uint64_t v65 = v288[6];
  uint64_t v66 = (char *)v290 + v65;
  uint64_t v67 = (char *)a2 + v65;
  uint64_t v285 = sub_255EEE280();
  v281 = *(void (**)(char *, char *))(*(void *)(v285 - 8) + 40);
  v281(v66, v67);
  uint64_t v68 = v288[7];
  uint64_t v69 = *(void **)((char *)v290 + v68);
  *(void **)((char *)v290 + v68) = *(void **)((char *)a2 + v68);

  uint64_t v70 = v288[8];
  id v71 = (char *)v290 + v70;
  uint64_t v72 = (char *)a2 + v70;
  uint64_t v73 = sub_255EEE200();
  v283 = (void (**)(char *, char *))(*(void *)(v73 - 8) + 40);
  uint64_t v284 = v73;
  uint64_t v287 = *v283;
  (*v283)(v71, v72);
  uint64_t v74 = v288[9];
  uint64_t v75 = (void **)((char *)v290 + v74);
  uint64_t v76 = (char *)a2 + v74;
  uint64_t v77 = *(uint64_t *)((char *)a2 + v74 + 8);
  void *v75 = *(void **)((char *)a2 + v74);
  v75[1] = v77;
  swift_bridgeObjectRelease();
  uint64_t v276 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v277 = v76;
  uint64_t v78 = v276[5];
  id v279 = v75;
  uint64_t v79 = (char *)v75 + v78;
  id v80 = &v76[v78];
  uint64_t v81 = *(void *)&v76[v78 + 8];
  *(void *)uint64_t v79 = *(void *)&v76[v78];
  *((void *)v79 + 1) = v81;
  swift_bridgeObjectRelease();
  *((void *)v79 + 2) = *((void *)v80 + 2);
  swift_bridgeObjectRelease();
  uint64_t v82 = *((void *)v80 + 4);
  *((void *)v79 + 3) = *((void *)v80 + 3);
  *((void *)v79 + 4) = v82;
  swift_bridgeObjectRelease();
  uint64_t v83 = *((void *)v80 + 6);
  *((void *)v79 + 5) = *((void *)v80 + 5);
  *((void *)v79 + 6) = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = *((void *)v80 + 8);
  *((void *)v79 + 7) = *((void *)v80 + 7);
  *((void *)v79 + 8) = v84;
  swift_bridgeObjectRelease();
  uint64_t v85 = *((void *)v80 + 10);
  *((void *)v79 + 9) = *((void *)v80 + 9);
  *((void *)v79 + 10) = v85;
  swift_bridgeObjectRelease();
  uint64_t v86 = (void *)*((void *)v79 + 12);
  uint64_t v87 = *((void *)v80 + 12);
  *((void *)v79 + 11) = *((void *)v80 + 11);
  *((void *)v79 + 12) = v87;

  uint64_t v88 = (void *)*((void *)v79 + 13);
  *((void *)v79 + 13) = *((void *)v80 + 13);

  uint64_t v89 = v18[13];
  uint64_t v90 = &v79[v89];
  uint64_t v91 = &v80[v89];
  LODWORD(v76) = v293(&v79[v89], 1, v22);
  int v92 = v293(v91, 1, v22);
  if (v76)
  {
    if (!v92)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v90, v91, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v90, 0, 1, v22);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v92)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v90, v22);
LABEL_35:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v90, v91, *(void *)(*(void *)(v93 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v90, v91, v22);
LABEL_36:
  uint64_t v94 = v18[14];
  uint64_t v95 = &v79[v94];
  int v96 = &v80[v94];
  int v97 = v293(&v79[v94], 1, v22);
  int v98 = v293(v96, 1, v22);
  if (v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v95, v96, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v95, 0, 1, v22);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v95, v22);
LABEL_41:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v95, v96, v22);
LABEL_42:
  uint64_t v100 = v18[15];
  uint64_t v101 = &v79[v100];
  uint64_t v102 = &v80[v100];
  uint64_t v104 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  *(void *)uint64_t v101 = v104;
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  uint64_t v105 = v18[16];
  uint64_t v106 = &v79[v105];
  uint64_t v107 = &v80[v105];
  uint64_t v109 = *(void *)v107;
  uint64_t v108 = *((void *)v107 + 1);
  *(void *)uint64_t v106 = v109;
  *((void *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  v79[v18[17]] = v80[v18[17]];
  v79[v18[18]] = v80[v18[18]];
  uint64_t v110 = v18[19];
  uint64_t v111 = (uint64_t)&v79[v110];
  unint64_t v112 = &v80[v110];
  unint64_t v113 = *(void *)&v79[v110 + 8];
  if (v113 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v111 = *(_OWORD *)v112;
    goto LABEL_47;
  }
  unint64_t v114 = *((void *)v112 + 1);
  if (v114 >> 60 == 15)
  {
    sub_255D81EF8(v111);
    goto LABEL_45;
  }
  uint64_t v115 = *(void *)v111;
  *(void *)uint64_t v111 = *(void *)v112;
  *(void *)(v111 + 8) = v114;
  sub_255D80D04(v115, v113);
LABEL_47:
  uint64_t v116 = v18[20];
  int v117 = &v79[v116];
  uint64_t v118 = &v80[v116];
  int v119 = v53(&v79[v116], 1, v291);
  int v120 = v53(v118, 1, v291);
  if (v119)
  {
    if (!v120)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v117, v118, v291);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v117, 0, 1, v291);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v120)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v117, v291);
LABEL_52:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v117, v118, v291);
LABEL_53:
  uint64_t v122 = v18[21];
  uint64_t v123 = *(void **)&v79[v122];
  *(void *)&v79[v122] = *(void *)&v80[v122];

  uint64_t v124 = v18[22];
  uint64_t v125 = &v79[v124];
  uint64_t v126 = &v80[v124];
  int v127 = v293(&v79[v124], 1, v22);
  int v128 = v293(v126, 1, v22);
  if (v127)
  {
    if (!v128)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v125, v126, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v125, 0, 1, v22);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v128)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v125, v22);
LABEL_58:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v125, v126, v22);
LABEL_59:
  ((void (*)(char *, char *, uint64_t))v287)((char *)v279 + v276[6], &v277[v276[6]], v284);
  uint64_t v130 = v276[7];
  uint64_t v131 = (char *)v279 + v130;
  uint64_t v132 = &v277[v130];
  ((void (*)(char *, char *, uint64_t))v287)((char *)v279 + v130, &v277[v130], v284);
  uint64_t v133 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v134 = *(void **)&v131[v133];
  *(void *)&v131[v133] = *(void *)&v132[v133];

  uint64_t v135 = v276[8];
  uint64_t v136 = (char *)v279 + v135;
  uint64_t v137 = &v277[v135];
  ((void (*)(char *, char *, uint64_t))v287)((char *)v279 + v135, &v277[v135], v284);
  uint64_t v138 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v139 = *(int *)(v138 + 20);
  uint64_t v140 = *(void **)&v136[v139];
  *(void *)&v136[v139] = *(void *)&v137[v139];

  uint64_t v141 = *(int *)(v138 + 24);
  uint64_t v142 = *(void **)&v136[v141];
  *(void *)&v136[v141] = *(void *)&v137[v141];

  uint64_t v143 = v288[10];
  uint64_t v144 = (char *)v290 + v143;
  uint64_t v145 = (void **)((char *)a2 + v143);
  uint64_t v146 = *(uint64_t *)((char *)a2 + v143 + 8);
  *(void *)uint64_t v144 = *(void **)((char *)a2 + v143);
  *((void *)v144 + 1) = v146;
  swift_bridgeObjectRelease();
  *((void *)v144 + 2) = v145[2];
  swift_bridgeObjectRelease();
  uint64_t v147 = v145[4];
  *((void *)v144 + 3) = v145[3];
  *((void *)v144 + 4) = v147;
  swift_bridgeObjectRelease();
  uint64_t v148 = v145[6];
  *((void *)v144 + 5) = v145[5];
  *((void *)v144 + 6) = v148;
  swift_bridgeObjectRelease();
  uint64_t v149 = v145[8];
  *((void *)v144 + 7) = v145[7];
  *((void *)v144 + 8) = v149;
  swift_bridgeObjectRelease();
  uint64_t v150 = v145[10];
  *((void *)v144 + 9) = v145[9];
  *((void *)v144 + 10) = v150;
  swift_bridgeObjectRelease();
  uint64_t v151 = (void *)*((void *)v144 + 12);
  uint64_t v152 = v145[12];
  *((void *)v144 + 11) = v145[11];
  *((void *)v144 + 12) = v152;

  id v153 = (void *)*((void *)v144 + 13);
  *((void *)v144 + 13) = v145[13];

  uint64_t v154 = v18[13];
  uint64_t v155 = &v144[v154];
  id v156 = (char *)v145 + v154;
  LODWORD(v136) = v293(&v144[v154], 1, v22);
  int v157 = v293(v156, 1, v22);
  if (v136)
  {
    if (!v157)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v155, v156, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v155, 0, 1, v22);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v155, v22);
LABEL_64:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v155, v156, v22);
LABEL_65:
  uint64_t v159 = v18[14];
  int v160 = &v144[v159];
  uint64_t v161 = (char *)v145 + v159;
  int v162 = v293(&v144[v159], 1, v22);
  int v163 = v293(v161, 1, v22);
  if (v162)
  {
    if (!v163)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v160, v161, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v160, 0, 1, v22);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v163)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v160, v22);
LABEL_70:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v160, v161, v22);
LABEL_71:
  uint64_t v165 = v18[15];
  int v166 = &v144[v165];
  uint64_t v167 = (void *)((char *)v145 + v165);
  uint64_t v169 = *v167;
  uint64_t v168 = v167[1];
  *(void *)int v166 = v169;
  *((void *)v166 + 1) = v168;
  swift_bridgeObjectRelease();
  uint64_t v170 = v18[16];
  uint64_t v171 = &v144[v170];
  id v172 = (void *)((char *)v145 + v170);
  uint64_t v174 = *v172;
  uint64_t v173 = v172[1];
  *(void *)uint64_t v171 = v174;
  *((void *)v171 + 1) = v173;
  swift_bridgeObjectRelease();
  v144[v18[17]] = *((unsigned char *)v145 + v18[17]);
  v144[v18[18]] = *((unsigned char *)v145 + v18[18]);
  uint64_t v175 = v18[19];
  uint64_t v176 = (uint64_t)&v144[v175];
  unint64_t v177 = (char *)v145 + v175;
  unint64_t v178 = *(void *)&v144[v175 + 8];
  if (v178 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
    goto LABEL_76;
  }
  unint64_t v179 = *((void *)v177 + 1);
  if (v179 >> 60 == 15)
  {
    sub_255D81EF8(v176);
    goto LABEL_74;
  }
  uint64_t v180 = *(void *)v176;
  *(void *)uint64_t v176 = *(void *)v177;
  *(void *)(v176 + 8) = v179;
  sub_255D80D04(v180, v178);
LABEL_76:
  uint64_t v181 = v18[20];
  uint64_t v182 = &v144[v181];
  uint64_t v183 = (char *)v145 + v181;
  int v184 = v286(&v144[v181], 1, v291);
  int v185 = v286(v183, 1, v291);
  if (v184)
  {
    if (!v185)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v182, v183, v291);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v182, 0, 1, v291);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v182, v291);
LABEL_81:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v182, v183, *(void *)(*(void *)(v186 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v182, v183, v291);
LABEL_82:
  uint64_t v187 = v18[21];
  uint64_t v188 = *(void **)&v144[v187];
  *(void *)&v144[v187] = *(void *)((char *)v145 + v187);

  uint64_t v189 = v18[22];
  id v190 = &v144[v189];
  id v191 = (char *)v145 + v189;
  int v192 = v293(&v144[v189], 1, v22);
  int v193 = v293(v191, 1, v22);
  if (v192)
  {
    if (!v193)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v190, v191, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v190, 0, 1, v22);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v193)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v190, v22);
LABEL_87:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v190, v191, v22);
LABEL_88:
  int v195 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v281)(&v144[v195[5]], (char *)v145 + v195[5], v285);
  ((void (*)(char *, char *, uint64_t))v287)(&v144[v195[6]], (char *)v145 + v195[6], v284);
  uint64_t v196 = v195[7];
  uint64_t v197 = *(void **)&v144[v196];
  *(void *)&v144[v196] = *(void *)((char *)v145 + v196);

  uint64_t v198 = v195[8];
  uint64_t v199 = *(void **)&v144[v198];
  *(void *)&v144[v198] = *(void *)((char *)v145 + v198);

  uint64_t v200 = v195[9];
  uint64_t v201 = &v144[v200];
  id v202 = (void *)((char *)v145 + v200);
  uint64_t v204 = *v202;
  uint64_t v203 = v202[1];
  *(void *)uint64_t v201 = v204;
  *((void *)v201 + 1) = v203;
  swift_bridgeObjectRelease();
  uint64_t v205 = v288[11];
  id v206 = (char *)v290 + v205;
  uint64_t v207 = (char *)a2 + v205;
  v208 = *(void **)((char *)v290 + v205);
  *(void **)((char *)v290 + v205) = *(void **)((char *)a2 + v205);

  uint64_t v209 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v281)(&v206[*(int *)(v209 + 20)], &v207[*(int *)(v209 + 20)], v285);
  ((void (*)(char *, char *, uint64_t))v287)(&v206[*(int *)(v209 + 24)], &v207[*(int *)(v209 + 24)], v284);
  uint64_t v210 = v288[12];
  uint64_t v211 = (char *)v290 + v210;
  uint64_t v212 = (char *)a2 + v210;
  uint64_t v213 = *(uint64_t *)((char *)a2 + v210 + 8);
  *(void *)uint64_t v211 = *(void **)((char *)a2 + v210);
  *((void *)v211 + 1) = v213;
  swift_bridgeObjectRelease();
  v278 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v280 = v212;
  uint64_t v214 = v278[5];
  id v215 = &v211[v214];
  uint64_t v216 = &v212[v214];
  uint64_t v217 = *((void *)v216 + 1);
  *(void *)id v215 = *(void *)v216;
  *((void *)v215 + 1) = v217;
  swift_bridgeObjectRelease();
  *((void *)v215 + 2) = *((void *)v216 + 2);
  swift_bridgeObjectRelease();
  uint64_t v218 = *((void *)v216 + 4);
  *((void *)v215 + 3) = *((void *)v216 + 3);
  *((void *)v215 + 4) = v218;
  swift_bridgeObjectRelease();
  uint64_t v219 = *((void *)v216 + 6);
  *((void *)v215 + 5) = *((void *)v216 + 5);
  *((void *)v215 + 6) = v219;
  swift_bridgeObjectRelease();
  uint64_t v220 = *((void *)v216 + 8);
  *((void *)v215 + 7) = *((void *)v216 + 7);
  *((void *)v215 + 8) = v220;
  swift_bridgeObjectRelease();
  uint64_t v221 = *((void *)v216 + 10);
  *((void *)v215 + 9) = *((void *)v216 + 9);
  *((void *)v215 + 10) = v221;
  swift_bridgeObjectRelease();
  uint64_t v222 = (void *)*((void *)v215 + 12);
  uint64_t v223 = *((void *)v216 + 12);
  *((void *)v215 + 11) = *((void *)v216 + 11);
  *((void *)v215 + 12) = v223;

  uint64_t v224 = (void *)*((void *)v215 + 13);
  *((void *)v215 + 13) = *((void *)v216 + 13);

  uint64_t v225 = v18[13];
  uint64_t v226 = &v215[v225];
  uint64_t v227 = &v216[v225];
  LODWORD(v209) = v293(&v215[v225], 1, v22);
  int v228 = v293(v227, 1, v22);
  if (v209)
  {
    if (!v228)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v226, v227, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v226, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v228)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v226, v22);
LABEL_93:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v226, v227, *(void *)(*(void *)(v229 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v226, v227, v22);
LABEL_94:
  uint64_t v230 = v18[14];
  uint64_t v231 = &v215[v230];
  int v232 = &v216[v230];
  int v233 = v293(&v215[v230], 1, v22);
  int v234 = v293(v232, 1, v22);
  if (v233)
  {
    if (!v234)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v231, v232, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v231, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v234)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v231, v22);
LABEL_99:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v231, v232, v22);
LABEL_100:
  uint64_t v236 = v18[15];
  int v237 = &v215[v236];
  int v238 = &v216[v236];
  uint64_t v240 = *(void *)v238;
  uint64_t v239 = *((void *)v238 + 1);
  *(void *)int v237 = v240;
  *((void *)v237 + 1) = v239;
  swift_bridgeObjectRelease();
  uint64_t v241 = v18[16];
  uint64_t v242 = &v215[v241];
  uint64_t v243 = &v216[v241];
  uint64_t v245 = *(void *)v243;
  uint64_t v244 = *((void *)v243 + 1);
  *(void *)uint64_t v242 = v245;
  *((void *)v242 + 1) = v244;
  swift_bridgeObjectRelease();
  v215[v18[17]] = v216[v18[17]];
  v215[v18[18]] = v216[v18[18]];
  uint64_t v246 = v18[19];
  uint64_t v247 = (uint64_t)&v215[v246];
  v248 = &v216[v246];
  unint64_t v249 = *(void *)&v215[v246 + 8];
  if (v249 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)uint64_t v247 = *(_OWORD *)v248;
    goto LABEL_105;
  }
  unint64_t v250 = *((void *)v248 + 1);
  if (v250 >> 60 == 15)
  {
    sub_255D81EF8(v247);
    goto LABEL_103;
  }
  uint64_t v251 = *(void *)v247;
  *(void *)uint64_t v247 = *(void *)v248;
  *(void *)(v247 + 8) = v250;
  sub_255D80D04(v251, v249);
LABEL_105:
  uint64_t v252 = v18[20];
  unint64_t v253 = &v215[v252];
  uint64_t v254 = &v216[v252];
  int v255 = v286(&v215[v252], 1, v291);
  int v256 = v286(v254, 1, v291);
  if (v255)
  {
    uint64_t v257 = v22;
    if (!v256)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v253, v254, v291);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v253, 0, 1, v291);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  uint64_t v257 = v22;
  if (v256)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v253, v291);
LABEL_110:
    sub_255D8D508(0, &qword_269F350B8, MEMORY[0x270FA8128]);
    memcpy(v253, v254, *(void *)(*(void *)(v258 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v253, v254, v291);
LABEL_111:
  uint64_t v259 = v18[21];
  uint64_t v260 = *(void **)&v215[v259];
  *(void *)&v215[v259] = *(void *)&v216[v259];

  uint64_t v261 = v18[22];
  uint64_t v262 = &v215[v261];
  uint64_t v263 = &v216[v261];
  int v264 = v293(v262, 1, v257);
  int v265 = v293(v263, 1, v257);
  if (v264)
  {
    if (!v265)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v262, v263, v257);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v262, 0, 1, v257);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v265)
  {
    (*(void (**)(char *, uint64_t))(v292 + 8))(v262, v257);
LABEL_116:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v262, v263, *(void *)(*(void *)(v266 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v262, v263, v257);
LABEL_117:
  ((void (*)(char *, char *, uint64_t))v281)(&v211[v278[6]], &v280[v278[6]], v285);
  ((void (*)(char *, char *, uint64_t))v287)(&v211[v278[7]], &v280[v278[7]], v284);
  *(void *)&v211[v278[8]] = *(void *)&v280[v278[8]];
  swift_release();
  uint64_t v267 = v278[9];
  int v268 = &v211[v267];
  uint64_t v269 = &v280[v267];
  int v270 = v293(&v211[v267], 1, v257);
  int v271 = v293(v269, 1, v257);
  if (!v270)
  {
    if (!v271)
    {
      (*(void (**)(char *, char *, uint64_t))(v292 + 40))(v268, v269, v257);
      goto LABEL_123;
    }
    (*(void (**)(char *, uint64_t))(v292 + 8))(v268, v257);
    goto LABEL_122;
  }
  if (v271)
  {
LABEL_122:
    sub_255D8D508(0, &qword_269F35058, MEMORY[0x270FA92C0]);
    memcpy(v268, v269, *(void *)(*(void *)(v272 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v268, v269, v257);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v268, 0, 1, v257);
LABEL_123:
  uint64_t v273 = v288[13];
  int v274 = *(void **)((char *)v290 + v273);
  *(void **)((char *)v290 + v273) = *(void **)((char *)v289 + v273);

  return v290;
}

uint64_t getEnumTagSinglePayload for MedicalIDDataViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255D94218);
}

uint64_t sub_255D94218(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for MedicalIDData();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_17:
    id v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v17(&a1[v11], a2, v9);
  }
  uint64_t v12 = sub_255EEE280();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_17;
  }
  uint64_t v13 = sub_255EEE200();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_17;
  }
  uint64_t v14 = type metadata accessor for MedicalIDBiometricsViewModel();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_17;
  }
  uint64_t v15 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v9 = v15;
    uint64_t v10 = *(void *)(v15 - 8);
    uint64_t v11 = a3[10];
    goto LABEL_17;
  }
  uint64_t v16 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v9 = v16;
    uint64_t v10 = *(void *)(v16 - 8);
    uint64_t v11 = a3[11];
    goto LABEL_17;
  }
  uint64_t v18 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = &a1[a3[12]];
  return v19(v21, a2, v20);
}

uint64_t storeEnumTagSinglePayload for MedicalIDDataViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255D944D4);
}

char *sub_255D944D4(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for MedicalIDData();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_15:
    id v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v17(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_255EEE280();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_15;
  }
  uint64_t v13 = sub_255EEE200();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_15;
  }
  uint64_t v14 = type metadata accessor for MedicalIDBiometricsViewModel();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_15;
  }
  uint64_t v15 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a3)
  {
    uint64_t v9 = v15;
    uint64_t v10 = *(void *)(v15 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_15;
  }
  uint64_t v16 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v9 = v16;
    uint64_t v10 = *(void *)(v16 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_15;
  }
  uint64_t v18 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = &v5[a4[12]];
  return (char *)v19(v21, a2, a2, v20);
}

uint64_t sub_255D9477C()
{
  uint64_t result = type metadata accessor for MedicalIDData();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_255EEE280();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_255EEE200();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for MedicalIDBiometricsViewModel();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for MedicalIDPregnancyViewModel();
              if (v7 <= 0x3F)
              {
                swift_initStructMetadata();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDDataViewModel.SectionDisplayAction(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDDataViewModel.SectionDisplayAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255D94AF4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDDataViewModel.SectionDisplayAction()
{
  return &type metadata for MedicalIDDataViewModel.SectionDisplayAction;
}

uint64_t getEnumTagSinglePayload for MedicalIDDataViewModel.SectionDisplayAction.Action(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MedicalIDDataViewModel.SectionDisplayAction.Action(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255D94C88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_255D94CB0(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDDataViewModel.SectionDisplayAction.Action()
{
  return &type metadata for MedicalIDDataViewModel.SectionDisplayAction.Action;
}

id sub_255D94CCC()
{
  type metadata accessor for MedicalIDModelProvider();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_269F352A8 = (uint64_t)result;
  return result;
}

id static NSBundle.medicalIDUI.getter()
{
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_269F352A8;
  return v0;
}

id sub_255D94D80(uint64_t a1)
{
  return sub_255D94DA8(a1, (SEL *)&selRef_centimeters, &qword_269F3FC40);
}

id sub_255D94D94(uint64_t a1)
{
  return sub_255D94DA8(a1, (SEL *)&selRef_inches, &qword_269F3FC48);
}

id sub_255D94DA8(uint64_t a1, SEL *a2, void *a3)
{
  id result = [self *a2];
  *a3 = result;
  return result;
}

uint64_t sub_255D94DEC(uint64_t a1)
{
  return sub_255D94E14(a1, qword_269F3FC50);
}

uint64_t sub_255D94DFC(uint64_t a1)
{
  return sub_255D94E14(a1, qword_269F3FC68);
}

uint64_t sub_255D94E14(uint64_t a1, uint64_t *a2)
{
  sub_255D969B0(0);
  uint64_t v4 = v3;
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v4, (uint64_t)a2);
  if (qword_269F349B0 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_269F3FC48;
  sub_255D96A3C();
  id v6 = v5;
  return sub_255EEDDC0();
}

uint64_t sub_255D94EC4(uint64_t a1)
{
  return sub_255D94E14(a1, qword_269F3FC80);
}

uint64_t sub_255D94EDC()
{
  sub_255D969B0(0);
  uint64_t v1 = v0;
  __swift_allocate_value_buffer(v0, qword_269F3FC98);
  __swift_project_value_buffer(v1, (uint64_t)qword_269F3FC98);
  if (qword_269F349A8 != -1) {
    swift_once();
  }
  int v2 = (void *)qword_269F3FC40;
  sub_255D96A3C();
  id v3 = v2;
  return sub_255EEDDC0();
}

uint64_t sub_255D94F84()
{
  sub_255D969B0(0);
  uint64_t v1 = v0;
  __swift_allocate_value_buffer(v0, qword_269F3FCB0);
  __swift_project_value_buffer(v1, (uint64_t)qword_269F3FCB0);
  if (qword_269F349A8 != -1) {
    swift_once();
  }
  int v2 = (void *)qword_269F3FC40;
  sub_255D96A3C();
  id v3 = v2;
  return sub_255EEDDC0();
}

uint64_t sub_255D95034()
{
  sub_255D969B0(0);
  uint64_t v1 = v0;
  __swift_allocate_value_buffer(v0, qword_269F3FCC8);
  __swift_project_value_buffer(v1, (uint64_t)qword_269F3FCC8);
  if (qword_269F349A8 != -1) {
    swift_once();
  }
  int v2 = (void *)qword_269F3FC40;
  sub_255D96A3C();
  id v3 = v2;
  return sub_255EEDDC0();
}

uint64_t sub_255D950E4(uint64_t a1)
{
  return sub_255D95114(a1, qword_269F3FCE0, (SEL *)&selRef_inches);
}

uint64_t sub_255D950FC(uint64_t a1)
{
  return sub_255D95114(a1, qword_269F3FCF8, (SEL *)&selRef_inches);
}

uint64_t sub_255D95114(uint64_t a1, uint64_t *a2, SEL *a3)
{
  sub_255D969B0(0);
  uint64_t v6 = v5;
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v6, (uint64_t)a2);
  id v7 = [self *a3];
  sub_255D96A3C();
  return sub_255EEDDC0();
}

uint64_t sub_255D951AC(uint64_t a1)
{
  return sub_255D95114(a1, qword_269F3FD10, (SEL *)&selRef_feet);
}

uint64_t sub_255D951C4(uint64_t a1)
{
  return sub_255D95114(a1, qword_269F3FD28, (SEL *)&selRef_feet);
}

uint64_t sub_255D951DC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_255EEE480();
  swift_release();
  return swift_release();
}

void *sub_255D95254()
{
  uint64_t v0 = sub_255EEE200();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_255EEE480();
  swift_release();
  swift_release();
  uint64_t v4 = sub_255EEE190();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EEE1A0();
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  MEMORY[0x270FA5388](v8);
  sub_255EEE170();
  sub_255D96964();
  LOBYTE(v3) = sub_255EEFCC0();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v10 = v9((char *)&v24 - v7, v4);
  if ((v3 & 1) != 0
    || (MEMORY[0x270FA5388](v10), sub_255EEE160(),
                                  char v11 = sub_255EEFCC0(),
                                  uint64_t v12 = v9((char *)&v24 - v7, v4),
                                  (v11 & 1) != 0))
  {
    v9((char *)&v24 - v7, v4);
    if (qword_269F349B0 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)qword_269F3FC48;
    if (qword_269F349B8 != -1) {
      swift_once();
    }
    sub_255D969B0(0);
    uint64_t v15 = v14;
    __swift_project_value_buffer(v14, (uint64_t)qword_269F3FC50);
    sub_255EEDDD0();
    double v17 = v16;
    if (qword_269F349C8 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_269F3FC80;
LABEL_10:
    __swift_project_value_buffer(v15, (uint64_t)v18);
    sub_255EEDDD0();
    return sub_255D96C94(v13, v17, v19);
  }
  MEMORY[0x270FA5388](v12);
  sub_255EEE180();
  char v21 = sub_255EEFCC0();
  v9((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v9((char *)&v24 - v7, v4);
  if (v21)
  {
    if (qword_269F349A8 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)qword_269F3FC40;
    if (qword_269F349D0 != -1) {
      swift_once();
    }
    sub_255D969B0(0);
    uint64_t v15 = v22;
    __swift_project_value_buffer(v22, (uint64_t)qword_269F3FC98);
    sub_255EEDDD0();
    double v17 = v23;
    if (qword_269F349E0 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_269F3FCC8;
    goto LABEL_10;
  }
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t sub_255D95718@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_255D961DC();
  if (v6)
  {
    id v56 = v6;
    sub_255D969D8(0, &qword_269F352E8, (uint64_t (*)(uint64_t))sub_255D969B0, MEMORY[0x263F8D8F0]);
    int v54 = &v47;
    uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
    MEMORY[0x270FA5388](v7 - 8);
    uint64_t v10 = (char *)&v47 - v9;
    uint64_t v55 = a3;
    if (a2)
    {
      sub_255D95CB0((uint64_t)&v47 - v9);
    }
    else
    {
      sub_255D969B0(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 1, 1, v14);
    }
    sub_255D969B0(0);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(*(void *)(v15 - 8) + 64);
    uint64_t v18 = MEMORY[0x270FA5388](v15);
    unint64_t v19 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x270FA5388](v18);
    uint64_t v20 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v21 = a1;
    uint64_t v23 = v22;
    sub_255D96AE0(v21, (uint64_t)v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v16) == 1)
    {

      sub_255D96B74((uint64_t)v20);
      return sub_255D96C00((uint64_t)v10, v55);
    }
    else
    {
      uint64_t v52 = &v47;
      int v53 = v10;
      uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))((char *)&v47 - v19, v20, v16);
      uint64_t v49 = &v47;
      MEMORY[0x270FA5388](v24);
      int v25 = (char *)&v47 - v19;
      uint64_t v50 = (char *)&v47 - v19;
      sub_255EEDE00();
      uint64_t v26 = sub_255D95254();
      uint64_t v48 = v25;
      sub_255EEDDD0();
      uint64_t v28 = v27;
      int64_t v29 = v26[2];
      uint64_t v51 = v23;
      if (v29)
      {
        uint64_t v58 = MEMORY[0x263F8EE78];
        uint64_t isUniquelyReferenced_nonNull_native = sub_255DFAADC(0, v29, 0);
        uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
        uint64_t v31 = *(unsigned __int8 *)(v23 + 80);
        unint64_t v47 = v26;
        uint64_t v32 = (char *)v26 + ((v31 + 32) & ~v31);
        uint64_t v33 = *(void *)(v23 + 72);
        do
        {
          MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
          v57((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v16);
          sub_255EEDDD0();
          uint64_t v35 = v34;
          (*(void (**)(char *, uint64_t))(v23 + 8))((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
          uint64_t v36 = v58;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t isUniquelyReferenced_nonNull_native = sub_255DFAADC(0, *(void *)(v36 + 16) + 1, 1);
            uint64_t v36 = v58;
          }
          unint64_t v38 = *(void *)(v36 + 16);
          unint64_t v37 = *(void *)(v36 + 24);
          if (v38 >= v37 >> 1)
          {
            uint64_t isUniquelyReferenced_nonNull_native = sub_255DFAADC(v37 > 1, v38 + 1, 1);
            uint64_t v36 = v58;
          }
          *(void *)(v36 + 16) = v38 + 1;
          *(void *)(v36 + 8 * v38 + 32) = v35;
          v32 += v33;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = MEMORY[0x263F8EE78];
      }
      uint64_t v39 = v55;
      sub_255D96EF0(v28, 0, v36);
      char v41 = v40;
      swift_bridgeObjectRelease();
      uint64_t v42 = (uint64_t)v53;
      uint64_t v43 = v50;
      if (v41)
      {

        unint64_t v46 = *(void (**)(char *, uint64_t))(v51 + 8);
        v46(v48, v16);
        v46(v43, v16);
        return sub_255D96C00(v42, v39);
      }
      else
      {
        sub_255D96A3C();
        sub_255EEDDC0();
        uint64_t v44 = v51;
        uint64_t v45 = *(void (**)(char *, uint64_t))(v51 + 8);
        v45(v48, v16);
        v45(v43, v16);
        sub_255D96B74(v42);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v39, 0, 1, v16);
      }
    }
  }
  else
  {
    sub_255D969B0(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    return v12(a3, 1, 1, v11);
  }
}

uint64_t sub_255D95CB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255D961DC();
  if (v2)
  {
    id v31 = v2;
    uint64_t v32 = a1;
    uint64_t v3 = sub_255EEE200();
    v30[1] = v30;
    uint64_t v4 = *(void *)(v3 - 8);
    MEMORY[0x270FA5388](v3);
    uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_255EEE480();
    swift_release();
    swift_release();
    uint64_t v7 = sub_255EEE190();
    v30[0] = v30;
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void *)(v8 + 64);
    MEMORY[0x270FA5388](v7);
    unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_255EEE1A0();
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    MEMORY[0x270FA5388](v11);
    sub_255EEE170();
    sub_255D96964();
    char v12 = sub_255EEFCC0();
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    uint64_t v14 = v13((char *)v30 - v10, v7);
    if ((v12 & 1) != 0
      || (MEMORY[0x270FA5388](v14),
          sub_255EEE160(),
          char v15 = sub_255EEFCC0(),
          uint64_t v16 = v13((char *)v30 - v10, v7),
          (v15 & 1) != 0))
    {
      v13((char *)v30 - v10, v7);
      if (qword_269F349C0 != -1) {
        swift_once();
      }
      sub_255D969B0(0);
      uint64_t v18 = v17;
      __swift_project_value_buffer(v17, (uint64_t)qword_269F3FC68);
      id v20 = v31;
      uint64_t v19 = v32;
      sub_255EEDE00();

      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v19, 0, 1, v18);
    }
    else
    {
      MEMORY[0x270FA5388](v16);
      sub_255EEE180();
      char v24 = sub_255EEFCC0();
      v13((char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      v13((char *)v30 - v10, v7);
      if (v24)
      {
        uint64_t v25 = v32;
        if (qword_269F349D8 != -1) {
          swift_once();
        }
        sub_255D969B0(0);
        uint64_t v27 = v26;
        __swift_project_value_buffer(v26, (uint64_t)qword_269F3FCB0);
        id v28 = v31;
        sub_255EEDE00();

        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v25, 0, 1, v27);
      }
      else
      {

        sub_255D969B0(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v32, 1, 1, v29);
      }
    }
  }
  else
  {
    sub_255D969B0(0);
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    return v23(a1, 1, 1, v22);
  }
}

void *sub_255D961DC()
{
  uint64_t v0 = sub_255EEE200();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_255EEE480();
  swift_release();
  swift_release();
  uint64_t v4 = sub_255EEE190();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EEE1A0();
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  MEMORY[0x270FA5388](v8);
  sub_255EEE170();
  sub_255D96964();
  LOBYTE(v3) = sub_255EEFCC0();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v10 = v9((char *)&v17 - v7, v4);
  if ((v3 & 1) != 0
    || (MEMORY[0x270FA5388](v10), sub_255EEE160(),
                                  char v11 = sub_255EEFCC0(),
                                  uint64_t v12 = v9((char *)&v17 - v7, v4),
                                  (v11 & 1) != 0))
  {
    v9((char *)&v17 - v7, v4);
    if (qword_269F349B0 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)qword_269F3FC48;
  }
  else
  {
    MEMORY[0x270FA5388](v12);
    sub_255EEE180();
    char v16 = sub_255EEFCC0();
    v9((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    v9((char *)&v17 - v7, v4);
    if ((v16 & 1) == 0) {
      return 0;
    }
    if (qword_269F349A8 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)qword_269F3FC40;
  }
  id v14 = v13;
  return v13;
}

uint64_t sub_255D96558()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI18HeightDataProvider__locale;
  sub_255D969D8(0, &qword_269F352C8, MEMORY[0x270FA9800], MEMORY[0x263EFDE58]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255D9661C()
{
  return type metadata accessor for HeightDataProvider();
}

uint64_t type metadata accessor for HeightDataProvider()
{
  uint64_t result = qword_269F352B8;
  if (!qword_269F352B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255D96670()
{
  sub_255D969D8(319, &qword_269F352C8, MEMORY[0x270FA9800], MEMORY[0x263EFDE58]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_255D96724()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t sub_255D96730@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for HeightDataProvider();
  uint64_t result = sub_255EEE420();
  *a1 = result;
  return result;
}

uint64_t sub_255D96770()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_255EEE480();
  swift_release();
  return swift_release();
}

uint64_t sub_255D967F0(char *a1)
{
  uint64_t v2 = sub_255EEE200();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v6((char *)&v9 - v5, a1, v2);
  swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  v6((char *)&v9 - v5, (char *)&v9 - v5, v2);
  swift_retain();
  sub_255EEE490();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))((char *)&v9 - v5, v2);
}

unint64_t sub_255D96964()
{
  unint64_t result = qword_269F352D0;
  if (!qword_269F352D0)
  {
    sub_255EEE190();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F352D0);
  }
  return result;
}

void sub_255D969B0(uint64_t a1)
{
}

void sub_255D969D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_255D96A3C()
{
  unint64_t result = qword_269F352E0;
  if (!qword_269F352E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F352E0);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_255D96AE0(uint64_t a1, uint64_t a2)
{
  sub_255D969D8(0, &qword_269F352E8, (uint64_t (*)(uint64_t))sub_255D969B0, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255D96B74(uint64_t a1)
{
  sub_255D969D8(0, &qword_269F352E8, (uint64_t (*)(uint64_t))sub_255D969B0, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255D96C00(uint64_t a1, uint64_t a2)
{
  sub_255D969D8(0, &qword_269F352E8, (uint64_t (*)(uint64_t))sub_255D969B0, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_255D96C94(void *result, double a2, double a3)
{
  id v21 = result;
  int v22 = 0;
  uint64_t v5 = 0;
  double v6 = a2;
  unint64_t v7 = MEMORY[0x263F8EE78];
  BOOL v8 = a2 == a3;
  if (a2 >= a3) {
    goto LABEL_4;
  }
  while (!__OFADD__(v5++, 1))
  {
    for (double i = (double)v5 + a2; ; double i = v6)
    {
      sub_255D969B0(0);
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(v12 - 8);
      uint64_t v15 = *(void *)(v14 + 64);
      MEMORY[0x270FA5388](v12);
      char v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255D96A3C();
      id v17 = v21;
      uint64_t v18 = sub_255EEDDC0();
      MEMORY[0x270FA5388](v18);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v16, v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = sub_255DFA4B8(0, *(void *)(v7 + 16) + 1, 1, v7);
      }
      unint64_t v20 = *(void *)(v7 + 16);
      unint64_t v19 = *(void *)(v7 + 24);
      if (v20 >= v19 >> 1) {
        unint64_t v7 = sub_255DFA4B8(v19 > 1, v20 + 1, 1, v7);
      }
      *(void *)(v7 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v7+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v20, v16, v13);
      unint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      double v6 = i;
      BOOL v8 = i == a3;
      if (i < a3) {
        break;
      }
LABEL_4:
      int v11 = !v8;
      if ((v11 | v22)) {
        return (void *)v7;
      }
      int v22 = 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_255D96EF0(uint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(a3 + 16);
    if (v3)
    {
      if (v3 == 1)
      {
        return *(uint64_t *)(a3 + 32);
      }
      else
      {
        double v4 = *(double *)(a3 + 32);
        if (v4 < *(double *)&result)
        {
          double v5 = *(double *)(a3 + 40);
          if (v5 == *(double *)&result)
          {
LABEL_10:
            *(double *)&unint64_t result = v5;
          }
          else
          {
            double v6 = (double *)(a3 + 48);
            uint64_t v7 = v3 - 2;
            while (v4 >= *(double *)&result || v5 <= *(double *)&result)
            {
              if (!v7) {
                return *(uint64_t *)(a3 + 32 + 8 * v3 - 8);
              }
              double v4 = *(v6 - 1);
              if (v4 >= *(double *)&result) {
                goto LABEL_8;
              }
              double v9 = *v6++;
              double v5 = v9;
              --v7;
              if (v9 == *(double *)&result) {
                goto LABEL_10;
              }
            }
            if (*(double *)&result - v4 >= v5 - *(double *)&result) {
              double v4 = v5;
            }
            *(double *)&unint64_t result = v4;
          }
        }
        else
        {
LABEL_8:
          *(double *)&unint64_t result = v4;
        }
      }
    }
    else
    {
      *(double *)&unint64_t result = 0.0;
    }
  }
  return result;
}

uint64_t *sub_255D96FC8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v26 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v5 = a3[5];
    double v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    v320 = *(void **)((char *)a2 + v5);
    *(uint64_t *)((char *)a1 + v5) = (uint64_t)v320;
    v318 = (int *)type metadata accessor for MedicalIDDataViewModel();
    uint64_t v8 = v318[5];
    v311 = v6;
    double v9 = &v6[v8];
    v319 = v7;
    uint64_t v10 = &v7[v8];
    uint64_t v11 = *(void *)&v7[v8 + 8];
    *(void *)double v9 = *(void *)&v7[v8];
    *((void *)v9 + 1) = v11;
    uint64_t v13 = *(void *)&v7[v8 + 16];
    uint64_t v12 = *(void *)&v7[v8 + 24];
    *((void *)v9 + 2) = v13;
    *((void *)v9 + 3) = v12;
    uint64_t v14 = *((void *)v10 + 5);
    *((void *)v9 + 4) = *((void *)v10 + 4);
    *((void *)v9 + 5) = v14;
    uint64_t v15 = *((void *)v10 + 7);
    *((void *)v9 + 6) = *((void *)v10 + 6);
    *((void *)v9 + 7) = v15;
    uint64_t v16 = *((void *)v10 + 9);
    *((void *)v9 + 8) = *((void *)v10 + 8);
    *((void *)v9 + 9) = v16;
    uint64_t v17 = *((void *)v10 + 11);
    *((void *)v9 + 10) = *((void *)v10 + 10);
    *((void *)v9 + 11) = v17;
    v313 = (void *)*((void *)v10 + 12);
    v315 = (void *)*((void *)v10 + 13);
    *((void *)v9 + 12) = v313;
    *((void *)v9 + 13) = v315;
    v322 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v18 = v322[13];
    v317 = &v9[v18];
    v308 = &v10[v18];
    uint64_t v19 = sub_255EEE100();
    uint64_t v312 = *(void *)(v19 - 8);
    unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v312 + 48);
    swift_retain();
    id v21 = v320;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = v313;
    id v23 = v315;
    v321 = v20;
    if (v20(v308, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v317, v308, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v312;
    }
    else
    {
      uint64_t v25 = v312;
      (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v317, v308, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v317, 0, 1, v19);
    }
    uint64_t v27 = v322[14];
    id v28 = &v9[v27];
    uint64_t v29 = &v10[v27];
    if (v321(&v10[v27], 1, v19))
    {
      sub_255D80868(0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v29, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v19);
    }
    uint64_t v31 = v322[15];
    uint64_t v32 = &v9[v31];
    uint64_t v33 = &v10[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = v322[16];
    uint64_t v36 = &v9[v35];
    unint64_t v37 = &v10[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    v9[v322[17]] = v10[v322[17]];
    v9[v322[18]] = v10[v322[18]];
    uint64_t v39 = v322[19];
    char v40 = &v9[v39];
    char v41 = (uint64_t *)&v10[v39];
    unint64_t v42 = *(void *)&v10[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)char v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v43 = *v41;
      sub_255D80890(*v41, v42);
      *(void *)char v40 = v43;
      *((void *)v40 + 1) = v42;
    }
    uint64_t v44 = v322[20];
    uint64_t v45 = &v9[v44];
    unint64_t v46 = &v10[v44];
    uint64_t v47 = sub_255EEDF60();
    uint64_t v48 = *(void *)(v47 - 8);
    v307 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    if (v307(v46, 1, v47))
    {
      sub_255D98658(0);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    uint64_t v50 = v322[21];
    uint64_t v51 = *(void **)&v10[v50];
    *(void *)&v9[v50] = v51;
    uint64_t v52 = v322[22];
    int v53 = &v9[v52];
    int v54 = &v10[v52];
    id v55 = v51;
    uint64_t v304 = v48;
    uint64_t v305 = v47;
    uint64_t v306 = v19;
    if (v321(v54, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v53, v54, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v53, 0, 1, v19);
    }
    uint64_t v57 = v318[6];
    uint64_t v58 = &v311[v57];
    uint64_t v59 = &v319[v57];
    uint64_t v60 = sub_255EEE280();
    v309 = *(void (**)(char *, char *))(*(void *)(v60 - 8) + 16);
    uint64_t v310 = v60;
    v309(v58, v59);
    uint64_t v61 = v318[7];
    int v62 = *(void **)&v319[v61];
    *(void *)&v311[v61] = v62;
    uint64_t v63 = v318[8];
    uint64_t v64 = &v311[v63];
    uint64_t v65 = &v319[v63];
    uint64_t v66 = sub_255EEE200();
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16);
    id v68 = v62;
    v314 = v67;
    uint64_t v316 = v66;
    v67(v64, v65, v66);
    uint64_t v69 = v318[9];
    uint64_t v70 = &v311[v69];
    id v71 = &v319[v69];
    uint64_t v72 = *(void *)&v319[v69 + 8];
    *(void *)uint64_t v70 = *(void *)&v319[v69];
    *((void *)v70 + 1) = v72;
    uint64_t v292 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v295 = v71;
    uint64_t v73 = v292[5];
    v298 = v70;
    uint64_t v74 = &v70[v73];
    uint64_t v75 = &v71[v73];
    uint64_t v76 = *(void *)&v71[v73 + 8];
    *(void *)uint64_t v74 = *(void *)&v71[v73];
    *((void *)v74 + 1) = v76;
    uint64_t v78 = *(void *)&v71[v73 + 16];
    uint64_t v77 = *(void *)&v71[v73 + 24];
    *((void *)v74 + 2) = v78;
    *((void *)v74 + 3) = v77;
    uint64_t v79 = *((void *)v75 + 5);
    *((void *)v74 + 4) = *((void *)v75 + 4);
    *((void *)v74 + 5) = v79;
    uint64_t v80 = *((void *)v75 + 7);
    *((void *)v74 + 6) = *((void *)v75 + 6);
    *((void *)v74 + 7) = v80;
    uint64_t v81 = *((void *)v75 + 9);
    *((void *)v74 + 8) = *((void *)v75 + 8);
    *((void *)v74 + 9) = v81;
    uint64_t v82 = *((void *)v75 + 11);
    *((void *)v74 + 10) = *((void *)v75 + 10);
    *((void *)v74 + 11) = v82;
    uint64_t v83 = (void *)*((void *)v75 + 12);
    v288 = (void *)*((void *)v75 + 13);
    *((void *)v74 + 12) = v83;
    *((void *)v74 + 13) = v288;
    uint64_t v84 = v322[13];
    __dst = &v74[v84];
    uint64_t v85 = &v75[v84];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v86 = v83;
    id v87 = v288;
    if (v321(v85, 1, v19))
    {
      sub_255D80868(0);
      memcpy(__dst, v85, *(void *)(*(void *)(v88 - 8) + 64));
      uint64_t v89 = v312;
    }
    else
    {
      uint64_t v89 = v312;
      (*(void (**)(char *, char *, uint64_t))(v312 + 16))(__dst, v85, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v90 = v322[14];
    uint64_t v91 = &v74[v90];
    int v92 = &v75[v90];
    if (v321(&v75[v90], 1, v19))
    {
      sub_255D80868(0);
      memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v91, v92, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v91, 0, 1, v19);
    }
    uint64_t v94 = v322[15];
    uint64_t v95 = &v74[v94];
    int v96 = &v75[v94];
    uint64_t v97 = *((void *)v96 + 1);
    *(void *)uint64_t v95 = *(void *)v96;
    *((void *)v95 + 1) = v97;
    uint64_t v98 = v322[16];
    uint64_t v99 = &v74[v98];
    uint64_t v100 = &v75[v98];
    uint64_t v101 = *((void *)v100 + 1);
    *(void *)uint64_t v99 = *(void *)v100;
    *((void *)v99 + 1) = v101;
    v74[v322[17]] = v75[v322[17]];
    v74[v322[18]] = v75[v322[18]];
    uint64_t v102 = v322[19];
    uint64_t v103 = &v74[v102];
    uint64_t v104 = (uint64_t *)&v75[v102];
    unint64_t v105 = *(void *)&v75[v102 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v105 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
    }
    else
    {
      uint64_t v106 = *v104;
      sub_255D80890(*v104, v105);
      *(void *)uint64_t v103 = v106;
      *((void *)v103 + 1) = v105;
    }
    uint64_t v107 = v322[20];
    uint64_t v108 = &v74[v107];
    uint64_t v109 = &v75[v107];
    if (v307(&v75[v107], 1, v305))
    {
      sub_255D98658(0);
      memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v304 + 16))(v108, v109, v305);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v304 + 56))(v108, 0, 1, v305);
    }
    uint64_t v111 = v322[21];
    unint64_t v112 = *(void **)&v75[v111];
    *(void *)&v74[v111] = v112;
    uint64_t v113 = v322[22];
    unint64_t v114 = &v74[v113];
    uint64_t v115 = &v75[v113];
    id v116 = v112;
    if (v321(v115, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v114, v115, *(void *)(*(void *)(v117 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v114, v115, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v114, 0, 1, v19);
    }
    v314(&v298[v292[6]], &v295[v292[6]], v316);
    uint64_t v118 = v292[7];
    int v119 = &v298[v118];
    int v120 = &v295[v118];
    v314(&v298[v118], &v295[v118], v316);
    uint64_t v121 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    uint64_t v122 = *(void **)&v120[v121];
    *(void *)&v119[v121] = v122;
    uint64_t v123 = v292[8];
    uint64_t v124 = &v298[v123];
    uint64_t v125 = &v295[v123];
    id v126 = v122;
    v314(v124, v125, v316);
    uint64_t v127 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v128 = *(int *)(v127 + 20);
    uint64_t v129 = *(void **)&v125[v128];
    *(void *)&v124[v128] = v129;
    uint64_t v130 = *(int *)(v127 + 24);
    v293 = *(void **)&v125[v130];
    *(void *)&v124[v130] = v293;
    uint64_t v131 = v318[10];
    uint64_t v132 = &v311[v131];
    uint64_t v133 = &v319[v131];
    uint64_t v134 = *(void *)&v319[v131 + 8];
    *(void *)uint64_t v132 = *(void *)&v319[v131];
    *((void *)v132 + 1) = v134;
    uint64_t v136 = *(void *)&v319[v131 + 16];
    uint64_t v135 = *(void *)&v319[v131 + 24];
    *((void *)v132 + 2) = v136;
    *((void *)v132 + 3) = v135;
    uint64_t v137 = *((void *)v133 + 5);
    *((void *)v132 + 4) = *((void *)v133 + 4);
    *((void *)v132 + 5) = v137;
    uint64_t v138 = *((void *)v133 + 7);
    *((void *)v132 + 6) = *((void *)v133 + 6);
    *((void *)v132 + 7) = v138;
    uint64_t v139 = *((void *)v133 + 9);
    *((void *)v132 + 8) = *((void *)v133 + 8);
    *((void *)v132 + 9) = v139;
    uint64_t v140 = *((void *)v133 + 11);
    *((void *)v132 + 10) = *((void *)v133 + 10);
    *((void *)v132 + 11) = v140;
    uint64_t v141 = (void *)*((void *)v133 + 12);
    uint64_t v296 = (void *)*((void *)v133 + 13);
    *((void *)v132 + 12) = v141;
    *((void *)v132 + 13) = v296;
    uint64_t v142 = v322[13];
    v299 = &v132[v142];
    uint64_t v143 = &v133[v142];
    id v144 = v129;
    id v145 = v293;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v146 = v141;
    id v147 = v296;
    if (v321(v143, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v299, v143, *(void *)(*(void *)(v148 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v299, v143, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v299, 0, 1, v19);
    }
    uint64_t v149 = v322[14];
    uint64_t v150 = &v132[v149];
    uint64_t v151 = &v133[v149];
    if (v321(&v133[v149], 1, v19))
    {
      sub_255D80868(0);
      memcpy(v150, v151, *(void *)(*(void *)(v152 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v150, v151, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v150, 0, 1, v19);
    }
    uint64_t v153 = v322[15];
    uint64_t v154 = &v132[v153];
    uint64_t v155 = &v133[v153];
    uint64_t v156 = *((void *)v155 + 1);
    *(void *)uint64_t v154 = *(void *)v155;
    *((void *)v154 + 1) = v156;
    uint64_t v157 = v322[16];
    uint64_t v158 = &v132[v157];
    uint64_t v159 = &v133[v157];
    uint64_t v160 = *((void *)v159 + 1);
    *(void *)uint64_t v158 = *(void *)v159;
    *((void *)v158 + 1) = v160;
    v132[v322[17]] = v133[v322[17]];
    v132[v322[18]] = v133[v322[18]];
    uint64_t v161 = v322[19];
    int v162 = &v132[v161];
    int v163 = (uint64_t *)&v133[v161];
    unint64_t v164 = *(void *)&v133[v161 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v164 >> 60 == 15)
    {
      *(_OWORD *)int v162 = *(_OWORD *)v163;
    }
    else
    {
      uint64_t v165 = *v163;
      sub_255D80890(*v163, v164);
      *(void *)int v162 = v165;
      *((void *)v162 + 1) = v164;
    }
    uint64_t v166 = v322[20];
    uint64_t v167 = &v132[v166];
    uint64_t v168 = &v133[v166];
    if (v307(&v133[v166], 1, v305))
    {
      sub_255D98658(0);
      memcpy(v167, v168, *(void *)(*(void *)(v169 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v304 + 16))(v167, v168, v305);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v304 + 56))(v167, 0, 1, v305);
    }
    uint64_t v170 = v322[21];
    uint64_t v171 = *(void **)&v133[v170];
    *(void *)&v132[v170] = v171;
    uint64_t v172 = v322[22];
    uint64_t v173 = &v132[v172];
    uint64_t v174 = &v133[v172];
    id v175 = v171;
    if (v321(v174, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v173, v174, *(void *)(*(void *)(v176 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v173, v174, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v173, 0, 1, v19);
    }
    unint64_t v177 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v309)(&v132[v177[5]], &v133[v177[5]], v310);
    v314(&v132[v177[6]], &v133[v177[6]], v316);
    uint64_t v178 = v177[7];
    unint64_t v179 = *(void **)&v133[v178];
    *(void *)&v132[v178] = v179;
    uint64_t v180 = v177[8];
    uint64_t v181 = *(void **)&v133[v180];
    *(void *)&v132[v180] = v181;
    uint64_t v182 = v177[9];
    uint64_t v183 = &v132[v182];
    int v184 = &v133[v182];
    uint64_t v185 = *((void *)v184 + 1);
    *(void *)uint64_t v183 = *(void *)v184;
    *((void *)v183 + 1) = v185;
    uint64_t v186 = v318[11];
    uint64_t v187 = &v311[v186];
    uint64_t v188 = &v319[v186];
    uint64_t v189 = *(void **)&v319[v186];
    *(void *)&v311[v186] = v189;
    uint64_t v190 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v191 = *(int *)(v190 + 20);
    int v192 = &v187[v191];
    int v193 = &v188[v191];
    id v194 = v179;
    id v195 = v181;
    swift_bridgeObjectRetain();
    id v196 = v189;
    ((void (*)(char *, char *, uint64_t))v309)(v192, v193, v310);
    v314(&v187[*(int *)(v190 + 24)], &v188[*(int *)(v190 + 24)], v316);
    uint64_t v197 = v318[12];
    uint64_t v198 = &v311[v197];
    uint64_t v199 = &v319[v197];
    uint64_t v200 = *(void *)&v319[v197 + 8];
    *(void *)uint64_t v198 = *(void *)&v319[v197];
    *((void *)v198 + 1) = v200;
    v294 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    uint64_t v297 = v198;
    uint64_t v201 = v294[5];
    id v202 = &v198[v201];
    v300 = v199;
    uint64_t v203 = &v199[v201];
    uint64_t v204 = *(void *)&v199[v201];
    uint64_t v205 = *((void *)v203 + 1);
    *(void *)id v202 = v204;
    *((void *)v202 + 1) = v205;
    uint64_t v206 = *((void *)v203 + 3);
    *((void *)v202 + 2) = *((void *)v203 + 2);
    *((void *)v202 + 3) = v206;
    uint64_t v207 = *((void *)v203 + 5);
    *((void *)v202 + 4) = *((void *)v203 + 4);
    *((void *)v202 + 5) = v207;
    uint64_t v208 = *((void *)v203 + 7);
    *((void *)v202 + 6) = *((void *)v203 + 6);
    *((void *)v202 + 7) = v208;
    uint64_t v209 = *((void *)v203 + 9);
    *((void *)v202 + 8) = *((void *)v203 + 8);
    *((void *)v202 + 9) = v209;
    uint64_t v210 = *((void *)v203 + 11);
    *((void *)v202 + 10) = *((void *)v203 + 10);
    *((void *)v202 + 11) = v210;
    uint64_t v211 = (void *)*((void *)v203 + 12);
    uint64_t v289 = (void *)*((void *)v203 + 13);
    *((void *)v202 + 12) = v211;
    *((void *)v202 + 13) = v289;
    uint64_t v212 = v322[13];
    __dsta = &v202[v212];
    uint64_t v213 = &v203[v212];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v214 = v211;
    id v215 = v289;
    if (v321(v213, 1, v306))
    {
      sub_255D80868(0);
      memcpy(__dsta, v213, *(void *)(*(void *)(v216 - 8) + 64));
      uint64_t v217 = v312;
    }
    else
    {
      uint64_t v217 = v312;
      (*(void (**)(char *, char *, uint64_t))(v312 + 16))(__dsta, v213, v306);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(__dsta, 0, 1, v306);
    }
    uint64_t v218 = v322[14];
    uint64_t v219 = &v202[v218];
    uint64_t v220 = &v203[v218];
    if (v321(&v203[v218], 1, v306))
    {
      sub_255D80868(0);
      memcpy(v219, v220, *(void *)(*(void *)(v221 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v219, v220, v306);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v219, 0, 1, v306);
    }
    uint64_t v222 = v322[15];
    uint64_t v223 = &v202[v222];
    uint64_t v224 = &v203[v222];
    uint64_t v225 = *((void *)v224 + 1);
    *(void *)uint64_t v223 = *(void *)v224;
    *((void *)v223 + 1) = v225;
    uint64_t v226 = v322[16];
    uint64_t v227 = &v202[v226];
    int v228 = &v203[v226];
    uint64_t v229 = *((void *)v228 + 1);
    *(void *)uint64_t v227 = *(void *)v228;
    *((void *)v227 + 1) = v229;
    v202[v322[17]] = v203[v322[17]];
    v202[v322[18]] = v203[v322[18]];
    uint64_t v230 = v322[19];
    uint64_t v231 = &v202[v230];
    int v232 = (uint64_t *)&v203[v230];
    unint64_t v233 = *(void *)&v203[v230 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v233 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
    }
    else
    {
      uint64_t v234 = *v232;
      sub_255D80890(*v232, v233);
      *(void *)uint64_t v231 = v234;
      *((void *)v231 + 1) = v233;
    }
    uint64_t v235 = v322[20];
    uint64_t v236 = &v202[v235];
    int v237 = &v203[v235];
    if (v307(&v203[v235], 1, v305))
    {
      sub_255D98658(0);
      memcpy(v236, v237, *(void *)(*(void *)(v238 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v304 + 16))(v236, v237, v305);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v304 + 56))(v236, 0, 1, v305);
    }
    uint64_t v239 = v322[21];
    uint64_t v240 = *(void **)&v203[v239];
    *(void *)&v202[v239] = v240;
    uint64_t v241 = v322[22];
    uint64_t v242 = &v202[v241];
    uint64_t v243 = &v203[v241];
    id v244 = v240;
    if (v321(v243, 1, v306))
    {
      sub_255D80868(0);
      memcpy(v242, v243, *(void *)(*(void *)(v245 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v242, v243, v306);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v242, 0, 1, v306);
    }
    uint64_t v26 = a1;
    ((void (*)(char *, char *, uint64_t))v309)(&v297[v294[6]], &v300[v294[6]], v310);
    v314(&v297[v294[7]], &v300[v294[7]], v316);
    *(void *)&v297[v294[8]] = *(void *)&v300[v294[8]];
    uint64_t v246 = v294[9];
    uint64_t v247 = &v297[v246];
    v248 = &v300[v246];
    swift_retain();
    if (v321(v248, 1, v306))
    {
      sub_255D80868(0);
      memcpy(v247, v248, *(void *)(*(void *)(v249 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v247, v248, v306);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v247, 0, 1, v306);
    }
    uint64_t v250 = v318[13];
    uint64_t v251 = *(void **)&v319[v250];
    *(void *)&v311[v250] = v251;
    uint64_t v252 = a3[6];
    uint64_t v253 = a3[7];
    uint64_t v254 = (uint64_t *)((char *)a1 + v252);
    int v255 = (char *)a2 + v252;
    uint64_t v257 = *(void **)v255;
    uint64_t v256 = *((void *)v255 + 1);
    void *v254 = v257;
    v254[1] = v256;
    uint64_t v258 = (uint64_t *)((char *)a1 + v253);
    uint64_t v259 = (uint64_t *)((char *)a2 + v253);
    sub_255D986E4(0);
    id v260 = v251;
    id v261 = v257;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      ((void (*)(void *, void *, uint64_t))v309)(v258, v259, v310);
    }
    else
    {
      void *v258 = *v259;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v262 = a3[8];
    uint64_t v263 = (char *)a1 + v262;
    int v264 = (char *)a2 + v262;
    sub_255D9870C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v314(v263, v264, v316);
    }
    else
    {
      *(void *)uint64_t v263 = *(void *)v264;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v265 = a3[9];
    uint64_t v266 = (uint64_t *)((char *)a1 + v265);
    uint64_t v267 = (uint64_t *)((char *)a2 + v265);
    sub_255D98734(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v268 = sub_255EEE620();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v268 - 8) + 16))(v266, v267, v268);
    }
    else
    {
      *uint64_t v266 = *v267;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v269 = a3[10];
    uint64_t v270 = a3[11];
    int v271 = (char *)a1 + v269;
    uint64_t v272 = (char *)a2 + v269;
    uint64_t v273 = *((void *)v272 + 1);
    *(void *)int v271 = *(void *)v272;
    *((void *)v271 + 1) = v273;
    v271[16] = v272[16];
    int v274 = (char *)a1 + v270;
    uint64_t v275 = (char *)a2 + v270;
    *int v274 = *v275;
    *((void *)v274 + 1) = *((void *)v275 + 1);
    uint64_t v276 = a3[12];
    uint64_t v277 = a3[13];
    v278 = (char *)a1 + v276;
    id v279 = (char *)a2 + v276;
    char *v278 = *v279;
    *((void *)v278 + 1) = *((void *)v279 + 1);
    v280 = (uint64_t *)((char *)a1 + v277);
    v281 = (uint64_t *)((char *)a2 + v277);
    uint64_t v282 = v281[1];
    void *v280 = *v281;
    v280[1] = v282;
    uint64_t v283 = a3[14];
    uint64_t v284 = (uint64_t *)((char *)a1 + v283);
    uint64_t v285 = (uint64_t *)((char *)a2 + v283);
    uint64_t v286 = v285[1];
    void *v284 = *v285;
    v284[1] = v286;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v26;
}

void sub_255D98658(uint64_t a1)
{
}

void sub_255D98680(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255D986E4(uint64_t a1)
{
}

void sub_255D9870C(uint64_t a1)
{
}

void sub_255D98734(uint64_t a1)
{
}

uint64_t sub_255D98768(uint64_t a1, int *a2)
{
  swift_release();
  uint64_t v58 = a1;
  uint64_t v4 = (id *)(a1 + a2[5]);

  uint64_t v5 = (int *)type metadata accessor for MedicalIDDataViewModel();
  double v6 = (id *)((char *)v4 + v5[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v7 = (int *)type metadata accessor for MedicalIDData();
  unint64_t v8 = (char *)v6 + v7[13];
  uint64_t v9 = sub_255EEE100();
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  if (!v10(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v9);
  }
  uint64_t v11 = (char *)v6 + v7[14];
  if (!v10(v11, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v11, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t *)((char *)v6 + v7[19]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    sub_255D80D04(*v12, v13);
  }
  uint64_t v14 = (char *)v6 + v7[20];
  uint64_t v15 = sub_255EEDF60();
  uint64_t v59 = *(void *)(v15 - 8);
  uint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
  if (!v63(v14, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v15);
  }

  uint64_t v16 = (char *)v6 + v7[22];
  if (!v10(v16, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v16, v9);
  }
  uint64_t v17 = (char *)v4 + v5[6];
  uint64_t v18 = sub_255EEE280();
  uint64_t v61 = (void (**)(char *))(*(void *)(v18 - 8) + 8);
  uint64_t v62 = v18;
  uint64_t v60 = *v61;
  (*v61)(v17);

  uint64_t v19 = (char *)v4 + v5[8];
  uint64_t v65 = sub_255EEE200();
  uint64_t v66 = *(void (**)(char *))(*(void *)(v65 - 8) + 8);
  v66(v19);
  uint64_t v64 = v5;
  uint64_t v57 = v4;
  unint64_t v20 = (char *)v4 + v5[9];
  swift_bridgeObjectRelease();
  id v21 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  id v22 = &v20[v21[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v23 = &v22[v7[13]];
  if (!v10(v23, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v9);
  }
  uint64_t v24 = &v22[v7[14]];
  if (!v10(v24, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v24, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t *)&v22[v7[19]];
  unint64_t v26 = v25[1];
  if (v26 >> 60 != 15) {
    sub_255D80D04(*v25, v26);
  }
  uint64_t v27 = &v22[v7[20]];
  if (!v63(v27, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v15);
  }

  id v28 = &v22[v7[22]];
  if (!v10(v28, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v28, v9);
  }
  ((void (*)(char *, uint64_t))v66)(&v20[v21[6]], v65);
  uint64_t v29 = &v20[v21[7]];
  ((void (*)(char *, uint64_t))v66)(v29, v65);

  uint64_t v30 = &v20[v21[8]];
  ((void (*)(char *, uint64_t))v66)(v30, v65);
  uint64_t v31 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v32 = (id *)((char *)v57 + v64[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v33 = (char *)v32 + v7[13];
  if (!v10(v33, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v33, v9);
  }
  uint64_t v34 = (char *)v32 + v7[14];
  if (!v10(v34, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = (uint64_t *)((char *)v32 + v7[19]);
  unint64_t v36 = v35[1];
  if (v36 >> 60 != 15) {
    sub_255D80D04(*v35, v36);
  }
  unint64_t v37 = (char *)v32 + v7[20];
  if (!v63(v37, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v15);
  }

  uint64_t v38 = (char *)v32 + v7[22];
  if (!v10(v38, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v9);
  }
  uint64_t v39 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v60)((char *)v32 + v39[5], v62);
  ((void (*)(char *, uint64_t))v66)((char *)v32 + v39[6], v65);

  swift_bridgeObjectRelease();
  char v40 = (id *)((char *)v57 + v64[11]);

  uint64_t v41 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v60)((char *)v40 + *(int *)(v41 + 20), v62);
  ((void (*)(char *, uint64_t))v66)((char *)v40 + *(int *)(v41 + 24), v65);
  unint64_t v42 = (char *)v57 + v64[12];
  swift_bridgeObjectRelease();
  uint64_t v43 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v44 = &v42[v43[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v45 = &v44[v7[13]];
  if (!v10(v45, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v9);
  }
  unint64_t v46 = &v44[v7[14]];
  if (!v10(v46, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = (uint64_t *)&v44[v7[19]];
  unint64_t v48 = v47[1];
  if (v48 >> 60 != 15) {
    sub_255D80D04(*v47, v48);
  }
  uint64_t v49 = &v44[v7[20]];
  if (!v63(v49, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v15);
  }

  uint64_t v50 = &v44[v7[22]];
  if (!v10(v50, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v50, v9);
  }
  ((void (*)(char *, uint64_t))v60)(&v42[v43[6]], v62);
  ((void (*)(char *, uint64_t))v66)(&v42[v43[7]], v65);
  swift_release();
  uint64_t v51 = &v42[v43[9]];
  if (!v10(v51, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v51, v9);
  }

  uint64_t v52 = v58 + a2[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v60)(v52, v62);
  }
  else {
    swift_release();
  }
  uint64_t v53 = v58 + a2[8];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v66)(v53, v65);
  }
  else {
    swift_release();
  }
  uint64_t v54 = v58 + a2[9];
  sub_255D98734(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v55 = sub_255EEE620();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v54, v55);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_255D99340(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v3 = a3[5];
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  v314 = *(void **)((char *)a2 + v3);
  *(void *)((char *)a1 + v3) = v314;
  v317 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v6 = v317[5];
  v309 = v4;
  uint64_t v7 = &v4[v6];
  v318 = v5;
  unint64_t v8 = &v5[v6];
  uint64_t v9 = *(void *)&v5[v6 + 8];
  *(void *)uint64_t v7 = *(void *)&v5[v6];
  *((void *)v7 + 1) = v9;
  uint64_t v11 = *(void *)&v5[v6 + 16];
  uint64_t v10 = *(void *)&v5[v6 + 24];
  *((void *)v7 + 2) = v11;
  *((void *)v7 + 3) = v10;
  uint64_t v12 = *((void *)v8 + 5);
  *((void *)v7 + 4) = *((void *)v8 + 4);
  *((void *)v7 + 5) = v12;
  uint64_t v13 = *((void *)v8 + 7);
  *((void *)v7 + 6) = *((void *)v8 + 6);
  *((void *)v7 + 7) = v13;
  uint64_t v14 = *((void *)v8 + 9);
  *((void *)v7 + 8) = *((void *)v8 + 8);
  *((void *)v7 + 9) = v14;
  uint64_t v15 = *((void *)v8 + 11);
  *((void *)v7 + 10) = *((void *)v8 + 10);
  *((void *)v7 + 11) = v15;
  v311 = (void *)*((void *)v8 + 12);
  uint64_t v312 = (void *)*((void *)v8 + 13);
  *((void *)v7 + 12) = v311;
  *((void *)v7 + 13) = v312;
  v320 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v320[13];
  uint64_t v316 = &v7[v16];
  uint64_t v306 = &v8[v16];
  uint64_t v17 = sub_255EEE100();
  uint64_t v310 = *(void *)(v17 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v310 + 48);
  swift_retain();
  id v19 = v314;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = v311;
  id v21 = v312;
  v319 = v18;
  if (v18(v306, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v316, v306, *(void *)(*(void *)(v22 - 8) + 64));
    uint64_t v23 = v310;
  }
  else
  {
    uint64_t v23 = v310;
    (*(void (**)(char *, char *, uint64_t))(v310 + 16))(v316, v306, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(v316, 0, 1, v17);
  }
  uint64_t v24 = v320[14];
  uint64_t v25 = &v7[v24];
  unint64_t v26 = &v8[v24];
  if (v319(&v8[v24], 1, v17))
  {
    sub_255D80868(0);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v25, v26, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v17);
  }
  uint64_t v28 = v320[15];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  uint64_t v32 = v320[16];
  uint64_t v33 = &v7[v32];
  uint64_t v34 = &v8[v32];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  v7[v320[17]] = v8[v320[17]];
  v7[v320[18]] = v8[v320[18]];
  uint64_t v36 = v320[19];
  unint64_t v37 = &v7[v36];
  uint64_t v38 = (uint64_t *)&v8[v36];
  unint64_t v39 = *(void *)&v8[v36 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v39 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
  }
  else
  {
    uint64_t v40 = *v38;
    sub_255D80890(*v38, v39);
    *(void *)unint64_t v37 = v40;
    *((void *)v37 + 1) = v39;
  }
  uint64_t v41 = v320[20];
  unint64_t v42 = &v7[v41];
  uint64_t v43 = &v8[v41];
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v305 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v305(v43, 1, v44))
  {
    sub_255D98658(0);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  uint64_t v47 = v320[21];
  unint64_t v48 = *(void **)&v8[v47];
  *(void *)&v7[v47] = v48;
  uint64_t v49 = v320[22];
  uint64_t v50 = &v7[v49];
  uint64_t v51 = &v8[v49];
  id v52 = v48;
  uint64_t v302 = v45;
  uint64_t v303 = v44;
  uint64_t v304 = v17;
  if (v319(v51, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v50, v51, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v50, 0, 1, v17);
  }
  uint64_t v54 = v317[6];
  uint64_t v55 = &v309[v54];
  uint64_t v56 = &v318[v54];
  uint64_t v57 = sub_255EEE280();
  v307 = *(void (**)(char *, char *))(*(void *)(v57 - 8) + 16);
  uint64_t v308 = v57;
  v307(v55, v56);
  uint64_t v58 = v317[7];
  uint64_t v59 = *(void **)&v318[v58];
  *(void *)&v309[v58] = v59;
  uint64_t v60 = v317[8];
  uint64_t v61 = &v309[v60];
  uint64_t v62 = &v318[v60];
  uint64_t v63 = sub_255EEE200();
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
  id v65 = v59;
  v313 = v64;
  uint64_t v315 = v63;
  v64(v61, v62, v63);
  uint64_t v66 = v317[9];
  uint64_t v67 = &v309[v66];
  id v68 = &v318[v66];
  uint64_t v69 = *(void *)&v318[v66 + 8];
  *(void *)uint64_t v67 = *(void *)&v318[v66];
  *((void *)v67 + 1) = v69;
  uint64_t v290 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v293 = v68;
  uint64_t v70 = v290[5];
  uint64_t v296 = v67;
  id v71 = &v67[v70];
  uint64_t v72 = &v68[v70];
  uint64_t v73 = *(void *)&v68[v70 + 8];
  *(void *)id v71 = *(void *)&v68[v70];
  *((void *)v71 + 1) = v73;
  uint64_t v75 = *(void *)&v68[v70 + 16];
  uint64_t v74 = *(void *)&v68[v70 + 24];
  *((void *)v71 + 2) = v75;
  *((void *)v71 + 3) = v74;
  uint64_t v76 = *((void *)v72 + 5);
  *((void *)v71 + 4) = *((void *)v72 + 4);
  *((void *)v71 + 5) = v76;
  uint64_t v77 = *((void *)v72 + 7);
  *((void *)v71 + 6) = *((void *)v72 + 6);
  *((void *)v71 + 7) = v77;
  uint64_t v78 = *((void *)v72 + 9);
  *((void *)v71 + 8) = *((void *)v72 + 8);
  *((void *)v71 + 9) = v78;
  uint64_t v79 = *((void *)v72 + 11);
  *((void *)v71 + 10) = *((void *)v72 + 10);
  *((void *)v71 + 11) = v79;
  uint64_t v80 = (void *)*((void *)v72 + 12);
  uint64_t v286 = (void *)*((void *)v72 + 13);
  *((void *)v71 + 12) = v80;
  *((void *)v71 + 13) = v286;
  uint64_t v81 = v320[13];
  __dst = &v71[v81];
  uint64_t v82 = &v72[v81];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v83 = v80;
  id v84 = v286;
  if (v319(v82, 1, v17))
  {
    sub_255D80868(0);
    memcpy(__dst, v82, *(void *)(*(void *)(v85 - 8) + 64));
    uint64_t v86 = v310;
  }
  else
  {
    uint64_t v86 = v310;
    (*(void (**)(char *, char *, uint64_t))(v310 + 16))(__dst, v82, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(__dst, 0, 1, v17);
  }
  uint64_t v87 = v320[14];
  uint64_t v88 = &v71[v87];
  uint64_t v89 = &v72[v87];
  if (v319(&v72[v87], 1, v17))
  {
    sub_255D80868(0);
    memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v88, v89, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v88, 0, 1, v17);
  }
  uint64_t v91 = v320[15];
  int v92 = &v71[v91];
  uint64_t v93 = &v72[v91];
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)int v92 = *(void *)v93;
  *((void *)v92 + 1) = v94;
  uint64_t v95 = v320[16];
  int v96 = &v71[v95];
  uint64_t v97 = &v72[v95];
  uint64_t v98 = *((void *)v97 + 1);
  *(void *)int v96 = *(void *)v97;
  *((void *)v96 + 1) = v98;
  v71[v320[17]] = v72[v320[17]];
  v71[v320[18]] = v72[v320[18]];
  uint64_t v99 = v320[19];
  uint64_t v100 = &v71[v99];
  uint64_t v101 = (uint64_t *)&v72[v99];
  unint64_t v102 = *(void *)&v72[v99 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v102 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
  }
  else
  {
    uint64_t v103 = *v101;
    sub_255D80890(*v101, v102);
    *(void *)uint64_t v100 = v103;
    *((void *)v100 + 1) = v102;
  }
  uint64_t v104 = v320[20];
  unint64_t v105 = &v71[v104];
  uint64_t v106 = &v72[v104];
  if (v305(&v72[v104], 1, v303))
  {
    sub_255D98658(0);
    memcpy(v105, v106, *(void *)(*(void *)(v107 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v302 + 16))(v105, v106, v303);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v302 + 56))(v105, 0, 1, v303);
  }
  uint64_t v108 = v320[21];
  uint64_t v109 = *(void **)&v72[v108];
  *(void *)&v71[v108] = v109;
  uint64_t v110 = v320[22];
  uint64_t v111 = &v71[v110];
  unint64_t v112 = &v72[v110];
  id v113 = v109;
  if (v319(v112, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v111, v112, *(void *)(*(void *)(v114 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v111, v112, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v111, 0, 1, v17);
  }
  v313(&v296[v290[6]], &v293[v290[6]], v315);
  uint64_t v115 = v290[7];
  id v116 = &v296[v115];
  uint64_t v117 = &v293[v115];
  v313(&v296[v115], &v293[v115], v315);
  uint64_t v118 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  int v119 = *(void **)&v117[v118];
  *(void *)&v116[v118] = v119;
  uint64_t v120 = v290[8];
  uint64_t v121 = &v296[v120];
  uint64_t v122 = &v293[v120];
  id v123 = v119;
  v313(v121, v122, v315);
  uint64_t v124 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v125 = *(int *)(v124 + 20);
  id v126 = *(void **)&v122[v125];
  *(void *)&v121[v125] = v126;
  uint64_t v127 = *(int *)(v124 + 24);
  uint64_t v291 = *(void **)&v122[v127];
  *(void *)&v121[v127] = v291;
  uint64_t v128 = v317[10];
  uint64_t v129 = &v309[v128];
  uint64_t v130 = &v318[v128];
  uint64_t v131 = *(void *)&v318[v128 + 8];
  *(void *)uint64_t v129 = *(void *)&v318[v128];
  *((void *)v129 + 1) = v131;
  uint64_t v133 = *(void *)&v318[v128 + 16];
  uint64_t v132 = *(void *)&v318[v128 + 24];
  *((void *)v129 + 2) = v133;
  *((void *)v129 + 3) = v132;
  uint64_t v134 = *((void *)v130 + 5);
  *((void *)v129 + 4) = *((void *)v130 + 4);
  *((void *)v129 + 5) = v134;
  uint64_t v135 = *((void *)v130 + 7);
  *((void *)v129 + 6) = *((void *)v130 + 6);
  *((void *)v129 + 7) = v135;
  uint64_t v136 = *((void *)v130 + 9);
  *((void *)v129 + 8) = *((void *)v130 + 8);
  *((void *)v129 + 9) = v136;
  uint64_t v137 = *((void *)v130 + 11);
  *((void *)v129 + 10) = *((void *)v130 + 10);
  *((void *)v129 + 11) = v137;
  uint64_t v138 = (void *)*((void *)v130 + 12);
  v294 = (void *)*((void *)v130 + 13);
  *((void *)v129 + 12) = v138;
  *((void *)v129 + 13) = v294;
  uint64_t v139 = v320[13];
  uint64_t v297 = &v129[v139];
  uint64_t v140 = &v130[v139];
  id v141 = v126;
  id v142 = v291;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v143 = v138;
  id v144 = v294;
  if (v319(v140, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v297, v140, *(void *)(*(void *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v310 + 16))(v297, v140, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(v297, 0, 1, v17);
  }
  uint64_t v146 = v320[14];
  id v147 = &v129[v146];
  uint64_t v148 = &v130[v146];
  if (v319(&v130[v146], 1, v17))
  {
    sub_255D80868(0);
    memcpy(v147, v148, *(void *)(*(void *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v310 + 16))(v147, v148, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(v147, 0, 1, v17);
  }
  uint64_t v150 = v320[15];
  uint64_t v151 = &v129[v150];
  uint64_t v152 = &v130[v150];
  uint64_t v153 = *((void *)v152 + 1);
  *(void *)uint64_t v151 = *(void *)v152;
  *((void *)v151 + 1) = v153;
  uint64_t v154 = v320[16];
  uint64_t v155 = &v129[v154];
  uint64_t v156 = &v130[v154];
  uint64_t v157 = *((void *)v156 + 1);
  *(void *)uint64_t v155 = *(void *)v156;
  *((void *)v155 + 1) = v157;
  v129[v320[17]] = v130[v320[17]];
  v129[v320[18]] = v130[v320[18]];
  uint64_t v158 = v320[19];
  uint64_t v159 = &v129[v158];
  uint64_t v160 = (uint64_t *)&v130[v158];
  unint64_t v161 = *(void *)&v130[v158 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v161 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
  }
  else
  {
    uint64_t v162 = *v160;
    sub_255D80890(*v160, v161);
    *(void *)uint64_t v159 = v162;
    *((void *)v159 + 1) = v161;
  }
  uint64_t v163 = v320[20];
  unint64_t v164 = &v129[v163];
  uint64_t v165 = &v130[v163];
  if (v305(&v130[v163], 1, v303))
  {
    sub_255D98658(0);
    memcpy(v164, v165, *(void *)(*(void *)(v166 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v302 + 16))(v164, v165, v303);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v302 + 56))(v164, 0, 1, v303);
  }
  uint64_t v167 = v320[21];
  uint64_t v168 = *(void **)&v130[v167];
  *(void *)&v129[v167] = v168;
  uint64_t v169 = v320[22];
  uint64_t v170 = &v129[v169];
  uint64_t v171 = &v130[v169];
  id v172 = v168;
  if (v319(v171, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v170, v171, *(void *)(*(void *)(v173 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v310 + 16))(v170, v171, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(v170, 0, 1, v17);
  }
  uint64_t v174 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v307)(&v129[v174[5]], &v130[v174[5]], v308);
  v313(&v129[v174[6]], &v130[v174[6]], v315);
  uint64_t v175 = v174[7];
  uint64_t v176 = *(void **)&v130[v175];
  *(void *)&v129[v175] = v176;
  uint64_t v177 = v174[8];
  uint64_t v178 = *(void **)&v130[v177];
  *(void *)&v129[v177] = v178;
  uint64_t v179 = v174[9];
  uint64_t v180 = &v129[v179];
  uint64_t v181 = &v130[v179];
  uint64_t v182 = *((void *)v181 + 1);
  *(void *)uint64_t v180 = *(void *)v181;
  *((void *)v180 + 1) = v182;
  uint64_t v183 = v317[11];
  int v184 = &v309[v183];
  uint64_t v185 = &v318[v183];
  uint64_t v186 = *(void **)&v318[v183];
  *(void *)&v309[v183] = v186;
  uint64_t v187 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v188 = *(int *)(v187 + 20);
  uint64_t v189 = &v184[v188];
  uint64_t v190 = &v185[v188];
  id v191 = v176;
  id v192 = v178;
  swift_bridgeObjectRetain();
  id v193 = v186;
  ((void (*)(char *, char *, uint64_t))v307)(v189, v190, v308);
  v313(&v184[*(int *)(v187 + 24)], &v185[*(int *)(v187 + 24)], v315);
  uint64_t v194 = v317[12];
  id v195 = &v309[v194];
  id v196 = &v318[v194];
  uint64_t v197 = *(void *)&v318[v194 + 8];
  *(void *)id v195 = *(void *)&v318[v194];
  *((void *)v195 + 1) = v197;
  uint64_t v292 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  v295 = v195;
  uint64_t v198 = v292[5];
  uint64_t v199 = &v195[v198];
  v298 = v196;
  uint64_t v200 = &v196[v198];
  uint64_t v201 = *(void *)&v196[v198];
  uint64_t v202 = *((void *)v200 + 1);
  *(void *)uint64_t v199 = v201;
  *((void *)v199 + 1) = v202;
  uint64_t v203 = *((void *)v200 + 3);
  *((void *)v199 + 2) = *((void *)v200 + 2);
  *((void *)v199 + 3) = v203;
  uint64_t v204 = *((void *)v200 + 5);
  *((void *)v199 + 4) = *((void *)v200 + 4);
  *((void *)v199 + 5) = v204;
  uint64_t v205 = *((void *)v200 + 7);
  *((void *)v199 + 6) = *((void *)v200 + 6);
  *((void *)v199 + 7) = v205;
  uint64_t v206 = *((void *)v200 + 9);
  *((void *)v199 + 8) = *((void *)v200 + 8);
  *((void *)v199 + 9) = v206;
  uint64_t v207 = *((void *)v200 + 11);
  *((void *)v199 + 10) = *((void *)v200 + 10);
  *((void *)v199 + 11) = v207;
  uint64_t v208 = (void *)*((void *)v200 + 12);
  uint64_t v287 = (void *)*((void *)v200 + 13);
  *((void *)v199 + 12) = v208;
  *((void *)v199 + 13) = v287;
  uint64_t v209 = v320[13];
  __dsta = &v199[v209];
  uint64_t v210 = &v200[v209];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v211 = v208;
  id v212 = v287;
  if (v319(v210, 1, v304))
  {
    sub_255D80868(0);
    memcpy(__dsta, v210, *(void *)(*(void *)(v213 - 8) + 64));
    id v214 = a2;
    uint64_t v215 = v310;
  }
  else
  {
    uint64_t v215 = v310;
    (*(void (**)(char *, char *, uint64_t))(v310 + 16))(__dsta, v210, v304);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v310 + 56))(__dsta, 0, 1, v304);
    id v214 = a2;
  }
  uint64_t v216 = v320[14];
  uint64_t v217 = &v199[v216];
  uint64_t v218 = &v200[v216];
  if (v319(&v200[v216], 1, v304))
  {
    sub_255D80868(0);
    memcpy(v217, v218, *(void *)(*(void *)(v219 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v217, v218, v304);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v217, 0, 1, v304);
  }
  uint64_t v220 = v320[15];
  uint64_t v221 = &v199[v220];
  uint64_t v222 = &v200[v220];
  uint64_t v223 = *((void *)v222 + 1);
  *(void *)uint64_t v221 = *(void *)v222;
  *((void *)v221 + 1) = v223;
  uint64_t v224 = v320[16];
  uint64_t v225 = &v199[v224];
  uint64_t v226 = &v200[v224];
  uint64_t v227 = *((void *)v226 + 1);
  *(void *)uint64_t v225 = *(void *)v226;
  *((void *)v225 + 1) = v227;
  v199[v320[17]] = v200[v320[17]];
  v199[v320[18]] = v200[v320[18]];
  uint64_t v228 = v320[19];
  uint64_t v229 = &v199[v228];
  uint64_t v230 = (uint64_t *)&v200[v228];
  unint64_t v231 = *(void *)&v200[v228 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v231 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v229 = *(_OWORD *)v230;
  }
  else
  {
    uint64_t v232 = *v230;
    sub_255D80890(*v230, v231);
    *(void *)uint64_t v229 = v232;
    *((void *)v229 + 1) = v231;
  }
  uint64_t v233 = v320[20];
  uint64_t v234 = &v199[v233];
  uint64_t v235 = &v200[v233];
  if (v305(&v200[v233], 1, v303))
  {
    sub_255D98658(0);
    memcpy(v234, v235, *(void *)(*(void *)(v236 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v302 + 16))(v234, v235, v303);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v302 + 56))(v234, 0, 1, v303);
  }
  uint64_t v237 = v320[21];
  uint64_t v238 = *(void **)&v200[v237];
  *(void *)&v199[v237] = v238;
  uint64_t v239 = v320[22];
  uint64_t v240 = &v199[v239];
  uint64_t v241 = &v200[v239];
  id v242 = v238;
  if (v319(v241, 1, v304))
  {
    sub_255D80868(0);
    memcpy(v240, v241, *(void *)(*(void *)(v243 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v240, v241, v304);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v240, 0, 1, v304);
  }
  ((void (*)(char *, char *, uint64_t))v307)(&v295[v292[6]], &v298[v292[6]], v308);
  v313(&v295[v292[7]], &v298[v292[7]], v315);
  *(void *)&v295[v292[8]] = *(void *)&v298[v292[8]];
  uint64_t v244 = v292[9];
  uint64_t v245 = &v295[v244];
  uint64_t v246 = &v298[v244];
  swift_retain();
  if (v319(v246, 1, v304))
  {
    sub_255D80868(0);
    memcpy(v245, v246, *(void *)(*(void *)(v247 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v245, v246, v304);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v245, 0, 1, v304);
  }
  uint64_t v248 = v317[13];
  uint64_t v249 = *(void **)&v318[v248];
  *(void *)&v309[v248] = v249;
  uint64_t v250 = a3[6];
  uint64_t v251 = a3[7];
  uint64_t v252 = (void *)((char *)a1 + v250);
  uint64_t v253 = (char *)v214 + v250;
  int v255 = *(void **)v253;
  uint64_t v254 = *((void *)v253 + 1);
  void *v252 = v255;
  v252[1] = v254;
  uint64_t v256 = (void *)((char *)a1 + v251);
  uint64_t v257 = (void *)((char *)v214 + v251);
  sub_255D986E4(0);
  id v258 = v249;
  id v259 = v255;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(void *, void *, uint64_t))v307)(v256, v257, v308);
  }
  else
  {
    void *v256 = *v257;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v260 = a3[8];
  id v261 = (char *)a1 + v260;
  uint64_t v262 = (char *)v214 + v260;
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v313(v261, v262, v315);
  }
  else
  {
    *(void *)id v261 = *(void *)v262;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v263 = a3[9];
  int v264 = (void *)((char *)a1 + v263);
  uint64_t v265 = (void *)((char *)v214 + v263);
  sub_255D98734(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v266 = sub_255EEE620();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v266 - 8) + 16))(v264, v265, v266);
  }
  else
  {
    *int v264 = *v265;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v267 = a3[10];
  uint64_t v268 = a3[11];
  uint64_t v269 = (char *)a1 + v267;
  uint64_t v270 = (char *)v214 + v267;
  uint64_t v271 = *((void *)v270 + 1);
  *(void *)uint64_t v269 = *(void *)v270;
  *((void *)v269 + 1) = v271;
  v269[16] = v270[16];
  uint64_t v272 = (char *)a1 + v268;
  uint64_t v273 = (char *)v214 + v268;
  char *v272 = *v273;
  *((void *)v272 + 1) = *((void *)v273 + 1);
  uint64_t v274 = a3[12];
  uint64_t v275 = a3[13];
  uint64_t v276 = (char *)a1 + v274;
  uint64_t v277 = (char *)v214 + v274;
  char *v276 = *v277;
  *((void *)v276 + 1) = *((void *)v277 + 1);
  v278 = (void *)((char *)a1 + v275);
  id v279 = (void *)((char *)v214 + v275);
  uint64_t v280 = v279[1];
  void *v278 = *v279;
  v278[1] = v280;
  uint64_t v281 = a3[14];
  uint64_t v282 = (void *)((char *)a1 + v281);
  uint64_t v283 = (void *)((char *)v214 + v281);
  uint64_t v284 = v283[1];
  void *v282 = *v283;
  v282[1] = v284;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_255D9A998(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  v324 = a3;
  v325 = a2;
  uint64_t v6 = a3[5];
  v326 = a1;
  uint64_t v7 = (void **)((char *)a1 + v6);
  unint64_t v8 = (void **)((char *)a2 + v6);
  uint64_t v9 = *v8;
  uint64_t v10 = *v7;
  *uint64_t v7 = *v8;
  id v11 = v9;

  v332 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v12 = v332[5];
  v334 = v7;
  uint64_t v13 = (char *)v7 + v12;
  v333 = v8;
  uint64_t v14 = (void **)((char *)v8 + v12);
  *(void *)uint64_t v13 = *(void **)((char *)v8 + v12);
  *((void *)v13 + 1) = *(void **)((char *)v8 + v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 2) = v14[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 3) = v14[3];
  *((void *)v13 + 4) = v14[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 5) = v14[5];
  *((void *)v13 + 6) = v14[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 7) = v14[7];
  *((void *)v13 + 8) = v14[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 9) = v14[9];
  *((void *)v13 + 10) = v14[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 11) = v14[11];
  uint64_t v15 = (void *)*((void *)v13 + 12);
  uint64_t v16 = (void *)v14[12];
  *((void *)v13 + 12) = v16;
  id v17 = v16;

  uint64_t v18 = (void *)*((void *)v13 + 13);
  id v19 = (void *)v14[13];
  *((void *)v13 + 13) = v19;
  id v20 = v19;

  id v21 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v22 = v21[13];
  uint64_t v23 = &v13[v22];
  uint64_t v24 = (char *)v14 + v22;
  uint64_t v25 = sub_255EEE100();
  uint64_t v337 = *(void *)(v25 - 8);
  unint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v337 + 48);
  LODWORD(v7) = v26(v23, 1, v25);
  v338 = v26;
  int v27 = v26(v24, 1, v25);
  if (v7)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v23, v25);
LABEL_6:
    sub_255D80868(0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v23, v24, v25);
LABEL_7:
  uint64_t v29 = v21[14];
  uint64_t v30 = &v13[v29];
  uint64_t v31 = (char *)v14 + v29;
  int v32 = v26(&v13[v29], 1, v25);
  int v33 = v26(v31, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v30, v31, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v30, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v30, v25);
LABEL_12:
    sub_255D80868(0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v30, v31, v25);
LABEL_13:
  uint64_t v35 = v21[15];
  uint64_t v36 = &v13[v35];
  unint64_t v37 = (void *)((char *)v14 + v35);
  *(void *)uint64_t v36 = *v37;
  *((void *)v36 + 1) = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v21[16];
  unint64_t v39 = &v13[v38];
  uint64_t v40 = (void *)((char *)v14 + v38);
  *(void *)unint64_t v39 = *v40;
  *((void *)v39 + 1) = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13[v21[17]] = *((unsigned char *)v14 + v21[17]);
  v13[v21[18]] = *((unsigned char *)v14 + v21[18]);
  uint64_t v41 = v21[19];
  unint64_t v42 = (uint64_t *)&v13[v41];
  uint64_t v43 = (void *)((char *)v14 + v41);
  unint64_t v44 = *(void *)((char *)v14 + v41 + 8);
  if (*(void *)&v13[v41 + 8] >> 60 == 15)
  {
    if (v44 >> 60 != 15)
    {
      uint64_t v45 = *v43;
      sub_255D80890(*v43, v44);
      *unint64_t v42 = v45;
      v42[1] = v44;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v44 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v42);
LABEL_18:
    *(_OWORD *)unint64_t v42 = *(_OWORD *)v43;
    goto LABEL_20;
  }
  uint64_t v46 = *v43;
  sub_255D80890(*v43, v44);
  uint64_t v47 = *v42;
  unint64_t v48 = v42[1];
  *unint64_t v42 = v46;
  v42[1] = v44;
  sub_255D80D04(v47, v48);
LABEL_20:
  uint64_t v49 = v21[20];
  uint64_t v50 = &v13[v49];
  uint64_t v51 = (char *)v14 + v49;
  uint64_t v52 = sub_255EEDF60();
  uint64_t v329 = *(void *)(v52 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v329 + 48);
  int v54 = v53(v50, 1, v52);
  uint64_t v336 = v52;
  v331 = v53;
  int v55 = v53(v51, 1, v52);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v50, 0, 1, v52);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v50, v52);
LABEL_25:
    sub_255D98658(0);
    memcpy(v50, v51, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 24))(v50, v51, v52);
LABEL_26:
  uint64_t v57 = v21[21];
  uint64_t v58 = *(void **)&v13[v57];
  uint64_t v59 = *(void **)((char *)v14 + v57);
  *(void *)&v13[v57] = v59;
  id v60 = v59;

  uint64_t v61 = v21[22];
  uint64_t v62 = &v13[v61];
  uint64_t v63 = (char *)v14 + v61;
  int v64 = v338(&v13[v61], 1, v25);
  int v65 = v338(v63, 1, v25);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v62, v63, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v62, 0, 1, v25);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v62, v25);
LABEL_31:
    sub_255D80868(0);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v62, v63, v25);
LABEL_32:
  uint64_t v67 = v332[6];
  id v68 = (char *)v334 + v67;
  uint64_t v69 = (char *)v333 + v67;
  uint64_t v70 = sub_255EEE280();
  uint64_t v318 = *(void *)(v70 - 8);
  v327 = *(void (**)(char *, char *))(v318 + 24);
  uint64_t v328 = v70;
  v327(v68, v69);
  uint64_t v71 = v332[7];
  uint64_t v72 = *(void **)((char *)v333 + v71);
  uint64_t v73 = *(void **)((char *)v334 + v71);
  *(void **)((char *)v334 + v71) = v72;
  id v74 = v72;

  uint64_t v75 = v332[8];
  uint64_t v76 = (char *)v334 + v75;
  uint64_t v77 = (char *)v333 + v75;
  uint64_t v78 = sub_255EEE200();
  uint64_t v319 = *(void *)(v78 - 8);
  uint64_t v335 = v78;
  v330 = *(void (**)(char *, char *))(v319 + 24);
  v330(v76, v77);
  uint64_t v79 = v332[9];
  uint64_t v80 = (void **)((char *)v334 + v79);
  uint64_t v81 = (char *)v333 + v79;
  void *v80 = *(void **)((char *)v333 + v79);
  v80[1] = *(void **)((char *)v333 + v79 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v320 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v321 = v81;
  uint64_t v82 = v320[5];
  v323 = v80;
  id v83 = (char *)v80 + v82;
  id v84 = &v81[v82];
  *(void *)id v83 = *(void *)&v81[v82];
  *((void *)v83 + 1) = *(void *)&v81[v82 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v83 + 2) = *((void *)v84 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v83 + 3) = *((void *)v84 + 3);
  *((void *)v83 + 4) = *((void *)v84 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v83 + 5) = *((void *)v84 + 5);
  *((void *)v83 + 6) = *((void *)v84 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v83 + 7) = *((void *)v84 + 7);
  *((void *)v83 + 8) = *((void *)v84 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v83 + 9) = *((void *)v84 + 9);
  *((void *)v83 + 10) = *((void *)v84 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v83 + 11) = *((void *)v84 + 11);
  uint64_t v85 = (void *)*((void *)v83 + 12);
  uint64_t v86 = (void *)*((void *)v84 + 12);
  *((void *)v83 + 12) = v86;
  id v87 = v86;

  uint64_t v88 = (void *)*((void *)v83 + 13);
  uint64_t v89 = (void *)*((void *)v84 + 13);
  *((void *)v83 + 13) = v89;
  id v90 = v89;

  uint64_t v91 = v21[13];
  int v92 = &v83[v91];
  uint64_t v93 = &v84[v91];
  LODWORD(v81) = v338(&v83[v91], 1, v25);
  int v94 = v338(v93, 1, v25);
  if (v81)
  {
    if (!v94)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v92, v93, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v92, 0, 1, v25);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v94)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v92, v25);
LABEL_37:
    sub_255D80868(0);
    memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v92, v93, v25);
LABEL_38:
  uint64_t v96 = v21[14];
  uint64_t v97 = &v83[v96];
  uint64_t v98 = &v84[v96];
  int v99 = v338(&v83[v96], 1, v25);
  int v100 = v338(v98, 1, v25);
  if (v99)
  {
    if (!v100)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v97, v98, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v97, 0, 1, v25);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v100)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v97, v25);
LABEL_43:
    sub_255D80868(0);
    memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v97, v98, v25);
LABEL_44:
  uint64_t v102 = v21[15];
  uint64_t v103 = &v83[v102];
  uint64_t v104 = &v84[v102];
  *(void *)uint64_t v103 = *(void *)v104;
  *((void *)v103 + 1) = *((void *)v104 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v105 = v21[16];
  uint64_t v106 = &v83[v105];
  uint64_t v107 = &v84[v105];
  *(void *)uint64_t v106 = *(void *)v107;
  *((void *)v106 + 1) = *((void *)v107 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v83[v21[17]] = v84[v21[17]];
  v83[v21[18]] = v84[v21[18]];
  uint64_t v108 = v21[19];
  uint64_t v109 = (uint64_t *)&v83[v108];
  uint64_t v110 = (uint64_t *)&v84[v108];
  unint64_t v111 = *(void *)&v84[v108 + 8];
  if (*(void *)&v83[v108 + 8] >> 60 == 15)
  {
    if (v111 >> 60 != 15)
    {
      uint64_t v112 = *v110;
      sub_255D80890(v112, v111);
      uint64_t *v109 = v112;
      v109[1] = v111;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v111 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v109);
LABEL_49:
    *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
    goto LABEL_51;
  }
  uint64_t v113 = *v110;
  sub_255D80890(v113, v111);
  uint64_t v114 = *v109;
  unint64_t v115 = v109[1];
  uint64_t *v109 = v113;
  v109[1] = v111;
  sub_255D80D04(v114, v115);
LABEL_51:
  uint64_t v116 = v21[20];
  uint64_t v117 = &v83[v116];
  uint64_t v118 = &v84[v116];
  int v119 = v331(&v83[v116], 1, v336);
  int v120 = v331(v118, 1, v336);
  if (v119)
  {
    uint64_t v121 = v25;
    if (!v120)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v117, v118, v336);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v117, 0, 1, v336);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v121 = v25;
  if (v120)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v117, v336);
LABEL_56:
    sub_255D98658(0);
    memcpy(v117, v118, *(void *)(*(void *)(v122 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 24))(v117, v118, v336);
LABEL_57:
  uint64_t v123 = v21[21];
  uint64_t v124 = *(void **)&v83[v123];
  uint64_t v125 = *(void **)&v84[v123];
  *(void *)&v83[v123] = v125;
  id v126 = v125;

  uint64_t v127 = v21[22];
  uint64_t v128 = &v83[v127];
  uint64_t v129 = &v84[v127];
  int v130 = v338(&v83[v127], 1, v121);
  int v131 = v338(v129, 1, v121);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v128, v129, v121);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v128, 0, 1, v121);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v128, v121);
LABEL_62:
    sub_255D80868(0);
    memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v128, v129, v121);
LABEL_63:
  ((void (*)(char *, char *, uint64_t))v330)((char *)v323 + v320[6], &v321[v320[6]], v335);
  uint64_t v133 = v320[7];
  uint64_t v134 = (char *)v323 + v133;
  uint64_t v135 = &v321[v133];
  ((void (*)(char *, char *, uint64_t))v330)((char *)v323 + v133, &v321[v133], v335);
  uint64_t v136 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v137 = *(void **)&v135[v136];
  uint64_t v138 = *(void **)&v134[v136];
  *(void *)&v134[v136] = v137;
  id v139 = v137;

  uint64_t v140 = v320[8];
  id v141 = (char *)v323 + v140;
  id v142 = &v321[v140];
  ((void (*)(char *, char *, uint64_t))v330)((char *)v323 + v140, &v321[v140], v335);
  uint64_t v143 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v144 = *(int *)(v143 + 20);
  uint64_t v145 = *(void **)&v142[v144];
  uint64_t v146 = *(void **)&v141[v144];
  *(void *)&v141[v144] = v145;
  id v147 = v145;

  uint64_t v148 = *(int *)(v143 + 24);
  uint64_t v149 = *(void **)&v142[v148];
  uint64_t v150 = *(void **)&v141[v148];
  *(void *)&v141[v148] = v149;
  id v151 = v149;

  uint64_t v152 = v332[10];
  uint64_t v153 = (char *)v334 + v152;
  uint64_t v154 = (void **)((char *)v333 + v152);
  *(void *)uint64_t v153 = *(void **)((char *)v333 + v152);
  *((void *)v153 + 1) = *(void **)((char *)v333 + v152 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v153 + 2) = v154[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v153 + 3) = v154[3];
  *((void *)v153 + 4) = v154[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v153 + 5) = v154[5];
  *((void *)v153 + 6) = v154[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v153 + 7) = v154[7];
  *((void *)v153 + 8) = v154[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v153 + 9) = v154[9];
  *((void *)v153 + 10) = v154[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v153 + 11) = v154[11];
  uint64_t v155 = (void *)*((void *)v153 + 12);
  uint64_t v156 = (void *)v154[12];
  *((void *)v153 + 12) = v156;
  id v157 = v156;

  uint64_t v158 = (void *)*((void *)v153 + 13);
  uint64_t v159 = (void *)v154[13];
  *((void *)v153 + 13) = v159;
  id v160 = v159;

  uint64_t v161 = v21[13];
  uint64_t v162 = &v153[v161];
  uint64_t v163 = (char *)v154 + v161;
  LODWORD(v142) = v338(&v153[v161], 1, v121);
  int v164 = v338(v163, 1, v121);
  if (v142)
  {
    if (!v164)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v162, v163, v121);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v162, 0, 1, v121);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v164)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v162, v121);
LABEL_68:
    sub_255D80868(0);
    memcpy(v162, v163, *(void *)(*(void *)(v165 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v162, v163, v121);
LABEL_69:
  uint64_t v166 = v21[14];
  uint64_t v167 = &v153[v166];
  uint64_t v168 = (char *)v154 + v166;
  int v169 = v338(&v153[v166], 1, v121);
  int v170 = v338(v168, 1, v121);
  if (v169)
  {
    if (!v170)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v167, v168, v121);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v167, 0, 1, v121);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v170)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v167, v121);
LABEL_74:
    sub_255D80868(0);
    memcpy(v167, v168, *(void *)(*(void *)(v171 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v167, v168, v121);
LABEL_75:
  uint64_t v172 = v21[15];
  uint64_t v173 = &v153[v172];
  uint64_t v174 = (void *)((char *)v154 + v172);
  *(void *)uint64_t v173 = *v174;
  *((void *)v173 + 1) = v174[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v175 = v21[16];
  uint64_t v176 = &v153[v175];
  uint64_t v177 = (void *)((char *)v154 + v175);
  *(void *)uint64_t v176 = *v177;
  *((void *)v176 + 1) = v177[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v153[v21[17]] = *((unsigned char *)v154 + v21[17]);
  v153[v21[18]] = *((unsigned char *)v154 + v21[18]);
  uint64_t v178 = v21[19];
  uint64_t v179 = (uint64_t *)&v153[v178];
  uint64_t v180 = (void *)((char *)v154 + v178);
  unint64_t v181 = *(void *)((char *)v154 + v178 + 8);
  if (*(void *)&v153[v178 + 8] >> 60 == 15)
  {
    if (v181 >> 60 != 15)
    {
      uint64_t v182 = *v180;
      sub_255D80890(*v180, v181);
      *uint64_t v179 = v182;
      v179[1] = v181;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v181 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v179);
LABEL_80:
    *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
    goto LABEL_82;
  }
  uint64_t v183 = *v180;
  sub_255D80890(*v180, v181);
  uint64_t v184 = *v179;
  unint64_t v185 = v179[1];
  *uint64_t v179 = v183;
  v179[1] = v181;
  sub_255D80D04(v184, v185);
LABEL_82:
  uint64_t v186 = v21[20];
  uint64_t v187 = &v153[v186];
  uint64_t v188 = (char *)v154 + v186;
  int v189 = v331(&v153[v186], 1, v336);
  int v190 = v331(v188, 1, v336);
  if (v189)
  {
    if (!v190)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v187, v188, v336);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v187, 0, 1, v336);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v190)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v187, v336);
LABEL_87:
    sub_255D98658(0);
    memcpy(v187, v188, *(void *)(*(void *)(v191 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 24))(v187, v188, v336);
LABEL_88:
  uint64_t v192 = v21[21];
  id v193 = *(void **)&v153[v192];
  uint64_t v194 = *(void **)((char *)v154 + v192);
  *(void *)&v153[v192] = v194;
  id v195 = v194;

  uint64_t v196 = v21[22];
  uint64_t v197 = &v153[v196];
  uint64_t v198 = (char *)v154 + v196;
  int v199 = v338(&v153[v196], 1, v25);
  int v200 = v338(v198, 1, v25);
  if (v199)
  {
    if (!v200)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v197, v198, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v197, 0, 1, v25);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v200)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v197, v25);
LABEL_93:
    sub_255D80868(0);
    memcpy(v197, v198, *(void *)(*(void *)(v201 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v197, v198, v25);
LABEL_94:
  uint64_t v202 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v327)(&v153[v202[5]], (char *)v154 + v202[5], v328);
  ((void (*)(char *, char *, uint64_t))v330)(&v153[v202[6]], (char *)v154 + v202[6], v335);
  uint64_t v203 = v202[7];
  uint64_t v204 = *(void **)&v153[v203];
  uint64_t v205 = *(void **)((char *)v154 + v203);
  *(void *)&v153[v203] = v205;
  id v206 = v205;

  uint64_t v207 = v202[8];
  uint64_t v208 = *(void **)((char *)v154 + v207);
  uint64_t v209 = *(void **)&v153[v207];
  *(void *)&v153[v207] = v208;
  id v210 = v208;

  uint64_t v211 = v202[9];
  id v212 = &v153[v211];
  uint64_t v213 = (void *)((char *)v154 + v211);
  *(void *)id v212 = *v213;
  *((void *)v212 + 1) = v213[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v214 = v332[11];
  uint64_t v215 = (void **)((char *)v334 + v214);
  uint64_t v216 = (char *)v333 + v214;
  uint64_t v217 = *(void **)((char *)v333 + v214);
  uint64_t v218 = *v215;
  *uint64_t v215 = v217;
  id v219 = v217;

  uint64_t v220 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v327)((char *)v215 + *(int *)(v220 + 20), &v216[*(int *)(v220 + 20)], v328);
  ((void (*)(char *, char *, uint64_t))v330)((char *)v215 + *(int *)(v220 + 24), &v216[*(int *)(v220 + 24)], v335);
  uint64_t v221 = v332[12];
  uint64_t v222 = (char *)v334 + v221;
  uint64_t v223 = (char *)v333 + v221;
  *(void *)uint64_t v222 = *(void **)((char *)v333 + v221);
  *((void *)v222 + 1) = *(void **)((char *)v333 + v221 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v322 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v224 = v322[5];
  uint64_t v225 = &v222[v224];
  uint64_t v226 = &v223[v224];
  *(void *)uint64_t v225 = *(void *)&v223[v224];
  *((void *)v225 + 1) = *(void *)&v223[v224 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v225 + 2) = *((void *)v226 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v225 + 3) = *((void *)v226 + 3);
  *((void *)v225 + 4) = *((void *)v226 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v225 + 5) = *((void *)v226 + 5);
  *((void *)v225 + 6) = *((void *)v226 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v225 + 7) = *((void *)v226 + 7);
  *((void *)v225 + 8) = *((void *)v226 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v225 + 9) = *((void *)v226 + 9);
  *((void *)v225 + 10) = *((void *)v226 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v225 + 11) = *((void *)v226 + 11);
  uint64_t v227 = (void *)*((void *)v225 + 12);
  uint64_t v228 = (void *)*((void *)v226 + 12);
  *((void *)v225 + 12) = v228;
  id v229 = v228;

  uint64_t v230 = (void *)*((void *)v225 + 13);
  unint64_t v231 = (void *)*((void *)v226 + 13);
  *((void *)v225 + 13) = v231;
  id v232 = v231;

  uint64_t v233 = v21[13];
  uint64_t v234 = &v225[v233];
  uint64_t v235 = &v226[v233];
  LODWORD(v216) = v338(&v225[v233], 1, v25);
  int v236 = v338(v235, 1, v25);
  if (v216)
  {
    if (!v236)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v234, v235, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v234, 0, 1, v25);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v236)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v234, v25);
LABEL_99:
    sub_255D80868(0);
    memcpy(v234, v235, *(void *)(*(void *)(v237 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v234, v235, v25);
LABEL_100:
  uint64_t v238 = v21[14];
  uint64_t v239 = &v225[v238];
  uint64_t v240 = &v226[v238];
  int v241 = v338(&v225[v238], 1, v25);
  int v242 = v338(v240, 1, v25);
  if (v241)
  {
    if (!v242)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v239, v240, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v239, 0, 1, v25);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v242)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v239, v25);
LABEL_105:
    sub_255D80868(0);
    memcpy(v239, v240, *(void *)(*(void *)(v243 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v239, v240, v25);
LABEL_106:
  uint64_t v244 = v21[15];
  uint64_t v245 = &v225[v244];
  uint64_t v246 = &v226[v244];
  *(void *)uint64_t v245 = *(void *)v246;
  *((void *)v245 + 1) = *((void *)v246 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v247 = v21[16];
  uint64_t v248 = &v225[v247];
  uint64_t v249 = &v226[v247];
  *(void *)uint64_t v248 = *(void *)v249;
  *((void *)v248 + 1) = *((void *)v249 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v225[v21[17]] = v226[v21[17]];
  v225[v21[18]] = v226[v21[18]];
  uint64_t v250 = v21[19];
  uint64_t v251 = (uint64_t *)&v225[v250];
  uint64_t v252 = (uint64_t *)&v226[v250];
  unint64_t v253 = *(void *)&v226[v250 + 8];
  if (*(void *)&v225[v250 + 8] >> 60 == 15)
  {
    if (v253 >> 60 != 15)
    {
      uint64_t v254 = *v252;
      sub_255D80890(v254, v253);
      uint64_t *v251 = v254;
      v251[1] = v253;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v253 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v251);
LABEL_111:
    *(_OWORD *)uint64_t v251 = *(_OWORD *)v252;
    goto LABEL_113;
  }
  uint64_t v255 = *v252;
  sub_255D80890(v255, v253);
  uint64_t v256 = *v251;
  unint64_t v257 = v251[1];
  uint64_t *v251 = v255;
  v251[1] = v253;
  sub_255D80D04(v256, v257);
LABEL_113:
  uint64_t v258 = v21[20];
  id v259 = &v225[v258];
  uint64_t v260 = &v226[v258];
  int v261 = v331(&v225[v258], 1, v336);
  int v262 = v331(v260, 1, v336);
  if (v261)
  {
    if (!v262)
    {
      (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v259, v260, v336);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v259, 0, 1, v336);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v262)
  {
    (*(void (**)(char *, uint64_t))(v329 + 8))(v259, v336);
LABEL_118:
    sub_255D98658(0);
    memcpy(v259, v260, *(void *)(*(void *)(v263 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v329 + 24))(v259, v260, v336);
LABEL_119:
  uint64_t v264 = v21[21];
  uint64_t v265 = *(void **)&v225[v264];
  uint64_t v266 = *(void **)&v226[v264];
  *(void *)&v225[v264] = v266;
  id v267 = v266;

  uint64_t v268 = v21[22];
  uint64_t v269 = &v225[v268];
  uint64_t v270 = &v226[v268];
  int v271 = v338(&v225[v268], 1, v25);
  int v272 = v338(v270, 1, v25);
  if (v271)
  {
    uint64_t v273 = v334;
    if (!v272)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v269, v270, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v269, 0, 1, v25);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  uint64_t v273 = v334;
  if (v272)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v269, v25);
LABEL_124:
    sub_255D80868(0);
    memcpy(v269, v270, *(void *)(*(void *)(v274 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v269, v270, v25);
LABEL_125:
  ((void (*)(char *, char *, uint64_t))v327)(&v222[v322[6]], &v223[v322[6]], v328);
  ((void (*)(char *, char *, uint64_t))v330)(&v222[v322[7]], &v223[v322[7]], v335);
  *(void *)&v222[v322[8]] = *(void *)&v223[v322[8]];
  swift_retain();
  swift_release();
  uint64_t v275 = v322[9];
  uint64_t v276 = &v222[v275];
  uint64_t v277 = &v223[v275];
  int v278 = v338(&v222[v275], 1, v25);
  int v279 = v338(v277, 1, v25);
  if (v278)
  {
    uint64_t v280 = v325;
    if (!v279)
    {
      (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v276, v277, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v276, 0, 1, v25);
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  uint64_t v280 = v325;
  if (v279)
  {
    (*(void (**)(char *, uint64_t))(v337 + 8))(v276, v25);
LABEL_130:
    sub_255D80868(0);
    memcpy(v276, v277, *(void *)(*(void *)(v281 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v337 + 24))(v276, v277, v25);
LABEL_131:
  uint64_t v282 = v332[13];
  uint64_t v283 = *(void **)((char *)v333 + v282);
  uint64_t v284 = *(void **)((char *)v273 + v282);
  *(void **)((char *)v273 + v282) = v283;
  id v285 = v283;

  uint64_t v286 = v324[6];
  uint64_t v287 = (void *)((char *)v326 + v286);
  uint64_t v288 = (uint64_t)v280 + v286;
  uint64_t v289 = *(void **)((char *)v326 + v286);
  uint64_t v290 = *(void **)((char *)v280 + v286);
  *uint64_t v287 = v290;
  id v291 = v290;

  v287[1] = *(void *)(v288 + 8);
  if (v326 != v280)
  {
    uint64_t v292 = v324[7];
    v293 = (void *)((char *)v326 + v292);
    v294 = (void *)((char *)v280 + v292);
    sub_255D9CB50((uint64_t)v326 + v292, (uint64_t (*)(void))sub_255D986E4);
    sub_255D986E4(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v318 + 16))(v293, v294, v328);
    }
    else
    {
      void *v293 = *v294;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v295 = v324[8];
    uint64_t v296 = (void *)((char *)v326 + v295);
    uint64_t v297 = (void *)((char *)v280 + v295);
    sub_255D9CB50((uint64_t)v326 + v295, (uint64_t (*)(void))sub_255D9870C);
    sub_255D9870C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v319 + 16))(v296, v297, v335);
    }
    else
    {
      *uint64_t v296 = *v297;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v298 = v324[9];
    v299 = (void *)((char *)v326 + v298);
    v300 = (void *)((char *)v280 + v298);
    sub_255D9CB50((uint64_t)v326 + v298, (uint64_t (*)(void))sub_255D98734);
    sub_255D98734(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v301 = sub_255EEE620();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v301 - 8) + 16))(v299, v300, v301);
    }
    else
    {
      void *v299 = *v300;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v302 = v324[10];
  uint64_t v303 = (char *)v326 + v302;
  uint64_t v304 = (uint64_t)v280 + v302;
  *(void *)((char *)v326 + v302) = *(void *)((char *)v280 + v302);
  swift_retain();
  swift_release();
  *((void *)v303 + 1) = *(void *)(v304 + 8);
  swift_retain();
  swift_release();
  v303[16] = *(unsigned char *)(v304 + 16);
  uint64_t v305 = v324[11];
  uint64_t v306 = (char *)v326 + v305;
  v307 = (char *)v280 + v305;
  *uint64_t v306 = *v307;
  *((void *)v306 + 1) = *((void *)v307 + 1);
  swift_retain();
  swift_release();
  uint64_t v308 = v324[12];
  v309 = (char *)v326 + v308;
  uint64_t v310 = (char *)v280 + v308;
  char *v309 = *v310;
  *((void *)v309 + 1) = *((void *)v310 + 1);
  swift_retain();
  swift_release();
  uint64_t v311 = v324[13];
  uint64_t v312 = (void *)((char *)v326 + v311);
  v313 = (void *)((char *)v280 + v311);
  *uint64_t v312 = *v313;
  v312[1] = v313[1];
  swift_retain();
  swift_release();
  uint64_t v314 = v324[14];
  uint64_t v315 = (void *)((char *)v326 + v314);
  uint64_t v316 = (void *)((char *)v280 + v314);
  void *v315 = *v316;
  v315[1] = v316[1];
  swift_retain();
  swift_release();
  return v326;
}

uint64_t sub_255D9CB50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_255D9CBB0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v156 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v7 = v156[5];
  unint64_t v8 = &v5[v7];
  id v157 = v6;
  uint64_t v9 = &v6[v7];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  *((void *)v8 + 2) = *((void *)v9 + 2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
  *((void *)v8 + 11) = *((void *)v9 + 11);
  *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
  uint64_t v10 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v10[13];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = sub_255EEE100();
  uint64_t v15 = *(void *)(v14 - 8);
  id v160 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v158 = v15;
  if (v160(v13, 1, v14))
  {
    sub_255D80868(0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = v10[14];
  uint64_t v18 = &v8[v17];
  id v19 = &v9[v17];
  if (v160(&v9[v17], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v19, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
  *(_OWORD *)&v8[v10[16]] = *(_OWORD *)&v9[v10[16]];
  v8[v10[17]] = v9[v10[17]];
  v8[v10[18]] = v9[v10[18]];
  *(_OWORD *)&v8[v10[19]] = *(_OWORD *)&v9[v10[19]];
  uint64_t v21 = v10[20];
  uint64_t v22 = &v8[v21];
  uint64_t v23 = &v9[v21];
  uint64_t v24 = sub_255EEDF60();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v153 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v149 = v25;
  if (v153(v23, 1, v24))
  {
    sub_255D98658(0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *(void *)&v8[v10[21]] = *(void *)&v9[v10[21]];
  uint64_t v27 = v10[22];
  uint64_t v28 = &v8[v27];
  uint64_t v29 = &v9[v27];
  uint64_t v148 = a1;
  if (v160(&v9[v27], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v28, 0, 1, v14);
  }
  uint64_t v31 = v156[6];
  int v32 = &v5[v31];
  int v33 = &v157[v31];
  uint64_t v34 = sub_255EEE280();
  uint64_t v150 = (void (**)(char *, char *))(*(void *)(v34 - 8) + 32);
  uint64_t v151 = v34;
  uint64_t v154 = *v150;
  (*v150)(v32, v33);
  *(void *)&v5[v156[7]] = *(void *)&v157[v156[7]];
  uint64_t v35 = v156[8];
  uint64_t v36 = &v5[v35];
  unint64_t v37 = &v157[v35];
  uint64_t v155 = sub_255EEE200();
  uint64_t v159 = *(void (**)(char *, char *))(*(void *)(v155 - 8) + 32);
  v159(v36, v37);
  uint64_t v38 = v156[9];
  unint64_t v39 = &v5[v38];
  uint64_t v40 = &v157[v38];
  *(_OWORD *)&v5[v38] = *(_OWORD *)&v157[v38];
  uint64_t v144 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v41 = v144[5];
  unint64_t v42 = &v39[v41];
  uint64_t v43 = &v40[v41];
  *(_OWORD *)unint64_t v42 = *(_OWORD *)&v40[v41];
  *((void *)v42 + 2) = *(void *)&v40[v41 + 16];
  *(_OWORD *)(v42 + 24) = *(_OWORD *)&v40[v41 + 24];
  *(_OWORD *)(v42 + 40) = *(_OWORD *)&v40[v41 + 40];
  *(_OWORD *)(v42 + 56) = *(_OWORD *)&v40[v41 + 56];
  *(_OWORD *)(v42 + 72) = *(_OWORD *)&v40[v41 + 72];
  *((void *)v42 + 11) = *(void *)&v40[v41 + 88];
  *((_OWORD *)v42 + 6) = *(_OWORD *)&v40[v41 + 96];
  uint64_t v44 = v10[13];
  uint64_t v45 = &v42[v44];
  uint64_t v46 = &v43[v44];
  uint64_t v152 = v24;
  if (v160(&v43[v44], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v45, v46, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v45, 0, 1, v14);
  }
  uint64_t v48 = v10[14];
  uint64_t v49 = &v42[v48];
  uint64_t v50 = &v43[v48];
  if (v160(&v43[v48], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v49, v50, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v49, 0, 1, v14);
  }
  *(_OWORD *)&v42[v10[15]] = *(_OWORD *)&v43[v10[15]];
  *(_OWORD *)&v42[v10[16]] = *(_OWORD *)&v43[v10[16]];
  v42[v10[17]] = v43[v10[17]];
  v42[v10[18]] = v43[v10[18]];
  *(_OWORD *)&v42[v10[19]] = *(_OWORD *)&v43[v10[19]];
  uint64_t v52 = v10[20];
  uint64_t v53 = &v42[v52];
  int v54 = &v43[v52];
  if (v153(&v43[v52], 1, v24))
  {
    sub_255D98658(0);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v53, v54, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v53, 0, 1, v24);
  }
  *(void *)&v42[v10[21]] = *(void *)&v43[v10[21]];
  uint64_t v56 = v10[22];
  uint64_t v57 = &v42[v56];
  uint64_t v58 = &v43[v56];
  if (v160(&v43[v56], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v57, v58, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v57, 0, 1, v14);
  }
  ((void (*)(char *, char *, uint64_t))v159)(&v39[v144[6]], &v40[v144[6]], v155);
  uint64_t v60 = v144[7];
  uint64_t v61 = &v39[v60];
  uint64_t v62 = &v40[v60];
  ((void (*)(char *, char *, uint64_t))v159)(&v39[v60], &v40[v60], v155);
  uint64_t v63 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v61[*(int *)(v63 + 20)] = *(void *)&v62[*(int *)(v63 + 20)];
  uint64_t v64 = v144[8];
  int v65 = &v39[v64];
  uint64_t v66 = &v40[v64];
  ((void (*)(char *, char *, uint64_t))v159)(&v39[v64], &v40[v64], v155);
  uint64_t v67 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v65[*(int *)(v67 + 20)] = *(void *)&v66[*(int *)(v67 + 20)];
  *(void *)&v65[*(int *)(v67 + 24)] = *(void *)&v66[*(int *)(v67 + 24)];
  uint64_t v68 = v156[10];
  uint64_t v69 = &v5[v68];
  uint64_t v70 = &v157[v68];
  *(_OWORD *)uint64_t v69 = *(_OWORD *)&v157[v68];
  *((void *)v69 + 2) = *(void *)&v157[v68 + 16];
  *(_OWORD *)(v69 + 24) = *(_OWORD *)&v157[v68 + 24];
  *(_OWORD *)(v69 + 40) = *(_OWORD *)&v157[v68 + 40];
  *(_OWORD *)(v69 + 56) = *(_OWORD *)&v157[v68 + 56];
  *(_OWORD *)(v69 + 72) = *(_OWORD *)&v157[v68 + 72];
  *((void *)v69 + 11) = *(void *)&v157[v68 + 88];
  *((_OWORD *)v69 + 6) = *(_OWORD *)&v157[v68 + 96];
  uint64_t v71 = v10[13];
  uint64_t v72 = &v69[v71];
  uint64_t v73 = &v70[v71];
  if (v160(&v70[v71], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    uint64_t v75 = v24;
    uint64_t v76 = v149;
    uint64_t v77 = v158;
  }
  else
  {
    uint64_t v77 = v158;
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v72, v73, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v72, 0, 1, v14);
    uint64_t v75 = v152;
    uint64_t v76 = v149;
  }
  uint64_t v78 = v10[14];
  uint64_t v79 = &v69[v78];
  uint64_t v80 = &v70[v78];
  if (v160(&v70[v78], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v79, v80, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v79, 0, 1, v14);
  }
  *(_OWORD *)&v69[v10[15]] = *(_OWORD *)&v70[v10[15]];
  *(_OWORD *)&v69[v10[16]] = *(_OWORD *)&v70[v10[16]];
  v69[v10[17]] = v70[v10[17]];
  v69[v10[18]] = v70[v10[18]];
  *(_OWORD *)&v69[v10[19]] = *(_OWORD *)&v70[v10[19]];
  uint64_t v82 = v10[20];
  id v83 = &v69[v82];
  id v84 = &v70[v82];
  if (v153(&v70[v82], 1, v75))
  {
    sub_255D98658(0);
    memcpy(v83, v84, *(void *)(*(void *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v83, v84, v75);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v83, 0, 1, v75);
  }
  *(void *)&v69[v10[21]] = *(void *)&v70[v10[21]];
  uint64_t v86 = v10[22];
  id v87 = &v69[v86];
  uint64_t v88 = &v70[v86];
  if (v160(&v70[v86], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v87, v88, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v87, 0, 1, v14);
  }
  id v90 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v154)(&v69[v90[5]], &v70[v90[5]], v151);
  ((void (*)(char *, char *, uint64_t))v159)(&v69[v90[6]], &v70[v90[6]], v155);
  *(void *)&v69[v90[7]] = *(void *)&v70[v90[7]];
  *(void *)&v69[v90[8]] = *(void *)&v70[v90[8]];
  *(_OWORD *)&v69[v90[9]] = *(_OWORD *)&v70[v90[9]];
  uint64_t v91 = v156[11];
  int v92 = &v5[v91];
  uint64_t v93 = &v157[v91];
  *(void *)&v5[v91] = *(void *)&v157[v91];
  uint64_t v94 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v154)(&v92[*(int *)(v94 + 20)], &v93[*(int *)(v94 + 20)], v151);
  ((void (*)(char *, char *, uint64_t))v159)(&v92[*(int *)(v94 + 24)], &v93[*(int *)(v94 + 24)], v155);
  uint64_t v95 = v156[12];
  uint64_t v96 = &v5[v95];
  uint64_t v97 = &v157[v95];
  *(_OWORD *)uint64_t v96 = *(_OWORD *)&v157[v95];
  uint64_t v145 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v98 = v145[5];
  int v99 = &v96[v98];
  int v100 = &v97[v98];
  *(_OWORD *)int v99 = *(_OWORD *)&v97[v98];
  *((void *)v99 + 2) = *(void *)&v97[v98 + 16];
  *(_OWORD *)(v99 + 24) = *(_OWORD *)&v97[v98 + 24];
  *(_OWORD *)(v99 + 40) = *(_OWORD *)&v97[v98 + 40];
  *(_OWORD *)(v99 + 56) = *(_OWORD *)&v97[v98 + 56];
  *(_OWORD *)(v99 + 72) = *(_OWORD *)&v97[v98 + 72];
  *((void *)v99 + 11) = *(void *)&v97[v98 + 88];
  *((_OWORD *)v99 + 6) = *(_OWORD *)&v97[v98 + 96];
  uint64_t v101 = v10[13];
  uint64_t v102 = &v99[v101];
  uint64_t v103 = &v100[v101];
  if (v160(&v100[v101], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v102, v103, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v102, 0, 1, v14);
  }
  uint64_t v105 = v10[14];
  uint64_t v106 = &v99[v105];
  uint64_t v107 = &v100[v105];
  if (v160(&v100[v105], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v106, v107, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v106, 0, 1, v14);
  }
  *(_OWORD *)&v99[v10[15]] = *(_OWORD *)&v100[v10[15]];
  *(_OWORD *)&v99[v10[16]] = *(_OWORD *)&v100[v10[16]];
  v99[v10[17]] = v100[v10[17]];
  v99[v10[18]] = v100[v10[18]];
  *(_OWORD *)&v99[v10[19]] = *(_OWORD *)&v100[v10[19]];
  uint64_t v109 = v10[20];
  uint64_t v110 = &v99[v109];
  unint64_t v111 = &v100[v109];
  if (v153(&v100[v109], 1, v152))
  {
    sub_255D98658(0);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v110, v111, v152);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v110, 0, 1, v152);
  }
  *(void *)&v99[v10[21]] = *(void *)&v100[v10[21]];
  uint64_t v113 = v10[22];
  uint64_t v114 = &v99[v113];
  unint64_t v115 = &v100[v113];
  if (v160(&v100[v113], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v114, v115, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v114, 0, 1, v14);
  }
  ((void (*)(char *, char *, uint64_t))v154)(&v96[v145[6]], &v97[v145[6]], v151);
  ((void (*)(char *, char *, uint64_t))v159)(&v96[v145[7]], &v97[v145[7]], v155);
  *(void *)&v96[v145[8]] = *(void *)&v97[v145[8]];
  uint64_t v117 = v145[9];
  uint64_t v118 = &v96[v117];
  int v119 = &v97[v117];
  if (v160(&v97[v117], 1, v14))
  {
    sub_255D80868(0);
    memcpy(v118, v119, *(void *)(*(void *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v118, v119, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v118, 0, 1, v14);
  }
  *(void *)&v5[v156[13]] = *(void *)&v157[v156[13]];
  uint64_t v121 = a3[7];
  *(_OWORD *)((char *)v148 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v122 = (char *)v148 + v121;
  uint64_t v123 = (char *)a2 + v121;
  sub_255D986E4(0);
  uint64_t v125 = v124;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(char *, char *, uint64_t))v154)(v122, v123, v151);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64));
  }
  uint64_t v126 = a3[8];
  uint64_t v127 = (char *)v148 + v126;
  uint64_t v128 = (char *)a2 + v126;
  sub_255D9870C(0);
  uint64_t v130 = v129;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(char *, char *, uint64_t))v159)(v127, v128, v155);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v127, v128, *(void *)(*(void *)(v130 - 8) + 64));
  }
  uint64_t v131 = a3[9];
  uint64_t v132 = (char *)v148 + v131;
  uint64_t v133 = (char *)a2 + v131;
  sub_255D98734(0);
  uint64_t v135 = v134;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v136 = sub_255EEE620();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v136 - 8) + 32))(v132, v133, v136);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v132, v133, *(void *)(*(void *)(v135 - 8) + 64));
  }
  uint64_t v137 = a3[10];
  uint64_t v138 = a3[11];
  id v139 = (char *)v148 + v137;
  uint64_t v140 = (char *)a2 + v137;
  long long v141 = *(_OWORD *)v140;
  v139[16] = v140[16];
  *(_OWORD *)id v139 = v141;
  *(_OWORD *)((char *)v148 + v138) = *(_OWORD *)((char *)a2 + v138);
  uint64_t v142 = a3[13];
  *(_OWORD *)((char *)v148 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)v148 + v142) = *(_OWORD *)((char *)a2 + v142);
  *(_OWORD *)((char *)v148 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  return v148;
}

void *sub_255D9DED0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  v321 = a3;
  v322 = a2;
  uint64_t v6 = a3[5];
  v323 = a1;
  uint64_t v7 = (void **)((char *)a1 + v6);
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *v7;
  *uint64_t v7 = *(void **)((char *)a2 + v6);

  uint64_t v329 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v10 = v329[5];
  v331 = v7;
  uint64_t v11 = (char *)v7 + v10;
  v330 = v8;
  uint64_t v12 = &v8[v10];
  uint64_t v13 = *(void *)&v8[v10 + 8];
  *(void *)uint64_t v11 = *(void *)&v8[v10];
  *((void *)v11 + 1) = v13;
  swift_bridgeObjectRelease();
  *((void *)v11 + 2) = *((void *)v12 + 2);
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v12 + 4);
  *((void *)v11 + 3) = *((void *)v12 + 3);
  *((void *)v11 + 4) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *((void *)v12 + 6);
  *((void *)v11 + 5) = *((void *)v12 + 5);
  *((void *)v11 + 6) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *((void *)v12 + 8);
  *((void *)v11 + 7) = *((void *)v12 + 7);
  *((void *)v11 + 8) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)v12 + 10);
  *((void *)v11 + 9) = *((void *)v12 + 9);
  *((void *)v11 + 10) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)*((void *)v11 + 12);
  uint64_t v19 = *((void *)v12 + 12);
  *((void *)v11 + 11) = *((void *)v12 + 11);
  *((void *)v11 + 12) = v19;

  uint64_t v20 = (void *)*((void *)v11 + 13);
  *((void *)v11 + 13) = *((void *)v12 + 13);

  uint64_t v21 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v22 = v21[13];
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  uint64_t v25 = sub_255EEE100();
  uint64_t v334 = *(void *)(v25 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v334 + 48);
  LODWORD(v7) = v26(v23, 1, v25);
  uint64_t v335 = v26;
  int v27 = v26(v24, 1, v25);
  if (v7)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v23, v25);
LABEL_6:
    sub_255D80868(0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v23, v24, v25);
LABEL_7:
  uint64_t v29 = v21[14];
  uint64_t v30 = &v11[v29];
  uint64_t v31 = &v12[v29];
  int v32 = v26(&v11[v29], 1, v25);
  int v33 = v26(v31, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v30, v31, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v30, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v30, v25);
LABEL_12:
    sub_255D80868(0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v30, v31, v25);
LABEL_13:
  uint64_t v35 = v21[15];
  uint64_t v36 = &v11[v35];
  unint64_t v37 = &v12[v35];
  uint64_t v39 = *(void *)v37;
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = v39;
  *((void *)v36 + 1) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v21[16];
  uint64_t v41 = &v11[v40];
  unint64_t v42 = &v12[v40];
  uint64_t v44 = *(void *)v42;
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  v11[v21[17]] = v12[v21[17]];
  v11[v21[18]] = v12[v21[18]];
  uint64_t v45 = v21[19];
  uint64_t v46 = (uint64_t)&v11[v45];
  uint64_t v47 = &v12[v45];
  unint64_t v48 = *(void *)&v11[v45 + 8];
  if (v48 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    goto LABEL_18;
  }
  unint64_t v49 = *((void *)v47 + 1);
  if (v49 >> 60 == 15)
  {
    sub_255D81EF8(v46);
    goto LABEL_16;
  }
  uint64_t v50 = *(void *)v46;
  *(void *)uint64_t v46 = *(void *)v47;
  *(void *)(v46 + 8) = v49;
  sub_255D80D04(v50, v48);
LABEL_18:
  uint64_t v51 = v21[20];
  uint64_t v52 = &v11[v51];
  uint64_t v53 = &v12[v51];
  uint64_t v54 = sub_255EEDF60();
  uint64_t v326 = *(void *)(v54 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v326 + 48);
  int v56 = v55(v52, 1, v54);
  uint64_t v333 = v54;
  uint64_t v328 = v55;
  int v57 = v55(v53, 1, v54);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v326 + 32))(v52, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v326 + 56))(v52, 0, 1, v54);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v326 + 8))(v52, v54);
LABEL_23:
    sub_255D98658(0);
    memcpy(v52, v53, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v326 + 40))(v52, v53, v54);
LABEL_24:
  uint64_t v59 = v21[21];
  uint64_t v60 = *(void **)&v11[v59];
  *(void *)&v11[v59] = *(void *)&v12[v59];

  uint64_t v61 = v21[22];
  uint64_t v62 = &v11[v61];
  uint64_t v63 = &v12[v61];
  int v64 = v335(&v11[v61], 1, v25);
  int v65 = v335(v63, 1, v25);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v62, v63, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v62, 0, 1, v25);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v62, v25);
LABEL_29:
    sub_255D80868(0);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v62, v63, v25);
LABEL_30:
  uint64_t v67 = v329[6];
  uint64_t v68 = (char *)v331 + v67;
  uint64_t v69 = &v8[v67];
  uint64_t v70 = sub_255EEE280();
  uint64_t v315 = *(void *)(v70 - 8);
  v324 = *(void (**)(char *, char *))(v315 + 40);
  uint64_t v325 = v70;
  v324(v68, v69);
  uint64_t v71 = v329[7];
  uint64_t v72 = *(void **)((char *)v331 + v71);
  *(void **)((char *)v331 + v71) = *(void **)&v8[v71];

  uint64_t v73 = v329[8];
  uint64_t v74 = (char *)v331 + v73;
  uint64_t v75 = &v8[v73];
  uint64_t v76 = sub_255EEE200();
  uint64_t v316 = *(void *)(v76 - 8);
  uint64_t v332 = v76;
  v327 = *(void (**)(char *, char *))(v316 + 40);
  v327(v74, v75);
  uint64_t v77 = v329[9];
  uint64_t v78 = (void **)((char *)v331 + v77);
  uint64_t v79 = &v8[v77];
  uint64_t v80 = *(void *)&v8[v77 + 8];
  void *v78 = *(void *)&v8[v77];
  v78[1] = v80;
  swift_bridgeObjectRelease();
  v317 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v318 = v79;
  uint64_t v81 = v317[5];
  v320 = v78;
  uint64_t v82 = (char *)v78 + v81;
  id v83 = &v79[v81];
  uint64_t v84 = *(void *)&v79[v81 + 8];
  *(void *)uint64_t v82 = *(void *)&v79[v81];
  *((void *)v82 + 1) = v84;
  swift_bridgeObjectRelease();
  *((void *)v82 + 2) = *((void *)v83 + 2);
  swift_bridgeObjectRelease();
  uint64_t v85 = *((void *)v83 + 4);
  *((void *)v82 + 3) = *((void *)v83 + 3);
  *((void *)v82 + 4) = v85;
  swift_bridgeObjectRelease();
  uint64_t v86 = *((void *)v83 + 6);
  *((void *)v82 + 5) = *((void *)v83 + 5);
  *((void *)v82 + 6) = v86;
  swift_bridgeObjectRelease();
  uint64_t v87 = *((void *)v83 + 8);
  *((void *)v82 + 7) = *((void *)v83 + 7);
  *((void *)v82 + 8) = v87;
  swift_bridgeObjectRelease();
  uint64_t v88 = *((void *)v83 + 10);
  *((void *)v82 + 9) = *((void *)v83 + 9);
  *((void *)v82 + 10) = v88;
  swift_bridgeObjectRelease();
  uint64_t v89 = (void *)*((void *)v82 + 12);
  uint64_t v90 = *((void *)v83 + 12);
  *((void *)v82 + 11) = *((void *)v83 + 11);
  *((void *)v82 + 12) = v90;

  uint64_t v91 = (void *)*((void *)v82 + 13);
  *((void *)v82 + 13) = *((void *)v83 + 13);

  uint64_t v92 = v21[13];
  uint64_t v93 = &v82[v92];
  uint64_t v94 = &v83[v92];
  LODWORD(v79) = v335(&v82[v92], 1, v25);
  int v95 = v335(v94, 1, v25);
  if (v79)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v93, v94, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v93, 0, 1, v25);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v93, v25);
LABEL_35:
    sub_255D80868(0);
    memcpy(v93, v94, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v93, v94, v25);
LABEL_36:
  uint64_t v97 = v21[14];
  uint64_t v98 = &v82[v97];
  int v99 = &v83[v97];
  int v100 = v335(&v82[v97], 1, v25);
  int v101 = v335(v99, 1, v25);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v98, v99, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v98, 0, 1, v25);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v101)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v98, v25);
LABEL_41:
    sub_255D80868(0);
    memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v98, v99, v25);
LABEL_42:
  uint64_t v103 = v21[15];
  uint64_t v104 = &v82[v103];
  uint64_t v105 = (uint64_t *)&v83[v103];
  uint64_t v107 = *v105;
  uint64_t v106 = v105[1];
  *(void *)uint64_t v104 = v107;
  *((void *)v104 + 1) = v106;
  swift_bridgeObjectRelease();
  uint64_t v108 = v21[16];
  uint64_t v109 = &v82[v108];
  uint64_t v110 = (uint64_t *)&v83[v108];
  uint64_t v112 = *v110;
  uint64_t v111 = v110[1];
  *(void *)uint64_t v109 = v112;
  *((void *)v109 + 1) = v111;
  swift_bridgeObjectRelease();
  v82[v21[17]] = v83[v21[17]];
  v82[v21[18]] = v83[v21[18]];
  uint64_t v113 = v21[19];
  uint64_t v114 = (uint64_t)&v82[v113];
  unint64_t v115 = &v83[v113];
  unint64_t v116 = *(void *)&v82[v113 + 8];
  if (v116 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
    goto LABEL_47;
  }
  unint64_t v117 = *((void *)v115 + 1);
  if (v117 >> 60 == 15)
  {
    sub_255D81EF8(v114);
    goto LABEL_45;
  }
  uint64_t v118 = *(void *)v114;
  *(void *)uint64_t v114 = *(void *)v115;
  *(void *)(v114 + 8) = v117;
  sub_255D80D04(v118, v116);
LABEL_47:
  uint64_t v119 = v21[20];
  uint64_t v120 = &v82[v119];
  uint64_t v121 = &v83[v119];
  int v122 = v328(&v82[v119], 1, v333);
  int v123 = v328(v121, 1, v333);
  if (v122)
  {
    if (!v123)
    {
      (*(void (**)(char *, char *, uint64_t))(v326 + 32))(v120, v121, v333);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v326 + 56))(v120, 0, 1, v333);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v123)
  {
    (*(void (**)(char *, uint64_t))(v326 + 8))(v120, v333);
LABEL_52:
    sub_255D98658(0);
    memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v326 + 40))(v120, v121, v333);
LABEL_53:
  uint64_t v125 = v21[21];
  uint64_t v126 = *(void **)&v82[v125];
  *(void *)&v82[v125] = *(void *)&v83[v125];

  uint64_t v127 = v21[22];
  uint64_t v128 = &v82[v127];
  uint64_t v129 = &v83[v127];
  int v130 = v335(&v82[v127], 1, v25);
  int v131 = v335(v129, 1, v25);
  if (v130)
  {
    if (!v131)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v128, v129, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v128, 0, 1, v25);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v128, v25);
LABEL_58:
    sub_255D80868(0);
    memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v128, v129, v25);
LABEL_59:
  ((void (*)(char *, char *, uint64_t))v327)((char *)v320 + v317[6], &v318[v317[6]], v332);
  uint64_t v133 = v317[7];
  uint64_t v134 = (char *)v320 + v133;
  uint64_t v135 = &v318[v133];
  ((void (*)(char *, char *, uint64_t))v327)((char *)v320 + v133, &v318[v133], v332);
  uint64_t v136 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v137 = *(void **)&v134[v136];
  *(void *)&v134[v136] = *(void *)&v135[v136];

  uint64_t v138 = v317[8];
  id v139 = (char *)v320 + v138;
  uint64_t v140 = &v318[v138];
  ((void (*)(char *, char *, uint64_t))v327)((char *)v320 + v138, &v318[v138], v332);
  uint64_t v141 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v142 = *(int *)(v141 + 20);
  uint64_t v143 = *(void **)&v139[v142];
  *(void *)&v139[v142] = *(void *)&v140[v142];

  uint64_t v144 = *(int *)(v141 + 24);
  uint64_t v145 = *(void **)&v139[v144];
  *(void *)&v139[v144] = *(void *)&v140[v144];

  uint64_t v146 = v329[10];
  id v147 = (char *)v331 + v146;
  uint64_t v148 = &v8[v146];
  uint64_t v149 = *(void *)&v8[v146 + 8];
  *(void *)id v147 = *(void *)&v8[v146];
  *((void *)v147 + 1) = v149;
  swift_bridgeObjectRelease();
  *((void *)v147 + 2) = *((void *)v148 + 2);
  swift_bridgeObjectRelease();
  uint64_t v150 = *((void *)v148 + 4);
  *((void *)v147 + 3) = *((void *)v148 + 3);
  *((void *)v147 + 4) = v150;
  swift_bridgeObjectRelease();
  uint64_t v151 = *((void *)v148 + 6);
  *((void *)v147 + 5) = *((void *)v148 + 5);
  *((void *)v147 + 6) = v151;
  swift_bridgeObjectRelease();
  uint64_t v152 = *((void *)v148 + 8);
  *((void *)v147 + 7) = *((void *)v148 + 7);
  *((void *)v147 + 8) = v152;
  swift_bridgeObjectRelease();
  uint64_t v153 = *((void *)v148 + 10);
  *((void *)v147 + 9) = *((void *)v148 + 9);
  *((void *)v147 + 10) = v153;
  swift_bridgeObjectRelease();
  uint64_t v154 = (void *)*((void *)v147 + 12);
  uint64_t v155 = *((void *)v148 + 12);
  *((void *)v147 + 11) = *((void *)v148 + 11);
  *((void *)v147 + 12) = v155;

  uint64_t v156 = (void *)*((void *)v147 + 13);
  *((void *)v147 + 13) = *((void *)v148 + 13);

  uint64_t v157 = v21[13];
  uint64_t v158 = &v147[v157];
  uint64_t v159 = &v148[v157];
  LODWORD(v140) = v335(&v147[v157], 1, v25);
  int v160 = v335(v159, 1, v25);
  if (v140)
  {
    if (!v160)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v158, v159, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v158, 0, 1, v25);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v160)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v158, v25);
LABEL_64:
    sub_255D80868(0);
    memcpy(v158, v159, *(void *)(*(void *)(v161 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v158, v159, v25);
LABEL_65:
  uint64_t v162 = v21[14];
  uint64_t v163 = &v147[v162];
  int v164 = &v148[v162];
  int v165 = v335(&v147[v162], 1, v25);
  int v166 = v335(v164, 1, v25);
  if (v165)
  {
    if (!v166)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v163, v164, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v163, 0, 1, v25);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v166)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v163, v25);
LABEL_70:
    sub_255D80868(0);
    memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v163, v164, v25);
LABEL_71:
  uint64_t v168 = v21[15];
  int v169 = &v147[v168];
  int v170 = &v148[v168];
  uint64_t v172 = *(void *)v170;
  uint64_t v171 = *((void *)v170 + 1);
  *(void *)int v169 = v172;
  *((void *)v169 + 1) = v171;
  swift_bridgeObjectRelease();
  uint64_t v173 = v21[16];
  uint64_t v174 = &v147[v173];
  uint64_t v175 = &v148[v173];
  uint64_t v177 = *(void *)v175;
  uint64_t v176 = *((void *)v175 + 1);
  *(void *)uint64_t v174 = v177;
  *((void *)v174 + 1) = v176;
  swift_bridgeObjectRelease();
  v147[v21[17]] = v148[v21[17]];
  v147[v21[18]] = v148[v21[18]];
  uint64_t v178 = v21[19];
  uint64_t v179 = (uint64_t)&v147[v178];
  uint64_t v180 = &v148[v178];
  unint64_t v181 = *(void *)&v147[v178 + 8];
  if (v181 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
    goto LABEL_76;
  }
  unint64_t v182 = *((void *)v180 + 1);
  if (v182 >> 60 == 15)
  {
    sub_255D81EF8(v179);
    goto LABEL_74;
  }
  uint64_t v183 = *(void *)v179;
  *(void *)uint64_t v179 = *(void *)v180;
  *(void *)(v179 + 8) = v182;
  sub_255D80D04(v183, v181);
LABEL_76:
  uint64_t v184 = v21[20];
  unint64_t v185 = &v147[v184];
  uint64_t v186 = &v148[v184];
  int v187 = v328(&v147[v184], 1, v333);
  int v188 = v328(v186, 1, v333);
  if (v187)
  {
    if (!v188)
    {
      (*(void (**)(char *, char *, uint64_t))(v326 + 32))(v185, v186, v333);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v326 + 56))(v185, 0, 1, v333);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v188)
  {
    (*(void (**)(char *, uint64_t))(v326 + 8))(v185, v333);
LABEL_81:
    sub_255D98658(0);
    memcpy(v185, v186, *(void *)(*(void *)(v189 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v326 + 40))(v185, v186, v333);
LABEL_82:
  uint64_t v190 = v21[21];
  uint64_t v191 = *(void **)&v147[v190];
  *(void *)&v147[v190] = *(void *)&v148[v190];

  uint64_t v192 = v21[22];
  id v193 = &v147[v192];
  uint64_t v194 = &v148[v192];
  int v195 = v335(&v147[v192], 1, v25);
  int v196 = v335(v194, 1, v25);
  if (v195)
  {
    if (!v196)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v193, v194, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v193, 0, 1, v25);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v193, v25);
LABEL_87:
    sub_255D80868(0);
    memcpy(v193, v194, *(void *)(*(void *)(v197 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v193, v194, v25);
LABEL_88:
  uint64_t v198 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v324)(&v147[v198[5]], &v148[v198[5]], v325);
  ((void (*)(char *, char *, uint64_t))v327)(&v147[v198[6]], &v148[v198[6]], v332);
  uint64_t v199 = v198[7];
  int v200 = *(void **)&v147[v199];
  *(void *)&v147[v199] = *(void *)&v148[v199];

  uint64_t v201 = v198[8];
  uint64_t v202 = *(void **)&v147[v201];
  *(void *)&v147[v201] = *(void *)&v148[v201];

  uint64_t v203 = v198[9];
  uint64_t v204 = &v147[v203];
  uint64_t v205 = &v148[v203];
  uint64_t v207 = *(void *)v205;
  uint64_t v206 = *((void *)v205 + 1);
  *(void *)uint64_t v204 = v207;
  *((void *)v204 + 1) = v206;
  swift_bridgeObjectRelease();
  uint64_t v208 = v329[11];
  uint64_t v209 = (char *)v331 + v208;
  id v210 = &v8[v208];
  uint64_t v211 = *(void **)((char *)v331 + v208);
  *(void **)((char *)v331 + v208) = *(void **)&v8[v208];

  uint64_t v212 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v324)(&v209[*(int *)(v212 + 20)], &v210[*(int *)(v212 + 20)], v325);
  ((void (*)(char *, char *, uint64_t))v327)(&v209[*(int *)(v212 + 24)], &v210[*(int *)(v212 + 24)], v332);
  uint64_t v213 = v329[12];
  uint64_t v214 = (char *)v331 + v213;
  uint64_t v215 = &v8[v213];
  uint64_t v216 = *(void *)&v330[v213 + 8];
  *(void *)uint64_t v214 = *(void *)&v330[v213];
  *((void *)v214 + 1) = v216;
  swift_bridgeObjectRelease();
  uint64_t v319 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v217 = v319[5];
  uint64_t v218 = &v214[v217];
  id v219 = &v215[v217];
  uint64_t v220 = *(void *)&v215[v217 + 8];
  *(void *)uint64_t v218 = *(void *)&v215[v217];
  *((void *)v218 + 1) = v220;
  swift_bridgeObjectRelease();
  *((void *)v218 + 2) = *((void *)v219 + 2);
  swift_bridgeObjectRelease();
  uint64_t v221 = *((void *)v219 + 4);
  *((void *)v218 + 3) = *((void *)v219 + 3);
  *((void *)v218 + 4) = v221;
  swift_bridgeObjectRelease();
  uint64_t v222 = *((void *)v219 + 6);
  *((void *)v218 + 5) = *((void *)v219 + 5);
  *((void *)v218 + 6) = v222;
  swift_bridgeObjectRelease();
  uint64_t v223 = *((void *)v219 + 8);
  *((void *)v218 + 7) = *((void *)v219 + 7);
  *((void *)v218 + 8) = v223;
  swift_bridgeObjectRelease();
  uint64_t v224 = *((void *)v219 + 10);
  *((void *)v218 + 9) = *((void *)v219 + 9);
  *((void *)v218 + 10) = v224;
  swift_bridgeObjectRelease();
  uint64_t v225 = (void *)*((void *)v218 + 12);
  uint64_t v226 = *((void *)v219 + 12);
  *((void *)v218 + 11) = *((void *)v219 + 11);
  *((void *)v218 + 12) = v226;

  uint64_t v227 = (void *)*((void *)v218 + 13);
  *((void *)v218 + 13) = *((void *)v219 + 13);

  uint64_t v228 = v21[13];
  id v229 = &v218[v228];
  uint64_t v230 = &v219[v228];
  LODWORD(v210) = v335(&v218[v228], 1, v25);
  int v231 = v335(v230, 1, v25);
  if (v210)
  {
    if (!v231)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v229, v230, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v229, 0, 1, v25);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v231)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v229, v25);
LABEL_93:
    sub_255D80868(0);
    memcpy(v229, v230, *(void *)(*(void *)(v232 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v229, v230, v25);
LABEL_94:
  uint64_t v233 = v21[14];
  uint64_t v234 = &v218[v233];
  uint64_t v235 = &v219[v233];
  int v236 = v335(&v218[v233], 1, v25);
  int v237 = v335(v235, 1, v25);
  if (v236)
  {
    if (!v237)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v234, v235, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v234, 0, 1, v25);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v237)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v234, v25);
LABEL_99:
    sub_255D80868(0);
    memcpy(v234, v235, *(void *)(*(void *)(v238 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v234, v235, v25);
LABEL_100:
  uint64_t v239 = v21[15];
  uint64_t v240 = &v218[v239];
  int v241 = (uint64_t *)&v219[v239];
  uint64_t v243 = *v241;
  uint64_t v242 = v241[1];
  *(void *)uint64_t v240 = v243;
  *((void *)v240 + 1) = v242;
  swift_bridgeObjectRelease();
  uint64_t v244 = v21[16];
  uint64_t v245 = &v218[v244];
  uint64_t v246 = (uint64_t *)&v219[v244];
  uint64_t v248 = *v246;
  uint64_t v247 = v246[1];
  *(void *)uint64_t v245 = v248;
  *((void *)v245 + 1) = v247;
  swift_bridgeObjectRelease();
  v218[v21[17]] = v219[v21[17]];
  v218[v21[18]] = v219[v21[18]];
  uint64_t v249 = v21[19];
  uint64_t v250 = (uint64_t)&v218[v249];
  uint64_t v251 = &v219[v249];
  unint64_t v252 = *(void *)&v218[v249 + 8];
  if (v252 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)uint64_t v250 = *(_OWORD *)v251;
    goto LABEL_105;
  }
  unint64_t v253 = *((void *)v251 + 1);
  if (v253 >> 60 == 15)
  {
    sub_255D81EF8(v250);
    goto LABEL_103;
  }
  uint64_t v254 = *(void *)v250;
  *(void *)uint64_t v250 = *(void *)v251;
  *(void *)(v250 + 8) = v253;
  sub_255D80D04(v254, v252);
LABEL_105:
  uint64_t v255 = v21[20];
  uint64_t v256 = &v218[v255];
  unint64_t v257 = &v219[v255];
  int v258 = v328(&v218[v255], 1, v333);
  int v259 = v328(v257, 1, v333);
  if (v258)
  {
    if (!v259)
    {
      (*(void (**)(char *, char *, uint64_t))(v326 + 32))(v256, v257, v333);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v326 + 56))(v256, 0, 1, v333);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v259)
  {
    (*(void (**)(char *, uint64_t))(v326 + 8))(v256, v333);
LABEL_110:
    sub_255D98658(0);
    memcpy(v256, v257, *(void *)(*(void *)(v260 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v326 + 40))(v256, v257, v333);
LABEL_111:
  uint64_t v261 = v21[21];
  int v262 = *(void **)&v218[v261];
  *(void *)&v218[v261] = *(void *)&v219[v261];

  uint64_t v263 = v21[22];
  uint64_t v264 = &v218[v263];
  uint64_t v265 = &v219[v263];
  int v266 = v335(&v218[v263], 1, v25);
  int v267 = v335(v265, 1, v25);
  if (v266)
  {
    uint64_t v268 = v331;
    if (!v267)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v264, v265, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v264, 0, 1, v25);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  uint64_t v268 = v331;
  if (v267)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v264, v25);
LABEL_116:
    sub_255D80868(0);
    memcpy(v264, v265, *(void *)(*(void *)(v269 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v264, v265, v25);
LABEL_117:
  ((void (*)(char *, char *, uint64_t))v324)(&v214[v319[6]], &v215[v319[6]], v325);
  ((void (*)(char *, char *, uint64_t))v327)(&v214[v319[7]], &v215[v319[7]], v332);
  *(void *)&v214[v319[8]] = *(void *)&v215[v319[8]];
  swift_release();
  uint64_t v270 = v319[9];
  int v271 = &v214[v270];
  int v272 = &v215[v270];
  int v273 = v335(&v214[v270], 1, v25);
  int v274 = v335(v272, 1, v25);
  if (v273)
  {
    uint64_t v275 = v322;
    if (!v274)
    {
      (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v271, v272, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v271, 0, 1, v25);
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  uint64_t v275 = v322;
  if (v274)
  {
    (*(void (**)(char *, uint64_t))(v334 + 8))(v271, v25);
LABEL_122:
    sub_255D80868(0);
    memcpy(v271, v272, *(void *)(*(void *)(v276 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v334 + 40))(v271, v272, v25);
LABEL_123:
  uint64_t v277 = v329[13];
  int v278 = *(void **)((char *)v268 + v277);
  *(void **)((char *)v268 + v277) = *(void **)&v330[v277];

  uint64_t v279 = v321[6];
  uint64_t v280 = (void *)((char *)v323 + v279);
  uint64_t v281 = (void *)((char *)v275 + v279);
  uint64_t v282 = *(void **)((char *)v323 + v279);
  void *v280 = *v281;

  v280[1] = v281[1];
  if (v323 != v275)
  {
    uint64_t v283 = v321[7];
    uint64_t v284 = (char *)v323 + v283;
    id v285 = (char *)v275 + v283;
    sub_255D9CB50((uint64_t)v323 + v283, (uint64_t (*)(void))sub_255D986E4);
    sub_255D986E4(0);
    uint64_t v287 = v286;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v315 + 32))(v284, v285, v325);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v284, v285, *(void *)(*(void *)(v287 - 8) + 64));
    }
    uint64_t v288 = v321[8];
    uint64_t v289 = (char *)v323 + v288;
    uint64_t v290 = (char *)v275 + v288;
    sub_255D9CB50((uint64_t)v323 + v288, (uint64_t (*)(void))sub_255D9870C);
    sub_255D9870C(0);
    uint64_t v292 = v291;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v316 + 32))(v289, v290, v332);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v289, v290, *(void *)(*(void *)(v292 - 8) + 64));
    }
    uint64_t v293 = v321[9];
    v294 = (char *)v323 + v293;
    uint64_t v295 = (char *)v275 + v293;
    sub_255D9CB50((uint64_t)v323 + v293, (uint64_t (*)(void))sub_255D98734);
    sub_255D98734(0);
    uint64_t v297 = v296;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v298 = sub_255EEE620();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v298 - 8) + 32))(v294, v295, v298);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v294, v295, *(void *)(*(void *)(v297 - 8) + 64));
    }
  }
  uint64_t v299 = v321[10];
  v300 = (char *)v323 + v299;
  uint64_t v301 = (uint64_t)v275 + v299;
  *(void *)((char *)v323 + v299) = *(void *)((char *)v275 + v299);
  swift_release();
  *((void *)v300 + 1) = *(void *)(v301 + 8);
  swift_release();
  v300[16] = *(unsigned char *)(v301 + 16);
  uint64_t v302 = v321[11];
  uint64_t v303 = (char *)v323 + v302;
  uint64_t v304 = (char *)v275 + v302;
  *uint64_t v303 = *v304;
  *((void *)v303 + 1) = *((void *)v304 + 1);
  swift_release();
  uint64_t v305 = v321[12];
  uint64_t v306 = (char *)v323 + v305;
  v307 = (char *)v275 + v305;
  *uint64_t v306 = *v307;
  *((void *)v306 + 1) = *((void *)v307 + 1);
  swift_release();
  uint64_t v308 = v321[13];
  v309 = (void *)((char *)v323 + v308);
  uint64_t v310 = (void *)((char *)v275 + v308);
  void *v309 = *v310;
  v309[1] = v310[1];
  swift_release();
  uint64_t v311 = v321[14];
  uint64_t v312 = (void *)((char *)v323 + v311);
  v313 = (void *)((char *)v275 + v311);
  *uint64_t v312 = *v313;
  v312[1] = v313[1];
  swift_release();
  return v323;
}

uint64_t sub_255D9FD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255D9FD5C);
}

uint64_t sub_255D9FD5C(uint64_t *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for MedicalIDDataViewModel();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v14((char *)a1 + v11, a2, v9);
  }
  sub_255D98680(0, &qword_269F35330, MEMORY[0x270FA9900], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  sub_255D9FF74(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  sub_255D98680(0, &qword_269F35340, MEMORY[0x263F18520], MEMORY[0x263F185D0]);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = (char *)a1 + a3[9];
  return v16(v18, a2, v17);
}

void sub_255D9FF74(uint64_t a1)
{
}

uint64_t sub_255D9FF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255D9FFB0);
}

char *sub_255D9FFB0(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for MedicalIDDataViewModel();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v14(&v5[v11], a2, a2, v9);
  }
  sub_255D98680(0, &qword_269F35330, MEMORY[0x270FA9900], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  sub_255D9FF74(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  sub_255D98680(0, &qword_269F35340, MEMORY[0x263F18520], MEMORY[0x263F185D0]);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = &v5[a4[9]];
  return (char *)v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for MedicalIDDataContentView()
{
  uint64_t result = qword_269F35348;
  if (!qword_269F35348) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255DA0214()
{
  type metadata accessor for MedicalIDDataViewModel();
  if (v0 <= 0x3F)
  {
    sub_255D986E4(319);
    if (v1 <= 0x3F)
    {
      sub_255D9870C(319);
      if (v2 <= 0x3F)
      {
        sub_255D98734(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_255DA037C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DA0398(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v6 = _s15SectionGridItemVMa();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    sub_255DFAAFC(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = (char *)(a3 + 32);
    while (1)
    {
      char v13 = *v12++;
      char v20 = v13;
      v18(&v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = *(void *)(v11 + 16);
      unint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_255DFAAFC(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      *(void *)(v11 + 16) = v15 + 1;
      sub_255DAD8E0((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, (uint64_t (*)(void))_s15SectionGridItemVMa);
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

void sub_255DA053C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_255DA05A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int v37 = a4;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v7 = type metadata accessor for MedicalIDDataViewModel();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v10 = (int *)type metadata accessor for MedicalIDDataContentView();
  uint64_t v11 = (void *)((char *)a5 + v10[6]);
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  *uint64_t v11 = sub_255EEE9F0();
  v11[1] = v12;
  char v13 = (void *)((char *)a5 + v10[7]);
  *char v13 = swift_getKeyPath();
  sub_255D986E4(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v14 = (void *)((char *)a5 + v10[8]);
  uint64_t *v14 = swift_getKeyPath();
  sub_255D9870C(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v15 = (void *)((char *)a5 + v10[9]);
  *unint64_t v15 = swift_getKeyPath();
  sub_255D98734(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = (char *)a5 + v10[11];
  LOBYTE(v38) = 0;
  sub_255EEF810();
  uint64_t v17 = v40;
  char *v16 = v39;
  *((void *)v16 + 1) = v17;
  uint64_t v18 = (char *)a5 + v10[12];
  LOBYTE(v38) = 8;
  sub_255DAD574(0, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
  sub_255EEF810();
  uint64_t v19 = v40;
  *uint64_t v18 = v39;
  *((void *)v18 + 1) = v19;
  char v20 = (void *)((char *)a5 + v10[13]);
  uint64_t v38 = 0;
  sub_255EEF810();
  uint64_t v21 = v40;
  *char v20 = v39;
  v20[1] = v21;
  uint64_t v22 = (void *)((char *)a5 + v10[14]);
  uint64_t v38 = 0;
  sub_255EEF810();
  uint64_t v23 = v40;
  void *v22 = v39;
  v22[1] = v23;
  *a5 = a1;
  uint64_t v24 = sub_255EEE280();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  int v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_255EEE250();
  uint64_t v28 = sub_255EEE200();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v35 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEE1D0();
  sub_255D88EF0((uint64_t)v27, (uint64_t)v31, v9);
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  uint64_t result = sub_255DAD8E0((uint64_t)v9, (uint64_t)a5 + v10[5], (uint64_t (*)(void))type metadata accessor for MedicalIDDataViewModel);
  int v33 = (char *)a5 + v10[10];
  uint64_t v34 = v36;
  *(void *)int v33 = v35;
  *((void *)v33 + 1) = v34;
  v33[16] = v37;
  return result;
}

uint64_t sub_255DA0990@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v2 = type metadata accessor for MedicalIDDataContentView();
  int v56 = *(uint64_t (**)())(v2 - 8);
  uint64_t v61 = *((void *)v56 + 8);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA65C0(0);
  uint64_t v6 = v5 - 8;
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v57 = *(void *)(v59 + 64);
  MEMORY[0x270FA5388](v5);
  unint64_t v58 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v51 = (char *)&v50 - v58;
  sub_255DA65F4(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA6628();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v1;
  sub_255EEF160();
  sub_255DA73D0(0, &qword_269F35370, (void (*)(uint64_t))sub_255DA66B0);
  sub_255DA79C0();
  sub_255EEE5F0();
  uint64_t v55 = type metadata accessor for MedicalIDDataContentView;
  uint64_t v17 = (uint64_t)v4;
  uint64_t v52 = v4;
  sub_255DADBF8(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  uint64_t v18 = *((unsigned __int8 *)v56 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v53 = v18 | 7;
  uint64_t v54 = v18;
  uint64_t v20 = swift_allocObject();
  int v56 = type metadata accessor for MedicalIDDataContentView;
  sub_255DAD8E0(v17, v20 + v19, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v50 = v11;
  v21(v11, v16, v13);
  uint64_t v22 = (double (**)@<D0>(double *@<X8>))&v11[*(int *)(v9 + 44)];
  void *v22 = sub_255DA1A80;
  v22[1] = 0;
  v22[2] = (double (*)@<D0>(double *@<X8>))sub_255DA7C1C;
  v22[3] = (double (*)@<D0>(double *@<X8>))v20;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v23 = *(void **)(*(void *)(*(void *)v1 + 32) + 16);
  sub_255D9FF74(0);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v26 = swift_getKeyPath();
  sub_255D9870C(0);
  swift_storeEnumTagMultiPayload();
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  id v27 = v23;
  uint64_t v28 = sub_255EEE9F0();
  uint64_t v30 = v29;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = (uint64_t)v51;
  int v33 = &v51[*(int *)(v6 + 44)];
  uint64_t v34 = (int *)type metadata accessor for MedicalIDNavigationBarViewModifier();
  *(void *)&v33[v34[8]] = KeyPath;
  sub_255D98680(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDDataManager();
  sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  uint64_t v35 = sub_255EEE650();
  LOBYTE(v17) = v36;
  *int v33 = 0;
  sub_255DAD8E0((uint64_t)v26, (uint64_t)&v33[v34[5]], (uint64_t (*)(void))sub_255D9FF74);
  int v37 = (uint64_t *)&v33[v34[6]];
  uint64_t *v37 = v28;
  v37[1] = v30;
  *(void *)&v33[v34[7]] = v27;
  uint64_t v38 = &v33[v34[9]];
  *(void *)uint64_t v38 = v35;
  v38[8] = v17 & 1;
  uint64_t v39 = (uint64_t)v50;
  sub_255DADBF8((uint64_t)v50, v32, (uint64_t (*)(void))sub_255DA65F4);

  uint64_t v40 = sub_255D9CB50(v39, (uint64_t (*)(void))sub_255DA65F4);
  uint64_t v41 = v57;
  MEMORY[0x270FA5388](v40);
  unint64_t v42 = (char *)&v50 - v58;
  uint64_t v43 = v32;
  sub_255DADBF8(v32, (uint64_t)&v50 - v58, (uint64_t (*)(void))sub_255DA65C0);
  uint64_t v44 = (uint64_t)v52;
  sub_255DADBF8(v1, (uint64_t)v52, (uint64_t (*)(void))v55);
  unint64_t v45 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  unint64_t v46 = (v41 + v54 + v45) & ~v54;
  uint64_t v47 = swift_allocObject();
  sub_255DAD8E0((uint64_t)v42, v47 + v45, (uint64_t (*)(void))sub_255DA65C0);
  sub_255DAD8E0(v44, v47 + v46, (uint64_t (*)(void))v56);
  uint64_t result = sub_255D9CB50(v43, (uint64_t (*)(void))sub_255DA65C0);
  unint64_t v49 = v60;
  *uint64_t v60 = sub_255DA8B54;
  v49[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v47;
  return result;
}

uint64_t sub_255DA1014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v61 = sub_255EEE390();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v57 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v5 = v4 - 8;
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v53 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = sub_255EEEEC0();
  MEMORY[0x270FA5388](v11);
  sub_255DA66B0();
  uint64_t v60 = v12;
  uint64_t v58 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v63 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA6864();
  uint64_t v55 = v14;
  uint64_t v56 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v54 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEED80();
  uint64_t v64 = a1;
  LODWORD(v65) = 0;
  sub_255DAD864(&qword_269F35618, MEMORY[0x263F19D28]);
  sub_255EF05D0();
  sub_255DA68F8(0);
  sub_255DAD864(&qword_269F354B0, sub_255DA68F8);
  sub_255EEE5B0();
  uint64_t v16 = a1 + *(int *)(v5 + 56);
  char v17 = *(unsigned char *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  LOBYTE(v65) = v17;
  uint64_t v66 = v18;
  sub_255DA8E18();
  sub_255EEF840();
  uint64_t v69 = v72;
  uint64_t v70 = v73;
  char v71 = v74;
  sub_255DADBF8(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  unint64_t v19 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v20 = swift_allocObject();
  sub_255DAD8E0((uint64_t)v10, v20 + v19, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  sub_255DADBF8(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  uint64_t v21 = swift_allocObject();
  sub_255DAD8E0((uint64_t)v8, v21 + v19, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  sub_255DA7434();
  sub_255DAD864(&qword_269F35558, (void (*)(uint64_t))sub_255DA6864);
  sub_255DA796C();
  sub_255DA754C();
  uint64_t v23 = v22;
  uint64_t v24 = type metadata accessor for MedicalIDDataManager();
  uint64_t v25 = sub_255DA9D04(&qword_269F35520, (void (*)(uint64_t))sub_255DA754C, (void (*)(void))sub_255DA7740, (void (*)(void))sub_255DA78F4);
  uint64_t v26 = sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  uint64_t v65 = v23;
  uint64_t v66 = v24;
  uint64_t v67 = v25;
  uint64_t v68 = v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = v55;
  uint64_t v28 = v54;
  sub_255EEF600();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v27);
  uint64_t v29 = (uint64_t *)(a1 + *(int *)(v5 + 64));
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  uint64_t v72 = v30;
  uint64_t v73 = v31;
  sub_255DAC5DC();
  sub_255EEF840();
  uint64_t v32 = v65;
  uint64_t v33 = v66;
  uint64_t v34 = v67;
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  uint64_t v35 = sub_255EEE9F0();
  uint64_t v37 = v36;
  if (qword_269F34C90 != -1) {
    swift_once();
  }
  uint64_t v38 = v61;
  uint64_t v39 = __swift_project_value_buffer(v61, (uint64_t)qword_269F3FEB0);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
  uint64_t v41 = v57;
  v40(v57, v39, v38);
  uint64_t v42 = sub_255EEF750();
  if (qword_269F34C88 != -1) {
    swift_once();
  }
  uint64_t v43 = __swift_project_value_buffer(v38, (uint64_t)qword_269F3FE98);
  v40(v41, v43, v38);
  uint64_t v44 = sub_255EEF750();
  uint64_t v45 = v58;
  uint64_t v46 = v62;
  uint64_t v47 = v63;
  uint64_t v48 = v60;
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v62, v63, v60);
  sub_255DA73D0(0, &qword_269F35370, (void (*)(uint64_t))sub_255DA66B0);
  uint64_t v50 = (uint64_t *)(v46 + *(int *)(v49 + 36));
  uint64_t *v50 = v35;
  v50[1] = v37;
  v50[2] = v32;
  v50[3] = v33;
  v50[4] = v34;
  v50[5] = v42;
  _OWORD v50[6] = v44;
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v48);
}

uint64_t sub_255DA1814()
{
  return sub_255EEF830();
}

uint64_t sub_255DA187C@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = _s12SheetContentVMa();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA7434();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *a1;
  uint64_t v16 = type metadata accessor for MedicalIDDataContentView();
  sub_255DADBF8((uint64_t)a2 + *(int *)(v16 + 20), (uint64_t)&v9[*(int *)(v7 + 28)], (uint64_t (*)(void))type metadata accessor for MedicalIDDataViewModel);
  uint64_t v17 = *a2;
  *uint64_t v9 = v15;
  *(void *)&v9[*(int *)(v7 + 32)] = v17;
  uint64_t v18 = *(void **)((char *)a2 + *(int *)(v16 + 24));
  if (v18)
  {
    swift_retain();
    id v19 = v18;
    sub_255DD39F8(v19, v17, (uint64_t)v14);

    sub_255D9CB50((uint64_t)v9, (uint64_t (*)(void))_s12SheetContentVMa);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v14, v11);
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DA7C7C();
    swift_retain();
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

double sub_255DA1A80@<D0>(double *a1@<X8>)
{
  sub_255EEE750();
  double v3 = v2;
  sub_255EEE740();
  double v5 = v3 + v4;
  sub_255EEE740();
  double result = v5 + v6;
  *a1 = v5 + v6;
  return result;
}

uint64_t sub_255DA1AC8()
{
  return sub_255EEF830();
}

uint64_t sub_255DA1B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v56 = a2;
  uint64_t v57 = a4;
  uint64_t v59 = a1;
  uint64_t v55 = sub_255EEFFA0();
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v52 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_255EEE8D0();
  uint64_t v6 = *(void *)(v58 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v58);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v10 = v9 - 8;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA8C38(0);
  uint64_t v15 = v14;
  uint64_t v54 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v41 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for MedicalIDDataContentView;
  sub_255DADBF8(a3, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v42 = v8;
  uint64_t v17 = v58;
  v50(v8, v59, v58);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = v12 + v19 + ((v18 + 16) & ~v18);
  uint64_t v21 = (v18 + 16) & ~v18;
  uint64_t v22 = v20 & ~v19;
  uint64_t v48 = v22 + v7;
  uint64_t v49 = v21;
  uint64_t v23 = v22;
  uint64_t v46 = v22;
  uint64_t v47 = v18 | v19 | 7;
  uint64_t v24 = swift_allocObject();
  uint64_t v45 = type metadata accessor for MedicalIDDataContentView;
  sub_255DAD8E0((uint64_t)v13, v24 + v21, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  uint64_t v44 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v44(v24 + v23, v8, v17);
  uint64_t v25 = v52;
  sub_255EEFF80();
  uint64_t v26 = *(int *)(v15 + 36);
  uint64_t v27 = (uint64_t)v41;
  uint64_t v28 = &v41[v26];
  uint64_t v29 = sub_255EEE7A0();
  uint64_t v30 = v53;
  uint64_t v31 = v55;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v28[*(int *)(v29 + 20)], v25, v55);
  *(void *)uint64_t v28 = &unk_269F35598;
  *((void *)v28 + 1) = v24;
  sub_255DADBF8(v56, v27, (uint64_t (*)(void))sub_255DA65C0);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v31);
  uint64_t v32 = v43;
  uint64_t v33 = v43 + *(int *)(v10 + 56);
  char v34 = *(unsigned char *)v33;
  uint64_t v35 = *(void *)(v33 + 8);
  char v60 = v34;
  uint64_t v61 = v35;
  sub_255DA8E18();
  sub_255EEF820();
  char v60 = v62;
  sub_255DADBF8(v32, (uint64_t)v13, (uint64_t (*)(void))v51);
  uint64_t v36 = v42;
  uint64_t v37 = v58;
  v50(v42, v59, v58);
  uint64_t v38 = swift_allocObject();
  sub_255DAD8E0((uint64_t)v13, v38 + v49, (uint64_t (*)(void))v45);
  v44(v38 + v46, v36, v37);
  sub_255DAD574(0, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
  sub_255DA9D04(&qword_269F355B0, sub_255DA8C38, (void (*)(void))sub_255DA9C74, (void (*)(void))sub_255DA9E2C);
  sub_255DA9E60();
  sub_255EEF680();
  swift_release();
  return sub_255D9CB50(v27, (uint64_t (*)(void))sub_255DA8C38);
}

uint64_t sub_255DA204C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  sub_255EEFF70();
  v2[4] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255DA20E4, v4, v3);
}

uint64_t sub_255DA20E4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  sub_255DA2150(v1);
  double v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_255DA2150(uint64_t a1)
{
  uint64_t v35 = a1;
  uint64_t v2 = sub_255EEE8D0();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  uint64_t v3 = *(void *)(v36 + 64);
  MEMORY[0x270FA5388](v2);
  char v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v33 + 64);
  MEMORY[0x270FA5388](v4);
  sub_255D98680(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = v1 + *(int *)(v4 + 40);
  uint64_t v11 = *(void *)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  uint64_t v38 = v1;
  uint64_t aBlock = v11;
  uint64_t v40 = v10;
  LOBYTE(v41) = v12;
  sub_255DAD574(0, &qword_269F355F8, MEMORY[0x263F8D4F8], MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390](&v45);
  if (v45 == 1)
  {
    uint64_t aBlock = v11;
    uint64_t v40 = v10;
    LOBYTE(v41) = v12;
    LOBYTE(v45) = 0;
    sub_255EEF980();
    uint64_t v13 = sub_255EEFFA0();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v32 = v8;
    v14(v8, 1, 1, v13);
    sub_255DADBF8(v38, (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
    uint64_t v15 = v36;
    uint64_t v16 = v34;
    uint64_t v17 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v35, v37);
    sub_255EEFF70();
    uint64_t v18 = sub_255EEFF60();
    unint64_t v19 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    unint64_t v20 = (v5 + *(unsigned __int8 *)(v15 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = MEMORY[0x263F8F500];
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v22;
    sub_255DAD8E0((uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v19, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v21 + v20, v16, v17);
    sub_255E09D10((uint64_t)v32, (uint64_t)&unk_269F35608, v21);
    swift_release();
  }
  uint64_t v23 = v38;
  uint64_t v24 = *(void **)(v38 + *(int *)(v4 + 24));
  if (v24)
  {
    uint64_t result = (uint64_t)objc_msgSend(v24, sel_suggestHealthData);
    if (result)
    {
      uint64_t v26 = *(void **)(*(void *)(*(void *)v23 + 24) + 16);
      swift_retain();
      id v27 = objc_msgSend(v26, sel_profileIdentifier);
      id v28 = objc_msgSend(v27, sel_type);

      BOOL v29 = v28 == (id)3;
      uint64_t v30 = swift_allocObject();
      swift_weakInit();
      uint64_t v43 = sub_255DAB768;
      uint64_t v44 = v30;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v40 = 1107296256;
      uint64_t v41 = sub_255DA053C;
      uint64_t v42 = &block_descriptor_0;
      uint64_t v31 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v26, sel_hk_fetchExistingDemographicInformationWithOptions_completion_, v29, v31);
      _Block_release(v31);
      return swift_release();
    }
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DA7C7C();
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

unsigned char *sub_255DA2624(unsigned char *result, unsigned char *a2)
{
  if (*result != 8 && *a2 == 8)
  {
    type metadata accessor for MedicalIDDataContentView();
    sub_255DAD574(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
    uint64_t result = (unsigned char *)sub_255EEF820();
    if (v4)
    {
      uint64_t v3 = sub_255EEF830();
      MEMORY[0x270FA5388](v3);
      sub_255EEFB30();
      sub_255EEE7D0();
      return (unsigned char *)swift_release();
    }
  }
  return result;
}

uint64_t sub_255DA275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  sub_255EEFF70();
  v5[6] = sub_255EEFF60();
  uint64_t v7 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255DA27F4, v7, v6);
}

uint64_t sub_255DA27F4()
{
  uint64_t v15 = v0;
  swift_release();
  uint64_t v1 = type metadata accessor for MedicalIDDataContentView();
  MedicalIDDataViewModel.displayActionForFirstLaunch.getter(v14);
  if ((v14[0] & 0xFF00) != 0x200)
  {
    char v2 = v14[0];
    if ((v14[0] & 0x100) != 0)
    {
      uint64_t v5 = *(void *)(v0 + 32);
      uint64_t v6 = (char *)(v5 + *(int *)(v1 + 48));
      char v7 = *v6;
      uint64_t v8 = *((void *)v6 + 1);
      *(unsigned char *)(v0 + 16) = v7;
      *(void *)(v0 + 24) = v8;
      *(unsigned char *)(v0 + 56) = v2;
      sub_255DA8E18();
      sub_255EEF830();
      uint64_t v9 = (char *)(v5 + *(int *)(v1 + 44));
      char v10 = *v9;
      uint64_t v11 = *((void *)v9 + 1);
      *(unsigned char *)(v0 + 16) = v10;
      *(void *)(v0 + 24) = v11;
      *(unsigned char *)(v0 + 56) = 1;
      sub_255DAD574(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
      sub_255EEF830();
    }
    else
    {
      uint64_t v3 = *(void *)(v0 + 40);
      uint64_t v4 = swift_task_alloc();
      *(void *)(v4 + 16) = v3;
      *(unsigned char *)(v4 + 24) = v2;
      sub_255EEFB30();
      sub_255EEE7D0();
      swift_release();
      swift_task_dealloc();
    }
  }
  char v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_255DA2990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255DA6F2C();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA6F04(0);
  uint64_t v44 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v44 - v11;
  sub_255DA6E40(0, &qword_269F35418, MEMORY[0x263F19B28]);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v44 - v17;
  sub_255DA69D0();
  uint64_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDDataContentView() + 24));
  if (!v22)
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DA7C7C();
    uint64_t result = sub_255EEE9E0();
    __break(1u);
    return result;
  }
  id v23 = v22;
  unsigned __int8 v24 = objc_msgSend(v23, sel_isLockScreen);
  uint64_t v45 = a2;
  if ((v24 & 1) == 0)
  {
    if (objc_msgSend(v23, sel_isShowWhenLockedVisible))
    {
    }
    else
    {
      unsigned int v26 = objc_msgSend(v23, sel_isShareDuringEmergencyCallVisible);

      if (!v26) {
        goto LABEL_4;
      }
    }
    sub_255DA2EF8((uint64_t)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    sub_255DA8C6C(0, &qword_269F353A0, sub_255DA6A58, (void (*)(uint64_t))sub_255DA6B58);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v27);
    goto LABEL_9;
  }

LABEL_4:
  sub_255DA8C6C(0, &qword_269F353A0, sub_255DA6A58, (void (*)(uint64_t))sub_255DA6B58);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v25);
LABEL_9:
  sub_255DA34C4((uint64_t)v18);
  sub_255DA3A6C(a1, v6);
  char v28 = sub_255EEF170();
  if (qword_269F34A48 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_255DADBF8((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))sub_255DA6F2C);
  uint64_t v37 = &v10[*(int *)(v44 + 36)];
  char *v37 = v28;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_255D9CB50((uint64_t)v6, (uint64_t (*)(void))sub_255DA6F2C);
  uint64_t v38 = sub_255DAD8E0((uint64_t)v10, (uint64_t)v12, (uint64_t (*)(void))sub_255DA6F04);
  MEMORY[0x270FA5388](v38);
  uint64_t v39 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DADBF8((uint64_t)v39, (uint64_t)v39, (uint64_t (*)(void))sub_255DA69D0);
  sub_255DAC724((uint64_t)v18, (uint64_t)v16);
  sub_255DADBF8((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))sub_255DA6F04);
  uint64_t v40 = v45;
  sub_255DADBF8((uint64_t)v39, v45, (uint64_t (*)(void))sub_255DA69D0);
  sub_255DA692C();
  uint64_t v42 = v41;
  sub_255DAC724((uint64_t)v16, v40 + *(int *)(v41 + 48));
  sub_255DADBF8((uint64_t)v10, v40 + *(int *)(v42 + 64), (uint64_t (*)(void))sub_255DA6F04);
  sub_255D9CB50((uint64_t)v12, (uint64_t (*)(void))sub_255DA6F04);
  sub_255DAC7A4((uint64_t)v18);
  sub_255D9CB50((uint64_t)v21, (uint64_t (*)(void))sub_255DA69D0);
  sub_255D9CB50((uint64_t)v10, (uint64_t (*)(void))sub_255DA6F04);
  sub_255DAC7A4((uint64_t)v16);
  return sub_255D9CB50((uint64_t)v39, (uint64_t (*)(void))sub_255DA69D0);
}

uint64_t sub_255DA2EF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v65 = a1;
  uint64_t v3 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v63 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  uint64_t v4 = *(void *)(v63 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = type metadata accessor for MedicalIDSettingsViewModel(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MedicalIDEditSettingsView();
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA6A8C(0);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA6A58(0);
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D8920C((uint64_t)v7);
  sub_255E5E994((uint64_t)v7, (uint64_t)v10);
  char v19 = sub_255EEF1A0();
  if (qword_269F34A18 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_255DADBF8((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  char v28 = &v14[*(int *)(v12 + 36)];
  *char v28 = v19;
  *((void *)v28 + 1) = v21;
  *((void *)v28 + 2) = v23;
  *((void *)v28 + 3) = v25;
  *((void *)v28 + 4) = v27;
  v28[40] = 0;
  sub_255D9CB50((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  sub_255DADBF8(v2, (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  unint64_t v29 = (*(unsigned __int8 *)(v63 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  uint64_t v30 = swift_allocObject();
  sub_255DAD8E0((uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
  sub_255DADBF8((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))sub_255DA6A8C);
  uint64_t v31 = &v18[*(int *)(v16 + 36)];
  *(void *)uint64_t v31 = sub_255DA607C;
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = sub_255DAD484;
  *((void *)v31 + 3) = v30;
  sub_255D9CB50((uint64_t)v14, (uint64_t (*)(void))sub_255DA6A8C);
  uint64_t v32 = sub_255EEFB10();
  uint64_t v34 = v33;
  id v35 = objc_msgSend(self, sel_systemGroupedBackgroundColor);
  uint64_t v36 = MEMORY[0x25A29B0E0](v35);
  if (qword_269F34A60 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_269F3FD60;
  uint64_t v38 = (uint64_t *)(v2 + *(int *)(v64 + 52));
  uint64_t v39 = *v38;
  uint64_t v40 = v38[1];
  uint64_t v66 = v39;
  uint64_t v67 = v40;
  sub_255DAC5DC();
  sub_255EEF820();
  uint64_t v63 = v68;
  char v41 = sub_255EEF190();
  sub_255EEE540();
  uint64_t v64 = v42;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  char v49 = sub_255EEF170();
  if (qword_269F34A68 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  char v72 = 0;
  char v69 = 0;
  uint64_t v58 = v65;
  sub_255DADBF8((uint64_t)v18, v65, (uint64_t (*)(void))sub_255DA6A58);
  sub_255DA8C6C(0, &qword_269F353A0, sub_255DA6A58, (void (*)(uint64_t))sub_255DA6B58);
  uint64_t v60 = v58 + *(int *)(v59 + 36);
  *(void *)uint64_t v60 = v36;
  *(void *)(v60 + 8) = 0;
  *(void *)(v60 + 16) = v37;
  *(void *)(v60 + 24) = 0;
  *(void *)(v60 + 32) = v63;
  *(_WORD *)(v60 + 40) = 256;
  *(_DWORD *)(v60 + 42) = v73;
  *(_WORD *)(v60 + 46) = v74;
  *(unsigned char *)(v60 + 48) = v41;
  *(_DWORD *)(v60 + 49) = v68;
  *(_DWORD *)(v60 + 52) = *(_DWORD *)((char *)&v68 + 3);
  *(void *)(v60 + 56) = v64;
  *(void *)(v60 + 64) = v44;
  *(void *)(v60 + 72) = v46;
  *(void *)(v60 + 80) = v48;
  *(unsigned char *)(v60 + 88) = 0;
  *(_DWORD *)(v60 + 92) = *(_DWORD *)&v71[3];
  *(_DWORD *)(v60 + 89) = *(_DWORD *)v71;
  *(unsigned char *)(v60 + 96) = v49;
  *(_DWORD *)(v60 + 100) = *(_DWORD *)&v70[3];
  *(_DWORD *)(v60 + 97) = *(_DWORD *)v70;
  *(void *)(v60 + 104) = v51;
  *(void *)(v60 + 112) = v53;
  *(void *)(v60 + 120) = v55;
  *(void *)(v60 + 128) = v57;
  *(unsigned char *)(v60 + 136) = 0;
  *(_DWORD *)(v60 + 137) = v66;
  *(_DWORD *)(v60 + 140) = *(_DWORD *)((char *)&v66 + 3);
  *(void *)(v60 + 144) = v32;
  *(void *)(v60 + 152) = v34;
  return sub_255D9CB50((uint64_t)v18, (uint64_t (*)(void))sub_255DA6A58);
}

uint64_t sub_255DA34C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = sub_255EEE620();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v34 = sub_255EEF9F0();
  uint64_t v9 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA6EDC(0);
  uint64_t v37 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v35 = (uint64_t)&v33 - v16;
  sub_255DA6E40(0, &qword_269F35638, MEMORY[0x263F19B20]);
  uint64_t v36 = v17;
  MEMORY[0x270FA5388](v17);
  char v19 = (char *)&v33 - v18;
  uint64_t v20 = *(void **)(v1 + *(int *)(type metadata accessor for MedicalIDDataContentView() + 24));
  if (v20)
  {
    if (objc_msgSend(v20, sel_isLockScreen))
    {
      uint64_t v21 = sub_255EEF700();
      if (qword_269F34A10 != -1) {
        swift_once();
      }
      sub_255EEFB10();
      sub_255EEE710();
      uint64_t v22 = v39;
      char v23 = v40;
      uint64_t v24 = v41;
      char v25 = v42;
      *(void *)char v19 = v21;
      *((void *)v19 + 1) = v22;
      v19[16] = v23;
      *((void *)v19 + 3) = v24;
      v19[32] = v25;
      *(_OWORD *)(v19 + 40) = v43;
      swift_storeEnumTagMultiPayload();
      sub_255DA7324(0, &qword_269F35420, MEMORY[0x263F1B440], MEMORY[0x263F18868], MEMORY[0x263F18E28]);
      sub_255DAD714();
      sub_255DAD7B0(&qword_269F35648, sub_255DA6EDC, (void (*)(void))sub_255DAD830);
      return sub_255EEEE00();
    }
    else
    {
      sub_255EEF9E0();
      sub_255DA9FDC((uint64_t)v8);
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F184F8], v2);
      char v27 = sub_255EEE610();
      char v28 = *(void (**)(char *, uint64_t))(v3 + 8);
      v28(v6, v2);
      v28(v8, v2);
      if (v27) {
        double v29 = 1.0;
      }
      else {
        double v29 = 0.0;
      }
      uint64_t v30 = v34;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v11, v34);
      *(double *)&v15[*(int *)(v37 + 36)] = v29;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);
      uint64_t v31 = (uint64_t)v15;
      uint64_t v32 = v35;
      sub_255DAD8E0(v31, v35, (uint64_t (*)(void))sub_255DA6EDC);
      sub_255DADBF8(v32, (uint64_t)v19, (uint64_t (*)(void))sub_255DA6EDC);
      swift_storeEnumTagMultiPayload();
      sub_255DA7324(0, &qword_269F35420, MEMORY[0x263F1B440], MEMORY[0x263F18868], MEMORY[0x263F18E28]);
      sub_255DAD714();
      sub_255DAD7B0(&qword_269F35648, sub_255DA6EDC, (void (*)(void))sub_255DAD830);
      sub_255EEEE00();
      return sub_255D9CB50(v32, (uint64_t (*)(void))sub_255DA6EDC);
    }
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DA7C7C();
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255DA3A6C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v150 = a2;
  uint64_t v3 = type metadata accessor for MedicalIDDeleteView();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v4);
  uint64_t v139 = (uint64_t)&v127 - v7;
  sub_255DA73A8(0);
  uint64_t v147 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v138 = (uint64_t)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MedicalIDDataViewModel();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA7374(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v145 = (char *)&v127 - v18;
  sub_255DA7290();
  uint64_t v143 = v19;
  uint64_t v142 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v141 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v140 = (uint64_t)&v127 - v22;
  sub_255DA725C(0);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v144 = (uint64_t)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v146 = (uint64_t)&v127 - v26;
  sub_255DA7150();
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v152 = (uint64_t)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v153 = (uint64_t)&v127 - v30;
  sub_255DA7018();
  uint64_t v149 = v31;
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v127 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)&v127 - v36;
  sub_255DA4B5C((uint64_t)&v127 - v36);
  uint64_t v38 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v39 = *(int *)(v38 + 24);
  uint64_t v151 = a1;
  char v40 = (void **)(a1 + v39);
  uint64_t v41 = *v40;
  if (!*v40) {
    goto LABEL_32;
  }
  if (objc_msgSend(v41, sel_isLockScreen))
  {
    sub_255DA6FBC(0, &qword_269F35480, &qword_269F35488, sub_255DA725C, sub_255DA7374);
    uint64_t v43 = v153;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v153, 1, 1, v42);
    uint64_t v44 = v152;
LABEL_27:
    uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    uint64_t v122 = v149;
    v121(v35, v37, v149);
    sub_255DADBF8(v43, v44, (uint64_t (*)(void))sub_255DA7150);
    int v123 = v150;
    v121(v150, v35, v122);
    sub_255DA71E0(0, &qword_269F35448, (void (*)(uint64_t))sub_255DA7018, (void (*)(uint64_t))sub_255DA7150);
    sub_255DADBF8(v44, (uint64_t)&v123[*(int *)(v124 + 48)], (uint64_t (*)(void))sub_255DA7150);
    sub_255D9CB50(v43, (uint64_t (*)(void))sub_255DA7150);
    uint64_t v125 = *(void (**)(char *, uint64_t))(v32 + 8);
    v125(v37, v122);
    sub_255D9CB50(v44, (uint64_t (*)(void))sub_255DA7150);
    return ((uint64_t (*)(char *, uint64_t))v125)(v35, v122);
  }
  uint64_t v133 = v40;
  uint64_t v134 = v17;
  uint64_t v136 = v35;
  uint64_t v148 = (id *)(v151 + *(int *)(v38 + 20));
  id v45 = objc_msgSend(*v148, sel_dateSaved);
  sub_255D80868(0);
  MEMORY[0x270FA5388](v46 - 8);
  uint64_t v132 = v47;
  uint64_t v48 = (char *)&v127 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = v37;
  if (v45)
  {
    sub_255EEE0D0();

    uint64_t v49 = sub_255EEE100();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
  }
  else
  {
    uint64_t v50 = sub_255EEE100();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v48, 1, 1, v50);
  }
  uint64_t v51 = (uint64_t)v13;
  uint64_t v137 = v9;
  uint64_t v52 = sub_255E883B4((uint64_t)v48);
  uint64_t v54 = v53;
  sub_255D9CB50((uint64_t)v48, (uint64_t (*)(void))sub_255D80868);
  uint64_t v55 = v147;
  if (v54)
  {
    uint64_t v128 = v51;
    uint64_t v129 = v3;
    int v130 = v6;
    uint64_t v131 = v32;
    uint64_t v154 = v52;
    uint64_t v155 = v54;
    sub_255DAD520();
    uint64_t v56 = sub_255EEF3D0();
    uint64_t v58 = v57;
    char v60 = v59 & 1;
    sub_255EEF1F0();
    uint64_t v61 = sub_255EEF3B0();
    uint64_t v63 = v62;
    char v65 = v64;
    swift_release();
    sub_255D85120(v56, v58, v60);
    swift_bridgeObjectRelease();
    LODWORD(v154) = sub_255EEEF30();
    uint64_t v66 = sub_255EEF370();
    uint64_t v68 = v67;
    char v70 = v69;
    uint64_t v72 = v71;
    sub_255D85120(v61, v63, v65 & 1);
    swift_bridgeObjectRelease();
    char v73 = sub_255EEF1E0();
    if (qword_269F34A20 != -1) {
      swift_once();
    }
    sub_255EEE540();
    uint64_t v154 = v66;
    uint64_t v155 = v68;
    uint64_t v74 = v66;
    char v75 = v70 & 1;
    char v156 = v70 & 1;
    uint64_t v157 = v72;
    char v158 = v73;
    uint64_t v159 = v76;
    uint64_t v160 = v77;
    uint64_t v161 = v78;
    uint64_t v162 = v79;
    char v163 = 0;
    sub_255DAD574(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_255EF1E20;
    *(void *)(v80 + 32) = 0x496C61636964654DLL;
    *(void *)(v80 + 40) = 0xE900000000000044;
    *(void *)(v80 + 48) = 0x616470557473614CLL;
    *(void *)(v80 + 56) = 0xEF65746144646574;
    uint64_t v81 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v82 = (id)HKUIJoinStringsForAutomationIdentifier();

    uint64_t v83 = v147;
    if (!v82)
    {
      __break(1u);
      goto LABEL_32;
    }
    sub_255EEFD90();

    sub_255DA7324(0, &qword_269F35138, MEMORY[0x263F1A830], MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    sub_255DAD5C0();
    uint64_t v84 = (uint64_t)v141;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v74, v68, v75);
    swift_bridgeObjectRelease();
    uint64_t v85 = v140;
    sub_255DAD8E0(v84, v140, (uint64_t (*)(void))sub_255DA7290);
    uint64_t v86 = v146;
    sub_255DAD8E0(v85, v146, (uint64_t (*)(void))sub_255DA7290);
    uint64_t v87 = 0;
    uint64_t v32 = v131;
    uint64_t v6 = v130;
    uint64_t v3 = v129;
    uint64_t v55 = v83;
    uint64_t v51 = v128;
  }
  else
  {
    uint64_t v87 = 1;
    uint64_t v86 = v146;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v86, v87, 1, v143);
  sub_255DADBF8((uint64_t)v148, v51, (uint64_t (*)(void))type metadata accessor for MedicalIDDataViewModel);
  uint64_t v88 = (uint64_t)v145;
  if (*v133)
  {
    uint64_t v89 = *(void **)(*(void *)(*(void *)v151 + 32) + 16);
    uint64_t v90 = (MIUIDisplayConfiguration *)*v133;
    id v91 = v89;
    LOBYTE(v89) = MedicalIDDataViewModel.isDeletionVisible(with:healthStore:)(v90, (HKHealthStore)v91);

    sub_255D9CB50(v51, (uint64_t (*)(void))type metadata accessor for MedicalIDDataViewModel);
    if (v89)
    {
      if (qword_269F34A28 != -1) {
        swift_once();
      }
      id v92 = objc_msgSend(*v148, sel_dateSaved);
      uint64_t v93 = MEMORY[0x270FA5388](v92);
      int v95 = (char *)&v127 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v93)
      {
        sub_255EEE0D0();

        uint64_t v96 = sub_255EEE100();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 0, 1, v96);
      }
      else
      {
        uint64_t v99 = sub_255EEE100();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v95, 1, 1, v99);
      }
      sub_255E883B4((uint64_t)v95);
      uint64_t v101 = v100;
      sub_255D9CB50((uint64_t)v95, (uint64_t (*)(void))sub_255D80868);
      swift_bridgeObjectRelease();
      if (v101)
      {
        uint64_t v98 = v137;
        if (qword_269F34A20 != -1) {
          swift_once();
        }
      }
      else
      {
        uint64_t v98 = v137;
      }
      *uint64_t v6 = swift_getKeyPath();
      sub_255D98680(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      uint64_t v102 = (char *)v6 + *(int *)(v3 + 20);
      type metadata accessor for MedicalIDDataManager();
      sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
      *(void *)uint64_t v102 = sub_255EEE650();
      v102[8] = v103 & 1;
      uint64_t v104 = (char *)v6 + *(int *)(v3 + 24);
      char v164 = 0;
      sub_255EEF810();
      uint64_t v105 = v155;
      *uint64_t v104 = v154;
      *((void *)v104 + 1) = v105;
      uint64_t v106 = v139;
      sub_255DAD8E0((uint64_t)v6, v139, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
      LOBYTE(v104) = sub_255EEF190();
      sub_255EEE540();
      uint64_t v108 = v107;
      uint64_t v110 = v109;
      uint64_t v112 = v111;
      uint64_t v114 = v113;
      uint64_t v115 = v138;
      sub_255DADBF8(v106, v138, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
      uint64_t v116 = v115 + *(int *)(v55 + 36);
      *(unsigned char *)uint64_t v116 = (_BYTE)v104;
      *(void *)(v116 + 8) = v108;
      *(void *)(v116 + 16) = v110;
      *(void *)(v116 + 24) = v112;
      *(void *)(v116 + 32) = v114;
      *(unsigned char *)(v116 + 40) = 0;
      sub_255D9CB50(v106, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
      sub_255DAD8E0(v115, v88, (uint64_t (*)(void))sub_255DA73A8);
      uint64_t v97 = 0;
      uint64_t v86 = v146;
    }
    else
    {
      uint64_t v97 = 1;
      uint64_t v98 = v137;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v88, v97, 1, v55);
    uint64_t v117 = v144;
    sub_255DADBF8(v86, v144, (uint64_t (*)(void))sub_255DA725C);
    uint64_t v118 = (uint64_t)v134;
    sub_255DADBF8(v88, (uint64_t)v134, (uint64_t (*)(void))sub_255DA7374);
    uint64_t v44 = v152;
    sub_255DADBF8(v117, v152, (uint64_t (*)(void))sub_255DA725C);
    sub_255DA71E0(0, &qword_269F35488, sub_255DA725C, sub_255DA7374);
    sub_255DADBF8(v118, v44 + *(int *)(v119 + 48), (uint64_t (*)(void))sub_255DA7374);
    sub_255D9CB50(v88, (uint64_t (*)(void))sub_255DA7374);
    sub_255D9CB50(v86, (uint64_t (*)(void))sub_255DA725C);
    sub_255D9CB50(v118, (uint64_t (*)(void))sub_255DA7374);
    sub_255D9CB50(v117, (uint64_t (*)(void))sub_255DA725C);
    sub_255DA6FBC(0, &qword_269F35480, &qword_269F35488, sub_255DA725C, sub_255DA7374);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56))(v44, 0, 1, v120);
    uint64_t v43 = v153;
    sub_255DAD8E0(v44, v153, (uint64_t (*)(void))sub_255DA7150);
    uint64_t v35 = v136;
    uint64_t v37 = v135;
    goto LABEL_27;
  }
  uint64_t v41 = 0;
LABEL_32:
  sub_255D7ED10((uint64_t)v41, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

uint64_t sub_255DA4B5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v132 = a1;
  uint64_t v2 = type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v148 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v114 - v5;
  uint64_t v146 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = *((void *)v146 - 1);
  uint64_t v8 = MEMORY[0x270FA5388](v146);
  uint64_t v139 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v138 = (uint64_t)&v114 - v10;
  sub_255D894E4(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v137 = (uint64_t)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v145 = (uint64_t)&v114 - v14;
  uint64_t v15 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v15);
  uint64_t v136 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v135 = (uint64_t)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v142 = (uint64_t)&v114 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v134 = (uint64_t)&v114 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v133 = (uint64_t)&v114 - v24;
  uint64_t v25 = (int *)_s15SectionGridItemVMa();
  uint64_t v150 = *((void *)v25 - 1);
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v152 = (uint64_t)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v114 - v29;
  if (qword_269F34A08 != -1) {
    goto LABEL_59;
  }
  while (1)
  {
    uint64_t v31 = qword_269F352F0;
    MEMORY[0x270FA5388](v28);
    uint64_t v113 = v1;
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_255DA0398((void (*)(char *))sub_255DAD65C, (uint64_t)(&v114 - 4), v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = MEMORY[0x263F8EE78];
    uint64_t v154 = MEMORY[0x263F8EE78];
    uint64_t v149 = *(void *)(v1 + 16);
    if (!v149) {
      break;
    }
    unint64_t v33 = 0;
    uint64_t v116 = v6 + 104;
    uint64_t v34 = (uint64_t)v148;
    uint64_t v114 = v148 + 88;
    uint64_t v115 = v142 + 8;
    uint64_t v131 = (unsigned int (**)(uint64_t, uint64_t, int *))(v7 + 48);
    uint64_t v127 = v139 + 24;
    long long v130 = xmmword_255EF2620;
    uint64_t v143 = v2;
    uint64_t v144 = v25;
    uint64_t v151 = v6;
    uint64_t v147 = v1;
    uint64_t v141 = v15;
    while (v33 < *(void *)(v1 + 16))
    {
      uint64_t v7 = v2;
      uint64_t v35 = (char **)((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80));
      uint64_t v15 = *(void *)(v150 + 72);
      sub_255DADBF8((uint64_t)v35 + v1 + v15 * v33, (uint64_t)v30, (uint64_t (*)(void))_s15SectionGridItemVMa);
      if (objc_msgSend(*(id *)&v30[v25[7]], sel_isLockScreen))
      {
        switch(v30[v25[6]])
        {
          case 1:
            uint64_t v42 = &v30[*(int *)(type metadata accessor for MedicalIDDataViewModel() + 48)];
            uint64_t v43 = (uint64_t)&v42[*(int *)(v141 + 20) + (uint64_t)v146[13]];
            sub_255D80868(0);
            uint64_t v140 = &v114;
            uint64_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
            MEMORY[0x270FA5388](v44 - 8);
            uint64_t v129 = (char *)((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v46 = (char *)((char *)&v114 - v129);
            sub_255DADBF8(v43, (char *)&v114 - v129, (uint64_t (*)(void))sub_255D80868);
            uint64_t v47 = sub_255EEE100();
            uint64_t v128 = *(char ***)(*(void *)(v47 - 8) + 48);
            int v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v128)(v46, 1, v47);
            sub_255D9CB50((uint64_t)v46, (uint64_t (*)(void))sub_255D80868);
            uint64_t v49 = (uint64_t)v42;
            uint64_t v50 = v136;
            sub_255DADBF8(v49, v136, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
            if (v48 == 1)
            {
              sub_255D9CB50(v50, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
              uint64_t v7 = v143;
              uint64_t v25 = v144;
              uint64_t v1 = v147;
              uint64_t v34 = (uint64_t)v148;
              uint64_t v6 = v151;
              goto LABEL_5;
            }
            uint64_t v51 = MEMORY[0x270FA5388](v50 + *(int *)(v141 + 20) + v146[14]);
            uint64_t v52 = (char *)((char *)&v114 - v129);
            sub_255DADBF8(v51, (char *)&v114 - v129, (uint64_t (*)(void))sub_255D80868);
            uint64_t v53 = v50;
            int v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v128)(v52, 1, v47);
            sub_255D9CB50((uint64_t)v52, (uint64_t (*)(void))sub_255D80868);
            sub_255D9CB50(v53, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
            BOOL v55 = v54 == 1;
            uint64_t v7 = v143;
            uint64_t v25 = v144;
            uint64_t v1 = v147;
            uint64_t v34 = (uint64_t)v148;
            uint64_t v6 = v151;
            if (!v55) {
              break;
            }
            goto LABEL_5;
          case 2:
            id v56 = objc_msgSend(*(id *)&v30[*(int *)(type metadata accessor for MedicalIDDataViewModel() + 44)], sel_medicationInfo);
            if (!v56) {
              goto LABEL_5;
            }
            goto LABEL_30;
          case 3:
            id v56 = objc_msgSend(*(id *)&v30[*(int *)(type metadata accessor for MedicalIDDataViewModel() + 44)], sel_allergyInfo);
            if (!v56) {
              goto LABEL_5;
            }
            goto LABEL_30;
          case 4:
            uint64_t v57 = *(void *)(*(void *)&v30[v25[5]] + 56);
            swift_getKeyPath();
            uint64_t v153 = v57;
            sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
            swift_retain();
            sub_255EEE2D0();
            swift_release();
            uint64_t v58 = v57 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
            swift_beginAccess();
            uint64_t v59 = v58;
            uint64_t v60 = v145;
            sub_255DADBF8(v59, v145, (uint64_t (*)(void))sub_255D894E4);
            swift_release();
            uint64_t v61 = v137;
            sub_255DADBF8(v60, v137, (uint64_t (*)(void))sub_255D894E4);
            if ((*v131)(v61, 1, v146) == 1)
            {
              sub_255D9CB50(v61, (uint64_t (*)(void))sub_255D894E4);
              sub_255D80868(0);
              uint64_t v140 = &v114;
              uint64_t v63 = *(void *)(*(void *)(v62 - 8) + 64);
              MEMORY[0x270FA5388](v62 - 8);
              uint64_t v123 = v63;
              uint64_t v125 = (uint64_t)&v114 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v64 = sub_255EEE100();
              char v65 = *(void (**)(void))(*(void *)(v64 - 8) + 56);
              uint64_t v66 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v65)((char *)&v114 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v64);
              uint64_t v129 = (char *)&v114;
              MEMORY[0x270FA5388](v66);
              unint64_t v67 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
              uint64_t v124 = (uint64_t)&v114 - v67;
              v65();
              sub_255D98658(0);
              uint64_t v128 = &v114;
              MEMORY[0x270FA5388](v68 - 8);
              char v70 = (char *)&v114 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v122 = v70;
              uint64_t v119 = sub_255EEDF60();
              uint64_t v71 = *(void *)(v119 - 8);
              uint64_t v72 = *(void (**)(void))(v71 + 56);
              uint64_t v120 = v71 + 56;
              uint64_t v73 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v72)(v70, 1, 1, v119);
              uint64_t v126 = &v114;
              MEMORY[0x270FA5388](v73);
              uint64_t v123 = (uint64_t)&v114 - v67;
              v65();
              uint64_t v74 = v139;
              uint64_t v118 = &v139[v146[13]];
              v65();
              uint64_t v117 = (uint64_t)v74 + v146[14];
              v65();
              char v75 = (void *)((char *)v74 + v146[15]);
              void *v75 = 0;
              v75[1] = 0;
              uint64_t v76 = (void *)((char *)v74 + v146[16]);
              *uint64_t v76 = 0;
              v76[1] = 0;
              uint64_t v77 = (char *)v74 + v146[19];
              *(_OWORD *)uint64_t v77 = v130;
              uint64_t v121 = (uint64_t)v74 + v146[20];
              v72();
              uint64_t v78 = v146[21];
              *(void *)((char *)v74 + v78) = 0;
              void *v74 = 0;
              v74[1] = 0;
              v74[2] = MEMORY[0x263F8EE78];
              uint64_t v79 = v127;
              *uint64_t v127 = 0u;
              v79[1] = 0u;
              v79[2] = 0u;
              v79[3] = 0u;
              v79[4] = 0u;
              *((void *)v79 + 10) = 0;
              sub_255DAD698(v125, (uint64_t)v118, (uint64_t (*)(void))sub_255D80868);
              sub_255DAD698(v124, v117, (uint64_t (*)(void))sub_255D80868);
              swift_bridgeObjectRelease();
              void *v75 = 0;
              v75[1] = 0;
              uint64_t v34 = (uint64_t)v148;
              swift_bridgeObjectRelease();
              *uint64_t v76 = 0;
              v76[1] = 0;
              *((unsigned char *)v74 + v146[17]) = 0;
              *((unsigned char *)v74 + v146[18]) = 0;
              sub_255DAD684(*(void *)v77, *((void *)v77 + 1));
              *(_OWORD *)uint64_t v77 = v130;
              sub_255DAD698((uint64_t)v122, v121, (uint64_t (*)(void))sub_255D98658);

              *(void *)((char *)v74 + v78) = 0;
              sub_255DAD8E0(v123, (uint64_t)v74 + v146[22], (uint64_t (*)(void))sub_255D80868);
              uint64_t v80 = v138;
              sub_255DAD8E0((uint64_t)v74, v138, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
            }
            else
            {
              uint64_t v80 = v138;
              sub_255DAD8E0(v61, v138, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
            }
            sub_255D9CB50(v145, (uint64_t (*)(void))sub_255D894E4);
            uint64_t v89 = *(void *)(*(void *)(v80 + 16) + 16);
            sub_255D9CB50(v80, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
            uint64_t v7 = v143;
            uint64_t v25 = v144;
            uint64_t v6 = v151;
            goto LABEL_36;
          case 5:
            uint64_t v140 = v35;
            uint64_t v81 = (uint64_t)&v30[*(int *)(type metadata accessor for MedicalIDDataViewModel() + 36)];
            uint64_t v82 = *(void *)(v81 + *(int *)(v7 + 20) + 96);
            sub_255DADBF8(v81, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
            if (v82)
            {
              sub_255D9CB50((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
              sub_255DADBF8(v81, v34, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
              uint64_t v35 = v140;
LABEL_44:
              uint64_t v96 = type metadata accessor for MedicalIDBiometricsViewModel;
              uint64_t v97 = v34;
              goto LABEL_45;
            }
            uint64_t v98 = *(void *)&v116[*(int *)(v7 + 20)];
            sub_255D9CB50((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
            sub_255DADBF8(v81, v34, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
            uint64_t v35 = v140;
            if (v98) {
              goto LABEL_44;
            }
            uint64_t v89 = *(void *)&v114[*(int *)(v7 + 20)];
            sub_255D9CB50(v34, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
LABEL_36:
            uint64_t v1 = v147;
            if (v89) {
              break;
            }
LABEL_5:
            sub_255D9CB50((uint64_t)v30, (uint64_t (*)(void))_s15SectionGridItemVMa);
            goto LABEL_6;
          case 6:
            id v56 = objc_msgSend(*(id *)&v30[*(int *)(type metadata accessor for MedicalIDDataViewModel() + 44)], sel_medicalConditions);
            if (!v56) {
              goto LABEL_5;
            }
            goto LABEL_30;
          case 7:
            id v56 = objc_msgSend(*(id *)&v30[*(int *)(type metadata accessor for MedicalIDDataViewModel() + 44)], sel_medicalNotes);
            if (!v56) {
              goto LABEL_5;
            }
LABEL_30:
            uint64_t v83 = v56;
            uint64_t v84 = sub_255EEFD90();
            unint64_t v86 = v85;

            swift_bridgeObjectRelease();
            uint64_t v87 = HIBYTE(v86) & 0xF;
            uint64_t v88 = v84 & 0xFFFFFFFFFFFFLL;
            uint64_t v1 = v147;
            BOOL v55 = (v86 & 0x2000000000000000) == 0;
            uint64_t v6 = v151;
            if (v55) {
              uint64_t v87 = v88;
            }
            if (!v87) {
              goto LABEL_5;
            }
            break;
          default:
            uint64_t v36 = type metadata accessor for MedicalIDDataViewModel();
            uint64_t v37 = &v30[*(int *)(v36 + 40)];
            unint64_t v38 = *((void *)v37 + 1);
            if (v38)
            {
              if ((v38 & 0x2000000000000000) != 0) {
                uint64_t v39 = HIBYTE(v38) & 0xF;
              }
              else {
                uint64_t v39 = *(void *)v37 & 0xFFFFFFFFFFFFLL;
              }
              uint64_t v40 = v133;
              sub_255DADBF8((uint64_t)&v30[*(int *)(v36 + 40)], v133, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
              if (v39)
              {
                sub_255D9CB50(v40, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
                uint64_t v41 = v134;
                sub_255DADBF8((uint64_t)v37, v134, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
LABEL_40:
                sub_255D9CB50(v41, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
                uint64_t v93 = v142;
                sub_255DADBF8((uint64_t)v37, v142, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
LABEL_41:
                sub_255D9CB50(v93, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
                uint64_t v94 = (uint64_t)v37;
                uint64_t v95 = v135;
                sub_255DADBF8(v94, v135, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
LABEL_42:
                uint64_t v96 = type metadata accessor for MedicalIDPersonalInfoViewModel;
                uint64_t v97 = v95;
LABEL_45:
                sub_255D9CB50(v97, (uint64_t (*)(void))v96);
                uint64_t v1 = v147;
                break;
              }
            }
            else
            {
              uint64_t v40 = v133;
              sub_255DADBF8((uint64_t)&v30[*(int *)(v36 + 40)], v133, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            }
            uint64_t v90 = (uint64_t *)(v40 + v146[19]);
            uint64_t v91 = *v90;
            unint64_t v92 = v90[1];
            sub_255DAD700(*v90, v92);
            sub_255D9CB50(v40, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            sub_255DAD684(v91, v92);
            uint64_t v41 = v134;
            sub_255DADBF8((uint64_t)v37, v134, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            if (v92 >> 60 != 15) {
              goto LABEL_40;
            }
            uint64_t v102 = v41 + v146[20];
            sub_255D98658(0);
            MEMORY[0x270FA5388](v103 - 8);
            uint64_t v105 = (char *)&v114 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v106 = v102;
            uint64_t v25 = v144;
            sub_255DADBF8(v106, (uint64_t)v105, (uint64_t (*)(void))sub_255D98658);
            sub_255D9CB50(v41, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            uint64_t v107 = sub_255EEDF60();
            int v108 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v107 - 8) + 48))(v105, 1, v107);
            sub_255D9CB50((uint64_t)v105, (uint64_t (*)(void))sub_255D98658);
            uint64_t v34 = (uint64_t)v148;
            uint64_t v93 = v142;
            sub_255DADBF8((uint64_t)v37, v142, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            if (v108 != 1) {
              goto LABEL_41;
            }
            uint64_t v109 = *(void *)(v115 + v146[15]);
            swift_bridgeObjectRetain();
            sub_255D9CB50(v93, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            swift_bridgeObjectRelease();
            uint64_t v110 = (uint64_t)v37;
            uint64_t v95 = v135;
            sub_255DADBF8(v110, v135, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            uint64_t v6 = v151;
            if (v109) {
              goto LABEL_42;
            }
            uint64_t v111 = *(void **)(v95 + v146[21]);
            uint64_t v140 = v111;
            sub_255D9CB50(v95, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
            uint64_t v1 = v147;
            if (!v111) {
              goto LABEL_5;
            }

            break;
        }
      }
      sub_255DAD8E0((uint64_t)v30, v152, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v99 = v154;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_255DFAAFC(0, *(void *)(v99 + 16) + 1, 1);
        uint64_t v1 = v147;
        uint64_t v99 = v154;
      }
      unint64_t v101 = *(void *)(v99 + 16);
      unint64_t v100 = *(void *)(v99 + 24);
      if (v101 >= v100 >> 1)
      {
        sub_255DFAAFC(v100 > 1, v101 + 1, 1);
        uint64_t v1 = v147;
        uint64_t v99 = v154;
      }
      *(void *)(v99 + 16) = v101 + 1;
      sub_255DAD8E0(v152, (uint64_t)v35 + v99 + v101 * v15, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v34 = (uint64_t)v148;
      uint64_t v6 = v151;
LABEL_6:
      ++v33;
      uint64_t v2 = v7;
      if (v149 == v33)
      {
        uint64_t v32 = v154;
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_59:
    uint64_t v28 = swift_once();
  }
LABEL_57:
  swift_bridgeObjectRelease();
  uint64_t v154 = v32;
  swift_getKeyPath();
  sub_255DA70E0(0);
  sub_255DA7114(0);
  sub_255DAD864(&qword_269F35470, sub_255DA70E0);
  sub_255D8BD70();
  uint64_t v113 = sub_255DAD864(&qword_269F35630, sub_255DA7114);
  return sub_255EEFA00();
}

uint64_t sub_255DA607C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_255EEE750();
  *a1 = v3;
  return result;
}

uint64_t sub_255DA60A8()
{
  return sub_255EEF830();
}

uint64_t sub_255DA6114()
{
  return sub_255EEE8C0();
}

void sub_255DA6180()
{
  qword_269F352F0 = (uint64_t)&unk_2704A3270;
}

uint64_t sub_255DA6194@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for MedicalIDDataViewModel();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v9 = *a1;
  uint64_t v10 = *a2;
  uint64_t v11 = (int *)type metadata accessor for MedicalIDDataContentView();
  sub_255DADBF8((uint64_t)a2 + v11[5], (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for MedicalIDDataViewModel);
  uint64_t v12 = *(void **)((char *)a2 + v11[6]);
  if (v12)
  {
    uint64_t v13 = (char *)a2 + v11[12];
    char v14 = *v13;
    uint64_t v15 = *((void *)v13 + 1);
    v23[8] = v14;
    uint64_t v24 = v15;
    sub_255DA8E18();
    swift_retain();
    id v16 = v12;
    sub_255EEF840();
    uint64_t v17 = v25;
    uint64_t v18 = v26;
    char v19 = v27;
    uint64_t v20 = (int *)_s15SectionGridItemVMa();
    *(void *)(a3 + v20[5]) = v10;
    uint64_t result = sub_255DAD8E0((uint64_t)v8, a3, (uint64_t (*)(void))type metadata accessor for MedicalIDDataViewModel);
    *(unsigned char *)(a3 + v20[6]) = v9;
    *(void *)(a3 + v20[7]) = v16;
    uint64_t v22 = a3 + v20[8];
    *(void *)uint64_t v22 = v17;
    *(void *)(v22 + 8) = v18;
    *(unsigned char *)(v22 + 16) = v19;
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DA7C7C();
    swift_retain();
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255DA6360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_255EEF9F0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = _s15SectionGridItemVMa();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  char v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v16 = (char *)&v21 - v15;
  sub_255DADBF8(a1, (uint64_t)&v21 - v15, (uint64_t (*)(void))_s15SectionGridItemVMa);
  sub_255EEF9E0();
  sub_255DADBF8((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))_s15SectionGridItemVMa);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v17(v8, v10, v4);
  sub_255DADBF8((uint64_t)v14, a2, (uint64_t (*)(void))_s15SectionGridItemVMa);
  sub_255DA71E0(0, &qword_269F35468, (void (*)(uint64_t))_s15SectionGridItemVMa, MEMORY[0x263F1B7B8]);
  v17((char *)(a2 + *(int *)(v18 + 48)), v8, v4);
  char v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v10, v4);
  sub_255D9CB50((uint64_t)v16, (uint64_t (*)(void))_s15SectionGridItemVMa);
  v19(v8, v4);
  return sub_255D9CB50((uint64_t)v14, (uint64_t (*)(void))_s15SectionGridItemVMa);
}

void sub_255DA65C0(uint64_t a1)
{
}

void sub_255DA65F4(uint64_t a1)
{
}

void sub_255DA6628()
{
  if (!qword_269F35368)
  {
    sub_255DA73D0(255, &qword_269F35370, (void (*)(uint64_t))sub_255DA66B0);
    sub_255DA79C0();
    unint64_t v0 = sub_255EEE5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35368);
    }
  }
}

void sub_255DA66B0()
{
  if (!qword_269F35378)
  {
    sub_255DA6864();
    sub_255DA7434();
    sub_255DAD864(&qword_269F35558, (void (*)(uint64_t))sub_255DA6864);
    sub_255DA796C();
    sub_255DA754C();
    type metadata accessor for MedicalIDDataManager();
    sub_255DA9D04(&qword_269F35520, (void (*)(uint64_t))sub_255DA754C, (void (*)(void))sub_255DA7740, (void (*)(void))sub_255DA78F4);
    sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35378);
    }
  }
}

void sub_255DA6864()
{
  if (!qword_269F35380)
  {
    sub_255DA68F8(255);
    sub_255DAD864(&qword_269F354B0, sub_255DA68F8);
    unint64_t v0 = sub_255EEE5C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35380);
    }
  }
}

void sub_255DA68F8(uint64_t a1)
{
}

void sub_255DA692C()
{
  if (!qword_269F35390)
  {
    sub_255DA69D0();
    sub_255DA6E40(255, &qword_269F35418, MEMORY[0x263F19B28]);
    sub_255DA6F04(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F35390);
    }
  }
}

void sub_255DA69D0()
{
  if (!qword_269F35398)
  {
    sub_255DA8C6C(255, &qword_269F353A0, sub_255DA6A58, (void (*)(uint64_t))sub_255DA6B58);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35398);
    }
  }
}

void sub_255DA6A58(uint64_t a1)
{
}

void sub_255DA6A8C(uint64_t a1)
{
}

void sub_255DA6AB4()
{
  if (!qword_269F353B8)
  {
    sub_255DA6B10();
    unint64_t v0 = sub_255EEEF40();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F353B8);
    }
  }
}

unint64_t sub_255DA6B10()
{
  unint64_t result = qword_269F353C0;
  if (!qword_269F353C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F353C0);
  }
  return result;
}

void sub_255DA6B58()
{
  if (!qword_269F353C8)
  {
    sub_255DA6BF4(255);
    sub_255DAD7B0(&qword_269F35400, sub_255DA6BF4, (void (*)(void))sub_255DA6DD0);
    unint64_t v0 = sub_255EEEDE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F353C8);
    }
  }
}

void sub_255DA6BF4(uint64_t a1)
{
}

void sub_255DA6C1C(uint64_t a1)
{
}

void sub_255DA6C44()
{
  if (!qword_269F353E0)
  {
    sub_255DA7324(255, &qword_269F353E8, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F19B00]);
    sub_255DA6CF8();
    sub_255DA6D4C();
    unint64_t v0 = sub_255EEE600();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F353E0);
    }
  }
}

unint64_t sub_255DA6CF8()
{
  unint64_t result = qword_269F353F0;
  if (!qword_269F353F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F353F0);
  }
  return result;
}

unint64_t sub_255DA6D4C()
{
  unint64_t result = qword_269F353F8;
  if (!qword_269F353F8)
  {
    sub_255DA7324(255, &qword_269F353E8, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F19B00]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F353F8);
  }
  return result;
}

uint64_t sub_255DA6DD0()
{
  return sub_255DAD7B0(&qword_269F35408, sub_255DA6C1C, (void (*)(void))sub_255DA6E0C);
}

uint64_t sub_255DA6E0C()
{
  return sub_255DAD864(&qword_269F35410, (void (*)(uint64_t))sub_255DA6C44);
}

void sub_255DA6E40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255DA7324(255, &qword_269F35420, MEMORY[0x263F1B440], MEMORY[0x263F18868], MEMORY[0x263F18E28]);
    uint64_t v7 = v6;
    sub_255DA6EDC(255);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_255DA6EDC(uint64_t a1)
{
}

void sub_255DA6F04(uint64_t a1)
{
}

void sub_255DA6F2C()
{
  if (!qword_269F35438)
  {
    sub_255DA6FBC(255, &qword_269F35440, &qword_269F35448, (void (*)(uint64_t))sub_255DA7018, (void (*)(uint64_t))sub_255DA7150);
    unint64_t v0 = sub_255EEF790();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35438);
    }
  }
}

void sub_255DA6FBC(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  if (!*a2)
  {
    sub_255DA71E0(255, a3, a4, a5);
    unint64_t v6 = sub_255EEFB90();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255DA7018()
{
  if (!qword_269F35450)
  {
    sub_255DA70E0(255);
    sub_255DA7114(255);
    sub_255DAD864(&qword_269F35470, sub_255DA70E0);
    sub_255D8BD70();
    unint64_t v0 = sub_255EEFA20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35450);
    }
  }
}

void sub_255DA70E0(uint64_t a1)
{
}

void sub_255DA7114(uint64_t a1)
{
}

void sub_255DA7150()
{
  if (!qword_269F35478)
  {
    sub_255DA6FBC(255, &qword_269F35480, &qword_269F35488, sub_255DA725C, sub_255DA7374);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35478);
    }
  }
}

void sub_255DA71E0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_255DA725C(uint64_t a1)
{
}

void sub_255DA7290()
{
  if (!qword_269F35498)
  {
    sub_255DA7324(255, &qword_269F35138, MEMORY[0x263F1A830], MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35498);
    }
  }
}

void sub_255DA7324(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255DA7374(uint64_t a1)
{
}

void sub_255DA73A8(uint64_t a1)
{
}

void sub_255DA73D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255DA7434()
{
  if (!qword_269F354B8)
  {
    sub_255DA754C();
    type metadata accessor for MedicalIDDataManager();
    sub_255DA9D04(&qword_269F35520, (void (*)(uint64_t))sub_255DA754C, (void (*)(void))sub_255DA7740, (void (*)(void))sub_255DA78F4);
    sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F354B8);
    }
  }
}

void sub_255DA754C()
{
  if (!qword_269F354C0)
  {
    sub_255DA75D4();
    sub_255DA76E4(255, &qword_269F35508, &qword_269F35510, (unint64_t *)&qword_269F35518);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F354C0);
    }
  }
}

void sub_255DA75D4()
{
  if (!qword_269F354C8)
  {
    sub_255DA765C();
    sub_255DA76E4(255, &qword_269F354F0, &qword_269F354F8, &qword_269F35500);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F354C8);
    }
  }
}

void sub_255DA765C()
{
  if (!qword_269F354D0)
  {
    _s12SheetContentVMa();
    sub_255DA76E4(255, &qword_269F354D8, &qword_269F354E0, (unint64_t *)&qword_269F354E8);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F354D0);
    }
  }
}

void sub_255DA76E4(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    sub_255D7ECB8(255, a3, a4);
    unint64_t v5 = sub_255EEF080();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255DA7740()
{
  return sub_255DA9D04(&qword_269F35528, (void (*)(uint64_t))sub_255DA75D4, (void (*)(void))sub_255DA7788, (void (*)(void))sub_255DA787C);
}

uint64_t sub_255DA7788()
{
  return sub_255DA9D04(&qword_269F35530, (void (*)(uint64_t))sub_255DA765C, (void (*)(void))sub_255DA77D0, (void (*)(void))sub_255DA7804);
}

uint64_t sub_255DA77D0()
{
  return sub_255DAD864(&qword_269F35538, (void (*)(uint64_t))_s12SheetContentVMa);
}

unint64_t sub_255DA7804()
{
  unint64_t result = qword_269F35540;
  if (!qword_269F35540)
  {
    sub_255DA76E4(255, &qword_269F354D8, &qword_269F354E0, (unint64_t *)&qword_269F354E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35540);
  }
  return result;
}

unint64_t sub_255DA787C()
{
  unint64_t result = qword_269F35548;
  if (!qword_269F35548)
  {
    sub_255DA76E4(255, &qword_269F354F0, &qword_269F354F8, &qword_269F35500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35548);
  }
  return result;
}

unint64_t sub_255DA78F4()
{
  unint64_t result = qword_269F35550;
  if (!qword_269F35550)
  {
    sub_255DA76E4(255, &qword_269F35508, &qword_269F35510, (unint64_t *)&qword_269F35518);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35550);
  }
  return result;
}

unint64_t sub_255DA796C()
{
  unint64_t result = qword_269F35560;
  if (!qword_269F35560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35560);
  }
  return result;
}

unint64_t sub_255DA79C0()
{
  unint64_t result = qword_269F35568;
  if (!qword_269F35568)
  {
    sub_255DA73D0(255, &qword_269F35370, (void (*)(uint64_t))sub_255DA66B0);
    sub_255DA6864();
    sub_255DA7434();
    sub_255DAD864(&qword_269F35558, (void (*)(uint64_t))sub_255DA6864);
    sub_255DA796C();
    sub_255DA754C();
    type metadata accessor for MedicalIDDataManager();
    sub_255DA9D04(&qword_269F35520, (void (*)(uint64_t))sub_255DA754C, (void (*)(void))sub_255DA7740, (void (*)(void))sub_255DA78F4);
    sub_255DAD864(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255DA7BBC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35568);
  }
  return result;
}

unint64_t sub_255DA7BBC()
{
  unint64_t result = qword_269F35570;
  if (!qword_269F35570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35570);
  }
  return result;
}

uint64_t sub_255DA7C10@<X0>(uint64_t a1@<X8>)
{
  return sub_255DA1014(*(void *)(v1 + 16), a1);
}

uint64_t sub_255DA7C1C(uint64_t a1)
{
  return sub_255DAD49C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_255DA1AC8);
}

void sub_255DA7C34()
{
  qword_269F352F8 = 0x403C000000000000;
}

void sub_255DA7C44()
{
  qword_269F35300 = 0x4030000000000000;
}

void sub_255DA7C54()
{
  qword_269F35308 = 0x4018000000000000;
}

void sub_255DA7C64()
{
  qword_269F35310 = 0x4041000000000000;
}

unint64_t sub_255DA7C7C()
{
  unint64_t result = qword_269F35578;
  if (!qword_269F35578)
  {
    sub_255D7ED10(255, (unint64_t *)&qword_269F354E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35578);
  }
  return result;
}

uint64_t sub_255DA7CE8()
{
  sub_255DA65C0(0);
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v6 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v8 = v4 + v5 + v7;
  sub_255DA6628();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v0 + v4, v9);
  sub_255DA65F4(0);
  swift_release();
  swift_release();
  uint64_t v10 = v0 + v4 + *(int *)(v2 + 44);
  uint64_t v11 = (int *)type metadata accessor for MedicalIDNavigationBarViewModifier();
  uint64_t v12 = v10 + v11[5];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_255EEE200();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = v8 & ~v7;

  uint64_t v15 = v10 + v11[8];
  sub_255D98680(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v72 = (int *)v6;
  uint64_t v71 = v0 + v14;
  uint64_t v17 = (id *)(v0 + v14 + *(int *)(v6 + 20));

  uint64_t v18 = (int *)type metadata accessor for MedicalIDDataViewModel();
  char v19 = (id *)((char *)v17 + v18[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v20 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v21 = (char *)v19 + v20[13];
  uint64_t v22 = sub_255EEE100();
  uint64_t v80 = *(void *)(v22 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
  if (!v23(v21, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v21, v22);
  }
  uint64_t v24 = (char *)v19 + v20[14];
  if (!v23(v24, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v24, v22);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t *)((char *)v19 + v20[19]);
  unint64_t v26 = v25[1];
  if (v26 >> 60 != 15) {
    sub_255D80D04(*v25, v26);
  }
  char v27 = (char *)v19 + v20[20];
  uint64_t v28 = sub_255EEDF60();
  uint64_t v73 = *(void *)(v28 - 8);
  uint64_t v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
  if (!v77(v27, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v27, v28);
  }

  uint64_t v29 = (char *)v19 + v20[22];
  if (!v23(v29, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v29, v22);
  }
  uint64_t v30 = (char *)v17 + v18[6];
  uint64_t v31 = sub_255EEE280();
  char v75 = *(void (**)(char *))(*(void *)(v31 - 8) + 8);
  uint64_t v76 = v31;
  v75(v30);

  uint64_t v32 = (char *)v17 + v18[8];
  uint64_t v33 = sub_255EEE200();
  uint64_t v79 = *(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8);
  v79(v32, v33);
  uint64_t v78 = v18;
  uint64_t v74 = v17;
  uint64_t v34 = (char *)v17 + v18[9];
  swift_bridgeObjectRelease();
  uint64_t v35 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v36 = &v34[v35[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v37 = &v36[v20[13]];
  if (!v23(v37, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v37, v22);
  }
  unint64_t v38 = &v36[v20[14]];
  if (!v23(v38, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v22);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v39 = (uint64_t *)&v36[v20[19]];
  unint64_t v40 = v39[1];
  if (v40 >> 60 != 15) {
    sub_255D80D04(*v39, v40);
  }
  uint64_t v41 = &v36[v20[20]];
  if (!v77(v41, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v28);
  }

  uint64_t v42 = &v36[v20[22]];
  if (!v23(v42, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v22);
  }
  v79(&v34[v35[6]], v33);
  uint64_t v43 = &v34[v35[7]];
  v79(v43, v33);

  uint64_t v44 = &v34[v35[8]];
  v79(v44, v33);
  uint64_t v45 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v46 = (id *)((char *)v74 + v78[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v47 = (char *)v46 + v20[13];
  if (!v23(v47, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v47, v22);
  }
  int v48 = (char *)v46 + v20[14];
  if (!v23(v48, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v22);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t *)((char *)v46 + v20[19]);
  unint64_t v50 = v49[1];
  if (v50 >> 60 != 15) {
    sub_255D80D04(*v49, v50);
  }
  uint64_t v51 = (char *)v46 + v20[20];
  if (!v77(v51, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v51, v28);
  }

  uint64_t v52 = (char *)v46 + v20[22];
  if (!v23(v52, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v22);
  }
  uint64_t v53 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v75)((char *)v46 + v53[5], v76);
  v79((char *)v46 + v53[6], v33);

  swift_bridgeObjectRelease();
  int v54 = (id *)((char *)v74 + v78[11]);

  uint64_t v55 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v75)((char *)v54 + *(int *)(v55 + 20), v76);
  v79((char *)v54 + *(int *)(v55 + 24), v33);
  id v56 = (char *)v74 + v78[12];
  swift_bridgeObjectRelease();
  uint64_t v57 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v58 = &v56[v57[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v59 = &v58[v20[13]];
  if (!v23(v59, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v22);
  }
  uint64_t v60 = &v58[v20[14]];
  if (!v23(v60, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v22);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = (uint64_t *)&v58[v20[19]];
  unint64_t v62 = v61[1];
  if (v62 >> 60 != 15) {
    sub_255D80D04(*v61, v62);
  }
  uint64_t v63 = &v58[v20[20]];
  if (!v77(v63, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v28);
  }

  uint64_t v64 = &v58[v20[22]];
  if (!v23(v64, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v64, v22);
  }
  ((void (*)(char *, uint64_t))v75)(&v56[v57[6]], v76);
  v79(&v56[v57[7]], v33);
  swift_release();
  char v65 = &v56[v57[9]];
  if (!v23(v65, 1, v22)) {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v65, v22);
  }

  uint64_t v66 = v71 + v72[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v75)(v66, v76);
  }
  else {
    swift_release();
  }
  unint64_t v67 = (char *)(v71 + v72[8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v79(v67, v33);
  }
  else {
    swift_release();
  }
  uint64_t v68 = v71 + v72[9];
  sub_255D98734(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v69 = sub_255EEE620();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v68, v69);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DA8B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255DA65C0(0);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v8 = *(void *)(type metadata accessor for MedicalIDDataContentView() - 8);
  uint64_t v9 = v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return sub_255DA1B34(a1, v2 + v6, v9, a2);
}

void sub_255DA8C38(uint64_t a1)
{
}

void sub_255DA8C6C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_255DA8CE4()
{
  uint64_t v2 = *(void *)(type metadata accessor for MedicalIDDataContentView() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_255EEE8D0() - 8) + 80);
  unint64_t v6 = v3 + v4 + v5;
  uint64_t v7 = v0 + v3;
  uint64_t v8 = v0 + (v6 & ~v5);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_255D7EE18;
  return sub_255DA204C(v7, v8);
}

void sub_255DA8E18()
{
  if (!qword_269F355A0)
  {
    sub_255DAD574(255, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EEF850();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F355A0);
    }
  }
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v59 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v57 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = sub_255EEE8D0();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  uint64_t v56 = *(unsigned __int8 *)(v60 + 80);
  uint64_t v62 = v0;
  uint64_t v58 = (v59 + 16) & ~v59;
  swift_release();
  uint64_t v64 = v0 + v58;
  char v65 = (int *)v1;
  unint64_t v3 = (id *)(v0 + v58 + *(int *)(v1 + 20));

  uint64_t v4 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v5 = (id *)((char *)v3 + v4[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = (char *)v5 + v6[13];
  uint64_t v8 = sub_255EEE100();
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  if (!v9(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v8);
  }
  uint64_t v10 = (char *)v5 + v6[14];
  if (!v9(v10, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v10, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)((char *)v5 + v6[19]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_255D80D04(*v11, v12);
  }
  uint64_t v13 = (char *)v5 + v6[20];
  uint64_t v14 = sub_255EEDF60();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  if (!v69(v13, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v14);
  }

  uint64_t v15 = (char *)v5 + v6[22];
  if (!v9(v15, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v15, v8);
  }
  uint64_t v16 = (char *)v3 + v4[6];
  uint64_t v17 = sub_255EEE280();
  unint64_t v67 = *(void (**)(char *))(*(void *)(v17 - 8) + 8);
  uint64_t v68 = v17;
  v67(v16);

  uint64_t v18 = (char *)v3 + v4[8];
  uint64_t v71 = sub_255EEE200();
  uint64_t v72 = (void (**)(char *))(*(void *)(v71 - 8) + 8);
  uint64_t v73 = *v72;
  (*v72)(v18);
  char v70 = v4;
  uint64_t v63 = v3;
  char v19 = (char *)v3 + v4[9];
  swift_bridgeObjectRelease();
  uint64_t v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v22 = &v21[v6[13]];
  if (!v9(v22, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v22, v8);
  }
  uint64_t v23 = &v21[v6[14]];
  if (!v9(v23, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v23, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t *)&v21[v6[19]];
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_255D80D04(*v24, v25);
  }
  unint64_t v26 = &v21[v6[20]];
  if (!v69(v26, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v26, v14);
  }

  char v27 = &v21[v6[22]];
  if (!v9(v27, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v27, v8);
  }
  ((void (*)(char *, uint64_t))v73)(&v19[v20[6]], v71);
  uint64_t v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v73)(v28, v71);

  uint64_t v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v73)(v29, v71);
  uint64_t v30 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v31 = (id *)((char *)v63 + v70[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v32 = (char *)v31 + v6[13];
  if (!v9(v32, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v32, v8);
  }
  uint64_t v33 = (char *)v31 + v6[14];
  if (!v9(v33, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v33, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)((char *)v31 + v6[19]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_255D80D04(*v34, v35);
  }
  uint64_t v36 = (char *)v31 + v6[20];
  if (!v69(v36, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v14);
  }

  uint64_t v37 = (char *)v31 + v6[22];
  if (!v9(v37, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v8);
  }
  unint64_t v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v67)((char *)v31 + v38[5], v68);
  ((void (*)(char *, uint64_t))v73)((char *)v31 + v38[6], v71);

  swift_bridgeObjectRelease();
  uint64_t v39 = (id *)((char *)v63 + v70[11]);

  uint64_t v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v67)((char *)v39 + *(int *)(v40 + 20), v68);
  ((void (*)(char *, uint64_t))v73)((char *)v39 + *(int *)(v40 + 24), v71);
  uint64_t v41 = (char *)v63 + v70[12];
  swift_bridgeObjectRelease();
  uint64_t v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v44 = &v43[v6[13]];
  if (!v9(v44, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v8);
  }
  uint64_t v45 = &v43[v6[14]];
  if (!v9(v45, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t *)&v43[v6[19]];
  unint64_t v47 = v46[1];
  if (v47 >> 60 != 15) {
    sub_255D80D04(*v46, v47);
  }
  int v48 = &v43[v6[20]];
  if (!v69(v48, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v14);
  }

  uint64_t v49 = &v43[v6[22]];
  if (!v9(v49, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v8);
  }
  ((void (*)(char *, uint64_t))v67)(&v41[v42[6]], v68);
  ((void (*)(char *, uint64_t))v73)(&v41[v42[7]], v71);
  swift_release();
  unint64_t v50 = &v41[v42[9]];
  if (!v9(v50, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v50, v8);
  }

  uint64_t v51 = v64 + v65[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v67)(v51, v68);
  }
  else {
    swift_release();
  }
  uint64_t v52 = v64 + v65[8];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v73)(v52, v71);
  }
  else {
    swift_release();
  }
  uint64_t v53 = v64 + v65[9];
  sub_255D98734(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v54 = sub_255EEE620();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v53, v54);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62 + ((v58 + v57 + v56) & ~v56), v61);
  return swift_deallocObject();
}

unsigned char *sub_255DA9B90(unsigned char *a1, unsigned char *a2)
{
  type metadata accessor for MedicalIDDataContentView();
  sub_255EEE8D0();
  return sub_255DA2624(a1, a2);
}

uint64_t sub_255DA9C74()
{
  return sub_255DA9D04(&qword_269F355B8, sub_255DA65C0, (void (*)(void))sub_255DA9CBC, (void (*)(void))sub_255DA9DF8);
}

uint64_t sub_255DA9CBC()
{
  return sub_255DA9D04(&qword_269F355C0, sub_255DA65F4, (void (*)(void))sub_255DA9D90, (void (*)(void))sub_255DA9DC4);
}

uint64_t sub_255DA9D04(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DA9D90()
{
  return sub_255DAD864(&qword_269F355C8, (void (*)(uint64_t))sub_255DA6628);
}

uint64_t sub_255DA9DC4()
{
  return sub_255DAD864(&qword_269F355D0, (void (*)(uint64_t))sub_255DA6AB4);
}

uint64_t sub_255DA9DF8()
{
  return sub_255DAD864(&qword_269F355D8, (void (*)(uint64_t))type metadata accessor for MedicalIDNavigationBarViewModifier);
}

uint64_t sub_255DA9E2C()
{
  return sub_255DAD864(&qword_269F355E0, MEMORY[0x263F189F8]);
}

unint64_t sub_255DA9E60()
{
  unint64_t result = qword_269F355E8;
  if (!qword_269F355E8)
  {
    sub_255DAD574(255, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
    sub_255D8BC4C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F355E8);
  }
  return result;
}

uint64_t sub_255DA9EF4()
{
  return sub_255DA6114();
}

uint64_t sub_255DA9F14(uint64_t a1)
{
  uint64_t v2 = sub_255EEE620();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_255EEEA30();
}

uint64_t sub_255DA9FDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D98734(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DADBF8(v2, (uint64_t)v10, (uint64_t (*)(void))sub_255D98734);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_255EEE620();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_255EF00D0();
    uint64_t v14 = sub_255EEF150();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v19[1] = a1;
      uint64_t v18 = v17;
      uint64_t v20 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v19[2] = sub_255DB0024(0x686353726F6C6F43, 0xEB00000000656D65, &v20);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v18, -1, -1);
      MEMORY[0x25A29C8A0](v16, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_255DAA2A0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v8 = sub_255EF00D0();
    uint64_t v9 = sub_255EEF150();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = sub_255DB0024(0xD000000000000014, 0x8000000255EF9220, &v15);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v12, -1, -1);
      MEMORY[0x25A29C8A0](v11, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t sub_255DAA4A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
  sub_255D98680(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void *)((char *)v20 - v10);
  sub_255DADC60(v2, (uint64_t)v20 - v10, (unint64_t *)&qword_269F35580, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_255EEE730();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    uint64_t v14 = *v11;
    os_log_type_t v15 = sub_255EF00D0();
    uint64_t v16 = sub_255EEF150();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v21 = v19;
      v20[1] = v14;
      *(_DWORD *)uint64_t v18 = 136315138;
      v20[2] = sub_255DB0024(0x417373696D736944, 0xED00006E6F697463, &v21);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v19, -1, -1);
      MEMORY[0x25A29C8A0](v18, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_255DAA7A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A510];
  sub_255D98680(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v19 - v10;
  sub_255DADC60(v2, (uint64_t)v19 - v10, &qword_269F35678, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_255EEF120();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    os_log_type_t v14 = sub_255EF00D0();
    os_log_type_t v15 = sub_255EEF150();
    os_log_type_t v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v20 = v18;
      v19[1] = a1;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      v19[2] = sub_255DB0024(0xD000000000000022, 0x8000000255EF9240, &v20);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v18, -1, -1);
      MEMORY[0x25A29C8A0](v17, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_255DAAA88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D9870C(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DADBF8(v2, (uint64_t)v10, (uint64_t (*)(void))sub_255D9870C);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_255EEE200();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_255EF00D0();
    os_log_type_t v14 = sub_255EEF150();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v19[1] = a1;
      uint64_t v18 = v17;
      uint64_t v20 = v17;
      *(_DWORD *)os_log_type_t v16 = 136315138;
      v19[2] = sub_255DB0024(0x656C61636F4CLL, 0xE600000000000000, &v20);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v18, -1, -1);
      MEMORY[0x25A29C8A0](v16, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_255DAAD40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
  sub_255D98680(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void *)((char *)v20 - v10);
  sub_255DADC60(v2, (uint64_t)v20 - v10, &qword_269F35680, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_255EEE860();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v11, v12);
  }
  else
  {
    uint64_t v14 = *v11;
    os_log_type_t v15 = sub_255EF00D0();
    os_log_type_t v16 = sub_255EEF150();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v21 = v19;
      v20[1] = v14;
      *(_DWORD *)uint64_t v18 = 136315138;
      v20[2] = sub_255DB0024(0x5463696D616E7944, 0xEF657A6953657079, &v21);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v19, -1, -1);
      MEMORY[0x25A29C8A0](v18, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_255DAB038@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D98680(0, &qword_269F35658, (uint64_t (*)(uint64_t))sub_255DAD8AC, MEMORY[0x263F185C8]);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v17 - v9;
  sub_255DADC60(v2, (uint64_t)v17 - v9, &qword_269F35658, (uint64_t (*)(uint64_t))sub_255DAD8AC);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_255DAD8E0((uint64_t)v10, a1, (uint64_t (*)(void))sub_255DAD8AC);
  }
  os_log_type_t v12 = sub_255EF00D0();
  os_log_type_t v13 = sub_255EEF150();
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v18 = v16;
    v17[1] = a1;
    *(_DWORD *)os_log_type_t v15 = 136315138;
    v17[2] = sub_255DB0024(0xD000000000000019, 0x8000000255EF9200, &v18);
    sub_255EF0200();
    _os_log_impl(&dword_255D76000, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v16, -1, -1);
    MEMORY[0x25A29C8A0](v15, -1, -1);
  }

  sub_255EEEC10();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_255DAB304(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_255EEEC20();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    sub_255D85808(a1);
  }
  else
  {
    swift_retain();
    os_log_type_t v10 = sub_255EF00D0();
    uint64_t v11 = sub_255EEF150();
    os_log_type_t v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v17 = v14;
      *(_DWORD *)os_log_type_t v13 = 136315138;
      v16[0] = v13 + 4;
      v16[1] = sub_255DB0024(0xD000000000000044, 0x8000000255EF9270, &v17);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v14, -1, -1);
      MEMORY[0x25A29C8A0](v13, -1, -1);
    }

    sub_255EEEC10();
    swift_getAtKeyPath();
    sub_255DADCEC(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v17;
  }
  return a1;
}

uint64_t sub_255DAB52C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_255EEEC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_255EF00D0();
  uint64_t v9 = sub_255EEF150();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v15 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v14 = sub_255DB0024(1819242306, 0xE400000000000000, &v15);
    sub_255EF0200();
    _os_log_impl(&dword_255D76000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v12, -1, -1);
    MEMORY[0x25A29C8A0](v11, -1, -1);
  }

  sub_255EEEC10();
  swift_getAtKeyPath();
  sub_255DADCE0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_255DAB730()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_255DAB768(void *a1)
{
  return sub_255D7F854(a1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_255DAB788()
{
  uint64_t v1 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v59 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v57 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = sub_255EEE8D0();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  uint64_t v56 = *(unsigned __int8 *)(v60 + 80);
  swift_unknownObjectRelease();
  uint64_t v62 = v0;
  uint64_t v58 = (v59 + 32) & ~v59;
  swift_release();
  uint64_t v64 = v0 + v58;
  char v65 = (int *)v1;
  uint64_t v3 = (id *)(v0 + v58 + *(int *)(v1 + 20));

  uint64_t v4 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v5 = (id *)((char *)v3 + v4[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = (char *)v5 + v6[13];
  uint64_t v8 = sub_255EEE100();
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  if (!v9(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v8);
  }
  os_log_type_t v10 = (char *)v5 + v6[14];
  if (!v9(v10, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v10, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)((char *)v5 + v6[19]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_255D80D04(*v11, v12);
  }
  os_log_type_t v13 = (char *)v5 + v6[20];
  uint64_t v14 = sub_255EEDF60();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  if (!v69(v13, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v14);
  }

  uint64_t v15 = (char *)v5 + v6[22];
  if (!v9(v15, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v15, v8);
  }
  uint64_t v16 = (char *)v3 + v4[6];
  uint64_t v17 = sub_255EEE280();
  unint64_t v67 = *(void (**)(char *))(*(void *)(v17 - 8) + 8);
  uint64_t v68 = v17;
  v67(v16);

  uint64_t v18 = (char *)v3 + v4[8];
  uint64_t v71 = sub_255EEE200();
  uint64_t v72 = (void (**)(char *))(*(void *)(v71 - 8) + 8);
  uint64_t v73 = *v72;
  (*v72)(v18);
  char v70 = v4;
  uint64_t v63 = v3;
  uint64_t v19 = (char *)v3 + v4[9];
  swift_bridgeObjectRelease();
  uint64_t v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v22 = &v21[v6[13]];
  if (!v9(v22, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v22, v8);
  }
  uint64_t v23 = &v21[v6[14]];
  if (!v9(v23, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v23, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t *)&v21[v6[19]];
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_255D80D04(*v24, v25);
  }
  unint64_t v26 = &v21[v6[20]];
  if (!v69(v26, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v26, v14);
  }

  char v27 = &v21[v6[22]];
  if (!v9(v27, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v27, v8);
  }
  ((void (*)(char *, uint64_t))v73)(&v19[v20[6]], v71);
  uint64_t v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v73)(v28, v71);

  uint64_t v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v73)(v29, v71);
  uint64_t v30 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v31 = (id *)((char *)v63 + v70[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v32 = (char *)v31 + v6[13];
  if (!v9(v32, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v32, v8);
  }
  uint64_t v33 = (char *)v31 + v6[14];
  if (!v9(v33, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v33, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)((char *)v31 + v6[19]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_255D80D04(*v34, v35);
  }
  uint64_t v36 = (char *)v31 + v6[20];
  if (!v69(v36, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v14);
  }

  uint64_t v37 = (char *)v31 + v6[22];
  if (!v9(v37, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v8);
  }
  unint64_t v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v67)((char *)v31 + v38[5], v68);
  ((void (*)(char *, uint64_t))v73)((char *)v31 + v38[6], v71);

  swift_bridgeObjectRelease();
  uint64_t v39 = (id *)((char *)v63 + v70[11]);

  uint64_t v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v67)((char *)v39 + *(int *)(v40 + 20), v68);
  ((void (*)(char *, uint64_t))v73)((char *)v39 + *(int *)(v40 + 24), v71);
  uint64_t v41 = (char *)v63 + v70[12];
  swift_bridgeObjectRelease();
  uint64_t v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v44 = &v43[v6[13]];
  if (!v9(v44, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v8);
  }
  uint64_t v45 = &v43[v6[14]];
  if (!v9(v45, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t *)&v43[v6[19]];
  unint64_t v47 = v46[1];
  if (v47 >> 60 != 15) {
    sub_255D80D04(*v46, v47);
  }
  int v48 = &v43[v6[20]];
  if (!v69(v48, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v14);
  }

  uint64_t v49 = &v43[v6[22]];
  if (!v9(v49, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v8);
  }
  ((void (*)(char *, uint64_t))v67)(&v41[v42[6]], v68);
  ((void (*)(char *, uint64_t))v73)(&v41[v42[7]], v71);
  swift_release();
  unint64_t v50 = &v41[v42[9]];
  if (!v9(v50, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v50, v8);
  }

  uint64_t v51 = v64 + v65[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v67)(v51, v68);
  }
  else {
    swift_release();
  }
  uint64_t v52 = v64 + v65[8];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v73)(v52, v71);
  }
  else {
    swift_release();
  }
  uint64_t v53 = v64 + v65[9];
  sub_255D98734(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v54 = sub_255EEE620();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v53, v54);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62 + ((v58 + v57 + v56) & ~v56), v61);
  return swift_deallocObject();
}

uint64_t sub_255DAC488(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MedicalIDDataContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_255EEE8D0() - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  os_log_type_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *os_log_type_t v13 = v2;
  v13[1] = sub_255D7E778;
  return sub_255DA275C(a1, v9, v10, v11, v12);
}

void sub_255DAC5DC()
{
  if (!qword_269F35610)
  {
    unint64_t v0 = sub_255EEF850();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35610);
    }
  }
}

uint64_t sub_255DAC634@<X0>(uint64_t a1@<X8>)
{
  return sub_255DA2990(*(void *)(v1 + 16), a1);
}

uint64_t sub_255DAC640()
{
  type metadata accessor for MedicalIDDataContentView();
  return sub_255DA1814();
}

uint64_t sub_255DAC6A4@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for MedicalIDDataContentView() - 8);
  uint64_t v6 = (uint64_t *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  return sub_255DA187C(a1, v6, a2);
}

uint64_t sub_255DAC724(uint64_t a1, uint64_t a2)
{
  sub_255DA6E40(0, &qword_269F35418, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255DAC7A4(uint64_t a1)
{
  sub_255DA6E40(0, &qword_269F35418, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = type metadata accessor for MedicalIDDataContentView();
  uint64_t v55 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  uint64_t v57 = v0 + ((v55 + 16) & ~v55);
  uint64_t v58 = (int *)v1;
  uint64_t v2 = (id *)(v57 + *(int *)(v1 + 20));

  uint64_t v3 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v4 = (id *)((char *)v2 + v3[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = (char *)v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v67 = *(void *)(v7 - 8);
  unint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v6, v7);
  }
  uint64_t v9 = (char *)v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)((char *)v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = (char *)v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
  if (!v62(v12, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v13);
  }

  uint64_t v14 = (char *)v4 + v5[22];
  if (!v8(v14, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v7);
  }
  uint64_t v15 = (char *)v2 + v3[6];
  uint64_t v16 = sub_255EEE280();
  uint64_t v60 = *(void (**)(char *))(*(void *)(v16 - 8) + 8);
  uint64_t v61 = v16;
  v60(v15);

  uint64_t v17 = (char *)v2 + v3[8];
  uint64_t v64 = sub_255EEE200();
  char v65 = (void (**)(char *))(*(void *)(v64 - 8) + 8);
  uint64_t v66 = *v65;
  (*v65)(v17);
  uint64_t v63 = v3;
  uint64_t v56 = v2;
  uint64_t v18 = (char *)v2 + v3[9];
  swift_bridgeObjectRelease();
  uint64_t v19 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v20 = &v18[v19[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v21 = &v20[v5[13]];
  if (!v8(v21, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v7);
  }
  uint64_t v22 = &v20[v5[14]];
  if (!v8(v22, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v22, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t *)&v20[v5[19]];
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_255D80D04(*v23, v24);
  }
  unint64_t v25 = &v20[v5[20]];
  if (!v62(v25, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v13);
  }

  unint64_t v26 = &v20[v5[22]];
  if (!v8(v26, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v26, v7);
  }
  ((void (*)(char *, uint64_t))v66)(&v18[v19[6]], v64);
  char v27 = &v18[v19[7]];
  ((void (*)(char *, uint64_t))v66)(v27, v64);

  uint64_t v28 = &v18[v19[8]];
  ((void (*)(char *, uint64_t))v66)(v28, v64);
  uint64_t v29 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v30 = (id *)((char *)v56 + v63[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v31 = (char *)v30 + v5[13];
  if (!v8(v31, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v31, v7);
  }
  uint64_t v32 = (char *)v30 + v5[14];
  if (!v8(v32, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v32, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = (uint64_t *)((char *)v30 + v5[19]);
  unint64_t v34 = v33[1];
  if (v34 >> 60 != 15) {
    sub_255D80D04(*v33, v34);
  }
  unint64_t v35 = (char *)v30 + v5[20];
  if (!v62(v35, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v13);
  }

  uint64_t v36 = (char *)v30 + v5[22];
  if (!v8(v36, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v7);
  }
  uint64_t v37 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v60)((char *)v30 + v37[5], v61);
  ((void (*)(char *, uint64_t))v66)((char *)v30 + v37[6], v64);

  swift_bridgeObjectRelease();
  unint64_t v38 = (id *)((char *)v56 + v63[11]);

  uint64_t v39 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v60)((char *)v38 + *(int *)(v39 + 20), v61);
  ((void (*)(char *, uint64_t))v66)((char *)v38 + *(int *)(v39 + 24), v64);
  uint64_t v40 = (char *)v56 + v63[12];
  swift_bridgeObjectRelease();
  uint64_t v41 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v42 = &v40[v41[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v43 = &v42[v5[13]];
  if (!v8(v43, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v43, v7);
  }
  uint64_t v44 = &v42[v5[14]];
  if (!v8(v44, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = (uint64_t *)&v42[v5[19]];
  unint64_t v46 = v45[1];
  if (v46 >> 60 != 15) {
    sub_255D80D04(*v45, v46);
  }
  unint64_t v47 = &v42[v5[20]];
  if (!v62(v47, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v13);
  }

  int v48 = &v42[v5[22]];
  if (!v8(v48, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v48, v7);
  }
  ((void (*)(char *, uint64_t))v60)(&v40[v41[6]], v61);
  ((void (*)(char *, uint64_t))v66)(&v40[v41[7]], v64);
  swift_release();
  uint64_t v49 = &v40[v41[9]];
  if (!v8(v49, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v7);
  }

  uint64_t v50 = v57 + v58[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v60)(v50, v61);
  }
  else {
    swift_release();
  }
  uint64_t v51 = v57 + v58[8];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    ((void (*)(uint64_t, uint64_t))v66)(v51, v64);
  }
  else {
    swift_release();
  }
  uint64_t v52 = v57 + v58[9];
  sub_255D98734(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v53 = sub_255EEE620();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DAD484(uint64_t a1)
{
  return sub_255DAD49C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_255DA60A8);
}

uint64_t sub_255DAD49C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for MedicalIDDataContentView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5);
}

unint64_t sub_255DAD520()
{
  unint64_t result = qword_269F35620;
  if (!qword_269F35620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35620);
  }
  return result;
}

void sub_255DAD574(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255DAD5C0()
{
  unint64_t result = qword_269F35628;
  if (!qword_269F35628)
  {
    sub_255DA7324(255, &qword_269F35138, MEMORY[0x263F1A830], MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35628);
  }
  return result;
}

uint64_t sub_255DAD65C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255DA6194(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_255DAD684(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_255D80D04(a1, a2);
  }
  return a1;
}

uint64_t sub_255DAD698(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DAD700(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_255D80890(a1, a2);
  }
  return a1;
}

unint64_t sub_255DAD714()
{
  unint64_t result = qword_269F35640;
  if (!qword_269F35640)
  {
    sub_255DA7324(255, &qword_269F35420, MEMORY[0x263F1B440], MEMORY[0x263F18868], MEMORY[0x263F18E28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35640);
  }
  return result;
}

uint64_t sub_255DAD7B0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DAD830()
{
  return sub_255DAD864(&qword_269F35650, MEMORY[0x263F1B7B8]);
}

uint64_t sub_255DAD864(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255DAD8AC(uint64_t a1)
{
}

uint64_t sub_255DAD8E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DAD950()
{
  return sub_255EEEA20();
}

uint64_t sub_255DAD978()
{
  return sub_255DAD864(&qword_269F35660, (void (*)(uint64_t))sub_255DAD9C0);
}

void sub_255DAD9C0()
{
  if (!qword_269F35668)
  {
    sub_255DADAEC();
    sub_255DA8C38(255);
    sub_255DAD574(255, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
    sub_255DA9D04(&qword_269F355B0, sub_255DA8C38, (void (*)(void))sub_255DA9C74, (void (*)(void))sub_255DA9E2C);
    sub_255DA9E60();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_255EEE940();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35668);
    }
  }
}

void sub_255DADAEC()
{
  if (!qword_269F35670)
  {
    sub_255DA8C38(255);
    sub_255DAD574(255, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
    sub_255DA9D04(&qword_269F355B0, sub_255DA8C38, (void (*)(void))sub_255DA9C74, (void (*)(void))sub_255DA9E2C);
    sub_255DA9E60();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35670);
    }
  }
}

uint64_t sub_255DADBF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DADC60(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_255D98680(0, a3, a4, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_255DADCE0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_255DADCEC(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return sub_255D879C4(result);
  }
  else {
    return swift_release();
  }
}

uint64_t sub_255DADCF8()
{
  return sub_255DA9EF4();
}

uint64_t (*sub_255DADD10())()
{
  return j__swift_endAccess;
}

uint64_t sub_255DADD68@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255DADF38();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DADDF8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DADEA8()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_255DADF38()
{
  unint64_t result = qword_269F35690;
  if (!qword_269F35690)
  {
    type metadata accessor for MedicalIDEditableEmergencyContactsModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35690);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDEditableEmergencyContactsModel()
{
  uint64_t result = qword_269F35698;
  if (!qword_269F35698) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DADFDC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DAE080(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DAE0E8()
{
  return sub_255DAE080(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void (*sub_255DAE104(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI39MedicalIDEditableEmergencyContactsModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_255DADF38();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255DADD10();
  return sub_255DAE1F0;
}

void sub_255DAE1F0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  void *v1 = v1[4];
  swift_getKeyPath();
  sub_255EEE2E0();
  swift_release();
  free(v1);
}

uint64_t MedicalIDEditableEmergencyContactsModel.suggestedEmergencyContacts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicalIDEditableEmergencyContactsModel.baseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEditableEmergencyContactsModel.__allocating_init(emergencyContacts:suggestedEmergencyContacts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  MedicalIDEditableEmergencyContactsModel.init(emergencyContacts:suggestedEmergencyContacts:)(a1, a2);
  return v4;
}

void *MedicalIDEditableEmergencyContactsModel.init(emergencyContacts:suggestedEmergencyContacts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0xD000000000000011;
  sub_255D7F1F0();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_255EF1E20;
  *(void *)(v6 + 32) = 0x496C61636964654DLL;
  *(void *)(v6 + 40) = 0xE900000000000044;
  unint64_t v7 = 0x8000000255EF9180;
  *(void *)(v6 + 48) = 0xD000000000000011;
  *(void *)(v6 + 56) = 0x8000000255EF9180;
  unint64_t v8 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v9 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v9)
  {
    uint64_t v5 = sub_255EEFD90();
    unint64_t v7 = v10;
  }
  v2[4] = v5;
  v2[5] = v7;
  sub_255EEE300();
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_255DAE400()
{
  swift_getKeyPath();
  sub_255DADF38();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_255EF0350();
    uint64_t v3 = 32;
    do
    {
      id v4 = sub_255DCB170();
      sub_255EF0320();
      sub_255EF0360();
      sub_255EF0370();
      sub_255EF0330();
      v3 += 128;
      --v1;
    }
    while (v1);
    uint64_t v2 = v6;
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t MedicalIDEditableEmergencyContactsModel.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI39MedicalIDEditableEmergencyContactsModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDEditableEmergencyContactsModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI39MedicalIDEditableEmergencyContactsModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255DAE684()
{
  return type metadata accessor for MedicalIDEditableEmergencyContactsModel();
}

uint64_t sub_255DAE68C()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for MedicalIDEditableEmergencyContactsModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MedicalIDEditableEmergencyContactsModel);
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.emergencyContacts.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.emergencyContacts.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.emergencyContacts.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.__allocating_init(emergencyContacts:suggestedEmergencyContacts:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of MedicalIDEditableEmergencyContactsModel.hkEmergencyContacts.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t sub_255DAE7FC()
{
  return sub_255DAE0E8();
}

uint64_t sub_255DAE814()
{
  swift_getKeyPath();
  sub_255DB2BF0();
  sub_255EEE2D0();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_255DAE884@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255DB2BF0();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_255DAE8FC()
{
  return swift_release();
}

uint64_t sub_255DAE99C()
{
  swift_getKeyPath();
  sub_255DB2BF0();
  sub_255EEE2D0();
  swift_release();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_255DAEA0C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255DB2BF0();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 17);
  return result;
}

uint64_t sub_255DAEA84()
{
  return swift_release();
}

uint64_t sub_255DAEB24()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI34MedicalIDEditableSettingsViewModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t MedicalIDSettingsViewModel.medicalIDData.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_255D8BAAC(v1, a1);
}

id MedicalIDSettingsViewModel.healthStore.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 20));
  return v1;
}

uint64_t type metadata accessor for MedicalIDSettingsViewModel(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F356C8);
}

uint64_t MedicalIDSettingsViewModel.profileFirstName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDSettingsViewModel.hasPairedWatch.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 28));
}

uint64_t MedicalIDSettingsViewModel.isEEDAvailable.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 32));
}

uint64_t MedicalIDSettingsViewModel.showWhenLockedEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 36));
}

uint64_t MedicalIDSettingsViewModel.shareDuringEmergencyCallEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 40));
}

uint64_t MedicalIDSettingsViewModel.baseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDSettingsViewModel.init(medicalIDData:healthStore:profileFirstName:hasPairedWatch:isEEDAvailable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  sub_255DB2CCC(0, (unint64_t *)&qword_269F37DA0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_255EF1E20;
  *(void *)(v14 + 32) = 0x496C61636964654DLL;
  *(void *)(v14 + 40) = 0xE900000000000044;
  *(void *)(v14 + 48) = 0x73676E6974746553;
  *(void *)(v14 + 56) = 0xE800000000000000;
  uint64_t v15 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v16 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v16)
  {
    uint64_t v17 = sub_255EEFD90();
    unint64_t v19 = v18;
  }
  else
  {
    unint64_t v19 = 0x8000000255EF9360;
    uint64_t v17 = 0xD000000000000011;
  }
  uint64_t v20 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v21 = (uint64_t *)(a7 + v20[11]);
  *uint64_t v21 = v17;
  v21[1] = v19;
  sub_255D8BAAC(a1, a7);
  *(void *)(a7 + v20[5]) = a2;
  uint64_t v22 = (void *)(a7 + v20[6]);
  void *v22 = a3;
  v22[1] = a4;
  uint64_t v23 = type metadata accessor for MedicalIDData();
  *(unsigned char *)(a7 + v20[9]) = (*(unsigned char *)(a1 + *(int *)(v23 + 68)) & 1) == 0;
  char v24 = *(unsigned char *)(a1 + *(int *)(v23 + 72));
  uint64_t result = sub_255D8BB84(a1);
  *(unsigned char *)(a7 + v20[10]) = v24;
  *(unsigned char *)(a7 + v20[7]) = a5 & 1;
  *(unsigned char *)(a7 + v20[8]) = a6 & 1;
  return result;
}

uint64_t MedicalIDSettingsViewModel.showWhenLockedDetail.getter()
{
  type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  return sub_255EEFDA0();
}

uint64_t MedicalIDSettingsViewModel.featureEnabledLocalizedString.getter()
{
  return sub_255DAF080();
}

uint64_t MedicalIDSettingsViewModel.featureDisabledLocalizedString.getter()
{
  return sub_255DAF080();
}

uint64_t sub_255DAF080()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  return sub_255EEFDA0();
}

uint64_t MedicalIDSettingsViewModel.showWhenLockedFooter.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MedicalIDSettingsViewModel(0);
  id v3 = *(void **)(v0 + *(int *)(v2 + 20));
  id v4 = objc_msgSend(v3, sel_profileIdentifier);
  id v5 = objc_msgSend(v4, sel_type);

  if (v5 == (id)3 && *(void *)(v1 + *(int *)(v2 + 24) + 8))
  {
    uint64_t v6 = sub_255EEFD20();
    MEMORY[0x270FA5388](v6 - 8);
    sub_255EEFD10();
    sub_255EEFD00();
    sub_255EEFCF0();
    sub_255EEFD00();
    uint64_t v7 = sub_255EEFD40();
    MEMORY[0x270FA5388](v7 - 8);
    sub_255EEFD30();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    unint64_t v8 = (void *)qword_269F352A8;
    uint64_t v9 = sub_255EEE200();
    MEMORY[0x270FA5388](v9 - 8);
    id v10 = v8;
    sub_255EEE1F0();
    return sub_255EEFDA0();
  }
  else
  {
    id v12 = objc_msgSend(v3, sel_profileIdentifier);
    id v13 = objc_msgSend(v12, sel_type);

    if (v13 == (id)3)
    {
      if (qword_269F34C50 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_255EEE3D0();
      __swift_project_value_buffer(v14, (uint64_t)qword_269F3FE80);
      uint64_t v15 = sub_255EEE3B0();
      os_log_type_t v16 = sub_255EF00C0();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        v23[0] = v18;
        *(_DWORD *)uint64_t v17 = 136315394;
        sub_255DB0024(0xD00000000000001ALL, 0x8000000255EF28A0, v23);
        sub_255EF0200();
        *(_WORD *)(v17 + 12) = 2080;
        sub_255DB0024(0xD000000000000014, 0x8000000255EF93D0, v23);
        sub_255EF0200();
        _os_log_impl(&dword_255D76000, v15, v16, "%s %s could not fetch first name", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v18, -1, -1);
        MEMORY[0x25A29C8A0](v17, -1, -1);
      }
    }
    uint64_t v19 = sub_255EEFD40();
    MEMORY[0x270FA5388](v19 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v20 = (void *)qword_269F352A8;
    uint64_t v21 = sub_255EEE200();
    MEMORY[0x270FA5388](v21 - 8);
    id v22 = v20;
    sub_255EEE1F0();
    return sub_255EEFDA0();
  }
}

Swift::Bool __swiftcall MedicalIDSettingsViewModel.isShowWhenLockedEditable(with:)(MIUIDisplayConfiguration *with)
{
  id v3 = *(void **)(v1 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 20));
  BOOL v4 = [(MIUIDisplayConfiguration *)with isEditingAvailable];
  if (v4)
  {
    id v5 = objc_msgSend(v3, sel_profileIdentifier);
    id v6 = objc_msgSend(v5, sel_type);

    LOBYTE(v4) = v6 != (id)3 || (id)[(MIUIDisplayConfiguration *)with accessPoint] == (id)8;
  }
  return v4;
}

BOOL static MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState.hash(into:)()
{
  return sub_255EF0550();
}

uint64_t MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState.hashValue.getter()
{
  return sub_255EF0580();
}

MedicalIDUI::MedicalIDSettingsViewModel::ShareDuringEmergencyCallViewState __swiftcall MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(MIUIDisplayConfiguration *with, Swift::Bool hasShareDuringEmergencyCallBeenEnabled)
{
  id v6 = v2;
  uint64_t v7 = type metadata accessor for MedicalIDSettingsViewModel(0);
  unint64_t v8 = *(void **)(v3 + *(int *)(v7 + 20));
  LODWORD(v9) = [(MIUIDisplayConfiguration *)with isEditingAvailable];
  if (v9
    && ((id v10 = objc_msgSend(v8, sel_profileIdentifier),
         id v11 = objc_msgSend(v10, sel_type),
         v10,
         v11 != (id)3)
     || (int64_t v9 = [(MIUIDisplayConfiguration *)with accessPoint], v9 == 8)))
  {
    if ((*(unsigned char *)(v3 + *(int *)(v7 + 32)) | hasShareDuringEmergencyCallBeenEnabled)) {
      char v12 = 0;
    }
    else {
      char v12 = 2;
    }
  }
  else if (*(unsigned char *)(v3 + *(int *)(v7 + 32)))
  {
    char v12 = 1;
  }
  else
  {
    char v12 = 2;
  }
  *id v6 = v12;
  return (char)v9;
}

Swift::Bool __swiftcall MedicalIDSettingsViewModel.showShareDuringEmergencyCall(with:hasShareDuringEmergencyCallBeenEnabled:)(MIUIDisplayConfiguration *with, Swift::Bool hasShareDuringEmergencyCallBeenEnabled)
{
  BOOL v4 = [(MIUIDisplayConfiguration *)with isShareDuringEmergencyCallVisible];
  if (v4)
  {
    MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(with, hasShareDuringEmergencyCallBeenEnabled);
    LOBYTE(v4) = v6 < 2u;
  }
  return v4;
}

uint64_t MedicalIDSettingsViewModel.shareDuringEmergencyCallDetail.getter()
{
  type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  return sub_255EEFDA0();
}

uint64_t MedicalIDSettingsViewModel.shareDuringEmergencyCallFooter.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MedicalIDSettingsViewModel(0);
  id v3 = *(void **)(v0 + *(int *)(v2 + 20));
  id v4 = objc_msgSend(v3, sel_profileIdentifier);
  id v5 = objc_msgSend(v4, sel_type);

  if (v5 == (id)3 && *(void *)(v1 + *(int *)(v2 + 24) + 8))
  {
    uint64_t v6 = sub_255EEFD20();
    MEMORY[0x270FA5388](v6 - 8);
    sub_255EEFD10();
    sub_255EEFD00();
    sub_255EEFCF0();
    sub_255EEFD00();
    uint64_t v7 = sub_255EEFD40();
    MEMORY[0x270FA5388](v7 - 8);
    sub_255EEFD30();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    unint64_t v8 = (void *)qword_269F352A8;
    uint64_t v9 = sub_255EEE200();
    MEMORY[0x270FA5388](v9 - 8);
    id v10 = v8;
    sub_255EEE1F0();
    return sub_255EEFDA0();
  }
  else
  {
    id v12 = objc_msgSend(v3, sel_profileIdentifier);
    id v13 = objc_msgSend(v12, sel_type);

    if (v13 == (id)3)
    {
      if (qword_269F34C50 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_255EEE3D0();
      __swift_project_value_buffer(v14, (uint64_t)qword_269F3FE80);
      uint64_t v15 = sub_255EEE3B0();
      os_log_type_t v16 = sub_255EF00C0();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        v23[0] = v18;
        *(_DWORD *)uint64_t v17 = 136315394;
        sub_255DB0024(0xD00000000000001ALL, 0x8000000255EF28A0, v23);
        sub_255EF0200();
        *(_WORD *)(v17 + 12) = 2080;
        sub_255DB0024(0xD00000000000001ELL, 0x8000000255EF94F0, v23);
        sub_255EF0200();
        _os_log_impl(&dword_255D76000, v15, v16, "%s %s could not fetch first name", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v18, -1, -1);
        MEMORY[0x25A29C8A0](v17, -1, -1);
      }
    }
    uint64_t v19 = sub_255EEFD40();
    MEMORY[0x270FA5388](v19 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v20 = (void *)qword_269F352A8;
    uint64_t v21 = sub_255EEE200();
    MEMORY[0x270FA5388](v21 - 8);
    id v22 = v20;
    sub_255EEE1F0();
    return sub_255EEFDA0();
  }
}

uint64_t sub_255DB0024(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_255DB00F8(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_255DB2C70((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_255DB2C70((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_255DB00F8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_255EF0210();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_255DB02B4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_255EF0310();
  if (!v8)
  {
    sub_255EF03C0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_255EF0440();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_255DB02B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_255DB034C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_255DB0538(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_255DB0538(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_255DB034C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_255DB04C4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_255EF02E0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_255EF03C0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_255EEFE20();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_255EF0440();
    __break(1u);
LABEL_14:
    uint64_t result = sub_255EF03C0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_255DB04C4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_255DB2CCC(0, &qword_269F356E0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_255DB0538(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_255DB2CCC(0, &qword_269F356E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

unint64_t sub_255DB0698()
{
  unint64_t result = qword_269F356A8;
  if (!qword_269F356A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F356A8);
  }
  return result;
}

uint64_t sub_255DB06EC()
{
  return type metadata accessor for MedicalIDEditableSettingsViewModel(0);
}

uint64_t type metadata accessor for MedicalIDEditableSettingsViewModel(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F356B8);
}

uint64_t sub_255DB0714(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DB074C()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MedicalIDSettingsViewModel(void *a1, char *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *unint64_t v4 = *(void *)a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    char v65 = (void *)*((void *)a2 + 12);
    uint64_t v66 = (void *)*((void *)a2 + 13);
    a1[12] = v65;
    a1[13] = v66;
    uint64_t v69 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v69[13];
    __dst = (char *)v4 + v12;
    id v13 = &a2[v12];
    uint64_t v14 = sub_255EEE100();
    uint64_t v68 = *(void *)(v14 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v65;
    id v17 = v66;
    if (v15(v13, 1, v14))
    {
      sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
      memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = v69[14];
    uint64_t v21 = (char *)v4 + v20;
    id v22 = &a2[v20];
    if (v15(&a2[v20], 1, v14))
    {
      sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v21, v22, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v21, 0, 1, v14);
    }
    uint64_t v24 = v69[15];
    unint64_t v25 = (void *)((char *)v4 + v24);
    unint64_t v26 = &a2[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *unint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v69[16];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *uint64_t v29 = *(void *)v30;
    v29[1] = v31;
    *((unsigned char *)v4 + v69[17]) = a2[v69[17]];
    *((unsigned char *)v4 + v69[18]) = a2[v69[18]];
    uint64_t v32 = v69[19];
    uint64_t v33 = (char *)v4 + v32;
    unint64_t v34 = (uint64_t *)&a2[v32];
    unint64_t v35 = *(void *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_255D80890(*v34, v35);
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = v69[20];
    unint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = &a2[v37];
    uint64_t v40 = sub_255EEDF60();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v69[21];
    uint64_t v44 = *(void **)&a2[v43];
    *(void *)((char *)v4 + v43) = v44;
    uint64_t v45 = v69[22];
    unint64_t v46 = (char *)v4 + v45;
    unint64_t v47 = &a2[v45];
    id v48 = v44;
    if (v15(v47, 1, v14))
    {
      sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v46, v47, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v46, 0, 1, v14);
    }
    uint64_t v50 = a3[5];
    uint64_t v51 = a3[6];
    uint64_t v52 = *(void **)&a2[v50];
    *(void *)((char *)v4 + v50) = v52;
    uint64_t v53 = (void *)((char *)v4 + v51);
    uint64_t v54 = &a2[v51];
    uint64_t v55 = *((void *)v54 + 1);
    void *v53 = *(void *)v54;
    v53[1] = v55;
    uint64_t v56 = a3[8];
    *((unsigned char *)v4 + a3[7]) = a2[a3[7]];
    *((unsigned char *)v4 + v56) = a2[v56];
    uint64_t v57 = a3[10];
    *((unsigned char *)v4 + a3[9]) = a2[a3[9]];
    *((unsigned char *)v4 + v57) = a2[v57];
    uint64_t v58 = a3[11];
    uint64_t v59 = (void *)((char *)v4 + v58);
    uint64_t v60 = &a2[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *uint64_t v59 = *(void *)v60;
    v59[1] = v61;
    id v62 = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

void sub_255DB0D78(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EF01E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for MedicalIDSettingsViewModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MedicalIDSettingsViewModel(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  uint64_t v63 = (void *)*((void *)a2 + 12);
  uint64_t v64 = (void *)*((void *)a2 + 13);
  a1[12] = v63;
  a1[13] = v64;
  uint64_t v67 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v67[13];
  __dst = (char *)a1 + v11;
  uint64_t v12 = &a2[v11];
  uint64_t v13 = sub_255EEE100();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v63;
  id v16 = v64;
  if (v14(v12, 1, v13))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = v67[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v14(&a2[v18], 1, v13))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v67[15];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *uint64_t v23 = *(void *)v24;
  v23[1] = v25;
  uint64_t v26 = v67[16];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *uint64_t v27 = *(void *)v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v67[17]) = a2[v67[17]];
  *((unsigned char *)a1 + v67[18]) = a2[v67[18]];
  uint64_t v30 = v67[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (uint64_t *)&a2[v30];
  unint64_t v33 = *(void *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    sub_255D80890(*v32, v33);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v35 = v67[20];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_255EEDF60();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v41 = v67[21];
  uint64_t v42 = *(void **)&a2[v41];
  *(void *)((char *)a1 + v41) = v42;
  uint64_t v43 = v67[22];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = &a2[v43];
  id v46 = v42;
  if (v14(v45, 1, v13))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v44, v45, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v44, 0, 1, v13);
  }
  uint64_t v48 = a3[5];
  uint64_t v49 = a3[6];
  uint64_t v50 = *(void **)&a2[v48];
  *(void *)((char *)a1 + v48) = v50;
  uint64_t v51 = (void *)((char *)a1 + v49);
  uint64_t v52 = &a2[v49];
  uint64_t v53 = *((void *)v52 + 1);
  *uint64_t v51 = *(void *)v52;
  v51[1] = v53;
  uint64_t v54 = a3[8];
  *((unsigned char *)a1 + a3[7]) = a2[a3[7]];
  *((unsigned char *)a1 + v54) = a2[v54];
  uint64_t v55 = a3[10];
  *((unsigned char *)a1 + a3[9]) = a2[a3[9]];
  *((unsigned char *)a1 + v55) = a2[v55];
  uint64_t v56 = a3[11];
  uint64_t v57 = (void *)((char *)a1 + v56);
  uint64_t v58 = &a2[v56];
  uint64_t v59 = *((void *)v58 + 1);
  void *v57 = *(void *)v58;
  v57[1] = v59;
  id v60 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for MedicalIDSettingsViewModel(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)a2[12];
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)a2[13];
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v73 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((unsigned char *)a2 + v11[17]);
  a1[v11[18]] = *((unsigned char *)a2 + v11[18]);
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v72 = v17;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  id v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = v72;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = v72;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)((char *)a2 + v51);
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = (char *)a2 + v55;
  int v58 = v49(&a1[v55], 1, v73);
  int v59 = v49(v57, 1, v73);
  if (!v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v73);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v73);
    goto LABEL_31;
  }
  if (v59)
  {
LABEL_31:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v73);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v73);
LABEL_32:
  uint64_t v61 = a3[5];
  id v62 = *(void **)((char *)a2 + v61);
  uint64_t v63 = *(void **)&a1[v61];
  *(void *)&a1[v61] = v62;
  id v64 = v62;

  uint64_t v65 = a3[6];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = (void *)((char *)a2 + v65);
  *(void *)uint64_t v66 = *v67;
  *((void *)v66 + 1) = v67[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = *((unsigned char *)a2 + a3[7]);
  a1[a3[8]] = *((unsigned char *)a2 + a3[8]);
  a1[a3[9]] = *((unsigned char *)a2 + a3[9]);
  a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
  uint64_t v68 = a3[11];
  uint64_t v69 = &a1[v68];
  char v70 = (void *)((char *)a2 + v68);
  *(void *)uint64_t v69 = *v70;
  *((void *)v69 + 1) = v70[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MedicalIDSettingsViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = v6[13];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[14];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  uint64_t v32 = v12;
  uint64_t v33 = v11;
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(unsigned char *)(a1 + v6[17]) = *(unsigned char *)(a2 + v6[17]);
  *(unsigned char *)(a1 + v6[18]) = *(unsigned char *)(a2 + v6[18]);
  *(_OWORD *)(a1 + v6[19]) = *(_OWORD *)(a2 + v6[19]);
  uint64_t v18 = v6[20];
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_255EEDF60();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(void *)(a1 + v6[21]) = *(void *)(a2 + v6[21]);
  uint64_t v24 = v6[22];
  int v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  if (v32((const void *)(a2 + v24), 1, v10))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v25, v26, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v25, 0, 1, v10);
  }
  uint64_t v28 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  uint64_t v29 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v30 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

char *assignWithTake for MedicalIDSettingsViewModel(char *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  uint64_t v24 = &a1[v23];
  int v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v79 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  unint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
  a1[v13[18]] = *((unsigned char *)a2 + v13[18]);
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = (char *)a2 + v39;
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v78 = v19;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  unint64_t v43 = *((void *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_16;
  }
  uint64_t v44 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v43;
  sub_255D80D04(v44, v42);
LABEL_18:
  uint64_t v45 = v13[20];
  id v46 = &a1[v45];
  int v47 = (char *)a2 + v45;
  uint64_t v48 = sub_255EEDF60();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    uint64_t v53 = v78;
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v53 = v78;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v46, v47, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  uint64_t v55 = v13[21];
  uint64_t v56 = *(void **)&a1[v55];
  *(void *)&a1[v55] = *(void *)((char *)a2 + v55);

  uint64_t v57 = v13[22];
  int v58 = &a1[v57];
  int v59 = (char *)a2 + v57;
  int v60 = v53(&a1[v57], 1, v79);
  int v61 = v53(v59, 1, v79);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v58, v59, v79);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v58, v79);
    goto LABEL_29;
  }
  if (v61)
  {
LABEL_29:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v58, v59, v79);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v58, 0, 1, v79);
LABEL_30:
  uint64_t v63 = a3[5];
  id v64 = *(void **)&a1[v63];
  *(void *)&a1[v63] = *(void *)((char *)a2 + v63);

  uint64_t v65 = a3[6];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = (void *)((char *)a2 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  *(void *)uint64_t v66 = v69;
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = a3[8];
  a1[a3[7]] = *((unsigned char *)a2 + a3[7]);
  a1[v70] = *((unsigned char *)a2 + v70);
  uint64_t v71 = a3[10];
  a1[a3[9]] = *((unsigned char *)a2 + a3[9]);
  a1[v71] = *((unsigned char *)a2 + v71);
  uint64_t v72 = a3[11];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = (void *)((char *)a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *(void *)uint64_t v73 = v76;
  *((void *)v73 + 1) = v75;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDSettingsViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DB2898);
}

uint64_t sub_255DB2898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDData();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDSettingsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DB296C);
}

uint64_t sub_255DB296C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDData();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_255DB2A28()
{
  uint64_t result = type metadata accessor for MedicalIDData();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255DB2BB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState()
{
  return &type metadata for MedicalIDSettingsViewModel.ShareDuringEmergencyCallViewState;
}

unint64_t sub_255DB2BF0()
{
  unint64_t result = qword_269F356D8;
  if (!qword_269F356D8)
  {
    type metadata accessor for MedicalIDEditableSettingsViewModel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F356D8);
  }
  return result;
}

void sub_255DB2C48()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 17) = *(unsigned char *)(v0 + 24);
}

void sub_255DB2C60()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_255DB2C70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_255DB2CCC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_255EF0490();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_255DB2D18(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t, void *))
{
  v6[0] = a2;
  v6[1] = a3;
  char v7 = a4 & 1;
  return a5(a1, v6);
}

void sub_255DB2D58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_255EEE8D0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_255DBB97C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a3, a2, v12);
  sub_255DBC0B4();
  uint64_t v14 = (uint64_t *)(a3 + *(int *)(v13 + 36));
  uint64_t *v14 = KeyPath;
  v14[1] = (uint64_t)sub_255D7B670;
  void v14[2] = v11;
}

double sub_255DB2EF0@<D0>(_OWORD *a1@<X8>)
{
  sub_255D7B264();
  sub_255EEEC30();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_255DB2F40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_255DBC698;
    *(void *)(v4 + 24) = v3;
  }
  sub_255D85808(v1);
  sub_255D7B264();
  return sub_255EEEC40();
}

uint64_t sub_255DB3004()
{
  return 1;
}

uint64_t sub_255DB300C()
{
  return sub_255EF0580();
}

uint64_t sub_255DB3050()
{
  return sub_255EF0550();
}

uint64_t sub_255DB3078()
{
  return sub_255EF0580();
}

uint64_t sub_255DB30B8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v76 = a3;
  uint64_t v77 = (uint64_t *)a1;
  id v74 = a2;
  uint64_t v5 = (int *)type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v6 = (uint64_t *)(a4 + v5[5]);
  long long v78 = xmmword_255EF2620;
  sub_255DB6E08();
  sub_255EEF810();
  uint64_t v7 = v83;
  *(_OWORD *)uint64_t v6 = v82;
  uint64_t v73 = v6;
  void v6[2] = v7;
  uint64_t v8 = a4 + v5[6];
  uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  sub_255DBC910(0, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
  long long v78 = 0uLL;
  sub_255EEF810();
  uint64_t v10 = v83;
  *(_OWORD *)uint64_t v8 = v82;
  *(void *)(v8 + 16) = v10;
  uint64_t v11 = a4 + v5[7];
  sub_255D80868(0);
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))((char *)&v68 - v14, 1, 1, v15);
  uint64_t v70 = v13;
  MEMORY[0x270FA5388](v16);
  sub_255DBD188((uint64_t)&v68 - v14, (uint64_t)&v68 - v14, (uint64_t (*)(void))sub_255D80868);
  sub_255EEF810();
  sub_255DBD378((uint64_t)&v68 - v14, (uint64_t (*)(void))sub_255D80868);
  uint64_t v17 = a4 + v5[8];
  long long v78 = 0uLL;
  sub_255EEF810();
  uint64_t v18 = v83;
  *(_OWORD *)uint64_t v17 = v82;
  *(void *)(v17 + 16) = v18;
  int v19 = (_OWORD *)(a4 + v5[10]);
  sub_255DBC910(0, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, v9);
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  uint64_t v81 = 0;
  sub_255EEF810();
  long long v20 = v83;
  *int v19 = v82;
  v19[1] = v20;
  long long v21 = v85;
  v19[2] = v84;
  void v19[3] = v21;
  uint64_t v22 = (uint64_t *)(a4 + v5[11]);
  uint64_t *v22 = swift_getKeyPath();
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = (uint64_t *)(a4 + v5[12]);
  *uint64_t v24 = swift_getKeyPath();
  sub_255DB6E68(0, &qword_269F35320, MEMORY[0x270FA97F0], v23);
  swift_storeEnumTagMultiPayload();
  int v25 = (uint64_t *)(a4 + v5[13]);
  *int v25 = swift_getKeyPath();
  sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], v23);
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = a4 + v5[14];
  type metadata accessor for MedicalIDDataManager();
  sub_255DBD258(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  *(void *)uint64_t v26 = sub_255EEE650();
  *(unsigned char *)(v26 + 8) = v27 & 1;
  uint64_t v28 = (uint64_t *)(a4 + v5[15]);
  sub_255DB6ED8();
  sub_255DBD258((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  *uint64_t v28 = sub_255EEE9F0();
  v28[1] = v29;
  uint64_t v30 = 0x6C616E6F73726550;
  sub_255DBC910(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_255EF1E20;
  *(void *)(v31 + 32) = 0x496C61636964654DLL;
  *(void *)(v31 + 40) = 0xE900000000000044;
  unint64_t v32 = 0xEC0000006F666E49;
  strcpy((char *)(v31 + 48), "PersonalInfo");
  *(unsigned char *)(v31 + 61) = 0;
  *(_WORD *)(v31 + 62) = -5120;
  uint64_t v33 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v34 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v75 = v11;
  uint64_t v71 = (void *)v8;
  uint64_t v69 = (void *)v17;
  if (v34)
  {
    uint64_t v30 = sub_255EEFD90();
    unint64_t v32 = v35;
  }
  unint64_t v36 = (uint64_t *)(a4 + v5[16]);
  *unint64_t v36 = v30;
  v36[1] = v32;
  uint64_t v37 = a4 + v5[17];
  sub_255DB6F18();
  sub_255EEE590();
  uint64_t v38 = *((void *)&v82 + 1);
  char v39 = v83;
  *(unsigned char *)uint64_t v37 = v82;
  *(void *)(v37 + 8) = v38;
  *(unsigned char *)(v37 + 16) = v39;
  uint64_t v40 = v77;
  sub_255DBD188((uint64_t)v77, a4, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  id v41 = v74;
  *(void *)(a4 + v5[18]) = v74;
  *(void *)(a4 + v5[19]) = v76;
  uint64_t v72 = type metadata accessor for MedicalIDData();
  unint64_t v42 = (uint64_t *)((char *)v40 + *(int *)(v72 + 76));
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  uint64_t v45 = v73;
  uint64_t v47 = *v73;
  unint64_t v46 = v73[1];
  *uint64_t v73 = v43;
  v45[1] = v44;
  _OWORD v45[2] = 0;
  id v48 = v41;
  swift_retain();
  sub_255DAD700(v43, v44);
  sub_255DAD684(v47, v46);
  swift_release();
  unint64_t v49 = v40[1];
  id v74 = v48;
  if (v49)
  {
    uint64_t v50 = *v40;
    uint64_t v51 = HIBYTE(v49) & 0xF;
    if ((v49 & 0x2000000000000000) == 0) {
      uint64_t v51 = *v40 & 0xFFFFFFFFFFFFLL;
    }
    if (v51)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v50 = 0;
      unint64_t v49 = 0;
    }
  }
  else
  {
    uint64_t v50 = 0;
  }
  int v52 = v71;
  uint64_t v53 = v70;
  uint64_t v54 = v69;
  swift_bridgeObjectRelease();
  uint64_t v55 = swift_release();
  void *v52 = v50;
  v52[1] = v49;
  v52[2] = 0;
  MEMORY[0x270FA5388](v55);
  uint64_t v56 = (uint64_t)v77;
  MedicalIDPersonalInfoViewModel.dateOfBirth()((uint64_t)&v68 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B5D0];
  uint64_t v58 = v75;
  sub_255DBC8B4(v75, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, v57);
  *(void *)(v58 + *(int *)(v59 + 28)) = 0;
  sub_255DBD1F0((uint64_t)&v68 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0), v58, (uint64_t (*)(void))sub_255D80868);
  uint64_t v60 = v72;
  int v61 = (void *)(v56 + *(int *)(v72 + 60));
  uint64_t v62 = v61[1];
  *uint64_t v54 = *v61;
  v54[1] = v62;
  v54[2] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v63 = *(void **)(v56 + *(int *)(v60 + 84));
  if (!v63)
  {

    swift_release();
    goto LABEL_14;
  }
  unint64_t v64 = (unint64_t)objc_msgSend(v63, sel_integerValue);

  swift_release();
  if (v64 >= 3)
  {
LABEL_14:
    LOBYTE(v65) = 0;
    goto LABEL_15;
  }
  unsigned int v65 = 0x30102u >> (8 * v64);
LABEL_15:
  uint64_t result = sub_255DBD378(v56, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  uint64_t v67 = a4 + v5[9];
  *(unsigned char *)uint64_t v67 = v65;
  *(void *)(v67 + 8) = 0;
  return result;
}

uint64_t sub_255DB389C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v60 = a1;
  sub_255DBB97C();
  uint64_t v59 = v3;
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v58 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v46 - v6;
  uint64_t v8 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DBBF8C(0, &qword_269F357D0, (uint64_t (*)(uint64_t))sub_255DBC00C, sub_255DBC208, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v46 - v14);
  if (qword_269F34A30 != -1) {
    swift_once();
  }
  uint64_t v16 = unk_269F356F0;
  uint64_t v50 = (char *)qword_269F356E8;
  uint64_t v55 = type metadata accessor for MedicalIDEditPersonalInfoModalView;
  sub_255DBD188(v2, (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v53 = ((v17 + 16) & ~v17) + v10;
  uint64_t v18 = (v17 + 16) & ~v17;
  uint64_t v54 = v18;
  uint64_t v52 = v17 | 7;
  uint64_t v19 = swift_allocObject();
  uint64_t v51 = type metadata accessor for MedicalIDEditPersonalInfoModalView;
  sub_255DBD1F0((uint64_t)v11, v19 + v18, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  long long v20 = (long long *)(v2 + *(int *)(v8 + 40));
  long long v21 = v20[1];
  long long v62 = *v20;
  long long v63 = v21;
  long long v22 = v20[3];
  long long v64 = v20[2];
  long long v65 = v22;
  sub_255DBC30C(0, (unint64_t *)&qword_269F35810, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel);
  swift_bridgeObjectRetain();
  sub_255EEF840();
  long long v49 = v66;
  long long v48 = v67;
  long long v47 = v68;
  long long v46 = v69;
  uint64_t v23 = v70;
  *uint64_t v15 = swift_getKeyPath();
  sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  uint64_t v24 = swift_storeEnumTagMultiPayload();
  int v25 = (uint64_t *)((char *)v15 + v13[9]);
  *int v25 = v50;
  v25[1] = v16;
  uint64_t v26 = (uint64_t *)((char *)v15 + v13[10]);
  *uint64_t v26 = &unk_269F35808;
  v26[1] = v19;
  char v27 = (char *)v15 + v13[11];
  long long v28 = v48;
  *(_OWORD *)char v27 = v49;
  *((_OWORD *)v27 + 1) = v28;
  long long v29 = v46;
  *((_OWORD *)v27 + 2) = v47;
  *((_OWORD *)v27 + 3) = v29;
  *((void *)v27 + 8) = v23;
  uint64_t v30 = v13[12];
  uint64_t v50 = v11;
  uint64_t v31 = v2;
  unint64_t v32 = (void (**)(uint64_t@<X0>, uint64_t@<X8>))((char *)v15 + v30);
  MEMORY[0x270FA5388](v24);
  *((void *)&v46 - 2) = v31;
  sub_255DB6E68(0, &qword_269F35748, (uint64_t (*)(uint64_t))sub_255DBBA30, MEMORY[0x263F1BAC8]);
  sub_255DBC7C8(&qword_269F357C8, &qword_269F35748, (uint64_t (*)(uint64_t))sub_255DBBA30);
  sub_255EEF2D0();
  uint64_t v33 = v57;
  unint64_t v35 = v58;
  uint64_t v34 = v59;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v58, v7, v59);
  unint64_t v36 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v37 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v37 + v36, v35, v34);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v34);
  void *v32 = sub_255DBC398;
  v32[1] = (void (*)(uint64_t@<X0>, uint64_t@<X8>))v37;
  uint64_t v38 = (char *)v15 + v13[13];
  char v61 = 0;
  sub_255EEF810();
  uint64_t v39 = *((void *)&v62 + 1);
  *uint64_t v38 = v62;
  *((void *)v38 + 1) = v39;
  uint64_t v40 = (uint64_t)v50;
  sub_255DBD188(v31, (uint64_t)v50, (uint64_t (*)(void))v55);
  uint64_t v41 = swift_allocObject();
  sub_255DBD1F0(v40, v41 + v54, (uint64_t (*)(void))v51);
  uint64_t v42 = v60;
  sub_255DBD2A8((uint64_t)v15, v60, &qword_269F357D0, (uint64_t (*)(uint64_t))sub_255DBC00C, sub_255DBC208, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
  sub_255DBC47C();
  unint64_t v44 = (void (**)())(v42 + *(int *)(v43 + 36));
  char *v44 = sub_255DBC41C;
  v44[1] = (void (*)())v41;
  v44[2] = 0;
  v44[3] = 0;
  return sub_255DBD31C((uint64_t)v15, &qword_269F357D0, (uint64_t (*)(uint64_t))sub_255DBC00C, sub_255DBC208, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
}

uint64_t sub_255DB3F40()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255DB3FD0();
}

uint64_t sub_255DB3FD0()
{
  v1[24] = v0;
  uint64_t v2 = sub_255EEE730();
  v1[25] = v2;
  v1[26] = *(void *)(v2 - 8);
  v1[27] = swift_task_alloc();
  sub_255DBBF8C(0, &qword_269F35208, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_255D8952C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
  v1[28] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[29] = swift_task_alloc();
  v1[30] = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  v1[31] = swift_task_alloc();
  v1[32] = sub_255EEFF70();
  v1[33] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v1[34] = v4;
  v1[35] = v3;
  return MEMORY[0x270FA2498](sub_255DB4194, v4, v3);
}

uint64_t sub_255DB4194()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[24];
  char v3 = *(unsigned char *)(v2 + *(int *)(v0[30] + 56) + 8);
  uint64_t v4 = swift_retain();
  v0[36] = sub_255DAA2A0(v4, v3);
  swift_release();
  sub_255DBD188(v2, v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  v0[37] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v0[38] = v6;
  v0[39] = v5;
  return MEMORY[0x270FA2498](sub_255DB4284, v6, v5);
}

uint64_t sub_255DB4284()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  char v3 = *(int **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 232);
  char v27 = (void *)v5;
  swift_getKeyPath();
  *(void *)(v0 + 176) = v1;
  sub_255DBD258(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v6 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255DBD2A8(v6, v4, &qword_269F35208, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_255D8952C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
  LoadState<>.loadedValue.getter(v5);
  sub_255DBD31C(v4, &qword_269F35208, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDData, sub_255D8952C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LoadState);
  uint64_t v7 = v2 + v3[5];
  uint64_t v8 = *(void *)(v7 + 16);
  *(_OWORD *)(v0 + 88) = *(_OWORD *)v7;
  *(void *)(v0 + 104) = v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B5D0];
  sub_255DB6E68(0, &qword_269F35860, (uint64_t (*)(uint64_t))sub_255DB6E08, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v10 = *(void *)(v0 + 112);
  unint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = v2 + v3[6];
  uint64_t v13 = *(void *)(v12 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v12;
  *(void *)(v0 + 32) = v13;
  sub_255DBC30C(0, &qword_269F35820, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D310]);
  sub_255EEF820();
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v26 = *(void *)(v0 + 160);
  sub_255D80868(0);
  uint64_t v15 = swift_task_alloc();
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, v9);
  sub_255EEF820();
  uint64_t v16 = v2 + v3[8];
  uint64_t v17 = *(void *)(v16 + 16);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)v16;
  *(void *)(v0 + 80) = v17;
  sub_255EEF820();
  uint64_t v18 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 152);
  long long v20 = (char *)(v2 + v3[9]);
  char v21 = *v20;
  uint64_t v22 = *((void *)v20 + 1);
  *(unsigned char *)(v0 + 128) = v21;
  *(void *)(v0 + 136) = v22;
  sub_255DBC910(0, &qword_269F35850, (uint64_t)&type metadata for OrganDonationStatus, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  unsigned __int8 v28 = *(unsigned char *)(v0 + 336);
  MedicalIDPersonalInfoViewModel.update(medicalIDData:withPictureData:personName:birthDate:primaryLanguageCode:organDonationStatus:)(v27, v10, v11, v26, v14, v15, v18, v19, &v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_255DAD684(v10, v11);
  sub_255DBD378(v15, (uint64_t (*)(void))sub_255D80868);
  swift_task_dealloc();
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_255DB4690;
  uint64_t v24 = *(void *)(v0 + 232);
  return sub_255E8F53C(v24, v0 + 184);
}

uint64_t sub_255DB4690()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 304);
  uint64_t v4 = *(void *)(v2 + 312);
  if (v0) {
    uint64_t v5 = sub_255DB4930;
  }
  else {
    uint64_t v5 = sub_255DB47A0;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255DB47A0()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[29];
  swift_release();
  sub_255DBD378(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  sub_255DBD378(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  swift_release();
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[35];
  return MEMORY[0x270FA2498](sub_255DB4854, v3, v4);
}

uint64_t sub_255DB4854()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  swift_release();
  sub_255DAA4A8(v1);
  sub_255EEE720();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_255DB4930()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[29];
  swift_release();
  sub_255DBD378(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  v0[41] = v0[23];
  sub_255DBD378(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  swift_release();
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[35];
  return MEMORY[0x270FA2498](sub_255DB49EC, v3, v4);
}

uint64_t sub_255DB49EC()
{
  uint64_t v1 = *(void *)(v0 + 328);
  swift_release();
  sub_255DBD3D8();
  swift_allocError();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_255DB4AB4@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  sub_255DB6E68(0, &qword_269F357B8, (uint64_t (*)(uint64_t))sub_255DBBF0C, MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v62 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v64 = (uint64_t)&v55 - v6;
  sub_255DBBC44();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v60 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v57 = (char *)&v55 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v55 - v12;
  sub_255DBBF2C(0, &qword_269F35760, (void (*)(uint64_t))sub_255DBBBB0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v55 - v17;
  sub_255DBBAE8();
  uint64_t v20 = v19 - 8;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v63 = (uint64_t)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  int v25 = (char *)&v55 - v24;
  MEMORY[0x270FA5388](v23);
  char v27 = (char *)&v55 - v26;
  long long v66 = a1;
  sub_255DBBBB0();
  sub_255DBC6E0(&qword_269F35830, (void (*)(uint64_t))sub_255DBBBB0, (void (*)(void))sub_255DBC76C, (void (*)(void))sub_255D855C4);
  sub_255EEFA50();
  uint64_t v67 = sub_255EEF700();
  swift_retain();
  uint64_t v28 = sub_255EEF960();
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v18, v15);
  swift_release();
  *(void *)&v25[*(int *)(v20 + 44)] = v28;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v29 = (uint64_t)v27;
  sub_255DBD1F0((uint64_t)v25, (uint64_t)v27, (uint64_t (*)(void))sub_255DBBAE8);
  long long v65 = a1;
  sub_255DB6E68(0, &qword_269F35788, (uint64_t (*)(uint64_t))sub_255DBBCD8, MEMORY[0x263F1BAC8]);
  sub_255DBC7C8(&qword_269F35840, &qword_269F35788, (uint64_t (*)(uint64_t))sub_255DBBCD8);
  uint64_t v30 = v57;
  sub_255EEFA50();
  uint64_t v31 = v58;
  unint64_t v32 = v13;
  uint64_t v33 = v59;
  (*(void (**)(char *, char *))(v58 + 32))(v13, v30);
  id v34 = objc_msgSend(*(id *)&a1[*(int *)(type metadata accessor for MedicalIDEditPersonalInfoModalView() + 72)], sel_profileIdentifier);
  id v35 = objc_msgSend(v34, sel_type);

  if (v35 == (id)3)
  {
    sub_255DBBF0C(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v64, 1, 1, v37);
  }
  else
  {
    MEMORY[0x270FA5388](v36);
    *(&v55 - 2) = a1;
    type metadata accessor for EditOrganDonationCellView();
    sub_255DBD258(&qword_269F35848, (void (*)(uint64_t))type metadata accessor for EditOrganDonationCellView);
    uint64_t v38 = v64;
    sub_255EEFA50();
    sub_255DBBF0C(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  uint64_t v40 = v29;
  uint64_t v56 = v29;
  uint64_t v41 = v63;
  sub_255DBD188(v40, v63, (uint64_t (*)(void))sub_255DBBAE8);
  uint64_t v42 = v31;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  unint64_t v44 = v60;
  uint64_t v55 = v32;
  uint64_t v45 = v33;
  v43(v60, v32, v33);
  uint64_t v46 = v64;
  uint64_t v47 = v62;
  sub_255DBC834(v64, v62, &qword_269F357B8, (uint64_t (*)(uint64_t))sub_255DBBF0C);
  uint64_t v48 = v41;
  uint64_t v49 = v61;
  sub_255DBD188(v48, v61, (uint64_t (*)(void))sub_255DBBAE8);
  sub_255DBBA30();
  uint64_t v51 = v50;
  v43((char *)(v49 + *(int *)(v50 + 48)), v44, v45);
  sub_255DBC834(v47, v49 + *(int *)(v51 + 64), &qword_269F357B8, (uint64_t (*)(uint64_t))sub_255DBBF0C);
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_255DBC8B4(v46, &qword_269F357B8, (uint64_t (*)(uint64_t))sub_255DBBF0C, MEMORY[0x263F8D8F0]);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v42 + 8);
  v53(v55, v45);
  sub_255DBD378(v56, (uint64_t (*)(void))sub_255DBBAE8);
  sub_255DBC8B4(v47, &qword_269F357B8, (uint64_t (*)(uint64_t))sub_255DBBF0C, v52);
  v53(v44, v45);
  return sub_255DBD378(v63, (uint64_t (*)(void))sub_255DBBAE8);
}

void sub_255DB5210(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  sub_255DBBBB0();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v7 = (long long *)(a1 + *(int *)(v6 + 20));
  uint64_t v8 = *((void *)v7 + 2);
  long long v28 = *v7;
  uint64_t v29 = v8;
  sub_255DB6E68(0, &qword_269F35860, (uint64_t (*)(uint64_t))sub_255DB6E08, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v9 = v22;
  unint64_t v10 = v23;
  uint64_t v11 = v24;
  unint64_t v12 = v25;
  sub_255DB6E68(0, &qword_269F35868, (uint64_t (*)(uint64_t))sub_255DB6E08, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390](&v28);
  long long v13 = v28;
  type metadata accessor for EditPhotoCellView.ViewModel();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 64) = xmmword_255EF2620;
  *(void *)(v14 + 80) = 0;
  *(unsigned char *)(v14 + 88) = 1;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(void *)(v14 + 144) = 0;
  sub_255EEE300();
  sub_255DAD684(*(void *)(v14 + 64), *(void *)(v14 + 72));
  *(_OWORD *)(v14 + 64) = v13;
  *(void *)(v14 + 16) = sub_255E1701C;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = sub_255E174EC;
  *(void *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = sub_255E1757C;
  *(void *)(v14 + 56) = 0;
  uint64_t v22 = v14;
  unint64_t v23 = 0;
  uint64_t v24 = v9;
  unint64_t v25 = v10;
  uint64_t v26 = v11;
  unint64_t v27 = v12;
  sub_255DBC910(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_255EF1E20;
  uint64_t v16 = (void *)(a1 + *(int *)(v6 + 64));
  uint64_t v17 = v16[1];
  *(void *)(v15 + 32) = *v16;
  *(void *)(v15 + 40) = v17;
  *(void *)(v15 + 48) = 0x6369506F746F6850;
  *(void *)(v15 + 56) = 0xEB0000000072656BLL;
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v19 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v19)
  {
    sub_255EEFD90();

    sub_255DBC76C();
    sub_255EEF580();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_255DAD684(v11, v12);
    sub_255DBD1F0((uint64_t)v5, v21, (uint64_t (*)(void))sub_255DBBBB0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255DB5534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v3 = type metadata accessor for EditPrimaryLanguageCellView();
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v73 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v72 = (uint64_t)&v60 - v6;
  uint64_t v7 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v8 = (int *)(v7 - 8);
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v67 = *(void *)(v68 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v65 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v76 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for EditDateOfBirthCellView() - 8;
  uint64_t v12 = MEMORY[0x270FA5388](v66);
  uint64_t v71 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v75 = (uint64_t)&v60 - v14;
  sub_255DBBD60();
  uint64_t v70 = v15;
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  long long v69 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  long long v78 = (char *)&v60 - v18;
  uint64_t v19 = a1 + v8[8];
  uint64_t v20 = *(void *)(v19 + 16);
  long long v88 = *(_OWORD *)v19;
  uint64_t v89 = v20;
  sub_255DBC30C(0, &qword_269F35820, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D310]);
  uint64_t v64 = v21;
  sub_255EEF840();
  uint64_t v63 = v85;
  uint64_t v22 = v8[19];
  unint64_t v23 = (uint64_t *)(a1 + v8[18]);
  uint64_t v24 = v23[1];
  uint64_t v86 = *v23;
  uint64_t v87 = v24;
  uint64_t v25 = a1 + v22;
  LOBYTE(v23) = *(unsigned char *)(a1 + v22);
  uint64_t v26 = *(void *)(a1 + v22 + 8);
  LOBYTE(v25) = *(unsigned char *)(v25 + 16);
  char v79 = (char)v23;
  uint64_t v80 = v26;
  char v81 = v25;
  sub_255DBC964();
  swift_bridgeObjectRetain();
  sub_255EEE570();
  char v79 = 0;
  sub_255DBC910(0, &qword_269F357A0, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, MEMORY[0x263F8D8F0]);
  sub_255DBBE24();
  sub_255DBBE78();
  sub_255EEF620();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v63 = type metadata accessor for MedicalIDPersonalInfoViewModel;
  sub_255DBD188(a1, v76, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  sub_255DB6E68(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)&v60 - v28;
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v62 = type metadata accessor for MedicalIDEditPersonalInfoModalView;
  uint64_t v30 = v65;
  sub_255DBD188(a1, v65, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  uint64_t v31 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v32 = (v31 + 16) & ~v31;
  uint64_t v68 = v32 + v67;
  uint64_t v67 = v31 | 7;
  uint64_t v33 = swift_allocObject();
  uint64_t v61 = type metadata accessor for MedicalIDEditPersonalInfoModalView;
  sub_255DBD1F0(v30, v33 + v32, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = v66;
  uint64_t v36 = v75;
  *(void *)(v75 + *(int *)(v66 + 36)) = KeyPath;
  sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = v76;
  sub_255DBD1F0(v76, v36, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  sub_255DBC9F0((uint64_t)v29, v36 + *(int *)(v35 + 28));
  uint64_t v38 = (void *)(v36 + *(int *)(v35 + 32));
  *uint64_t v38 = sub_255DBC960;
  v38[1] = v33;
  uint64_t v39 = v37;
  sub_255DBD188(a1, v37, (uint64_t (*)(void))v63);
  uint64_t v40 = a1 + v8[10];
  uint64_t v41 = *(void *)(v40 + 16);
  long long v88 = *(_OWORD *)v40;
  uint64_t v89 = v41;
  sub_255EEF840();
  unint64_t v42 = v82;
  unint64_t v43 = v83;
  unint64_t v44 = v84;
  unint64_t v45 = (unint64_t)v85;
  sub_255DBD188(a1, v30, (uint64_t (*)(void))v62);
  uint64_t v46 = swift_allocObject();
  sub_255DBD1F0(v30, v46 + v32, (uint64_t (*)(void))v61);
  uint64_t v47 = v72;
  __n128 v48 = sub_255E3DF1C(v39, v42, v43, v44, v45, (uint64_t)sub_255DBC960, v46, v72);
  uint64_t v49 = *(void (**)(char *, char *, uint64_t, __n128))(v77 + 16);
  uint64_t v50 = v69;
  uint64_t v51 = v70;
  v49(v69, v78, v70, v48);
  uint64_t v52 = v71;
  sub_255DBD188(v36, v71, (uint64_t (*)(void))type metadata accessor for EditDateOfBirthCellView);
  uint64_t v53 = v47;
  uint64_t v54 = v73;
  sub_255DBD188(v47, v73, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  uint64_t v55 = v74;
  ((void (*)(uint64_t, char *, uint64_t))v49)(v74, v50, v51);
  sub_255DBBCD8();
  uint64_t v57 = v56;
  sub_255DBD188(v52, v55 + *(int *)(v56 + 48), (uint64_t (*)(void))type metadata accessor for EditDateOfBirthCellView);
  sub_255DBD188(v54, v55 + *(int *)(v57 + 64), (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  sub_255DBD378(v53, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  sub_255DBD378(v75, (uint64_t (*)(void))type metadata accessor for EditDateOfBirthCellView);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v77 + 8);
  v58(v78, v51);
  sub_255DBD378(v54, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  sub_255DBD378(v52, (uint64_t (*)(void))type metadata accessor for EditDateOfBirthCellView);
  return ((uint64_t (*)(char *, uint64_t))v58)(v50, v51);
}

uint64_t sub_255DB5D70()
{
  return sub_255EEE560();
}

uint64_t sub_255DB5DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = (int *)type metadata accessor for EditOrganDonationCellView();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v30[-v15];
  sub_255DBD188(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  uint64_t v17 = a1 + *(int *)(v4 + 44);
  char v18 = *(unsigned char *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  LOBYTE(v35) = v18;
  uint64_t v36 = v19;
  sub_255DBC910(0, &qword_269F35850, (uint64_t)&type metadata for OrganDonationStatus, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v32 = v39;
  uint64_t v33 = v38;
  int v31 = v40;
  sub_255DBD188(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = swift_allocObject();
  sub_255DBD1F0((uint64_t)v7, v21 + v20, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
  uint64_t v22 = *(void **)(a1 + *(int *)(v4 + 68));
  if (v22)
  {
    unint64_t v23 = &v14[v11[7]];
    type metadata accessor for MedicalIDDataManager();
    sub_255DBD258(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
    id v24 = v22;
    *(void *)unint64_t v23 = sub_255EEE650();
    v23[8] = v25 & 1;
    sub_255DBD188((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
    uint64_t v26 = &v14[v11[6]];
    *uint64_t v26 = sub_255DBC960;
    v26[1] = v21;
    uint64_t v35 = v33;
    uint64_t v36 = v32;
    char v37 = v31;
    type metadata accessor for EditOrganDonationCellViewModel();
    swift_allocObject();
    swift_retain();
    uint64_t v27 = EditOrganDonationCellViewModel.init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(&v35, (uint64_t)sub_255E00688, 0, (uint64_t)sub_255E006B4, 0, (uint64_t)sub_255E00704, 0);
    swift_release();

    sub_255DBD378((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
    uint64_t v28 = (uint64_t *)&v14[v11[5]];
    *uint64_t v28 = v27;
    v28[1] = 0;
    sub_255DBD1F0((uint64_t)v14, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for EditOrganDonationCellView);
    return sub_255DBD1F0((uint64_t)v16, v34, (uint64_t (*)(void))type metadata accessor for EditOrganDonationCellView);
  }
  else
  {
    sub_255DB6ED8();
    sub_255DBD258((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

void sub_255DB6240(uint64_t a1)
{
  sub_255DB6E68(0, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v66 - v3;
  uint64_t v5 = type metadata accessor for HealthDemographicData();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (uint64_t **)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v10 = *(void **)(a1 + *(int *)(v9 + 60));
  if (!v10)
  {
    sub_255DB6ED8();
    sub_255DBD258((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
    sub_255EEE9E0();
    __break(1u);
    return;
  }
  uint64_t v11 = (int *)v9;
  id v75 = v10;
  if (objc_msgSend(v75, sel_suggestHealthData))
  {
    char v12 = MedicalIDPersonalInfoViewModel.hasPersonalInfoData.getter();

    if (v12) {
      return;
    }
    uint64_t v13 = *(void *)(a1 + v11[19]);
    swift_getKeyPath();
    uint64_t v80 = v13;
    sub_255DBD258((unint64_t *)&qword_269F350A8, (void (*)(uint64_t))type metadata accessor for HealthDemographicDataProvider);
    sub_255EEE2D0();
    swift_release();
    uint64_t v14 = v13 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
    swift_beginAccess();
    sub_255DBC834(v14, (uint64_t)v4, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_255DBC8B4((uint64_t)v4, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, MEMORY[0x263F8D8F0]);
      return;
    }
    sub_255DBD1F0((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
    uint64_t v16 = (long long *)(a1 + v11[6]);
    uint64_t v17 = *((void *)v16 + 2);
    long long v76 = *v16;
    uint64_t v77 = v17;
    sub_255DBC30C(0, &qword_269F35820, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D310]);
    uint64_t v19 = v18;
    sub_255EEF820();
    uint64_t v20 = v79;
    swift_bridgeObjectRelease();
    if (!v20)
    {
      uint64_t v21 = v8[1];
      uint64_t v22 = v8[2];
      uint64_t v72 = *v8;
      uint64_t v73 = v22;
      id v75 = v19;
      unint64_t v23 = v8[3];
      uint64_t v70 = v21;
      uint64_t v71 = v23;
      uint64_t v24 = sub_255EEDFB0();
      uint64_t v74 = &v66;
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v67 = v24;
      uint64_t v68 = v25;
      MEMORY[0x270FA5388](v24);
      uint64_t v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255DB6E68(0, &qword_269F35828, MEMORY[0x270FA88C8], MEMORY[0x263F8D8F0]);
      long long v69 = &v66;
      MEMORY[0x270FA5388](v28 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))((char *)&v66 - v29, 1, 1, v24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_255EEDF90();
      uint64_t v30 = sub_255EEDFA0();
      uint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v27, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = *((void *)v16 + 2);
      long long v76 = *v16;
      uint64_t v77 = v33;
      uint64_t v78 = v30;
      uint64_t v79 = v32;
      sub_255EEF830();
    }
    sub_255D80868(0);
    uint64_t v35 = *(uint64_t **)(*(void *)(v34 - 8) + 64);
    MEMORY[0x270FA5388](v34 - 8);
    uint64_t v36 = (uint64_t *)(a1 + v11[7]);
    sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    uint64_t v38 = v37;
    sub_255EEF820();
    uint64_t v39 = sub_255EEE100();
    id v75 = *(id *)(v39 - 8);
    int v40 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v75 + 6))((char *)&v66 - (((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v39);
    sub_255DBD378((uint64_t)&v66 - (((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255D80868);
    if (v40 == 1)
    {
      uint64_t v67 = v39;
      uint64_t v68 = v38;
      long long v69 = v35;
      uint64_t v70 = v36;
      uint64_t v41 = (uint64_t *)((char *)v8 + *(int *)(v5 + 24));
      sub_255EEDED0();
      LODWORD(v72) = v42;
      uint64_t v43 = sub_255EEDF60();
      uint64_t v73 = &v66;
      unint64_t v44 = *(void **)(v43 - 8);
      uint64_t v45 = v44[8];
      MEMORY[0x270FA5388](v43);
      unint64_t v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v47 = (void (*)(char *, uint64_t *, uint64_t))v44[2];
      uint64_t v74 = v41;
      v47((char *)&v66 - v46, v41, v43);
      if (v72)
      {
        LODWORD(v71) = 0;
      }
      else
      {
        sub_255EEDF20();
        LODWORD(v71) = (v48 & 1) == 0;
      }
      uint64_t v49 = (uint64_t (*)(char *, uint64_t))v44[1];
      uint64_t v50 = v49((char *)&v66 - v46, v43);
      uint64_t v72 = &v66;
      MEMORY[0x270FA5388](v50);
      uint64_t v51 = (char *)&v66 - v46;
      v47((char *)&v66 - v46, v74, v43);
      if (v71)
      {
        sub_255EEDF00();
        char v53 = v52;
        uint64_t v54 = v49(v51, v43);
        if ((v53 & 1) == 0)
        {
          uint64_t v55 = v69;
          MEMORY[0x270FA5388](v54);
          unint64_t v56 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v57 = (char *)&v66 - v56;
          uint64_t v58 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 28));
          if (v58)
          {
            uint64_t v59 = (void *)sub_255EEDEA0();
            id v60 = objc_msgSend(v58, sel_dateFromComponents_, v59);

            MEMORY[0x270FA5388](v61);
            uint64_t v62 = (char *)&v66 - v56;
            uint64_t v63 = v67;
            if (v60)
            {
              sub_255EEE0D0();

              uint64_t v64 = 0;
            }
            else
            {
              uint64_t v64 = 1;
            }
            (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v75 + 7))(v62, v64, 1, v63);
            uint64_t v65 = sub_255DBD1F0((uint64_t)v62, (uint64_t)v57, (uint64_t (*)(void))sub_255D80868);
          }
          else
          {
            uint64_t v65 = (*((uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v75 + 7))((char *)&v66 - v56, 1, 1, v67);
          }
          MEMORY[0x270FA5388](v65);
          sub_255DBD188((uint64_t)v57, (uint64_t)&v66 - (((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255D80868);
          sub_255EEF830();
          sub_255DBD378((uint64_t)v57, (uint64_t (*)(void))sub_255D80868);
          sub_255DBD378((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
          return;
        }
      }
      else
      {
        v49((char *)&v66 - v46, v43);
      }
    }
    sub_255DBD378((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
    return;
  }
  id v15 = v75;
}

uint64_t sub_255DB6C6C()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  qword_269F356E8 = result;
  unk_269F356F0 = v5;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditPersonalInfoModalView()
{
  uint64_t result = qword_269F35728;
  if (!qword_269F35728) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255DB6E08()
{
  if (!qword_269F356F8)
  {
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F356F8);
    }
  }
}

void sub_255DB6E68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_255DB6ED8()
{
  unint64_t result = qword_269F354E8;
  if (!qword_269F354E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F354E8);
  }
  return result;
}

unint64_t sub_255DB6F18()
{
  unint64_t result = qword_269F35710;
  if (!qword_269F35710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35710);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MedicalIDEditPersonalInfoModalView.TextFieldFocus(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for MedicalIDEditPersonalInfoModalView.TextFieldFocus(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x255DB705CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_255DB7084()
{
  return 0;
}

ValueMetadata *type metadata accessor for MedicalIDEditPersonalInfoModalView.TextFieldFocus()
{
  return &type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus;
}

void *sub_255DB709C(void *a1, char *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    unsigned int v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    uint64_t v136 = (void *)*((void *)a2 + 12);
    uint64_t v138 = (void *)*((void *)a2 + 13);
    a1[12] = v136;
    a1[13] = v138;
    uint64_t v133 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v133[13];
    __dst = (char *)v4 + v12;
    uint64_t v129 = &a2[v12];
    uint64_t v13 = sub_255EEE100();
    uint64_t v132 = *(void *)(v13 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v136;
    id v16 = v138;
    uint64_t v137 = v14;
    if (v14(v129, 1, v13))
    {
      sub_255D80868(0);
      memcpy(__dst, v129, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(__dst, v129, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v19 = v133[14];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = &a2[v19];
    if (v14(&a2[v19], 1, v13))
    {
      sub_255D80868(0);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v20, v21, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v20, 0, 1, v13);
    }
    uint64_t v23 = v133[15];
    uint64_t v24 = (void *)((char *)v4 + v23);
    uint64_t v25 = &a2[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *uint64_t v24 = *(void *)v25;
    v24[1] = v26;
    uint64_t v27 = v133[16];
    uint64_t v28 = (void *)((char *)v4 + v27);
    uint64_t v29 = &a2[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *uint64_t v28 = *(void *)v29;
    v28[1] = v30;
    *((unsigned char *)v4 + v133[17]) = a2[v133[17]];
    *((unsigned char *)v4 + v133[18]) = a2[v133[18]];
    uint64_t v31 = v133[19];
    uint64_t v32 = (char *)v4 + v31;
    uint64_t v33 = (uint64_t *)&a2[v31];
    unint64_t v34 = *(void *)&a2[v31 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    }
    else
    {
      uint64_t v35 = *v33;
      sub_255D80890(*v33, v34);
      *(void *)uint64_t v32 = v35;
      *((void *)v32 + 1) = v34;
    }
    uint64_t v36 = v133[20];
    uint64_t v37 = (char *)v4 + v36;
    uint64_t v38 = &a2[v36];
    uint64_t v39 = sub_255EEDF60();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      sub_255DB6E68(0, &qword_269F350B8, MEMORY[0x270FA8148], MEMORY[0x263F8D8F0]);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    uint64_t v42 = v133[21];
    uint64_t v43 = *(void **)&a2[v42];
    *(void *)((char *)v4 + v42) = v43;
    uint64_t v44 = v133[22];
    uint64_t v45 = (char *)v4 + v44;
    unint64_t v46 = &a2[v44];
    id v47 = v43;
    uint64_t v128 = v13;
    if (v137(v46, 1, v13))
    {
      sub_255D80868(0);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v45, v46, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v45, 0, 1, v13);
    }
    uint64_t v49 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    uint64_t v50 = v49[5];
    uint64_t v51 = (char *)v4 + v50;
    char v52 = &a2[v50];
    uint64_t v53 = sub_255EEE280();
    long long v130 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
    v130(v51, v52, v53);
    uint64_t v54 = v49[6];
    uint64_t v55 = (char *)v4 + v54;
    unint64_t v56 = &a2[v54];
    uint64_t v57 = sub_255EEE200();
    uint64_t v134 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
    v134(v55, v56, v57);
    uint64_t v58 = v49[7];
    uint64_t v59 = *(void **)&a2[v58];
    *(void *)((char *)v4 + v58) = v59;
    uint64_t v60 = v49[8];
    uint64_t v61 = *(void **)&a2[v60];
    *(void *)((char *)v4 + v60) = v61;
    uint64_t v62 = v49[9];
    uint64_t v63 = (void *)((char *)v4 + v62);
    uint64_t v64 = &a2[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *uint64_t v63 = *(void *)v64;
    v63[1] = v65;
    uint64_t v66 = a3[5];
    uint64_t v67 = (char *)v4 + v66;
    uint64_t v68 = (uint64_t *)&a2[v66];
    unint64_t v69 = *(void *)&a2[v66 + 8];
    id v70 = v59;
    id v71 = v61;
    swift_bridgeObjectRetain();
    if (v69 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
    }
    else
    {
      uint64_t v72 = *v68;
      sub_255D80890(*v68, v69);
      *(void *)uint64_t v67 = v72;
      *((void *)v67 + 1) = v69;
    }
    *((void *)v67 + 2) = v68[2];
    uint64_t v73 = a3[6];
    uint64_t v74 = a3[7];
    id v75 = (void *)((char *)v4 + v73);
    long long v76 = &a2[v73];
    uint64_t v77 = *((void *)v76 + 1);
    void *v75 = *(void *)v76;
    v75[1] = v77;
    v75[2] = *((void *)v76 + 2);
    uint64_t v78 = (char *)v4 + v74;
    uint64_t v79 = &a2[v74];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v137(v79, 1, v128))
    {
      sub_255D80868(0);
      memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v78, v79, v128);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v78, 0, 1, v128);
    }
    sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    *(void *)&v78[*(int *)(v81 + 28)] = *(void *)&v79[*(int *)(v81 + 28)];
    uint64_t v82 = a3[8];
    uint64_t v83 = a3[9];
    unint64_t v84 = (void *)((char *)v4 + v82);
    long long v85 = &a2[v82];
    uint64_t v86 = *((void *)v85 + 1);
    void *v84 = *(void *)v85;
    v84[1] = v86;
    v84[2] = *((void *)v85 + 2);
    uint64_t v87 = (char *)v4 + v83;
    long long v88 = &a2[v83];
    *uint64_t v87 = *v88;
    *((void *)v87 + 1) = *((void *)v88 + 1);
    uint64_t v89 = a3[10];
    uint64_t v90 = (void *)((char *)v4 + v89);
    uint64_t v91 = &a2[v89];
    uint64_t v92 = *(void *)&a2[v89 + 8];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v92)
    {
      void *v90 = *(void *)v91;
      v90[1] = v92;
      uint64_t v93 = *((void *)v91 + 3);
      v90[2] = *((void *)v91 + 2);
      v90[3] = v93;
      uint64_t v94 = *((void *)v91 + 5);
      v90[4] = *((void *)v91 + 4);
      v90[5] = v94;
      v90[6] = *((void *)v91 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v95 = *((_OWORD *)v91 + 1);
      *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v95;
      *((_OWORD *)v90 + 2) = *((_OWORD *)v91 + 2);
      v90[6] = *((void *)v91 + 6);
    }
    v90[7] = *((void *)v91 + 7);
    uint64_t v96 = a3[11];
    uint64_t v97 = (char *)v4 + v96;
    uint64_t v98 = &a2[v96];
    sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v130(v97, v98, v53);
    }
    else
    {
      *(void *)uint64_t v97 = *(void *)v98;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v99 = a3[12];
    unint64_t v100 = (char *)v4 + v99;
    unint64_t v101 = &a2[v99];
    sub_255DB6E68(0, &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v134(v100, v101, v57);
    }
    else
    {
      *(void *)unint64_t v100 = *(void *)v101;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = a3[13];
    uint64_t v103 = (void *)((char *)v4 + v102);
    uint64_t v104 = &a2[v102];
    sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v105 = sub_255EEE730();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(v103, v104, v105);
    }
    else
    {
      *uint64_t v103 = *(void *)v104;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v106 = a3[14];
    uint64_t v107 = a3[15];
    int v108 = (char *)v4 + v106;
    uint64_t v109 = &a2[v106];
    uint64_t v110 = *(void *)v109;
    LOBYTE(v109) = v109[8];
    *(void *)int v108 = v110;
    v108[8] = (char)v109;
    uint64_t v111 = (void *)((char *)v4 + v107);
    uint64_t v112 = &a2[v107];
    uint64_t v114 = *(void **)v112;
    uint64_t v113 = *((void *)v112 + 1);
    void *v111 = v114;
    v111[1] = v113;
    uint64_t v115 = a3[16];
    uint64_t v116 = a3[17];
    uint64_t v117 = (void *)((char *)v4 + v115);
    uint64_t v118 = &a2[v115];
    uint64_t v119 = *((void *)v118 + 1);
    void *v117 = *(void *)v118;
    v117[1] = v119;
    uint64_t v120 = (char *)v4 + v116;
    uint64_t v121 = &a2[v116];
    *uint64_t v120 = *v121;
    *((void *)v120 + 1) = *((void *)v121 + 1);
    v120[16] = v121[16];
    uint64_t v122 = a3[18];
    uint64_t v123 = a3[19];
    uint64_t v124 = *(void **)&a2[v122];
    *(void *)((char *)v4 + v122) = v124;
    *(void *)((char *)v4 + v123) = *(void *)&a2[v123];
    swift_retain();
    id v125 = v114;
    swift_bridgeObjectRetain();
    swift_retain();
    id v126 = v124;
  }
  swift_retain();
  return v4;
}

uint64_t sub_255DB7B38(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unsigned int v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  id v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v17 = a1 + v16[5];
  uint64_t v18 = sub_255EEE280();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v31(v17, v18);
  uint64_t v19 = a1 + v16[6];
  uint64_t v20 = sub_255EEE200();
  uint64_t v21 = v19;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8);
  v22(v21, v20);

  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t *)(a1 + a2[5]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_255D80D04(*v23, v24);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v25 = a1 + a2[7];
  if (!v8(v25, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v25, v6);
  }
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(a1 + a2[10] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v26 = a1 + a2[11];
  sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v31(v26, v18);
  }
  else {
    swift_release();
  }
  uint64_t v27 = a1 + a2[12];
  sub_255DB6E68(0, &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v22(v27, v20);
  }
  else {
    swift_release();
  }
  uint64_t v28 = a1 + a2[13];
  sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *sub_255DB815C(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  uint64_t v134 = (void *)*((void *)a2 + 12);
  uint64_t v136 = (void *)*((void *)a2 + 13);
  a1[12] = v134;
  a1[13] = v136;
  uint64_t v131 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v131[13];
  __dst = (char *)a1 + v11;
  uint64_t v127 = &a2[v11];
  uint64_t v12 = sub_255EEE100();
  uint64_t v130 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v134;
  id v15 = v136;
  uint64_t v135 = v13;
  if (v13(v127, 1, v12))
  {
    sub_255D80868(0);
    memcpy(__dst, v127, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(__dst, v127, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v17 = v131[14];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = &a2[v17];
  if (v13(&a2[v17], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v18, v19, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v18, 0, 1, v12);
  }
  uint64_t v21 = v131[15];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *((void *)v23 + 1);
  void *v22 = *(void *)v23;
  v22[1] = v24;
  uint64_t v25 = v131[16];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *uint64_t v26 = *(void *)v27;
  v26[1] = v28;
  *((unsigned char *)a1 + v131[17]) = a2[v131[17]];
  *((unsigned char *)a1 + v131[18]) = a2[v131[18]];
  uint64_t v29 = v131[19];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (uint64_t *)&a2[v29];
  unint64_t v32 = *(void *)&a2[v29 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *v31;
    sub_255D80890(*v31, v32);
    *(void *)uint64_t v30 = v33;
    *((void *)v30 + 1) = v32;
  }
  uint64_t v34 = v131[20];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_255EEDF60();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    sub_255DB6E68(0, &qword_269F350B8, MEMORY[0x270FA8148], MEMORY[0x263F8D8F0]);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  uint64_t v40 = v131[21];
  uint64_t v41 = *(void **)&a2[v40];
  *(void *)((char *)a1 + v40) = v41;
  uint64_t v42 = v131[22];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = &a2[v42];
  id v45 = v41;
  uint64_t v126 = v12;
  if (v135(v44, 1, v12))
  {
    sub_255D80868(0);
    memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v43, v44, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v43, 0, 1, v12);
  }
  id v47 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v48 = v47[5];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = &a2[v48];
  uint64_t v51 = sub_255EEE280();
  uint64_t v128 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
  v128(v49, v50, v51);
  uint64_t v52 = v47[6];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = &a2[v52];
  uint64_t v55 = sub_255EEE200();
  uint64_t v132 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
  v132(v53, v54, v55);
  uint64_t v56 = v47[7];
  uint64_t v57 = *(void **)&a2[v56];
  *(void *)((char *)a1 + v56) = v57;
  uint64_t v58 = v47[8];
  uint64_t v59 = *(void **)&a2[v58];
  *(void *)((char *)a1 + v58) = v59;
  uint64_t v60 = v47[9];
  uint64_t v61 = (void *)((char *)a1 + v60);
  uint64_t v62 = &a2[v60];
  uint64_t v63 = *((void *)v62 + 1);
  void *v61 = *(void *)v62;
  v61[1] = v63;
  uint64_t v64 = a3[5];
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (uint64_t *)&a2[v64];
  unint64_t v67 = *(void *)&a2[v64 + 8];
  id v68 = v57;
  id v69 = v59;
  swift_bridgeObjectRetain();
  if (v67 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  }
  else
  {
    uint64_t v70 = *v66;
    sub_255D80890(*v66, v67);
    *(void *)uint64_t v65 = v70;
    *((void *)v65 + 1) = v67;
  }
  *((void *)v65 + 2) = v66[2];
  uint64_t v71 = a3[6];
  uint64_t v72 = a3[7];
  uint64_t v73 = (void *)((char *)a1 + v71);
  uint64_t v74 = &a2[v71];
  uint64_t v75 = *((void *)v74 + 1);
  *uint64_t v73 = *(void *)v74;
  v73[1] = v75;
  v73[2] = *((void *)v74 + 2);
  long long v76 = (char *)a1 + v72;
  uint64_t v77 = &a2[v72];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v135(v77, 1, v126))
  {
    sub_255D80868(0);
    memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v76, v77, v126);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v76, 0, 1, v126);
  }
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v76[*(int *)(v79 + 28)] = *(void *)&v77[*(int *)(v79 + 28)];
  uint64_t v80 = a3[8];
  uint64_t v81 = a3[9];
  uint64_t v82 = (void *)((char *)a1 + v80);
  uint64_t v83 = &a2[v80];
  uint64_t v84 = *((void *)v83 + 1);
  void *v82 = *(void *)v83;
  v82[1] = v84;
  v82[2] = *((void *)v83 + 2);
  long long v85 = (char *)a1 + v81;
  uint64_t v86 = &a2[v81];
  *long long v85 = *v86;
  *((void *)v85 + 1) = *((void *)v86 + 1);
  uint64_t v87 = a3[10];
  long long v88 = (void *)((char *)a1 + v87);
  uint64_t v89 = &a2[v87];
  uint64_t v90 = *(void *)&a2[v87 + 8];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v90)
  {
    void *v88 = *(void *)v89;
    v88[1] = v90;
    uint64_t v91 = *((void *)v89 + 3);
    v88[2] = *((void *)v89 + 2);
    v88[3] = v91;
    uint64_t v92 = *((void *)v89 + 5);
    v88[4] = *((void *)v89 + 4);
    v88[5] = v92;
    v88[6] = *((void *)v89 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v93 = *((_OWORD *)v89 + 1);
    *(_OWORD *)long long v88 = *(_OWORD *)v89;
    *((_OWORD *)v88 + 1) = v93;
    *((_OWORD *)v88 + 2) = *((_OWORD *)v89 + 2);
    v88[6] = *((void *)v89 + 6);
  }
  v88[7] = *((void *)v89 + 7);
  uint64_t v94 = a3[11];
  long long v95 = (char *)a1 + v94;
  uint64_t v96 = &a2[v94];
  sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v128(v95, v96, v51);
  }
  else
  {
    *(void *)long long v95 = *(void *)v96;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v97 = a3[12];
  uint64_t v98 = (char *)a1 + v97;
  uint64_t v99 = &a2[v97];
  sub_255DB6E68(0, &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v132(v98, v99, v55);
  }
  else
  {
    *(void *)uint64_t v98 = *(void *)v99;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v100 = a3[13];
  unint64_t v101 = (void *)((char *)a1 + v100);
  uint64_t v102 = &a2[v100];
  sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v103 = sub_255EEE730();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v103 - 8) + 16))(v101, v102, v103);
  }
  else
  {
    void *v101 = *(void *)v102;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v104 = a3[14];
  uint64_t v105 = a3[15];
  uint64_t v106 = (char *)a1 + v104;
  uint64_t v107 = &a2[v104];
  uint64_t v108 = *(void *)v107;
  LOBYTE(v107) = v107[8];
  *(void *)uint64_t v106 = v108;
  v106[8] = (char)v107;
  uint64_t v109 = (void *)((char *)a1 + v105);
  uint64_t v110 = &a2[v105];
  uint64_t v112 = *(void **)v110;
  uint64_t v111 = *((void *)v110 + 1);
  void *v109 = v112;
  v109[1] = v111;
  uint64_t v113 = a3[16];
  uint64_t v114 = a3[17];
  uint64_t v115 = (void *)((char *)a1 + v113);
  uint64_t v116 = &a2[v113];
  uint64_t v117 = *((void *)v116 + 1);
  *uint64_t v115 = *(void *)v116;
  v115[1] = v117;
  uint64_t v118 = (char *)a1 + v114;
  uint64_t v119 = &a2[v114];
  *uint64_t v118 = *v119;
  *((void *)v118 + 1) = *((void *)v119 + 1);
  v118[16] = v119[16];
  uint64_t v120 = a3[18];
  uint64_t v121 = a3[19];
  uint64_t v122 = *(void **)&a2[v120];
  *(void *)((char *)a1 + v120) = v122;
  *(void *)((char *)a1 + v121) = *(void *)&a2[v121];
  swift_retain();
  id v123 = v112;
  swift_bridgeObjectRetain();
  swift_retain();
  id v124 = v122;
  swift_retain();
  return a1;
}

char *sub_255DB8BAC(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a1 + 8) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = *((void *)a2 + 9);
  *((void *)a1 + 10) = *((void *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = *((void *)a2 + 11);
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)*((void *)a2 + 12);
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)*((void *)a2 + 13);
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  id v14 = &a2[v12];
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  uint64_t v159 = v17;
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255D80868(0);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v158 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255D80868(0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  unint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = a2[v11[17]];
  a1[v11[18]] = a2[v11[18]];
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (uint64_t *)&a2[v33];
  unint64_t v36 = *(void *)&a2[v33 + 8];
  uint64_t v156 = v16;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = a3;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = a3;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255DB6E68(0, &qword_269F350B8, MEMORY[0x270FA8148], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)&a2[v51];
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  int v58 = v159(&a1[v55], 1, v158);
  int v59 = v159(v57, 1, v158);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v158);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v158);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v158);
LABEL_31:
    sub_255D80868(0);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v158);
LABEL_32:
  uint64_t v61 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v62 = v61[5];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  uint64_t v65 = sub_255EEE280();
  uint64_t v153 = *(void *)(v65 - 8);
  (*(void (**)(char *, char *, uint64_t))(v153 + 24))(v63, v64, v65);
  uint64_t v66 = v61[6];
  unint64_t v67 = &a1[v66];
  id v68 = &a2[v66];
  uint64_t v69 = sub_255EEE200();
  uint64_t v154 = *(void *)(v69 - 8);
  uint64_t v155 = v69;
  (*(void (**)(char *, char *))(v154 + 24))(v67, v68);
  uint64_t v70 = v61[7];
  uint64_t v71 = *(void **)&a1[v70];
  uint64_t v72 = *(void **)&a2[v70];
  *(void *)&a1[v70] = v72;
  id v73 = v72;

  uint64_t v74 = v61[8];
  uint64_t v75 = *(void **)&a2[v74];
  long long v76 = *(void **)&a1[v74];
  *(void *)&a1[v74] = v75;
  id v77 = v75;

  uint64_t v78 = v61[9];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  *(void *)uint64_t v79 = *(void *)v80;
  *((void *)v79 + 1) = *((void *)v80 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = v49[5];
  uint64_t v82 = (uint64_t *)&a1[v81];
  uint64_t v83 = (uint64_t *)&a2[v81];
  unint64_t v84 = *(void *)&a2[v81 + 8];
  if (*(void *)&a1[v81 + 8] >> 60 == 15)
  {
    if (v84 >> 60 != 15)
    {
      uint64_t v85 = *v83;
      sub_255D80890(*v83, v84);
      uint64_t *v82 = v85;
      v82[1] = v84;
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  if (v84 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v82);
LABEL_37:
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    goto LABEL_39;
  }
  uint64_t v86 = *v83;
  sub_255D80890(*v83, v84);
  uint64_t v87 = *v82;
  unint64_t v88 = v82[1];
  uint64_t *v82 = v86;
  v82[1] = v84;
  sub_255D80D04(v87, v88);
LABEL_39:
  v82[2] = v83[2];
  swift_retain();
  swift_release();
  uint64_t v89 = v49[6];
  uint64_t v90 = &a1[v89];
  uint64_t v91 = &a2[v89];
  *(void *)uint64_t v90 = *(void *)&a2[v89];
  *((void *)v90 + 1) = *(void *)&a2[v89 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v90 + 2) = *((void *)v91 + 2);
  swift_retain();
  swift_release();
  uint64_t v92 = v49[7];
  long long v93 = &a1[v92];
  uint64_t v94 = &a2[v92];
  int v95 = v159(&a1[v92], 1, v158);
  int v96 = v159(v94, 1, v158);
  if (v95)
  {
    if (!v96)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v93, v94, v158);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v93, 0, 1, v158);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v96)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v93, v158);
LABEL_44:
    sub_255D80868(0);
    memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 24))(v93, v94, v158);
LABEL_45:
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v93[*(int *)(v98 + 28)] = *(void *)&v94[*(int *)(v98 + 28)];
  swift_retain();
  swift_release();
  uint64_t v99 = v49[8];
  uint64_t v100 = &a1[v99];
  unint64_t v101 = &a2[v99];
  *(void *)uint64_t v100 = *(void *)&a2[v99];
  *((void *)v100 + 1) = *(void *)&a2[v99 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v100 + 2) = *((void *)v101 + 2);
  swift_retain();
  swift_release();
  uint64_t v102 = v49[9];
  uint64_t v103 = &a1[v102];
  uint64_t v104 = &a2[v102];
  *uint64_t v103 = *v104;
  *((void *)v103 + 1) = *((void *)v104 + 1);
  swift_retain();
  swift_release();
  uint64_t v105 = v49[10];
  uint64_t v106 = &a1[v105];
  uint64_t v107 = &a2[v105];
  uint64_t v108 = *(void *)&a1[v105 + 8];
  uint64_t v109 = *(void *)&a2[v105 + 8];
  if (v108)
  {
    if (v109)
    {
      *(void *)uint64_t v106 = *(void *)v107;
      *((void *)v106 + 1) = *((void *)v107 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v106 + 2) = *((void *)v107 + 2);
      *((void *)v106 + 3) = *((void *)v107 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v106 + 4) = *((void *)v107 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v106 + 5) = *((void *)v107 + 5);
      *((void *)v106 + 6) = *((void *)v107 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)v106);
      long long v111 = *((_OWORD *)v107 + 1);
      long long v110 = *((_OWORD *)v107 + 2);
      long long v112 = *(_OWORD *)v107;
      *((void *)v106 + 6) = *((void *)v107 + 6);
      *((_OWORD *)v106 + 1) = v111;
      *((_OWORD *)v106 + 2) = v110;
      *(_OWORD *)uint64_t v106 = v112;
    }
  }
  else if (v109)
  {
    *(void *)uint64_t v106 = *(void *)v107;
    *((void *)v106 + 1) = *((void *)v107 + 1);
    *((void *)v106 + 2) = *((void *)v107 + 2);
    *((void *)v106 + 3) = *((void *)v107 + 3);
    *((void *)v106 + 4) = *((void *)v107 + 4);
    *((void *)v106 + 5) = *((void *)v107 + 5);
    *((void *)v106 + 6) = *((void *)v107 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v113 = *(_OWORD *)v107;
    long long v114 = *((_OWORD *)v107 + 1);
    long long v115 = *((_OWORD *)v107 + 2);
    *((void *)v106 + 6) = *((void *)v107 + 6);
    *((_OWORD *)v106 + 1) = v114;
    *((_OWORD *)v106 + 2) = v115;
    *(_OWORD *)uint64_t v106 = v113;
  }
  *((void *)v106 + 7) = *((void *)v107 + 7);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v116 = v49[11];
    uint64_t v117 = &a1[v116];
    uint64_t v118 = &a2[v116];
    uint64_t v119 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9958];
    uint64_t v120 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DBC8B4((uint64_t)&a1[v116], &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
    sub_255DB6E68(0, &qword_269F35318, v119, v120);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v117, v118, v65);
    }
    else
    {
      *(void *)uint64_t v117 = *(void *)v118;
      swift_retain();
    }
    uint64_t v49 = a3;
    swift_storeEnumTagMultiPayload();
    uint64_t v121 = a3[12];
    uint64_t v122 = &a1[v121];
    id v123 = &a2[v121];
    id v124 = (uint64_t (*)(uint64_t))MEMORY[0x270FA97F0];
    id v125 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DBC8B4((uint64_t)&a1[v121], &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
    sub_255DB6E68(0, &qword_269F35320, v124, v125);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v122, v123, v155);
    }
    else
    {
      *(void *)uint64_t v122 = *(void *)v123;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v126 = a3[13];
    uint64_t v127 = &a1[v126];
    uint64_t v128 = &a2[v126];
    uint64_t v129 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    uint64_t v130 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DBC8B4((uint64_t)&a1[v126], (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    sub_255DB6E68(0, (unint64_t *)&qword_269F35580, v129, v130);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v131 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 16))(v127, v128, v131);
    }
    else
    {
      *(void *)uint64_t v127 = *(void *)v128;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v132 = v49[14];
  uint64_t v133 = &a1[v132];
  uint64_t v134 = &a2[v132];
  uint64_t v135 = *(void *)v134;
  LOBYTE(v134) = v134[8];
  *(void *)uint64_t v133 = v135;
  v133[8] = (char)v134;
  swift_retain();
  swift_release();
  uint64_t v136 = v49[15];
  uint64_t v137 = &a1[v136];
  uint64_t v138 = &a2[v136];
  uint64_t v139 = *(void **)&a1[v136];
  uint64_t v140 = *(void **)&a2[v136];
  *(void *)uint64_t v137 = v140;
  id v141 = v140;

  *((void *)v137 + 1) = *((void *)v138 + 1);
  uint64_t v142 = v49[16];
  uint64_t v143 = &a1[v142];
  uint64_t v144 = &a2[v142];
  *(void *)uint64_t v143 = *(void *)v144;
  *((void *)v143 + 1) = *((void *)v144 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v145 = v49[17];
  uint64_t v146 = &a1[v145];
  uint64_t v147 = &a2[v145];
  *uint64_t v146 = a2[v145];
  *((void *)v146 + 1) = *(void *)&a2[v145 + 8];
  swift_retain();
  swift_release();
  v146[16] = v147[16];
  uint64_t v148 = v49[18];
  uint64_t v149 = *(void **)&a2[v148];
  uint64_t v150 = *(void **)&a1[v148];
  *(void *)&a1[v148] = v149;
  id v151 = v149;

  *(void *)&a1[v49[19]] = *(void *)&a2[v49[19]];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255DB9AF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_255DB9B4C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = v6[13];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v84 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v84(v9, 1, v10))
  {
    sub_255D80868(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = v6[14];
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v83 = v11;
  if (v84((const void *)(a2 + v13), 1, v10))
  {
    sub_255D80868(0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(unsigned char *)(a1 + v6[17]) = *(unsigned char *)(a2 + v6[17]);
  *(unsigned char *)(a1 + v6[18]) = *(unsigned char *)(a2 + v6[18]);
  *(_OWORD *)(a1 + v6[19]) = *(_OWORD *)(a2 + v6[19]);
  uint64_t v17 = v6[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255DB6E68(0, &qword_269F350B8, MEMORY[0x270FA8148], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v6[21]) = *(void *)(a2 + v6[21]);
  uint64_t v23 = v6[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v84((const void *)(a2 + v23), 1, v10))
  {
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v24, v25, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v24, 0, 1, v10);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v28 = v27[5];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = sub_255EEE280();
  uint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32);
  v81(v29, v30, v31);
  uint64_t v32 = v27[6];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_255EEE200();
  uint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32);
  v82(v33, v34, v35);
  *(void *)(a1 + v27[7]) = *(void *)(a2 + v27[7]);
  *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  uint64_t v36 = a3[5];
  uint64_t v37 = a3[6];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(void *)(v40 + 16) = *(void *)(v41 + 16);
  uint64_t v42 = a3[7];
  uint64_t v43 = (char *)(a1 + v42);
  uint64_t v44 = (char *)(a2 + v42);
  if (v84((const void *)(a2 + v42), 1, v10))
  {
    sub_255D80868(0);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v43, v44, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v43, 0, 1, v10);
  }
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v43[*(int *)(v46 + 28)] = *(void *)&v44[*(int *)(v46 + 28)];
  uint64_t v47 = a3[8];
  uint64_t v48 = a3[9];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(void *)(v49 + 16) = *(void *)(v50 + 16);
  *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
  *(_OWORD *)(a1 + v48) = *(_OWORD *)(a2 + v48);
  uint64_t v51 = a3[10];
  uint64_t v52 = a3[11];
  uint64_t v53 = (_OWORD *)(a1 + v51);
  id v54 = (_OWORD *)(a2 + v51);
  long long v55 = v54[3];
  v53[2] = v54[2];
  v53[3] = v55;
  long long v56 = v54[1];
  _OWORD *v53 = *v54;
  v53[1] = v56;
  uint64_t v57 = (void *)(a1 + v52);
  int v58 = (const void *)(a2 + v52);
  sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
  uint64_t v60 = v59;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v81((uint64_t)v57, (uint64_t)v58, v31);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v57, v58, *(void *)(*(void *)(v60 - 8) + 64));
  }
  uint64_t v61 = a3[12];
  uint64_t v62 = (void *)(a1 + v61);
  uint64_t v63 = (const void *)(a2 + v61);
  sub_255DB6E68(0, &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
  uint64_t v65 = v64;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v82((uint64_t)v62, (uint64_t)v63, v35);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v62, v63, *(void *)(*(void *)(v65 - 8) + 64));
  }
  uint64_t v66 = a3[13];
  unint64_t v67 = (void *)(a1 + v66);
  id v68 = (const void *)(a2 + v66);
  sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  uint64_t v70 = v69;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v71 = sub_255EEE730();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v71 - 8) + 32))(v67, v68, v71);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v67, v68, *(void *)(*(void *)(v70 - 8) + 64));
  }
  uint64_t v72 = a3[14];
  uint64_t v73 = a3[15];
  uint64_t v74 = a1 + v72;
  uint64_t v75 = a2 + v72;
  *(void *)uint64_t v74 = *(void *)v75;
  *(unsigned char *)(v74 + 8) = *(unsigned char *)(v75 + 8);
  *(_OWORD *)(a1 + v73) = *(_OWORD *)(a2 + v73);
  uint64_t v76 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  uint64_t v77 = a1 + v76;
  uint64_t v78 = a2 + v76;
  *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
  *(unsigned char *)(v77 + 16) = *(unsigned char *)(v78 + 16);
  uint64_t v79 = a3[19];
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  *(void *)(a1 + v79) = *(void *)(a2 + v79);
  return a1;
}

char *sub_255DBA3D0(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRelease();
  uint64_t v6 = *((void *)a2 + 4);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)a2 + 8);
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *((void *)a2 + 10);
  *((void *)a1 + 9) = *((void *)a2 + 9);
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = *((void *)a2 + 12);
  *((void *)a1 + 11) = *((void *)a2 + 11);
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = *((void *)a2 + 13);

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  uint64_t v159 = v19;
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255D80868(0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = &a2[v23];
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v158 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (uint64_t *)&a2[v34];
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = a2[v13[17]];
  a1[v13[18]] = a2[v13[18]];
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = &a2[v39];
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v156 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  unint64_t v43 = *((void *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_16;
  }
  uint64_t v44 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v43;
  sub_255D80D04(v44, v42);
LABEL_18:
  uint64_t v45 = v13[20];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  uint64_t v48 = sub_255EEDF60();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    uint64_t v53 = a3;
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v53 = a3;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_255DB6E68(0, &qword_269F350B8, MEMORY[0x270FA8148], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  uint64_t v55 = v13[21];
  long long v56 = *(void **)&a1[v55];
  *(void *)&a1[v55] = *(void *)&a2[v55];

  uint64_t v57 = v13[22];
  int v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  int v60 = v19(&a1[v57], 1, v158);
  int v61 = v19(v59, 1, v158);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v58, v59, v158);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v58, 0, 1, v158);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v58, v158);
LABEL_29:
    sub_255D80868(0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 40))(v58, v59, v158);
LABEL_30:
  uint64_t v63 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v64 = v63[5];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  uint64_t v67 = sub_255EEE280();
  uint64_t v153 = *(void *)(v67 - 8);
  (*(void (**)(char *, char *, uint64_t))(v153 + 40))(v65, v66, v67);
  uint64_t v68 = v63[6];
  uint64_t v69 = &a1[v68];
  uint64_t v70 = &a2[v68];
  uint64_t v71 = sub_255EEE200();
  uint64_t v154 = *(void *)(v71 - 8);
  uint64_t v155 = v71;
  (*(void (**)(char *, char *))(v154 + 40))(v69, v70);
  uint64_t v72 = v63[7];
  uint64_t v73 = *(void **)&a1[v72];
  *(void *)&a1[v72] = *(void *)&a2[v72];

  uint64_t v74 = v63[8];
  uint64_t v75 = *(void **)&a1[v74];
  *(void *)&a1[v74] = *(void *)&a2[v74];

  uint64_t v76 = v63[9];
  uint64_t v77 = &a1[v76];
  uint64_t v78 = (uint64_t *)&a2[v76];
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  *(void *)uint64_t v77 = v80;
  *((void *)v77 + 1) = v79;
  swift_bridgeObjectRelease();
  uint64_t v81 = v53[5];
  uint64_t v82 = (uint64_t)&a1[v81];
  uint64_t v83 = &a2[v81];
  unint64_t v84 = *(void *)&a1[v81 + 8];
  if (v84 >> 60 == 15)
  {
LABEL_33:
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    goto LABEL_35;
  }
  unint64_t v85 = *((void *)v83 + 1);
  if (v85 >> 60 == 15)
  {
    sub_255D81EF8(v82);
    goto LABEL_33;
  }
  uint64_t v86 = *(void *)v82;
  *(void *)uint64_t v82 = *(void *)v83;
  *(void *)(v82 + 8) = v85;
  sub_255D80D04(v86, v84);
LABEL_35:
  *(void *)(v82 + 16) = *((void *)v83 + 2);
  swift_release();
  uint64_t v87 = v53[6];
  unint64_t v88 = &a1[v87];
  uint64_t v89 = &a2[v87];
  uint64_t v90 = *(void *)&a2[v87 + 8];
  *(void *)unint64_t v88 = *(void *)&a2[v87];
  *((void *)v88 + 1) = v90;
  swift_bridgeObjectRelease();
  *((void *)v88 + 2) = *((void *)v89 + 2);
  swift_release();
  uint64_t v91 = v53[7];
  uint64_t v92 = &a1[v91];
  long long v93 = &a2[v91];
  int v94 = v159(&a1[v91], 1, v158);
  int v95 = v159(v93, 1, v158);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v92, v93, v158);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v92, 0, 1, v158);
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v156 + 8))(v92, v158);
LABEL_40:
    sub_255D80868(0);
    memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(v156 + 40))(v92, v93, v158);
LABEL_41:
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v92[*(int *)(v97 + 28)] = *(void *)&v93[*(int *)(v97 + 28)];
  swift_release();
  uint64_t v98 = v53[8];
  uint64_t v99 = &a1[v98];
  uint64_t v100 = &a2[v98];
  uint64_t v101 = *(void *)&a2[v98 + 8];
  *(void *)uint64_t v99 = *(void *)&a2[v98];
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease();
  *((void *)v99 + 2) = *((void *)v100 + 2);
  swift_release();
  uint64_t v102 = v53[9];
  uint64_t v103 = &a1[v102];
  uint64_t v104 = &a2[v102];
  *uint64_t v103 = *v104;
  *((void *)v103 + 1) = *((void *)v104 + 1);
  swift_release();
  uint64_t v105 = v53[10];
  uint64_t v106 = &a1[v105];
  uint64_t v107 = &a2[v105];
  if (*(void *)&a1[v105 + 8])
  {
    uint64_t v108 = *((void *)v107 + 1);
    if (v108)
    {
      *(void *)uint64_t v106 = *(void *)v107;
      *((void *)v106 + 1) = v108;
      swift_bridgeObjectRelease();
      uint64_t v109 = *((void *)v107 + 3);
      *((void *)v106 + 2) = *((void *)v107 + 2);
      *((void *)v106 + 3) = v109;
      swift_bridgeObjectRelease();
      *((void *)v106 + 4) = *((void *)v107 + 4);
      swift_bridgeObjectRelease();
      uint64_t v110 = *((void *)v107 + 6);
      *((void *)v106 + 5) = *((void *)v107 + 5);
      *((void *)v106 + 6) = v110;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    sub_255DB9AF8((uint64_t)v106);
  }
  long long v111 = *((_OWORD *)v107 + 1);
  *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
  *((_OWORD *)v106 + 1) = v111;
  *((_OWORD *)v106 + 2) = *((_OWORD *)v107 + 2);
  *((void *)v106 + 6) = *((void *)v107 + 6);
LABEL_46:
  *((void *)v106 + 7) = *((void *)v107 + 7);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v112 = v53[11];
    long long v113 = &a1[v112];
    long long v114 = &a2[v112];
    long long v115 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9958];
    uint64_t v116 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DBC8B4((uint64_t)&a1[v112], &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
    sub_255DB6E68(0, &qword_269F35318, v115, v116);
    uint64_t v118 = v117;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v113, v114, v67);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v113, v114, *(void *)(*(void *)(v118 - 8) + 64));
    }
    uint64_t v53 = a3;
    uint64_t v119 = a3[12];
    uint64_t v120 = &a1[v119];
    uint64_t v121 = &a2[v119];
    uint64_t v122 = (uint64_t (*)(uint64_t))MEMORY[0x270FA97F0];
    id v123 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DBC8B4((uint64_t)&a1[v119], &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
    sub_255DB6E68(0, &qword_269F35320, v122, v123);
    uint64_t v125 = v124;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v120, v121, v155);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v120, v121, *(void *)(*(void *)(v125 - 8) + 64));
    }
    uint64_t v126 = a3[13];
    uint64_t v127 = &a1[v126];
    uint64_t v128 = &a2[v126];
    uint64_t v129 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    uint64_t v130 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DBC8B4((uint64_t)&a1[v126], (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    sub_255DB6E68(0, (unint64_t *)&qword_269F35580, v129, v130);
    uint64_t v132 = v131;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v133 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v127, v128, v133);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v127, v128, *(void *)(*(void *)(v132 - 8) + 64));
    }
  }
  uint64_t v134 = v53[14];
  uint64_t v135 = &a1[v134];
  uint64_t v136 = &a2[v134];
  uint64_t v137 = *(void *)v136;
  LOBYTE(v136) = v136[8];
  *(void *)uint64_t v135 = v137;
  v135[8] = (char)v136;
  swift_release();
  uint64_t v138 = v53[15];
  uint64_t v139 = &a1[v138];
  uint64_t v140 = &a2[v138];
  id v141 = *(void **)&a1[v138];
  *(void *)uint64_t v139 = *(void *)v140;

  *((void *)v139 + 1) = *((void *)v140 + 1);
  uint64_t v142 = v53[16];
  uint64_t v143 = &a1[v142];
  uint64_t v144 = (uint64_t *)&a2[v142];
  uint64_t v146 = *v144;
  uint64_t v145 = v144[1];
  *(void *)uint64_t v143 = v146;
  *((void *)v143 + 1) = v145;
  swift_bridgeObjectRelease();
  uint64_t v147 = v53[17];
  uint64_t v148 = &a1[v147];
  uint64_t v149 = &a2[v147];
  char *v148 = a2[v147];
  *((void *)v148 + 1) = *(void *)&a2[v147 + 8];
  swift_release();
  v148[16] = v149[16];
  uint64_t v150 = v53[18];
  id v151 = *(void **)&a1[v150];
  *(void *)&a1[v150] = *(void *)&a2[v150];

  *(void *)&a1[v53[19]] = *(void *)&a2[v53[19]];
  swift_release();
  return a1;
}

uint64_t sub_255DBB11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DBB130);
}

uint64_t sub_255DBB130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[7];
LABEL_11:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_12;
  }
  sub_255DB6E68(0, &qword_269F35330, MEMORY[0x270FA9958], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[11];
    goto LABEL_11;
  }
  sub_255DB6E68(0, &qword_269F35338, MEMORY[0x270FA97F0], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[12];
    goto LABEL_11;
  }
  sub_255DB6E68(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[13];
    goto LABEL_11;
  }
  unint64_t v18 = *(void *)(a1 + a3[16] + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

uint64_t sub_255DBB3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DBB3E8);
}

void sub_255DBB3E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[7];
    }
    else
    {
      sub_255DB6E68(0, &qword_269F35330, MEMORY[0x270FA9958], MEMORY[0x263F185D0]);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[11];
      }
      else
      {
        sub_255DB6E68(0, &qword_269F35338, MEMORY[0x270FA97F0], MEMORY[0x263F185D0]);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[12];
        }
        else
        {
          sub_255DB6E68(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
          if (*(_DWORD *)(*(void *)(v18 - 8) + 84) != a3)
          {
            *(void *)(a1 + a4[16] + 8) = (a2 - 1);
            return;
          }
          uint64_t v10 = v18;
          uint64_t v14 = *(void *)(v18 - 8);
          uint64_t v15 = a4[13];
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_255DBB688()
{
  type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v0 <= 0x3F)
  {
    sub_255DB6E68(319, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    if (v1 <= 0x3F)
    {
      sub_255DB6E68(319, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
      if (v2 <= 0x3F)
      {
        sub_255DB6E68(319, &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
        if (v3 <= 0x3F)
        {
          sub_255DB6E68(319, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

unint64_t sub_255DBB90C()
{
  unint64_t result = qword_269F35738;
  if (!qword_269F35738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35738);
  }
  return result;
}

uint64_t sub_255DBB960()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DBB97C()
{
  if (!qword_269F35740)
  {
    sub_255DB6E68(255, &qword_269F35748, (uint64_t (*)(uint64_t))sub_255DBBA30, MEMORY[0x263F1BAC8]);
    sub_255DBC7C8(&qword_269F357C8, &qword_269F35748, (uint64_t (*)(uint64_t))sub_255DBBA30);
    unint64_t v0 = sub_255EEF2E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35740);
    }
  }
}

void sub_255DBBA30()
{
  if (!qword_269F35750)
  {
    sub_255DBBAE8();
    sub_255DBBC44();
    sub_255DB6E68(255, &qword_269F357B8, (uint64_t (*)(uint64_t))sub_255DBBF0C, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F35750);
    }
  }
}

void sub_255DBBAE8()
{
  if (!qword_269F35758)
  {
    sub_255DBBF2C(255, &qword_269F35760, (void (*)(uint64_t))sub_255DBBBB0);
    sub_255DBBF8C(255, &qword_269F35770, MEMORY[0x263F1A1F8], sub_255DBBC10, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35758);
    }
  }
}

void sub_255DBBBB0()
{
  if (!qword_269F35768)
  {
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35768);
    }
  }
}

uint64_t sub_255DBBC10()
{
  return sub_255DBD258(&qword_269F35778, MEMORY[0x263F1A1F8]);
}

void sub_255DBBC44()
{
  if (!qword_269F35780)
  {
    sub_255DB6E68(255, &qword_269F35788, (uint64_t (*)(uint64_t))sub_255DBBCD8, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEFA60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35780);
    }
  }
}

void sub_255DBBCD8()
{
  if (!qword_269F35790)
  {
    sub_255DBBD60();
    type metadata accessor for EditDateOfBirthCellView();
    type metadata accessor for EditPrimaryLanguageCellView();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F35790);
    }
  }
}

void sub_255DBBD60()
{
  if (!qword_269F35798)
  {
    sub_255DBC910(255, &qword_269F357A0, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, MEMORY[0x263F8D8F0]);
    sub_255DBBE24();
    sub_255DBBE78();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35798);
    }
  }
}

unint64_t sub_255DBBE24()
{
  unint64_t result = qword_269F357A8;
  if (!qword_269F357A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F357A8);
  }
  return result;
}

unint64_t sub_255DBBE78()
{
  unint64_t result = qword_269F357B0;
  if (!qword_269F357B0)
  {
    sub_255DBC910(255, &qword_269F357A0, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, MEMORY[0x263F8D8F0]);
    sub_255DB6F18();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F357B0);
  }
  return result;
}

void sub_255DBBF0C(uint64_t a1)
{
}

void sub_255DBBF2C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEFA60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255DBBF8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255DBC00C()
{
  if (!qword_269F357D8)
  {
    sub_255DBC0B4();
    sub_255DBC6E0(&qword_269F357E8, (void (*)(uint64_t))sub_255DBC0B4, (void (*)(void))sub_255DBC14C, (void (*)(void))sub_255DBC180);
    unint64_t v0 = sub_255EEE940();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F357D8);
    }
  }
}

void sub_255DBC0B4()
{
  if (!qword_269F357E0)
  {
    sub_255DBB97C();
    sub_255DB6E68(255, &qword_269F34DD8, (uint64_t (*)(uint64_t))sub_255D7B3F8, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F357E0);
    }
  }
}

uint64_t sub_255DBC14C()
{
  return sub_255DBD258(&qword_269F357F0, (void (*)(uint64_t))sub_255DBB97C);
}

unint64_t sub_255DBC180()
{
  unint64_t result = qword_269F34E00;
  if (!qword_269F34E00)
  {
    sub_255DB6E68(255, &qword_269F34DD8, (uint64_t (*)(uint64_t))sub_255D7B3F8, MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F34E00);
  }
  return result;
}

uint64_t sub_255DBC208()
{
  return sub_255DBD258(&qword_269F357F8, (void (*)(uint64_t))sub_255DBC00C);
}

uint64_t sub_255DBC240()
{
  type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255DB3F40();
}

void sub_255DBC30C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_255DBC910(255, a3, a4, MEMORY[0x263F8D8F0]);
    unint64_t v5 = sub_255EEF850();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255DBC378@<X0>(uint64_t a1@<X8>)
{
  return sub_255DB4AB4(*(char **)(v1 + 16), a1);
}

uint64_t sub_255DBC380()
{
  return objectdestroy_16Tm((uint64_t (*)(void))sub_255DBB97C);
}

void sub_255DBC398(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255DBB97C();
  uint64_t v6 = v2
     + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
  sub_255DB2D58(a1, v6, a2);
}

void sub_255DBC41C()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDEditPersonalInfoModalView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  sub_255DB6240(v2);
}

void sub_255DBC47C()
{
  if (!qword_269F35818)
  {
    sub_255DBBF8C(255, &qword_269F357D0, (uint64_t (*)(uint64_t))sub_255DBC00C, sub_255DBC208, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35818);
    }
  }
}

double sub_255DBC528@<D0>(_OWORD *a1@<X8>)
{
  sub_255D7B264();
  sub_255EEEC30();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_255DBC57C()
{
  return objectdestroy_16Tm(MEMORY[0x263F18E88]);
}

uint64_t objectdestroy_16Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_255DBC62C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DBC664(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(v2 + 16))(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t sub_255DBC698(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, void *))(v4 + 16);
  v7[0] = a2;
  v7[1] = a3;
  char v8 = a4 & 1;
  return v5(a1, v7);
}

void sub_255DBC6D8(uint64_t a1@<X8>)
{
  sub_255DB5210(*(void *)(v1 + 16), a1);
}

uint64_t sub_255DBC6E0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255DBC76C()
{
  unint64_t result = qword_269F35838;
  if (!qword_269F35838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35838);
  }
  return result;
}

uint64_t sub_255DBC7C0@<X0>(uint64_t a1@<X8>)
{
  return sub_255DB5534(*(void *)(v1 + 16), a1);
}

uint64_t sub_255DBC7C8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255DB6E68(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DBC82C@<X0>(uint64_t a1@<X8>)
{
  return sub_255DB5DE0(*(void *)(v1 + 16), a1);
}

uint64_t sub_255DBC834(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_255DB6E68(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_255DBC8B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_255DB6E68(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_255DBC910(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255DBC964()
{
  if (!qword_269F35858)
  {
    sub_255DBC910(255, &qword_269F357A0, (uint64_t)&type metadata for MedicalIDEditPersonalInfoModalView.TextFieldFocus, MEMORY[0x263F8D8F0]);
    sub_255DBBE78();
    unint64_t v0 = sub_255EEE5A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35858);
    }
  }
}

uint64_t sub_255DBC9F0(uint64_t a1, uint64_t a2)
{
  sub_255DB6E68(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = (int *)type metadata accessor for MedicalIDEditPersonalInfoModalView();
  uint64_t v31 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v31 + 16) & ~v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  long long v3 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v4 = v2 + v3[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[14];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v2 + v3[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = v2 + v3[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v2 + v3[22];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v16 = v2 + v15[5];
  uint64_t v17 = sub_255EEE280();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v30(v16, v17);
  uint64_t v18 = v2 + v15[6];
  uint64_t v19 = sub_255EEE200();
  uint64_t v20 = v18;
  int v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v21(v20, v19);

  swift_bridgeObjectRelease();
  uint64_t v22 = (uint64_t *)(v2 + v1[5]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_255D80D04(*v22, v23);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v24 = v2 + v1[7];
  if (!v7(v24, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v24, v5);
  }
  sub_255DB6E68(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(v2 + v1[10] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v25 = v2 + v1[11];
  sub_255DB6E68(0, &qword_269F35318, MEMORY[0x270FA9958], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v30(v25, v17);
  }
  else {
    swift_release();
  }
  uint64_t v26 = v2 + v1[12];
  sub_255DB6E68(0, &qword_269F35320, MEMORY[0x270FA97F0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v21(v26, v19);
  }
  else {
    swift_release();
  }
  uint64_t v27 = v2 + v1[13];
  sub_255DB6E68(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DBD134()
{
  return sub_255DB5D70();
}

uint64_t sub_255DBD188(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DBD1F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DBD258(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DBD2A8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  sub_255DBBF8C(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_255DBD31C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  sub_255DBBF8C(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_255DBD378(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_255DBD3D8()
{
  unint64_t result = qword_269F35878;
  if (!qword_269F35878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35878);
  }
  return result;
}

unint64_t sub_255DBD430()
{
  unint64_t result = qword_269F35880;
  if (!qword_269F35880)
  {
    sub_255DBC47C();
    sub_255DBD4A8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35880);
  }
  return result;
}

unint64_t sub_255DBD4A8()
{
  unint64_t result = qword_269F35888;
  if (!qword_269F35888)
  {
    sub_255DBBF8C(255, &qword_269F357D0, (uint64_t (*)(uint64_t))sub_255DBC00C, sub_255DBC208, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35888);
  }
  return result;
}

uint64_t _s10BackgroundVwxx(id *a1)
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *_s10BackgroundVwcp(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(void *)(a2 + 48);
  id v7 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _s10BackgroundVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s10BackgroundVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t _s10BackgroundVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s10BackgroundVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s10BackgroundVMa()
{
  return &_s10BackgroundVN;
}

uint64_t sub_255DBD7E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DBD800@<X0>(id *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  sub_255DBE500();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v18[-v12];
  if (*a1)
  {
    if (objc_msgSend(*a1, sel_isLockScreen))
    {
      sub_255DBDA74((uint64_t)v20);
      nullsub_1(v20);
    }
    else
    {
      sub_255DBE55C((uint64_t)v20);
    }
    sub_255DBE590((uint64_t)v20, (uint64_t)v21);
    uint64_t v14 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16);
    v14(v13, a2, v7);
    sub_255DBE590((uint64_t)v21, (uint64_t)v18);
    v14(v11, v13, v7);
    sub_255DBE590((uint64_t)v18, (uint64_t)v19);
    sub_255DBE590((uint64_t)v19, a3);
    sub_255DBE16C();
    v14((unsigned char *)(a3 + *(int *)(v15 + 48)), v11, v7);
    sub_255DBE668((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_255DBE624);
    uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
    v16(v13, v7);
    v16(v11, v7);
    sub_255DBE590((uint64_t)v18, (uint64_t)v20);
    return sub_255DBE668((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_255DBE6FC);
  }
  else
  {
    sub_255DB6ED8();
    sub_255DBE9B0((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

double sub_255DBDA74@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_255EEED70();
  sub_255DBDD8C(v1, (uint64_t)v36);
  *(_OWORD *)&v38[103] = v36[6];
  *(_OWORD *)&v38[87] = v36[5];
  *(_OWORD *)&v38[39] = v36[2];
  *(_OWORD *)&v38[23] = v36[1];
  *(_OWORD *)&v38[119] = v36[7];
  *(_OWORD *)&v38[135] = v37;
  char v39 = 0;
  *(_OWORD *)&v38[55] = v36[3];
  *(_OWORD *)&v38[71] = v36[4];
  *(_OWORD *)&v38[7] = v36[0];
  long long v46 = *(_OWORD *)&v38[96];
  long long v47 = *(_OWORD *)&v38[112];
  v48[0] = *(_OWORD *)&v38[128];
  *(void *)((char *)v48 + 15) = *((void *)&v37 + 1);
  long long v42 = *(_OWORD *)&v38[32];
  long long v43 = *(_OWORD *)&v38[48];
  long long v44 = *(_OWORD *)&v38[64];
  long long v45 = *(_OWORD *)&v38[80];
  long long v40 = *(_OWORD *)v38;
  long long v41 = *(_OWORD *)&v38[16];
  char v4 = sub_255EEF1A0();
  long long v32 = *(_OWORD *)(v1 + 16);
  uint64_t v33 = *(void *)(v1 + 32);
  sub_255DBE740();
  MEMORY[0x25A29B390](&v31);
  if (qword_269F34A38 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  char v49 = 0;
  char v13 = sub_255EEF170();
  if (qword_269F34A68 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  char v22 = v49;
  char v51 = 0;
  sub_255EEFB00();
  sub_255EEE710();
  long long v23 = v47;
  *(_OWORD *)(a1 + 113) = v46;
  *(_OWORD *)(a1 + 129) = v23;
  *(_OWORD *)(a1 + 145) = v48[0];
  long long v24 = v43;
  *(_OWORD *)(a1 + 49) = v42;
  *(_OWORD *)(a1 + 65) = v24;
  long long v25 = v45;
  *(_OWORD *)(a1 + 81) = v44;
  *(_OWORD *)(a1 + 97) = v25;
  long long v26 = v41;
  *(_OWORD *)(a1 + 17) = v40;
  uint64_t v27 = v32;
  uint64_t v28 = v33;
  char v29 = v51;
  char v57 = BYTE8(v32);
  char v55 = v34;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 160) = *(void *)((char *)v48 + 15);
  *(_OWORD *)(a1 + 33) = v26;
  *(unsigned char *)(a1 + 168) = v4;
  *(_DWORD *)(a1 + 169) = *(_DWORD *)v50;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v50[3];
  *(void *)(a1 + 176) = v6;
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v10;
  *(void *)(a1 + 200) = v12;
  *(unsigned char *)(a1 + 208) = v22;
  *(_DWORD *)(a1 + 209) = *(_DWORD *)v53;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)&v53[3];
  *(unsigned char *)(a1 + 216) = v13;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a1 + 217) = *(_DWORD *)v52;
  *(void *)(a1 + 224) = v15;
  *(void *)(a1 + 232) = v17;
  *(void *)(a1 + 240) = v19;
  *(void *)(a1 + 248) = v21;
  *(unsigned char *)(a1 + 256) = v29;
  *(_DWORD *)(a1 + 257) = v31;
  *(_DWORD *)(a1 + 260) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a1 + 264) = v27;
  *(unsigned char *)(a1 + 272) = v57;
  *(_DWORD *)(a1 + 273) = *(_DWORD *)v56;
  *(_DWORD *)(a1 + 276) = *(_DWORD *)&v56[3];
  *(void *)(a1 + 280) = v28;
  *(unsigned char *)(a1 + 288) = v55;
  *(_DWORD *)(a1 + 292) = *(_DWORD *)&v54[3];
  *(_DWORD *)(a1 + 289) = *(_DWORD *)v54;
  double result = *(double *)&v35;
  *(_OWORD *)(a1 + 296) = v35;
  return result;
}

double sub_255DBDD8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = *(void *)(a1 + 40);
  *(void *)&long long v37 = v44;
  sub_255DBE7A8();
  swift_retain();
  uint64_t v25 = sub_255EEF770();
  long long v42 = *(_OWORD *)(a1 + 16);
  uint64_t v43 = *(void *)(a1 + 32);
  long long v37 = *(_OWORD *)(a1 + 16);
  uint64_t v38 = *(void *)(a1 + 32);
  sub_255DBE740();
  uint64_t v5 = v4;
  MEMORY[0x25A29B390](&v27);
  sub_255EEFB10();
  sub_255EEE710();
  uint64_t v6 = v27;
  char v7 = v28;
  uint64_t v8 = v29;
  char v9 = v30;
  uint64_t v10 = v31;
  uint64_t v24 = v32;
  sub_255DBE7FC();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_255EF1E20;
  uint64_t v41 = *(void *)(a1 + 48);
  uint64_t v12 = v41;
  *(void *)(v11 + 32) = v44;
  *(void *)(v11 + 40) = v12;
  *(void *)&long long v37 = v11;
  sub_255EEFEB0();
  uint64_t v13 = v37;
  sub_255DBE854((uint64_t)&v44);
  sub_255DBE854((uint64_t)&v41);
  sub_255EEFBB0();
  sub_255EEFBC0();
  MEMORY[0x25A29B4E0](v13);
  sub_255EEE7F0();
  uint64_t v14 = v33;
  long long v23 = v34;
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  long long v37 = v42;
  uint64_t v38 = v43;
  MEMORY[0x25A29B390](&v26, v5);
  sub_255EEFB10();
  sub_255EEE710();
  uint64_t v17 = v37;
  char v18 = BYTE8(v37);
  uint64_t v19 = v38;
  char v46 = v39;
  *(_DWORD *)(a2 + 17) = v26;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v26 + 3);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v48;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v48[3];
  int v20 = *(_DWORD *)v47;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)&v47[3];
  *(_DWORD *)(a2 + 105) = v20;
  LOBYTE(v20) = v46;
  int v21 = *(_DWORD *)v45;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v45[3];
  *(_DWORD *)(a2 + 121) = v21;
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v14;
  *(_OWORD *)(a2 + 64) = v23;
  *(void *)(a2 + 80) = v15;
  *(void *)(a2 + 88) = v16;
  *(void *)(a2 + 96) = v17;
  *(unsigned char *)(a2 + 104) = v18;
  *(void *)(a2 + 112) = v19;
  *(unsigned char *)(a2 + 120) = v20;
  double result = v40[0];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)v40;
  return result;
}

uint64_t sub_255DBE040()
{
  return sub_255EEE700();
}

uint64_t sub_255DBE05C@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  void v8[2] = *(_OWORD *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 48);
  *(void *)a2 = sub_255EEED70();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  sub_255DBE0D0();
  return sub_255DBD800((id *)v8, a1, a2 + *(int *)(v6 + 44));
}

void sub_255DBE0D0()
{
  if (!qword_269F35898)
  {
    sub_255DBE138(255);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35898);
    }
  }
}

void sub_255DBE138(uint64_t a1)
{
}

void sub_255DBE16C()
{
  if (!qword_269F358A8)
  {
    sub_255DBE20C(255, &qword_269F358B0, (uint64_t (*)(uint64_t))sub_255DBE270, MEMORY[0x263F8D8F0]);
    sub_255DBE500();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F358A8);
    }
  }
}

void sub_255DBE20C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255DBE270(uint64_t a1)
{
}

void sub_255DBE298(uint64_t a1)
{
}

void sub_255DBE2C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255DBE324()
{
  if (!qword_269F358C8)
  {
    sub_255DBE90C(255, &qword_269F358D0, sub_255DBE3B4, (void (*)(void))sub_255DBE4CC);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F358C8);
    }
  }
}

void sub_255DBE3B4(uint64_t a1)
{
}

void sub_255DBE3E8()
{
  if (!qword_269F358E0)
  {
    sub_255DBE478(255, &qword_269F35420);
    sub_255DBE478(255, &qword_269F358E8);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F358E0);
    }
  }
}

void sub_255DBE478(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_255EEE870();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_255DBE4CC()
{
  return sub_255DBE9B0(&qword_269F358F0, sub_255DBE3B4);
}

void sub_255DBE500()
{
  if (!qword_269F358F8)
  {
    sub_255DA7BBC();
    unint64_t v0 = sub_255EEEF10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F358F8);
    }
  }
}

double sub_255DBE55C(uint64_t a1)
{
  *(void *)(a1 + 304) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_255DBE590(uint64_t a1, uint64_t a2)
{
  sub_255DBE20C(0, &qword_269F358B0, (uint64_t (*)(uint64_t))sub_255DBE270, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255DBE624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_255DBE668(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    *(void *)(a1 + 304));
  return a1;
}

uint64_t sub_255DBE6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_255DBE740()
{
  if (!qword_269F35900)
  {
    unint64_t v0 = sub_255EEF9D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35900);
    }
  }
}

void sub_255DBE798()
{
  qword_269F35890 = 0x4044000000000000;
}

unint64_t sub_255DBE7A8()
{
  unint64_t result = qword_269F35908;
  if (!qword_269F35908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35908);
  }
  return result;
}

void sub_255DBE7FC()
{
  if (!qword_269F35910)
  {
    unint64_t v0 = sub_255EF0490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35910);
    }
  }
}

uint64_t sub_255DBE854(uint64_t a1)
{
  return a1;
}

unint64_t sub_255DBE884()
{
  unint64_t result = qword_269F35918;
  if (!qword_269F35918)
  {
    sub_255DBE90C(255, &qword_269F35920, sub_255DBE138, (void (*)(void))sub_255DBE97C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35918);
  }
  return result;
}

void sub_255DBE90C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = sub_255EEF950();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_255DBE97C()
{
  return sub_255DBE9B0(&qword_269F35928, sub_255DBE138);
}

uint64_t sub_255DBE9B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_255DBE9F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    uint64_t v27 = (uint64_t *)(v26 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v4 = *(int *)(a3 + 20);
    long long v5 = (char *)a1 + v4;
    unint64_t v6 = (char *)a2 + v4;
    uint64_t v282 = *(void **)((char *)a2 + v4);
    *(uint64_t *)((char *)a1 + v4) = (uint64_t)v282;
    uint64_t v287 = (int *)type metadata accessor for MedicalIDDataViewModel();
    uint64_t v288 = v6;
    uint64_t v7 = v287[5];
    id v285 = v5;
    unint64_t v8 = &v5[v7];
    uint64_t v9 = &v6[v7];
    uint64_t v10 = *(void *)&v6[v7 + 8];
    *(void *)unint64_t v8 = *(void *)&v6[v7];
    *((void *)v8 + 1) = v10;
    uint64_t v12 = *(void *)&v6[v7 + 16];
    uint64_t v11 = *(void *)&v6[v7 + 24];
    *((void *)v8 + 2) = v12;
    *((void *)v8 + 3) = v11;
    uint64_t v13 = *((void *)v9 + 5);
    *((void *)v8 + 4) = *((void *)v9 + 4);
    *((void *)v8 + 5) = v13;
    uint64_t v14 = *((void *)v9 + 7);
    *((void *)v8 + 6) = *((void *)v9 + 6);
    *((void *)v8 + 7) = v14;
    uint64_t v15 = *((void *)v9 + 9);
    *((void *)v8 + 8) = *((void *)v9 + 8);
    *((void *)v8 + 9) = v15;
    uint64_t v16 = *((void *)v9 + 11);
    *((void *)v8 + 10) = *((void *)v9 + 10);
    *((void *)v8 + 11) = v16;
    uint64_t v279 = (void *)*((void *)v9 + 12);
    uint64_t v280 = (void *)*((void *)v9 + 13);
    *((void *)v8 + 12) = v279;
    *((void *)v8 + 13) = v280;
    uint64_t v290 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v17 = v290[13];
    uint64_t v286 = &v8[v17];
    char v18 = &v9[v17];
    uint64_t v19 = sub_255EEE100();
    uint64_t v284 = *(void *)(v19 - 8);
    int v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48);
    id v21 = v282;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = v279;
    id v23 = v280;
    if (v20(v18, 1, v19))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v286, v18, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v284;
    }
    else
    {
      uint64_t v25 = v284;
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v286, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(v286, 0, 1, v19);
    }
    uint64_t v28 = v290[14];
    uint64_t v29 = &v8[v28];
    char v30 = &v9[v28];
    if (v20(&v9[v28], 1, v19))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v29, v30, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v19);
    }
    uint64_t v32 = v290[15];
    uint64_t v33 = &v8[v32];
    long long v34 = &v9[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = v290[16];
    long long v37 = &v8[v36];
    uint64_t v38 = &v9[v36];
    uint64_t v39 = *((void *)v38 + 1);
    *(void *)long long v37 = *(void *)v38;
    *((void *)v37 + 1) = v39;
    v8[v290[17]] = v9[v290[17]];
    v8[v290[18]] = v9[v290[18]];
    uint64_t v40 = v290[19];
    uint64_t v41 = &v8[v40];
    long long v42 = (uint64_t *)&v9[v40];
    unint64_t v43 = *(void *)&v9[v40 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    }
    else
    {
      uint64_t v44 = *v42;
      sub_255D80890(*v42, v43);
      *(void *)uint64_t v41 = v44;
      *((void *)v41 + 1) = v43;
    }
    uint64_t v45 = v290[20];
    char v46 = &v8[v45];
    long long v47 = &v9[v45];
    uint64_t v48 = sub_255EEDF60();
    uint64_t v49 = *(void *)(v48 - 8);
    int v278 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    if (v278(v47, 1, v48))
    {
      sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    uint64_t v51 = v290[21];
    int v52 = *(void **)&v9[v51];
    *(void *)&v8[v51] = v52;
    uint64_t v53 = v290[22];
    uint64_t v54 = &v8[v53];
    char v55 = &v9[v53];
    id v56 = v52;
    uint64_t v289 = v20;
    uint64_t v273 = v49;
    uint64_t v274 = v48;
    uint64_t v275 = v19;
    if (v20(v55, 1, v19))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v54, v55, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v19);
    }
    uint64_t v58 = v287[6];
    uint64_t v59 = &v285[v58];
    int v60 = &v288[v58];
    uint64_t v61 = sub_255EEE280();
    uint64_t v276 = *(void (**)(char *, char *))(*(void *)(v61 - 8) + 16);
    uint64_t v277 = v61;
    v276(v59, v60);
    uint64_t v62 = v287[7];
    uint64_t v63 = *(void **)&v288[v62];
    *(void *)&v285[v62] = v63;
    uint64_t v64 = v287[8];
    uint64_t v65 = &v285[v64];
    uint64_t v66 = &v288[v64];
    uint64_t v67 = sub_255EEE200();
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
    id v69 = v63;
    uint64_t v281 = v68;
    uint64_t v283 = v67;
    v68(v65, v66, v67);
    uint64_t v70 = v287[9];
    uint64_t v71 = &v285[v70];
    uint64_t v72 = &v288[v70];
    uint64_t v73 = *(void *)&v288[v70 + 8];
    *(void *)uint64_t v71 = *(void *)&v288[v70];
    *((void *)v71 + 1) = v73;
    int v262 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    uint64_t v265 = v72;
    uint64_t v74 = v262[5];
    uint64_t v268 = v71;
    uint64_t v75 = &v71[v74];
    uint64_t v76 = &v72[v74];
    uint64_t v77 = *(void *)&v72[v74 + 8];
    *(void *)uint64_t v75 = *(void *)&v72[v74];
    *((void *)v75 + 1) = v77;
    uint64_t v79 = *(void *)&v72[v74 + 16];
    uint64_t v78 = *(void *)&v72[v74 + 24];
    *((void *)v75 + 2) = v79;
    *((void *)v75 + 3) = v78;
    uint64_t v80 = *((void *)v76 + 5);
    *((void *)v75 + 4) = *((void *)v76 + 4);
    *((void *)v75 + 5) = v80;
    uint64_t v81 = *((void *)v76 + 7);
    *((void *)v75 + 6) = *((void *)v76 + 6);
    *((void *)v75 + 7) = v81;
    uint64_t v82 = *((void *)v76 + 9);
    *((void *)v75 + 8) = *((void *)v76 + 8);
    *((void *)v75 + 9) = v82;
    uint64_t v83 = *((void *)v76 + 11);
    *((void *)v75 + 10) = *((void *)v76 + 10);
    *((void *)v75 + 11) = v83;
    unint64_t v85 = (void *)*((void *)v76 + 12);
    unint64_t v84 = (void *)*((void *)v76 + 13);
    *((void *)v75 + 12) = v85;
    *((void *)v75 + 13) = v84;
    uint64_t v86 = v290[13];
    __dst = &v75[v86];
    int v258 = &v76[v86];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v87 = v85;
    id v88 = v84;
    if (v20(v258, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v258, *(void *)(*(void *)(v89 - 8) + 64));
      uint64_t v90 = v284;
    }
    else
    {
      uint64_t v90 = v284;
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(__dst, v258, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(__dst, 0, 1, v275);
    }
    uint64_t v91 = v290[14];
    uint64_t v92 = &v75[v91];
    long long v93 = &v76[v91];
    if (v20(&v76[v91], 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v92, v93, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v275);
    }
    uint64_t v95 = v290[15];
    uint64_t v96 = &v75[v95];
    uint64_t v97 = &v76[v95];
    uint64_t v98 = *((void *)v97 + 1);
    *(void *)uint64_t v96 = *(void *)v97;
    *((void *)v96 + 1) = v98;
    uint64_t v99 = v290[16];
    uint64_t v100 = &v75[v99];
    uint64_t v101 = &v76[v99];
    uint64_t v102 = *((void *)v101 + 1);
    *(void *)uint64_t v100 = *(void *)v101;
    *((void *)v100 + 1) = v102;
    v75[v290[17]] = v76[v290[17]];
    v75[v290[18]] = v76[v290[18]];
    uint64_t v103 = v290[19];
    uint64_t v104 = &v75[v103];
    uint64_t v105 = (uint64_t *)&v76[v103];
    unint64_t v106 = *(void *)&v76[v103 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v106 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
    }
    else
    {
      uint64_t v107 = *v105;
      sub_255D80890(*v105, v106);
      *(void *)uint64_t v104 = v107;
      *((void *)v104 + 1) = v106;
    }
    uint64_t v108 = v290[20];
    uint64_t v109 = &v75[v108];
    uint64_t v110 = &v76[v108];
    if (v278(&v76[v108], 1, v274))
    {
      sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
      memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v273 + 16))(v109, v110, v274);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v273 + 56))(v109, 0, 1, v274);
    }
    uint64_t v112 = v290[21];
    long long v113 = *(void **)&v76[v112];
    *(void *)&v75[v112] = v113;
    uint64_t v114 = v290[22];
    long long v115 = &v75[v114];
    uint64_t v116 = &v76[v114];
    id v117 = v113;
    if (v20(v116, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v115, v116, *(void *)(*(void *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v115, v116, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v115, 0, 1, v275);
    }
    v281(&v268[v262[6]], &v265[v262[6]], v67);
    uint64_t v119 = v262[7];
    uint64_t v120 = &v268[v119];
    uint64_t v121 = &v265[v119];
    v281(&v268[v119], &v265[v119], v67);
    uint64_t v122 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    id v123 = *(void **)&v121[v122];
    *(void *)&v120[v122] = v123;
    uint64_t v124 = v262[8];
    uint64_t v125 = &v268[v124];
    uint64_t v126 = &v265[v124];
    id v127 = v123;
    v281(v125, v126, v67);
    uint64_t v128 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v129 = *(int *)(v128 + 20);
    uint64_t v130 = *(void **)&v126[v129];
    *(void *)&v125[v129] = v130;
    uint64_t v131 = *(int *)(v128 + 24);
    uint64_t v132 = *(void **)&v126[v131];
    *(void *)&v125[v131] = v132;
    uint64_t v133 = v287[10];
    uint64_t v134 = &v285[v133];
    uint64_t v135 = &v288[v133];
    uint64_t v136 = *(void *)&v288[v133 + 8];
    *(void *)uint64_t v134 = *(void *)&v288[v133];
    *((void *)v134 + 1) = v136;
    uint64_t v138 = *(void *)&v288[v133 + 16];
    uint64_t v137 = *(void *)&v288[v133 + 24];
    *((void *)v134 + 2) = v138;
    *((void *)v134 + 3) = v137;
    uint64_t v139 = *((void *)v135 + 5);
    *((void *)v134 + 4) = *((void *)v135 + 4);
    *((void *)v134 + 5) = v139;
    uint64_t v140 = *((void *)v135 + 7);
    *((void *)v134 + 6) = *((void *)v135 + 6);
    *((void *)v134 + 7) = v140;
    uint64_t v141 = *((void *)v135 + 9);
    *((void *)v134 + 8) = *((void *)v135 + 8);
    *((void *)v134 + 9) = v141;
    uint64_t v142 = *((void *)v135 + 11);
    *((void *)v134 + 10) = *((void *)v135 + 10);
    *((void *)v134 + 11) = v142;
    uint64_t v143 = (void *)*((void *)v135 + 12);
    int v266 = (void *)*((void *)v135 + 13);
    *((void *)v134 + 12) = v143;
    *((void *)v134 + 13) = v266;
    uint64_t v144 = v290[13];
    uint64_t v269 = &v134[v144];
    uint64_t v263 = &v135[v144];
    id v145 = v130;
    id v146 = v132;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v147 = v143;
    id v148 = v266;
    if (v289(v263, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v269, v263, *(void *)(*(void *)(v149 - 8) + 64));
      uint64_t v150 = v284;
    }
    else
    {
      uint64_t v150 = v284;
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v269, v263, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(v269, 0, 1, v275);
    }
    uint64_t v151 = v290[14];
    uint64_t v152 = &v134[v151];
    uint64_t v153 = &v135[v151];
    if (v289(&v135[v151], 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v152, v153, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v152, 0, 1, v275);
    }
    uint64_t v155 = v290[15];
    uint64_t v156 = &v134[v155];
    uint64_t v157 = &v135[v155];
    uint64_t v158 = *((void *)v157 + 1);
    *(void *)uint64_t v156 = *(void *)v157;
    *((void *)v156 + 1) = v158;
    uint64_t v159 = v290[16];
    uint64_t v160 = &v134[v159];
    uint64_t v161 = &v135[v159];
    uint64_t v162 = *((void *)v161 + 1);
    *(void *)uint64_t v160 = *(void *)v161;
    *((void *)v160 + 1) = v162;
    v134[v290[17]] = v135[v290[17]];
    v134[v290[18]] = v135[v290[18]];
    uint64_t v163 = v290[19];
    char v164 = &v134[v163];
    int v165 = (uint64_t *)&v135[v163];
    unint64_t v166 = *(void *)&v135[v163 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v166 >> 60 == 15)
    {
      *(_OWORD *)char v164 = *(_OWORD *)v165;
    }
    else
    {
      uint64_t v167 = *v165;
      sub_255D80890(*v165, v166);
      *(void *)char v164 = v167;
      *((void *)v164 + 1) = v166;
    }
    uint64_t v168 = v290[20];
    int v169 = &v134[v168];
    int v170 = &v135[v168];
    if (v278(&v135[v168], 1, v274))
    {
      sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
      memcpy(v169, v170, *(void *)(*(void *)(v171 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v273 + 16))(v169, v170, v274);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v273 + 56))(v169, 0, 1, v274);
    }
    uint64_t v172 = v290[21];
    uint64_t v173 = *(void **)&v135[v172];
    *(void *)&v134[v172] = v173;
    uint64_t v174 = v290[22];
    uint64_t v175 = &v134[v174];
    uint64_t v176 = &v135[v174];
    id v177 = v173;
    if (v289(v176, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v175, v176, *(void *)(*(void *)(v178 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v175, v176, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v175, 0, 1, v275);
    }
    uint64_t v179 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v276)(&v134[v179[5]], &v135[v179[5]], v277);
    v281(&v134[v179[6]], &v135[v179[6]], v67);
    uint64_t v180 = v179[7];
    unint64_t v181 = *(void **)&v135[v180];
    *(void *)&v134[v180] = v181;
    uint64_t v182 = v179[8];
    uint64_t v183 = *(void **)&v135[v182];
    *(void *)&v134[v182] = v183;
    uint64_t v184 = v179[9];
    unint64_t v185 = &v134[v184];
    uint64_t v186 = &v135[v184];
    uint64_t v187 = *((void *)v186 + 1);
    *(void *)unint64_t v185 = *(void *)v186;
    *((void *)v185 + 1) = v187;
    uint64_t v188 = v287[11];
    uint64_t v189 = &v285[v188];
    uint64_t v190 = &v288[v188];
    uint64_t v191 = *(void **)&v288[v188];
    *(void *)&v285[v188] = v191;
    uint64_t v192 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v193 = *(int *)(v192 + 20);
    uint64_t v194 = &v189[v193];
    int v195 = &v190[v193];
    id v196 = v181;
    id v197 = v183;
    swift_bridgeObjectRetain();
    id v198 = v191;
    ((void (*)(char *, char *, uint64_t))v276)(v194, v195, v277);
    v281(&v189[*(int *)(v192 + 24)], &v190[*(int *)(v192 + 24)], v283);
    uint64_t v199 = v287[12];
    int v200 = &v285[v199];
    uint64_t v201 = &v288[v199];
    uint64_t v202 = *(void *)&v288[v199 + 8];
    *(void *)int v200 = *(void *)&v288[v199];
    *((void *)v200 + 1) = v202;
    uint64_t v264 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    int v267 = v200;
    uint64_t v203 = v264[5];
    uint64_t v204 = &v200[v203];
    uint64_t v270 = v201;
    uint64_t v205 = &v201[v203];
    uint64_t v206 = *(void *)&v201[v203 + 8];
    *(void *)uint64_t v204 = *(void *)&v201[v203];
    *((void *)v204 + 1) = v206;
    uint64_t v208 = *(void *)&v201[v203 + 16];
    uint64_t v207 = *(void *)&v201[v203 + 24];
    *((void *)v204 + 2) = v208;
    *((void *)v204 + 3) = v207;
    uint64_t v209 = *((void *)v205 + 5);
    *((void *)v204 + 4) = *((void *)v205 + 4);
    *((void *)v204 + 5) = v209;
    uint64_t v210 = *((void *)v205 + 7);
    *((void *)v204 + 6) = *((void *)v205 + 6);
    *((void *)v204 + 7) = v210;
    uint64_t v211 = *((void *)v205 + 9);
    *((void *)v204 + 8) = *((void *)v205 + 8);
    *((void *)v204 + 9) = v211;
    uint64_t v212 = *((void *)v205 + 11);
    *((void *)v204 + 10) = *((void *)v205 + 10);
    *((void *)v204 + 11) = v212;
    uint64_t v214 = (void *)*((void *)v205 + 12);
    uint64_t v213 = (void *)*((void *)v205 + 13);
    *((void *)v204 + 12) = v214;
    *((void *)v204 + 13) = v213;
    uint64_t v215 = v290[13];
    __dsta = &v204[v215];
    int v259 = &v205[v215];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v216 = v214;
    id v217 = v213;
    uint64_t v218 = v289;
    if (v289(v259, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v259, *(void *)(*(void *)(v219 - 8) + 64));
      uint64_t v220 = v284;
    }
    else
    {
      uint64_t v220 = v284;
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(__dsta, v259, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(__dsta, 0, 1, v275);
    }
    uint64_t v221 = v290[14];
    uint64_t v222 = &v204[v221];
    uint64_t v223 = &v205[v221];
    if (v289(&v205[v221], 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v222, v223, *(void *)(*(void *)(v224 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v222, v223, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v222, 0, 1, v275);
    }
    uint64_t v225 = v290[15];
    uint64_t v226 = &v204[v225];
    uint64_t v227 = &v205[v225];
    uint64_t v228 = *((void *)v227 + 1);
    *(void *)uint64_t v226 = *(void *)v227;
    *((void *)v226 + 1) = v228;
    uint64_t v229 = v290[16];
    uint64_t v230 = &v204[v229];
    int v231 = &v205[v229];
    uint64_t v232 = *((void *)v231 + 1);
    *(void *)uint64_t v230 = *(void *)v231;
    *((void *)v230 + 1) = v232;
    v204[v290[17]] = v205[v290[17]];
    v204[v290[18]] = v205[v290[18]];
    uint64_t v233 = v290[19];
    uint64_t v234 = &v204[v233];
    uint64_t v235 = (uint64_t *)&v205[v233];
    unint64_t v236 = *(void *)&v205[v233 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v236 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
    }
    else
    {
      uint64_t v237 = *v235;
      sub_255D80890(*v235, v236);
      *(void *)uint64_t v234 = v237;
      *((void *)v234 + 1) = v236;
    }
    uint64_t v27 = a1;
    uint64_t v238 = v290[20];
    uint64_t v239 = &v204[v238];
    uint64_t v240 = &v205[v238];
    if (v278(&v205[v238], 1, v274))
    {
      sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
      memcpy(v239, v240, *(void *)(*(void *)(v241 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v273 + 16))(v239, v240, v274);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v273 + 56))(v239, 0, 1, v274);
      uint64_t v218 = v289;
    }
    uint64_t v242 = v290[21];
    uint64_t v243 = *(void **)&v205[v242];
    *(void *)&v204[v242] = v243;
    uint64_t v244 = v290[22];
    uint64_t v245 = &v204[v244];
    uint64_t v246 = &v205[v244];
    id v247 = v243;
    if (v218(v246, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v245, v246, *(void *)(*(void *)(v248 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v245, v246, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v245, 0, 1, v275);
    }
    ((void (*)(char *, char *, uint64_t))v276)(&v267[v264[6]], &v270[v264[6]], v277);
    v281(&v267[v264[7]], &v270[v264[7]], v283);
    *(void *)&v267[v264[8]] = *(void *)&v270[v264[8]];
    uint64_t v249 = v264[9];
    uint64_t v250 = &v267[v249];
    uint64_t v251 = &v270[v249];
    swift_retain();
    if (v218(v251, 1, v275))
    {
      sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
      memcpy(v250, v251, *(void *)(*(void *)(v252 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v250, v251, v275);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v250, 0, 1, v275);
    }
    uint64_t v253 = v287[13];
    uint64_t v254 = *(void **)&v288[v253];
    *(void *)&v285[v253] = v254;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    id v255 = v254;
  }
  swift_retain();
  return v27;
}

uint64_t sub_255DC00CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (id *)(a1 + *(int *)(a2 + 20));

  uint64_t v58 = (int *)type metadata accessor for MedicalIDDataViewModel();
  int v3 = (id *)((char *)v2 + v58[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  long long v5 = (char *)v3 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
  if (!v7(v5, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v5, v6);
  }
  unint64_t v8 = (char *)v3 + v4[14];
  if (!v7(v8, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v8, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)((char *)v3 + v4[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = (char *)v3 + v4[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v50 = *(void *)(v12 - 8);
  id v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (!v56(v11, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v12);
  }

  uint64_t v13 = (char *)v3 + v4[22];
  if (!v7(v13, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v6);
  }
  uint64_t v14 = (char *)v2 + v58[6];
  uint64_t v51 = sub_255EEE280();
  int v52 = (void (**)(char *))(*(void *)(v51 - 8) + 8);
  uint64_t v53 = *v52;
  (*v52)(v14);

  uint64_t v15 = (char *)v2 + v58[8];
  uint64_t v16 = sub_255EEE200();
  uint64_t v54 = *(void (**)(char *))(*(void *)(v16 - 8) + 8);
  uint64_t v55 = v16;
  v54(v15);
  uint64_t v57 = v2;
  uint64_t v17 = (char *)v2 + v58[9];
  swift_bridgeObjectRelease();
  char v18 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v19 = &v17[v18[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  int v20 = &v19[v4[13]];
  if (!v7(v20, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v6);
  }
  id v21 = &v19[v4[14]];
  if (!v7(v21, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v22 = (uint64_t *)&v19[v4[19]];
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_255D80D04(*v22, v23);
  }
  uint64_t v24 = &v19[v4[20]];
  if (!v56(v24, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v24, v12);
  }

  uint64_t v25 = &v19[v4[22]];
  if (!v7(v25, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v6);
  }
  ((void (*)(char *, uint64_t))v54)(&v17[v18[6]], v55);
  uint64_t v26 = &v17[v18[7]];
  ((void (*)(char *, uint64_t))v54)(v26, v55);

  uint64_t v27 = &v17[v18[8]];
  ((void (*)(char *, uint64_t))v54)(v27, v55);
  uint64_t v28 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v29 = (id *)((char *)v57 + v58[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  char v30 = (char *)v29 + v4[13];
  if (!v7(v30, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v6);
  }
  uint64_t v31 = (char *)v29 + v4[14];
  if (!v7(v31, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = (uint64_t *)((char *)v29 + v4[19]);
  unint64_t v33 = v32[1];
  if (v33 >> 60 != 15) {
    sub_255D80D04(*v32, v33);
  }
  long long v34 = (char *)v29 + v4[20];
  if (!v56(v34, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v12);
  }

  uint64_t v35 = (char *)v29 + v4[22];
  if (!v7(v35, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v6);
  }
  uint64_t v36 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v29 + v36[5], v51);
  ((void (*)(char *, uint64_t))v54)((char *)v29 + v36[6], v55);

  swift_bridgeObjectRelease();
  long long v37 = (id *)((char *)v57 + v58[11]);

  uint64_t v38 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v53)((char *)v37 + *(int *)(v38 + 20), v51);
  ((void (*)(char *, uint64_t))v54)((char *)v37 + *(int *)(v38 + 24), v55);
  uint64_t v39 = (char *)v57 + v58[12];
  swift_bridgeObjectRelease();
  uint64_t v40 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v41 = &v39[v40[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  long long v42 = &v41[v4[13]];
  if (!v7(v42, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v6);
  }
  unint64_t v43 = &v41[v4[14]];
  if (!v7(v43, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v43, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v44 = (uint64_t *)&v41[v4[19]];
  unint64_t v45 = v44[1];
  if (v45 >> 60 != 15) {
    sub_255D80D04(*v44, v45);
  }
  char v46 = &v41[v4[20]];
  if (!v56(v46, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v12);
  }

  long long v47 = &v41[v4[22]];
  if (!v7(v47, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v6);
  }
  ((void (*)(char *, uint64_t))v53)(&v39[v40[6]], v51);
  ((void (*)(char *, uint64_t))v54)(&v39[v40[7]], v55);
  swift_release();
  uint64_t v48 = &v39[v40[9]];
  if (!v7(v48, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v6);
  }

  return swift_release();
}

unsigned char *sub_255DC0B44(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = &a1[v3];
  long long v5 = &a2[v3];
  uint64_t v279 = *(void **)&a2[v3];
  *(void *)&a1[v3] = v279;
  uint64_t v284 = (int *)type metadata accessor for MedicalIDDataViewModel();
  id v285 = v5;
  uint64_t v6 = v284[5];
  uint64_t v282 = v4;
  uint64_t v7 = &v4[v6];
  unint64_t v8 = &v5[v6];
  uint64_t v9 = *(void *)&v5[v6 + 8];
  *uint64_t v7 = *(void *)&v5[v6];
  v7[1] = v9;
  uint64_t v11 = *(void *)&v5[v6 + 16];
  uint64_t v10 = *(void *)&v5[v6 + 24];
  void v7[2] = v11;
  v7[3] = v10;
  uint64_t v12 = *((void *)v8 + 5);
  v7[4] = *((void *)v8 + 4);
  v7[5] = v12;
  uint64_t v13 = *((void *)v8 + 7);
  v7[6] = *((void *)v8 + 6);
  v7[7] = v13;
  uint64_t v14 = *((void *)v8 + 9);
  v7[8] = *((void *)v8 + 8);
  v7[9] = v14;
  uint64_t v15 = *((void *)v8 + 11);
  v7[10] = *((void *)v8 + 10);
  v7[11] = v15;
  uint64_t v276 = (void *)*((void *)v8 + 12);
  uint64_t v277 = (void *)*((void *)v8 + 13);
  v7[12] = v276;
  v7[13] = v277;
  uint64_t v287 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v287[13];
  uint64_t v283 = (char *)v7 + v16;
  uint64_t v17 = &v8[v16];
  uint64_t v18 = sub_255EEE100();
  uint64_t v281 = *(void *)(v18 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48);
  id v20 = v279;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = v276;
  id v22 = v277;
  if (v19(v17, 1, v18))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v283, v17, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v24 = v281;
  }
  else
  {
    uint64_t v24 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v283, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v283, 0, 1, v18);
  }
  uint64_t v25 = v287[14];
  uint64_t v26 = (char *)v7 + v25;
  uint64_t v27 = &v8[v25];
  if (v19(&v8[v25], 1, v18))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v27, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v18);
  }
  uint64_t v29 = v287[15];
  char v30 = (void *)((char *)v7 + v29);
  uint64_t v31 = &v8[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *char v30 = *(void *)v31;
  v30[1] = v32;
  uint64_t v33 = v287[16];
  long long v34 = (void *)((char *)v7 + v33);
  uint64_t v35 = &v8[v33];
  uint64_t v36 = *((void *)v35 + 1);
  *long long v34 = *(void *)v35;
  v34[1] = v36;
  *((unsigned char *)v7 + v287[17]) = v8[v287[17]];
  *((unsigned char *)v7 + v287[18]) = v8[v287[18]];
  uint64_t v37 = v287[19];
  uint64_t v38 = (char *)v7 + v37;
  uint64_t v39 = (uint64_t *)&v8[v37];
  unint64_t v40 = *(void *)&v8[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  }
  else
  {
    uint64_t v41 = *v39;
    sub_255D80890(*v39, v40);
    *(void *)uint64_t v38 = v41;
    *((void *)v38 + 1) = v40;
  }
  uint64_t v42 = v287[20];
  unint64_t v43 = (char *)v7 + v42;
  uint64_t v44 = &v8[v42];
  uint64_t v45 = sub_255EEDF60();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v275 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  if (v275(v44, 1, v45))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  uint64_t v48 = v287[21];
  uint64_t v49 = *(void **)&v8[v48];
  *(void *)((char *)v7 + v48) = v49;
  uint64_t v50 = v287[22];
  uint64_t v51 = (char *)v7 + v50;
  int v52 = &v8[v50];
  id v53 = v49;
  uint64_t v286 = v19;
  uint64_t v270 = v46;
  uint64_t v271 = v45;
  uint64_t v272 = v18;
  if (v19(v52, 1, v18))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v51, v52, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v51, 0, 1, v18);
  }
  uint64_t v55 = v284[6];
  id v56 = &v282[v55];
  uint64_t v57 = &v285[v55];
  uint64_t v58 = sub_255EEE280();
  uint64_t v273 = *(void (**)(unsigned char *, unsigned char *))(*(void *)(v58 - 8) + 16);
  uint64_t v274 = v58;
  v273(v56, v57);
  uint64_t v59 = v284[7];
  int v60 = *(void **)&v285[v59];
  *(void *)&v282[v59] = v60;
  uint64_t v61 = v284[8];
  uint64_t v62 = &v282[v61];
  uint64_t v63 = &v285[v61];
  uint64_t v64 = sub_255EEE200();
  uint64_t v65 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v64 - 8) + 16);
  id v66 = v60;
  int v278 = v65;
  uint64_t v280 = v64;
  v65(v62, v63, v64);
  uint64_t v67 = v284[9];
  uint64_t v68 = &v282[v67];
  id v69 = &v285[v67];
  uint64_t v70 = *(void *)&v285[v67 + 8];
  *(void *)uint64_t v68 = *(void *)&v285[v67];
  *((void *)v68 + 1) = v70;
  int v259 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  int v262 = v69;
  uint64_t v71 = v259[5];
  uint64_t v265 = v68;
  uint64_t v72 = &v68[v71];
  uint64_t v73 = &v69[v71];
  uint64_t v74 = *(void *)&v69[v71 + 8];
  *(void *)uint64_t v72 = *(void *)&v69[v71];
  *((void *)v72 + 1) = v74;
  uint64_t v76 = *(void *)&v69[v71 + 16];
  uint64_t v75 = *(void *)&v69[v71 + 24];
  *((void *)v72 + 2) = v76;
  *((void *)v72 + 3) = v75;
  uint64_t v77 = *((void *)v73 + 5);
  *((void *)v72 + 4) = *((void *)v73 + 4);
  *((void *)v72 + 5) = v77;
  uint64_t v78 = *((void *)v73 + 7);
  *((void *)v72 + 6) = *((void *)v73 + 6);
  *((void *)v72 + 7) = v78;
  uint64_t v79 = *((void *)v73 + 9);
  *((void *)v72 + 8) = *((void *)v73 + 8);
  *((void *)v72 + 9) = v79;
  uint64_t v80 = *((void *)v73 + 11);
  *((void *)v72 + 10) = *((void *)v73 + 10);
  *((void *)v72 + 11) = v80;
  uint64_t v82 = (void *)*((void *)v73 + 12);
  uint64_t v81 = (void *)*((void *)v73 + 13);
  *((void *)v72 + 12) = v82;
  *((void *)v72 + 13) = v81;
  uint64_t v83 = v287[13];
  __dst = &v72[v83];
  id v255 = &v73[v83];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v84 = v82;
  id v85 = v81;
  if (v19(v255, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v255, *(void *)(*(void *)(v86 - 8) + 64));
    uint64_t v87 = v281;
  }
  else
  {
    uint64_t v87 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(__dst, v255, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(__dst, 0, 1, v272);
  }
  uint64_t v88 = v287[14];
  uint64_t v89 = &v72[v88];
  uint64_t v90 = &v73[v88];
  if (v19(&v73[v88], 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v89, v90, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v89, 0, 1, v272);
  }
  uint64_t v92 = v287[15];
  long long v93 = &v72[v92];
  uint64_t v94 = &v73[v92];
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)long long v93 = *(void *)v94;
  *((void *)v93 + 1) = v95;
  uint64_t v96 = v287[16];
  uint64_t v97 = &v72[v96];
  uint64_t v98 = &v73[v96];
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = v99;
  v72[v287[17]] = v73[v287[17]];
  v72[v287[18]] = v73[v287[18]];
  uint64_t v100 = v287[19];
  uint64_t v101 = &v72[v100];
  uint64_t v102 = (uint64_t *)&v73[v100];
  unint64_t v103 = *(void *)&v73[v100 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v103 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
  }
  else
  {
    uint64_t v104 = *v102;
    sub_255D80890(*v102, v103);
    *(void *)uint64_t v101 = v104;
    *((void *)v101 + 1) = v103;
  }
  uint64_t v105 = v287[20];
  unint64_t v106 = &v72[v105];
  uint64_t v107 = &v73[v105];
  if (v275(&v73[v105], 1, v271))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v270 + 16))(v106, v107, v271);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v270 + 56))(v106, 0, 1, v271);
  }
  uint64_t v109 = v287[21];
  uint64_t v110 = *(void **)&v73[v109];
  *(void *)&v72[v109] = v110;
  uint64_t v111 = v287[22];
  uint64_t v112 = &v72[v111];
  long long v113 = &v73[v111];
  id v114 = v110;
  if (v19(v113, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v112, v113, *(void *)(*(void *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v112, v113, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v112, 0, 1, v272);
  }
  v278(&v265[v259[6]], &v262[v259[6]], v64);
  uint64_t v116 = v259[7];
  id v117 = &v265[v116];
  uint64_t v118 = &v262[v116];
  v278(&v265[v116], &v262[v116], v64);
  uint64_t v119 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v120 = *(void **)&v118[v119];
  *(void *)&v117[v119] = v120;
  uint64_t v121 = v259[8];
  uint64_t v122 = &v265[v121];
  id v123 = &v262[v121];
  id v124 = v120;
  v278(v122, v123, v64);
  uint64_t v125 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v126 = *(int *)(v125 + 20);
  id v127 = *(void **)&v123[v126];
  *(void *)&v122[v126] = v127;
  uint64_t v128 = *(int *)(v125 + 24);
  uint64_t v260 = *(void **)&v123[v128];
  *(void *)&v122[v128] = v260;
  uint64_t v129 = v284[10];
  uint64_t v130 = &v282[v129];
  uint64_t v131 = &v285[v129];
  uint64_t v132 = *(void *)&v285[v129 + 8];
  void *v130 = *(void *)&v285[v129];
  v130[1] = v132;
  uint64_t v134 = *(void *)&v285[v129 + 16];
  uint64_t v133 = *(void *)&v285[v129 + 24];
  v130[2] = v134;
  v130[3] = v133;
  uint64_t v135 = *((void *)v131 + 5);
  v130[4] = *((void *)v131 + 4);
  v130[5] = v135;
  uint64_t v136 = *((void *)v131 + 7);
  v130[6] = *((void *)v131 + 6);
  v130[7] = v136;
  uint64_t v137 = *((void *)v131 + 9);
  v130[8] = *((void *)v131 + 8);
  v130[9] = v137;
  uint64_t v138 = *((void *)v131 + 11);
  v130[10] = *((void *)v131 + 10);
  v130[11] = v138;
  uint64_t v139 = (void *)*((void *)v131 + 12);
  uint64_t v263 = (void *)*((void *)v131 + 13);
  v130[12] = v139;
  v130[13] = v263;
  uint64_t v140 = v287[13];
  int v266 = (char *)v130 + v140;
  uint64_t v141 = &v131[v140];
  id v142 = v127;
  id v143 = v260;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v144 = v139;
  id v145 = v263;
  if (v286(v141, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v266, v141, *(void *)(*(void *)(v146 - 8) + 64));
    uint64_t v147 = v281;
  }
  else
  {
    uint64_t v147 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v266, v141, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v266, 0, 1, v272);
  }
  uint64_t v148 = v287[14];
  uint64_t v149 = (char *)v130 + v148;
  uint64_t v150 = &v131[v148];
  if (v286(&v131[v148], 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v149, v150, *(void *)(*(void *)(v151 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v149, v150, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v149, 0, 1, v272);
  }
  uint64_t v152 = v287[15];
  uint64_t v153 = (void *)((char *)v130 + v152);
  uint64_t v154 = &v131[v152];
  uint64_t v155 = *((void *)v154 + 1);
  *uint64_t v153 = *(void *)v154;
  v153[1] = v155;
  uint64_t v156 = v287[16];
  uint64_t v157 = (void *)((char *)v130 + v156);
  uint64_t v158 = &v131[v156];
  uint64_t v159 = *((void *)v158 + 1);
  *uint64_t v157 = *(void *)v158;
  v157[1] = v159;
  *((unsigned char *)v130 + v287[17]) = v131[v287[17]];
  *((unsigned char *)v130 + v287[18]) = v131[v287[18]];
  uint64_t v160 = v287[19];
  uint64_t v161 = (char *)v130 + v160;
  uint64_t v162 = (uint64_t *)&v131[v160];
  unint64_t v163 = *(void *)&v131[v160 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v163 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
  }
  else
  {
    uint64_t v164 = *v162;
    sub_255D80890(*v162, v163);
    *(void *)uint64_t v161 = v164;
    *((void *)v161 + 1) = v163;
  }
  uint64_t v165 = v287[20];
  unint64_t v166 = (char *)v130 + v165;
  uint64_t v167 = &v131[v165];
  if (v275(&v131[v165], 1, v271))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v166, v167, *(void *)(*(void *)(v168 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v270 + 16))(v166, v167, v271);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v270 + 56))(v166, 0, 1, v271);
  }
  uint64_t v169 = v287[21];
  int v170 = *(void **)&v131[v169];
  *(void *)((char *)v130 + v169) = v170;
  uint64_t v171 = v287[22];
  uint64_t v172 = (char *)v130 + v171;
  uint64_t v173 = &v131[v171];
  id v174 = v170;
  if (v286(v173, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v172, v173, *(void *)(*(void *)(v175 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v172, v173, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v172, 0, 1, v272);
  }
  uint64_t v176 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v273)((char *)v130 + v176[5], &v131[v176[5]], v274);
  v278((char *)v130 + v176[6], &v131[v176[6]], v64);
  uint64_t v177 = v176[7];
  uint64_t v178 = *(void **)&v131[v177];
  *(void *)((char *)v130 + v177) = v178;
  uint64_t v179 = v176[8];
  uint64_t v180 = *(void **)&v131[v179];
  *(void *)((char *)v130 + v179) = v180;
  uint64_t v181 = v176[9];
  uint64_t v182 = (void *)((char *)v130 + v181);
  uint64_t v183 = &v131[v181];
  uint64_t v184 = *((void *)v183 + 1);
  *uint64_t v182 = *(void *)v183;
  v182[1] = v184;
  uint64_t v185 = v284[11];
  uint64_t v186 = &v282[v185];
  uint64_t v187 = &v285[v185];
  uint64_t v188 = *(void **)&v285[v185];
  *(void *)&v282[v185] = v188;
  uint64_t v189 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v190 = *(int *)(v189 + 20);
  uint64_t v191 = &v186[v190];
  uint64_t v192 = &v187[v190];
  id v193 = v178;
  id v194 = v180;
  swift_bridgeObjectRetain();
  id v195 = v188;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v273)(v191, v192, v274);
  v278(&v186[*(int *)(v189 + 24)], &v187[*(int *)(v189 + 24)], v280);
  uint64_t v196 = v284[12];
  id v197 = &v282[v196];
  id v198 = &v285[v196];
  uint64_t v199 = *(void *)&v285[v196 + 8];
  *(void *)id v197 = *(void *)&v285[v196];
  *((void *)v197 + 1) = v199;
  uint64_t v261 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v264 = v197;
  uint64_t v200 = v261[5];
  uint64_t v201 = &v197[v200];
  int v267 = v198;
  uint64_t v202 = &v198[v200];
  uint64_t v203 = *(void *)&v198[v200 + 8];
  *uint64_t v201 = *(void *)&v198[v200];
  v201[1] = v203;
  uint64_t v205 = *(void *)&v198[v200 + 16];
  uint64_t v204 = *(void *)&v198[v200 + 24];
  v201[2] = v205;
  v201[3] = v204;
  uint64_t v206 = *((void *)v202 + 5);
  v201[4] = *((void *)v202 + 4);
  v201[5] = v206;
  uint64_t v207 = *((void *)v202 + 7);
  v201[6] = *((void *)v202 + 6);
  v201[7] = v207;
  uint64_t v208 = *((void *)v202 + 9);
  v201[8] = *((void *)v202 + 8);
  v201[9] = v208;
  uint64_t v209 = *((void *)v202 + 11);
  v201[10] = *((void *)v202 + 10);
  v201[11] = v209;
  uint64_t v211 = (void *)*((void *)v202 + 12);
  uint64_t v210 = (void *)*((void *)v202 + 13);
  v201[12] = v211;
  v201[13] = v210;
  uint64_t v212 = v287[13];
  __dsta = (char *)v201 + v212;
  uint64_t v256 = &v202[v212];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v213 = v211;
  id v214 = v210;
  uint64_t v215 = v286;
  if (v286(v256, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(__dsta, v256, *(void *)(*(void *)(v216 - 8) + 64));
    uint64_t v217 = v281;
  }
  else
  {
    uint64_t v217 = v281;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(__dsta, v256, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(__dsta, 0, 1, v272);
  }
  uint64_t v218 = v287[14];
  uint64_t v219 = (char *)v201 + v218;
  uint64_t v220 = &v202[v218];
  if (v286(&v202[v218], 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v219, v220, *(void *)(*(void *)(v221 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v219, v220, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v219, 0, 1, v272);
  }
  uint64_t v222 = v287[15];
  uint64_t v223 = (void *)((char *)v201 + v222);
  uint64_t v224 = &v202[v222];
  uint64_t v225 = *((void *)v224 + 1);
  *uint64_t v223 = *(void *)v224;
  v223[1] = v225;
  uint64_t v226 = v287[16];
  uint64_t v227 = (void *)((char *)v201 + v226);
  uint64_t v228 = &v202[v226];
  uint64_t v229 = *((void *)v228 + 1);
  *uint64_t v227 = *(void *)v228;
  v227[1] = v229;
  *((unsigned char *)v201 + v287[17]) = v202[v287[17]];
  *((unsigned char *)v201 + v287[18]) = v202[v287[18]];
  uint64_t v230 = v287[19];
  int v231 = (char *)v201 + v230;
  uint64_t v232 = (uint64_t *)&v202[v230];
  unint64_t v233 = *(void *)&v202[v230 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v233 >> 60 == 15)
  {
    *(_OWORD *)int v231 = *(_OWORD *)v232;
  }
  else
  {
    uint64_t v234 = *v232;
    sub_255D80890(*v232, v233);
    *(void *)int v231 = v234;
    *((void *)v231 + 1) = v233;
  }
  uint64_t v235 = v287[20];
  unint64_t v236 = (char *)v201 + v235;
  uint64_t v237 = &v202[v235];
  if (v275(&v202[v235], 1, v271))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v236, v237, *(void *)(*(void *)(v238 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v270 + 16))(v236, v237, v271);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v270 + 56))(v236, 0, 1, v271);
    uint64_t v215 = v286;
  }
  uint64_t v239 = v287[21];
  uint64_t v240 = *(void **)&v202[v239];
  *(void *)((char *)v201 + v239) = v240;
  uint64_t v241 = v287[22];
  uint64_t v242 = (char *)v201 + v241;
  uint64_t v243 = &v202[v241];
  id v244 = v240;
  if (v215(v243, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v242, v243, *(void *)(*(void *)(v245 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v242, v243, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v242, 0, 1, v272);
  }
  ((void (*)(char *, char *, uint64_t))v273)(&v264[v261[6]], &v267[v261[6]], v274);
  v278(&v264[v261[7]], &v267[v261[7]], v280);
  *(void *)&v264[v261[8]] = *(void *)&v267[v261[8]];
  uint64_t v246 = v261[9];
  id v247 = &v264[v246];
  uint64_t v248 = &v267[v246];
  swift_retain();
  if (v215(v248, 1, v272))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v247, v248, *(void *)(*(void *)(v249 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v247, v248, v272);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v247, 0, 1, v272);
  }
  uint64_t v250 = v284[13];
  uint64_t v251 = *(void **)&v285[v250];
  *(void *)&v282[v250] = v251;
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  id v252 = v251;
  swift_retain();
  return a1;
}

unsigned char *sub_255DC21D8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (void **)&a1[v3];
  long long v5 = &a2[v3];
  uint64_t v6 = *(void **)&a2[v3];
  uint64_t v7 = *v4;
  *uint64_t v4 = v6;
  id v8 = v6;

  uint64_t v291 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v9 = v291[5];
  uint64_t v293 = v4;
  uint64_t v10 = (char *)v4 + v9;
  uint64_t v292 = v5;
  uint64_t v11 = &v5[v9];
  *(void *)uint64_t v10 = *(void *)&v5[v9];
  *((void *)v10 + 1) = *(void *)&v5[v9 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 2) = v11[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 3) = v11[3];
  *((void *)v10 + 4) = v11[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 5) = v11[5];
  *((void *)v10 + 6) = v11[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 7) = v11[7];
  *((void *)v10 + 8) = v11[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 9) = v11[9];
  *((void *)v10 + 10) = v11[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 11) = v11[11];
  uint64_t v12 = (void *)*((void *)v10 + 12);
  uint64_t v13 = (void *)v11[12];
  *((void *)v10 + 12) = v13;
  id v14 = v13;

  uint64_t v15 = (void *)*((void *)v10 + 13);
  uint64_t v16 = (void *)v11[13];
  *((void *)v10 + 13) = v16;
  id v17 = v16;

  uint64_t v18 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v19 = v18[13];
  id v20 = &v10[v19];
  id v21 = (char *)v11 + v19;
  uint64_t v22 = sub_255EEE100();
  uint64_t v295 = *(void *)(v22 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v295 + 48);
  LODWORD(v15) = v23(v20, 1, v22);
  uint64_t v296 = v23;
  int v24 = v23(v21, 1, v22);
  if (v15)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v20, v22);
LABEL_6:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v20, v21, v22);
LABEL_7:
  uint64_t v26 = v18[14];
  uint64_t v27 = &v10[v26];
  uint64_t v28 = (char *)v11 + v26;
  int v29 = v296(&v10[v26], 1, v22);
  int v30 = v296(v28, 1, v22);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v27, v28, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v27, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v27, v22);
LABEL_12:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v27, v28, v22);
LABEL_13:
  uint64_t v32 = v18[15];
  uint64_t v33 = &v10[v32];
  long long v34 = (void *)((char *)v11 + v32);
  *(void *)uint64_t v33 = *v34;
  *((void *)v33 + 1) = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v18[16];
  uint64_t v36 = &v10[v35];
  uint64_t v37 = (void *)((char *)v11 + v35);
  *(void *)uint64_t v36 = *v37;
  *((void *)v36 + 1) = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v18[17]] = *((unsigned char *)v11 + v18[17]);
  v10[v18[18]] = *((unsigned char *)v11 + v18[18]);
  uint64_t v38 = v18[19];
  uint64_t v39 = (uint64_t *)&v10[v38];
  unint64_t v40 = (void *)((char *)v11 + v38);
  unint64_t v41 = *(void *)((char *)v11 + v38 + 8);
  if (*(void *)&v10[v38 + 8] >> 60 == 15)
  {
    if (v41 >> 60 != 15)
    {
      uint64_t v42 = *v40;
      sub_255D80890(v42, v41);
      uint64_t *v39 = v42;
      v39[1] = v41;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v41 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v39);
LABEL_18:
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    goto LABEL_20;
  }
  uint64_t v43 = *v40;
  sub_255D80890(v43, v41);
  uint64_t v44 = *v39;
  unint64_t v45 = v39[1];
  uint64_t *v39 = v43;
  v39[1] = v41;
  sub_255D80D04(v44, v45);
LABEL_20:
  uint64_t v46 = v18[20];
  uint64_t v47 = &v10[v46];
  uint64_t v48 = (char *)v11 + v46;
  uint64_t v49 = sub_255EEDF60();
  uint64_t v284 = *(void *)(v49 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v284 + 48);
  int v51 = v50(v47, 1, v49);
  uint64_t v294 = v49;
  uint64_t v288 = v50;
  int v52 = v50(v48, 1, v49);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(v47, 0, 1, v49);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v47, v49);
LABEL_25:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v284 + 24))(v47, v48, v49);
LABEL_26:
  uint64_t v54 = v18[21];
  uint64_t v55 = *(void **)&v10[v54];
  id v56 = *(void **)((char *)v11 + v54);
  *(void *)&v10[v54] = v56;
  id v57 = v56;

  uint64_t v58 = v18[22];
  uint64_t v59 = &v10[v58];
  int v60 = (char *)v11 + v58;
  LODWORD(v55) = v296(&v10[v58], 1, v22);
  int v61 = v296(v60, 1, v22);
  if (v55)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v59, v60, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v59, 0, 1, v22);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v59, v22);
LABEL_31:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v59, v60, v22);
LABEL_32:
  uint64_t v63 = v291[6];
  uint64_t v64 = (char *)v293 + v63;
  uint64_t v65 = &v292[v63];
  uint64_t v287 = sub_255EEE280();
  uint64_t v283 = *(void (**)(char *, char *, uint64_t))(*(void *)(v287 - 8) + 24);
  ((void (*)(char *, unsigned char *))v283)(v64, v65);
  uint64_t v66 = v291[7];
  uint64_t v67 = *(void **)&v292[v66];
  uint64_t v68 = *(void **)((char *)v293 + v66);
  *(void **)((char *)v293 + v66) = v67;
  id v69 = v67;

  uint64_t v70 = v291[8];
  uint64_t v71 = (char *)v293 + v70;
  uint64_t v72 = &v292[v70];
  uint64_t v73 = sub_255EEE200();
  id v285 = (void (**)(char *, unsigned char *))(*(void *)(v73 - 8) + 24);
  uint64_t v286 = v73;
  uint64_t v289 = (void (*)(char *, unsigned char *, uint64_t))*v285;
  (*v285)(v71, v72);
  uint64_t v74 = v291[9];
  uint64_t v75 = (char *)v293 + v74;
  uint64_t v76 = &v292[v74];
  *(void *)uint64_t v75 = *(void *)&v292[v74];
  *((void *)v75 + 1) = *(void *)&v292[v74 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v276 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  int v278 = v76;
  uint64_t v77 = v276[5];
  uint64_t v290 = v75;
  uint64_t v78 = &v75[v77];
  uint64_t v79 = &v76[v77];
  *(void *)uint64_t v78 = *(void *)&v76[v77];
  *((void *)v78 + 1) = *(void *)&v76[v77 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 2) = v79[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 3) = v79[3];
  *((void *)v78 + 4) = v79[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 5) = v79[5];
  *((void *)v78 + 6) = v79[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 7) = v79[7];
  *((void *)v78 + 8) = v79[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 9) = v79[9];
  *((void *)v78 + 10) = v79[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 11) = v79[11];
  uint64_t v80 = (void *)*((void *)v78 + 12);
  uint64_t v81 = (void *)v79[12];
  *((void *)v78 + 12) = v81;
  id v82 = v81;

  uint64_t v83 = (void *)*((void *)v78 + 13);
  id v84 = (void *)v79[13];
  *((void *)v78 + 13) = v84;
  id v85 = v84;

  uint64_t v86 = v18[13];
  uint64_t v87 = &v78[v86];
  uint64_t v88 = (char *)v79 + v86;
  LODWORD(v83) = v296(&v78[v86], 1, v22);
  int v89 = v296(v88, 1, v22);
  if (v83)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v87, v88, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v87, 0, 1, v22);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v87, v22);
LABEL_37:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v87, v88, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v87, v88, v22);
LABEL_38:
  uint64_t v91 = v18[14];
  uint64_t v92 = &v78[v91];
  long long v93 = (char *)v79 + v91;
  int v94 = v296(&v78[v91], 1, v22);
  int v95 = v296(v93, 1, v22);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v92, v93, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v92, 0, 1, v22);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v92, v22);
LABEL_43:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v92, v93, v22);
LABEL_44:
  uint64_t v97 = v18[15];
  uint64_t v98 = &v78[v97];
  uint64_t v99 = (void *)((char *)v79 + v97);
  *(void *)uint64_t v98 = *v99;
  *((void *)v98 + 1) = v99[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v18[16];
  uint64_t v101 = &v78[v100];
  uint64_t v102 = (void *)((char *)v79 + v100);
  *(void *)uint64_t v101 = *v102;
  *((void *)v101 + 1) = v102[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78[v18[17]] = *((unsigned char *)v79 + v18[17]);
  v78[v18[18]] = *((unsigned char *)v79 + v18[18]);
  uint64_t v103 = v18[19];
  uint64_t v104 = (uint64_t *)&v78[v103];
  uint64_t v105 = (void *)((char *)v79 + v103);
  unint64_t v106 = *(void *)((char *)v79 + v103 + 8);
  if (*(void *)&v78[v103 + 8] >> 60 == 15)
  {
    if (v106 >> 60 != 15)
    {
      uint64_t v107 = *v105;
      sub_255D80890(v107, v106);
      *uint64_t v104 = v107;
      v104[1] = v106;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v106 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v104);
LABEL_49:
    *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
    goto LABEL_51;
  }
  uint64_t v108 = *v105;
  sub_255D80890(v108, v106);
  uint64_t v109 = *v104;
  unint64_t v110 = v104[1];
  *uint64_t v104 = v108;
  v104[1] = v106;
  sub_255D80D04(v109, v110);
LABEL_51:
  uint64_t v111 = v18[20];
  uint64_t v112 = &v78[v111];
  long long v113 = (char *)v79 + v111;
  int v114 = v50(&v78[v111], 1, v294);
  int v115 = v50(v113, 1, v294);
  if (v114)
  {
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v112, v113, v294);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(v112, 0, 1, v294);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v112, v294);
LABEL_56:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v284 + 24))(v112, v113, v294);
LABEL_57:
  uint64_t v117 = v18[21];
  uint64_t v118 = *(void **)&v78[v117];
  uint64_t v119 = *(void **)((char *)v79 + v117);
  *(void *)&v78[v117] = v119;
  id v120 = v119;

  uint64_t v121 = v18[22];
  uint64_t v122 = &v78[v121];
  id v123 = (char *)v79 + v121;
  LODWORD(v118) = v296(&v78[v121], 1, v22);
  int v124 = v296(v123, 1, v22);
  if (v118)
  {
    if (!v124)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v122, v123, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v122, 0, 1, v22);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v124)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v122, v22);
LABEL_62:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v122, v123, v22);
LABEL_63:
  v289(&v290[v276[6]], &v278[v276[6]], v286);
  uint64_t v126 = v276[7];
  id v127 = &v290[v126];
  uint64_t v128 = &v278[v126];
  v289(&v290[v126], &v278[v126], v286);
  uint64_t v129 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v130 = *(void **)&v128[v129];
  uint64_t v131 = *(void **)&v127[v129];
  *(void *)&v127[v129] = v130;
  id v132 = v130;

  uint64_t v133 = v276[8];
  uint64_t v134 = &v290[v133];
  uint64_t v135 = &v278[v133];
  v289(&v290[v133], &v278[v133], v286);
  uint64_t v136 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v137 = *(int *)(v136 + 20);
  uint64_t v138 = *(void **)&v135[v137];
  uint64_t v139 = *(void **)&v134[v137];
  *(void *)&v134[v137] = v138;
  id v140 = v138;

  uint64_t v141 = *(int *)(v136 + 24);
  id v142 = *(void **)&v135[v141];
  id v143 = *(void **)&v134[v141];
  *(void *)&v134[v141] = v142;
  id v144 = v142;

  uint64_t v145 = v291[10];
  uint64_t v146 = (char *)v293 + v145;
  uint64_t v147 = &v292[v145];
  *(void *)uint64_t v146 = *(void *)&v292[v145];
  *((void *)v146 + 1) = *(void *)&v292[v145 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v146 + 2) = v147[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v146 + 3) = v147[3];
  *((void *)v146 + 4) = v147[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v146 + 5) = v147[5];
  *((void *)v146 + 6) = v147[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v146 + 7) = v147[7];
  *((void *)v146 + 8) = v147[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v146 + 9) = v147[9];
  *((void *)v146 + 10) = v147[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v146 + 11) = v147[11];
  uint64_t v148 = (void *)*((void *)v146 + 12);
  uint64_t v149 = (void *)v147[12];
  *((void *)v146 + 12) = v149;
  id v150 = v149;

  uint64_t v151 = (void *)*((void *)v146 + 13);
  uint64_t v152 = (void *)v147[13];
  *((void *)v146 + 13) = v152;
  id v153 = v152;

  uint64_t v154 = v18[13];
  uint64_t v155 = &v146[v154];
  uint64_t v156 = (char *)v147 + v154;
  LODWORD(v151) = v296(&v146[v154], 1, v22);
  int v157 = v296(v156, 1, v22);
  if (v151)
  {
    if (!v157)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v155, v156, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v155, 0, 1, v22);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v155, v22);
LABEL_68:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v155, v156, v22);
LABEL_69:
  uint64_t v159 = v18[14];
  uint64_t v160 = &v146[v159];
  uint64_t v161 = (char *)v147 + v159;
  int v162 = v296(&v146[v159], 1, v22);
  int v163 = v296(v161, 1, v22);
  if (v162)
  {
    if (!v163)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v160, v161, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v160, 0, 1, v22);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v163)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v160, v22);
LABEL_74:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v160, v161, v22);
LABEL_75:
  uint64_t v165 = v18[15];
  unint64_t v166 = &v146[v165];
  uint64_t v167 = (void *)((char *)v147 + v165);
  *(void *)unint64_t v166 = *v167;
  *((void *)v166 + 1) = v167[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v168 = v18[16];
  uint64_t v169 = &v146[v168];
  int v170 = (void *)((char *)v147 + v168);
  *(void *)uint64_t v169 = *v170;
  *((void *)v169 + 1) = v170[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v146[v18[17]] = *((unsigned char *)v147 + v18[17]);
  v146[v18[18]] = *((unsigned char *)v147 + v18[18]);
  uint64_t v171 = v18[19];
  uint64_t v172 = (uint64_t *)&v146[v171];
  uint64_t v173 = (void *)((char *)v147 + v171);
  unint64_t v174 = *(void *)((char *)v147 + v171 + 8);
  if (*(void *)&v146[v171 + 8] >> 60 == 15)
  {
    if (v174 >> 60 != 15)
    {
      uint64_t v175 = *v173;
      sub_255D80890(v175, v174);
      *uint64_t v172 = v175;
      v172[1] = v174;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v174 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v172);
LABEL_80:
    *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
    goto LABEL_82;
  }
  uint64_t v176 = *v173;
  sub_255D80890(v176, v174);
  uint64_t v177 = *v172;
  unint64_t v178 = v172[1];
  *uint64_t v172 = v176;
  v172[1] = v174;
  sub_255D80D04(v177, v178);
LABEL_82:
  uint64_t v179 = v18[20];
  uint64_t v180 = &v146[v179];
  uint64_t v181 = (char *)v147 + v179;
  int v182 = v288(&v146[v179], 1, v294);
  int v183 = v288(v181, 1, v294);
  if (v182)
  {
    if (!v183)
    {
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v180, v181, v294);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(v180, 0, 1, v294);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v183)
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v180, v294);
LABEL_87:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v284 + 24))(v180, v181, v294);
LABEL_88:
  uint64_t v185 = v18[21];
  uint64_t v186 = *(void **)&v146[v185];
  uint64_t v187 = *(void **)((char *)v147 + v185);
  *(void *)&v146[v185] = v187;
  id v188 = v187;

  uint64_t v189 = v18[22];
  uint64_t v190 = &v146[v189];
  uint64_t v191 = (char *)v147 + v189;
  LODWORD(v186) = v296(&v146[v189], 1, v22);
  int v192 = v296(v191, 1, v22);
  if (v186)
  {
    if (!v192)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v190, v191, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v190, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v192)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v190, v22);
LABEL_93:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v190, v191, *(void *)(*(void *)(v193 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v190, v191, v22);
LABEL_94:
  id v194 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v283(&v146[v194[5]], (char *)v147 + v194[5], v287);
  v289(&v146[v194[6]], (unsigned char *)v147 + v194[6], v286);
  uint64_t v195 = v194[7];
  uint64_t v196 = *(void **)&v146[v195];
  id v197 = *(void **)((char *)v147 + v195);
  *(void *)&v146[v195] = v197;
  id v198 = v197;

  uint64_t v199 = v194[8];
  uint64_t v200 = *(void **)((char *)v147 + v199);
  uint64_t v201 = *(void **)&v146[v199];
  *(void *)&v146[v199] = v200;
  id v202 = v200;

  uint64_t v203 = v194[9];
  uint64_t v204 = &v146[v203];
  uint64_t v205 = (void *)((char *)v147 + v203);
  *(void *)uint64_t v204 = *v205;
  *((void *)v204 + 1) = v205[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v206 = v291[11];
  uint64_t v207 = (void **)((char *)v293 + v206);
  uint64_t v208 = &v292[v206];
  uint64_t v209 = *(void **)&v292[v206];
  uint64_t v210 = *v207;
  *uint64_t v207 = v209;
  id v211 = v209;

  uint64_t v212 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v283((char *)v207 + *(int *)(v212 + 20), &v208[*(int *)(v212 + 20)], v287);
  v289((char *)v207 + *(int *)(v212 + 24), &v208[*(int *)(v212 + 24)], v286);
  uint64_t v213 = v291[12];
  id v214 = (char *)v293 + v213;
  uint64_t v215 = &v292[v213];
  *(void *)id v214 = *(void *)&v292[v213];
  *((void *)v214 + 1) = *(void *)&v292[v213 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v277 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v279 = v215;
  uint64_t v216 = v277[5];
  uint64_t v217 = &v214[v216];
  uint64_t v218 = &v215[v216];
  *(void *)uint64_t v217 = *(void *)&v215[v216];
  *((void *)v217 + 1) = *(void *)&v215[v216 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v217 + 2) = v218[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v217 + 3) = v218[3];
  *((void *)v217 + 4) = v218[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v217 + 5) = v218[5];
  *((void *)v217 + 6) = v218[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v217 + 7) = v218[7];
  *((void *)v217 + 8) = v218[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v217 + 9) = v218[9];
  *((void *)v217 + 10) = v218[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v217 + 11) = v218[11];
  uint64_t v219 = (void *)*((void *)v217 + 12);
  uint64_t v220 = (void *)v218[12];
  *((void *)v217 + 12) = v220;
  id v221 = v220;

  uint64_t v222 = (void *)*((void *)v217 + 13);
  uint64_t v223 = (void *)v218[13];
  *((void *)v217 + 13) = v223;
  id v224 = v223;

  uint64_t v225 = v18[13];
  uint64_t v226 = &v217[v225];
  uint64_t v227 = (char *)v218 + v225;
  LODWORD(v222) = v296(&v217[v225], 1, v22);
  int v228 = v296(v227, 1, v22);
  if (v222)
  {
    if (!v228)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v226, v227, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v226, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v228)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v226, v22);
LABEL_99:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v226, v227, *(void *)(*(void *)(v229 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v226, v227, v22);
LABEL_100:
  uint64_t v230 = v18[14];
  int v231 = &v217[v230];
  uint64_t v232 = (char *)v218 + v230;
  int v233 = v296(&v217[v230], 1, v22);
  int v234 = v296(v232, 1, v22);
  if (v233)
  {
    if (!v234)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v231, v232, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v231, 0, 1, v22);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v234)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v231, v22);
LABEL_105:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v231, v232, v22);
LABEL_106:
  uint64_t v236 = v18[15];
  uint64_t v237 = &v217[v236];
  uint64_t v238 = (void *)((char *)v218 + v236);
  *(void *)uint64_t v237 = *v238;
  *((void *)v237 + 1) = v238[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v239 = v18[16];
  uint64_t v240 = &v217[v239];
  uint64_t v241 = (void *)((char *)v218 + v239);
  *(void *)uint64_t v240 = *v241;
  *((void *)v240 + 1) = v241[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v217[v18[17]] = *((unsigned char *)v218 + v18[17]);
  v217[v18[18]] = *((unsigned char *)v218 + v18[18]);
  uint64_t v242 = v18[19];
  uint64_t v243 = (uint64_t *)&v217[v242];
  id v244 = (void *)((char *)v218 + v242);
  unint64_t v245 = *(void *)((char *)v218 + v242 + 8);
  if (*(void *)&v217[v242 + 8] >> 60 == 15)
  {
    if (v245 >> 60 != 15)
    {
      uint64_t v246 = *v244;
      sub_255D80890(v246, v245);
      *uint64_t v243 = v246;
      v243[1] = v245;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v245 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v243);
LABEL_111:
    *(_OWORD *)uint64_t v243 = *(_OWORD *)v244;
    goto LABEL_113;
  }
  uint64_t v247 = *v244;
  sub_255D80890(v247, v245);
  uint64_t v248 = *v243;
  unint64_t v249 = v243[1];
  *uint64_t v243 = v247;
  v243[1] = v245;
  sub_255D80D04(v248, v249);
LABEL_113:
  uint64_t v250 = v18[20];
  uint64_t v251 = &v217[v250];
  id v252 = (char *)v218 + v250;
  int v253 = v288(&v217[v250], 1, v294);
  int v254 = v288(v252, 1, v294);
  if (v253)
  {
    if (!v254)
    {
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v251, v252, v294);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v284 + 56))(v251, 0, 1, v294);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v254)
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v251, v294);
LABEL_118:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v251, v252, *(void *)(*(void *)(v255 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v284 + 24))(v251, v252, v294);
LABEL_119:
  uint64_t v256 = v18[21];
  unint64_t v257 = *(void **)&v217[v256];
  int v258 = *(void **)((char *)v218 + v256);
  *(void *)&v217[v256] = v258;
  id v259 = v258;

  uint64_t v260 = v18[22];
  uint64_t v261 = &v217[v260];
  int v262 = (char *)v218 + v260;
  LODWORD(v257) = v296(&v217[v260], 1, v22);
  int v263 = v296(v262, 1, v22);
  if (v257)
  {
    if (!v263)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v261, v262, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v261, 0, 1, v22);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v263)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v261, v22);
LABEL_124:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v261, v262, *(void *)(*(void *)(v264 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v261, v262, v22);
LABEL_125:
  v283(&v214[v277[6]], &v279[v277[6]], v287);
  v289(&v214[v277[7]], &v279[v277[7]], v286);
  *(void *)&v214[v277[8]] = *(void *)&v279[v277[8]];
  swift_retain();
  swift_release();
  uint64_t v265 = v277[9];
  int v266 = &v214[v265];
  int v267 = &v279[v265];
  int v268 = v296(&v214[v265], 1, v22);
  int v269 = v296(v267, 1, v22);
  if (!v268)
  {
    if (!v269)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v266, v267, v22);
      goto LABEL_131;
    }
    (*(void (**)(char *, uint64_t))(v295 + 8))(v266, v22);
    goto LABEL_130;
  }
  if (v269)
  {
LABEL_130:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v266, v267, *(void *)(*(void *)(v270 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v266, v267, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v266, 0, 1, v22);
LABEL_131:
  uint64_t v271 = v291[13];
  uint64_t v272 = *(void **)&v292[v271];
  uint64_t v273 = *(void **)((char *)v293 + v271);
  *(void **)((char *)v293 + v271) = v272;
  id v274 = v272;

  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *sub_255DC42BC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = &a1[v3];
  long long v5 = &a2[v3];
  *(void *)&a1[v3] = *(void *)&a2[v3];
  uint64_t v135 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v136 = v5;
  uint64_t v6 = v135[5];
  uint64_t v137 = v4;
  uint64_t v7 = &v4[v6];
  id v8 = &v5[v6];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  *((void *)v7 + 2) = *((void *)v8 + 2);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
  *((void *)v7 + 11) = *((void *)v8 + 11);
  *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
  uint64_t v9 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v10 = v9[13];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_255EEE100();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v138 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
  if (v138(v12, 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = v9[14];
  id v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  if (v138(&v8[v16], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v17, v18, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
  }
  *(_OWORD *)&v7[v9[15]] = *(_OWORD *)&v8[v9[15]];
  *(_OWORD *)&v7[v9[16]] = *(_OWORD *)&v8[v9[16]];
  v7[v9[17]] = v8[v9[17]];
  v7[v9[18]] = v8[v9[18]];
  *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
  uint64_t v20 = v9[20];
  id v21 = &v7[v20];
  uint64_t v22 = &v8[v20];
  uint64_t v23 = sub_255EEDF60();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v131 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v126 = v24;
  if (v131(v22, 1, v23))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(void *)&v7[v9[21]] = *(void *)&v8[v9[21]];
  uint64_t v26 = v9[22];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  uint64_t v133 = v14;
  if (v138(&v8[v26], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v27, v28, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v135[6];
  uint64_t v31 = &v137[v30];
  uint64_t v32 = &v136[v30];
  uint64_t v33 = sub_255EEE280();
  id v127 = (void (**)(unsigned char *, unsigned char *))(*(void *)(v33 - 8) + 32);
  uint64_t v128 = v33;
  uint64_t v130 = (void (*)(void, void))*v127;
  (*v127)(v31, v32);
  *(void *)&v137[v135[7]] = *(void *)&v136[v135[7]];
  uint64_t v34 = v135[8];
  uint64_t v35 = &v137[v34];
  uint64_t v36 = &v136[v34];
  uint64_t v134 = sub_255EEE200();
  uint64_t v129 = *(void (**)(unsigned char *, unsigned char *))(*(void *)(v134 - 8) + 32);
  v129(v35, v36);
  uint64_t v37 = v135[9];
  uint64_t v38 = &v137[v37];
  uint64_t v39 = &v136[v37];
  *(_OWORD *)&v137[v37] = *(_OWORD *)&v136[v37];
  unint64_t v40 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v41 = v40[5];
  uint64_t v42 = &v38[v41];
  uint64_t v43 = &v39[v41];
  *(_OWORD *)uint64_t v42 = *(_OWORD *)&v39[v41];
  *((void *)v42 + 2) = *(void *)&v39[v41 + 16];
  *(_OWORD *)(v42 + 24) = *(_OWORD *)&v39[v41 + 24];
  *(_OWORD *)(v42 + 40) = *(_OWORD *)&v39[v41 + 40];
  *(_OWORD *)(v42 + 56) = *(_OWORD *)&v39[v41 + 56];
  *(_OWORD *)(v42 + 72) = *(_OWORD *)&v39[v41 + 72];
  *((void *)v42 + 11) = *(void *)&v39[v41 + 88];
  *((_OWORD *)v42 + 6) = *(_OWORD *)&v39[v41 + 96];
  uint64_t v44 = v9[13];
  unint64_t v45 = &v42[v44];
  uint64_t v46 = &v43[v44];
  uint64_t v132 = v23;
  if (v138(&v43[v44], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v133 + 32))(v45, v46, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v45, 0, 1, v13);
  }
  uint64_t v48 = v9[14];
  uint64_t v49 = &v42[v48];
  uint64_t v50 = &v43[v48];
  if (v138(&v43[v48], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v133 + 32))(v49, v50, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v49, 0, 1, v13);
  }
  *(_OWORD *)&v42[v9[15]] = *(_OWORD *)&v43[v9[15]];
  *(_OWORD *)&v42[v9[16]] = *(_OWORD *)&v43[v9[16]];
  v42[v9[17]] = v43[v9[17]];
  v42[v9[18]] = v43[v9[18]];
  *(_OWORD *)&v42[v9[19]] = *(_OWORD *)&v43[v9[19]];
  uint64_t v52 = v9[20];
  uint64_t v53 = &v42[v52];
  uint64_t v54 = &v43[v52];
  if (v131(&v43[v52], 1, v23))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v126 + 32))(v53, v54, v23);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v126 + 56))(v53, 0, 1, v23);
  }
  *(void *)&v42[v9[21]] = *(void *)&v43[v9[21]];
  uint64_t v56 = v9[22];
  id v57 = &v42[v56];
  uint64_t v58 = &v43[v56];
  if (v138(&v43[v56], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v133 + 32))(v57, v58, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v57, 0, 1, v13);
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v129)(&v38[v40[6]], &v39[v40[6]], v134);
  uint64_t v60 = v40[7];
  int v61 = &v38[v60];
  uint64_t v62 = &v39[v60];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v129)(&v38[v60], &v39[v60], v134);
  uint64_t v63 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v61[*(int *)(v63 + 20)] = *(void *)&v62[*(int *)(v63 + 20)];
  uint64_t v64 = v40[8];
  uint64_t v65 = &v38[v64];
  uint64_t v66 = &v39[v64];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v129)(&v38[v64], &v39[v64], v134);
  uint64_t v67 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v65[*(int *)(v67 + 20)] = *(void *)&v66[*(int *)(v67 + 20)];
  *(void *)&v65[*(int *)(v67 + 24)] = *(void *)&v66[*(int *)(v67 + 24)];
  uint64_t v68 = v135[10];
  id v69 = &v137[v68];
  uint64_t v70 = &v136[v68];
  *(_OWORD *)id v69 = *(_OWORD *)&v136[v68];
  *((void *)v69 + 2) = *(void *)&v136[v68 + 16];
  *(_OWORD *)(v69 + 24) = *(_OWORD *)&v136[v68 + 24];
  *(_OWORD *)(v69 + 40) = *(_OWORD *)&v136[v68 + 40];
  *(_OWORD *)(v69 + 56) = *(_OWORD *)&v136[v68 + 56];
  *(_OWORD *)(v69 + 72) = *(_OWORD *)&v136[v68 + 72];
  *((void *)v69 + 11) = *(void *)&v136[v68 + 88];
  *((_OWORD *)v69 + 6) = *(_OWORD *)&v136[v68 + 96];
  uint64_t v71 = v9[13];
  uint64_t v72 = &v69[v71];
  uint64_t v73 = &v70[v71];
  if (v138(&v70[v71], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    uint64_t v75 = v133;
  }
  else
  {
    uint64_t v75 = v133;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v133 + 32))(v72, v73, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v72, 0, 1, v13);
  }
  uint64_t v76 = v9[14];
  uint64_t v77 = &v69[v76];
  uint64_t v78 = &v70[v76];
  if (v138(&v70[v76], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v75 + 32))(v77, v78, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v75 + 56))(v77, 0, 1, v13);
  }
  *(_OWORD *)&v69[v9[15]] = *(_OWORD *)&v70[v9[15]];
  *(_OWORD *)&v69[v9[16]] = *(_OWORD *)&v70[v9[16]];
  v69[v9[17]] = v70[v9[17]];
  v69[v9[18]] = v70[v9[18]];
  *(_OWORD *)&v69[v9[19]] = *(_OWORD *)&v70[v9[19]];
  uint64_t v80 = v9[20];
  uint64_t v81 = &v69[v80];
  id v82 = &v70[v80];
  if (v131(&v70[v80], 1, v132))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v126 + 32))(v81, v82, v132);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v126 + 56))(v81, 0, 1, v132);
  }
  *(void *)&v69[v9[21]] = *(void *)&v70[v9[21]];
  uint64_t v84 = v9[22];
  id v85 = &v69[v84];
  uint64_t v86 = &v70[v84];
  if (v138(&v70[v84], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v75 + 32))(v85, v86, v13);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v75 + 56))(v85, 0, 1, v13);
  }
  uint64_t v88 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v130)(&v69[v88[5]], &v70[v88[5]], v128);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v129)(&v69[v88[6]], &v70[v88[6]], v134);
  *(void *)&v69[v88[7]] = *(void *)&v70[v88[7]];
  *(void *)&v69[v88[8]] = *(void *)&v70[v88[8]];
  *(_OWORD *)&v69[v88[9]] = *(_OWORD *)&v70[v88[9]];
  uint64_t v89 = v135[11];
  uint64_t v90 = &v137[v89];
  uint64_t v91 = &v136[v89];
  *(void *)&v137[v89] = *(void *)&v136[v89];
  uint64_t v92 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v130)(&v90[*(int *)(v92 + 20)], &v91[*(int *)(v92 + 20)], v128);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v129)(&v90[*(int *)(v92 + 24)], &v91[*(int *)(v92 + 24)], v134);
  uint64_t v93 = v135[12];
  int v94 = &v137[v93];
  int v95 = &v136[v93];
  _OWORD *v94 = *(_OWORD *)&v136[v93];
  uint64_t v96 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v97 = v96[5];
  uint64_t v98 = (char *)v94 + v97;
  uint64_t v99 = &v95[v97];
  *(_OWORD *)uint64_t v98 = *(_OWORD *)&v95[v97];
  *((void *)v98 + 2) = *(void *)&v95[v97 + 16];
  *(_OWORD *)(v98 + 24) = *(_OWORD *)&v95[v97 + 24];
  *(_OWORD *)(v98 + 40) = *(_OWORD *)&v95[v97 + 40];
  *(_OWORD *)(v98 + 56) = *(_OWORD *)&v95[v97 + 56];
  *(_OWORD *)(v98 + 72) = *(_OWORD *)&v95[v97 + 72];
  *((void *)v98 + 11) = *(void *)&v95[v97 + 88];
  *((_OWORD *)v98 + 6) = *(_OWORD *)&v95[v97 + 96];
  uint64_t v100 = v9[13];
  uint64_t v101 = &v98[v100];
  uint64_t v102 = &v99[v100];
  if (v138(&v99[v100], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
    uint64_t v104 = v132;
  }
  else
  {
    (*(void (**)(char *, unsigned char *, uint64_t))(v133 + 32))(v101, v102, v13);
    uint64_t v104 = v132;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v101, 0, 1, v13);
  }
  uint64_t v105 = v9[14];
  unint64_t v106 = &v98[v105];
  uint64_t v107 = &v99[v105];
  if (v138(&v99[v105], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, unsigned char *, uint64_t))(v133 + 32))(v106, v107, v13);
    uint64_t v104 = v132;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v106, 0, 1, v13);
  }
  *(_OWORD *)&v98[v9[15]] = *(_OWORD *)&v99[v9[15]];
  *(_OWORD *)&v98[v9[16]] = *(_OWORD *)&v99[v9[16]];
  v98[v9[17]] = v99[v9[17]];
  v98[v9[18]] = v99[v9[18]];
  *(_OWORD *)&v98[v9[19]] = *(_OWORD *)&v99[v9[19]];
  uint64_t v109 = v9[20];
  unint64_t v110 = &v98[v109];
  uint64_t v111 = &v99[v109];
  if (v131(&v99[v109], 1, v104))
  {
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, unsigned char *, uint64_t))(v126 + 32))(v110, v111, v104);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v110, 0, 1, v104);
  }
  *(void *)&v98[v9[21]] = *(void *)&v99[v9[21]];
  uint64_t v113 = v9[22];
  int v114 = &v98[v113];
  int v115 = &v99[v113];
  if (v138(&v99[v113], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
    uint64_t v117 = v133;
  }
  else
  {
    uint64_t v117 = v133;
    (*(void (**)(char *, unsigned char *, uint64_t))(v133 + 32))(v114, v115, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v114, 0, 1, v13);
  }
  ((void (*)(char *, unsigned char *, uint64_t))v130)((char *)v94 + v96[6], &v95[v96[6]], v128);
  ((void (*)(char *, unsigned char *, uint64_t))v129)((char *)v94 + v96[7], &v95[v96[7]], v134);
  *(void *)((char *)v94 + v96[8]) = *(void *)&v95[v96[8]];
  uint64_t v118 = v96[9];
  uint64_t v119 = (char *)v94 + v118;
  id v120 = &v95[v118];
  if (v138(&v95[v118], 1, v13))
  {
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v119, v120, *(void *)(*(void *)(v121 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, unsigned char *, uint64_t))(v117 + 32))(v119, v120, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v119, 0, 1, v13);
  }
  *(void *)&v137[v135[13]] = *(void *)&v136[v135[13]];
  uint64_t result = a1;
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return result;
}

unsigned char *sub_255DC5638(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = &a1[v3];
  long long v5 = &a2[v3];
  uint64_t v6 = *(void **)&a1[v3];
  *(void *)&a1[v3] = *(void *)&a2[v3];

  uint64_t v289 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v7 = v289[5];
  uint64_t v291 = v4;
  id v8 = &v4[v7];
  uint64_t v290 = v5;
  uint64_t v9 = &v5[v7];
  uint64_t v10 = *(void *)&v5[v7 + 8];
  *(void *)id v8 = *(void *)&v5[v7];
  *((void *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((void *)v8 + 2) = v9[2];
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[4];
  *((void *)v8 + 3) = v9[3];
  *((void *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[6];
  *((void *)v8 + 5) = v9[5];
  *((void *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[8];
  *((void *)v8 + 7) = v9[7];
  *((void *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = v9[10];
  *((void *)v8 + 9) = v9[9];
  *((void *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)*((void *)v8 + 12);
  uint64_t v16 = v9[12];
  *((void *)v8 + 11) = v9[11];
  *((void *)v8 + 12) = v16;

  id v17 = (void *)*((void *)v8 + 13);
  *((void *)v8 + 13) = v9[13];

  uint64_t v18 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v19 = v18[13];
  uint64_t v20 = &v8[v19];
  id v21 = (char *)v9 + v19;
  uint64_t v22 = sub_255EEE100();
  uint64_t v293 = *(void *)(v22 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v293 + 48);
  LODWORD(v5) = v23(v20, 1, v22);
  uint64_t v294 = v23;
  int v24 = v23(v21, 1, v22);
  if (v5)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v20, v22);
LABEL_6:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v20, v21, v22);
LABEL_7:
  uint64_t v26 = v18[14];
  uint64_t v27 = &v8[v26];
  uint64_t v28 = (char *)v9 + v26;
  int v29 = v294(&v8[v26], 1, v22);
  int v30 = v294(v28, 1, v22);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v27, v28, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v27, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v27, v22);
LABEL_12:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v27, v28, v22);
LABEL_13:
  uint64_t v32 = v18[15];
  uint64_t v33 = &v8[v32];
  uint64_t v34 = (void *)((char *)v9 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = v18[16];
  uint64_t v38 = &v8[v37];
  uint64_t v39 = (void *)((char *)v9 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v8[v18[17]] = *((unsigned char *)v9 + v18[17]);
  v8[v18[18]] = *((unsigned char *)v9 + v18[18]);
  uint64_t v42 = v18[19];
  uint64_t v43 = (uint64_t)&v8[v42];
  uint64_t v44 = (char *)v9 + v42;
  unint64_t v45 = *(void *)&v8[v42 + 8];
  if (v45 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    goto LABEL_18;
  }
  unint64_t v46 = *((void *)v44 + 1);
  if (v46 >> 60 == 15)
  {
    sub_255D81EF8(v43);
    goto LABEL_16;
  }
  uint64_t v47 = *(void *)v43;
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v43 + 8) = v46;
  sub_255D80D04(v47, v45);
LABEL_18:
  uint64_t v48 = v18[20];
  uint64_t v49 = &v8[v48];
  uint64_t v50 = (char *)v9 + v48;
  uint64_t v51 = sub_255EEDF60();
  uint64_t v282 = *(void *)(v51 - 8);
  uint64_t v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v282 + 48);
  int v53 = v52(v49, 1, v51);
  uint64_t v292 = v51;
  uint64_t v286 = v52;
  int v54 = v52(v50, 1, v51);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v49, v50, v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v49, 0, 1, v51);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v49, v51);
LABEL_23:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v49, v50, v51);
LABEL_24:
  uint64_t v56 = v18[21];
  id v57 = *(void **)&v8[v56];
  *(void *)&v8[v56] = *(void *)((char *)v9 + v56);

  uint64_t v58 = v18[22];
  uint64_t v59 = &v8[v58];
  uint64_t v60 = (char *)v9 + v58;
  int v61 = v294(&v8[v58], 1, v22);
  int v62 = v294(v60, 1, v22);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v59, v60, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v59, 0, 1, v22);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v59, v22);
LABEL_29:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v59, v60, v22);
LABEL_30:
  uint64_t v64 = v289[6];
  uint64_t v65 = &v291[v64];
  uint64_t v66 = &v290[v64];
  uint64_t v285 = sub_255EEE280();
  uint64_t v281 = *(void (**)(char *, char *, uint64_t))(*(void *)(v285 - 8) + 40);
  ((void (*)(unsigned char *, unsigned char *))v281)(v65, v66);
  uint64_t v67 = v289[7];
  uint64_t v68 = *(void **)&v291[v67];
  *(void *)&v291[v67] = *(void *)&v290[v67];

  uint64_t v69 = v289[8];
  uint64_t v70 = &v291[v69];
  uint64_t v71 = &v290[v69];
  uint64_t v72 = sub_255EEE200();
  uint64_t v283 = (void (**)(char *, unsigned char *, uint64_t))(*(void *)(v72 - 8) + 40);
  uint64_t v284 = v72;
  uint64_t v287 = *v283;
  ((void (*)(unsigned char *, unsigned char *))*v283)(v70, v71);
  uint64_t v73 = v289[9];
  uint64_t v74 = &v291[v73];
  uint64_t v75 = &v290[v73];
  uint64_t v76 = *(void *)&v290[v73 + 8];
  *(void *)uint64_t v74 = *(void *)&v290[v73];
  *((void *)v74 + 1) = v76;
  swift_bridgeObjectRelease();
  id v274 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v276 = v75;
  uint64_t v77 = v274[5];
  uint64_t v288 = v74;
  uint64_t v78 = &v74[v77];
  uint64_t v79 = &v75[v77];
  uint64_t v80 = *(void *)&v75[v77 + 8];
  *(void *)uint64_t v78 = *(void *)&v75[v77];
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  *((void *)v78 + 2) = v79[2];
  swift_bridgeObjectRelease();
  uint64_t v81 = v79[4];
  *((void *)v78 + 3) = v79[3];
  *((void *)v78 + 4) = v81;
  swift_bridgeObjectRelease();
  uint64_t v82 = v79[6];
  *((void *)v78 + 5) = v79[5];
  *((void *)v78 + 6) = v82;
  swift_bridgeObjectRelease();
  uint64_t v83 = v79[8];
  *((void *)v78 + 7) = v79[7];
  *((void *)v78 + 8) = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = v79[10];
  *((void *)v78 + 9) = v79[9];
  *((void *)v78 + 10) = v84;
  swift_bridgeObjectRelease();
  id v85 = (void *)*((void *)v78 + 12);
  uint64_t v86 = v79[12];
  *((void *)v78 + 11) = v79[11];
  *((void *)v78 + 12) = v86;

  uint64_t v87 = (void *)*((void *)v78 + 13);
  *((void *)v78 + 13) = v79[13];

  uint64_t v88 = v18[13];
  uint64_t v89 = &v78[v88];
  uint64_t v90 = (char *)v79 + v88;
  LODWORD(v74) = v294(&v78[v88], 1, v22);
  int v91 = v294(v90, 1, v22);
  if (v74)
  {
    if (!v91)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v89, v90, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v89, 0, 1, v22);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v91)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v89, v22);
LABEL_35:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v89, v90, *(void *)(*(void *)(v92 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v89, v90, v22);
LABEL_36:
  uint64_t v93 = v18[14];
  int v94 = &v78[v93];
  int v95 = (char *)v79 + v93;
  int v96 = v294(&v78[v93], 1, v22);
  int v97 = v294(v95, 1, v22);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v94, v95, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v94, 0, 1, v22);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v94, v22);
LABEL_41:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v94, v95, v22);
LABEL_42:
  uint64_t v99 = v18[15];
  uint64_t v100 = &v78[v99];
  uint64_t v101 = (void *)((char *)v79 + v99);
  uint64_t v103 = *v101;
  uint64_t v102 = v101[1];
  *(void *)uint64_t v100 = v103;
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRelease();
  uint64_t v104 = v18[16];
  uint64_t v105 = &v78[v104];
  unint64_t v106 = (void *)((char *)v79 + v104);
  uint64_t v108 = *v106;
  uint64_t v107 = v106[1];
  *(void *)uint64_t v105 = v108;
  *((void *)v105 + 1) = v107;
  swift_bridgeObjectRelease();
  v78[v18[17]] = *((unsigned char *)v79 + v18[17]);
  v78[v18[18]] = *((unsigned char *)v79 + v18[18]);
  uint64_t v109 = v18[19];
  uint64_t v110 = (uint64_t)&v78[v109];
  uint64_t v111 = (char *)v79 + v109;
  unint64_t v112 = *(void *)&v78[v109 + 8];
  if (v112 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v110 = *(_OWORD *)v111;
    goto LABEL_47;
  }
  unint64_t v113 = *((void *)v111 + 1);
  if (v113 >> 60 == 15)
  {
    sub_255D81EF8(v110);
    goto LABEL_45;
  }
  uint64_t v114 = *(void *)v110;
  *(void *)uint64_t v110 = *(void *)v111;
  *(void *)(v110 + 8) = v113;
  sub_255D80D04(v114, v112);
LABEL_47:
  uint64_t v115 = v18[20];
  uint64_t v116 = &v78[v115];
  uint64_t v117 = (char *)v79 + v115;
  int v118 = v52(&v78[v115], 1, v292);
  int v119 = v52(v117, 1, v292);
  if (v118)
  {
    if (!v119)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v116, v117, v292);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v116, 0, 1, v292);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v119)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v116, v292);
LABEL_52:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v116, v117, v292);
LABEL_53:
  uint64_t v121 = v18[21];
  uint64_t v122 = *(void **)&v78[v121];
  *(void *)&v78[v121] = *(void *)((char *)v79 + v121);

  uint64_t v123 = v18[22];
  int v124 = &v78[v123];
  uint64_t v125 = (char *)v79 + v123;
  int v126 = v294(&v78[v123], 1, v22);
  int v127 = v294(v125, 1, v22);
  if (v126)
  {
    if (!v127)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v124, v125, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v124, 0, 1, v22);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v124, v22);
LABEL_58:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v124, v125, v22);
LABEL_59:
  v287(&v288[v274[6]], &v276[v274[6]], v284);
  uint64_t v129 = v274[7];
  uint64_t v130 = &v288[v129];
  uint64_t v131 = &v276[v129];
  v287(&v288[v129], &v276[v129], v284);
  uint64_t v132 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v133 = *(void **)&v130[v132];
  *(void *)&v130[v132] = *(void *)&v131[v132];

  uint64_t v134 = v274[8];
  uint64_t v135 = &v288[v134];
  uint64_t v136 = &v276[v134];
  v287(&v288[v134], &v276[v134], v284);
  uint64_t v137 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v138 = *(int *)(v137 + 20);
  uint64_t v139 = *(void **)&v135[v138];
  *(void *)&v135[v138] = *(void *)&v136[v138];

  uint64_t v140 = *(int *)(v137 + 24);
  uint64_t v141 = *(void **)&v135[v140];
  *(void *)&v135[v140] = *(void *)&v136[v140];

  uint64_t v142 = v289[10];
  id v143 = &v291[v142];
  id v144 = &v290[v142];
  uint64_t v145 = *(void *)&v290[v142 + 8];
  *(void *)id v143 = *(void *)&v290[v142];
  *((void *)v143 + 1) = v145;
  swift_bridgeObjectRelease();
  *((void *)v143 + 2) = v144[2];
  swift_bridgeObjectRelease();
  uint64_t v146 = v144[4];
  *((void *)v143 + 3) = v144[3];
  *((void *)v143 + 4) = v146;
  swift_bridgeObjectRelease();
  uint64_t v147 = v144[6];
  *((void *)v143 + 5) = v144[5];
  *((void *)v143 + 6) = v147;
  swift_bridgeObjectRelease();
  uint64_t v148 = v144[8];
  *((void *)v143 + 7) = v144[7];
  *((void *)v143 + 8) = v148;
  swift_bridgeObjectRelease();
  uint64_t v149 = v144[10];
  *((void *)v143 + 9) = v144[9];
  *((void *)v143 + 10) = v149;
  swift_bridgeObjectRelease();
  id v150 = (void *)*((void *)v143 + 12);
  uint64_t v151 = v144[12];
  *((void *)v143 + 11) = v144[11];
  *((void *)v143 + 12) = v151;

  uint64_t v152 = (void *)*((void *)v143 + 13);
  *((void *)v143 + 13) = v144[13];

  uint64_t v153 = v18[13];
  uint64_t v154 = &v143[v153];
  uint64_t v155 = (char *)v144 + v153;
  LODWORD(v135) = v294(&v143[v153], 1, v22);
  int v156 = v294(v155, 1, v22);
  if (v135)
  {
    if (!v156)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v154, v155, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v154, 0, 1, v22);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v156)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v154, v22);
LABEL_64:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v154, v155, *(void *)(*(void *)(v157 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v154, v155, v22);
LABEL_65:
  uint64_t v158 = v18[14];
  uint64_t v159 = &v143[v158];
  uint64_t v160 = (char *)v144 + v158;
  int v161 = v294(&v143[v158], 1, v22);
  int v162 = v294(v160, 1, v22);
  if (v161)
  {
    if (!v162)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v159, v160, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v159, 0, 1, v22);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v162)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v159, v22);
LABEL_70:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v159, v160, v22);
LABEL_71:
  uint64_t v164 = v18[15];
  uint64_t v165 = &v143[v164];
  unint64_t v166 = (void *)((char *)v144 + v164);
  uint64_t v168 = *v166;
  uint64_t v167 = v166[1];
  *(void *)uint64_t v165 = v168;
  *((void *)v165 + 1) = v167;
  swift_bridgeObjectRelease();
  uint64_t v169 = v18[16];
  int v170 = &v143[v169];
  uint64_t v171 = (void *)((char *)v144 + v169);
  uint64_t v173 = *v171;
  uint64_t v172 = v171[1];
  *(void *)int v170 = v173;
  *((void *)v170 + 1) = v172;
  swift_bridgeObjectRelease();
  v143[v18[17]] = *((unsigned char *)v144 + v18[17]);
  v143[v18[18]] = *((unsigned char *)v144 + v18[18]);
  uint64_t v174 = v18[19];
  uint64_t v175 = (uint64_t)&v143[v174];
  uint64_t v176 = (char *)v144 + v174;
  unint64_t v177 = *(void *)&v143[v174 + 8];
  if (v177 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)uint64_t v175 = *(_OWORD *)v176;
    goto LABEL_76;
  }
  unint64_t v178 = *((void *)v176 + 1);
  if (v178 >> 60 == 15)
  {
    sub_255D81EF8(v175);
    goto LABEL_74;
  }
  uint64_t v179 = *(void *)v175;
  *(void *)uint64_t v175 = *(void *)v176;
  *(void *)(v175 + 8) = v178;
  sub_255D80D04(v179, v177);
LABEL_76:
  uint64_t v180 = v18[20];
  uint64_t v181 = &v143[v180];
  int v182 = (char *)v144 + v180;
  int v183 = v286(&v143[v180], 1, v292);
  int v184 = v286(v182, 1, v292);
  if (v183)
  {
    if (!v184)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v181, v182, v292);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v181, 0, 1, v292);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v184)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v181, v292);
LABEL_81:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v181, v182, *(void *)(*(void *)(v185 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v181, v182, v292);
LABEL_82:
  uint64_t v186 = v18[21];
  uint64_t v187 = *(void **)&v143[v186];
  *(void *)&v143[v186] = *(void *)((char *)v144 + v186);

  uint64_t v188 = v18[22];
  uint64_t v189 = &v143[v188];
  uint64_t v190 = (char *)v144 + v188;
  int v191 = v294(&v143[v188], 1, v22);
  int v192 = v294(v190, 1, v22);
  if (v191)
  {
    if (!v192)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v189, v190, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v189, 0, 1, v22);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v192)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v189, v22);
LABEL_87:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v189, v190, *(void *)(*(void *)(v193 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v189, v190, v22);
LABEL_88:
  id v194 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  v281(&v143[v194[5]], (char *)v144 + v194[5], v285);
  v287(&v143[v194[6]], (unsigned char *)v144 + v194[6], v284);
  uint64_t v195 = v194[7];
  uint64_t v196 = *(void **)&v143[v195];
  *(void *)&v143[v195] = *(void *)((char *)v144 + v195);

  uint64_t v197 = v194[8];
  id v198 = *(void **)&v143[v197];
  *(void *)&v143[v197] = *(void *)((char *)v144 + v197);

  uint64_t v199 = v194[9];
  uint64_t v200 = &v143[v199];
  uint64_t v201 = (void *)((char *)v144 + v199);
  uint64_t v203 = *v201;
  uint64_t v202 = v201[1];
  *(void *)uint64_t v200 = v203;
  *((void *)v200 + 1) = v202;
  swift_bridgeObjectRelease();
  uint64_t v204 = v289[11];
  uint64_t v205 = &v291[v204];
  uint64_t v206 = &v290[v204];
  uint64_t v207 = *(void **)&v291[v204];
  *(void *)&v291[v204] = *(void *)&v290[v204];

  uint64_t v208 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  v281(&v205[*(int *)(v208 + 20)], &v206[*(int *)(v208 + 20)], v285);
  v287(&v205[*(int *)(v208 + 24)], &v206[*(int *)(v208 + 24)], v284);
  uint64_t v209 = v289[12];
  uint64_t v210 = &v291[v209];
  id v211 = &v290[v209];
  uint64_t v212 = *(void *)&v290[v209 + 8];
  *(void *)uint64_t v210 = *(void *)&v290[v209];
  *((void *)v210 + 1) = v212;
  swift_bridgeObjectRelease();
  uint64_t v275 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v277 = v211;
  uint64_t v213 = v275[5];
  id v214 = &v210[v213];
  uint64_t v215 = &v211[v213];
  uint64_t v216 = *(void *)&v211[v213 + 8];
  *(void *)id v214 = *(void *)&v211[v213];
  *((void *)v214 + 1) = v216;
  swift_bridgeObjectRelease();
  *((void *)v214 + 2) = v215[2];
  swift_bridgeObjectRelease();
  uint64_t v217 = v215[4];
  *((void *)v214 + 3) = v215[3];
  *((void *)v214 + 4) = v217;
  swift_bridgeObjectRelease();
  uint64_t v218 = v215[6];
  *((void *)v214 + 5) = v215[5];
  *((void *)v214 + 6) = v218;
  swift_bridgeObjectRelease();
  uint64_t v219 = v215[8];
  *((void *)v214 + 7) = v215[7];
  *((void *)v214 + 8) = v219;
  swift_bridgeObjectRelease();
  uint64_t v220 = v215[10];
  *((void *)v214 + 9) = v215[9];
  *((void *)v214 + 10) = v220;
  swift_bridgeObjectRelease();
  id v221 = (void *)*((void *)v214 + 12);
  uint64_t v222 = v215[12];
  *((void *)v214 + 11) = v215[11];
  *((void *)v214 + 12) = v222;

  uint64_t v223 = (void *)*((void *)v214 + 13);
  *((void *)v214 + 13) = v215[13];

  uint64_t v224 = v18[13];
  uint64_t v225 = &v214[v224];
  uint64_t v226 = (char *)v215 + v224;
  LODWORD(v211) = v294(&v214[v224], 1, v22);
  int v227 = v294(v226, 1, v22);
  if (v211)
  {
    if (!v227)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v225, v226, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v225, 0, 1, v22);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v227)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v225, v22);
LABEL_93:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v225, v226, *(void *)(*(void *)(v228 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v225, v226, v22);
LABEL_94:
  uint64_t v229 = v18[14];
  uint64_t v230 = &v214[v229];
  int v231 = (char *)v215 + v229;
  int v232 = v294(&v214[v229], 1, v22);
  int v233 = v294(v231, 1, v22);
  if (v232)
  {
    if (!v233)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v230, v231, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v230, 0, 1, v22);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v233)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v230, v22);
LABEL_99:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v230, v231, *(void *)(*(void *)(v234 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v230, v231, v22);
LABEL_100:
  uint64_t v235 = v18[15];
  uint64_t v236 = &v214[v235];
  uint64_t v237 = (void *)((char *)v215 + v235);
  uint64_t v239 = *v237;
  uint64_t v238 = v237[1];
  *(void *)uint64_t v236 = v239;
  *((void *)v236 + 1) = v238;
  swift_bridgeObjectRelease();
  uint64_t v240 = v18[16];
  uint64_t v241 = &v214[v240];
  uint64_t v242 = (void *)((char *)v215 + v240);
  uint64_t v244 = *v242;
  uint64_t v243 = v242[1];
  *(void *)uint64_t v241 = v244;
  *((void *)v241 + 1) = v243;
  swift_bridgeObjectRelease();
  v214[v18[17]] = *((unsigned char *)v215 + v18[17]);
  v214[v18[18]] = *((unsigned char *)v215 + v18[18]);
  uint64_t v245 = v18[19];
  uint64_t v246 = (uint64_t)&v214[v245];
  uint64_t v247 = (char *)v215 + v245;
  unint64_t v248 = *(void *)&v214[v245 + 8];
  if (v248 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
    goto LABEL_105;
  }
  unint64_t v249 = *((void *)v247 + 1);
  if (v249 >> 60 == 15)
  {
    sub_255D81EF8(v246);
    goto LABEL_103;
  }
  uint64_t v250 = *(void *)v246;
  *(void *)uint64_t v246 = *(void *)v247;
  *(void *)(v246 + 8) = v249;
  sub_255D80D04(v250, v248);
LABEL_105:
  uint64_t v251 = v18[20];
  id v252 = &v214[v251];
  int v253 = (char *)v215 + v251;
  int v254 = v286(&v214[v251], 1, v292);
  int v255 = v286(v253, 1, v292);
  if (v254)
  {
    if (!v255)
    {
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v252, v253, v292);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v252, 0, 1, v292);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v255)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v252, v292);
LABEL_110:
    sub_255DC9E10(0, &qword_269F350B8, MEMORY[0x270FA81B0], MEMORY[0x263F8D8F0]);
    memcpy(v252, v253, *(void *)(*(void *)(v256 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v282 + 40))(v252, v253, v292);
LABEL_111:
  uint64_t v257 = v18[21];
  int v258 = *(void **)&v214[v257];
  *(void *)&v214[v257] = *(void *)((char *)v215 + v257);

  uint64_t v259 = v18[22];
  uint64_t v260 = &v214[v259];
  uint64_t v261 = (char *)v215 + v259;
  int v262 = v294(&v214[v259], 1, v22);
  int v263 = v294(v261, 1, v22);
  if (v262)
  {
    if (!v263)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v260, v261, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v260, 0, 1, v22);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v263)
  {
    (*(void (**)(char *, uint64_t))(v293 + 8))(v260, v22);
LABEL_116:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v260, v261, *(void *)(*(void *)(v264 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v260, v261, v22);
LABEL_117:
  v281(&v210[v275[6]], &v277[v275[6]], v285);
  v287(&v210[v275[7]], &v277[v275[7]], v284);
  *(void *)&v210[v275[8]] = *(void *)&v277[v275[8]];
  swift_release();
  uint64_t v265 = v275[9];
  int v266 = &v210[v265];
  int v267 = &v277[v265];
  int v268 = v294(&v210[v265], 1, v22);
  int v269 = v294(v267, 1, v22);
  if (!v268)
  {
    if (!v269)
    {
      (*(void (**)(char *, char *, uint64_t))(v293 + 40))(v266, v267, v22);
      goto LABEL_123;
    }
    (*(void (**)(char *, uint64_t))(v293 + 8))(v266, v22);
    goto LABEL_122;
  }
  if (v269)
  {
LABEL_122:
    sub_255DC9E10(0, &qword_269F35058, MEMORY[0x270FA9300], MEMORY[0x263F8D8F0]);
    memcpy(v266, v267, *(void *)(*(void *)(v270 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v266, v267, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v266, 0, 1, v22);
LABEL_123:
  uint64_t v271 = v289[13];
  uint64_t v272 = *(void **)&v291[v271];
  *(void *)&v291[v271] = *(void *)&v290[v271];

  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_255DC73D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DC73E8);
}

uint64_t sub_255DC73E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDDataViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_255DC74AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DC74C0);
}

uint64_t sub_255DC74C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDDataViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t _s12SheetContentVMa()
{
  uint64_t result = qword_269F35930;
  if (!qword_269F35930) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DC75CC()
{
  uint64_t result = type metadata accessor for MedicalIDDataViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255DC7670()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DC768C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v158 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_255DC9430(0, &qword_269F35940, MEMORY[0x263F19B20]);
  uint64_t v135 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v140 = (uint64_t *)((char *)&v121 - v4);
  sub_255DC9430(0, &qword_269F35948, MEMORY[0x263F19B28]);
  uint64_t v152 = v5;
  MEMORY[0x270FA5388](v5);
  id v143 = (char *)&v121 - v6;
  uint64_t v136 = type metadata accessor for MedicalIDEditMedicationsModalView();
  MEMORY[0x270FA5388](v136);
  uint64_t v125 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = type metadata accessor for MedicalIDEditConditionsModalView();
  MEMORY[0x270FA5388](v139);
  int v126 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DC9584(0, &qword_269F35950, v2);
  uint64_t v147 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v149 = (uint64_t)&v121 - v10;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_255DC94E0(0, &qword_269F35960, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView, MEMORY[0x263F19B20]);
  uint64_t v130 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v132 = (uint64_t)&v121 - v13;
  sub_255DC9498(0);
  uint64_t v148 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v138 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DC9564(0);
  uint64_t v157 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v153 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for MedicalIDEditAllergiesModalView();
  MEMORY[0x270FA5388](v131);
  uint64_t v123 = (uint64_t)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  uint64_t v19 = MEMORY[0x270FA5388](v141);
  int v124 = (uint64_t *)((char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  int v127 = (char *)&v121 - v21;
  sub_255DC94E0(0, &qword_269F35970, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView, type metadata accessor for MedicalIDEditEmergencyContactsModalView, v11);
  uint64_t v133 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v137 = (uint64_t)&v121 - v23;
  sub_255DC9610(0);
  uint64_t v151 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v142 = (char *)&v121 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for MedicalIDEditBiometricsModalView();
  MEMORY[0x270FA5388](v134);
  uint64_t v122 = (char *)&v121 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v32 = (char *)&v121 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for MedicalIDEditPregnancyModalView();
  MEMORY[0x270FA5388](v129);
  uint64_t v34 = (char *)&v121 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DC94E0(0, &qword_269F35980, (uint64_t (*)(uint64_t))sub_255DC9658, (uint64_t (*)(uint64_t))sub_255DC9564, v11);
  uint64_t v154 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v156 = (uint64_t)&v121 - v36;
  sub_255DC94E0(0, &qword_269F35998, (uint64_t (*)(uint64_t))sub_255DC96A0, (uint64_t (*)(uint64_t))sub_255DC9610, v11);
  uint64_t v144 = v37;
  MEMORY[0x270FA5388](v37);
  uint64_t v146 = (uint64_t)&v121 - v38;
  sub_255DC94E0(0, &qword_269F359A0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPersonalInfoModalView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView, v11);
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (char *)&v121 - v40;
  sub_255DC96A0(0);
  uint64_t v145 = v42;
  MEMORY[0x270FA5388](v42);
  uint64_t v128 = (char *)&v121 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DC9658(0);
  uint64_t v155 = v44;
  MEMORY[0x270FA5388](v44);
  id v150 = (char *)&v121 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x270FA5388](v46 - 8);
  uint64_t v48 = (char *)&v121 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for MedicalIDEditPersonalInfoModalView();
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = (char *)&v121 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v1;
  switch(*v1)
  {
    case 1:
      int v62 = &v1[*(int *)(_s12SheetContentVMa() + 20)];
      uint64_t v63 = type metadata accessor for MedicalIDDataViewModel();
      sub_255DC99D0((uint64_t)&v62[*(int *)(v63 + 48)], (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
      sub_255DF0A58((uint64_t)v32, (uint64_t)v34);
      sub_255DC99D0((uint64_t)v34, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPregnancyModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F359E8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditPersonalInfoModalView);
      sub_255DC9CBC(&qword_269F359F0, (void (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView);
      uint64_t v64 = (uint64_t)v128;
      sub_255EEEE00();
      sub_255DC99D0(v64, v146, (uint64_t (*)(void))sub_255DC96A0);
      swift_storeEnumTagMultiPayload();
      sub_255DC9B0C();
      sub_255DC9BE4();
      uint64_t v65 = (uint64_t)v150;
      sub_255EEEE00();
      sub_255DC9D4C(v64, (uint64_t (*)(void))sub_255DC96A0);
      sub_255DC99D0(v65, v156, (uint64_t (*)(void))sub_255DC9658);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v65, (uint64_t (*)(void))sub_255DC9658);
      uint64_t v66 = type metadata accessor for MedicalIDEditPregnancyModalView;
      uint64_t v67 = (uint64_t)v34;
      return sub_255DC9D4C(v67, (uint64_t (*)(void))v66);
    case 2:
      uint64_t v68 = &v1[*(int *)(_s12SheetContentVMa() + 20)];
      uint64_t v69 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v51 = v125;
      sub_255DC99D0((uint64_t)&v68[*(int *)(v69 + 44)], (uint64_t)v125, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      sub_255DC99D0((uint64_t)v51, (uint64_t)v140, (uint64_t (*)(void))type metadata accessor for MedicalIDEditMedicationsModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F359A8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditMedicationsModalView);
      sub_255DC96E8();
      uint64_t v70 = (uint64_t)v143;
      sub_255EEEE00();
      sub_255DC973C(v70, v149);
      swift_storeEnumTagMultiPayload();
      sub_255DC97BC();
      sub_255DC9894();
      uint64_t v71 = (uint64_t)v153;
      sub_255EEEE00();
      sub_255DC9958(v70);
      sub_255DC99D0(v71, v156, (uint64_t (*)(void))sub_255DC9564);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v71, (uint64_t (*)(void))sub_255DC9564);
      int v61 = type metadata accessor for MedicalIDEditMedicationsModalView;
      goto LABEL_9;
    case 3:
      uint64_t v72 = _s12SheetContentVMa();
      uint64_t v73 = &v1[*(int *)(v72 + 20)];
      uint64_t v74 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v75 = v123;
      sub_255DC99D0((uint64_t)&v73[*(int *)(v74 + 44)], v123, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      uint64_t v76 = *(void **)(*(void *)(*(void *)&v52[*(int *)(v72 + 24)] + 32) + 16);
      *(void *)(v75 + *(int *)(v131 + 20)) = v76;
      sub_255DC99D0(v75, v132, (uint64_t (*)(void))type metadata accessor for MedicalIDEditAllergiesModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F359C0, (void (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView);
      sub_255DC9CBC(&qword_269F359C8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView);
      id v77 = v76;
      uint64_t v78 = (uint64_t)v138;
      sub_255EEEE00();
      sub_255DC99D0(v78, v149, (uint64_t (*)(void))sub_255DC9498);
      swift_storeEnumTagMultiPayload();
      sub_255DC97BC();
      sub_255DC9894();
      uint64_t v79 = (uint64_t)v153;
      sub_255EEEE00();
      sub_255DC9D4C(v78, (uint64_t (*)(void))sub_255DC9498);
      sub_255DC99D0(v79, v156, (uint64_t (*)(void))sub_255DC9564);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v79, (uint64_t (*)(void))sub_255DC9564);
      uint64_t v66 = type metadata accessor for MedicalIDEditAllergiesModalView;
      uint64_t v67 = v75;
      return sub_255DC9D4C(v67, (uint64_t (*)(void))v66);
    case 4:
      uint64_t v80 = *(void *)&v1[*(int *)(_s12SheetContentVMa() + 24)];
      uint64_t v81 = *(void *)(*(void *)(v80 + 16) + 32);
      uint64_t v82 = (void *)(v81 + 16);
      uint64_t v83 = (os_unfair_lock_s *)(v81 + 24);
      swift_retain();
      os_unfair_lock_lock(v83);
      sub_255E2AEE4(v82, v163);
      os_unfair_lock_unlock(v83);
      uint64_t v84 = *(void *)&v163[0];
      swift_beginAccess();
      type metadata accessor for MedicalIDEditableEmergencyContactsModel();
      swift_allocObject();
      uint64_t v85 = swift_bridgeObjectRetain();
      uint64_t v86 = MedicalIDEditableEmergencyContactsModel.init(emergencyContacts:suggestedEmergencyContacts:)(v85, v84);
      swift_release();
      uint64_t v87 = *(void **)(*(void *)(v80 + 32) + 16);
      type metadata accessor for MedicalIDDataManager();
      sub_255DC9CBC(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
      id v88 = v87;
      uint64_t v89 = sub_255EEE650();
      uint64_t v90 = (uint64_t)v124;
      *int v124 = v89;
      *(unsigned char *)(v90 + 8) = v91 & 1;
      *(void *)(v90 + 16) = v86;
      *(void *)(v90 + 24) = v88;
      sub_255DC9DAC();
      long long v159 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      uint64_t v162 = 0;
      sub_255EEF810();
      long long v92 = v163[1];
      *(_OWORD *)(v90 + 32) = v163[0];
      *(_OWORD *)(v90 + 48) = v92;
      long long v93 = v163[3];
      *(_OWORD *)(v90 + 64) = v163[2];
      *(_OWORD *)(v90 + 80) = v93;
      uint64_t v94 = v141;
      int v95 = (uint64_t *)(v90 + *(int *)(v141 + 32));
      *int v95 = swift_getKeyPath();
      int v96 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
      sub_255DC9E10(0, &qword_269F35320, MEMORY[0x270FA97E0], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      int v97 = (uint64_t *)(v90 + *(int *)(v94 + 36));
      *int v97 = swift_getKeyPath();
      sub_255DC9E10(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], v96);
      swift_storeEnumTagMultiPayload();
      uint64_t v51 = v127;
      sub_255DC9E74(v90, (uint64_t)v127);
      sub_255DC99D0((uint64_t)v51, v137, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F35A00, (void (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView);
      sub_255DC9CBC(&qword_269F35A08, (void (*)(uint64_t))type metadata accessor for MedicalIDEditEmergencyContactsModalView);
      uint64_t v98 = (uint64_t)v142;
      sub_255EEEE00();
      sub_255DC99D0(v98, v146, (uint64_t (*)(void))sub_255DC9610);
      swift_storeEnumTagMultiPayload();
      sub_255DC9B0C();
      sub_255DC9BE4();
      uint64_t v99 = (uint64_t)v150;
      sub_255EEEE00();
      sub_255DC9D4C(v98, (uint64_t (*)(void))sub_255DC9610);
      sub_255DC99D0(v99, v156, (uint64_t (*)(void))sub_255DC9658);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v99, (uint64_t (*)(void))sub_255DC9658);
      int v61 = (uint64_t (*)())type metadata accessor for MedicalIDEditEmergencyContactsModalView;
      goto LABEL_9;
    case 5:
      uint64_t v100 = _s12SheetContentVMa();
      uint64_t v101 = &v52[*(int *)(v100 + 20)];
      uint64_t v102 = type metadata accessor for MedicalIDDataViewModel();
      sub_255DC99D0((uint64_t)&v101[*(int *)(v102 + 36)], (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
      uint64_t v103 = *(void *)&v52[*(int *)(v100 + 24)];
      uint64_t v104 = *(void *)(v103 + 24);
      id v105 = *(id *)(*(void *)(v103 + 32) + 16);
      swift_retain();
      uint64_t v51 = v122;
      sub_255EC7FCC((uint64_t)v28, v105, v104, (uint64_t)v122);
      sub_255DC99D0((uint64_t)v51, v137, (uint64_t (*)(void))type metadata accessor for MedicalIDEditBiometricsModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F35A00, (void (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView);
      sub_255DC9CBC(&qword_269F35A08, (void (*)(uint64_t))type metadata accessor for MedicalIDEditEmergencyContactsModalView);
      uint64_t v106 = (uint64_t)v142;
      sub_255EEEE00();
      sub_255DC99D0(v106, v146, (uint64_t (*)(void))sub_255DC9610);
      swift_storeEnumTagMultiPayload();
      sub_255DC9B0C();
      sub_255DC9BE4();
      uint64_t v107 = (uint64_t)v150;
      sub_255EEEE00();
      sub_255DC9D4C(v106, (uint64_t (*)(void))sub_255DC9610);
      sub_255DC99D0(v107, v156, (uint64_t (*)(void))sub_255DC9658);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v107, (uint64_t (*)(void))sub_255DC9658);
      int v61 = type metadata accessor for MedicalIDEditBiometricsModalView;
      goto LABEL_9;
    case 6:
      uint64_t v108 = _s12SheetContentVMa();
      uint64_t v109 = &v1[*(int *)(v108 + 20)];
      uint64_t v110 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v51 = v126;
      sub_255DC99D0((uint64_t)&v109[*(int *)(v110 + 44)], (uint64_t)v126, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      uint64_t v111 = *(void **)(*(void *)(*(void *)&v52[*(int *)(v108 + 24)] + 32) + 16);
      *(void *)&v51[*(int *)(v139 + 20)] = v111;
      sub_255DC99D0((uint64_t)v51, v132, (uint64_t (*)(void))type metadata accessor for MedicalIDEditConditionsModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F359C0, (void (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView);
      sub_255DC9CBC(&qword_269F359C8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView);
      id v112 = v111;
      uint64_t v113 = (uint64_t)v138;
      sub_255EEEE00();
      sub_255DC99D0(v113, v149, (uint64_t (*)(void))sub_255DC9498);
      swift_storeEnumTagMultiPayload();
      sub_255DC97BC();
      sub_255DC9894();
      uint64_t v114 = (uint64_t)v153;
      sub_255EEEE00();
      sub_255DC9D4C(v113, (uint64_t (*)(void))sub_255DC9498);
      sub_255DC99D0(v114, v156, (uint64_t (*)(void))sub_255DC9564);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v114, (uint64_t (*)(void))sub_255DC9564);
      int v61 = type metadata accessor for MedicalIDEditConditionsModalView;
      goto LABEL_9;
    case 7:
      type metadata accessor for MedicalIDDataManager();
      sub_255DC9CBC(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
      uint64_t v116 = sub_255EEE650();
      uint64_t v117 = v140;
      uint64_t *v140 = v116;
      *((unsigned char *)v117 + 8) = v118 & 1;
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F359A8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditMedicationsModalView);
      sub_255DC96E8();
      swift_retain();
      uint64_t v119 = (uint64_t)v143;
      sub_255EEEE00();
      sub_255DC973C(v119, v149);
      swift_storeEnumTagMultiPayload();
      sub_255DC97BC();
      sub_255DC9894();
      uint64_t v120 = (uint64_t)v153;
      sub_255EEEE00();
      sub_255DC9958(v119);
      sub_255DC99D0(v120, v156, (uint64_t (*)(void))sub_255DC9564);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v120, (uint64_t (*)(void))sub_255DC9564);
      return swift_release();
    default:
      uint64_t v53 = _s12SheetContentVMa();
      int v54 = &v1[*(int *)(v53 + 20)];
      uint64_t v55 = type metadata accessor for MedicalIDDataViewModel();
      sub_255DC99D0((uint64_t)&v54[*(int *)(v55 + 40)], (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
      uint64_t v56 = *(void *)&v1[*(int *)(v53 + 24)];
      uint64_t v57 = *(void *)(v56 + 24);
      id v58 = *(id *)(*(void *)(v56 + 32) + 16);
      swift_retain();
      sub_255DB30B8((uint64_t)v48, v58, v57, (uint64_t)v51);
      sub_255DC99D0((uint64_t)v51, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPersonalInfoModalView);
      swift_storeEnumTagMultiPayload();
      sub_255DC9CBC(&qword_269F359E8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditPersonalInfoModalView);
      sub_255DC9CBC(&qword_269F359F0, (void (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView);
      uint64_t v59 = (uint64_t)v128;
      sub_255EEEE00();
      sub_255DC99D0(v59, v146, (uint64_t (*)(void))sub_255DC96A0);
      swift_storeEnumTagMultiPayload();
      sub_255DC9B0C();
      sub_255DC9BE4();
      uint64_t v60 = (uint64_t)v150;
      sub_255EEEE00();
      sub_255DC9D4C(v59, (uint64_t (*)(void))sub_255DC96A0);
      sub_255DC99D0(v60, v156, (uint64_t (*)(void))sub_255DC9658);
      swift_storeEnumTagMultiPayload();
      sub_255DC9A38();
      sub_255DC9D04();
      sub_255EEEE00();
      sub_255DC9D4C(v60, (uint64_t (*)(void))sub_255DC9658);
      int v61 = type metadata accessor for MedicalIDEditPersonalInfoModalView;
LABEL_9:
      uint64_t v66 = v61;
      uint64_t v67 = (uint64_t)v51;
      return sub_255DC9D4C(v67, (uint64_t (*)(void))v66);
  }
}

void sub_255DC9430(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for MedicalIDEditMedicationsModalView();
    unint64_t v7 = a3(a1, v6, &type metadata for MedicalIDEditMedicalNotesModalView);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_255DC9498(uint64_t a1)
{
}

void sub_255DC94E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255DC9564(uint64_t a1)
{
}

void sub_255DC9584(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255DC9498(255);
    uint64_t v7 = v6;
    sub_255DC9430(255, &qword_269F35948, MEMORY[0x263F19B28]);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_255DC9610(uint64_t a1)
{
}

void sub_255DC9658(uint64_t a1)
{
}

void sub_255DC96A0(uint64_t a1)
{
}

unint64_t sub_255DC96E8()
{
  unint64_t result = qword_269F359B0;
  if (!qword_269F359B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F359B0);
  }
  return result;
}

uint64_t sub_255DC973C(uint64_t a1, uint64_t a2)
{
  sub_255DC9430(0, &qword_269F35948, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_255DC97BC()
{
  unint64_t result = qword_269F359B8;
  if (!qword_269F359B8)
  {
    sub_255DC9498(255);
    sub_255DC9CBC(&qword_269F359C0, (void (*)(uint64_t))type metadata accessor for MedicalIDEditAllergiesModalView);
    sub_255DC9CBC(&qword_269F359C8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditConditionsModalView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F359B8);
  }
  return result;
}

unint64_t sub_255DC9894()
{
  unint64_t result = qword_269F359D0;
  if (!qword_269F359D0)
  {
    sub_255DC9430(255, &qword_269F35948, MEMORY[0x263F19B28]);
    sub_255DC9CBC(&qword_269F359A8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditMedicationsModalView);
    sub_255DC96E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F359D0);
  }
  return result;
}

uint64_t sub_255DC9958(uint64_t a1)
{
  sub_255DC9430(0, &qword_269F35948, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255DC99D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DC9A38()
{
  return sub_255DC9A80(&qword_269F359D8, sub_255DC9658, (void (*)(void))sub_255DC9B0C, (void (*)(void))sub_255DC9BE4);
}

uint64_t sub_255DC9A80(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255DC9B0C()
{
  unint64_t result = qword_269F359E0;
  if (!qword_269F359E0)
  {
    sub_255DC96A0(255);
    sub_255DC9CBC(&qword_269F359E8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditPersonalInfoModalView);
    sub_255DC9CBC(&qword_269F359F0, (void (*)(uint64_t))type metadata accessor for MedicalIDEditPregnancyModalView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F359E0);
  }
  return result;
}

unint64_t sub_255DC9BE4()
{
  unint64_t result = qword_269F359F8;
  if (!qword_269F359F8)
  {
    sub_255DC9610(255);
    sub_255DC9CBC(&qword_269F35A00, (void (*)(uint64_t))type metadata accessor for MedicalIDEditBiometricsModalView);
    sub_255DC9CBC(&qword_269F35A08, (void (*)(uint64_t))type metadata accessor for MedicalIDEditEmergencyContactsModalView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F359F8);
  }
  return result;
}

uint64_t sub_255DC9CBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DC9D04()
{
  return sub_255DC9A80(&qword_269F35A10, sub_255DC9564, (void (*)(void))sub_255DC97BC, (void (*)(void))sub_255DC9894);
}

uint64_t sub_255DC9D4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255DC9DAC()
{
  if (!qword_269F35708)
  {
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35708);
    }
  }
}

void sub_255DC9E10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255DC9E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255DC9ED8()
{
  return sub_255DC9A80(&qword_269F35A18, sub_255DC9F34, (void (*)(void))sub_255DC9A38, (void (*)(void))sub_255DC9D04);
}

void sub_255DC9F34(uint64_t a1)
{
}

void sub_255DC9F7C()
{
  qword_269F3FD40 = 0x4024000000000000;
}

void sub_255DC9F8C()
{
  qword_269F3FD48 = 0x403C000000000000;
}

void sub_255DC9F9C()
{
  qword_269F3FD50 = 0x4010000000000000;
}

void sub_255DC9FAC()
{
  qword_269F3FD58 = 0x4010000000000000;
}

void sub_255DC9FBC()
{
  qword_269F3FD60 = 0x407F400000000000;
}

void sub_255DC9FD0()
{
  qword_269F3FD68 = 0x4059000000000000;
}

uint64_t initializeBufferWithCopyOfBuffer for OrganDonationRegistrationView(uint64_t a1, long long *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  long long v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 16) = v3;
  id v5 = (id)v4;
  swift_retain();
  return a1;
}

uint64_t destroy for OrganDonationRegistrationView(id *a1)
{
  return swift_release();
}

uint64_t assignWithCopy for OrganDonationRegistrationView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for OrganDonationRegistrationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OrganDonationRegistrationView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrganDonationRegistrationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrganDonationRegistrationView()
{
  return &type metadata for OrganDonationRegistrationView;
}

unint64_t sub_255DCA1B4()
{
  unint64_t result = qword_269F35A28;
  if (!qword_269F35A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35A28);
  }
  return result;
}

uint64_t sub_255DCA208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F468B0]), sel_initWithMedicalIDData_, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = sub_255EEFD40();
    MEMORY[0x270FA5388](v8 - 8);
    id v9 = v7;
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v10 = (void *)qword_269F352A8;
    uint64_t v11 = sub_255EEE200();
    MEMORY[0x270FA5388](v11 - 8);
    id v12 = v10;
    sub_255EEE1F0();
    sub_255EEFDA0();
    uint64_t v13 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setCompletionButtonTitle_, v13);

    aBlock[4] = a3;
    aBlock[5] = a4;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_255E15E48;
    aBlock[3] = &block_descriptor_1;
    uint64_t v14 = _Block_copy(aBlock);
    id v15 = v9;
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_setRegistrationCompletionHandler_, v14);
    _Block_release(v14);

    return (uint64_t)v15;
  }
  else
  {
    uint64_t result = sub_255EF03D0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255DCA498(uint64_t a1)
{
  return sub_255DCA208(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_255DCA4B0()
{
  return sub_255EEF010();
}

uint64_t sub_255DCA4EC()
{
  return MEMORY[0x263F1BB58];
}

uint64_t sub_255DCA4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_255DCA5E8();
  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t sub_255DCA55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_255DCA5E8();
  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void sub_255DCA5C0()
{
}

unint64_t sub_255DCA5E8()
{
  unint64_t result = qword_269F35A30;
  if (!qword_269F35A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35A30);
  }
  return result;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

id MedicalIDEmergencyContact.asHKEmergencyContact.getter()
{
  unint64_t v0 = sub_255DCB170();
  return v0;
}

uint64_t MedicalIDEmergencyContact.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.name.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.nameContactIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.nameContactIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.nameContactIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.phoneNumberLabel.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.phoneNumber.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.phoneNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.phoneNumber.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberContactIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.phoneNumberContactIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.phoneNumberContactIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDEmergencyContact.relationship.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDEmergencyContact.relationship.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*MedicalIDEmergencyContact.relationship.modify())()
{
  return nullsub_1;
}

void *MedicalIDEmergencyContact.contact.getter()
{
  uint64_t v1 = *(void **)(v0 + 104);
  id v2 = v1;
  return v1;
}

uint64_t MedicalIDEmergencyContact.baseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

double MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = 0xD000000000000011;
  unint64_t v6 = (void *)sub_255EB9A1C();
  sub_255D7F1F0();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_255EF1E20;
  *(void *)(v7 + 32) = 0x496C61636964654DLL;
  *(void *)(v7 + 40) = 0xE900000000000044;
  unint64_t v8 = 0x8000000255EF9180;
  *(void *)(v7 + 48) = 0xD000000000000011;
  *(void *)(v7 + 56) = 0x8000000255EF9180;
  uint64_t v65 = a2;
  id v9 = a2;
  id v10 = v6;
  uint64_t v11 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v12 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v68 = v9;
  uint64_t v64 = a1;
  if (v12)
  {
    uint64_t v5 = sub_255EEFD90();
    unint64_t v8 = v13;
  }
  id v14 = objc_msgSend(v10, sel_name);
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = sub_255EEFD90();
    uint64_t v18 = v17;

    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_255EF1E20;
    *(void *)(v19 + 32) = v5;
    *(void *)(v19 + 40) = v8;
    *(void *)&long long v69 = v16;
    *((void *)&v69 + 1) = v18;
    unint64_t v8 = 0xE000000000000000;
    sub_255DAD520();
    uint64_t v20 = sub_255EF0230();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    *(void *)(v19 + 48) = v20;
    *(void *)(v19 + 56) = v22;
    uint64_t v23 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v24 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v24)
    {
      uint64_t v5 = sub_255EEFD90();
      unint64_t v8 = v25;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  swift_bridgeObjectRetain();
  id v26 = objc_msgSend(v10, sel_name);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v63 = sub_255EEFD90();
    uint64_t v29 = v28;
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v29 = 0;
  }
  swift_bridgeObjectRetain();
  id v30 = objc_msgSend(v10, sel_nameContactIdentifier);
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v62 = sub_255EEFD90();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v62 = 0;
    uint64_t v33 = 0;
  }
  swift_bridgeObjectRetain();
  id v34 = objc_msgSend(v10, sel_phoneNumberLabel);
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v61 = sub_255EEFD90();
    uint64_t v37 = v36;
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v37 = 0;
  }
  swift_bridgeObjectRetain();
  id v38 = objc_msgSend(v10, sel_phoneNumber);
  uint64_t v67 = v5;
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v60 = sub_255EEFD90();
    uint64_t v41 = v40;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v41 = 0;
  }
  swift_bridgeObjectRetain();
  id v42 = objc_msgSend(v10, sel_phoneNumberContactIdentifier);
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v59 = sub_255EEFD90();
    uint64_t v45 = v44;
  }
  else
  {
    uint64_t v59 = 0;
    uint64_t v45 = 0;
  }
  swift_bridgeObjectRetain();
  id v46 = objc_msgSend(v10, sel_relationship);
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = v10;
    uint64_t v49 = v33;
    uint64_t v50 = v29;
    uint64_t v51 = sub_255EEFD90();
    uint64_t v53 = v52;
  }
  else
  {
    uint64_t v48 = v10;
    uint64_t v49 = v33;
    uint64_t v50 = v29;

    uint64_t v51 = 0;
    uint64_t v53 = 0;
  }
  *(void *)&long long v69 = v63;
  *((void *)&v69 + 1) = v50;
  *(void *)&long long v70 = v62;
  *((void *)&v70 + 1) = v49;
  *(void *)&long long v71 = v61;
  *((void *)&v71 + 1) = v37;
  *(void *)&long long v72 = v60;
  *((void *)&v72 + 1) = v41;
  *(void *)&long long v73 = v59;
  *((void *)&v73 + 1) = v45;
  *(void *)&long long v74 = v51;
  *((void *)&v74 + 1) = v53;
  *(void *)&long long v75 = v48;
  *((void *)&v75 + 1) = v65;
  *(void *)&long long v76 = v67;
  *((void *)&v76 + 1) = v8;
  swift_bridgeObjectRetain();
  sub_255DCB308((uint64_t)&v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_255DCB3AC((uint64_t)&v69);
  long long v54 = v74;
  a3[4] = v73;
  a3[5] = v54;
  long long v55 = v76;
  a3[6] = v75;
  a3[7] = v55;
  long long v56 = v70;
  *a3 = v69;
  a3[1] = v56;
  double result = *(double *)&v71;
  long long v58 = v72;
  a3[2] = v71;
  a3[3] = v58;
  return result;
}

uint64_t MedicalIDEmergencyContact.hash(into:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[11];
  if (v0[1])
  {
    sub_255EF0560();
    swift_bridgeObjectRetain();
    sub_255EEFDE0();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_255EF0560();
    if (v1)
    {
LABEL_3:
      sub_255EF0560();
      swift_bridgeObjectRetain();
      sub_255EEFDE0();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  sub_255EF0560();
  if (v2)
  {
LABEL_4:
    sub_255EF0560();
    swift_bridgeObjectRetain();
    sub_255EEFDE0();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  sub_255EF0560();
  if (v3)
  {
LABEL_5:
    sub_255EF0560();
    swift_bridgeObjectRetain();
    sub_255EEFDE0();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_6;
    }
LABEL_14:
    sub_255EF0560();
    if (v5) {
      goto LABEL_7;
    }
    return sub_255EF0560();
  }
LABEL_13:
  sub_255EF0560();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_6:
  sub_255EF0560();
  swift_bridgeObjectRetain();
  sub_255EEFDE0();
  swift_bridgeObjectRelease();
  if (!v5) {
    return sub_255EF0560();
  }
LABEL_7:
  sub_255EF0560();
  swift_bridgeObjectRetain();
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t MedicalIDEmergencyContact.hashValue.getter()
{
  return sub_255EF0580();
}

uint64_t sub_255DCB0EC()
{
  return sub_255EF0580();
}

uint64_t sub_255DCB130()
{
  return sub_255EF0580();
}

void *sub_255DCB170()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[9];
  uint64_t v14 = v0[8];
  uint64_t v6 = v0[11];
  uint64_t v5 = (void *)v0[12];
  if (v0[1]) {
    uint64_t v7 = (void *)sub_255EEFD50();
  }
  else {
    uint64_t v7 = 0;
  }
  objc_msgSend(v5, sel_setName_, v7, v14);

  if (v1) {
    unint64_t v8 = (void *)sub_255EEFD50();
  }
  else {
    unint64_t v8 = 0;
  }
  objc_msgSend(v5, sel_setNameContactIdentifier_, v8);

  if (v2) {
    id v9 = (void *)sub_255EEFD50();
  }
  else {
    id v9 = 0;
  }
  objc_msgSend(v5, sel_setPhoneNumberLabel_, v9);

  if (v3) {
    id v10 = (void *)sub_255EEFD50();
  }
  else {
    id v10 = 0;
  }
  objc_msgSend(v5, sel_setPhoneNumber_, v10);

  if (v4) {
    uint64_t v11 = (void *)sub_255EEFD50();
  }
  else {
    uint64_t v11 = 0;
  }
  objc_msgSend(v5, sel_setPhoneNumberContactIdentifier_, v11);

  if (v6) {
    id v12 = (void *)sub_255EEFD50();
  }
  else {
    id v12 = 0;
  }
  objc_msgSend(v5, sel_setRelationship_, v12);

  return v5;
}

uint64_t sub_255DCB308(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  id v3 = *(id *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = v2;
  return a1;
}

uint64_t sub_255DCB3AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  id v3 = *(void **)(a1 + 104);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v12 = a1[9];
  uint64_t v11 = a1[10];
  uint64_t v13 = a1[11];
  uint64_t v108 = (void *)a1[13];
  uint64_t v14 = a1[14];
  uint64_t v105 = a1[15];
  uint64_t v15 = a2[1];
  uint64_t v16 = a2[2];
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  uint64_t v20 = a2[5];
  uint64_t v19 = a2[6];
  uint64_t v22 = a2[7];
  uint64_t v21 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v23 = a2[10];
  uint64_t v25 = a2[11];
  uint64_t v106 = a2[14];
  uint64_t v107 = (void *)a2[13];
  uint64_t v104 = a2[15];
  if (!v3)
  {
    if (v15) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v15) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v15) {
    goto LABEL_8;
  }
  uint64_t v98 = a2[7];
  uint64_t v101 = a2[8];
  uint64_t v83 = a2[2];
  uint64_t v84 = a1[2];
  uint64_t v26 = a1[14];
  uint64_t v91 = a1[5];
  uint64_t v93 = a1[4];
  uint64_t v27 = a1[10];
  uint64_t v28 = a1[11];
  uint64_t v29 = a2[11];
  uint64_t v87 = a2[4];
  uint64_t v89 = a2[5];
  uint64_t v30 = a2[10];
  uint64_t v85 = a1[9];
  uint64_t v86 = a1[6];
  uint64_t v31 = a2[9];
  uint64_t v95 = a2[6];
  uint64_t v32 = a1[7];
  char v33 = sub_255EF04A0();
  uint64_t v9 = v32;
  uint64_t v19 = v95;
  uint64_t v22 = v98;
  uint64_t v12 = v85;
  uint64_t v7 = v86;
  uint64_t v21 = v101;
  uint64_t v24 = v31;
  uint64_t v23 = v30;
  uint64_t v18 = v87;
  uint64_t v20 = v89;
  uint64_t v25 = v29;
  uint64_t v13 = v28;
  uint64_t v11 = v27;
  uint64_t v8 = v91;
  uint64_t v5 = v93;
  uint64_t v14 = v26;
  uint64_t v16 = v83;
  uint64_t v4 = v84;
  char v34 = v33;
  uint64_t result = 0;
  if (v34)
  {
LABEL_8:
    if (v6)
    {
      if (!v17) {
        return 0;
      }
      if (v4 != v16 || v6 != v17)
      {
        uint64_t v99 = v22;
        uint64_t v102 = v21;
        uint64_t v36 = v14;
        uint64_t v37 = v11;
        uint64_t v88 = v18;
        uint64_t v90 = v20;
        uint64_t v38 = v13;
        uint64_t v39 = v25;
        uint64_t v40 = v23;
        uint64_t v41 = v12;
        uint64_t v94 = v5;
        uint64_t v96 = v19;
        uint64_t v42 = v24;
        uint64_t v43 = v7;
        uint64_t v92 = v8;
        uint64_t v44 = v9;
        char v45 = sub_255EF04A0();
        uint64_t v9 = v44;
        uint64_t v7 = v43;
        uint64_t v19 = v96;
        uint64_t v22 = v99;
        uint64_t v21 = v102;
        uint64_t v24 = v42;
        uint64_t v8 = v92;
        uint64_t v5 = v94;
        uint64_t v12 = v41;
        uint64_t v23 = v40;
        uint64_t v25 = v39;
        uint64_t v13 = v38;
        uint64_t v18 = v88;
        uint64_t v20 = v90;
        uint64_t v11 = v37;
        uint64_t v14 = v36;
        char v46 = v45;
        uint64_t result = 0;
        if ((v46 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v8)
    {
      if (!v20) {
        return 0;
      }
      if (v5 != v18 || v8 != v20)
      {
        uint64_t v100 = v22;
        uint64_t v103 = v21;
        uint64_t v97 = v19;
        uint64_t v47 = v14;
        uint64_t v48 = v11;
        uint64_t v49 = v13;
        uint64_t v50 = v25;
        uint64_t v51 = v23;
        uint64_t v52 = v12;
        uint64_t v53 = v24;
        uint64_t v54 = v7;
        uint64_t v55 = v9;
        char v56 = sub_255EF04A0();
        uint64_t v22 = v100;
        uint64_t v21 = v103;
        uint64_t v9 = v55;
        uint64_t v7 = v54;
        uint64_t v24 = v53;
        uint64_t v12 = v52;
        uint64_t v23 = v51;
        uint64_t v25 = v50;
        uint64_t v13 = v49;
        uint64_t v11 = v48;
        uint64_t v14 = v47;
        uint64_t v19 = v97;
        char v57 = v56;
        uint64_t result = 0;
        if ((v57 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v20)
    {
      return 0;
    }
    if (v9)
    {
      if (!v22) {
        return 0;
      }
      if (v7 != v19 || v9 != v22)
      {
        uint64_t v58 = v21;
        uint64_t v59 = v14;
        uint64_t v60 = v11;
        uint64_t v61 = v13;
        uint64_t v62 = v25;
        uint64_t v63 = v23;
        uint64_t v64 = v12;
        uint64_t v65 = v24;
        char v66 = sub_255EF04A0();
        uint64_t v21 = v58;
        uint64_t v24 = v65;
        uint64_t v12 = v64;
        uint64_t v23 = v63;
        uint64_t v25 = v62;
        uint64_t v13 = v61;
        uint64_t v11 = v60;
        uint64_t v14 = v59;
        char v67 = v66;
        uint64_t result = 0;
        if ((v67 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v22)
    {
      return 0;
    }
    if (v12)
    {
      if (!v24) {
        return 0;
      }
      if (v10 != v21 || v12 != v24)
      {
        uint64_t v68 = v14;
        uint64_t v69 = v11;
        uint64_t v70 = v13;
        uint64_t v71 = v25;
        uint64_t v72 = v23;
        char v73 = sub_255EF04A0();
        uint64_t v23 = v72;
        uint64_t v25 = v71;
        uint64_t v13 = v70;
        uint64_t v11 = v69;
        uint64_t v14 = v68;
        char v74 = v73;
        uint64_t result = 0;
        if ((v74 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v24)
    {
      return 0;
    }
    if (v13)
    {
      if (!v25) {
        return 0;
      }
      if (v11 != v23 || v13 != v25)
      {
        uint64_t v75 = v14;
        char v76 = sub_255EF04A0();
        uint64_t v14 = v75;
        char v77 = v76;
        uint64_t result = 0;
        if ((v77 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v25)
    {
      return 0;
    }
    uint64_t v78 = v14;
    sub_255D7ED10(0, &qword_269F35048);
    if (sub_255EF01D0())
    {
      if (v108)
      {
        if (v107)
        {
          sub_255D7ED10(0, &qword_269F37DB0);
          id v79 = v107;
          id v80 = v108;
          char v81 = sub_255EF01D0();

          uint64_t v82 = v78;
          if (v81)
          {
LABEL_47:
            if (v82 == v106 && v105 == v104) {
              return 1;
            }
            return sub_255EF04A0();
          }
        }
      }
      else
      {
        uint64_t v82 = v78;
        if (!v107) {
          goto LABEL_47;
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_255DCB914()
{
  unint64_t result = qword_269F35A38;
  if (!qword_269F35A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35A38);
  }
  return result;
}

uint64_t destroy for MedicalIDEmergencyContact(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MedicalIDEmergencyContact(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = (void *)a2[12];
  uint64_t v10 = (void *)a2[13];
  a1[12] = v9;
  a1[13] = v10;
  uint64_t v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = v9;
  id v13 = v10;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MedicalIDEmergencyContact(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[12];
  uint64_t v5 = (void *)a1[12];
  a1[12] = v4;
  id v6 = v4;

  uint64_t v7 = (void *)a1[13];
  uint64_t v8 = (void *)a2[13];
  a1[13] = v8;
  id v9 = v8;

  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for MedicalIDEmergencyContact(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);

  uint64_t v10 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);

  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDEmergencyContact(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEmergencyContact(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 96) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEmergencyContact()
{
  return &type metadata for MedicalIDEmergencyContact;
}

void *sub_255DCBD68(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    char v7 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v7;
    uint64_t v8 = (void *)a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    swift_retain();
    swift_retain();
    id v10 = v8;
    if (v9)
    {
      v4[4] = a2[4];
      v4[5] = v9;
      uint64_t v11 = a2[7];
      v4[6] = a2[6];
      v4[7] = v11;
      uint64_t v12 = a2[9];
      v4[8] = a2[8];
      v4[9] = v12;
      v4[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 3) = v14;
      *((_OWORD *)v4 + 4) = *((_OWORD *)a2 + 4);
      v4[10] = a2[10];
    }
    v4[11] = a2[11];
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    sub_255DD3478(0, &qword_269F35320, MEMORY[0x270FA97D0], MEMORY[0x263F185C8]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_255EEE200();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      void *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = *(int *)(a3 + 36);
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    sub_255DD3478(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *uint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_255DCC014(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();

  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  sub_255DD3478(0, &qword_269F35320, MEMORY[0x270FA97D0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE200();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  sub_255DD3478(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_255EEE730();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_255DCC1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  uint64_t v7 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  id v9 = v7;
  if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v8;
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v10;
    uint64_t v11 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v13 = *(int *)(a3 + 32);
  long long v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  sub_255DD3478(0, &qword_269F35320, MEMORY[0x270FA97D0], MEMORY[0x263F185C8]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_255EEE200();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    void *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = *(int *)(a3 + 36);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  sub_255DD3478(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_255EEE730();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *uint64_t v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_255DCC420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void **)(a2 + 24);
  uint64_t v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  id v9 = v7;

  uint64_t v10 = (_OWORD *)(a1 + 32);
  uint64_t v11 = (long long *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v12)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8(a1 + 32);
      long long v14 = *(_OWORD *)(a2 + 48);
      long long v13 = *(_OWORD *)(a2 + 64);
      long long v15 = *v11;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v14;
      *(_OWORD *)(a1 + 64) = v13;
      *uint64_t v10 = v15;
    }
  }
  else if (v12)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *v11;
    long long v17 = *(_OWORD *)(a2 + 48);
    long long v18 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    *uint64_t v10 = v16;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v19 = *(int *)(a3 + 32);
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    uint64_t v22 = (uint64_t (*)(uint64_t))MEMORY[0x270FA97D0];
    sub_255DCC794(a1 + v19, &qword_269F35320, MEMORY[0x270FA97D0]);
    sub_255DD3478(0, &qword_269F35320, v22, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_255EEE200();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v20, v21, v23);
    }
    else
    {
      *uint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = *(int *)(a3 + 36);
    uint64_t v25 = (void *)(a1 + v24);
    uint64_t v26 = (void *)(a2 + v24);
    uint64_t v27 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    sub_255DCC794(a1 + v24, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0]);
    sub_255DD3478(0, (unint64_t *)&qword_269F35580, v27, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v25, v26, v28);
    }
    else
    {
      *uint64_t v25 = *v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_255DCC794(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_255DD3478(0, a2, a3, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255DCC804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  id v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_255DD3478(0, &qword_269F35320, MEMORY[0x270FA97D0], MEMORY[0x263F185C8]);
  uint64_t v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_255EEE200();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v14 = *(int *)(a3 + 36);
  long long v15 = (void *)(a1 + v14);
  long long v16 = (const void *)(a2 + v14);
  sub_255DD3478(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  uint64_t v18 = v17;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = sub_255EEE730();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v15, v16, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_255DCC9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  long long v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  if (*(void *)(a1 + 40))
  {
    uint64_t v8 = *(void *)(a2 + 40);
    if (v8)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v9;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_255DB9AF8(a1 + 32);
  }
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
LABEL_6:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (const void *)(a2 + v12);
    long long v15 = (uint64_t (*)(uint64_t))MEMORY[0x270FA97D0];
    sub_255DCC794(a1 + v12, &qword_269F35320, MEMORY[0x270FA97D0]);
    sub_255DD3478(0, &qword_269F35320, v15, MEMORY[0x263F185C8]);
    uint64_t v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_255EEE200();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32))(v13, v14, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    uint64_t v19 = *(int *)(a3 + 36);
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    uint64_t v22 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    sub_255DCC794(a1 + v19, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0]);
    sub_255DD3478(0, (unint64_t *)&qword_269F35580, v22, MEMORY[0x263F185C8]);
    uint64_t v24 = v23;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = sub_255EEE730();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v20, v21, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_255DCCCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DCCCD0);
}

uint64_t sub_255DCCCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255DD3478(0, &qword_269F35338, MEMORY[0x270FA97D0], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_255DD3478(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_255DCCE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DCCE64);
}

uint64_t sub_255DCCE64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_255DD3478(0, &qword_269F35338, MEMORY[0x270FA97D0], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_255DD3478(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDEditEmergencyContactsModalView(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F35A78);
}

void sub_255DCD004()
{
  sub_255DD3478(319, &qword_269F35320, MEMORY[0x270FA97D0], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_255DD3478(319, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_255DCD150()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DCD16C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEFAB0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  char v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269F34A70 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_269F35A40;
  uint64_t v15 = *(void *)algn_269F35A48;
  sub_255DD3408(v2, (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = swift_allocObject();
  sub_255DD2A04((uint64_t)v13, v17 + v16, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  long long v18 = *(_OWORD *)(v2 + 48);
  long long v48 = *(_OWORD *)(v2 + 32);
  long long v49 = v18;
  long long v19 = *(_OWORD *)(v2 + 80);
  long long v50 = *(_OWORD *)(v2 + 64);
  long long v51 = v19;
  sub_255DD059C();
  swift_bridgeObjectRetain();
  sub_255EEF840();
  long long v45 = v52;
  long long v44 = v53;
  long long v43 = v54;
  long long v42 = v55;
  uint64_t v20 = v56;
  *a1 = swift_getKeyPath();
  sub_255DD3478(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_255DD221C(0, &qword_269F35A98, type metadata accessor for MedicalIDEmergencyContactsEditView, sub_255DD063C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
  uint64_t v22 = v21;
  uint64_t v23 = (uint64_t *)((char *)a1 + v21[9]);
  *uint64_t v23 = v14;
  v23[1] = v15;
  uint64_t v24 = (uint64_t *)((char *)a1 + v21[10]);
  *uint64_t v24 = &unk_269F35A90;
  v24[1] = v17;
  uint64_t v25 = (char *)a1 + v21[11];
  long long v26 = v44;
  *(_OWORD *)uint64_t v25 = v45;
  *((_OWORD *)v25 + 1) = v26;
  long long v27 = v42;
  *((_OWORD *)v25 + 2) = v43;
  *((_OWORD *)v25 + 3) = v27;
  *((void *)v25 + 8) = v20;
  uint64_t v28 = (char *)a1 + v21[12];
  uint64_t v29 = *(void **)(v2 + 24);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v9, *MEMORY[0x263F1B878], v4);
  type metadata accessor for MedicalIDEditableEmergencyContactsModel();
  sub_255DD0670((unint64_t *)&qword_269F35690, (void (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel);
  swift_retain();
  id v30 = v29;
  sub_255EEFA90();
  uint64_t v31 = type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  *(void *)&v28[*(int *)(v31 + 20)] = v30;
  sub_255DD35A4(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_255EF1E20;
  *(void *)(v32 + 32) = 0x496C61636964654DLL;
  *(void *)(v32 + 40) = 0xE900000000000044;
  unint64_t v33 = 0x8000000255EF9180;
  *(void *)(v32 + 48) = 0xD000000000000011;
  *(void *)(v32 + 56) = 0x8000000255EF9180;
  char v34 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v35 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v35)
  {
    uint64_t v36 = sub_255EEFD90();
    unint64_t v33 = v37;
  }
  else
  {
    uint64_t v36 = 0xD000000000000011;
  }
  uint64_t v38 = (uint64_t *)&v28[*(int *)(v31 + 24)];
  *uint64_t v38 = v36;
  v38[1] = v33;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v46, v9, v4);
  sub_255EEF810();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  uint64_t v39 = (char *)a1 + v22[13];
  char v47 = 0;
  uint64_t result = sub_255EEF810();
  uint64_t v41 = *((void *)&v48 + 1);
  char *v39 = v48;
  *((void *)v39 + 1) = v41;
  return result;
}

uint64_t sub_255DCD6DC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255DCD76C();
}

uint64_t sub_255DCD76C()
{
  v1[11] = v0;
  uint64_t v2 = sub_255EEE730();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  sub_255D894E4(0);
  v1[15] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[16] = swift_task_alloc();
  v1[17] = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  v1[18] = swift_task_alloc();
  v1[19] = sub_255EEFF70();
  v1[20] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v1[21] = v4;
  v1[22] = v3;
  return MEMORY[0x270FA2498](sub_255DCD8EC, v4, v3);
}

uint64_t sub_255DCD8EC()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[11];
  char v3 = *(unsigned char *)(v2 + 8);
  uint64_t v4 = swift_retain();
  v0[23] = sub_255DAA2A0(v4, v3);
  swift_release();
  sub_255DD3408(v2, v1, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  v0[24] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v0[25] = v6;
  v0[26] = v5;
  return MEMORY[0x270FA2498](sub_255DCD9D0, v6, v5);
}

uint64_t sub_255DCD9D0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  swift_getKeyPath();
  v0[8] = v1;
  sub_255DD0670(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255DD3408(v5, v4, (uint64_t (*)(void))sub_255D894E4);
  LoadState<>.loadedValue.getter(v3);
  sub_255DD2C7C(v4, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v6 = *(void *)(v2 + 16);
  swift_getKeyPath();
  v0[9] = v6;
  sub_255DD0670((unint64_t *)&qword_269F35690, (void (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 16) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[27] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_255DCDC24;
  uint64_t v9 = v0[16];
  return sub_255E8F53C(v9, (uint64_t)(v0 + 10));
}

uint64_t sub_255DCDC24()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 200);
  uint64_t v4 = *(void *)(v2 + 208);
  if (v0) {
    uint64_t v5 = sub_255DCDEC4;
  }
  else {
    uint64_t v5 = sub_255DCDD34;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255DCDD34()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  swift_release();
  sub_255DD2C7C(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  sub_255DD2C7C(v1, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  swift_release();
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  return MEMORY[0x270FA2498](sub_255DCDDE8, v3, v4);
}

uint64_t sub_255DCDDE8()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  swift_release();
  sub_255DAA4A8(v1);
  sub_255EEE720();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_255DCDEC4()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  swift_release();
  sub_255DD2C7C(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  v0[28] = v0[10];
  sub_255DD2C7C(v1, type metadata accessor for MedicalIDEditEmergencyContactsModalView);
  swift_release();
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  return MEMORY[0x270FA2498](sub_255DCDF80, v3, v4);
}

uint64_t sub_255DCDF80()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_release();
  sub_255DBD3D8();
  swift_allocError();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_255DCE04C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  sub_255DD22D0(0, &qword_269F35BE0, sub_255DD2330);
  uint64_t v110 = *(void *)(v3 - 8);
  uint64_t v111 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v109 = (char *)&KeyPath - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v107 = (char *)&KeyPath - v6;
  uint64_t v7 = type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  uint64_t v100 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v101 = v8;
  uint64_t v103 = (uint64_t)&KeyPath - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  uint64_t v97 = v9;
  uint64_t v96 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v95 = (char *)&KeyPath - v10;
  sub_255DD1B7C();
  uint64_t v104 = v11;
  uint64_t v102 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v99 = (char *)&KeyPath - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD1AD0();
  uint64_t v98 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v105 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v115 = (uint64_t)&KeyPath - v16;
  sub_255DD1A68(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v93 = (char *)&KeyPath - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD1924();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&KeyPath - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_255EEECB0();
  uint64_t v23 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v25 = (char *)&KeyPath - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD19D0();
  uint64_t v112 = v26;
  uint64_t v89 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&KeyPath - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD18E8(0);
  uint64_t v90 = v29;
  MEMORY[0x270FA5388](v29);
  uint64_t v92 = (char *)&KeyPath - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD18C8(0);
  uint64_t v94 = v31;
  uint64_t v32 = MEMORY[0x270FA5388](v31);
  uint64_t v114 = (uint64_t)&KeyPath - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v113 = (uint64_t)&KeyPath - v34;
  if (qword_269F34B60 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_269F3FE20;
  uint64_t v35 = *(void *)algn_269F3FE28;
  swift_bridgeObjectRetain();
  id v37 = sub_255DCFCEC();
  uint64_t v38 = *(int *)(v7 + 24);
  uint64_t v106 = a1;
  uint64_t v39 = (uint64_t *)(a1 + v38);
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  uint64_t v116 = v36;
  uint64_t v117 = v35;
  uint64_t v118 = (uint64_t)v37;
  uint64_t v119 = v42;
  uint64_t v120 = v40;
  uint64_t v121 = v41;
  sub_255DD25F8();
  swift_bridgeObjectRetain();
  uint64_t v88 = v28;
  sub_255EEFA30();
  sub_255EEECA0();
  long long v43 = &v22[*(int *)(v20 + 36)];
  long long v44 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v45 = v91;
  v44(v43, v25, v91);
  char v46 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
  v46(v43, 0, 1, v45);
  uint64_t v47 = v89;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v22, v28, v112);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v48 = (uint64_t)v93;
  v44(v93, v25, v45);
  v46((char *)v48, 0, 1, v45);
  uint64_t v49 = (uint64_t)v92;
  long long v50 = (uint64_t *)&v92[*(int *)(v90 + 36)];
  sub_255DD3478(0, &qword_269F35B30, (uint64_t (*)(uint64_t))sub_255DD1A68, MEMORY[0x263F1A418]);
  sub_255DD2768(v48, (uint64_t)v50 + *(int *)(v51 + 28));
  uint64_t *v50 = KeyPath;
  sub_255DD3408((uint64_t)v22, v49, (uint64_t (*)(void))sub_255DD1924);
  sub_255DD2C7C(v48, (uint64_t (*)(void))sub_255DD1A68);
  sub_255DD2C7C((uint64_t)v22, (uint64_t (*)(void))sub_255DD1924);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v45);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v88, v112);
  if (qword_269F34A80 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_269F35A58;
  uint64_t v53 = qword_269F35A58;
  if (qword_269F34A78 != -1)
  {
    swift_once();
    uint64_t v53 = qword_269F35A58;
  }
  uint64_t v54 = qword_269F35A50;
  uint64_t v55 = v114;
  sub_255DD3408(v49, v114, (uint64_t (*)(void))sub_255DD18E8);
  uint64_t v56 = v55 + *(int *)(v94 + 36);
  *(void *)uint64_t v56 = v52;
  *(void *)(v56 + 8) = v54;
  *(void *)(v56 + 16) = v53;
  *(void *)(v56 + 24) = v54;
  *(unsigned char *)(v56 + 32) = 0;
  sub_255DD2C7C(v49, (uint64_t (*)(void))sub_255DD18E8);
  uint64_t v57 = v113;
  sub_255DD2A04(v55, v113, (uint64_t (*)(void))sub_255DD18C8);
  uint64_t v58 = v95;
  uint64_t v59 = v97;
  uint64_t v60 = v106;
  sub_255EEFA80();
  swift_getKeyPath();
  sub_255EEFAA0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v58, v59);
  uint64_t v61 = v116;
  uint64_t v62 = v117;
  uint64_t v63 = v118;
  uint64_t v64 = swift_getKeyPath();
  uint64_t v65 = v99;
  sub_255DCF4DC(v61, v62, v63, v64, (uint64_t)sub_255DCECFC, 0);
  uint64_t v66 = v103;
  sub_255DD3408(v60, v103, type metadata accessor for MedicalIDEmergencyContactsEditView);
  unint64_t v67 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  uint64_t v68 = swift_allocObject();
  sub_255DD2A04(v66, v68 + v67, type metadata accessor for MedicalIDEmergencyContactsEditView);
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = sub_255DD2934;
  *(void *)(v69 + 24) = v68;
  uint64_t v70 = v102;
  uint64_t v71 = v104;
  uint64_t v72 = (uint64_t)v105;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v105, v65, v104);
  char v73 = (uint64_t (**)())(v72 + *(int *)(v98 + 36));
  *char v73 = sub_255DD29DC;
  v73[1] = (uint64_t (*)())v69;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v65, v71);
  uint64_t v74 = v115;
  uint64_t v75 = sub_255DD2A04(v72, v115, (uint64_t (*)(void))sub_255DD1AD0);
  MEMORY[0x270FA5388](v75);
  *(&KeyPath - 2) = v60;
  sub_255DD2330(0);
  sub_255DD2A74();
  char v76 = v107;
  sub_255EEFA50();
  sub_255DD3408(v57, v55, (uint64_t (*)(void))sub_255DD18C8);
  sub_255DD3408(v74, v72, (uint64_t (*)(void))sub_255DD1AD0);
  uint64_t v78 = v109;
  uint64_t v77 = v110;
  id v79 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  uint64_t v80 = v111;
  v79(v109, v76, v111);
  uint64_t v81 = v55;
  uint64_t v82 = v108;
  sub_255DD3408(v81, v108, (uint64_t (*)(void))sub_255DD18C8);
  sub_255DD1824();
  uint64_t v84 = v83;
  sub_255DD3408(v72, v82 + *(int *)(v83 + 48), (uint64_t (*)(void))sub_255DD1AD0);
  v79((char *)(v82 + *(int *)(v84 + 64)), v78, v80);
  uint64_t v85 = *(void (**)(char *, uint64_t))(v77 + 8);
  v85(v76, v80);
  sub_255DD2C7C(v115, (uint64_t (*)(void))sub_255DD1AD0);
  sub_255DD2C7C(v113, (uint64_t (*)(void))sub_255DD18C8);
  v85(v78, v80);
  sub_255DD2C7C(v72, (uint64_t (*)(void))sub_255DD1AD0);
  return sub_255DD2C7C(v114, (uint64_t (*)(void))sub_255DD18C8);
}

uint64_t sub_255DCECFC@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  sub_255DD1A68(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v45 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD1E9C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v5);
  long long v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_255EEECB0();
  uint64_t v41 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_255EEEEB0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD22D0(0, &qword_269F35BA0, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v39 - v17;
  sub_255DD1F48();
  uint64_t v48 = v19;
  uint64_t v43 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v22 = a1[7];
  _OWORD v50[6] = a1[6];
  unsigned char v50[7] = v22;
  v50[8] = a1[8];
  long long v23 = a1[3];
  v50[2] = a1[2];
  v50[3] = v23;
  long long v24 = a1[5];
  v50[4] = a1[4];
  v50[5] = v24;
  long long v25 = a1[1];
  v50[0] = *a1;
  v50[1] = v25;
  uint64_t v49 = v50;
  type metadata accessor for ContactLabelEditView(0);
  sub_255DD0670(&qword_269F35BB0, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
  sub_255EEFA50();
  sub_255EEEEA0();
  sub_255DD2008();
  uint64_t v47 = v21;
  sub_255EEF6B0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (qword_269F34A88 != -1) {
    swift_once();
  }
  sub_255EEECA0();
  uint64_t v26 = (uint64_t)v44;
  uint64_t v27 = &v44[*(int *)(v6 + 36)];
  uint64_t v28 = v41;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  uint64_t v30 = v42;
  v29(v27, v9, v42);
  uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56);
  v31(v27, 0, 1, v30);
  uint64_t v32 = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v26, v47, v48);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v33 = (uint64_t)v45;
  v29(v45, v9, v30);
  v31((char *)v33, 0, 1, v30);
  sub_255DD1DC8(0);
  uint64_t v35 = v46;
  uint64_t v36 = (uint64_t *)(v46 + *(int *)(v34 + 36));
  sub_255DD3478(0, &qword_269F35B30, (uint64_t (*)(uint64_t))sub_255DD1A68, MEMORY[0x263F1A418]);
  sub_255DD2768(v33, (uint64_t)v36 + *(int *)(v37 + 28));
  *uint64_t v36 = KeyPath;
  sub_255DD3408(v26, v35, (uint64_t (*)(void))sub_255DD1E9C);
  sub_255DD2C7C(v33, (uint64_t (*)(void))sub_255DD1A68);
  sub_255DD2C7C(v26, (uint64_t (*)(void))sub_255DD1E9C);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v47, v48);
}

__n128 sub_255DCF318@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)a2 + *(int *)(type metadata accessor for ContactLabelEditView(0) + 24));
  *uint64_t v4 = swift_getKeyPath();
  sub_255DD3478(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_255DD34DC(a1);
  sub_255DD35A4(0, &qword_269F35C90, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390](v19);
  long long v15 = v19[4];
  long long v16 = v19[5];
  long long v17 = v19[6];
  long long v18 = v19[7];
  long long v11 = v19[0];
  long long v12 = v19[1];
  long long v13 = v19[2];
  long long v14 = v19[3];
  type metadata accessor for ContactLabelEditViewModel(0);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 144) = 0;
  sub_255EEE300();
  *(_OWORD *)(v5 + 80) = v15;
  *(_OWORD *)(v5 + 96) = v16;
  *(_OWORD *)(v5 + 112) = v17;
  *(_OWORD *)(v5 + 128) = v18;
  *(_OWORD *)(v5 + 16) = v11;
  *(_OWORD *)(v5 + 32) = v12;
  *(_OWORD *)(v5 + 48) = v13;
  *(_OWORD *)(v5 + 64) = v14;
  *a2 = v5;
  a2[1] = 0;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v6 + 128) = v7;
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a1 + 128);
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 64) = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 96) = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(__n128 *)(v6 + 32) = result;
  a2[2] = (uint64_t)sub_255DD3678;
  a2[3] = v6;
  return result;
}

uint64_t sub_255DCF4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  sub_255DD2D44();
  MEMORY[0x25A29B390](v20);
  uint64_t v10 = *(void *)(v20[0] + 16);
  swift_bridgeObjectRelease();
  long long v11 = (void *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  v20[0] = 0;
  v20[1] = v10;
  v20[2] = sub_255DD2E10;
  void v20[3] = v11;
  sub_255DD1DC8(0);
  sub_255DD35A4(0, &qword_269F35C48, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D488]);
  sub_255DD21C8();
  sub_255DD36DC(&qword_269F35C68, sub_255DD1DC8, (void (*)(void))sub_255DD2E20, (void (*)(void))sub_255DD2F3C);
  sub_255DD2CDC(&qword_269F35C50);
  sub_255DD2CDC((unint64_t *)&qword_269F35C88);
  swift_getKeyPath();
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  uint64_t v14 = v23;
  long long v15 = (void *)swift_allocObject();
  v15[2] = v12;
  v15[3] = v13;
  v15[4] = v14;
  v15[5] = a5;
  v15[6] = a6;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_255DD3018;
  *(void *)(v16 + 24) = v15;
  sub_255DD1C14();
  sub_255DD20D0();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_255EEFA00();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DCF7AC()
{
  return swift_release();
}

uint64_t sub_255DCF9B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AddEmergencyContactView(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD23CC(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD2350(0);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  sub_255EEFA70();
  id v15 = *(id *)(a1 + *(int *)(type metadata accessor for MedicalIDEmergencyContactsEditView(0) + 20));
  sub_255ED5980((uint64_t)v15, (uint64_t)v6);
  sub_255DD3408((uint64_t)v6, (uint64_t)v10, type metadata accessor for AddEmergencyContactView);
  uint64_t v16 = &v10[*(int *)(v8 + 44)];
  v16[32] = 0;
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  sub_255DD2C7C((uint64_t)v6, type metadata accessor for AddEmergencyContactView);
  char v17 = sub_255EEF170();
  if (qword_269F34A90 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_255DD3408((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))sub_255DD23CC);
  uint64_t v26 = &v14[*(int *)(v12 + 36)];
  *uint64_t v26 = v17;
  *((void *)v26 + 1) = v19;
  *((void *)v26 + 2) = v21;
  *((void *)v26 + 3) = v23;
  *((void *)v26 + 4) = v25;
  v26[40] = 0;
  sub_255DD2C7C((uint64_t)v10, (uint64_t (*)(void))sub_255DD23CC);
  char v27 = sub_255EEF1E0();
  if (qword_269F34A98 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_255DD3408((uint64_t)v14, a2, (uint64_t (*)(void))sub_255DD2350);
  sub_255DD2330(0);
  uint64_t v37 = a2 + *(int *)(v36 + 36);
  *(unsigned char *)uint64_t v37 = v27;
  *(void *)(v37 + 8) = v29;
  *(void *)(v37 + 16) = v31;
  *(void *)(v37 + 24) = v33;
  *(void *)(v37 + 32) = v35;
  *(unsigned char *)(v37 + 40) = 0;
  return sub_255DD2C7C((uint64_t)v14, (uint64_t (*)(void))sub_255DD2350);
}

id sub_255DCFCEC()
{
  id result = objc_msgSend(self, sel_defaultWorkspace);
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)sub_255EEFD50();
    objc_msgSend(v1, sel_applicationIsInstalled_, v2);

    uint64_t v3 = sub_255EEFD40();
    MEMORY[0x270FA5388](v3 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v4 = (void *)qword_269F352A8;
    uint64_t v5 = sub_255EEE200();
    MEMORY[0x270FA5388](v5 - 8);
    id v6 = v4;
    sub_255EEE1F0();
    return (id)sub_255EEFDA0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_255DCFEB4@<X0>(uint64_t a1@<X8>)
{
  sub_255DD170C(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255DD1774();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = v1;
  sub_255DD3478(0, &qword_269F35AF0, (uint64_t (*)(uint64_t))sub_255DD1824, MEMORY[0x263F1BAC8]);
  sub_255DD249C();
  sub_255EEF320();
  uint64_t KeyPath = swift_getKeyPath();
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  sub_255DD1740(0);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 0, 1, v12);
  sub_255DD25A4(0);
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(v13 + 36));
  sub_255DD3478(0, &qword_269F35C10, (uint64_t (*)(uint64_t))sub_255DD170C, MEMORY[0x263F1A418]);
  sub_255DD25E0((uint64_t)v5, (uint64_t)v14 + *(int *)(v15 + 28));
  uint64_t *v14 = KeyPath;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v8 + 16))(a1, v10, v7);
  sub_255DD2C7C((uint64_t)v5, (uint64_t (*)(void))sub_255DD170C);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_255DD0168()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  qword_269F35A40 = result;
  *(void *)algn_269F35A48 = v5;
  return result;
}

uint64_t sub_255DD02B8()
{
  uint64_t v1 = type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();

  if (*(void *)(v2 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 32);
  sub_255DD3478(0, &qword_269F35320, MEMORY[0x270FA97D0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_255EEE200();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + *(int *)(v1 + 36);
  sub_255DD3478(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_255DD04D0()
{
  type metadata accessor for MedicalIDEditEmergencyContactsModalView(0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255DCD6DC();
}

void sub_255DD059C()
{
  if (!qword_269F35810)
  {
    sub_255DD35A4(255, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EEF850();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35810);
    }
  }
}

uint64_t type metadata accessor for MedicalIDEmergencyContactsEditView(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F35AC0);
}

uint64_t sub_255DD063C()
{
  return sub_255DD0670(&qword_269F35AA0, (void (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsEditView);
}

uint64_t sub_255DD0670(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255DD06B8()
{
  qword_269F35A50 = 0x4030000000000000;
}

void sub_255DD06C8()
{
  qword_269F35A58 = 0x4030000000000000;
}

void sub_255DD06D8()
{
  qword_269F35A60 = 0x4024000000000000;
}

void sub_255DD06E8()
{
  qword_269F35A68 = 0x402E000000000000;
}

void sub_255DD06F8()
{
  qword_269F35A70 = 0x4026000000000000;
}

void *sub_255DD0708@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  v14[1] = a2;
  void v14[2] = a3;
  v14[3] = a4;
  *a5 = a1;
  sub_255DD2D44();
  uint64_t result = MEMORY[0x25A29B390](v14);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v14[0] + 16) > a1)
  {
    uint64_t v7 = (_OWORD *)(v14[0] + (a1 << 7));
    long long v8 = v7[2];
    long long v9 = v7[3];
    long long v10 = v7[5];
    v15[2] = v7[4];
    v15[3] = v10;
    v15[0] = v8;
    v15[1] = v9;
    long long v11 = v7[6];
    long long v12 = v7[7];
    long long v13 = v7[9];
    v15[6] = v7[8];
    v15[7] = v13;
    v15[4] = v11;
    v15[5] = v12;
    sub_255DCB308((uint64_t)v15);
    swift_bridgeObjectRelease();
    swift_getAtKeyPath();
    return (void *)sub_255DCB3AC((uint64_t)v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_255DD07F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_OWORD *))
{
  long long v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a3;
  v11[5] = a4;
  v11[6] = a5;
  v11[7] = a1;
  long long v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = a5;
  v12[7] = a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  sub_255EEF9B0();
  a6(v14);
  v15[6] = v14[6];
  v15[7] = v14[7];
  _OWORD v15[8] = v14[8];
  v15[2] = v14[2];
  v15[3] = v14[3];
  v15[4] = v14[4];
  v15[5] = v14[5];
  v15[0] = v14[0];
  v15[1] = v14[1];
  return sub_255DD3328((uint64_t)v15);
}

uint64_t *sub_255DD0950(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    long long v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    long long v11 = (uint64_t *)((char *)a1 + v9);
    long long v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *long long v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_255EEFAB0();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    id v19 = v10;
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
    sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
    *(void *)&v15[*(int *)(v20 + 28)] = *(void *)&v16[*(int *)(v20 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t sub_255DD0B08(uint64_t a1, uint64_t a2)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = sub_255EEFAB0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  return swift_release();
}

uint64_t sub_255DD0C40(uint64_t a1, uint64_t a2, int *a3)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  long long v10 = (void *)(a1 + v8);
  long long v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *long long v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_255EEFAB0();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  id v18 = v9;
  swift_bridgeObjectRetain();
  v17(v14, v15, v16);
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  *(void *)(v14 + *(int *)(v19 + 28)) = *(void *)(v15 + *(int *)(v19 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_255DD0DAC(uint64_t a1, uint64_t a2, int *a3)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_255EEFAB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  *(void *)(v15 + *(int *)(v18 + 28)) = *(void *)(v16 + *(int *)(v18 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255DD0F2C(uint64_t a1, uint64_t a2, int *a3)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_255EEFAB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  *(void *)(v9 + *(int *)(v12 + 28)) = *(void *)(v10 + *(int *)(v12 + 28));
  return a1;
}

uint64_t sub_255DD106C(uint64_t a1, uint64_t a2, int *a3)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_255EEFAB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  *(void *)(v15 + *(int *)(v18 + 28)) = *(void *)(v16 + *(int *)(v18 + 28));
  swift_release();
  return a1;
}

uint64_t sub_255DD11D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DD11E4);
}

uint64_t sub_255DD11E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_255DD1370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DD1384);
}

void sub_255DD1384(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  else
  {
    sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    v12(v14, a2, a2, v13);
  }
}

void sub_255DD1510()
{
  sub_255DD3478(319, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  if (v0 <= 0x3F)
  {
    sub_255DD3478(319, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_255DD1654()
{
  unint64_t result = qword_269F35AD0;
  if (!qword_269F35AD0)
  {
    sub_255DD221C(255, &qword_269F35A98, type metadata accessor for MedicalIDEmergencyContactsEditView, sub_255DD063C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MedicalIDEditModal);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35AD0);
  }
  return result;
}

uint64_t sub_255DD16F0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DD170C(uint64_t a1)
{
}

void sub_255DD1740(uint64_t a1)
{
}

void sub_255DD1774()
{
  if (!qword_269F35AE8)
  {
    sub_255DD3478(255, &qword_269F35AF0, (uint64_t (*)(uint64_t))sub_255DD1824, MEMORY[0x263F1BAC8]);
    sub_255DD249C();
    unint64_t v0 = sub_255EEF330();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35AE8);
    }
  }
}

void sub_255DD1824()
{
  if (!qword_269F35AF8)
  {
    sub_255DD18C8(255);
    sub_255DD1AD0();
    sub_255DD22D0(255, &qword_269F35BE0, sub_255DD2330);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F35AF8);
    }
  }
}

void sub_255DD18C8(uint64_t a1)
{
}

void sub_255DD18E8(uint64_t a1)
{
}

void sub_255DD1924()
{
  if (!qword_269F35B10)
  {
    sub_255DD19D0();
    sub_255DD221C(255, &qword_269F35B20, MEMORY[0x263F1A2C8], sub_255DD1A34, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B10);
    }
  }
}

void sub_255DD19D0()
{
  if (!qword_269F35B18)
  {
    unint64_t v0 = sub_255EEFA60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B18);
    }
  }
}

uint64_t sub_255DD1A34()
{
  return sub_255DD0670(&qword_269F35B28, MEMORY[0x263F1A2C8]);
}

void sub_255DD1A68(uint64_t a1)
{
}

uint64_t sub_255DD1A9C()
{
  return sub_255DD0670(&qword_269F35B48, MEMORY[0x263F19D18]);
}

void sub_255DD1AD0()
{
  if (!qword_269F35B50)
  {
    sub_255DD1B7C();
    sub_255DD221C(255, &qword_269F35BD0, MEMORY[0x263F18FA0], sub_255DD229C, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B50);
    }
  }
}

void sub_255DD1B7C()
{
  if (!qword_269F35B58)
  {
    sub_255DD1C14();
    sub_255DD1DC8(255);
    sub_255DD20D0();
    sub_255DD21C8();
    unint64_t v0 = sub_255EEFA20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B58);
    }
  }
}

void sub_255DD1C14()
{
  if (!qword_269F35B60)
  {
    sub_255DD1CAC();
    sub_255DD1D0C();
    sub_255DD215C(&qword_269F35B78);
    unint64_t v0 = sub_255EF03B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B60);
    }
  }
}

void sub_255DD1CAC()
{
  if (!qword_269F35B68)
  {
    unint64_t v0 = sub_255EF0060();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B68);
    }
  }
}

void sub_255DD1D0C()
{
  if (!qword_269F35B70)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F35B70);
    }
  }
}

unint64_t sub_255DD1D74()
{
  unint64_t result = qword_269F35B80;
  if (!qword_269F35B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35B80);
  }
  return result;
}

void sub_255DD1DC8(uint64_t a1)
{
}

void sub_255DD1E04(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255DD3478(255, a4, a5, MEMORY[0x263F1A418]);
    unint64_t v8 = sub_255EEE870();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255DD1E9C()
{
  if (!qword_269F35B90)
  {
    sub_255DD1F48();
    sub_255DD221C(255, &qword_269F35B20, MEMORY[0x263F1A2C8], sub_255DD1A34, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35B90);
    }
  }
}

void sub_255DD1F48()
{
  if (!qword_269F35B98)
  {
    sub_255DD22D0(255, &qword_269F35BA0, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    sub_255EEEEB0();
    sub_255DD2008();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35B98);
    }
  }
}

unint64_t sub_255DD2008()
{
  unint64_t result = qword_269F35BA8;
  if (!qword_269F35BA8)
  {
    sub_255DD22D0(255, &qword_269F35BA0, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    sub_255DD0670(&qword_269F35BB0, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35BA8);
  }
  return result;
}

unint64_t sub_255DD20D0()
{
  unint64_t result = qword_269F35BB8;
  if (!qword_269F35BB8)
  {
    sub_255DD1C14();
    sub_255DD215C(&qword_269F35BC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35BB8);
  }
  return result;
}

uint64_t sub_255DD215C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255DD1CAC();
    sub_255DD1D74();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255DD21C8()
{
  unint64_t result = qword_269F35BC8;
  if (!qword_269F35BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35BC8);
  }
  return result;
}

void sub_255DD221C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_255DD229C()
{
  return sub_255DD0670(&qword_269F35BD8, MEMORY[0x263F18FA0]);
}

void sub_255DD22D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEFA60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255DD2330(uint64_t a1)
{
}

void sub_255DD2350(uint64_t a1)
{
}

void sub_255DD2370(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255DD23CC(uint64_t a1)
{
}

void sub_255DD23EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255DD221C(255, &qword_269F35B40, MEMORY[0x263F19D18], sub_255DD1A9C, MEMORY[0x263F19DC0]);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_255DD249C()
{
  unint64_t result = qword_269F35C00;
  if (!qword_269F35C00)
  {
    sub_255DD3478(255, &qword_269F35AF0, (uint64_t (*)(uint64_t))sub_255DD1824, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35C00);
  }
  return result;
}

uint64_t sub_255DD2524@<X0>(uint64_t a1@<X8>)
{
  return sub_255DCE04C(*(void *)(v1 + 16), a1);
}

uint64_t sub_255DD252C()
{
  return sub_255EEEB80();
}

uint64_t sub_255DD2550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255DD2670(a1, a2, a3, a4, sub_255DD170C, (void (*)(uint64_t, char *))sub_255DD25E0, MEMORY[0x263F195F0]);
}

void sub_255DD25A4(uint64_t a1)
{
}

uint64_t sub_255DD25E0(uint64_t a1, uint64_t a2)
{
  return sub_255DD3408(a1, a2, (uint64_t (*)(void))sub_255DD170C);
}

unint64_t sub_255DD25F8()
{
  unint64_t result = qword_269F35C18;
  if (!qword_269F35C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35C18);
  }
  return result;
}

uint64_t sub_255DD264C()
{
  return MEMORY[0x25A29A4F0]();
}

uint64_t sub_255DD2670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(uint64_t, char *), uint64_t (*a7)(char *))
{
  a5(0);
  MEMORY[0x270FA5388]();
  unint64_t v11 = (char *)&v13 - v10;
  a6(a1, (char *)&v13 - v10);
  return a7(v11);
}

uint64_t sub_255DD2714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255DD2670(a1, a2, a3, a4, sub_255DD1A68, (void (*)(uint64_t, char *))sub_255DD2768, MEMORY[0x263F19408]);
}

uint64_t sub_255DD2768(uint64_t a1, uint64_t a2)
{
  return sub_255DD3408(a1, a2, (uint64_t (*)(void))sub_255DD1A68);
}

uint64_t sub_255DD2780()
{
  uint64_t v1 = (int *)(type metadata accessor for MedicalIDEmergencyContactsEditView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  sub_255DD3478(0, &qword_269F35AB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEditableEmergencyContactsModel, MEMORY[0x263F1B870]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  swift_bridgeObjectRelease();
  uint64_t v4 = v2 + v1[9];
  uint64_t v5 = sub_255EEFAB0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_255DD3478(0, &qword_269F35AB8, MEMORY[0x263F1B888], MEMORY[0x263F1B5D0]);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DD2934()
{
  type metadata accessor for MedicalIDEmergencyContactsEditView(0);
  return sub_255DCF7AC();
}

uint64_t sub_255DD29A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DD29DC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_255DD2A04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DD2A6C@<X0>(uint64_t a1@<X8>)
{
  return sub_255DCF9B0(*(void *)(v1 + 16), a1);
}

unint64_t sub_255DD2A74()
{
  unint64_t result = qword_269F35C20;
  if (!qword_269F35C20)
  {
    sub_255DD2330(255);
    sub_255DD2AEC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35C20);
  }
  return result;
}

unint64_t sub_255DD2AEC()
{
  unint64_t result = qword_269F35C28;
  if (!qword_269F35C28)
  {
    sub_255DD2350(255);
    sub_255DD36DC(&qword_269F35C30, sub_255DD23CC, (void (*)(void))sub_255DD2BA8, (void (*)(void))sub_255DD2BDC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35C28);
  }
  return result;
}

uint64_t sub_255DD2BA8()
{
  return sub_255DD0670(&qword_269F35C38, (void (*)(uint64_t))type metadata accessor for AddEmergencyContactView);
}

uint64_t sub_255DD2BDC()
{
  return sub_255DD2C18(&qword_269F35C40, &qword_269F35B40, MEMORY[0x263F19D18], sub_255DD1A9C);
}

uint64_t sub_255DD2C18(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255DD221C(255, a2, a3, a4, MEMORY[0x263F19DC0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DD2C7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255DD2CDC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255DD35A4(255, &qword_269F35C48, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255DD2D44()
{
  if (!qword_269F35C60)
  {
    sub_255DD35A4(255, &qword_269F35C48, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D488]);
    unint64_t v0 = sub_255EEF9D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35C60);
    }
  }
}

uint64_t sub_255DD2DC0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void *sub_255DD2E10@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_255DD0708(*a1, v2[2], v2[3], v2[4], a2);
}

unint64_t sub_255DD2E20()
{
  unint64_t result = qword_269F35C70;
  if (!qword_269F35C70)
  {
    sub_255DD1E9C();
    sub_255DD22D0(255, &qword_269F35BA0, (void (*)(uint64_t))type metadata accessor for ContactLabelEditView);
    sub_255EEEEB0();
    sub_255DD2008();
    swift_getOpaqueTypeConformance2();
    sub_255DD2C18(&qword_269F35C78, &qword_269F35B20, MEMORY[0x263F1A2C8], sub_255DD1A34);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35C70);
  }
  return result;
}

uint64_t sub_255DD2F3C()
{
  return sub_255DD2F64(&qword_269F35C80, &qword_269F35B30, (uint64_t (*)(uint64_t))sub_255DD1A68);
}

uint64_t sub_255DD2F64(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255DD3478(255, a2, a3, MEMORY[0x263F1A418]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DD2FC8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DD3018(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = (void (*)(_OWORD *))v2[5];
  uint64_t v4 = *a1;
  long long v5 = a2[5];
  v10[4] = a2[4];
  v10[5] = v5;
  long long v6 = a2[7];
  v10[6] = a2[6];
  v10[7] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  long long v8 = a2[3];
  v10[2] = a2[2];
  v10[3] = v8;
  return sub_255DD07F4(v4, (uint64_t)v10, v2[2], v2[3], v2[4], v3);
}

uint64_t sub_255DD306C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(_OWORD *, char *))(v1 + 16);
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  uint64_t v9 = *(void *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  void v8[2] = *(_OWORD *)(a1 + 32);
  _OWORD v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return v2(v8, (char *)v8 + 8);
}

void *sub_255DD30D0@<X0>(uint64_t a1@<X2>, unint64_t *a2@<X3>, _OWORD *a3@<X8>)
{
  unint64_t v4 = *a2;
  v17[1] = *(void *)a1;
  long long v18 = *(_OWORD *)(a1 + 8);
  sub_255DD2D44();
  uint64_t result = MEMORY[0x25A29B390](v17);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v4 < *(void *)(v17[0] + 16))
  {
    long long v6 = (_OWORD *)(v17[0] + (v4 << 7));
    long long v7 = v6[2];
    long long v8 = v6[3];
    long long v9 = v6[5];
    long long v21 = v6[4];
    long long v22 = v9;
    long long v19 = v7;
    long long v20 = v8;
    long long v10 = v6[6];
    long long v11 = v6[7];
    long long v12 = v6[9];
    long long v25 = v6[8];
    long long v26 = v12;
    long long v23 = v10;
    long long v24 = v11;
    sub_255DCB308((uint64_t)&v19);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    long long v13 = v24;
    a3[4] = v23;
    a3[5] = v13;
    long long v14 = v26;
    a3[6] = v25;
    a3[7] = v14;
    long long v15 = v20;
    *a3 = v19;
    a3[1] = v15;
    long long v16 = v22;
    a3[2] = v21;
    a3[3] = v16;
    return result;
  }
  __break(1u);
  return result;
}

void *sub_255DD319C@<X0>(_OWORD *a1@<X8>)
{
  return sub_255DD30D0(v1 + 32, (unint64_t *)(v1 + 56), a1);
}

uint64_t sub_255DD31AC(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  long long v5 = a1[5];
  long long v32 = a1[4];
  long long v33 = v5;
  long long v6 = a1[7];
  long long v34 = a1[6];
  long long v35 = v6;
  long long v7 = a1[1];
  long long v28 = *a1;
  long long v29 = v7;
  long long v8 = a1[3];
  long long v30 = a1[2];
  long long v31 = v8;
  unint64_t v9 = *a5;
  v26[1] = *(void *)a4;
  long long v27 = *(_OWORD *)(a4 + 8);
  sub_255DCB308((uint64_t)&v28);
  sub_255DD2D44();
  MEMORY[0x25A29B390](v26);
  long long v10 = (void *)v26[0];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_255DD33EC(v10);
  long long v10 = (void *)result;
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v9 < v10[2])
  {
    long long v12 = &v10[16 * v9];
    long long v13 = v12[2];
    long long v14 = v12[3];
    long long v15 = v12[5];
    v25[2] = v12[4];
    v25[3] = v15;
    v25[0] = v13;
    v25[1] = v14;
    long long v16 = v12[6];
    long long v17 = v12[7];
    long long v18 = v12[9];
    v25[6] = v12[8];
    v25[7] = v18;
    v25[4] = v16;
    v25[5] = v17;
    long long v19 = v28;
    long long v20 = v29;
    long long v21 = v31;
    v12[4] = v30;
    v12[5] = v21;
    v12[2] = v19;
    uint64_t v12[3] = v20;
    long long v22 = v32;
    long long v23 = v33;
    long long v24 = v35;
    v12[8] = v34;
    v12[9] = v24;
    v12[6] = v22;
    v12[7] = v23;
    sub_255DCB3AC((uint64_t)v25);
    v26[0] = v10;
    return sub_255EEF980();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t objectdestroy_46Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255DD3318(long long *a1)
{
  return sub_255DD31AC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32, (unint64_t *)(v1 + 56));
}

uint64_t sub_255DD3328(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  unint64_t v4 = *(void **)(a1 + 120);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

void *sub_255DD33EC(void *a1)
{
  return sub_255DFA74C(0, a1[2], 0, a1);
}

double sub_255DD3400@<D0>(uint64_t *a1@<X8>)
{
  *(void *)&double result = sub_255DCF318(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_255DD3408(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255DD3478(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255DD34DC(uint64_t a1)
{
  uint64_t v5 = *(void **)(a1 + 112);
  id v2 = *(id *)(a1 + 120);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v5;
  return a1;
}

void sub_255DD35A4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255DD35F0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255DD3678(_OWORD *a1)
{
  return sub_255E02F0C(a1);
}

uint64_t sub_255DD3680()
{
  return sub_255DD36DC(&qword_269F35C98, sub_255DD25A4, (void (*)(void))sub_255DD3768, (void (*)(void))sub_255DD379C);
}

uint64_t sub_255DD36DC(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DD3768()
{
  return sub_255DD0670(&qword_269F35CA0, (void (*)(uint64_t))sub_255DD1774);
}

uint64_t sub_255DD379C()
{
  return sub_255DD2F64(&qword_269F35CA8, &qword_269F35C10, (uint64_t (*)(uint64_t))sub_255DD170C);
}

uint64_t sub_255DD37D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_255DD3808(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEEDF0();
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_255EEEE00();
}

uint64_t sub_255DD3900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_255EEEDF0();
  MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_255EEEE00();
}

uint64_t sub_255DD39F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v29[1] = a2;
  uint64_t v31 = a3;
  sub_255DA765C();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA75D4();
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  long long v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DA754C();
  uint64_t v30 = v13;
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
  uint64_t v16 = sub_255EEE410();
  sub_255DD7DF8(v29[0], (uint64_t)v8, (uint64_t (*)(void))_s12SheetContentVMa);
  long long v17 = (uint64_t *)&v8[*(int *)(v6 + 44)];
  *long long v17 = v16;
  v17[1] = (uint64_t)a1;
  uint64_t v18 = *(void *)(a2 + 32);
  long long v19 = *(void **)(v18 + 16);
  sub_255D7ED10(0, &qword_269F35500);
  sub_255DD7C58(&qword_269F35DD8, &qword_269F35500);
  id v20 = a1;
  id v21 = v19;
  uint64_t v22 = sub_255EEE410();
  sub_255DD7DF8((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))sub_255DA765C);
  long long v23 = (uint64_t *)&v12[*(int *)(v10 + 44)];
  *long long v23 = v22;
  v23[1] = (uint64_t)v21;
  sub_255DD7EB8((uint64_t)v8, (uint64_t (*)(void))sub_255DA765C);
  long long v24 = *(void **)(v18 + 24);
  sub_255D7ED10(0, (unint64_t *)&qword_269F35518);
  sub_255DD7C58(&qword_269F35DE0, (unint64_t *)&qword_269F35518);
  id v25 = v24;
  uint64_t v26 = sub_255EEE410();
  sub_255DD7DF8((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))sub_255DA75D4);
  long long v27 = (uint64_t *)&v15[*(int *)(v30 + 36)];
  *long long v27 = v26;
  v27[1] = (uint64_t)v25;
  sub_255DD7EB8((uint64_t)v12, (uint64_t (*)(void))sub_255DA75D4);
  type metadata accessor for MedicalIDDataManager();
  sub_255DD7C9C(&qword_269F35520, (void (*)(uint64_t))sub_255DA754C, (void (*)(void))sub_255DA7740, (void (*)(void))sub_255DA78F4);
  sub_255DD7DA8(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEF430();
  return sub_255DD7EB8((uint64_t)v15, (uint64_t (*)(void))sub_255DA754C);
}

uint64_t sub_255DD3DFC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v29[1] = a2;
  uint64_t v31 = a3;
  sub_255DD6374();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD62EC();
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  long long v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD6264();
  uint64_t v30 = v13;
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
  uint64_t v16 = sub_255EEE410();
  sub_255DD7DF8(v29[0], (uint64_t)v8, (uint64_t (*)(void))sub_255DD60EC);
  long long v17 = (uint64_t *)&v8[*(int *)(v6 + 44)];
  *long long v17 = v16;
  v17[1] = (uint64_t)a1;
  uint64_t v18 = *(void *)(a2 + 32);
  long long v19 = *(void **)(v18 + 16);
  sub_255D7ED10(0, &qword_269F35500);
  sub_255DD7C58(&qword_269F35DD8, &qword_269F35500);
  id v20 = a1;
  id v21 = v19;
  uint64_t v22 = sub_255EEE410();
  sub_255DD7DF8((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))sub_255DD6374);
  long long v23 = (uint64_t *)&v12[*(int *)(v10 + 44)];
  *long long v23 = v22;
  v23[1] = (uint64_t)v21;
  sub_255DD7EB8((uint64_t)v8, (uint64_t (*)(void))sub_255DD6374);
  long long v24 = *(void **)(v18 + 24);
  sub_255D7ED10(0, (unint64_t *)&qword_269F35518);
  sub_255DD7C58(&qword_269F35DE0, (unint64_t *)&qword_269F35518);
  id v25 = v24;
  uint64_t v26 = sub_255EEE410();
  sub_255DD7DF8((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))sub_255DD62EC);
  long long v27 = (uint64_t *)&v15[*(int *)(v30 + 36)];
  *long long v27 = v26;
  v27[1] = (uint64_t)v25;
  sub_255DD7EB8((uint64_t)v12, (uint64_t (*)(void))sub_255DD62EC);
  type metadata accessor for MedicalIDDataManager();
  sub_255DD7C9C(&qword_269F35D20, (void (*)(uint64_t))sub_255DD6264, (void (*)(void))sub_255DD63FC, (void (*)(void))sub_255DA78F4);
  sub_255DD7DA8(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEF430();
  return sub_255DD7EB8((uint64_t)v15, (uint64_t (*)(void))sub_255DD6264);
}

uint64_t sub_255DD4200()
{
  return sub_255EEEB30();
}

uint64_t sub_255DD4224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255DD5BFC(a1, a2, a3, a4, MEMORY[0x270FA9810], MEMORY[0x263F19590]);
}

uint64_t MedicalIDMainView.init(healthStore:medicalIDData:displayConfiguration:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for MedicalIDMainView();
  uint64_t v9 = (uint64_t *)((char *)a4 + v8[5]);
  *uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_255DD77CC(0, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (uint64_t *)((char *)a4 + v8[6]);
  *uint64_t v11 = swift_getKeyPath();
  sub_255DD77CC(0, &qword_269F35320, MEMORY[0x270FA9820], v10);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDModelProvider();
  swift_allocObject();
  id v12 = a3;
  uint64_t result = sub_255D87B1C(a1, a2, v12);
  *a4 = result;
  *(uint64_t *)((char *)a4 + v8[8]) = (uint64_t)v12;
  uint64_t v14 = (char *)a4 + v8[7];
  char *v14 = 1;
  *((void *)v14 + 1) = 0;
  return result;
}

uint64_t type metadata accessor for MedicalIDMainView()
{
  uint64_t result = qword_269F35D48;
  if (!qword_269F35D48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MedicalIDMainView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v2 = type metadata accessor for MedicalIDMainView();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD5D58();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD60EC();
  uint64_t v40 = v10 - 8;
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD614C();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  uint64_t v47 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v39 = (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD6564();
  uint64_t v44 = *(void *)(v16 - 8);
  uint64_t v45 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v43 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(v3 + 40);
  uint64_t v37 = (uint64_t *)v1;
  uint64_t v38 = v18;
  uint64_t v19 = *(void *)(v1 + v18);
  sub_255DD7DF8(v1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDMainView);
  unint64_t v20 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v21 = swift_allocObject();
  sub_255DD66B8((uint64_t)v6, v21 + v20);
  uint64_t v49 = v19;
  long long v50 = sub_255DD671C;
  uint64_t v51 = v21;
  sub_255DD5E0C();
  sub_255DD7DA8(&qword_269F35CF0, (void (*)(uint64_t))sub_255DD5E0C);
  sub_255EEF550();
  swift_release();
  uint64_t v22 = v37;
  sub_255DD7DF8((uint64_t)v37, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDMainView);
  uint64_t v23 = swift_allocObject();
  sub_255DD66B8((uint64_t)v6, v23 + v20);
  uint64_t v25 = v41;
  uint64_t v24 = v42;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v12, v9, v42);
  uint64_t v26 = (uint64_t (**)())&v12[*(int *)(v40 + 44)];
  *uint64_t v26 = sub_255DD6984;
  v26[1] = (uint64_t (*)())v23;
  void v26[2] = 0;
  v26[3] = 0;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v24);
  uint64_t v27 = v38;
  uint64_t v28 = v39;
  sub_255DD3DFC(*(void **)((char *)v22 + v38), *v22, v39);
  sub_255DD7EB8((uint64_t)v12, (uint64_t (*)(void))sub_255DD60EC);
  objc_msgSend(*(id *)((char *)v22 + v27), sel_isHomeIndicatorHidden);
  sub_255DD6264();
  uint64_t v30 = v29;
  uint64_t v31 = type metadata accessor for MedicalIDDataManager();
  uint64_t v32 = sub_255DD7C9C(&qword_269F35D20, (void (*)(uint64_t))sub_255DD6264, (void (*)(void))sub_255DD63FC, (void (*)(void))sub_255DA78F4);
  uint64_t v33 = sub_255DD7DA8(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  uint64_t v49 = v30;
  long long v50 = (uint64_t (*)@<X0>(uint64_t@<X8>))v31;
  uint64_t v51 = v32;
  uint64_t v52 = v33;
  swift_getOpaqueTypeConformance2();
  long long v34 = v43;
  uint64_t v35 = v46;
  sub_255EEF590();
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v28, v35);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v48, v34, v45);
}

uint64_t sub_255DD4918@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v43 = type metadata accessor for MedicalIDDataContentView();
  MEMORY[0x270FA5388](v43);
  uint64_t v4 = (uint64_t *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255DD5EF4();
  uint64_t v44 = v5;
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v38 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v36 - v8;
  sub_255DD7D38(0, &qword_269F35DF0, MEMORY[0x263F19B20]);
  uint64_t v41 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v36 - v10;
  sub_255DD5E8C();
  uint64_t v42 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a1;
  uint64_t v19 = *a1;
  uint64_t v20 = *(void *)(*a1 + 56);
  swift_getKeyPath();
  uint64_t v51 = v20;
  sub_255DD7DA8(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  swift_retain();
  sub_255EEE2D0();
  swift_release();
  uint64_t v21 = v20 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255DD7DF8(v21, (uint64_t)v18, (uint64_t (*)(void))sub_255D894E4);
  swift_release();
  uint64_t v22 = type metadata accessor for MedicalIDData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v18, 1, v22) == 1)
  {
    sub_255EEE6C0();
    uint64_t v23 = v42;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v15, v42);
    swift_storeEnumTagMultiPayload();
    sub_255DD7DA8(&qword_269F35CE8, (void (*)(uint64_t))sub_255DD5E8C);
    uint64_t v24 = sub_255DD7DA8(&qword_269F35CD8, (void (*)(uint64_t))type metadata accessor for MedicalIDDataContentView);
    uint64_t v48 = v43;
    uint64_t v49 = v24;
    swift_getOpaqueTypeConformance2();
    sub_255EEEE00();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v23);
  }
  else
  {
    uint64_t v26 = (char *)v37 + *(int *)(type metadata accessor for MedicalIDMainView() + 28);
    char v27 = *v26;
    uint64_t v28 = *((void *)v26 + 1);
    char v46 = v27;
    uint64_t v47 = v28;
    sub_255DD7E60();
    swift_retain();
    sub_255EEF840();
    sub_255DA05A4(v19, v48, v49, v50, v4);
    uint64_t v29 = sub_255DD7DA8(&qword_269F35CD8, (void (*)(uint64_t))type metadata accessor for MedicalIDDataContentView);
    uint64_t v30 = v38;
    uint64_t v31 = v43;
    sub_255EEF550();
    sub_255DD7EB8((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MedicalIDDataContentView);
    uint64_t v33 = v39;
    uint64_t v32 = v40;
    long long v34 = v30;
    uint64_t v35 = v44;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v34, v44);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v11, v33, v35);
    swift_storeEnumTagMultiPayload();
    sub_255DD7DA8(&qword_269F35CE8, (void (*)(uint64_t))sub_255DD5E8C);
    uint64_t v48 = v31;
    uint64_t v49 = v29;
    swift_getOpaqueTypeConformance2();
    sub_255EEEE00();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v35);
    return sub_255DD7EB8((uint64_t)v18, (uint64_t (*)(void))sub_255D894E4);
  }
}

uint64_t sub_255DD4F54(uint64_t a1)
{
  sub_255DD5058();
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDMainView() + 32));
  swift_retain();
  objc_msgSend(v3, sel_accessPoint);
  MIUIMedicalIDAccessPoint.analyticsDisplayName.getter();
  id v4 = objc_msgSend(*(id *)(v2 + 16), sel_profileIdentifier);
  objc_msgSend(v4, sel_type);

  sub_255E6847C();
  sub_255E6826C();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_255DD5058()
{
  v28[1] = *(id *)MEMORY[0x263EF8340];
  if (objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for MedicalIDMainView() + 32)), sel_isLockScreen))BOOL v2 = MEMORY[0x263F2AA38] == 0; {
  else
  }
    BOOL v2 = 1;
  if (!v2)
  {
    unsigned int v3 = MKBGetDeviceLockState();
    if (v3 <= 6 && ((1 << v3) & 0x46) != 0)
    {
      id v4 = objc_msgSend(self, sel_availableDevices);
      sub_255D7ED10(0, &qword_269F35DE8);
      unint64_t v5 = sub_255EEFEA0();

      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_255EF03F0();
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_9;
        }
      }
      else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_9:
        if ((v5 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = (objc_class *)MEMORY[0x25A29BD10](0, v5);
        }
        else
        {
          if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_31;
          }
          uint64_t v6 = (objc_class *)*(id *)(v5 + 32);
        }
        uint64_t v7 = v6;
        swift_bridgeObjectRelease();
        uint64_t v8 = self;
        v28[0] = 0;
        unint64_t v5 = v7;
        id v9 = objc_msgSend(v8, sel_deviceWithDescriptor_error_, v5, v28);
        if (v9)
        {
          uint64_t v1 = v9;
          id v10 = v28[0];

          v28[0] = 0;
          if (objc_msgSend(v1, sel_forceBioLockoutIfLockedForUser_error_, 501, v28))
          {
            uint64_t v11 = qword_269F34C50;
            id v12 = v28[0];
            if (v11 == -1)
            {
LABEL_15:
              uint64_t v13 = sub_255EEE3D0();
              __swift_project_value_buffer(v13, (uint64_t)qword_269F3FE80);
              uint64_t v14 = sub_255EEE3B0();
              os_log_type_t v15 = sub_255EF00E0();
              if (os_log_type_enabled(v14, v15))
              {
                uint64_t v16 = swift_slowAlloc();
                uint64_t v17 = (void *)swift_slowAlloc();
                v28[0] = v17;
                *(_DWORD *)uint64_t v16 = 136315394;
                sub_255DB0024(0xD000000000000011, 0x8000000255EF3370, (uint64_t *)v28);
                sub_255EF0200();
                *(_WORD *)(v16 + 12) = 2080;
                uint64_t v18 = sub_255EEFDB0();
                sub_255DB0024(v18, v19, (uint64_t *)v28);
                sub_255EF0200();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_255D76000, v14, v15, "[%s] Successfully forced passcode lock: %s", (uint8_t *)v16, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x25A29C8A0](v17, -1, -1);
                MEMORY[0x25A29C8A0](v16, -1, -1);

                return;
              }

              goto LABEL_27;
            }
LABEL_31:
            swift_once();
            goto LABEL_15;
          }
          id v22 = v28[0];
          uint64_t v21 = (void *)sub_255EEDFC0();

          swift_willThrow();
        }
        else
        {
          id v20 = v28[0];
          uint64_t v21 = (void *)sub_255EEDFC0();

          swift_willThrow();
        }

LABEL_23:
        if (qword_269F34C50 != -1) {
          swift_once();
        }
        uint64_t v24 = sub_255EEE3D0();
        __swift_project_value_buffer(v24, (uint64_t)qword_269F3FE80);
        unint64_t v5 = sub_255EEE3B0();
        os_log_type_t v25 = sub_255EF00C0();
        if (os_log_type_enabled((os_log_t)v5, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          char v27 = (void *)swift_slowAlloc();
          v28[0] = v27;
          *(_DWORD *)uint64_t v26 = 136315138;
          sub_255DB0024(0xD000000000000011, 0x8000000255EF3370, (uint64_t *)v28);
          sub_255EF0200();
          _os_log_impl(&dword_255D76000, (os_log_t)v5, v25, "[%s] Failed to force passcode lock with error", v26, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x25A29C8A0](v27, -1, -1);
          MEMORY[0x25A29C8A0](v26, -1, -1);
        }
LABEL_27:

        return;
      }
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
}

uint64_t sub_255DD55A8@<X0>(void *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v39 = a2;
  uint64_t WitnessTable = a3;
  uint64_t v42 = a6;
  sub_255EEE810();
  uint64_t v43 = a5;
  uint64_t v9 = sub_255EEE890();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = *(void *)(a4 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  id v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  id v22 = (char *)&v36 - v21;
  uint64_t v41 = sub_255EEEE10();
  uint64_t v38 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v37 = (char *)&v36 - v23;
  id v24 = objc_msgSend(a1, sel_isHostingView);
  if (v24)
  {
    v39();
    os_log_type_t v25 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v25(v22, v20, a4);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
    v26(v20, a4);
    v25(v20, v22, a4);
    swift_getWitnessTable();
    char v27 = v37;
    sub_255DD3808((uint64_t)v20, a4);
    v26(v20, a4);
    v26(v22, a4);
  }
  else
  {
    MEMORY[0x270FA5388](v24);
    uint64_t v28 = v43;
    *(&v36 - 6) = a4;
    *(&v36 - 5) = v28;
    uint64_t v29 = v39;
    *(&v36 - 4) = (uint64_t)a1;
    *(&v36 - 3) = (uint64_t)v29;
    *(&v36 - 2) = WitnessTable;
    sub_255EEE880();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v30(v16, v13, v9);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v10 + 8);
    v31(v13, v9);
    v30(v13, v16, v9);
    char v27 = v37;
    sub_255DD3900((uint64_t)v13, a4, v9);
    v31(v13, v9);
    v31(v16, v9);
  }
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v44 = v43;
  uint64_t v45 = v32;
  uint64_t v33 = v41;
  swift_getWitnessTable();
  uint64_t v34 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v42, v27, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v27, v33);
}

uint64_t sub_255DD5A40@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v15 - v9;
  v11(v8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v12(v10, v7, a1);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v12(a2, v10, a1);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, a1);
}

uint64_t sub_255DD5B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255DD55A8(*(void **)v2, *(void (**)(void))(v2 + 8), *(void *)(v2 + 16), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_255DD5B94()
{
  return sub_255EEEB70();
}

uint64_t sub_255DD5BB8()
{
  return sub_255EEEB70();
}

uint64_t sub_255DD5BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255DD5BFC(a1, a2, a3, a4, MEMORY[0x270FA9910], MEMORY[0x263F195E0]);
}

uint64_t sub_255DD5BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_255DD5CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255DD5BFC(a1, a2, a3, a4, MEMORY[0x270FA9910], MEMORY[0x263F195E0]);
}

uint64_t sub_255DD5D00()
{
  return sub_255EEEB30();
}

uint64_t sub_255DD5D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255DD5BFC(a1, a2, a3, a4, MEMORY[0x270FA9810], MEMORY[0x263F19590]);
}

void sub_255DD5D58()
{
  if (!qword_269F35CB0)
  {
    sub_255DD5E0C();
    sub_255DD7DA8(&qword_269F35CF0, (void (*)(uint64_t))sub_255DD5E0C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35CB0);
    }
  }
}

void sub_255DD5E0C()
{
  if (!qword_269F35CB8)
  {
    sub_255DD7D38(255, &qword_269F35CC0, MEMORY[0x263F19B28]);
    sub_255DD5FA8();
    unint64_t v0 = type metadata accessor for UINavStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35CB8);
    }
  }
}

void sub_255DD5E8C()
{
  if (!qword_269F35CC8)
  {
    unint64_t v0 = sub_255EEE6D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35CC8);
    }
  }
}

void sub_255DD5EF4()
{
  if (!qword_269F35CD0)
  {
    type metadata accessor for MedicalIDDataContentView();
    sub_255DD7DA8(&qword_269F35CD8, (void (*)(uint64_t))type metadata accessor for MedicalIDDataContentView);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35CD0);
    }
  }
}

unint64_t sub_255DD5FA8()
{
  unint64_t result = qword_269F35CE0;
  if (!qword_269F35CE0)
  {
    sub_255DD7D38(255, &qword_269F35CC0, MEMORY[0x263F19B28]);
    sub_255DD7DA8(&qword_269F35CE8, (void (*)(uint64_t))sub_255DD5E8C);
    type metadata accessor for MedicalIDDataContentView();
    sub_255DD7DA8(&qword_269F35CD8, (void (*)(uint64_t))type metadata accessor for MedicalIDDataContentView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35CE0);
  }
  return result;
}

uint64_t type metadata accessor for UINavStack()
{
  return __swift_instantiateGenericMetadata();
}

void sub_255DD60EC()
{
  if (!qword_269F35CF8)
  {
    sub_255DD5D58();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35CF8);
    }
  }
}

void sub_255DD614C()
{
  if (!qword_269F35D00)
  {
    sub_255DD6264();
    type metadata accessor for MedicalIDDataManager();
    sub_255DD7C9C(&qword_269F35D20, (void (*)(uint64_t))sub_255DD6264, (void (*)(void))sub_255DD63FC, (void (*)(void))sub_255DA78F4);
    sub_255DD7DA8(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35D00);
    }
  }
}

void sub_255DD6264()
{
  if (!qword_269F35D08)
  {
    sub_255DD62EC();
    sub_255DA76E4(255, &qword_269F35508, &qword_269F35510, (unint64_t *)&qword_269F35518);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35D08);
    }
  }
}

void sub_255DD62EC()
{
  if (!qword_269F35D10)
  {
    sub_255DD6374();
    sub_255DA76E4(255, &qword_269F354F0, &qword_269F354F8, &qword_269F35500);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35D10);
    }
  }
}

void sub_255DD6374()
{
  if (!qword_269F35D18)
  {
    sub_255DD60EC();
    sub_255DA76E4(255, &qword_269F354D8, &qword_269F354E0, (unint64_t *)&qword_269F354E8);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35D18);
    }
  }
}

uint64_t sub_255DD63FC()
{
  return sub_255DD7C9C(&qword_269F35D28, (void (*)(uint64_t))sub_255DD62EC, (void (*)(void))sub_255DD6444, (void (*)(void))sub_255DA787C);
}

uint64_t sub_255DD6444()
{
  return sub_255DD7C9C(&qword_269F35D30, (void (*)(uint64_t))sub_255DD6374, (void (*)(void))sub_255DD648C, (void (*)(void))sub_255DA7804);
}

unint64_t sub_255DD648C()
{
  unint64_t result = qword_269F35D38;
  if (!qword_269F35D38)
  {
    sub_255DD60EC();
    sub_255DD5E0C();
    sub_255DD7DA8(&qword_269F35CF0, (void (*)(uint64_t))sub_255DD5E0C);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35D38);
  }
  return result;
}

void sub_255DD6564()
{
  if (!qword_269F35D40)
  {
    sub_255DD614C();
    sub_255DD6264();
    type metadata accessor for MedicalIDDataManager();
    sub_255DD7C9C(&qword_269F35D20, (void (*)(uint64_t))sub_255DD6264, (void (*)(void))sub_255DD63FC, (void (*)(void))sub_255DA78F4);
    sub_255DD7DA8(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35D40);
    }
  }
}

uint64_t sub_255DD66B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDMainView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255DD671C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MedicalIDMainView() - 8);
  uint64_t v4 = (uint64_t *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  return sub_255DD4918(v4, a1);
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = (int *)type metadata accessor for MedicalIDMainView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  swift_release();
  uint64_t v3 = v2 + v1[5];
  sub_255DD77CC(0, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_255EEE280();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + v1[6];
  sub_255DD77CC(0, &qword_269F35320, MEMORY[0x270FA9820], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_255EEE200();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_255DD6984()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDMainView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_255DD4F54(v2);
}

uint64_t sub_255DD69E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDMainView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    sub_255DD77CC(0, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_255EEE280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)v7 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    sub_255DD77CC(0, &qword_269F35320, MEMORY[0x270FA9820], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_255EEE200();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)v7 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *uint64_t v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    id v20 = *(void **)((char *)a2 + v17);
    *(uint64_t *)((char *)v7 + v17) = (uint64_t)v20;
    swift_retain();
    id v21 = v20;
  }
  return v7;
}

void destroy for MedicalIDMainView(uint64_t a1, int *a2)
{
  swift_release();
  uint64_t v4 = a1 + a2[5];
  sub_255DD77CC(0, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE280();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[6];
  sub_255DD77CC(0, &qword_269F35320, MEMORY[0x270FA9820], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_255EEE200();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  uint64_t v8 = *(void **)(a1 + a2[8]);
}

void *initializeWithCopy for MedicalIDMainView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  sub_255DD77CC(0, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_255EEE280();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  sub_255DD77CC(0, &qword_269F35320, MEMORY[0x270FA9820], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_255EEE200();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  char *v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  uint64_t v18 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v18;
  swift_retain();
  id v19 = v18;
  return a1;
}

void *assignWithCopy for MedicalIDMainView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9908];
    sub_255DD71B8((uint64_t)a1 + v6, &qword_269F35318, MEMORY[0x270FA9908]);
    sub_255DD77CC(0, &qword_269F35318, v9, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_255EEE280();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    uint64_t v14 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9820];
    sub_255DD71B8((uint64_t)a1 + v11, &qword_269F35320, MEMORY[0x270FA9820]);
    sub_255DD77CC(0, &qword_269F35320, v14, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_255EEE200();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *uint64_t v17 = *v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[8];
  id v20 = *(void **)((char *)a2 + v19);
  id v21 = *(void **)((char *)a1 + v19);
  *(void *)((char *)a1 + v19) = v20;
  id v22 = v20;

  return a1;
}

uint64_t sub_255DD71B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_255DD77CC(0, a2, a3, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void *initializeWithTake for MedicalIDMainView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  sub_255DD77CC(0, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
  uint64_t v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  sub_255DD77CC(0, &qword_269F35320, MEMORY[0x270FA9820], MEMORY[0x263F185C8]);
  uint64_t v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v13, v14, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  return a1;
}

void *assignWithTake for MedicalIDMainView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9908];
    sub_255DD71B8((uint64_t)a1 + v6, &qword_269F35318, MEMORY[0x270FA9908]);
    sub_255DD77CC(0, &qword_269F35318, v9, MEMORY[0x263F185C8]);
    uint64_t v11 = v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_255EEE280();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9820];
    sub_255DD71B8((uint64_t)a1 + v13, &qword_269F35320, MEMORY[0x270FA9820]);
    sub_255DD77CC(0, &qword_269F35320, v16, MEMORY[0x263F185C8]);
    uint64_t v18 = v17;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_255EEE200();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v14, v15, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
  }
  uint64_t v20 = a3[7];
  id v21 = (char *)a1 + v20;
  id v22 = (char *)a2 + v20;
  *id v21 = *v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  swift_release();
  uint64_t v23 = a3[8];
  id v24 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDMainView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DD7658);
}

uint64_t sub_255DD7658(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255DD77CC(0, &qword_269F35330, MEMORY[0x270FA9908], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_255DD77CC(0, &qword_269F35338, MEMORY[0x270FA9820], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

void sub_255DD77CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDMainView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DD7844);
}

void *sub_255DD7844(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    sub_255DD77CC(0, &qword_269F35330, MEMORY[0x270FA9908], MEMORY[0x263F185D0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      sub_255DD77CC(0, &qword_269F35338, MEMORY[0x270FA9820], MEMORY[0x263F185D0]);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_255DD79B8()
{
  sub_255DD77CC(319, &qword_269F35318, MEMORY[0x270FA9908], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_255DD77CC(319, &qword_269F35320, MEMORY[0x270FA9820], MEMORY[0x263F185C8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_255DD7AF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DD7C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_255DD7C14()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DD7C58(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255D7ED10(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DD7C9C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DD7D28@<X0>(char *a1@<X8>)
{
  return sub_255DD5A40(*(void *)(v1 + 16), a1);
}

void sub_255DD7D38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255DD5E8C();
    uint64_t v7 = v6;
    sub_255DD5EF4();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_255DD7DA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DD7DF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255DD7E60()
{
  if (!qword_269F355F0)
  {
    unint64_t v0 = sub_255EEF850();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F355F0);
    }
  }
}

uint64_t sub_255DD7EB8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t sub_255DD7F48()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ContactRelationTextView()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ContactRelationTextView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContactRelationTextView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for ContactRelationTextView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactRelationTextView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactRelationTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactRelationTextView()
{
  return &type metadata for ContactRelationTextView;
}

uint64_t sub_255DD81C4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DD81E0(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  sub_255DD8400();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = self;
  uint64_t v10 = (void *)sub_255EEFD50();
  id v11 = objc_msgSend(v9, sel_localizedStringForLabel_, v10);

  uint64_t v12 = sub_255EEFD90();
  uint64_t v14 = v13;

  uint64_t v24 = v12;
  uint64_t v25 = v14;
  sub_255DAD520();
  uint64_t v15 = sub_255EEF3D0();
  uint64_t v17 = v16;
  uint64_t v24 = v15;
  uint64_t v25 = v16;
  char v19 = v18 & 1;
  char v26 = v18 & 1;
  uint64_t v27 = v20;
  sub_255D7F1F0();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_255EF1E20;
  *(void *)(v21 + 32) = a1;
  *(void *)(v21 + 40) = a2;
  *(void *)(v21 + 48) = 0x6E6F6974616C6552;
  *(void *)(v21 + 56) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  id v22 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v23 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v23)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v15, v17, v19);
    swift_bridgeObjectRelease();
    sub_255DD8460((uint64_t)v8, a3);
  }
  else
  {
    __break(1u);
  }
}

void sub_255DD83F4(uint64_t a1@<X8>)
{
  sub_255DD81E0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_255DD8400()
{
  if (!qword_269F35DF8)
  {
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35DF8);
    }
  }
}

uint64_t sub_255DD8460(uint64_t a1, uint64_t a2)
{
  sub_255DD8400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_255DD84C8()
{
  unint64_t result = qword_269F35E00;
  if (!qword_269F35E00)
  {
    sub_255DD8400();
    sub_255D855C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35E00);
  }
  return result;
}

void **sub_255DD8540(void **a1, void **a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = (char *)*a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (void **)&v6[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(int *)(v4 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_255EEE280();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v6;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(v7 + 24);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_255DD8680(id *a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  long long v3 = (char *)a1 + *(int *)(v2 + 20);
  uint64_t v4 = sub_255EEE280();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  int v5 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v6 = sub_255EEE200();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

void **sub_255DD8748(void **a1, void **a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_255EEE280();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = v4;
  v10(v7, v8, v9);
  uint64_t v12 = *(int *)(v5 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

void **sub_255DD883C(void **a1, void **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  id v6 = v4;

  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

void *sub_255DD8924(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v5 = *(int *)(v4 + 20);
  id v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = *(int *)(v4 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

void **sub_255DD8A00(void **a1, void **a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;

  uint64_t v5 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(v5 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_255DD8AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DD8AF8);
}

uint64_t sub_255DD8AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_255DD8B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DD8B78);
}

uint64_t sub_255DD8B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MedicalIDEditMedicationsModalView()
{
  uint64_t result = qword_269F35E08;
  if (!qword_269F35E08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DD8C34()
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255DD8CC0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DD8CDC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_255EEFD40();
  MEMORY[0x270FA5388](v3 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_269F352A8;
  uint64_t v5 = sub_255EEE200();
  MEMORY[0x270FA5388](v5 - 8);
  id v6 = v4;
  sub_255EEE1F0();
  uint64_t v7 = sub_255EEFDA0();
  uint64_t v39 = v8;
  uint64_t v40 = v7;
  if (qword_269F34B20 != -1) {
    uint64_t v7 = swift_once();
  }
  uint64_t v9 = *(void *)algn_269F3FDA8;
  uint64_t v38 = qword_269F3FDA0;
  MEMORY[0x270FA5388](v7);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_255EEFCD0();
  uint64_t v11 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v10);
  id v12 = v11;
  sub_255EEE1F0();
  uint64_t v13 = sub_255EEFDA0();
  uint64_t v36 = v14;
  uint64_t v37 = v13;
  id v15 = *a1;
  id v16 = objc_msgSend(*a1, sel_medicationInfo);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = sub_255EEFD90();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  id v21 = objc_msgSend(v15, sel_medicationsListVersion);
  if (v21)
  {

    MEMORY[0x270FA5388](v22);
    uint64_t v23 = sub_255EEFCD0();
    uint64_t v24 = (void *)qword_269F352A8;
    MEMORY[0x270FA5388](v23);
    id v25 = v24;
    sub_255EEE1F0();
    uint64_t v26 = sub_255EEFDA0();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v29 = 0x697461636964654DLL;
  sub_255D7F1F0();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_255EF1E20;
  *(void *)(v30 + 32) = 0x496C61636964654DLL;
  *(void *)(v30 + 40) = 0xE900000000000044;
  unint64_t v31 = 0xEB00000000736E6FLL;
  *(void *)(v30 + 48) = 0x697461636964654DLL;
  *(void *)(v30 + 56) = 0xEB00000000736E6FLL;
  uint64_t v32 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v33 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v33)
  {
    uint64_t v29 = sub_255EEFD90();
    unint64_t v31 = v34;
  }
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v38;
  a2[3] = v9;
  a2[4] = v37;
  a2[5] = v36;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v26;
  a2[9] = v28;
  a2[10] = v29;
  a2[11] = v31;
}

uint64_t sub_255DD9148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = a3;
  return result;
}

double sub_255DD9190@<D0>(uint64_t a1@<X8>)
{
  sub_255DD8CDC(v1, (uint64_t *)v4);
  return sub_255E45818(v4, (uint64_t)sub_255DD9148, 0, a1);
}

unint64_t sub_255DD91EC()
{
  unint64_t result = qword_269F35E18;
  if (!qword_269F35E18)
  {
    type metadata accessor for MedicalIDEditFreeformTextModalView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35E18);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MedicalIDErrorView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MedicalIDErrorView()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for MedicalIDErrorView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for MedicalIDErrorView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDErrorView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDErrorView()
{
  return &type metadata for MedicalIDErrorView;
}

uint64_t sub_255DD9394()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_255DD93B0(uint64_t a1, uint64_t a2)
{
  sub_255DD99F8(0, &qword_269F35E20, MEMORY[0x263F19B20]);
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)&v21 - v5;
  sub_255DD9874();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v13 = result;
    unsigned int v14 = objc_msgSend(result, sel_isAppleInternalInstall);

    if (v14)
    {
      LODWORD(v22) = sub_255EEEF30();
      uint64_t v22 = sub_255EEF370();
      uint64_t v23 = v15;
      char v24 = v16 & 1;
      uint64_t v25 = v17;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = a1;
      *(void *)(v18 + 24) = a2;
      swift_bridgeObjectRetain();
      uint64_t v19 = MEMORY[0x263F1A830];
      uint64_t v20 = MEMORY[0x263F1A820];
      sub_255EEF4B0();
      swift_release();
      sub_255D85120(v22, v23, v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v11, v8);
      swift_storeEnumTagMultiPayload();
      uint64_t v22 = v19;
      uint64_t v23 = v20;
      swift_getOpaqueTypeConformance2();
      sub_255EEEE00();
      return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      uint64_t v22 = MEMORY[0x263F1A830];
      uint64_t v23 = MEMORY[0x263F1A820];
      swift_getOpaqueTypeConformance2();
      return (id)sub_255EEEE00();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_255DD96F0()
{
  id v0 = objc_msgSend(self, sel_defaultWorkspace);
  if (v0)
  {
    unint64_t v1 = v0;
    uint64_t v2 = sub_255EEE030();
    uint64_t v3 = *(void *)(v2 - 8);
    MEMORY[0x270FA5388](v2);
    uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255D7EE1C();
    id v6 = (void *)sub_255EEE000();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_255E88BE0(MEMORY[0x263F8EE78]);
    uint64_t v7 = (void *)sub_255EEFC50();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_openSensitiveURL_withOptions_, v6, v7);
  }
}

id sub_255DD986C()
{
  return sub_255DD93B0(*v0, v0[1]);
}

void sub_255DD9874()
{
  if (!qword_269F35E28)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35E28);
    }
  }
}

uint64_t sub_255DD98F0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_255DD9928()
{
}

unint64_t sub_255DD9934()
{
  unint64_t result = qword_269F35E30;
  if (!qword_269F35E30)
  {
    sub_255DD99F8(255, &qword_269F35E38, MEMORY[0x263F19B28]);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35E30);
  }
  return result;
}

void sub_255DD99F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    sub_255DD9874();
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255DD9A64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v39 = a1;
  uint64_t v3 = type metadata accessor for EditOrganDonationCellView();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v37 + 64);
  MEMORY[0x270FA5388](v3);
  sub_255DDDA38();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v38 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269F34AA0 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)algn_269F35E48;
  uint64_t v36 = qword_269F35E40;
  uint64_t v8 = (uint64_t *)(v2 + *(int *)(v3 + 20));
  uint64_t v9 = v8[1];
  uint64_t v43 = *v8;
  uint64_t v44 = v9;
  sub_255DDE208(0, &qword_269F35ED8, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, MEMORY[0x263F1B5D0]);
  uint64_t v35 = v7;
  swift_bridgeObjectRetain();
  sub_255EEF820();
  uint64_t v34 = sub_255E018E0((uint64_t)&unk_2704A3298, v40);
  swift_release();
  uint64_t v10 = v8[1];
  uint64_t v40 = *v8;
  uint64_t v41 = v10;
  sub_255EEF840();
  uint64_t v11 = v43;
  uint64_t v12 = v44;
  uint64_t v13 = v45;
  swift_getKeyPath();
  uint64_t v43 = v11;
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  sub_255DDE208(0, &qword_269F35EE0, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v32 = v41;
  uint64_t v33 = v40;
  int v14 = v42;
  sub_255D7F1F0();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_255EF1E20;
  char v16 = (void *)(v2 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  uint64_t v17 = v16[1];
  *(void *)(v15 + 32) = *v16;
  *(void *)(v15 + 40) = v17;
  unint64_t v18 = 0xED00006E6F697461;
  strcpy((char *)(v15 + 48), "OrganDonation");
  *(_WORD *)(v15 + 62) = -4864;
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v20 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v20)
  {
    uint64_t v21 = sub_255EEFD90();
    unint64_t v18 = v22;
  }
  else
  {
    uint64_t v21 = 0x6E6F446E6167724FLL;
  }
  uint64_t v23 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  sub_255DDE26C(v2, (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v26 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v27 = swift_allocObject();
  sub_255DDE348((uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, (uint64_t (*)(void))type metadata accessor for EditOrganDonationCellView);
  sub_255D85808(v24);
  uint64_t v30 = v18;
  uint64_t v28 = v38;
  sub_255DDA120(v36, v35, v34, v33, v32, v14, 4, 0, v38, v21, v30, 0, v24, v25, (uint64_t)sub_255DDE2D4, v27);
  return sub_255DDE348(v28, v39, (uint64_t (*)(void))sub_255DDDA38);
}

uint64_t sub_255DD9E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v14[0] = a2;
  uint64_t v5 = type metadata accessor for EditOrganDonationCellView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  v14[7] = a1;
  uint64_t v8 = (uint64_t *)(v3 + *(int *)(MEMORY[0x270FA5388](v5 - 8) + 28));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  v14[1] = v10;
  void v14[2] = v9;
  sub_255DDE208(0, &qword_269F35ED8, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  swift_getKeyPath();
  sub_255DDE208(0, &qword_269F35EE0, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_255DDE26C(v3, (uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = swift_allocObject();
  sub_255DDE348((uint64_t)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for EditOrganDonationCellView);
  sub_255DDDBFC();
  sub_255DDE0C0(&qword_269F35EC8, (void (*)(uint64_t))sub_255DDDBFC);
  sub_255EEF5F0();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_255DDA120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v43 = a8;
  int v40 = a6;
  int v41 = a7;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v45 = a15;
  uint64_t v46 = a16;
  uint64_t v44 = a14;
  uint64_t v42 = a13;
  int v37 = a12;
  uint64_t v34 = a11;
  *(_WORD *)(a9 + 57) = 1028;
  *(void *)(a9 + 64) = swift_getKeyPath();
  *(void *)(a9 + 72) = 0;
  *(unsigned char *)(a9 + 80) = 0;
  sub_255DDDA38();
  uint64_t v19 = v18;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 96) = 0;
  uint64_t v20 = sub_255EEE140();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x270FA5388](v20);
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = sub_255EEE130();
  MEMORY[0x270FA5388](v24);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v34 - v23, (char *)&v34 - v23, v20);
  sub_255EEF810();
  (*(void (**)(char *, uint64_t))(v21 + 8))((char *)&v34 - v23, v20);
  uint64_t v25 = a9 + v19[21];
  char v47 = 0;
  sub_255EEF810();
  uint64_t v26 = v49;
  *(unsigned char *)uint64_t v25 = v48;
  *(void *)(v25 + 8) = v26;
  uint64_t v27 = v35;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = v27;
  uint64_t v28 = v38;
  *(void *)(a9 + 32) = v36;
  *(void *)(a9 + 40) = v28;
  *(void *)(a9 + 48) = v39;
  *(unsigned char *)(a9 + 56) = v40;
  *(unsigned char *)(a9 + 57) = v41;
  *(unsigned char *)(a9 + 58) = v43;
  uint64_t v29 = v34;
  *(void *)(a9 + 16) = a10;
  *(void *)(a9 + 24) = v29;
  *(unsigned char *)(a9 + v19[23]) = v37;
  uint64_t result = sub_255D879C4(*(void *)(a9 + 88));
  uint64_t v31 = v44;
  *(void *)(a9 + 88) = v42;
  *(void *)(a9 + 96) = v31;
  uint64_t v32 = (void *)(a9 + v19[22]);
  uint64_t v33 = v46;
  void *v32 = v45;
  v32[1] = v33;
  return result;
}

uint64_t sub_255DDA364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v48 = a8;
  uint64_t v46 = a6;
  uint64_t v47 = a7;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v51 = a17;
  uint64_t v52 = a18;
  uint64_t v49 = a15;
  uint64_t v50 = a16;
  int v45 = a14;
  uint64_t v41 = a3;
  uint64_t v42 = a13;
  uint64_t v39 = a2;
  uint64_t v40 = a12;
  int v38 = a11;
  *(void *)(a9 + 64) = 0;
  *(unsigned char *)(a9 + 72) = 1;
  *(void *)(a9 + 80) = 0;
  *(unsigned char *)(a9 + 88) = 1;
  *(void *)(a9 + 96) = swift_getKeyPath();
  *(void *)(a9 + 104) = 0;
  *(unsigned char *)(a9 + 112) = 0;
  sub_255DDE868();
  uint64_t v21 = v20;
  *(void *)(a9 + 120) = 0;
  *(void *)(a9 + 128) = 0;
  uint64_t v22 = sub_255EEE140();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  MEMORY[0x270FA5388](v22);
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = sub_255EEE130();
  MEMORY[0x270FA5388](v26);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v23 + 16))(&v37[-v25], &v37[-v25], v22);
  sub_255EEF810();
  (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(&v37[-v25], v22);
  uint64_t v27 = a9 + v21[21];
  char v53 = 0;
  sub_255EEF810();
  uint64_t v28 = v55;
  *(unsigned char *)uint64_t v27 = v54;
  *(void *)(v27 + 8) = v28;
  uint64_t v29 = v39;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = v29;
  uint64_t v30 = v43;
  *(void *)(a9 + 32) = v41;
  *(void *)(a9 + 40) = v30;
  uint64_t v31 = v46;
  *(void *)(a9 + 48) = v44;
  *(void *)(a9 + 56) = v31;
  *(void *)(a9 + 64) = v47;
  *(unsigned char *)(a9 + 72) = v48 & 1;
  *(void *)(a9 + 80) = a10;
  *(unsigned char *)(a9 + 88) = v38 & 1;
  uint64_t v32 = v42;
  *(void *)(a9 + 16) = v40;
  *(void *)(a9 + 24) = v32;
  *(unsigned char *)(a9 + v21[23]) = v45;
  uint64_t result = sub_255D879C4(*(void *)(a9 + 120));
  uint64_t v34 = v50;
  *(void *)(a9 + 120) = v49;
  *(void *)(a9 + 128) = v34;
  uint64_t v35 = (void *)(a9 + v21[22]);
  uint64_t v36 = v52;
  void *v35 = v51;
  v35[1] = v36;
  return result;
}

uint64_t sub_255DDA5D4()
{
  return sub_255EEE880();
}

uint64_t sub_255DDA71C(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + *(int *)(type metadata accessor for EditOrganDonationCellView() + 28) + 8);
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_255DAA2A0(v2, v1);
  swift_release();
  swift_beginAccess();
  id v4 = *(id *)(v3 + 16);
  swift_release();
  sub_255DDE208(0, &qword_269F35ED8, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  sub_255EEE8B0();
  sub_255EEF1A0();
  sub_255DDDFEC(0, &qword_269F35E90, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x263F1A458], MEMORY[0x263F18E28]);
  sub_255DDDE9C();
  sub_255DDE108();
  sub_255DDDF50();
  sub_255DDE0C0(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
  swift_getOpaqueTypeConformance2();
  sub_255EEF640();

  return swift_release();
}

uint64_t sub_255DDA930(uint64_t a1)
{
  uint64_t v2 = sub_255EEEE90();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255DDDF50();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255EEEE60();
  uint64_t v11 = a1;
  sub_255DDDFEC(0, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
  sub_255DDE03C();
  sub_255EEE680();
  uint64_t v8 = sub_255DDE0C0(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
  MEMORY[0x25A29A8F0](v7, v4, v8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_255DDAAFC()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  char v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  sub_255EEFDA0();
  type metadata accessor for EditOrganDonationCellView();
  sub_255DDE208(0, &qword_269F35ED8, (uint64_t (*)(uint64_t))type metadata accessor for EditOrganDonationCellViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  sub_255DAD520();
  return sub_255EEF890();
}

uint64_t sub_255DDACF0()
{
  return swift_release();
}

uint64_t sub_255DDADC0()
{
  char v2 = *v0;
  return _s11MedicalIDUI0A23IDPersonalInfoViewModelV33localizedOrganDonationPickerValue3forSSAA0hI6StatusO_tFZ_0(&v2);
}

unint64_t sub_255DDADEC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_255DDAE1C();
  unint64_t result = sub_255DDAE70();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_255DDAE1C()
{
  unint64_t result = qword_269F35E50;
  if (!qword_269F35E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35E50);
  }
  return result;
}

unint64_t sub_255DDAE70()
{
  unint64_t result = qword_269F35E58;
  if (!qword_269F35E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35E58);
  }
  return result;
}

uint64_t sub_255DDAEC4()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  char v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  qword_269F35E40 = result;
  *(void *)algn_269F35E48 = v5;
  return result;
}

void *sub_255DDB01C(void *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    uint64_t v83 = (void *)*((void *)a2 + 12);
    uint64_t v88 = (void *)*((void *)a2 + 13);
    a1[12] = v83;
    a1[13] = v88;
    uint64_t v87 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v87[13];
    __dst = (char *)v4 + v12;
    uint64_t v82 = &a2[v12];
    uint64_t v13 = sub_255EEE100();
    uint64_t v86 = *(void *)(v13 - 8);
    int v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v83;
    id v16 = v88;
    uint64_t v89 = v14;
    if (v14(v82, 1, v13))
    {
      sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v82, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(__dst, v82, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v19 = v87[14];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = &a2[v19];
    if (v14(&a2[v19], 1, v13))
    {
      sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v20, v21, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v20, 0, 1, v13);
    }
    uint64_t v23 = v87[15];
    uint64_t v24 = (void *)((char *)v4 + v23);
    unint64_t v25 = &a2[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *uint64_t v24 = *(void *)v25;
    v24[1] = v26;
    uint64_t v27 = v87[16];
    uint64_t v28 = (void *)((char *)v4 + v27);
    uint64_t v29 = &a2[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *uint64_t v28 = *(void *)v29;
    v28[1] = v30;
    *((unsigned char *)v4 + v87[17]) = a2[v87[17]];
    *((unsigned char *)v4 + v87[18]) = a2[v87[18]];
    uint64_t v31 = v87[19];
    uint64_t v32 = (char *)v4 + v31;
    uint64_t v33 = (uint64_t *)&a2[v31];
    unint64_t v34 = *(void *)&a2[v31 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    }
    else
    {
      uint64_t v35 = *v33;
      sub_255D80890(*v33, v34);
      *(void *)uint64_t v32 = v35;
      *((void *)v32 + 1) = v34;
    }
    uint64_t v36 = v87[20];
    int v37 = (char *)v4 + v36;
    int v38 = &a2[v36];
    uint64_t v39 = sub_255EEDF60();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      sub_255DDE208(0, &qword_269F350B8, MEMORY[0x270FA81F8], MEMORY[0x263F8D8F0]);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    uint64_t v42 = v87[21];
    uint64_t v43 = *(void **)&a2[v42];
    *(void *)((char *)v4 + v42) = v43;
    uint64_t v44 = v87[22];
    int v45 = (char *)v4 + v44;
    uint64_t v46 = &a2[v44];
    id v47 = v43;
    if (v89(v46, 1, v13))
    {
      sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v45, v46, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v45, 0, 1, v13);
    }
    uint64_t v49 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    uint64_t v50 = v49[5];
    uint64_t v51 = (char *)v4 + v50;
    uint64_t v52 = &a2[v50];
    uint64_t v53 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
    uint64_t v54 = v49[6];
    uint64_t v55 = (char *)v4 + v54;
    uint64_t v56 = &a2[v54];
    uint64_t v57 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
    uint64_t v58 = v49[7];
    uint64_t v59 = *(void **)&a2[v58];
    *(void *)((char *)v4 + v58) = v59;
    uint64_t v60 = v49[8];
    uint64_t v61 = *(void **)&a2[v60];
    *(void *)((char *)v4 + v60) = v61;
    uint64_t v62 = v49[9];
    uint64_t v63 = (void *)((char *)v4 + v62);
    uint64_t v64 = &a2[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *uint64_t v63 = *(void *)v64;
    v63[1] = v65;
    uint64_t v66 = a3[5];
    uint64_t v67 = a3[6];
    uint64_t v68 = (void *)((char *)v4 + v66);
    uint64_t v69 = &a2[v66];
    uint64_t v70 = *((void *)v69 + 1);
    *uint64_t v68 = *(void *)v69;
    v68[1] = v70;
    uint64_t v71 = (void *)((char *)v4 + v67);
    uint64_t v72 = &a2[v67];
    uint64_t v73 = *(void *)&a2[v67];
    id v74 = v59;
    id v75 = v61;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v73)
    {
      uint64_t v76 = *((void *)v72 + 1);
      *uint64_t v71 = v73;
      v71[1] = v76;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    }
    uint64_t v77 = a3[7];
    uint64_t v78 = (char *)v4 + v77;
    id v79 = &a2[v77];
    uint64_t v80 = *(void *)v79;
    LOBYTE(v79) = v79[8];
    *(void *)uint64_t v78 = v80;
    v78[8] = (char)v79;
  }
  swift_retain();
  return v4;
}

uint64_t sub_255DDB6E0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  id v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v17 = a1 + v16[5];
  uint64_t v18 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = a1 + v16[6];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(a1 + *(int *)(a2 + 24))) {
    swift_release();
  }
  return swift_release();
}

void *sub_255DDBA44(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  uint64_t v81 = (void *)*((void *)a2 + 12);
  uint64_t v86 = (void *)*((void *)a2 + 13);
  a1[12] = v81;
  a1[13] = v86;
  uint64_t v85 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v85[13];
  __dst = (char *)a1 + v11;
  uint64_t v80 = &a2[v11];
  uint64_t v12 = sub_255EEE100();
  uint64_t v84 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v81;
  id v15 = v86;
  uint64_t v87 = v13;
  if (v13(v80, 1, v12))
  {
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v80, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dst, v80, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v17 = v85[14];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = &a2[v17];
  if (v13(&a2[v17], 1, v12))
  {
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v18, v19, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v18, 0, 1, v12);
  }
  uint64_t v21 = v85[15];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *((void *)v23 + 1);
  void *v22 = *(void *)v23;
  v22[1] = v24;
  uint64_t v25 = v85[16];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = &a2[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *uint64_t v26 = *(void *)v27;
  v26[1] = v28;
  *((unsigned char *)a1 + v85[17]) = a2[v85[17]];
  *((unsigned char *)a1 + v85[18]) = a2[v85[18]];
  uint64_t v29 = v85[19];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (uint64_t *)&a2[v29];
  unint64_t v32 = *(void *)&a2[v29 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *v31;
    sub_255D80890(*v31, v32);
    *(void *)uint64_t v30 = v33;
    *((void *)v30 + 1) = v32;
  }
  uint64_t v34 = v85[20];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_255EEDF60();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    sub_255DDE208(0, &qword_269F350B8, MEMORY[0x270FA81F8], MEMORY[0x263F8D8F0]);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  uint64_t v40 = v85[21];
  uint64_t v41 = *(void **)&a2[v40];
  *(void *)((char *)a1 + v40) = v41;
  uint64_t v42 = v85[22];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = &a2[v42];
  id v45 = v41;
  if (v87(v44, 1, v12))
  {
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v43, v44, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v43, 0, 1, v12);
  }
  id v47 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v48 = v47[5];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = &a2[v48];
  uint64_t v51 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
  uint64_t v52 = v47[6];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = &a2[v52];
  uint64_t v55 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
  uint64_t v56 = v47[7];
  uint64_t v57 = *(void **)&a2[v56];
  *(void *)((char *)a1 + v56) = v57;
  uint64_t v58 = v47[8];
  uint64_t v59 = *(void **)&a2[v58];
  *(void *)((char *)a1 + v58) = v59;
  uint64_t v60 = v47[9];
  uint64_t v61 = (void *)((char *)a1 + v60);
  uint64_t v62 = &a2[v60];
  uint64_t v63 = *((void *)v62 + 1);
  void *v61 = *(void *)v62;
  v61[1] = v63;
  uint64_t v64 = a3[5];
  uint64_t v65 = a3[6];
  uint64_t v66 = (void *)((char *)a1 + v64);
  uint64_t v67 = &a2[v64];
  uint64_t v68 = *((void *)v67 + 1);
  void *v66 = *(void *)v67;
  v66[1] = v68;
  uint64_t v69 = (void *)((char *)a1 + v65);
  uint64_t v70 = &a2[v65];
  uint64_t v71 = *(void *)&a2[v65];
  id v72 = v57;
  id v73 = v59;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v71)
  {
    uint64_t v74 = *((void *)v70 + 1);
    void *v69 = v71;
    v69[1] = v74;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
  }
  uint64_t v75 = a3[7];
  uint64_t v76 = (char *)a1 + v75;
  uint64_t v77 = &a2[v75];
  uint64_t v78 = *(void *)v77;
  LOBYTE(v77) = v77[8];
  *(void *)uint64_t v76 = v78;
  v76[8] = (char)v77;
  swift_retain();
  return a1;
}

char *sub_255DDC0BC(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)a2[12];
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)a2[13];
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  id v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v97 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  unint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((unsigned char *)a2 + v11[17]);
  a1[v11[18]] = *((unsigned char *)a2 + v11[18]);
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v96 = v17;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = v96;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = v96;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255DDE208(0, &qword_269F350B8, MEMORY[0x270FA81F8], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)((char *)a2 + v51);
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = (char *)a2 + v55;
  int v58 = v49(&a1[v55], 1, v97);
  int v59 = v49(v57, 1, v97);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v97);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v97);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v97);
LABEL_31:
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v97);
LABEL_32:
  uint64_t v61 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v62 = v61[5];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = (char *)a2 + v62;
  uint64_t v65 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24))(v63, v64, v65);
  uint64_t v66 = v61[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = (char *)a2 + v66;
  uint64_t v69 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v61[7];
  uint64_t v71 = *(void **)&a1[v70];
  id v72 = *(void **)((char *)a2 + v70);
  *(void *)&a1[v70] = v72;
  id v73 = v72;

  uint64_t v74 = v61[8];
  uint64_t v75 = *(void **)((char *)a2 + v74);
  uint64_t v76 = *(void **)&a1[v74];
  *(void *)&a1[v74] = v75;
  id v77 = v75;

  uint64_t v78 = v61[9];
  id v79 = &a1[v78];
  uint64_t v80 = (void *)((char *)a2 + v78);
  *(void *)id v79 = *v80;
  *((void *)v79 + 1) = v80[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = a3[5];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = (char *)a2 + v81;
  *(void *)&a1[v81] = *(void *)((char *)a2 + v81);
  swift_retain();
  swift_release();
  *((void *)v82 + 1) = *((void *)v83 + 1);
  swift_retain();
  swift_release();
  uint64_t v84 = a3[6];
  uint64_t v85 = &a1[v84];
  uint64_t v86 = (char *)a2 + v84;
  uint64_t v87 = *(void *)&a1[v84];
  uint64_t v88 = *(void *)((char *)a2 + v84);
  if (!v87)
  {
    if (v88)
    {
      uint64_t v90 = *((void *)v86 + 1);
      *(void *)uint64_t v85 = v88;
      *((void *)v85 + 1) = v90;
      swift_retain();
      goto LABEL_39;
    }
LABEL_38:
    *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    goto LABEL_39;
  }
  if (!v88)
  {
    swift_release();
    goto LABEL_38;
  }
  uint64_t v89 = *((void *)v86 + 1);
  *(void *)uint64_t v85 = v88;
  *((void *)v85 + 1) = v89;
  swift_retain();
  swift_release();
LABEL_39:
  uint64_t v91 = a3[7];
  uint64_t v92 = &a1[v91];
  uint64_t v93 = (char *)a2 + v91;
  uint64_t v94 = *(void *)v93;
  LOBYTE(v93) = v93[8];
  *(void *)uint64_t v92 = v94;
  v92[8] = (char)v93;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255DDC9E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v5[13];
  id v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[14];
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v45 = v11;
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(unsigned char *)(a1 + v5[17]) = *(unsigned char *)(a2 + v5[17]);
  *(unsigned char *)(a1 + v5[18]) = *(unsigned char *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  uint64_t v17 = v5[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255DDE208(0, &qword_269F350B8, MEMORY[0x270FA81F8], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v5[21]) = *(void *)(a2 + v5[21]);
  uint64_t v23 = v5[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v45((const void *)(a2 + v23), 1, v9))
  {
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v28 = v27[5];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  uint64_t v32 = v27[6];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  *(void *)(a1 + v27[7]) = *(void *)(a2 + v27[7]);
  *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  uint64_t v36 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v39 = *v38;
  if (*v38)
  {
    uint64_t v40 = v38[1];
    void *v37 = v39;
    v37[1] = v40;
  }
  else
  {
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  }
  uint64_t v41 = a3[7];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  *(void *)uint64_t v42 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  return a1;
}

char *sub_255DDCF48(char *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v97 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
  a1[v13[18]] = *((unsigned char *)a2 + v13[18]);
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = (char *)a2 + v39;
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v99 = v13;
  if (v42 >> 60 == 15)
  {
    uint64_t v43 = v19;
LABEL_17:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_19;
  }
  unint64_t v44 = *((void *)v41 + 1);
  uint64_t v43 = v19;
  if (v44 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_17;
  }
  uint64_t v45 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v44;
  sub_255D80D04(v45, v42);
LABEL_19:
  uint64_t v46 = v99[20];
  int v47 = &a1[v46];
  int v48 = (char *)a2 + v46;
  uint64_t v49 = sub_255EEDF60();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (v52)
  {
    id v54 = v43;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v54 = v43;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_24:
    sub_255DDE208(0, &qword_269F350B8, MEMORY[0x270FA81F8], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_25:
  uint64_t v56 = v99[21];
  uint64_t v57 = *(void **)&a1[v56];
  *(void *)&a1[v56] = *(void *)((char *)a2 + v56);

  uint64_t v58 = v99[22];
  int v59 = &a1[v58];
  uint64_t v60 = (char *)a2 + v58;
  int v61 = v54(&a1[v58], 1, v97);
  int v62 = v54(v60, 1, v97);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v59, v60, v97);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v97);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v97);
LABEL_30:
    sub_255DDE208(0, &qword_269F35058, MEMORY[0x270FA9360], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v59, v60, v97);
LABEL_31:
  uint64_t v64 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v65 = v64[5];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = (char *)a2 + v65;
  uint64_t v68 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 40))(v66, v67, v68);
  uint64_t v69 = v64[6];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = (char *)a2 + v69;
  uint64_t v72 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 40))(v70, v71, v72);
  uint64_t v73 = v64[7];
  uint64_t v74 = *(void **)&a1[v73];
  *(void *)&a1[v73] = *(void *)((char *)a2 + v73);

  uint64_t v75 = v64[8];
  uint64_t v76 = *(void **)&a1[v75];
  *(void *)&a1[v75] = *(void *)((char *)a2 + v75);

  uint64_t v77 = v64[9];
  uint64_t v78 = &a1[v77];
  id v79 = (void *)((char *)a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *(void *)uint64_t v78 = v81;
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[5];
  uint64_t v83 = &a1[v82];
  uint64_t v84 = (char *)a2 + v82;
  *(void *)&a1[v82] = *(void *)((char *)a2 + v82);
  swift_release();
  *((void *)v83 + 1) = *((void *)v84 + 1);
  swift_release();
  uint64_t v85 = a3[6];
  uint64_t v86 = &a1[v85];
  uint64_t v87 = (char *)a2 + v85;
  uint64_t v88 = *(void *)&a1[v85];
  uint64_t v89 = *(void *)((char *)a2 + v85);
  if (!v88)
  {
    if (v89)
    {
      uint64_t v91 = *((void *)v87 + 1);
      *(void *)uint64_t v86 = v89;
      *((void *)v86 + 1) = v91;
      goto LABEL_38;
    }
LABEL_37:
    *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
    goto LABEL_38;
  }
  if (!v89)
  {
    swift_release();
    goto LABEL_37;
  }
  uint64_t v90 = *((void *)v87 + 1);
  *(void *)uint64_t v86 = v89;
  *((void *)v86 + 1) = v90;
  swift_release();
LABEL_38:
  uint64_t v92 = a3[7];
  uint64_t v93 = &a1[v92];
  uint64_t v94 = (char *)a2 + v92;
  uint64_t v95 = *(void *)v94;
  LOBYTE(v94) = v94[8];
  *(void *)uint64_t v93 = v95;
  v93[8] = (char)v94;
  swift_release();
  return a1;
}

uint64_t sub_255DDD784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DDD798);
}

uint64_t sub_255DDD798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255DDD858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DDD86C);
}

uint64_t sub_255DDD86C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for EditOrganDonationCellView()
{
  uint64_t result = qword_269F35E60;
  if (!qword_269F35E60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DDD974()
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255DDDA1C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DDDA38()
{
  if (!qword_269F35E70)
  {
    sub_255DDDB34();
    sub_255DDE1AC();
    sub_255DDDBFC();
    sub_255DDE0C0(&qword_269F35EC8, (void (*)(uint64_t))sub_255DDDBFC);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ExpandableWheelPickerView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35E70);
    }
  }
}

void sub_255DDDB34()
{
  if (!qword_269F35E78)
  {
    sub_255DDDBFC();
    sub_255DDE0C0(&qword_269F35EC8, (void (*)(uint64_t))sub_255DDDBFC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35E78);
    }
  }
}

void sub_255DDDBFC()
{
  if (!qword_269F35E80)
  {
    sub_255EEE810();
    sub_255DDDD64();
    sub_255DDDFEC(255, &qword_269F35E90, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x263F1A458], MEMORY[0x263F18E28]);
    sub_255DDDE9C();
    sub_255DDE108();
    sub_255DDDF50();
    sub_255DDE0C0(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_255EEE890();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35E80);
    }
  }
}

void sub_255DDDD64()
{
  if (!qword_269F35E88)
  {
    sub_255DDDFEC(255, &qword_269F35E90, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x263F1A458], MEMORY[0x263F18E28]);
    sub_255DDDE9C();
    sub_255DDE108();
    sub_255DDDF50();
    sub_255DDE0C0(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35E88);
    }
  }
}

void sub_255DDDE9C()
{
  if (!qword_269F35E98)
  {
    sub_255DDDF50();
    sub_255DDE0C0(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F35E98);
    }
  }
}

void sub_255DDDF50()
{
  if (!qword_269F35EA0)
  {
    sub_255DDDFEC(255, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
    sub_255DDE03C();
    unint64_t v0 = sub_255EEE690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35EA0);
    }
  }
}

void sub_255DDDFEC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_255DDE03C()
{
  unint64_t result = qword_269F35EB0;
  if (!qword_269F35EB0)
  {
    sub_255DDDFEC(255, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35EB0);
  }
  return result;
}

uint64_t sub_255DDE0C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255DDE108()
{
  unint64_t result = qword_269F35EC0;
  if (!qword_269F35EC0)
  {
    sub_255DDDFEC(255, &qword_269F35E90, (uint64_t)&type metadata for OrganDonationRegistrationView, MEMORY[0x263F1A458], MEMORY[0x263F18E28]);
    sub_255DCA1B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35EC0);
  }
  return result;
}

unint64_t sub_255DDE1AC()
{
  unint64_t result = qword_269F35ED0;
  if (!qword_269F35ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35ED0);
  }
  return result;
}

void sub_255DDE208(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255DDE26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EditOrganDonationCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255DDE2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255DD9E80(a1, a2);
}

uint64_t sub_255DDE348(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroyTm_3()
{
  uint64_t v1 = type metadata accessor for EditOrganDonationCellView();
  uint64_t v21 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = v0 + ((v21 + 16) & ~v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v3 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v4 = v2 + v3[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[14];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v2 + v3[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = v2 + v3[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v2 + v3[22];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v16 = v2 + v15[5];
  uint64_t v17 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v2 + v15[6];
  uint64_t v19 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(v2 + *(int *)(v1 + 24))) {
    swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255DDE7B4()
{
  type metadata accessor for EditOrganDonationCellView();
  return sub_255DDA5D4();
}

uint64_t sub_255DDE824()
{
  return sub_255DDA71C(*(void *)(v0 + 16));
}

uint64_t sub_255DDE830()
{
  return sub_255DDA930(*(void *)(v0 + 16));
}

uint64_t sub_255DDE838()
{
  return sub_255DDAAFC();
}

uint64_t sub_255DDE840()
{
  return sub_255DDACF0();
}

uint64_t sub_255DDE848()
{
  return sub_255DFFA1C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_255DDE868()
{
  if (!qword_269F35EF0)
  {
    type metadata accessor for HKBloodType(255);
    sub_255DDE0C0(&qword_269F35EF8, type metadata accessor for HKBloodType);
    unint64_t v0 = type metadata accessor for ExpandableWheelPickerView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35EF0);
    }
  }
}

uint64_t sub_255DDE918()
{
  return sub_255DDE0C0(&qword_269F35F00, (void (*)(uint64_t))sub_255DDDA38);
}

void *sub_255DDE960(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    uint64_t v80 = (void *)*((void *)a2 + 12);
    uint64_t v81 = (void *)*((void *)a2 + 13);
    a1[12] = v80;
    a1[13] = v81;
    uint64_t v85 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v85[13];
    __dst = (char *)v4 + v12;
    uint64_t v13 = &a2[v12];
    uint64_t v14 = sub_255EEE100();
    uint64_t v84 = *(void *)(v14 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v80;
    id v17 = v81;
    if (v15(v13, 1, v14))
    {
      sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = v85[14];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = &a2[v20];
    if (v15(&a2[v20], 1, v14))
    {
      sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v21, v22, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v21, 0, 1, v14);
    }
    uint64_t v24 = v85[15];
    int v25 = (void *)((char *)v4 + v24);
    int v26 = &a2[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *int v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v85[16];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *uint64_t v29 = *(void *)v30;
    v29[1] = v31;
    *((unsigned char *)v4 + v85[17]) = a2[v85[17]];
    *((unsigned char *)v4 + v85[18]) = a2[v85[18]];
    uint64_t v32 = v85[19];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (uint64_t *)&a2[v32];
    unint64_t v35 = *(void *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_255D80890(*v34, v35);
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = v85[20];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = &a2[v37];
    uint64_t v40 = sub_255EEDF60();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v85[21];
    unint64_t v44 = *(void **)&a2[v43];
    *(void *)((char *)v4 + v43) = v44;
    uint64_t v45 = v85[22];
    uint64_t v46 = (char *)v4 + v45;
    int v47 = &a2[v45];
    id v48 = v44;
    if (v15(v47, 1, v14))
    {
      sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v46, v47, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v46, 0, 1, v14);
    }
    uint64_t v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    uint64_t v51 = v50[5];
    int v52 = (char *)v4 + v51;
    int v53 = &a2[v51];
    uint64_t v54 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
    uint64_t v55 = v50[6];
    uint64_t v56 = (char *)v4 + v55;
    uint64_t v57 = &a2[v55];
    uint64_t v58 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
    uint64_t v59 = v50[7];
    uint64_t v60 = *(void **)&a2[v59];
    *(void *)((char *)v4 + v59) = v60;
    uint64_t v61 = v50[8];
    int v62 = *(void **)&a2[v61];
    *(void *)((char *)v4 + v61) = v62;
    uint64_t v63 = v50[9];
    uint64_t v64 = (void *)((char *)v4 + v63);
    uint64_t v65 = &a2[v63];
    uint64_t v66 = *((void *)v65 + 1);
    *uint64_t v64 = *(void *)v65;
    v64[1] = v66;
    uint64_t v67 = *(int *)(a3 + 20);
    uint64_t v68 = *(int *)(a3 + 24);
    uint64_t v69 = (void *)((char *)v4 + v67);
    uint64_t v70 = &a2[v67];
    uint64_t v71 = *((void *)v70 + 1);
    void *v69 = *(void *)v70;
    v69[1] = v71;
    uint64_t v72 = (void *)((char *)v4 + v68);
    uint64_t v73 = &a2[v68];
    uint64_t v75 = *(void **)v73;
    uint64_t v74 = *((void *)v73 + 1);
    *uint64_t v72 = v75;
    v72[1] = v74;
    id v76 = v60;
    id v77 = v62;
    swift_bridgeObjectRetain();
    swift_retain();
    id v78 = v75;
  }
  return v4;
}

void sub_255DDEFE0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  id v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v17 = a1 + v16[5];
  uint64_t v18 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = a1 + v16[6];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v21 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *sub_255DDF324(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  id v78 = (void *)*((void *)a2 + 12);
  id v79 = (void *)*((void *)a2 + 13);
  a1[12] = v78;
  a1[13] = v79;
  uint64_t v83 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v83[13];
  __dst = (char *)a1 + v11;
  uint64_t v12 = &a2[v11];
  uint64_t v13 = sub_255EEE100();
  uint64_t v82 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v78;
  id v16 = v79;
  if (v14(v12, 1, v13))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = v83[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v14(&a2[v18], 1, v13))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v83[15];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *uint64_t v23 = *(void *)v24;
  v23[1] = v25;
  uint64_t v26 = v83[16];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *uint64_t v27 = *(void *)v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v83[17]) = a2[v83[17]];
  *((unsigned char *)a1 + v83[18]) = a2[v83[18]];
  uint64_t v30 = v83[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (uint64_t *)&a2[v30];
  unint64_t v33 = *(void *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    sub_255D80890(*v32, v33);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v35 = v83[20];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_255EEDF60();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v41 = v83[21];
  uint64_t v42 = *(void **)&a2[v41];
  *(void *)((char *)a1 + v41) = v42;
  uint64_t v43 = v83[22];
  unint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = &a2[v43];
  id v46 = v42;
  if (v14(v45, 1, v13))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v44, v45, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v44, 0, 1, v13);
  }
  id v48 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v49 = v48[5];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = &a2[v49];
  uint64_t v52 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  uint64_t v53 = v48[6];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = &a2[v53];
  uint64_t v56 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
  uint64_t v57 = v48[7];
  uint64_t v58 = *(void **)&a2[v57];
  *(void *)((char *)a1 + v57) = v58;
  uint64_t v59 = v48[8];
  uint64_t v60 = *(void **)&a2[v59];
  *(void *)((char *)a1 + v59) = v60;
  uint64_t v61 = v48[9];
  int v62 = (void *)((char *)a1 + v61);
  uint64_t v63 = &a2[v61];
  uint64_t v64 = *((void *)v63 + 1);
  void *v62 = *(void *)v63;
  v62[1] = v64;
  uint64_t v65 = *(int *)(a3 + 20);
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = (void *)((char *)a1 + v65);
  uint64_t v68 = &a2[v65];
  uint64_t v69 = *((void *)v68 + 1);
  *uint64_t v67 = *(void *)v68;
  v67[1] = v69;
  uint64_t v70 = (void *)((char *)a1 + v66);
  uint64_t v71 = &a2[v66];
  uint64_t v73 = *(void **)v71;
  uint64_t v72 = *((void *)v71 + 1);
  void *v70 = v73;
  v70[1] = v72;
  id v74 = v58;
  id v75 = v60;
  swift_bridgeObjectRetain();
  swift_retain();
  id v76 = v73;
  return a1;
}

char *sub_255DDF954(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)a2[12];
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)a2[13];
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v93 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((unsigned char *)a2 + v11[17]);
  a1[v11[18]] = *((unsigned char *)a2 + v11[18]);
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v92 = v17;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  id v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = v92;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = v92;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)((char *)a2 + v51);
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = (char *)a2 + v55;
  int v58 = v49(&a1[v55], 1, v93);
  int v59 = v49(v57, 1, v93);
  if (!v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v93);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v93);
    goto LABEL_31;
  }
  if (v59)
  {
LABEL_31:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v93);
LABEL_32:
  uint64_t v61 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v62 = v61[5];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = (char *)a2 + v62;
  uint64_t v65 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24))(v63, v64, v65);
  uint64_t v66 = v61[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = (char *)a2 + v66;
  uint64_t v69 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v61[7];
  uint64_t v71 = *(void **)&a1[v70];
  uint64_t v72 = *(void **)((char *)a2 + v70);
  *(void *)&a1[v70] = v72;
  id v73 = v72;

  uint64_t v74 = v61[8];
  id v75 = *(void **)((char *)a2 + v74);
  id v76 = *(void **)&a1[v74];
  *(void *)&a1[v74] = v75;
  id v77 = v75;

  uint64_t v78 = v61[9];
  id v79 = &a1[v78];
  uint64_t v80 = (void *)((char *)a2 + v78);
  *(void *)id v79 = *v80;
  *((void *)v79 + 1) = v80[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = *(int *)(a3 + 20);
  uint64_t v82 = &a1[v81];
  uint64_t v83 = (void *)((char *)a2 + v81);
  uint64_t v84 = v83[1];
  *(void *)uint64_t v82 = *v83;
  *((void *)v82 + 1) = v84;
  swift_retain();
  swift_release();
  uint64_t v85 = *(int *)(a3 + 24);
  uint64_t v86 = &a1[v85];
  uint64_t v87 = (char *)a2 + v85;
  uint64_t v88 = *(void **)&a1[v85];
  uint64_t v89 = *(void **)v87;
  *(void *)uint64_t v86 = *(void *)v87;
  id v90 = v89;

  *((void *)v86 + 1) = *((void *)v87 + 1);
  return a1;
}

uint64_t sub_255DE0200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v5[13];
  id v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v38 = v11;
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(unsigned char *)(a1 + v5[17]) = *(unsigned char *)(a2 + v5[17]);
  *(unsigned char *)(a1 + v5[18]) = *(unsigned char *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  uint64_t v17 = v5[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v5[21]) = *(void *)(a2 + v5[21]);
  uint64_t v23 = v5[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v38((const void *)(a2 + v23), 1, v9))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v28 = v27[5];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  uint64_t v32 = v27[6];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  *(void *)(a1 + v27[7]) = *(void *)(a2 + v27[7]);
  *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  uint64_t v36 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  return a1;
}

char *sub_255DE0730(char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v87 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
  a1[v13[18]] = *((unsigned char *)a2 + v13[18]);
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = (char *)a2 + v39;
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v89 = v13;
  if (v42 >> 60 == 15)
  {
    uint64_t v43 = v19;
LABEL_17:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_19;
  }
  unint64_t v44 = *((void *)v41 + 1);
  uint64_t v43 = v19;
  if (v44 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_17;
  }
  uint64_t v45 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v44;
  sub_255D80D04(v45, v42);
LABEL_19:
  uint64_t v46 = v89[20];
  int v47 = &a1[v46];
  int v48 = (char *)a2 + v46;
  uint64_t v49 = sub_255EEDF60();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (v52)
  {
    id v54 = v43;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v54 = v43;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_24:
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_25:
  uint64_t v56 = v89[21];
  uint64_t v57 = *(void **)&a1[v56];
  *(void *)&a1[v56] = *(void *)((char *)a2 + v56);

  uint64_t v58 = v89[22];
  int v59 = &a1[v58];
  uint64_t v60 = (char *)a2 + v58;
  int v61 = v54(&a1[v58], 1, v87);
  int v62 = v54(v60, 1, v87);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v59, v60, v87);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v87);
    goto LABEL_30;
  }
  if (v62)
  {
LABEL_30:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v59, v60, v87);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v87);
LABEL_31:
  uint64_t v64 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v65 = v64[5];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = (char *)a2 + v65;
  uint64_t v68 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 40))(v66, v67, v68);
  uint64_t v69 = v64[6];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = (char *)a2 + v69;
  uint64_t v72 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 40))(v70, v71, v72);
  uint64_t v73 = v64[7];
  uint64_t v74 = *(void **)&a1[v73];
  *(void *)&a1[v73] = *(void *)((char *)a2 + v73);

  uint64_t v75 = v64[8];
  id v76 = *(void **)&a1[v75];
  *(void *)&a1[v75] = *(void *)((char *)a2 + v75);

  uint64_t v77 = v64[9];
  uint64_t v78 = &a1[v77];
  id v79 = (void *)((char *)a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *(void *)uint64_t v78 = v81;
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  uint64_t v82 = *(int *)(a3 + 24);
  uint64_t v83 = &a1[v82];
  uint64_t v84 = (void *)((char *)a2 + v82);
  uint64_t v85 = *(void **)&a1[v82];
  *(void *)uint64_t v83 = *v84;

  *((void *)v83 + 1) = v84[1];
  return a1;
}

uint64_t sub_255DE0F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DE0F1C);
}

uint64_t sub_255DE0F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255DE0FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DE0FF0);
}

uint64_t sub_255DE0FF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDPersonalInformationCellView(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F35F28);
}

uint64_t sub_255DE10CC()
{
  return sub_255DE7190();
}

uint64_t sub_255DE10DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DE10F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v77 = a1;
  sub_255DE7310(0, &qword_269F35F38, (uint64_t (*)(uint64_t))sub_255DE24B8, (uint64_t)&type metadata for MedicalIDPlaceholderCell, MEMORY[0x263F19B20]);
  uint64_t v76 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v68 - v3;
  uint64_t v5 = type metadata accessor for MedicalIDPersonalInformationCellView(0);
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v72 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v73 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v68 - v8;
  sub_255DE2590();
  *(void *)&long long v74 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v68 - v14;
  sub_255DE24B8();
  uint64_t v17 = v16;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  int v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v68 - v21;
  char v23 = MedicalIDPersonalInfoViewModel.hasPersonalInfoData.getter();
  uint64_t v75 = v17;
  if (v23)
  {
    sub_255DE198C((uint64_t)&v78);
    if (qword_269F34AB0 != -1) {
      swift_once();
    }
    uint64_t v70 = v15;
    uint64_t v71 = v22;
    int v24 = *(void **)(v1 + *(int *)(v5 + 24));
    if (v24)
    {
      uint64_t v25 = qword_269F35F10;
      unsigned __int8 v26 = objc_msgSend(v24, sel_isLockScreen);
      long long v27 = *(_OWORD *)&v79[16];
      *((_OWORD *)v20 + 1) = *(_OWORD *)v79;
      *((_OWORD *)v20 + 2) = v27;
      *((void *)v20 + 6) = v80;
      *(_OWORD *)int v20 = v78;
      *((void *)v20 + 7) = v25;
      v20[64] = v26 ^ 1;
      uint64_t v69 = &v20[*(int *)(v17 + 44)];
      sub_255DE491C(v1, (uint64_t)v9, type metadata accessor for MedicalIDPersonalInformationCellView);
      unint64_t v28 = (*(unsigned __int8 *)(v72 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      uint64_t v72 = swift_allocObject();
      sub_255DE4A18((uint64_t)v9, v72 + v28, type metadata accessor for MedicalIDPersonalInformationCellView);
      uint64_t v29 = v73;
      sub_255DE491C(v1, v73, type metadata accessor for MedicalIDPersonalInformationCellView);
      uint64_t v30 = swift_allocObject();
      sub_255DE4A18(v29, v30 + v28, type metadata accessor for MedicalIDPersonalInformationCellView);
      *uint64_t v13 = swift_getKeyPath();
      sub_255DE77DC(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      uint64_t v31 = v74;
      uint64_t v32 = (char *)v13 + *(int *)(v74 + 52);
      uint64_t v33 = *MEMORY[0x263F18CB8];
      uint64_t v34 = sub_255EEE860();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(v32, v33, v34);
      uint64_t v35 = (uint64_t (**)())((char *)v13 + *(int *)(v31 + 56));
      uint64_t v36 = v72;
      char *v35 = sub_255DE4470;
      v35[1] = (uint64_t (*)())v36;
      uint64_t v37 = (uint64_t (**)())((char *)v13 + *(int *)(v31 + 60));
      char *v37 = sub_255DE4858;
      v37[1] = (uint64_t (*)())v30;
      uint64_t v38 = (uint64_t)v70;
      sub_255DE4A18((uint64_t)v13, (uint64_t)v70, (uint64_t (*)(void))sub_255DE2590);
      char v39 = sub_255EEF1A0();
      if (qword_269F34AA8 != -1) {
        swift_once();
      }
      sub_255EEE540();
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      uint64_t v48 = (uint64_t)v69;
      sub_255DE491C(v38, (uint64_t)v69, (uint64_t (*)(void))sub_255DE2590);
      sub_255DE2554(0);
      uint64_t v50 = v48 + *(int *)(v49 + 36);
      *(unsigned char *)uint64_t v50 = v39;
      *(void *)(v50 + 8) = v41;
      *(void *)(v50 + 16) = v43;
      *(void *)(v50 + 24) = v45;
      *(void *)(v50 + 32) = v47;
      *(unsigned char *)(v50 + 40) = 0;
      sub_255DE7C2C(v38, (uint64_t (*)(void))sub_255DE2590);
      uint64_t v51 = (uint64_t)v71;
      sub_255DE4A18((uint64_t)v20, (uint64_t)v71, (uint64_t (*)(void))sub_255DE24B8);
      sub_255DE491C(v51, (uint64_t)v4, (uint64_t (*)(void))sub_255DE24B8);
      swift_storeEnumTagMultiPayload();
      sub_255DE7E14(&qword_269F35FD8, (void (*)(uint64_t))sub_255DE24B8);
      sub_255DE2AF8();
      sub_255EEEE00();
      return sub_255DE7C2C(v51, (uint64_t (*)(void))sub_255DE24B8);
    }
    else
    {
      sub_255DB6ED8();
      sub_255DE7E14((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
      uint64_t result = sub_255EEE9E0();
      __break(1u);
    }
  }
  else
  {
    sub_255DE198C((uint64_t)&v78);
    uint64_t v72 = *((void *)&v78 + 1);
    uint64_t v73 = v78;
    char v53 = v79[0];
    char v54 = v79[1];
    long long v74 = *(_OWORD *)&v79[8];
    uint64_t v55 = *(void *)&v79[24];
    uint64_t v71 = (char *)v80;
    uint64_t v56 = sub_255EEFD40();
    MEMORY[0x270FA5388](v56 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v57 = (void *)qword_269F352A8;
    uint64_t v58 = sub_255EEE200();
    MEMORY[0x270FA5388](v58 - 8);
    id v59 = v57;
    sub_255EEE1F0();
    uint64_t v60 = sub_255EEFDA0();
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
    uint64_t v64 = *v63;
    uint64_t v65 = v63[1];
    uint64_t v66 = v72;
    *(void *)uint64_t v4 = v73;
    *((void *)v4 + 1) = v66;
    v4[16] = v53;
    v4[17] = v54;
    *(_OWORD *)(v4 + 24) = v74;
    uint64_t v67 = (uint64_t)v71;
    *((void *)v4 + 5) = v55;
    *((void *)v4 + 6) = v67;
    *((void *)v4 + 7) = v60;
    *((void *)v4 + 8) = v62;
    *((void *)v4 + 9) = v64;
    *((void *)v4 + 10) = v65;
    swift_storeEnumTagMultiPayload();
    sub_255DE7E14(&qword_269F35FD8, (void (*)(uint64_t))sub_255DE24B8);
    sub_255DE2AF8();
    swift_bridgeObjectRetain();
    return sub_255EEEE00();
  }
  return result;
}

uint64_t sub_255DE198C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_255EEFD40();
  MEMORY[0x270FA5388](v3 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_269F352A8;
  uint64_t v5 = sub_255EEE200();
  MEMORY[0x270FA5388](v5 - 8);
  id v6 = v4;
  sub_255EEE1F0();
  uint64_t v7 = sub_255EEFDA0();
  uint64_t v9 = v8;
  char v10 = MedicalIDPersonalInfoViewModel.hasPersonalInfoData.getter();
  uint64_t v11 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) + 20));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  *(unsigned char *)(a1 + 17) = 2;
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v12;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_255DE1B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_255EEEC90();
  if (qword_269F34AB8 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_269F35F18;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = 0;
  sub_255DE49AC(0, &qword_269F35FF0, sub_255DE2718);
  return sub_255DE1D68(a1, a2 + *(int *)(v6 + 44));
}

uint64_t sub_255DE1C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255DE2878(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_255EEED70();
  if (qword_269F34AC0 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_269F35F20;
  *(void *)uint64_t v6 = v7;
  *((void *)v6 + 1) = v8;
  v6[16] = 0;
  sub_255DE49AC(0, &qword_269F35FE8, sub_255DE2948);
  sub_255DE2154(a1, (uint64_t *)&v6[*(int *)(v9 + 44)]);
  uint64_t v10 = sub_255EEFB10();
  sub_255E831EC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v10, v11);
  return sub_255DE7C2C((uint64_t)v6, (uint64_t (*)(void))sub_255DE2878);
}

uint64_t sub_255DE1D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PersonInfoView(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DE27E0(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v35 - v15;
  sub_255DE491C(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  uint64_t v17 = sub_255EEED80();
  sub_255DB6ED8();
  sub_255DE7E14((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  uint64_t v18 = sub_255EEE9F0();
  *(void *)&v10[*(int *)(v8 + 28)] = v17;
  uint64_t v19 = (uint64_t *)&v10[*(int *)(v8 + 32)];
  *uint64_t v19 = v18;
  v19[1] = v20;
  uint64_t v21 = sub_255EEFB20();
  sub_255E83264(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v21, v22);
  sub_255DE7C2C((uint64_t)v10, type metadata accessor for PersonInfoView);
  sub_255DE4A18((uint64_t)v14, (uint64_t)v16, (uint64_t (*)(void))sub_255DE27E0);
  char v23 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) + 24));
  if (v23)
  {
    id v24 = v23;
    unsigned __int8 v25 = objc_msgSend(v24, sel_isLockScreen);
    sub_255DE491C(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
    if (v25)
    {
      unsigned __int8 v26 = (uint64_t *)&v6[*(int *)(type metadata accessor for MedicalIDData() + 76)];
      uint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      sub_255DAD700(*v26, v28);
      sub_255DE7C2C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
      if (v28 >> 60 == 15)
      {

        uint64_t v29 = 0;
        unint64_t v30 = 0xB000000000000000;
LABEL_8:
        sub_255DE491C((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))sub_255DE27E0);
        sub_255DE491C((uint64_t)v14, a2, (uint64_t (*)(void))sub_255DE27E0);
        sub_255DE274C();
        uint64_t v33 = (uint64_t *)(a2 + *(int *)(v32 + 48));
        *uint64_t v33 = v29;
        v33[1] = v30;
        sub_255DE4984(v29, v30);
        sub_255DE7C2C((uint64_t)v16, (uint64_t (*)(void))sub_255DE27E0);
        sub_255DE4998(v29, v30);
        return sub_255DE7C2C((uint64_t)v14, (uint64_t (*)(void))sub_255DE27E0);
      }
      sub_255DAD684(v27, v28);
    }
    else
    {
      sub_255DE7C2C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
    }

    uint64_t v31 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MedicalIDData() + 76));
    uint64_t v29 = *v31;
    unint64_t v30 = v31[1];
    sub_255DAD700(*v31, v30);
    goto LABEL_8;
  }
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

uint64_t sub_255DE2154@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PersonInfoView(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(a1 + *(int *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) + 24));
  if (v13)
  {
    id v14 = v13;
    unsigned __int8 v15 = objc_msgSend(v14, sel_isLockScreen);
    sub_255DE491C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)&v12[*(int *)(type metadata accessor for MedicalIDData() + 76)];
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      sub_255DAD700(*v16, v18);
      sub_255DE7C2C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
      if (v18 >> 60 == 15)
      {

        uint64_t v19 = 0;
        unint64_t v20 = 0xB000000000000000;
LABEL_8:
        sub_255DE491C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
        uint64_t v22 = sub_255EEED70();
        sub_255DB6ED8();
        sub_255DE7E14((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
        uint64_t v23 = sub_255EEE9F0();
        *(void *)&v9[*(int *)(v4 + 20)] = v22;
        id v24 = (uint64_t *)&v9[*(int *)(v4 + 24)];
        *id v24 = v23;
        v24[1] = v25;
        sub_255DE491C((uint64_t)v9, (uint64_t)v7, type metadata accessor for PersonInfoView);
        *a2 = v19;
        a2[1] = v20;
        sub_255DE297C();
        sub_255DE491C((uint64_t)v7, (uint64_t)a2 + *(int *)(v26 + 48), type metadata accessor for PersonInfoView);
        sub_255DE4984(v19, v20);
        sub_255DE7C2C((uint64_t)v9, type metadata accessor for PersonInfoView);
        sub_255DE7C2C((uint64_t)v7, type metadata accessor for PersonInfoView);
        return sub_255DE4998(v19, v20);
      }
      sub_255DAD684(v17, v18);
    }
    else
    {
      sub_255DE7C2C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
    }

    uint64_t v21 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MedicalIDData() + 76));
    uint64_t v19 = *v21;
    unint64_t v20 = v21[1];
    sub_255DAD700(*v21, v20);
    goto LABEL_8;
  }
  sub_255DB6ED8();
  sub_255DE7E14((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

void sub_255DE24B8()
{
  if (!qword_269F35F40)
  {
    sub_255DE2554(255);
    sub_255DE2A44(&qword_269F35FC8, sub_255DE2554, (void (*)(void))sub_255DE2AC4);
    unint64_t v0 = type metadata accessor for MedicalIDCellView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35F40);
    }
  }
}

void sub_255DE2554(uint64_t a1)
{
}

void sub_255DE2590()
{
  if (!qword_269F35F50)
  {
    sub_255DE2684();
    sub_255DE283C(255);
    sub_255DE7E14(&qword_269F35FB0, (void (*)(uint64_t))sub_255DE2684);
    sub_255DE2A44(&qword_269F35FB8, sub_255DE283C, (void (*)(void))sub_255DE2A10);
    unint64_t v0 = type metadata accessor for MedicalIDAXLayoutView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35F50);
    }
  }
}

void sub_255DE2684()
{
  if (!qword_269F35F58)
  {
    sub_255DE2718(255);
    sub_255DE7E14(&qword_269F35F80, sub_255DE2718);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35F58);
    }
  }
}

void sub_255DE2718(uint64_t a1)
{
}

void sub_255DE274C()
{
  if (!qword_269F35F68)
  {
    sub_255DE27E0(255);
    sub_255DE79B0(255, &qword_269F35F78, (uint64_t)&type metadata for ProfileImageView, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F35F68);
    }
  }
}

void sub_255DE27E0(uint64_t a1)
{
}

uint64_t type metadata accessor for PersonInfoView(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F35FF8);
}

void sub_255DE283C(uint64_t a1)
{
}

void sub_255DE2878(uint64_t a1)
{
}

void sub_255DE28B4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255DE7E14(a4, a5);
    unint64_t v8 = sub_255EEF950();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255DE2948(uint64_t a1)
{
}

void sub_255DE297C()
{
  if (!qword_269F35FA0)
  {
    sub_255DE79B0(255, &qword_269F35F78, (uint64_t)&type metadata for ProfileImageView, MEMORY[0x263F8D8F0]);
    type metadata accessor for PersonInfoView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F35FA0);
    }
  }
}

uint64_t sub_255DE2A10()
{
  return sub_255DE7E14(&qword_269F35FC0, sub_255DE2878);
}

uint64_t sub_255DE2A44(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DE2AC4()
{
  return sub_255DE7E14(&qword_269F35FD0, (void (*)(uint64_t))sub_255DE2590);
}

unint64_t sub_255DE2AF8()
{
  unint64_t result = qword_269F35FE0;
  if (!qword_269F35FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35FE0);
  }
  return result;
}

void sub_255DE2B4C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v209 = a2;
  sub_255DE7714(0);
  uint64_t v195 = v3;
  MEMORY[0x270FA5388](v3);
  id v198 = (uint64_t *)((char *)&v187 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255DE7748(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v197 = (char *)&v187 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DE76B4();
  uint64_t v194 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v199 = (char *)&v187 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DE7584(0, &qword_269F36068, (void (*)(uint64_t))sub_255DE76B4, (void (*)(uint64_t))sub_255DE777C);
  uint64_t v196 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v200 = (uint64_t)&v187 - v10;
  sub_255DE75F8();
  uint64_t v201 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v202 = (uint64_t)&v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void (*)(uint64_t))MEMORY[0x263F1A470];
  sub_255DE7584(0, &qword_269F36058, (void (*)(uint64_t))sub_255DE75F8, MEMORY[0x263F1A470]);
  uint64_t v207 = v14;
  uint64_t v206 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  int v191 = (char *)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v190 = (uint64_t)&v187 - v17;
  sub_255DE7518(0, &qword_269F36050, &qword_269F36058, (void (*)(uint64_t))sub_255DE75F8);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v208 = (uint64_t)&v187 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v219 = (uint64_t)&v187 - v21;
  uint64_t v22 = sub_255EEF260();
  uint64_t v215 = *(void (**)(void))(v22 - 8);
  MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v187 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DE77DC(0, &qword_269F36090, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v25 - 8);
  id v214 = (char *)&v187 - v26;
  uint64_t v213 = sub_255EEF2C0();
  uint64_t v212 = *(void *)(v213 - 8);
  MEMORY[0x270FA5388](v213);
  id v211 = (char *)&v187 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DE7584(0, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494, v13);
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v193 = (char *)&v187 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v192 = (uint64_t)&v187 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v204 = (uint64_t)&v187 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v203 = (uint64_t)&v187 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&v187 - v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v187 - v42;
  sub_255DE7518(0, (unint64_t *)&qword_269F36030, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
  uint64_t v45 = MEMORY[0x270FA5388](v44 - 8);
  uint64_t v205 = (uint64_t)&v187 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v217 = (uint64_t)&v187 - v48;
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  uint64_t v218 = (uint64_t)&v187 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v222 = (uint64_t)&v187 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  uint64_t v55 = (char *)&v187 - v54;
  MEMORY[0x270FA5388](v53);
  unint64_t v56 = a1[1];
  uint64_t v220 = a1;
  uint64_t v221 = (uint64_t)&v187 - v57;
  uint64_t v223 = v55;
  uint64_t v216 = v29;
  uint64_t v210 = v30;
  if (!v56) {
    goto LABEL_7;
  }
  uint64_t v58 = *a1;
  uint64_t v59 = HIBYTE(v56) & 0xF;
  if ((v56 & 0x2000000000000000) == 0) {
    uint64_t v59 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v59)
  {
LABEL_7:
    id v90 = *(void (**)(void))(v30 + 56);
    v90();
LABEL_8:
    Swift::String_optional v91 = MedicalIDPersonalInfoViewModel.localizedAgeDescription()();
    uint64_t v215 = v90;
    if (v91.value._object)
    {
      Swift::String_optional v224 = v91;
      sub_255DAD520();
      uint64_t v92 = MEMORY[0x263F8D310];
      uint64_t v93 = sub_255EEF3D0();
      uint64_t v95 = v94;
      char v97 = v96 & 1;
      sub_255EEF200();
      uint64_t v98 = sub_255EEF3B0();
      uint64_t v100 = v99;
      char v102 = v101;
      uint64_t v104 = v103;
      swift_release();
      sub_255D85120(v93, v95, v97);
      swift_bridgeObjectRelease();
      uint64_t KeyPath = swift_getKeyPath();
      v224.value._countAndFlagsBits = v98;
      v224.value._object = v100;
      char v106 = v102 & 1;
      a1 = v220;
      char v225 = v106;
      uint64_t v189 = v104;
      uint64_t v226 = v104;
      uint64_t v227 = KeyPath;
      char v228 = 0;
      sub_255DE79B0(0, (unint64_t *)&qword_269F37DA0, v92, MEMORY[0x263F8E0F8]);
      uint64_t v107 = swift_allocObject();
      *(_OWORD *)(v107 + 16) = xmmword_255EF1E20;
      uint64_t v108 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
      uint64_t v109 = v108[1];
      *(void *)(v107 + 32) = *v108;
      *(void *)(v107 + 40) = v109;
      *(void *)(v107 + 48) = 6645569;
      *(void *)(v107 + 56) = 0xE300000000000000;
      swift_bridgeObjectRetain();
      uint64_t v110 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      id v111 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (!v111)
      {
        __break(1u);
        goto LABEL_22;
      }
      sub_255EEFD90();

      sub_255DE7494();
      sub_255DE7C8C((unint64_t *)&qword_269F360C8, (void (*)(uint64_t))sub_255DE7494, (void (*)(void))sub_255DE7BB0);
      uint64_t v112 = v204;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v98, (uint64_t)v100, v106);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v113 = v112;
      uint64_t v114 = v203;
      sub_255DE7D10(v113, v203, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
      uint64_t v55 = v223;
      sub_255DE7D10(v114, (uint64_t)v223, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
      uint64_t v115 = 0;
      id v90 = v215;
      uint64_t v29 = v216;
    }
    else
    {
      uint64_t v115 = 1;
    }
    uint64_t v116 = 1;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v90)(v55, v115, 1, v29);
    Swift::String_optional v117 = MedicalIDPersonalInfoViewModel.spokenLanguageDescription()();
    if (!v117.value._object)
    {
      uint64_t v140 = v222;
      goto LABEL_16;
    }
    Swift::String_optional v224 = v117;
    sub_255DAD520();
    uint64_t v118 = sub_255EEF3D0();
    uint64_t v120 = v119;
    char v122 = v121 & 1;
    sub_255EEF200();
    uint64_t v123 = sub_255EEF3B0();
    uint64_t v125 = v124;
    char v127 = v126;
    uint64_t v129 = v128;
    swift_release();
    sub_255D85120(v118, v120, v122);
    swift_bridgeObjectRelease();
    uint64_t v130 = swift_getKeyPath();
    uint64_t v204 = v123;
    v224.value._countAndFlagsBits = v123;
    v224.value._object = v125;
    char v131 = v127 & 1;
    a1 = v220;
    char v225 = v131;
    uint64_t v210 = v129;
    uint64_t v226 = v129;
    uint64_t v227 = v130;
    char v228 = 0;
    sub_255DE79B0(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v132 = swift_allocObject();
    *(_OWORD *)(v132 + 16) = xmmword_255EF1E20;
    uint64_t v133 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
    uint64_t v134 = v133[1];
    *(void *)(v132 + 32) = *v133;
    *(void *)(v132 + 40) = v134;
    *(void *)(v132 + 48) = 0x65676175676E614CLL;
    *(void *)(v132 + 56) = 0xE800000000000000;
    swift_bridgeObjectRetain();
    uint64_t v135 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v136 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v136)
    {
      sub_255EEFD90();

      sub_255DE7494();
      sub_255DE7C8C((unint64_t *)&qword_269F360C8, (void (*)(uint64_t))sub_255DE7494, (void (*)(void))sub_255DE7BB0);
      uint64_t v137 = v193;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v204, (uint64_t)v125, v131);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v138 = (uint64_t)v137;
      uint64_t v139 = v192;
      sub_255DE7D10(v138, v192, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
      uint64_t v140 = v222;
      sub_255DE7D10(v139, v222, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
      uint64_t v116 = 0;
      id v90 = v215;
      uint64_t v29 = v216;
LABEL_16:
      uint64_t v141 = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v90)(v140, v116, 1, v29);
      Swift::String_optional v142 = MedicalIDPersonalInfoViewModel.localizedOrganDonationDescription()();
      if (!v142.value._object)
      {
        uint64_t v179 = v219;
        goto LABEL_20;
      }
      Swift::String_optional v224 = v142;
      sub_255DAD520();
      uint64_t v143 = sub_255EEF3D0();
      uint64_t v145 = v144;
      char v147 = v146 & 1;
      uint64_t v148 = v212;
      uint64_t v149 = v211;
      uint64_t v150 = v213;
      (*(void (**)(char *, void, uint64_t))(v212 + 104))(v211, *MEMORY[0x263F1A728], v213);
      uint64_t v151 = sub_255EEF210();
      uint64_t v152 = (uint64_t)v214;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v151 - 8) + 56))(v214, 1, 1, v151);
      sub_255EEF220();
      sub_255EEF230();
      sub_255DE7914(v152);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v150);
      uint64_t v153 = sub_255EEF3B0();
      uint64_t v155 = v154;
      uint64_t v156 = a1;
      char v158 = v157;
      uint64_t v160 = v159;
      swift_release();
      sub_255D85120(v143, v145, v147);
      swift_bridgeObjectRelease();
      uint64_t v161 = *MEMORY[0x263F1A7B8];
      uint64_t v162 = sub_255EEF390();
      uint64_t v163 = *(void *)(v162 - 8);
      uint64_t v164 = (uint64_t)v197;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 104))(v197, v161, v162);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v163 + 56))(v164, 0, 1, v162);
      uint64_t v165 = swift_getKeyPath();
      unint64_t v166 = v198;
      sub_255DE491C(v164, (uint64_t)v198 + *(int *)(v195 + 28), (uint64_t (*)(void))sub_255DE7748);
      *unint64_t v166 = v165;
      uint64_t v167 = (uint64_t)v199;
      sub_255DE491C((uint64_t)v166, (uint64_t)&v199[*(int *)(v194 + 36)], (uint64_t (*)(void))sub_255DE7714);
      *(void *)uint64_t v167 = v153;
      *(void *)(v167 + 8) = v155;
      *(unsigned char *)(v167 + 16) = v158 & 1;
      *(void *)(v167 + 24) = v160;
      swift_bridgeObjectRetain();
      sub_255D85214(v153, v155, v158 & 1);
      sub_255DE7C2C((uint64_t)v166, (uint64_t (*)(void))sub_255DE7714);
      sub_255DE7C2C(v164, (uint64_t (*)(void))sub_255DE7748);
      sub_255D85120(v153, v155, v158 & 1);
      swift_bridgeObjectRelease();
      LODWORD(v160) = sub_255EEEF30();
      uint64_t v168 = v200;
      sub_255DE491C(v167, v200, (uint64_t (*)(void))sub_255DE76B4);
      *(_DWORD *)(v168 + *(int *)(v196 + 36)) = v160;
      sub_255DE7C2C(v167, (uint64_t (*)(void))sub_255DE76B4);
      uint64_t v169 = swift_getKeyPath();
      uint64_t v170 = v202;
      sub_255DE7840(v168, v202, (uint64_t)&qword_269F36068, (uint64_t)sub_255DE76B4, (uint64_t)sub_255DE777C, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7584);
      uint64_t v171 = v170 + *(int *)(v201 + 36);
      *(void *)uint64_t v171 = v169;
      *(unsigned char *)(v171 + 8) = 0;
      sub_255DE78B4(v168, (uint64_t)&qword_269F36068, (uint64_t)sub_255DE76B4, (uint64_t)sub_255DE777C, (uint64_t (*)(void))sub_255DE7584);
      sub_255DE79B0(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v172 = swift_allocObject();
      *(_OWORD *)(v172 + 16) = xmmword_255EF1E20;
      uint64_t v173 = (uint64_t *)((char *)v156 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
      uint64_t v174 = v173[1];
      *(void *)(v172 + 32) = *v173;
      *(void *)(v172 + 40) = v174;
      *(void *)(v172 + 48) = 0xD000000000000010;
      *(void *)(v172 + 56) = 0x8000000255EF9A70;
      swift_bridgeObjectRetain();
      uint64_t v175 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      id v176 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (v176)
      {
        sub_255EEFD90();

        sub_255DE79FC();
        uint64_t v177 = (uint64_t)v191;
        sub_255EEF580();
        swift_bridgeObjectRelease();
        sub_255DE7C2C(v170, (uint64_t (*)(void))sub_255DE75F8);
        uint64_t v178 = v190;
        sub_255DE7D10(v177, v190, &qword_269F36058, (void (*)(uint64_t))sub_255DE75F8);
        uint64_t v179 = v219;
        sub_255DE7D10(v178, v219, &qword_269F36058, (void (*)(uint64_t))sub_255DE75F8);
        uint64_t v141 = 0;
LABEL_20:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56))(v179, v141, 1, v207);
        uint64_t v180 = v218;
        sub_255DE7840(v221, v218, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        uint64_t v181 = v217;
        sub_255DE7840((uint64_t)v223, v217, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        uint64_t v182 = v205;
        sub_255DE7840(v222, v205, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        uint64_t v183 = v208;
        sub_255DE7840(v179, v208, (uint64_t)&qword_269F36050, (uint64_t)&qword_269F36058, (uint64_t)sub_255DE75F8, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        uint64_t v184 = v209;
        sub_255DE7840(v180, v209, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        sub_255DE73CC();
        uint64_t v186 = v185;
        sub_255DE7840(v181, v184 + *(int *)(v185 + 48), (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        sub_255DE7840(v182, v184 + *(int *)(v186 + 64), (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        sub_255DE7840(v183, v184 + *(int *)(v186 + 80), (uint64_t)&qword_269F36050, (uint64_t)&qword_269F36058, (uint64_t)sub_255DE75F8, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255DE7518);
        sub_255DE78B4(v219, (uint64_t)&qword_269F36050, (uint64_t)&qword_269F36058, (uint64_t)sub_255DE75F8, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4(v222, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4((uint64_t)v223, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4(v221, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4(v183, (uint64_t)&qword_269F36050, (uint64_t)&qword_269F36058, (uint64_t)sub_255DE75F8, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4(v182, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4(v217, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void))sub_255DE7518);
        sub_255DE78B4(v218, (uint64_t)&qword_269F36030, (uint64_t)&qword_269F36038, (uint64_t)sub_255DE7494, (uint64_t (*)(void))sub_255DE7518);
        return;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v187 = v43;
  uint64_t v188 = v41;
  v224.value._countAndFlagsBits = v58;
  v224.value._object = (void *)v56;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_255EEF3D0();
  uint64_t v62 = v61;
  uint64_t v189 = v63;
  char v65 = v64 & 1;
  uint64_t v66 = v212;
  uint64_t v67 = v211;
  uint64_t v68 = v213;
  (*(void (**)(char *, void, uint64_t))(v212 + 104))(v211, *MEMORY[0x263F1A6F0], v213);
  uint64_t v69 = sub_255EEF210();
  uint64_t v70 = v22;
  uint64_t v71 = (uint64_t)v214;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v214, 1, 1, v69);
  sub_255EEF220();
  sub_255EEF230();
  sub_255DE7914(v71);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
  uint64_t v72 = v215;
  (*((void (**)(char *, void, uint64_t))v215 + 13))(v24, *MEMORY[0x263F1A680], v70);
  sub_255EEF280();
  swift_release();
  (*((void (**)(char *, uint64_t))v72 + 1))(v24, v70);
  uint64_t v73 = sub_255EEF3B0();
  LOBYTE(v72) = v74;
  uint64_t v76 = v75;
  long long v78 = v77;
  swift_release();
  sub_255D85120(v60, v62, v65);
  swift_bridgeObjectRelease();
  uint64_t v79 = swift_getKeyPath();
  v224.value._countAndFlagsBits = v73;
  v224.value._object = v78;
  char v80 = v72 & 1;
  char v225 = v72 & 1;
  uint64_t v226 = v76;
  uint64_t v227 = v79;
  char v228 = 0;
  sub_255DE79B0(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_255EF1E20;
  uint64_t v82 = (uint64_t *)((char *)v220 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  uint64_t v83 = v82[1];
  *(void *)(v81 + 32) = *v82;
  *(void *)(v81 + 40) = v83;
  *(void *)(v81 + 48) = 1701667150;
  *(void *)(v81 + 56) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  uint64_t v84 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v85 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v85)
  {
    sub_255EEFD90();

    sub_255DE7494();
    sub_255DE7C8C((unint64_t *)&qword_269F360C8, (void (*)(uint64_t))sub_255DE7494, (void (*)(void))sub_255DE7BB0);
    uint64_t v86 = (uint64_t)v188;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v73, (uint64_t)v78, v80);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v87 = (uint64_t)v187;
    sub_255DE7D10(v86, (uint64_t)v187, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
    uint64_t v88 = v87;
    uint64_t v89 = v221;
    sub_255DE7D10(v88, v221, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
    id v90 = *(void (**)(void))(v210 + 56);
    uint64_t v29 = v216;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v90)(v89, 0, 1, v216);
    a1 = v220;
    uint64_t v55 = v223;
    goto LABEL_8;
  }
LABEL_24:
  __break(1u);
}

void sub_255DE4398(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)v2 + *(int *)(a1 + 20));
  if (qword_269F34A50 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_269F3FD50;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = 0;
  sub_255DE49AC(0, &qword_269F36018, sub_255DE7398);
  sub_255DE2B4C(v2, a2 + *(int *)(v6 + 44));
}

void sub_255DE444C()
{
  qword_269F35F08 = 0x4020000000000000;
}

void sub_255DE445C()
{
  qword_269F35F10 = 0x4038000000000000;
}

uint64_t sub_255DE4470()
{
  return sub_255DE4870((uint64_t (*)(uint64_t))sub_255DE1B48);
}

uint64_t objectdestroyTm_4()
{
  uint64_t v20 = type metadata accessor for MedicalIDPersonalInformationCellView(0);
  uint64_t v1 = v0
     + ((*(unsigned __int8 *)(*(void *)(v20 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v20 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v3 = v1 + v2[13];
  uint64_t v4 = sub_255EEE100();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  uint64_t v7 = v1 + v2[14];
  if (!v6(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v1 + v2[19]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_255D80D04(*v8, v9);
  }
  uint64_t v10 = v1 + v2[20];
  uint64_t v11 = sub_255EEDF60();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }

  uint64_t v13 = v1 + v2[22];
  if (!v6(v13, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, v4);
  }
  uint64_t v14 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v15 = v1 + v14[5];
  uint64_t v16 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v1 + v14[6];
  uint64_t v18 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_255DE4858()
{
  return sub_255DE4870((uint64_t (*)(uint64_t))sub_255DE1C00);
}

uint64_t sub_255DE4870(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for MedicalIDPersonalInformationCellView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

void sub_255DE48F4()
{
  qword_269F35F18 = 0x4030000000000000;
}

void sub_255DE4904()
{
  qword_269F35F20 = 0x4018000000000000;
}

uint64_t sub_255DE491C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DE4984(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_255DAD700(a1, a2);
  }
  return a1;
}

uint64_t sub_255DE4998(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_255DAD684(a1, a2);
  }
  return a1;
}

void sub_255DE49AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE7B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255DE4A18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_255DE4A80(void *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *unint64_t v4 = *(void *)a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    uint64_t v76 = (void *)*((void *)a2 + 12);
    uint64_t v77 = (void *)*((void *)a2 + 13);
    a1[12] = v76;
    a1[13] = v77;
    uint64_t v81 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v81[13];
    __dst = (char *)v4 + v12;
    uint64_t v13 = &a2[v12];
    uint64_t v14 = sub_255EEE100();
    uint64_t v80 = *(void *)(v14 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v76;
    id v17 = v77;
    if (v15(v13, 1, v14))
    {
      sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = v81[14];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = &a2[v20];
    if (v15(&a2[v20], 1, v14))
    {
      sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v21, v22, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v21, 0, 1, v14);
    }
    uint64_t v24 = v81[15];
    uint64_t v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = &a2[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *uint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v81[16];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *uint64_t v29 = *(void *)v30;
    v29[1] = v31;
    *((unsigned char *)v4 + v81[17]) = a2[v81[17]];
    *((unsigned char *)v4 + v81[18]) = a2[v81[18]];
    uint64_t v32 = v81[19];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (uint64_t *)&a2[v32];
    unint64_t v35 = *(void *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_255D80890(*v34, v35);
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = v81[20];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = &a2[v37];
    uint64_t v40 = sub_255EEDF60();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v81[21];
    uint64_t v44 = *(void **)&a2[v43];
    *(void *)((char *)v4 + v43) = v44;
    uint64_t v45 = v81[22];
    uint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = &a2[v45];
    id v48 = v44;
    if (v15(v47, 1, v14))
    {
      sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v46, v47, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v46, 0, 1, v14);
    }
    uint64_t v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    uint64_t v51 = v50[5];
    uint64_t v52 = (char *)v4 + v51;
    uint64_t v53 = &a2[v51];
    uint64_t v54 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
    uint64_t v55 = v50[6];
    unint64_t v56 = (char *)v4 + v55;
    uint64_t v57 = &a2[v55];
    uint64_t v58 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
    uint64_t v59 = v50[7];
    uint64_t v60 = *(void **)&a2[v59];
    *(void *)((char *)v4 + v59) = v60;
    uint64_t v61 = v50[8];
    uint64_t v62 = *(void **)&a2[v61];
    *(void *)((char *)v4 + v61) = v62;
    uint64_t v63 = v50[9];
    char v64 = (void *)((char *)v4 + v63);
    char v65 = &a2[v63];
    uint64_t v66 = *((void *)v65 + 1);
    *char v64 = *(void *)v65;
    v64[1] = v66;
    uint64_t v67 = *(int *)(a3 + 24);
    *(void *)((char *)v4 + *(int *)(a3 + 20)) = *(void *)&a2[*(int *)(a3 + 20)];
    uint64_t v68 = (void *)((char *)v4 + v67);
    uint64_t v69 = &a2[v67];
    uint64_t v71 = *(void **)v69;
    uint64_t v70 = *((void *)v69 + 1);
    *uint64_t v68 = v71;
    v68[1] = v70;
    id v72 = v60;
    id v73 = v62;
    swift_bridgeObjectRetain();
    id v74 = v71;
  }
  return v4;
}

void sub_255DE50F0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  id v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v17 = a1 + v16[5];
  uint64_t v18 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = a1 + v16[6];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  uint64_t v21 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *sub_255DE5424(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  id v74 = (void *)*((void *)a2 + 12);
  uint64_t v75 = (void *)*((void *)a2 + 13);
  a1[12] = v74;
  a1[13] = v75;
  uint64_t v79 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v79[13];
  __dst = (char *)a1 + v11;
  uint64_t v12 = &a2[v11];
  uint64_t v13 = sub_255EEE100();
  uint64_t v78 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v74;
  id v16 = v75;
  if (v14(v12, 1, v13))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = v79[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v14(&a2[v18], 1, v13))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v79[15];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *uint64_t v23 = *(void *)v24;
  v23[1] = v25;
  uint64_t v26 = v79[16];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *uint64_t v27 = *(void *)v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v79[17]) = a2[v79[17]];
  *((unsigned char *)a1 + v79[18]) = a2[v79[18]];
  uint64_t v30 = v79[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (uint64_t *)&a2[v30];
  unint64_t v33 = *(void *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    sub_255D80890(*v32, v33);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v35 = v79[20];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_255EEDF60();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v41 = v79[21];
  uint64_t v42 = *(void **)&a2[v41];
  *(void *)((char *)a1 + v41) = v42;
  uint64_t v43 = v79[22];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = &a2[v43];
  id v46 = v42;
  if (v14(v45, 1, v13))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v44, v45, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v44, 0, 1, v13);
  }
  id v48 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v49 = v48[5];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = &a2[v49];
  uint64_t v52 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  uint64_t v53 = v48[6];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = &a2[v53];
  uint64_t v56 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
  uint64_t v57 = v48[7];
  uint64_t v58 = *(void **)&a2[v57];
  *(void *)((char *)a1 + v57) = v58;
  uint64_t v59 = v48[8];
  uint64_t v60 = *(void **)&a2[v59];
  *(void *)((char *)a1 + v59) = v60;
  uint64_t v61 = v48[9];
  uint64_t v62 = (void *)((char *)a1 + v61);
  uint64_t v63 = &a2[v61];
  uint64_t v64 = *((void *)v63 + 1);
  void *v62 = *(void *)v63;
  v62[1] = v64;
  uint64_t v65 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v66 = (void *)((char *)a1 + v65);
  uint64_t v67 = &a2[v65];
  uint64_t v69 = *(void **)v67;
  uint64_t v68 = *((void *)v67 + 1);
  void *v66 = v69;
  v66[1] = v68;
  id v70 = v58;
  id v71 = v60;
  swift_bridgeObjectRetain();
  id v72 = v69;
  return a1;
}

char *sub_255DE5A44(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)a2[12];
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)a2[13];
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v89 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((unsigned char *)a2 + v11[17]);
  a1[v11[18]] = *((unsigned char *)a2 + v11[18]);
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v88 = v17;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  id v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = v88;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = v88;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)((char *)a2 + v51);
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = (char *)a2 + v55;
  int v58 = v49(&a1[v55], 1, v89);
  int v59 = v49(v57, 1, v89);
  if (!v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v89);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v89);
    goto LABEL_31;
  }
  if (v59)
  {
LABEL_31:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v89);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v89);
LABEL_32:
  uint64_t v61 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v62 = v61[5];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = (char *)a2 + v62;
  uint64_t v65 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24))(v63, v64, v65);
  uint64_t v66 = v61[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = (char *)a2 + v66;
  uint64_t v69 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v61[7];
  id v71 = *(void **)&a1[v70];
  id v72 = *(void **)((char *)a2 + v70);
  *(void *)&a1[v70] = v72;
  id v73 = v72;

  uint64_t v74 = v61[8];
  uint64_t v75 = *(void **)((char *)a2 + v74);
  uint64_t v76 = *(void **)&a1[v74];
  *(void *)&a1[v74] = v75;
  id v77 = v75;

  uint64_t v78 = v61[9];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = (void *)((char *)a2 + v78);
  *(void *)uint64_t v79 = *v80;
  *((void *)v79 + 1) = v80[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v81 = *(int *)(a3 + 24);
  uint64_t v82 = &a1[v81];
  uint64_t v83 = (char *)a2 + v81;
  uint64_t v84 = *(void **)&a1[v81];
  id v85 = *(void **)v83;
  *(void *)uint64_t v82 = *(void *)v83;
  id v86 = v85;

  *((void *)v82 + 1) = *((void *)v83 + 1);
  return a1;
}

uint64_t sub_255DE62D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v5[13];
  id v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v38 = v11;
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(unsigned char *)(a1 + v5[17]) = *(unsigned char *)(a2 + v5[17]);
  *(unsigned char *)(a1 + v5[18]) = *(unsigned char *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  uint64_t v17 = v5[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v5[21]) = *(void *)(a2 + v5[21]);
  uint64_t v23 = v5[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v38((const void *)(a2 + v23), 1, v9))
  {
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v28 = v27[5];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  uint64_t v32 = v27[6];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  *(void *)(a1 + v27[7]) = *(void *)(a2 + v27[7]);
  *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  uint64_t v36 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  return a1;
}

char *sub_255DE6808(char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v87 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
  a1[v13[18]] = *((unsigned char *)a2 + v13[18]);
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = (char *)a2 + v39;
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v89 = v13;
  if (v42 >> 60 == 15)
  {
    uint64_t v43 = v19;
LABEL_17:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_19;
  }
  unint64_t v44 = *((void *)v41 + 1);
  uint64_t v43 = v19;
  if (v44 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_17;
  }
  uint64_t v45 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v44;
  sub_255D80D04(v45, v42);
LABEL_19:
  uint64_t v46 = v89[20];
  int v47 = &a1[v46];
  int v48 = (char *)a2 + v46;
  uint64_t v49 = sub_255EEDF60();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (v52)
  {
    id v54 = v43;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v54 = v43;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_24:
    sub_255DE77DC(0, &qword_269F350B8, MEMORY[0x270FA81C8], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_25:
  uint64_t v56 = v89[21];
  uint64_t v57 = *(void **)&a1[v56];
  *(void *)&a1[v56] = *(void *)((char *)a2 + v56);

  uint64_t v58 = v89[22];
  int v59 = &a1[v58];
  uint64_t v60 = (char *)a2 + v58;
  int v61 = v54(&a1[v58], 1, v87);
  int v62 = v54(v60, 1, v87);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v59, v60, v87);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v87);
    goto LABEL_30;
  }
  if (v62)
  {
LABEL_30:
    sub_255DE77DC(0, &qword_269F35058, MEMORY[0x270FA91B8], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v59, v60, v87);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v87);
LABEL_31:
  uint64_t v64 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v65 = v64[5];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = (char *)a2 + v65;
  uint64_t v68 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 40))(v66, v67, v68);
  uint64_t v69 = v64[6];
  uint64_t v70 = &a1[v69];
  id v71 = (char *)a2 + v69;
  uint64_t v72 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 40))(v70, v71, v72);
  uint64_t v73 = v64[7];
  uint64_t v74 = *(void **)&a1[v73];
  *(void *)&a1[v73] = *(void *)((char *)a2 + v73);

  uint64_t v75 = v64[8];
  uint64_t v76 = *(void **)&a1[v75];
  *(void *)&a1[v75] = *(void *)((char *)a2 + v75);

  uint64_t v77 = v64[9];
  uint64_t v78 = &a1[v77];
  uint64_t v79 = (void *)((char *)a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *(void *)uint64_t v78 = v81;
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v83 = &a1[v82];
  uint64_t v84 = (void *)((char *)a2 + v82);
  id v85 = *(void **)&a1[v82];
  *(void *)&a1[v82] = *v84;

  *((void *)v83 + 1) = v84[1];
  return a1;
}

uint64_t sub_255DE6FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DE6FE4);
}

uint64_t sub_255DE6FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_255DE70B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DE70C4);
}

uint64_t sub_255DE70C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

uint64_t sub_255DE7180()
{
  return sub_255DE7190();
}

uint64_t sub_255DE7190()
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_255DE7230()
{
  unint64_t result = qword_269F36008;
  if (!qword_269F36008)
  {
    sub_255DE7310(255, &qword_269F36010, (uint64_t (*)(uint64_t))sub_255DE24B8, (uint64_t)&type metadata for MedicalIDPlaceholderCell, MEMORY[0x263F19B28]);
    sub_255DE7E14(&qword_269F35FD8, (void (*)(uint64_t))sub_255DE24B8);
    sub_255DE2AF8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36008);
  }
  return result;
}

void sub_255DE7310(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_255DE737C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DE7398(uint64_t a1)
{
}

void sub_255DE73CC()
{
  if (!qword_269F36028)
  {
    sub_255DE7518(255, (unint64_t *)&qword_269F36030, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
    sub_255DE7518(255, &qword_269F36050, &qword_269F36058, (void (*)(uint64_t))sub_255DE75F8);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_269F36028);
    }
  }
}

void sub_255DE7494()
{
  if (!qword_269F36040)
  {
    sub_255DE79B0(255, &qword_269F36048, MEMORY[0x263F18968], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36040);
    }
  }
}

void sub_255DE7518(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_255DE7584(255, a3, a4, MEMORY[0x263F1A470]);
    unint64_t v5 = sub_255EF01E0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255DE7584(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255DE75F8()
{
  if (!qword_269F36060)
  {
    sub_255DE7584(255, &qword_269F36068, (void (*)(uint64_t))sub_255DE76B4, (void (*)(uint64_t))sub_255DE777C);
    sub_255DE79B0(255, &qword_269F36048, MEMORY[0x263F18968], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36060);
    }
  }
}

void sub_255DE76B4()
{
  if (!qword_269F36070)
  {
    sub_255DE7714(255);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36070);
    }
  }
}

void sub_255DE7714(uint64_t a1)
{
}

void sub_255DE7748(uint64_t a1)
{
}

void sub_255DE777C()
{
  if (!qword_269F36088)
  {
    unint64_t v0 = sub_255EEEF70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36088);
    }
  }
}

void sub_255DE77DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255DE7840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_255DE78B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_255DE7914(uint64_t a1)
{
  sub_255DE77DC(0, &qword_269F36090, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255DE79B0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255DE79FC()
{
  unint64_t result = qword_269F36098;
  if (!qword_269F36098)
  {
    sub_255DE75F8();
    sub_255DE7A74();
    sub_255DE7BB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36098);
  }
  return result;
}

unint64_t sub_255DE7A74()
{
  unint64_t result = qword_269F360A0;
  if (!qword_269F360A0)
  {
    sub_255DE7584(255, &qword_269F36068, (void (*)(uint64_t))sub_255DE76B4, (void (*)(uint64_t))sub_255DE777C);
    sub_255DE7C8C((unint64_t *)&qword_269F360A8, (void (*)(uint64_t))sub_255DE76B4, (void (*)(void))sub_255DE7B7C);
    sub_255DE7E14((unint64_t *)&qword_269F360B8, (void (*)(uint64_t))sub_255DE777C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F360A0);
  }
  return result;
}

uint64_t sub_255DE7B7C()
{
  return sub_255DE7E14(&qword_269F360B0, sub_255DE7714);
}

unint64_t sub_255DE7BB0()
{
  unint64_t result = qword_269F360C0;
  if (!qword_269F360C0)
  {
    sub_255DE79B0(255, &qword_269F36048, MEMORY[0x263F18968], MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F360C0);
  }
  return result;
}

uint64_t sub_255DE7C2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255DE7C8C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DE7D10(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255DE7584(0, a3, a4, MEMORY[0x263F1A470]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_255DE7D90()
{
  return sub_255DE7E14(&qword_269F360D0, sub_255DE7DD8);
}

void sub_255DE7DD8(uint64_t a1)
{
}

uint64_t sub_255DE7E14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DE7E5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v30 = a1;
  uint64_t v3 = (int *)type metadata accessor for MedicalIDEmergencyContactsCellView();
  uint64_t v27 = *((void *)v3 - 1);
  MEMORY[0x270FA5388](v3);
  uint64_t v28 = v4;
  uint64_t v29 = (uint64_t)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DEA1E8();
  v26[1] = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269F34B60 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_269F3FE20;
  uint64_t v9 = *(void *)algn_269F3FE28;
  uint64_t v10 = v3[6];
  uint64_t v11 = *(void *)(*(void *)(v2 + v3[5]) + 16);
  uint64_t v12 = *(void *)(v2 + v10);
  uint64_t v13 = *(void *)(v2 + v10 + 8);
  uint64_t v14 = (uint64_t *)(v2 + v3[7]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = qword_269F34B90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_269F37000;
  *(void *)uint64_t v7 = v8;
  *((void *)v7 + 1) = v9;
  v7[16] = v11 != 0;
  v7[17] = 2;
  *((void *)v7 + 3) = v15;
  *((void *)v7 + 4) = v16;
  *((void *)v7 + 5) = v12;
  *((void *)v7 + 6) = v13;
  *((void *)v7 + 7) = v18;
  v7[64] = 1;
  sub_255DE816C(v2);
  uint64_t v19 = v29;
  sub_255DEA8D0(v2, v29, (uint64_t (*)(void))type metadata accessor for MedicalIDEmergencyContactsCellView);
  unint64_t v20 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v21 = swift_allocObject();
  sub_255DEAE54(v19, v21 + v20, (uint64_t (*)(void))type metadata accessor for MedicalIDEmergencyContactsCellView);
  uint64_t v22 = v30;
  sub_255DEA8D0((uint64_t)v7, v30, (uint64_t (*)(void))sub_255DEA1E8);
  sub_255DEA5FC(0, &qword_269F36190, (uint64_t (*)(uint64_t))sub_255DEA1E8, MEMORY[0x263F1A250], MEMORY[0x263F18E28]);
  int v24 = (uint64_t (**)())(v22 + *(int *)(v23 + 36));
  *int v24 = sub_255DEA870;
  v24[1] = (uint64_t (*)())v21;
  void v24[2] = 0;
  v24[3] = 0;
  return sub_255DEA938((uint64_t)v7, (uint64_t (*)(void))sub_255DEA1E8);
}

uint64_t sub_255DE816C(uint64_t a1)
{
  sub_255DEA5FC(0, &qword_269F36198, (uint64_t (*)(uint64_t))sub_255DEA284, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, MEMORY[0x263F19B20]);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (uint64_t *)((char *)&v18 - v3);
  sub_255DEA284();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MedicalIDEmergencyContactsCellView();
  if (*(void *)(*(void *)(a1 + *(int *)(v8 + 20)) + 16))
  {
    uint64_t v9 = sub_255EEED80();
    if (qword_269F34AC8 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_269F360E8;
    *(void *)uint64_t v7 = v9;
    *((void *)v7 + 1) = v10;
    v7[16] = 0;
    sub_255DEA9E4();
    sub_255DE8470(a1, &v7[*(int *)(v11 + 44)]);
    sub_255DEA8D0((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))sub_255DEA284);
    swift_storeEnumTagMultiPayload();
    sub_255DEA7D0(&qword_269F36180, (void (*)(uint64_t))sub_255DEA284);
    sub_255DEA818();
    sub_255EEEE00();
    return sub_255DEA938((uint64_t)v7, (uint64_t (*)(void))sub_255DEA284);
  }
  else
  {
    uint64_t v13 = v8;
    if (qword_269F34AD8 != -1) {
      swift_once();
    }
    uint64_t v14 = unk_269F36100;
    uint64_t v15 = (uint64_t *)(a1 + *(int *)(v13 + 24));
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    *uint64_t v4 = qword_269F360F8;
    v4[1] = v14;
    v4[2] = v16;
    v4[3] = v17;
    swift_storeEnumTagMultiPayload();
    sub_255DEA7D0(&qword_269F36180, (void (*)(uint64_t))sub_255DEA284);
    sub_255DEA818();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_255EEEE00();
  }
}

void sub_255DE8470(uint64_t a1@<X0>, char *a2@<X8>)
{
  id v86 = a2;
  uint64_t v3 = type metadata accessor for MedicalIDEmergencyContactsCellView();
  uint64_t v73 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v74 = v4;
  uint64_t v76 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_255EEE780();
  uint64_t v82 = *(void *)(v5 - 8);
  uint64_t v83 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v79 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DEA55C();
  MEMORY[0x270FA5388](v7 - 8);
  id v71 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DEA4C4();
  uint64_t v72 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v85 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v75 = (char *)&v71 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v81 = (uint64_t)&v71 - v14;
  sub_255DEA388();
  uint64_t v84 = v15;
  uint64_t v78 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v80 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v71 - v18;
  uint64_t v20 = *(int *)(v3 + 20);
  uint64_t v87 = a1;
  uint64_t v88 = *(void *)(a1 + v20);
  swift_getKeyPath();
  sub_255DEA998(0, &qword_269F35C48, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D488]);
  type metadata accessor for ContactLabelView();
  sub_255DEA448();
  sub_255DD21C8();
  sub_255DEA7D0(&qword_269F361A8, (void (*)(uint64_t))type metadata accessor for ContactLabelView);
  swift_bridgeObjectRetain();
  uint64_t v77 = v19;
  sub_255EEFA00();
  sub_255DE8E84();
  sub_255EEED10();
  uint64_t v21 = sub_255EEF3C0();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  sub_255EEF2A0();
  uint64_t v26 = sub_255EEF3B0();
  uint64_t v28 = v27;
  char v30 = v29;
  swift_release();
  sub_255D85120(v21, v23, v25);
  swift_bridgeObjectRelease();
  LODWORD(v88) = sub_255EEEF30();
  uint64_t v31 = sub_255EEF370();
  uint64_t v33 = v32;
  char v35 = v34;
  uint64_t v37 = v36;
  sub_255D85120(v26, v28, v30 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  char v39 = sub_255EEF190();
  if (qword_269F34AD0 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v88 = v31;
  uint64_t v89 = v33;
  char v40 = v35 & 1;
  char v90 = v40;
  uint64_t v91 = v37;
  uint64_t v92 = KeyPath;
  char v93 = 0;
  char v94 = v39;
  uint64_t v95 = v41;
  uint64_t v96 = v42;
  uint64_t v97 = v43;
  uint64_t v98 = v44;
  char v99 = 0;
  sub_255DEA998(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_255EF1E20;
  uint64_t v46 = (void *)(v87 + *(int *)(v3 + 24));
  uint64_t v47 = v46[1];
  *(void *)(v45 + 32) = *v46;
  *(void *)(v45 + 40) = v47;
  *(void *)(v45 + 48) = 0x7265746F6F46;
  *(void *)(v45 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  int v48 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v49 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v49)
  {
    sub_255EEFD90();

    sub_255DEA5FC(0, &qword_269F36160, (uint64_t (*)(uint64_t))sub_255DE7494, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    sub_255DEAB24();
    uint64_t v50 = (uint64_t)v71;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v31, v33, v40);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v51 = swift_getKeyPath();
    uint64_t v52 = v76;
    sub_255DEA8D0(v87, v76, (uint64_t (*)(void))type metadata accessor for MedicalIDEmergencyContactsCellView);
    unint64_t v53 = (*(unsigned __int8 *)(v73 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    uint64_t v54 = swift_allocObject();
    sub_255DEAE54(v52, v54 + v53, (uint64_t (*)(void))type metadata accessor for MedicalIDEmergencyContactsCellView);
    uint64_t v55 = v79;
    sub_255EEE770();
    uint64_t v56 = (uint64_t)v75;
    uint64_t v57 = (uint64_t *)&v75[*(int *)(v72 + 36)];
    sub_255DEAF14(0, &qword_269F36168, MEMORY[0x263F18948], MEMORY[0x263F1A418]);
    uint64_t v60 = v82;
    uint64_t v59 = v83;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))((char *)v57 + *(int *)(v58 + 28), v55, v83);
    uint64_t *v57 = v51;
    sub_255DEA8D0(v50, v56, (uint64_t (*)(void))sub_255DEA55C);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v55, v59);
    sub_255DEA938(v50, (uint64_t (*)(void))sub_255DEA55C);
    uint64_t v61 = v81;
    sub_255DEAE54(v56, v81, (uint64_t (*)(void))sub_255DEA4C4);
    uint64_t v62 = v78;
    uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
    uint64_t v64 = v80;
    uint64_t v65 = v77;
    uint64_t v66 = v84;
    v63(v80, v77, v84);
    uint64_t v67 = v85;
    sub_255DEA8D0(v61, v85, (uint64_t (*)(void))sub_255DEA4C4);
    uint64_t v68 = v86;
    v63(v86, v64, v66);
    sub_255DEA318();
    sub_255DEA8D0(v67, (uint64_t)&v68[*(int *)(v69 + 48)], (uint64_t (*)(void))sub_255DEA4C4);
    sub_255DEA938(v61, (uint64_t (*)(void))sub_255DEA4C4);
    uint64_t v70 = *(void (**)(char *, uint64_t))(v62 + 8);
    v70(v65, v66);
    sub_255DEA938(v67, (uint64_t (*)(void))sub_255DEA4C4);
    v70(v64, v66);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255DE8DA0@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v3 = a1[5];
  long long v17 = a1[4];
  long long v18 = v3;
  long long v4 = a1[7];
  long long v19 = a1[6];
  long long v20 = v4;
  long long v5 = a1[1];
  long long v13 = *a1;
  long long v14 = v5;
  long long v6 = a1[3];
  long long v15 = a1[2];
  long long v16 = v6;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)((char *)a2 + *(int *)(type metadata accessor for ContactLabelView() + 20)) = KeyPath;
  sub_255DEAF14(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  long long v8 = v18;
  a2[4] = v17;
  a2[5] = v8;
  long long v9 = v20;
  a2[6] = v19;
  a2[7] = v9;
  long long v10 = v14;
  *a2 = v13;
  a2[1] = v10;
  long long v11 = v16;
  a2[2] = v15;
  a2[3] = v11;
  return sub_255DCB308((uint64_t)&v13);
}

id sub_255DE8E84()
{
  id result = objc_msgSend(self, sel_defaultWorkspace);
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)sub_255EEFD50();
    objc_msgSend(v1, sel_applicationIsInstalled_, v2);

    uint64_t v3 = sub_255EEFD40();
    MEMORY[0x270FA5388](v3 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    long long v4 = (void *)qword_269F352A8;
    uint64_t v5 = sub_255EEE200();
    MEMORY[0x270FA5388](v5 - 8);
    id v6 = v4;
    sub_255EEE1F0();
    return (id)sub_255EEFDA0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_255DE904C()
{
  uint64_t v0 = sub_255EEF120();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v4 = (void *)sub_255EEFD50();
  id v5 = objc_msgSend(self, sel_presenterForPrivacySplashWithIdentifier_, v4);

  sub_255DAA7A0((uint64_t)v3);
  id v7 = v5;
  sub_255EEF110();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  sub_255EEE760();
}

uint64_t sub_255DE91A4()
{
  type metadata accessor for MedicalIDEmergencyContactsCellView();
  sub_255DEA998(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  uint64_t result = sub_255EEF820();
  if (v2 == 1)
  {
    uint64_t v1 = self;
    if ((objc_msgSend(v1, sel_isAllowedToMessageSOSContacts) & 1) == 0) {
      objc_msgSend(v1, sel_setAllowedToMessageSOSContacts_, 1);
    }
    return sub_255EEF830();
  }
  return result;
}

uint64_t sub_255DE928C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = 0xD000000000000011;
  *a4 = swift_getKeyPath();
  sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  long long v9 = (int *)type metadata accessor for MedicalIDEmergencyContactsCellView();
  *(uint64_t *)((char *)a4 + v9[5]) = a1;
  sub_255DEA998(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_255EF1E20;
  *(void *)(v10 + 32) = 0x496C61636964654DLL;
  *(void *)(v10 + 40) = 0xE900000000000044;
  unint64_t v11 = 0x8000000255EF9180;
  *(void *)(v10 + 48) = 0xD000000000000011;
  *(void *)(v10 + 56) = 0x8000000255EF9180;
  uint64_t v12 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v13 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v13)
  {
    uint64_t v8 = sub_255EEFD90();
    unint64_t v11 = v14;
  }
  long long v15 = (uint64_t *)((char *)a4 + v9[6]);
  *long long v15 = v8;
  v15[1] = v11;
  long long v16 = (uint64_t *)((char *)a4 + v9[7]);
  void *v16 = a2;
  v16[1] = a3;
  long long v17 = (char *)a4 + v9[8];
  uint64_t result = sub_255EEF810();
  *long long v17 = v19;
  *((void *)v17 + 1) = v20;
  return result;
}

void sub_255DE9468()
{
  qword_269F360E8 = 0x4030000000000000;
}

void sub_255DE9478()
{
  qword_269F360F0 = 0x4000000000000000;
}

uint64_t sub_255DE9488()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  qword_269F360F8 = result;
  unk_269F36100 = v5;
  return result;
}

uint64_t sub_255DE95D8()
{
  return sub_255EEEB00();
}

uint64_t type metadata accessor for MedicalIDEmergencyContactsCellView()
{
  uint64_t result = qword_269F36110;
  if (!qword_269F36110) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_255DE9648(uint64_t *a1, uint64_t *a2, int *a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    long long v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_255EEF120();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *long long v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v10 = (uint64_t *)((char *)v4 + v9);
    unint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    long long v15 = (uint64_t *)((char *)v4 + v13);
    long long v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *long long v15 = *v16;
    v15[1] = v17;
    long long v18 = (char *)v4 + v14;
    char v19 = (char *)a2 + v14;
    *long long v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_255DE97E4(uint64_t a1)
{
  sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_255EEF120();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *sub_255DE98E0(void *a1, void *a2, int *a3)
{
  sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_255EEF120();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  long long v16 = (char *)a1 + v12;
  uint64_t v17 = (char *)a2 + v12;
  char *v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_255DE9A30(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_255DE9BC4((uint64_t)a1);
    sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_255EEF120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  long long v16 = (char *)a2 + v14;
  *uint64_t v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255DE9BC4(uint64_t a1)
{
  sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_255DE9C50(char *a1, char *a2, int *a3)
{
  sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_255EEF120();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  return a1;
}

char *sub_255DE9D6C(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_255DE9BC4((uint64_t)a1);
    sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_255EEF120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  swift_release();
  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  long long v16 = &a2[v14];
  *uint64_t v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_release();
  return a1;
}

uint64_t sub_255DE9EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DE9EF0);
}

uint64_t sub_255DE9EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255DEAF14(0, &qword_269F36108, MEMORY[0x263F1A510], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255DE9FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DE9FF4);
}

void sub_255DE9FF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_255DEAF14(0, &qword_269F36108, MEMORY[0x263F1A510], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

void sub_255DEA0E0()
{
  sub_255DEAF14(319, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255DEA1CC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DEA1E8()
{
  if (!qword_269F36120)
  {
    sub_255DEA5FC(255, &qword_269F36128, (uint64_t (*)(uint64_t))sub_255DEA284, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, MEMORY[0x263F19B28]);
    sub_255DEA6F0();
    unint64_t v0 = type metadata accessor for MedicalIDCellView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36120);
    }
  }
}

void sub_255DEA284()
{
  if (!qword_269F36130)
  {
    sub_255DEAF14(255, &qword_269F36138, (uint64_t (*)(uint64_t))sub_255DEA318, MEMORY[0x263F1BAC8]);
    sub_255DEA668();
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36130);
    }
  }
}

void sub_255DEA318()
{
  if (!qword_269F36140)
  {
    sub_255DEA388();
    sub_255DEA4C4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F36140);
    }
  }
}

void sub_255DEA388()
{
  if (!qword_269F36148)
  {
    sub_255DEA998(255, &qword_269F35C48, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D488]);
    type metadata accessor for ContactLabelView();
    sub_255DEA448();
    sub_255DD21C8();
    unint64_t v0 = sub_255EEFA20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36148);
    }
  }
}

unint64_t sub_255DEA448()
{
  unint64_t result = qword_269F35C88;
  if (!qword_269F35C88)
  {
    sub_255DEA998(255, &qword_269F35C48, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35C88);
  }
  return result;
}

void sub_255DEA4C4()
{
  if (!qword_269F36150)
  {
    sub_255DEA55C();
    sub_255DEAF14(255, &qword_269F36168, MEMORY[0x263F18948], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36150);
    }
  }
}

void sub_255DEA55C()
{
  if (!qword_269F36158)
  {
    sub_255DEA5FC(255, &qword_269F36160, (uint64_t (*)(uint64_t))sub_255DE7494, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36158);
    }
  }
}

void sub_255DEA5FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_255DEA668()
{
  unint64_t result = qword_269F36170;
  if (!qword_269F36170)
  {
    sub_255DEAF14(255, &qword_269F36138, (uint64_t (*)(uint64_t))sub_255DEA318, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36170);
  }
  return result;
}

unint64_t sub_255DEA6F0()
{
  unint64_t result = qword_269F36178;
  if (!qword_269F36178)
  {
    sub_255DEA5FC(255, &qword_269F36128, (uint64_t (*)(uint64_t))sub_255DEA284, (uint64_t)&type metadata for MedicalIDCellPlaceholderText, MEMORY[0x263F19B28]);
    sub_255DEA7D0(&qword_269F36180, (void (*)(uint64_t))sub_255DEA284);
    sub_255DEA818();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36178);
  }
  return result;
}

uint64_t sub_255DEA7D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255DEA818()
{
  unint64_t result = qword_269F36188;
  if (!qword_269F36188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36188);
  }
  return result;
}

uint64_t sub_255DEA870()
{
  type metadata accessor for MedicalIDEmergencyContactsCellView();
  return sub_255DE91A4();
}

uint64_t sub_255DEA8D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DEA938(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255DEA998(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255DEA9E4()
{
  if (!qword_269F361A0)
  {
    sub_255DEAF14(255, &qword_269F36138, (uint64_t (*)(uint64_t))sub_255DEA318, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F361A0);
    }
  }
}

uint64_t sub_255DEAA7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_255EEEAE0();
  *a1 = result;
  return result;
}

uint64_t sub_255DEAAA8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_255EEEAE0();
  *a1 = result;
  return result;
}

uint64_t sub_255DEAAD4()
{
  return sub_255EEEAF0();
}

uint64_t sub_255DEAAFC()
{
  return sub_255EEEAF0();
}

unint64_t sub_255DEAB24()
{
  unint64_t result = qword_269F361B0;
  if (!qword_269F361B0)
  {
    sub_255DEA5FC(255, &qword_269F36160, (uint64_t (*)(uint64_t))sub_255DE7494, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    sub_255DEABD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F361B0);
  }
  return result;
}

unint64_t sub_255DEABD4()
{
  unint64_t result = qword_269F360C8;
  if (!qword_269F360C8)
  {
    sub_255DE7494();
    sub_255DE7BB0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F360C8);
  }
  return result;
}

uint64_t objectdestroyTm_5()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDEmergencyContactsCellView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_255DEAF14(0, &qword_269F35678, MEMORY[0x263F1A510], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = sub_255EEF120();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_255DEADD4()
{
  type metadata accessor for MedicalIDEmergencyContactsCellView();
  sub_255DE904C();
}

uint64_t sub_255DEAE54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_255DEAEBC(uint64_t a1)
{
  unint64_t v2 = *(void **)(v1 + 16);
  objc_msgSend(v2, sel_setPresentingViewController_, a1);
  return objc_msgSend(v2, sel_present);
}

void sub_255DEAF14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_255DEAF7C()
{
  unint64_t result = qword_269F361B8;
  if (!qword_269F361B8)
  {
    sub_255DEA5FC(255, &qword_269F36190, (uint64_t (*)(uint64_t))sub_255DEA1E8, MEMORY[0x263F1A250], MEMORY[0x263F18E28]);
    sub_255DEA7D0(&qword_269F361C0, (void (*)(uint64_t))sub_255DEA1E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F361B8);
  }
  return result;
}

uint64_t sub_255DEB05C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      uint64_t v3 = (_OWORD *)(a1 + 32);
      long long v4 = (_OWORD *)(a2 + 32);
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        long long v7 = v3[5];
        v18[4] = v3[4];
        v18[5] = v7;
        long long v8 = v3[7];
        v18[6] = v3[6];
        v18[7] = v8;
        long long v9 = v3[1];
        v18[0] = *v3;
        v18[1] = v9;
        long long v10 = v3[3];
        v18[2] = v3[2];
        v18[3] = v10;
        long long v11 = v4[5];
        v17[4] = v4[4];
        v17[5] = v11;
        long long v12 = v4[7];
        v17[6] = v4[6];
        v17[7] = v12;
        long long v13 = v4[1];
        v17[0] = *v4;
        v17[1] = v13;
        long long v14 = v4[3];
        void v17[2] = v4[2];
        void v17[3] = v14;
        char v15 = _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(v18, v17);
        if ((v15 & 1) == 0) {
          break;
        }
        uint64_t v5 = v6 - 1;
        v4 += 8;
        v3 += 8;
      }
      while (v6);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_255DEB128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BasicAlertModel.Action() - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  long long v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_255D87960(a1 + v12, (uint64_t)v10);
        sub_255D87960(a2 + v12, (uint64_t)v7);
        char v15 = _s11MedicalIDUI15BasicAlertModelV6ActionV2eeoiySbAE_AEtFZ_0((uint64_t)v10, (uint64_t)v7);
        sub_255DF00A8((uint64_t)v7);
        sub_255DF00A8((uint64_t)v10);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t MedicalIDData.displayName.getter()
{
  unint64_t v1 = v0[1];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *v0;
  uint64_t v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v3 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MedicalIDData.init(name:emergencyContacts:medicalConditions:allergyInfo:medicalNotes:medicationInfo:bloodType:height:weight:pregnancyStartDate:pregnancyEstimatedDueDate:primaryLanguageCode:pregnancyStartDateTimeZoneID:isDisabled:shareDuringEmergency:pictureData:gregorianBirthday:isOrganDonor:dateSaved:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v27 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v28 = a9 + v27[13];
  uint64_t v29 = sub_255EEE100();
  char v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);
  v30(v28, 1, 1, v29);
  uint64_t v31 = a9 + v27[14];
  v30(v31, 1, 1, v29);
  uint64_t v32 = (void *)(a9 + v27[15]);
  void *v32 = 0;
  v32[1] = 0;
  uint64_t v33 = (void *)(a9 + v27[16]);
  *uint64_t v33 = 0;
  v33[1] = 0;
  uint64_t v34 = a9 + v27[19];
  *(_OWORD *)uint64_t v34 = xmmword_255EF2620;
  uint64_t v35 = a9 + v27[20];
  uint64_t v41 = v35;
  uint64_t v36 = sub_255EEDF60();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = v27[21];
  *(void *)(a9 + v37) = 0;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(void *)(a9 + 96) = a12;
  *(void *)(a9 + 104) = a13;
  uint64_t v38 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
  sub_255DEB608(a14, v28, &qword_269F35058, MEMORY[0x270FA92C8]);
  sub_255DEB608(a15, v31, &qword_269F35058, v38);
  swift_bridgeObjectRelease();
  void *v32 = a16;
  v32[1] = a17;
  swift_bridgeObjectRelease();
  *uint64_t v33 = a18;
  v33[1] = a19;
  *(unsigned char *)(a9 + v27[17]) = a20;
  *(unsigned char *)(a9 + v27[18]) = a21;
  sub_255DAD684(*(void *)v34, *(void *)(v34 + 8));
  *(void *)uint64_t v34 = a22;
  *(void *)(v34 + 8) = a23;
  sub_255DEB608(a24, v41, &qword_269F350B8, MEMORY[0x270FA8138]);

  *(void *)(a9 + v37) = a25;
  uint64_t v39 = a9 + v27[22];
  return sub_255D8BB10(a26, v39);
}

uint64_t type metadata accessor for MedicalIDData()
{
  uint64_t result = qword_269F361C8;
  if (!qword_269F361C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DEB608(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255DB0D78(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t MedicalIDData.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MedicalIDData.name.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.emergencyContacts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicalIDData.emergencyContacts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MedicalIDData.emergencyContacts.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.medicalConditions.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.medicalConditions.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*MedicalIDData.medicalConditions.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.allergyInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.allergyInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*MedicalIDData.allergyInfo.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.medicalNotes.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.medicalNotes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*MedicalIDData.medicalNotes.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.medicationInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.medicationInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t (*MedicalIDData.medicationInfo.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.bloodType.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t MedicalIDData.bloodType.setter(uint64_t result)
{
  *(void *)(v1 + 88) = result;
  return result;
}

uint64_t (*MedicalIDData.bloodType.modify())()
{
  return nullsub_1;
}

void *MedicalIDData.height.getter()
{
  uint64_t v1 = *(void **)(v0 + 96);
  id v2 = v1;
  return v1;
}

void MedicalIDData.height.setter(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
}

uint64_t (*MedicalIDData.height.modify())()
{
  return nullsub_1;
}

void *MedicalIDData.weight.getter()
{
  uint64_t v1 = *(void **)(v0 + 104);
  id v2 = v1;
  return v1;
}

void MedicalIDData.weight.setter(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
}

uint64_t (*MedicalIDData.weight.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDData.pregnancyStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEC02C(v1 + *(int *)(v3 + 52), a1, &qword_269F35058, MEMORY[0x270FA92C8]);
}

uint64_t MedicalIDData.pregnancyStartDate.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEB608(a1, v1 + *(int *)(v3 + 52), &qword_269F35058, MEMORY[0x270FA92C8]);
}

uint64_t (*MedicalIDData.pregnancyStartDate.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.pregnancyEstimatedDueDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEC02C(v1 + *(int *)(v3 + 56), a1, &qword_269F35058, MEMORY[0x270FA92C8]);
}

uint64_t MedicalIDData.pregnancyEstimatedDueDate.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEB608(a1, v1 + *(int *)(v3 + 56), &qword_269F35058, MEMORY[0x270FA92C8]);
}

uint64_t (*MedicalIDData.pregnancyEstimatedDueDate.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.primaryLanguageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.primaryLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for MedicalIDData() + 60));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MedicalIDData.primaryLanguageCode.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.pregnancyStartDateTimeZoneID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDData.pregnancyStartDateTimeZoneID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for MedicalIDData() + 64));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*MedicalIDData.pregnancyStartDateTimeZoneID.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.isDisabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 68));
}

uint64_t MedicalIDData.isDisabled.setter(char a1)
{
  uint64_t result = type metadata accessor for MedicalIDData();
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*MedicalIDData.isDisabled.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.shareDuringEmergency.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 72));
}

uint64_t MedicalIDData.shareDuringEmergency.setter(char a1)
{
  uint64_t result = type metadata accessor for MedicalIDData();
  *(unsigned char *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*MedicalIDData.shareDuringEmergency.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.pictureData.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for MedicalIDData() + 76);
  uint64_t v2 = *(void *)v1;
  sub_255DAD700(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t MedicalIDData.pictureData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for MedicalIDData() + 76);
  uint64_t result = sub_255DAD684(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*MedicalIDData.pictureData.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.gregorianBirthday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEC02C(v1 + *(int *)(v3 + 80), a1, &qword_269F350B8, MEMORY[0x270FA8138]);
}

uint64_t sub_255DEC02C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255DB0D78(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t MedicalIDData.gregorianBirthday.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEB608(a1, v1 + *(int *)(v3 + 80), &qword_269F350B8, MEMORY[0x270FA8138]);
}

uint64_t (*MedicalIDData.gregorianBirthday.modify())(void)
{
  return nullsub_1;
}

void *MedicalIDData.isOrganDonor.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MedicalIDData() + 84));
  id v2 = v1;
  return v1;
}

void MedicalIDData.isOrganDonor.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for MedicalIDData() + 84);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*MedicalIDData.isOrganDonor.modify())(void)
{
  return nullsub_1;
}

uint64_t MedicalIDData.dateSaved.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDData();
  return sub_255DEC02C(v1 + *(int *)(v3 + 88), a1, &qword_269F35058, MEMORY[0x270FA92C8]);
}

BOOL MedicalIDData.hasEmergencyContacts.getter()
{
  return *(void *)(*(void *)(v0 + 16) + 16) != 0;
}

uint64_t sub_255DEC248@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_255D80890(a2, a3);
      long long v10 = (char *)sub_255EEDE60();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_255EEDE80();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_255EEDE70();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x255DEC4ACLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_255D80D04(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      BOOL v17 = (char *)sub_255EEDE60();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_255EEDE80();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_255EEDE70();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_255DEC4BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_255DEC248((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_255DEC594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_255EEDE60();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_255EEDE80();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_255EEDE70();
  sub_255DEC248(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_255DEC64C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x255DEC8B4);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_255D80890(a3, a4);
                  sub_255D80890(a1, a2);
                  char v17 = sub_255DEC594((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_255D80D04(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_255D80890(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_255DEC594(v21, v22, v20, a3, a4);
                  sub_255D80D04(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_255D80890(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_255D80890(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_255DEC4BC(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_255D80D04(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

BOOL _s11MedicalIDUI0A6IDDataV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a1 == *a2 && v4 == v5;
  if (v6 || (char v7 = sub_255EF04A0(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    if (sub_255DEB05C(a1[2], a2[2]))
    {
      uint64_t v9 = a1[4];
      uint64_t v10 = a2[4];
      if (v9)
      {
        if (!v10) {
          return 0;
        }
        if (a1[3] != a2[3] || v9 != v10)
        {
          char v11 = sub_255EF04A0();
          BOOL result = 0;
          if ((v11 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v10)
      {
        return 0;
      }
      uint64_t v12 = a1[6];
      uint64_t v13 = a2[6];
      if (v12)
      {
        if (!v13) {
          return 0;
        }
        if (a1[5] != a2[5] || v12 != v13)
        {
          char v14 = sub_255EF04A0();
          BOOL result = 0;
          if ((v14 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v13)
      {
        return 0;
      }
      uint64_t v15 = a1[8];
      uint64_t v16 = a2[8];
      if (v15)
      {
        if (!v16) {
          return 0;
        }
        if (a1[7] != a2[7] || v15 != v16)
        {
          char v17 = sub_255EF04A0();
          BOOL result = 0;
          if ((v17 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v16)
      {
        return 0;
      }
      uint64_t v18 = a1[10];
      uint64_t v19 = a2[10];
      if (v18)
      {
        if (!v19) {
          return 0;
        }
        if (a1[9] != a2[9] || v18 != v19)
        {
          char v20 = sub_255EF04A0();
          BOOL result = 0;
          if ((v20 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v19)
      {
        return 0;
      }
      if (a1[11] == a2[11])
      {
        uint64_t v21 = (void *)a1[12];
        uint64_t v22 = (void *)a2[12];
        if (v21)
        {
          if (!v22) {
            return 0;
          }
          sub_255D7ED10(0, &qword_269F361F8);
          id v23 = v22;
          id v24 = v21;
          char v25 = sub_255EF01D0();

          if ((v25 & 1) == 0) {
            return 0;
          }
        }
        else if (v22)
        {
          return 0;
        }
        __int16 v26 = (void *)a1[13];
        char v27 = (void *)a2[13];
        if (v26)
        {
          if (!v27) {
            return 0;
          }
          sub_255D7ED10(0, &qword_269F361F8);
          id v28 = v27;
          id v29 = v26;
          char v30 = sub_255EF01D0();

          if ((v30 & 1) == 0) {
            return 0;
          }
        }
        else if (v27)
        {
          return 0;
        }
        uint64_t v31 = type metadata accessor for MedicalIDData();
        uint64_t v32 = (uint64_t)a1 + *(int *)(v31 + 52);
        uint64_t v33 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
        sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
        uint64_t v173 = &v159;
        uint64_t v35 = *(void *)(*(void *)(v34 - 8) + 64);
        MEMORY[0x270FA5388](v34 - 8);
        uint64_t v36 = (char *)&v159 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_255DEC02C(v32, (uint64_t)v36, &qword_269F35058, v33);
        uint64_t v172 = &v159;
        uint64_t v170 = (int *)v31;
        uint64_t v37 = MEMORY[0x270FA5388]((char *)a2 + *(int *)(v31 + 52));
        unint64_t v168 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
        sub_255DEC02C(v37, (uint64_t)v36, &qword_269F35058, v33);
        sub_255DEFF44(0, &qword_269F361D8, &qword_269F35058, v33);
        uint64_t v171 = &v159;
        uint64_t v166 = *(void *)(*(void *)(v38 - 8) + 64);
        uint64_t v39 = MEMORY[0x270FA5388](v38);
        uint64_t v41 = (char *)&v159 - v40;
        uint64_t v167 = v39;
        uint64_t v42 = (char *)&v159 + *(int *)(v39 + 48) - v40;
        sub_255DEC02C((uint64_t)v36, (uint64_t)&v159 - v40, &qword_269F35058, v33);
        uint64_t v174 = (uint64_t *)v42;
        sub_255DEC02C((uint64_t)v36, (uint64_t)v42, &qword_269F35058, v33);
        uint64_t v43 = sub_255EEE100();
        uint64_t v44 = *(void *)(v43 - 8);
        unint64_t v46 = v44 + 48;
        uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
        uint64_t v47 = v45(v41, 1, v43);
        uint64_t v169 = v35;
        if (v47 == 1)
        {
          uint64_t v161 = v44;
          int v48 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
          sub_255DEFFA8((uint64_t)v36, &qword_269F35058, MEMORY[0x270FA92C8]);
          sub_255DEFFA8((uint64_t)v36, &qword_269F35058, v48);
          if (v45((char *)v174, 1, v43) == 1)
          {
            uint64_t v160 = v43;
            uint64_t v165 = v45;
            unint64_t v168 = v46;
            sub_255DEFFA8((uint64_t)v41, &qword_269F35058, MEMORY[0x270FA92C8]);
            goto LABEL_57;
          }
LABEL_55:
          unint64_t v53 = &qword_269F361D8;
          uint64_t v54 = &qword_269F35058;
          uint64_t v55 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
          uint64_t v56 = (uint64_t)v41;
          goto LABEL_63;
        }
        uint64_t v163 = (uint64_t *)((char *)&v159 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v164 = v163;
        unint64_t v162 = (unint64_t)&v159;
        MEMORY[0x270FA5388](v47);
        id v49 = (char *)&v159 - v168;
        sub_255DEC02C((uint64_t)v41, (uint64_t)&v159 - v168, &qword_269F35058, MEMORY[0x270FA92C8]);
        uint64_t v50 = v174;
        unint64_t v168 = v44 + 48;
        uint64_t v165 = v45;
        uint64_t v51 = v45((char *)v174, 1, v43);
        if (v51 == 1)
        {
          uint64_t v52 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
          sub_255DEFFA8((uint64_t)v163, &qword_269F35058, MEMORY[0x270FA92C8]);
          sub_255DEFFA8((uint64_t)v164, &qword_269F35058, v52);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v43);
          goto LABEL_55;
        }
        uint64_t v159 = (uint64_t)&v159;
        MEMORY[0x270FA5388](v51);
        uint64_t v58 = (char *)&v159 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t *, uint64_t))(v44 + 32))(v58, v50, v43);
        uint64_t v59 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
        sub_255DF0060(&qword_269F361E8, MEMORY[0x270FA92C8]);
        LODWORD(v174) = sub_255EEFCC0();
        uint64_t v160 = v43;
        uint64_t v161 = v44;
        uint64_t v60 = *(void (**)(char *, uint64_t))(v44 + 8);
        v60(v58, v43);
        sub_255DEFFA8((uint64_t)v163, &qword_269F35058, v59);
        sub_255DEFFA8((uint64_t)v164, &qword_269F35058, v59);
        v60(v49, v43);
        sub_255DEFFA8((uint64_t)v41, &qword_269F35058, v59);
        if (v174)
        {
LABEL_57:
          uint64_t v174 = &v159;
          uint64_t v61 = v169;
          uint64_t v62 = v170;
          uint64_t v63 = MEMORY[0x270FA5388]((char *)a1 + v170[14]);
          unint64_t v64 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v65 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
          sub_255DEC02C(v63, (uint64_t)&v159 - v64, &qword_269F35058, MEMORY[0x270FA92C8]);
          uint64_t v173 = &v159;
          uint64_t v66 = MEMORY[0x270FA5388]((char *)a2 + v62[14]);
          uint64_t v67 = (char *)&v159 - v64;
          uint64_t v68 = sub_255DEC02C(v66, (uint64_t)&v159 - v64, &qword_269F35058, v65);
          uint64_t v172 = &v159;
          MEMORY[0x270FA5388](v68);
          uint64_t v70 = (char *)&v159 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v71 = (uint64_t)&v70[*(int *)(v167 + 48)];
          uint64_t v171 = (uint64_t *)((char *)&v159 - v64);
          sub_255DEC02C((uint64_t)&v159 - v64, (uint64_t)v70, &qword_269F35058, v65);
          sub_255DEC02C((uint64_t)&v159 - v64, v71, &qword_269F35058, v65);
          uint64_t v72 = v160;
          uint64_t v73 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v165;
          uint64_t v74 = v165(v70, 1, v160);
          if (v74 == 1)
          {
            uint64_t v75 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
            sub_255DEFFA8((uint64_t)v67, &qword_269F35058, MEMORY[0x270FA92C8]);
            sub_255DEFFA8((uint64_t)v171, &qword_269F35058, v75);
            uint64_t v76 = v71;
            uint64_t v77 = v72;
            if (v73(v76, 1, v72) == 1)
            {
              sub_255DEFFA8((uint64_t)v70, &qword_269F35058, MEMORY[0x270FA92C8]);
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v164 = &v159;
            MEMORY[0x270FA5388](v74);
            uint64_t v78 = (char *)&v159 - v64;
            sub_255DEC02C((uint64_t)v70, (uint64_t)v78, &qword_269F35058, MEMORY[0x270FA92C8]);
            uint64_t v79 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v73)(v71, 1, v72);
            if (v79 != 1)
            {
              uint64_t v163 = &v159;
              uint64_t v81 = v161;
              MEMORY[0x270FA5388](v79);
              uint64_t v83 = (char *)&v159 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v83, v71, v72);
              uint64_t v84 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
              sub_255DF0060(&qword_269F361E8, MEMORY[0x270FA92C8]);
              LODWORD(v162) = sub_255EEFCC0();
              uint64_t v85 = *(void (**)(char *, uint64_t))(v81 + 8);
              v85(v83, v72);
              sub_255DEFFA8((uint64_t)v67, &qword_269F35058, v84);
              id v86 = v84;
              sub_255DEFFA8((uint64_t)v171, &qword_269F35058, v84);
              uint64_t v77 = v72;
              v85(v78, v72);
              sub_255DEFFA8((uint64_t)v70, &qword_269F35058, v86);
              if ((v162 & 1) == 0) {
                return 0;
              }
LABEL_67:
              uint64_t v87 = v170[15];
              uint64_t v88 = (void *)((char *)a1 + v87);
              uint64_t v89 = *(void *)((char *)a1 + v87 + 8);
              char v90 = (void *)((char *)a2 + v87);
              uint64_t v91 = v90[1];
              if (v89)
              {
                if (!v91) {
                  return 0;
                }
                if (*v88 != *v90 || v89 != v91)
                {
                  char v92 = sub_255EF04A0();
                  BOOL result = 0;
                  if ((v92 & 1) == 0) {
                    return result;
                  }
                }
              }
              else if (v91)
              {
                return 0;
              }
              uint64_t v93 = v170[16];
              char v94 = (void *)((char *)a1 + v93);
              uint64_t v95 = *(void *)((char *)a1 + v93 + 8);
              uint64_t v96 = (void *)((char *)a2 + v93);
              uint64_t v97 = v96[1];
              if (v95)
              {
                if (!v97) {
                  return 0;
                }
                if (*v94 != *v96 || v95 != v97)
                {
                  char v98 = sub_255EF04A0();
                  BOOL result = 0;
                  if ((v98 & 1) == 0) {
                    return result;
                  }
                }
              }
              else if (v97)
              {
                return 0;
              }
              if (*((unsigned __int8 *)a1 + v170[17]) != *((unsigned __int8 *)a2 + v170[17])
                || *((unsigned __int8 *)a1 + v170[18]) != *((unsigned __int8 *)a2 + v170[18]))
              {
                return 0;
              }
              uint64_t v99 = v170[19];
              uint64_t v100 = *(void *)((char *)a1 + v99);
              unint64_t v101 = *(void *)((char *)a1 + v99 + 8);
              char v102 = (void *)((char *)a2 + v99);
              uint64_t v103 = *v102;
              unint64_t v104 = v102[1];
              if (v101 >> 60 == 15)
              {
                if (v104 >> 60 == 15)
                {
LABEL_89:
                  char v106 = v170;
                  uint64_t v107 = (uint64_t)a1 + v170[20];
                  uint64_t v108 = (void (*)(uint64_t))MEMORY[0x270FA8138];
                  sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
                  uint64_t v173 = &v159;
                  uint64_t v110 = *(void *)(*(void *)(v109 - 8) + 64);
                  MEMORY[0x270FA5388](v109 - 8);
                  id v111 = (char *)&v159 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
                  sub_255DEC02C(v107, (uint64_t)v111, &qword_269F350B8, v108);
                  uint64_t v172 = &v159;
                  uint64_t v112 = MEMORY[0x270FA5388]((char *)a2 + v106[20]);
                  unint64_t v162 = (v110 + 15) & 0xFFFFFFFFFFFFFFF0;
                  sub_255DEC02C(v112, (uint64_t)v111, &qword_269F350B8, v108);
                  sub_255DEFF44(0, &qword_269F361E0, &qword_269F350B8, v108);
                  uint64_t v171 = &v159;
                  uint64_t v114 = MEMORY[0x270FA5388](v113 - 8);
                  uint64_t v116 = (char *)&v159 - v115;
                  Swift::String_optional v117 = (char *)&v159 + *(int *)(v114 + 56) - v115;
                  uint64_t v164 = (uint64_t *)v111;
                  sub_255DEC02C((uint64_t)v111, (uint64_t)&v159 - v115, &qword_269F350B8, v108);
                  uint64_t v163 = (uint64_t *)v111;
                  uint64_t v174 = (uint64_t *)v117;
                  sub_255DEC02C((uint64_t)v111, (uint64_t)v117, &qword_269F350B8, v108);
                  uint64_t v118 = sub_255EEDF60();
                  uint64_t v119 = *(void *)(v118 - 8);
                  uint64_t v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
                  uint64_t v121 = v120(v116, 1, v118);
                  if (v121 == 1)
                  {
                    char v122 = (void (*)(uint64_t))MEMORY[0x270FA8138];
                    sub_255DEFFA8((uint64_t)v163, &qword_269F350B8, MEMORY[0x270FA8138]);
                    sub_255DEFFA8((uint64_t)v164, &qword_269F350B8, v122);
                    if (v120((char *)v174, 1, v118) == 1)
                    {
                      sub_255DEFFA8((uint64_t)v116, &qword_269F350B8, MEMORY[0x270FA8138]);
LABEL_96:
                      uint64_t v130 = v170[21];
                      char v131 = *(void **)((char *)a1 + v130);
                      uint64_t v132 = *(void **)((char *)a2 + v130);
                      if (v131)
                      {
                        if (!v132) {
                          return 0;
                        }
                        sub_255D7ED10(0, (unint64_t *)&qword_269F35070);
                        id v133 = v132;
                        id v134 = v131;
                        char v135 = sub_255EF01D0();

                        if ((v135 & 1) == 0) {
                          return 0;
                        }
                      }
                      else if (v132)
                      {
                        return 0;
                      }
                      uint64_t v174 = &v159;
                      uint64_t v136 = v169;
                      uint64_t v137 = v170;
                      uint64_t v138 = MEMORY[0x270FA5388]((char *)a1 + v170[22]);
                      unint64_t v139 = (v136 + 15) & 0xFFFFFFFFFFFFFFF0;
                      uint64_t v140 = (char *)&v159 - v139;
                      uint64_t v141 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
                      sub_255DEC02C(v138, (uint64_t)&v159 - v139, &qword_269F35058, MEMORY[0x270FA92C8]);
                      uint64_t v173 = &v159;
                      uint64_t v142 = MEMORY[0x270FA5388]((char *)a2 + v137[22]);
                      uint64_t v143 = (char *)&v159 - v139;
                      uint64_t v144 = sub_255DEC02C(v142, (uint64_t)&v159 - v139, &qword_269F35058, v141);
                      uint64_t v172 = &v159;
                      MEMORY[0x270FA5388](v144);
                      char v146 = (char *)&v159 - ((v145 + 15) & 0xFFFFFFFFFFFFFFF0);
                      uint64_t v147 = (uint64_t)&v146[*(int *)(v167 + 48)];
                      sub_255DEC02C((uint64_t)&v159 - v139, (uint64_t)v146, &qword_269F35058, v141);
                      sub_255DEC02C((uint64_t)&v159 - v139, v147, &qword_269F35058, v141);
                      uint64_t v148 = v165(v146, 1, v77);
                      if (v148 == 1)
                      {
                        uint64_t v149 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
                        sub_255DEFFA8((uint64_t)&v159 - v139, &qword_269F35058, MEMORY[0x270FA92C8]);
                        sub_255DEFFA8((uint64_t)&v159 - v139, &qword_269F35058, v149);
                        if (v165((char *)v147, 1, v77) == 1)
                        {
                          sub_255DEFFA8((uint64_t)v146, &qword_269F35058, MEMORY[0x270FA92C8]);
                          return 1;
                        }
                      }
                      else
                      {
                        uint64_t v171 = &v159;
                        MEMORY[0x270FA5388](v148);
                        uint64_t v150 = (char *)&v159 - v139;
                        sub_255DEC02C((uint64_t)v146, (uint64_t)&v159 - v139, &qword_269F35058, MEMORY[0x270FA92C8]);
                        uint64_t v151 = v165((char *)v147, 1, v77);
                        if (v151 != 1)
                        {
                          uint64_t v170 = (int *)&v159;
                          uint64_t v153 = v161;
                          MEMORY[0x270FA5388](v151);
                          uint64_t v155 = (char *)&v159 - ((v154 + 15) & 0xFFFFFFFFFFFFFFF0);
                          (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v155, v147, v77);
                          uint64_t v156 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
                          sub_255DF0060(&qword_269F361E8, MEMORY[0x270FA92C8]);
                          char v157 = sub_255EEFCC0();
                          char v158 = *(void (**)(char *, uint64_t))(v153 + 8);
                          v158(v155, v77);
                          sub_255DEFFA8((uint64_t)v143, &qword_269F35058, v156);
                          sub_255DEFFA8((uint64_t)v140, &qword_269F35058, v156);
                          v158(v150, v77);
                          sub_255DEFFA8((uint64_t)v146, &qword_269F35058, v156);
                          return (v157 & 1) != 0;
                        }
                        uint64_t v152 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
                        sub_255DEFFA8((uint64_t)&v159 - v139, &qword_269F35058, MEMORY[0x270FA92C8]);
                        sub_255DEFFA8((uint64_t)&v159 - v139, &qword_269F35058, v152);
                        (*(void (**)(char *, uint64_t))(v161 + 8))((char *)&v159 - v139, v77);
                      }
                      unint64_t v53 = &qword_269F361D8;
                      uint64_t v54 = &qword_269F35058;
                      uint64_t v55 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
                      uint64_t v56 = (uint64_t)v146;
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    uint64_t v159 = (uint64_t)&v159;
                    MEMORY[0x270FA5388](v121);
                    uint64_t v123 = (char *)&v159 - v162;
                    sub_255DEC02C((uint64_t)v116, (uint64_t)&v159 - v162, &qword_269F350B8, MEMORY[0x270FA8138]);
                    uint64_t v124 = v120((char *)v174, 1, v118);
                    if (v124 != 1)
                    {
                      unint64_t v162 = (unint64_t)&v159;
                      MEMORY[0x270FA5388](v124);
                      char v127 = (char *)&v159 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
                      (*(void (**)(char *, uint64_t *, uint64_t))(v119 + 32))(v127, v174, v118);
                      uint64_t v128 = (void (*)(uint64_t))MEMORY[0x270FA8138];
                      sub_255DF0060(&qword_269F361F0, MEMORY[0x270FA8138]);
                      LODWORD(v174) = sub_255EEFCC0();
                      uint64_t v129 = *(void (**)(char *, uint64_t))(v119 + 8);
                      v129(v127, v118);
                      sub_255DEFFA8((uint64_t)v163, &qword_269F350B8, v128);
                      sub_255DEFFA8((uint64_t)v164, &qword_269F350B8, v128);
                      v129(v123, v118);
                      sub_255DEFFA8((uint64_t)v116, &qword_269F350B8, v128);
                      if ((v174 & 1) == 0) {
                        return 0;
                      }
                      goto LABEL_96;
                    }
                    uint64_t v125 = (void (*)(uint64_t))MEMORY[0x270FA8138];
                    sub_255DEFFA8((uint64_t)v163, &qword_269F350B8, MEMORY[0x270FA8138]);
                    sub_255DEFFA8((uint64_t)v164, &qword_269F350B8, v125);
                    (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
                  }
                  unint64_t v53 = &qword_269F361E0;
                  uint64_t v54 = &qword_269F350B8;
                  uint64_t v55 = (void (*)(uint64_t))MEMORY[0x270FA8138];
                  uint64_t v56 = (uint64_t)v116;
LABEL_63:
                  sub_255DF0004(v56, v53, v54, v55);
                  return 0;
                }
              }
              else if (v104 >> 60 != 15)
              {
                sub_255DAD700(v100, v101);
                sub_255DAD700(v103, v104);
                char v105 = sub_255DEC64C(v100, v101, v103, v104);
                sub_255DAD684(v103, v104);
                sub_255DAD684(v100, v101);
                if ((v105 & 1) == 0) {
                  return 0;
                }
                goto LABEL_89;
              }
              sub_255DAD700(v100, v101);
              sub_255DAD700(v103, v104);
              sub_255DAD684(v100, v101);
              sub_255DAD684(v103, v104);
              return 0;
            }
            uint64_t v80 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
            sub_255DEFFA8((uint64_t)v67, &qword_269F35058, MEMORY[0x270FA92C8]);
            sub_255DEFFA8((uint64_t)v171, &qword_269F35058, v80);
            (*(void (**)(char *, uint64_t))(v161 + 8))(v78, v72);
          }
          unint64_t v53 = &qword_269F361D8;
          uint64_t v54 = &qword_269F35058;
          uint64_t v55 = (void (*)(uint64_t))MEMORY[0x270FA92C8];
          uint64_t v56 = (uint64_t)v70;
          goto LABEL_63;
        }
      }
    }
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MedicalIDData(void *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    unint64_t v53 = (void *)*((void *)a2 + 12);
    uint64_t v57 = (void *)*((void *)a2 + 13);
    uint64_t v12 = a3[13];
    __dst = (char *)a1 + v12;
    uint64_t v52 = &a2[v12];
    a1[12] = v53;
    a1[13] = v57;
    uint64_t v13 = sub_255EEE100();
    uint64_t v54 = *(void *)(v13 - 8);
    char v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v53;
    id v16 = v57;
    uint64_t v58 = v14;
    if (v14(v52, 1, v13))
    {
      sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
      memcpy(__dst, v52, *(void *)(*(void *)(v17 - 8) + 64));
      uint64_t v18 = v54;
    }
    else
    {
      uint64_t v18 = v54;
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v52, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v20 = a3[14];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = &a2[v20];
    if (v14(&a2[v20], 1, v13))
    {
      sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v22, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v13);
    }
    uint64_t v24 = a3[15];
    uint64_t v25 = a3[16];
    __int16 v26 = (void *)((char *)v4 + v24);
    char v27 = &a2[v24];
    uint64_t v28 = *((void *)v27 + 1);
    *__int16 v26 = *(void *)v27;
    v26[1] = v28;
    id v29 = (void *)((char *)v4 + v25);
    char v30 = &a2[v25];
    uint64_t v31 = *((void *)v30 + 1);
    *id v29 = *(void *)v30;
    v29[1] = v31;
    uint64_t v32 = a3[18];
    *((unsigned char *)v4 + a3[17]) = a2[a3[17]];
    *((unsigned char *)v4 + v32) = a2[v32];
    uint64_t v33 = a3[19];
    uint64_t v34 = (char *)v4 + v33;
    uint64_t v35 = (uint64_t *)&a2[v33];
    unint64_t v36 = *(void *)&a2[v33 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    }
    else
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *(void *)uint64_t v34 = v37;
      *((void *)v34 + 1) = v36;
    }
    uint64_t v38 = a3[20];
    uint64_t v39 = (char *)v4 + v38;
    uint64_t v40 = &a2[v38];
    uint64_t v41 = sub_255EEDF60();
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    uint64_t v44 = a3[21];
    uint64_t v45 = a3[22];
    unint64_t v46 = *(void **)&a2[v44];
    *(void *)((char *)v4 + v44) = v46;
    uint64_t v47 = (char *)v4 + v45;
    int v48 = &a2[v45];
    id v49 = v46;
    if (v58(v48, 1, v13))
    {
      sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
      memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v47, v48, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v47, 0, 1, v13);
    }
  }
  return v4;
}

uint64_t destroy for MedicalIDData(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[14];
  if (!v6(v7, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v7, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(a1 + a2[19]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_255D80D04(*v8, v9);
  }
  uint64_t v10 = a1 + a2[20];
  uint64_t v11 = sub_255EEDF60();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }

  uint64_t v13 = a1 + a2[22];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v13, 1, v5);
  if (!result)
  {
    id v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v13, v5);
  }
  return result;
}

void *initializeWithCopy for MedicalIDData(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  uint64_t v51 = (void *)*((void *)a2 + 12);
  uint64_t v55 = (void *)*((void *)a2 + 13);
  uint64_t v11 = a3[13];
  __dst = (char *)a1 + v11;
  uint64_t v50 = &a2[v11];
  a1[12] = v51;
  a1[13] = v55;
  uint64_t v12 = sub_255EEE100();
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v51;
  id v15 = v55;
  uint64_t v56 = v13;
  if (v13(v50, 1, v12))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(__dst, v50, *(void *)(*(void *)(v16 - 8) + 64));
    uint64_t v17 = v52;
  }
  else
  {
    uint64_t v17 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v50, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v18 = a3[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v13(&a2[v18], 1, v12))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v20, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v12);
  }
  uint64_t v22 = a3[15];
  uint64_t v23 = a3[16];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = &a2[v22];
  uint64_t v26 = *((void *)v25 + 1);
  *uint64_t v24 = *(void *)v25;
  v24[1] = v26;
  char v27 = (void *)((char *)a1 + v23);
  uint64_t v28 = &a2[v23];
  uint64_t v29 = *((void *)v28 + 1);
  *char v27 = *(void *)v28;
  v27[1] = v29;
  uint64_t v30 = a3[18];
  *((unsigned char *)a1 + a3[17]) = a2[a3[17]];
  *((unsigned char *)a1 + v30) = a2[v30];
  uint64_t v31 = a3[19];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (uint64_t *)&a2[v31];
  unint64_t v34 = *(void *)&a2[v31 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  else
  {
    uint64_t v35 = *v33;
    sub_255D80890(*v33, v34);
    *(void *)uint64_t v32 = v35;
    *((void *)v32 + 1) = v34;
  }
  uint64_t v36 = a3[20];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = &a2[v36];
  uint64_t v39 = sub_255EEDF60();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v42 = a3[21];
  uint64_t v43 = a3[22];
  uint64_t v44 = *(void **)&a2[v42];
  *(void *)((char *)a1 + v42) = v44;
  uint64_t v45 = (char *)a1 + v43;
  unint64_t v46 = &a2[v43];
  id v47 = v44;
  if (v56(v46, 1, v12))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v45, v46, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v45, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for MedicalIDData(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v6 = (void *)*((void *)a1 + 12);
  uint64_t v7 = (void *)a2[12];
  *((void *)a1 + 12) = v7;
  id v8 = v7;

  uint64_t v9 = (void *)*((void *)a1 + 13);
  uint64_t v10 = (void *)a2[13];
  *((void *)a1 + 13) = v10;
  id v11 = v10;

  uint64_t v12 = a3[13];
  uint64_t v13 = &a1[v12];
  id v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = a3[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = a3[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[17]] = *((unsigned char *)a2 + a3[17]);
  a1[a3[18]] = *((unsigned char *)a2 + a3[18]);
  uint64_t v33 = a3[19];
  unint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v65 = v15;
  unint64_t v64 = v17;
  uint64_t v37 = v16;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v38 = *v35;
      sub_255D80890(v38, v36);
      *unint64_t v34 = v38;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v39 = *v35;
  sub_255D80890(v39, v36);
  uint64_t v40 = *v34;
  unint64_t v41 = v34[1];
  *unint64_t v34 = v39;
  v34[1] = v36;
  sub_255D80D04(v40, v41);
LABEL_20:
  uint64_t v66 = a3;
  uint64_t v42 = a3[20];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = sub_255EEDF60();
  uint64_t v46 = *(void *)(v45 - 8);
  id v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (v48)
  {
    uint64_t v50 = v37;
    uint64_t v51 = v64;
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v50 = v37;
  uint64_t v51 = v64;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
LABEL_25:
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v43, v44, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 24))(v43, v44, v45);
LABEL_26:
  uint64_t v53 = a3[21];
  uint64_t v54 = *(void **)&a1[v53];
  uint64_t v55 = *(void **)((char *)a2 + v53);
  *(void *)&a1[v53] = v55;
  id v56 = v55;

  uint64_t v57 = v66[22];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = (char *)a2 + v57;
  int v60 = v51(&a1[v57], 1, v65);
  int v61 = v51(v59, 1, v65);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 24))(v58, v59, v65);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v58, v65);
    goto LABEL_31;
  }
  if (v61)
  {
LABEL_31:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v58, v59, v65);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v58, 0, 1, v65);
  return a1;
}

uint64_t initializeWithTake for MedicalIDData(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v6 = a3[13];
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  id v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[14];
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v30 = v11;
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v25 = a3[22];
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (const void *)(a2 + v25);
  if (v30(v27, 1, v9))
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v26, v27, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v26, 0, 1, v9);
  }
  return a1;
}

char *assignWithTake for MedicalIDData(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v10;
  swift_bridgeObjectRelease();
  id v11 = (void *)*((void *)a1 + 12);
  uint64_t v12 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v12;

  uint64_t v13 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v14 = a3[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = a3[14];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = a3[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[16];
  uint64_t v35 = &a1[v34];
  unint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[18];
  a1[a3[17]] = *((unsigned char *)a2 + a3[17]);
  a1[v39] = *((unsigned char *)a2 + v39);
  uint64_t v40 = a3[19];
  uint64_t v41 = (uint64_t)&a1[v40];
  uint64_t v42 = (char *)a2 + v40;
  unint64_t v43 = *(void *)&a1[v40 + 8];
  uint64_t v67 = v18;
  uint64_t v66 = v17;
  if (v43 >> 60 == 15)
  {
    uint64_t v44 = v19;
LABEL_17:
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    goto LABEL_19;
  }
  unint64_t v45 = *((void *)v42 + 1);
  uint64_t v44 = v19;
  if (v45 >> 60 == 15)
  {
    sub_255D81EF8(v41);
    goto LABEL_17;
  }
  uint64_t v46 = *(void *)v41;
  *(void *)uint64_t v41 = *(void *)v42;
  *(void *)(v41 + 8) = v45;
  sub_255D80D04(v46, v43);
LABEL_19:
  uint64_t v47 = a3[20];
  int v48 = &a1[v47];
  int v49 = (char *)a2 + v47;
  uint64_t v50 = sub_255EEDF60();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48);
  int v53 = v52(v48, 1, v50);
  int v54 = v52(v49, 1, v50);
  if (v53)
  {
    uint64_t v55 = v44;
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v55 = v44;
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v50);
LABEL_24:
    sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
    memcpy(v48, v49, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v48, v49, v50);
LABEL_25:
  uint64_t v57 = a3[21];
  uint64_t v58 = *(void **)&a1[v57];
  *(void *)&a1[v57] = *(void *)((char *)a2 + v57);

  uint64_t v59 = a3[22];
  int v60 = &a1[v59];
  int v61 = (char *)a2 + v59;
  int v62 = v55(&a1[v59], 1, v66);
  int v63 = v55(v61, 1, v66);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v60, v61, v66);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v60, v66);
    goto LABEL_30;
  }
  if (v63)
  {
LABEL_30:
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v60, v61, v66);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v60, 0, 1, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DEFB4C);
}

uint64_t sub_255DEFB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 52);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 80);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DEFCAC);
}

uint64_t sub_255DEFCAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_255DB0D78(0, &qword_269F35058, MEMORY[0x270FA92C8]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 52);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_255DB0D78(0, &qword_269F350B8, MEMORY[0x270FA8138]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 80);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_255DEFDF8()
{
  sub_255DB0D78(319, &qword_269F35058, MEMORY[0x270FA92C8]);
  if (v0 <= 0x3F)
  {
    sub_255DB0D78(319, &qword_269F350B8, MEMORY[0x270FA8138]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_255DEFF44(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_255DB0D78(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_255DEFFA8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_255DB0D78(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255DF0004(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255DEFF44(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_255DF0060(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DF00A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BasicAlertModel.Action();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255DF0104()
{
  return sub_255EEEB40();
}

uint64_t static MIUIMedicalIDLearnMoreNavigationViewControllerFactory.makeViewController()()
{
  uint64_t v0 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v9 - v4;
  *uint64_t v3 = swift_getKeyPath();
  sub_255DF0220();
  swift_storeEnumTagMultiPayload();
  sub_255DF0278((uint64_t)v3, (uint64_t)v5);
  sub_255DF02DC();
  id v7 = objc_allocWithZone(v6);
  return sub_255EEEDC0();
}

uint64_t sub_255DF01FC()
{
  return sub_255EEEB40();
}

void sub_255DF0220()
{
  if (!qword_269F35580)
  {
    sub_255EEE730();
    unint64_t v0 = sub_255EEE640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35580);
    }
  }
}

uint64_t sub_255DF0278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_255DF02DC()
{
  if (!qword_269F36200)
  {
    type metadata accessor for MedicalIDLearnMoreNavigationView();
    sub_255DF0340();
    unint64_t v0 = sub_255EEEDD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36200);
    }
  }
}

unint64_t sub_255DF0340()
{
  unint64_t result = qword_269F36208;
  if (!qword_269F36208)
  {
    type metadata accessor for MedicalIDLearnMoreNavigationView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36208);
  }
  return result;
}

MIUIMedicalIDLearnMoreNavigationViewControllerFactory __swiftcall MIUIMedicalIDLearnMoreNavigationViewControllerFactory.init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (MIUIMedicalIDLearnMoreNavigationViewControllerFactory)objc_msgSend(v0, sel_init);
}

id MIUIMedicalIDLearnMoreNavigationViewControllerFactory.init()()
{
  v1.super_class = (Class)MIUIMedicalIDLearnMoreNavigationViewControllerFactory;
  return objc_msgSendSuper2(&v1, sel_init);
}

unint64_t type metadata accessor for MIUIMedicalIDLearnMoreNavigationViewControllerFactory()
{
  unint64_t result = qword_269F36210;
  if (!qword_269F36210)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F36210);
  }
  return result;
}

uint64_t destroy for MedicalIDPlaceholderCell()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MedicalIDPlaceholderCell(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDPlaceholderCell(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MedicalIDPlaceholderCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDPlaceholderCell(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDPlaceholderCell(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDPlaceholderCell()
{
  return &type metadata for MedicalIDPlaceholderCell;
}

uint64_t sub_255DF0870()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255DF088C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[1];
  char v4 = *((unsigned char *)v1 + 16);
  char v15 = *((unsigned char *)v1 + 17);
  uint64_t v6 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v9 = v1[8];
  uint64_t v17 = v1[7];
  uint64_t v18 = *v1;
  uint64_t v10 = v1[9];
  uint64_t v11 = v1[10];
  uint64_t v16 = v10;
  uint64_t v12 = qword_269F34B90;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_269F37000;
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 17) = v15;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_255DF09A4()
{
  unint64_t result = qword_269F36218;
  if (!qword_269F36218)
  {
    sub_255DF09FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36218);
  }
  return result;
}

void sub_255DF09FC()
{
  if (!qword_269F36220)
  {
    sub_255DEA818();
    unint64_t v0 = type metadata accessor for MedicalIDCellView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36220);
    }
  }
}

uint64_t sub_255DF0A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v3 = (int *)type metadata accessor for MedicalIDEditPregnancyModalView();
  uint64_t v30 = a2 + v3[6];
  sub_255D80868(0);
  uint64_t v32 = v4;
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v33 = sub_255EEE100();
  uint64_t v7 = *(void *)(v33 - 8);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))((char *)&v29 - v6, 1, 1, v33);
  MEMORY[0x270FA5388](v8);
  sub_255DF3BD4((uint64_t)&v29 - v6, (uint64_t)&v29 - v6, (uint64_t (*)(void))sub_255D80868);
  sub_255EEF810();
  uint64_t v31 = sub_255D80868;
  sub_255DF3C98((uint64_t)&v29 - v6, (uint64_t (*)(void))sub_255D80868);
  uint64_t v9 = (_OWORD *)(a2 + v3[7]);
  sub_255DF8B38(0, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, MEMORY[0x263F8D8F0]);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  sub_255EEF810();
  long long v10 = v40;
  *uint64_t v9 = v39;
  v9[1] = v10;
  long long v11 = v42;
  v9[2] = v41;
  v9[3] = v11;
  uint64_t v12 = a2 + v3[8];
  type metadata accessor for MedicalIDDataManager();
  sub_255DF8F00(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  *(void *)uint64_t v12 = sub_255EEE650();
  *(unsigned char *)(v12 + 8) = v13 & 1;
  uint64_t v14 = (uint64_t *)(a2 + v3[9]);
  uint64_t *v14 = swift_getKeyPath();
  char v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_255DF8D94(0, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = (uint64_t *)(a2 + v3[10]);
  uint64_t *v16 = swift_getKeyPath();
  sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], v15);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t *)(a2 + v3[11]);
  sub_255DB6ED8();
  sub_255DF8F00((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  *uint64_t v17 = sub_255EEE9F0();
  v17[1] = v18;
  uint64_t v19 = v34;
  sub_255DF3BD4(v34, a2, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v20 = v19 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  uint64_t v21 = type metadata accessor for MedicalIDData();
  uint64_t v22 = v20 + *(int *)(v21 + 56);
  MEMORY[0x270FA5388](v21);
  sub_255DF3BD4(v22, (uint64_t)&v29 - v6, (uint64_t (*)(void))sub_255D80868);
  uint64_t v23 = sub_255DF3C3C(v30, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  MEMORY[0x270FA5388](v23);
  sub_255DF3BD4((uint64_t)&v29 - v6, (uint64_t)&v29 - v6, (uint64_t (*)(void))sub_255D80868);
  sub_255EEF810();
  uint64_t v24 = v31;
  uint64_t v25 = sub_255DF3C98((uint64_t)&v29 - v6, (uint64_t (*)(void))v31);
  MEMORY[0x270FA5388](v25);
  sub_255DF3BD4(v22, (uint64_t)&v29 - v6, (uint64_t (*)(void))sub_255D80868);
  LOBYTE(v22) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))((char *)&v29 - v6, 1, v33) != 1;
  sub_255DF3C98((uint64_t)&v29 - v6, (uint64_t (*)(void))v24);
  uint64_t v26 = a2 + v3[5];
  LOBYTE(v35) = v22;
  sub_255EEF810();
  LOBYTE(v22) = v39;
  uint64_t v27 = *((void *)&v39 + 1);
  uint64_t result = sub_255DF3C98(v34, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  *(unsigned char *)uint64_t v26 = v22;
  *(void *)(v26 + 8) = v27;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditPregnancyModalView()
{
  uint64_t result = qword_269F36248;
  if (!qword_269F36248) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DF0FA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v48 = a1;
  uint64_t v3 = type metadata accessor for MedicalIDEditPregnancyModalView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DF7E80();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  long long v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_269F34AE0 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_269F36230;
  uint64_t v45 = qword_269F36228;
  uint64_t v50 = type metadata accessor for MedicalIDEditPregnancyModalView;
  sub_255DF3BD4(v2, (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDEditPregnancyModalView);
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = (v12 + 16) & ~v12;
  uint64_t v49 = v12 | 7;
  uint64_t v14 = swift_allocObject();
  uint64_t v46 = type metadata accessor for MedicalIDEditPregnancyModalView;
  sub_255DF8C08((uint64_t)v6, v14 + v13, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPregnancyModalView);
  char v15 = (long long *)(v2 + *(int *)(v3 + 28));
  long long v16 = v15[1];
  long long v52 = *v15;
  long long v53 = v16;
  long long v17 = v15[3];
  long long v54 = v15[2];
  long long v55 = v17;
  sub_255DD059C();
  uint64_t v47 = v3;
  swift_bridgeObjectRetain();
  sub_255EEF840();
  long long v43 = v56;
  long long v42 = v57;
  long long v41 = v58;
  long long v40 = v59;
  uint64_t v18 = v60;
  *long long v10 = swift_getKeyPath();
  sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = (uint64_t *)((char *)v10 + v8[9]);
  *uint64_t v19 = v45;
  v19[1] = v11;
  uint64_t v20 = (uint64_t *)((char *)v10 + v8[10]);
  *uint64_t v20 = &unk_269F362C8;
  v20[1] = v14;
  uint64_t v21 = (char *)v10 + v8[11];
  long long v22 = v42;
  *(_OWORD *)uint64_t v21 = v43;
  *((_OWORD *)v21 + 1) = v22;
  long long v23 = v40;
  *((_OWORD *)v21 + 2) = v41;
  *((_OWORD *)v21 + 3) = v23;
  *((void *)v21 + 8) = v18;
  uint64_t v24 = (uint64_t (**)())((char *)v10 + v8[12]);
  uint64_t v45 = (uint64_t)v8;
  uint64_t v25 = v50;
  sub_255DF3BD4(v2, (uint64_t)v6, (uint64_t (*)(void))v50);
  *(void *)&long long v43 = swift_allocObject();
  uint64_t v26 = v46;
  sub_255DF8C08((uint64_t)v6, v43 + v13, (uint64_t (*)(void))v46);
  sub_255DF3BD4(v2, (uint64_t)v6, (uint64_t (*)(void))v25);
  uint64_t v44 = v13 + v5;
  uint64_t v27 = swift_allocObject();
  *(void *)&long long v42 = v10;
  uint64_t v28 = v27;
  uint64_t v29 = v26;
  sub_255DF8C08((uint64_t)v6, v27 + v13, (uint64_t (*)(void))v26);
  sub_255DF3BD4(v2, (uint64_t)v6, (uint64_t (*)(void))v25);
  uint64_t v30 = swift_allocObject();
  sub_255DF8C08((uint64_t)v6, v30 + v13, (uint64_t (*)(void))v29);
  uint64_t v31 = (uint64_t (*)())v43;
  *uint64_t v24 = sub_255DF83CC;
  v24[1] = v31;
  void v24[2] = (uint64_t (*)())sub_255DF83E8;
  v24[3] = (uint64_t (*)())v28;
  v24[4] = sub_255DF845C;
  v24[5] = (uint64_t (*)())v30;
  uint64_t v32 = v42;
  uint64_t v33 = v42 + *(int *)(v45 + 52);
  char v51 = 0;
  uint64_t v34 = MEMORY[0x263F8D4F8];
  sub_255EEF810();
  uint64_t v35 = *((void *)&v52 + 1);
  *(unsigned char *)uint64_t v33 = v52;
  *(void *)(v33 + 8) = v35;
  uint64_t v36 = v2 + *(int *)(v47 + 20);
  LOBYTE(v35) = *(unsigned char *)v36;
  uint64_t v37 = *(void *)(v36 + 8);
  LOBYTE(v56) = v35;
  *((void *)&v56 + 1) = v37;
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, v34, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  LOBYTE(v56) = v52;
  sub_255DF3BD4(v2, (uint64_t)v6, (uint64_t (*)(void))v50);
  uint64_t v38 = swift_allocObject();
  sub_255DF8C08((uint64_t)v6, v38 + v13, (uint64_t (*)(void))v29);
  sub_255DF8F00(&qword_269F362D0, (void (*)(uint64_t))sub_255DF7E80);
  sub_255EEF690();
  swift_release();
  return sub_255DF3C98(v32, (uint64_t (*)(void))sub_255DF7E80);
}

uint64_t sub_255DF153C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255DF15CC();
}

uint64_t sub_255DF15CC()
{
  v1[14] = v0;
  uint64_t v2 = sub_255EEE730();
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  sub_255D894E4(0);
  v1[18] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = sub_255EEFF70();
  v1[22] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v1[23] = v4;
  v1[24] = v3;
  return MEMORY[0x270FA2498](sub_255DF172C, v4, v3);
}

uint64_t sub_255DF172C()
{
  uint64_t v28 = v0;
  uint64_t v1 = (long long *)v0[20];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[14];
  uint64_t v4 = type metadata accessor for MedicalIDEditPregnancyModalView();
  v0[25] = v4;
  uint64_t v21 = v3 + *(int *)(v4 + 32);
  char v5 = *(unsigned char *)(v21 + 8);
  uint64_t v6 = swift_retain();
  uint64_t v7 = sub_255DAA2A0(v6, v5);
  swift_release();
  swift_getKeyPath();
  v0[11] = v7;
  v0[26] = sub_255DF8F00(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255DF3BD4(v8, v2, (uint64_t (*)(void))sub_255D894E4);
  swift_release();
  LoadState<>.loadedValue.getter((uint64_t)v1);
  sub_255DF3C98(v2, (uint64_t (*)(void))sub_255D894E4);
  sub_255D80868(0);
  uint64_t v9 = swift_task_alloc();
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  MedicalIDPregnancyViewModel.update(_:with:)((uint64_t)v1, v9);
  sub_255DF3C98(v9, (uint64_t (*)(void))sub_255D80868);
  swift_task_dealloc();
  MedicalIDPregnancyViewModel.validationResult(for:)(v1, &v23);
  uint64_t v10 = v24;
  if (v24)
  {
    uint64_t v11 = v27;
    long long v20 = v25;
    long long v22 = v26;
    uint64_t v12 = v23;
    swift_release();
    sub_255D86638();
    swift_allocError();
    *(void *)uint64_t v13 = v12;
    *(void *)(v13 + 8) = v10;
    *(_OWORD *)(v13 + 16) = v20;
    *(_OWORD *)(v13 + 32) = v22;
    *(void *)(v13 + 48) = v11;
    swift_willThrow();
    sub_255DF3C98(v0[20], (uint64_t (*)(void))type metadata accessor for MedicalIDData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    char v16 = *(unsigned char *)(v21 + 8);
    uint64_t v17 = swift_retain();
    v0[27] = sub_255DAA2A0(v17, v16);
    swift_release();
    v0[28] = sub_255EEFF60();
    uint64_t v19 = sub_255EEFF20();
    v0[29] = v19;
    v0[30] = v18;
    return MEMORY[0x270FA2498](sub_255DF1ACC, v19, v18);
  }
}

uint64_t sub_255DF1ACC()
{
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[18];
  swift_getKeyPath();
  v0[12] = v1;
  sub_255EEE2D0();
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255DF3BD4(v5, v4, (uint64_t (*)(void))sub_255D894E4);
  LoadState<>.loadedValue.getter(v3);
  sub_255DF3C98(v4, (uint64_t (*)(void))sub_255D894E4);
  sub_255DF3C98(v3, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_beginAccess();
  sub_255DF3BD4(v2, v3, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[31] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_255DF1C94;
  uint64_t v7 = v0[19];
  return sub_255E8F53C(v7, (uint64_t)(v0 + 13));
}

uint64_t sub_255DF1C94()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  uint64_t v4 = *(void *)(v2 + 240);
  if (v0) {
    uint64_t v5 = sub_255DF1F2C;
  }
  else {
    uint64_t v5 = sub_255DF1DA4;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255DF1DA4()
{
  uint64_t v1 = v0[19];
  swift_release();
  sub_255DF3C98(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_release();
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  return MEMORY[0x270FA2498](sub_255DF1E30, v2, v3);
}

uint64_t sub_255DF1E30()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  swift_release();
  sub_255DAA4A8(v2);
  sub_255EEE720();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_255DF3C98(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_255DF1F2C()
{
  uint64_t v1 = v0[19];
  swift_release();
  sub_255DF3C98(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_release();
  v0[32] = v0[13];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  return MEMORY[0x270FA2498](sub_255DF1FC0, v2, v3);
}

uint64_t sub_255DF1FC0()
{
  uint64_t v1 = v0[32];
  swift_release();
  sub_255DBD3D8();
  swift_allocError();
  *uint64_t v2 = v1;
  sub_255DF3C98(v0[20], (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_255DF209C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v84 = a2;
  sub_255DF81D8(0, &qword_269F36290, MEMORY[0x263F1BA08], MEMORY[0x263F1BA00], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v77 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v76 = (uint64_t)&v73 - v6;
  sub_255DF8154();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v83 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v80 = (uint64_t)&v73 - v10;
  sub_255DF81D8(0, &qword_269F36280, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B6B8]);
  uint64_t v78 = v11;
  uint64_t v12 = (uint64_t)*(v11 - 1);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v73 - v13;
  sub_255DF80C0();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v79 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  long long v20 = (char *)&v73 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v85 = (uint64_t)&v73 - v21;
  uint64_t v22 = sub_255EEFD40();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v75 = v23;
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v24 = (void *)qword_269F352A8;
  uint64_t v25 = sub_255EEE200();
  MEMORY[0x270FA5388](v25 - 8);
  id v26 = v24;
  sub_255EEE1F0();
  uint64_t v73 = "l_id_disclaimer_text";
  uint64_t v91 = sub_255EEFDA0();
  uint64_t v92 = v27;
  uint64_t v74 = type metadata accessor for MedicalIDEditPregnancyModalView();
  uint64_t v28 = (char *)a1 + *(int *)(v74 + 20);
  uint64_t v29 = *((void *)v28 + 1);
  char v87 = *v28;
  uint64_t v88 = v29;
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  id v86 = a1;
  sub_255DAD520();
  uint64_t v30 = MEMORY[0x263F8D310];
  uint64_t v31 = v86;
  sub_255EEF930();
  sub_255DF8B38(0, (unint64_t *)&qword_269F37DA0, v30, MEMORY[0x263F8E0F8]);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_255EF1E20;
  uint64_t v33 = v31[1];
  *(void *)(v32 + 32) = *v31;
  *(void *)(v32 + 40) = v33;
  *(void *)(v32 + 48) = 0xD000000000000017;
  *(void *)(v32 + 56) = 0x8000000255EF9C00;
  swift_bridgeObjectRetain();
  uint64_t v34 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v35 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v35)
  {
    sub_255EEFD90();

    sub_255DF8B84();
    uint64_t v36 = v78;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char **))(v12 + 8))(v14, v36);
    uint64_t v37 = v85;
    sub_255DF8C08((uint64_t)v20, v85, (uint64_t (*)(void))sub_255DF80C0);
    uint64_t v38 = *((void *)v28 + 1);
    LOBYTE(v89) = *v28;
    uint64_t v90 = v38;
    sub_255EEF820();
    if (v91 != 1)
    {
      uint64_t v65 = 1;
      uint64_t v67 = (uint64_t)v83;
      uint64_t v66 = v84;
      uint64_t v69 = v81;
      uint64_t v68 = v82;
      uint64_t v64 = v80;
      goto LABEL_8;
    }
    sub_255DF8D94(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    uint64_t v78 = &v73;
    MEMORY[0x270FA5388](v39 - 8);
    long long v41 = (char *)&v73 - v40;
    uint64_t v42 = v74;
    sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    uint64_t v43 = sub_255EEF840();
    MEMORY[0x270FA5388](v43);
    uint64_t v44 = sub_255EEFCD0();
    uint64_t v45 = (void *)qword_269F352A8;
    MEMORY[0x270FA5388](v44);
    id v46 = v45;
    sub_255EEE1F0();
    uint64_t v47 = sub_255EEFDA0();
    uint64_t v49 = v48;
    uint64_t v50 = v86;
    uint64_t v51 = sub_255EEE100();
    uint64_t v75 = &v73;
    MEMORY[0x270FA5388](v51 - 8);
    long long v53 = (char *)&v73 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
    long long v54 = *(void **)((char *)v50 + *(int *)(v42 + 44));
    if (v54)
    {
      id v55 = v54;
      MedicalIDPregnancyViewModel.defaultPregnancyDueDate(with:)(v55, (uint64_t)v53);

      sub_255D80868(0);
      uint64_t v57 = *(void *)(*(void *)(v56 - 8) + 64);
      MEMORY[0x270FA5388](v56 - 8);
      long long v58 = (char *)&v73 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v59 = MedicalIDPregnancyViewModel.minimumSelectableDueDate.getter(v58);
      MEMORY[0x270FA5388](v59);
      _s11MedicalIDUI0A20IDPregnancyViewModelV24maximumSelectableDueDate10Foundation0I0VSgvg_0((uint64_t)v58);
      uint64_t v60 = *v50;
      uint64_t v61 = swift_bridgeObjectRetain();
      uint64_t v62 = v77;
      sub_255DF2AE8((uint64_t)v41, v47, v49, (uint64_t)v53, (uint64_t)v58, (uint64_t)v58, 0, 0, v77, 0, v60, v61, (uint64_t)nullsub_1, 0);
      uint64_t v63 = v76;
      sub_255DF8C70(v62, v76);
      uint64_t v64 = v80;
      sub_255DF8C70(v63, v80);
      uint64_t v65 = 0;
      uint64_t v67 = (uint64_t)v83;
      uint64_t v66 = v84;
      uint64_t v69 = v81;
      uint64_t v68 = v82;
      uint64_t v37 = v85;
LABEL_8:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v64, v65, 1, v68);
      uint64_t v70 = v79;
      sub_255DF3BD4(v37, v79, (uint64_t (*)(void))sub_255DF80C0);
      sub_255DF3BD4(v64, v67, (uint64_t (*)(void))sub_255DF8154);
      sub_255DF3BD4(v70, v66, (uint64_t (*)(void))sub_255DF80C0);
      sub_255DF8050();
      sub_255DF3BD4(v67, v66 + *(int *)(v71 + 48), (uint64_t (*)(void))sub_255DF8154);
      sub_255DF3C98(v64, (uint64_t (*)(void))sub_255DF8154);
      sub_255DF3C98(v37, (uint64_t (*)(void))sub_255DF80C0);
      sub_255DF3C98(v67, (uint64_t (*)(void))sub_255DF8154);
      return sub_255DF3C98(v70, (uint64_t (*)(void))sub_255DF80C0);
    }
  }
  else
  {
    __break(1u);
  }
  sub_255DB6ED8();
  sub_255DF8F00((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

uint64_t sub_255DF2AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v57 = a4;
  long long v58 = a8;
  int v55 = a7;
  uint64_t v50 = a6;
  uint64_t v51 = a5;
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  uint64_t v59 = a11;
  uint64_t v60 = a12;
  uint64_t v52 = a10;
  sub_255DF81D8(0, &qword_269F36290, MEMORY[0x263F1BA08], MEMORY[0x263F1BA00], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
  uint64_t v22 = v21;
  uint64_t v23 = a9 + v21[18];
  char v61 = 0;
  sub_255EEF810();
  uint64_t v24 = v63;
  *(unsigned char *)uint64_t v23 = v62;
  *(void *)(v23 + 8) = v24;
  sub_255DF8D00(a1, a9);
  uint64_t v25 = (void *)(a9 + v22[9]);
  *uint64_t v25 = a2;
  v25[1] = a3;
  uint64_t v26 = a9 + v22[10];
  uint64_t v27 = sub_255EEE100();
  uint64_t v56 = *(void *)(v27 - 8);
  uint64_t v28 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v26, a4, v27);
  sub_255DF3BD4(a5, a9 + v22[11], (uint64_t (*)(void))sub_255D80868);
  uint64_t v29 = sub_255DF3BD4(a6, a9 + v22[12], (uint64_t (*)(void))sub_255D80868);
  *(unsigned char *)(a9 + v22[13]) = v55;
  uint64_t v30 = (void *)(a9 + v22[14]);
  uint64_t v31 = v52;
  *uint64_t v30 = v58;
  v30[1] = v31;
  uint64_t v32 = (void *)(a9 + v22[15]);
  uint64_t v33 = v54;
  void *v32 = v53;
  v32[1] = v33;
  uint64_t v34 = *(void *)(v28 + 64);
  MEMORY[0x270FA5388](v29);
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v58 = (char *)&v50 - v35;
  sub_255D80868(0);
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v38 = (char *)&v50 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B750];
  sub_255DF8D94(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  sub_255DF3C98(v50, (uint64_t (*)(void))sub_255D80868);
  sub_255DF3C98(v51, (uint64_t (*)(void))sub_255D80868);
  uint64_t v40 = v56;
  uint64_t v41 = sub_255DF3C3C(a1, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, v39);
  MEMORY[0x270FA5388](v41);
  uint64_t v42 = (char *)&v50 - v35;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
  v43((char *)&v50 - v35, v57, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v27) == 1)
  {
    uint64_t v44 = v58;
    v43(v58, (uint64_t)v42, v27);
    sub_255DF3C98((uint64_t)v38, (uint64_t (*)(void))sub_255D80868);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v27);
    uint64_t v44 = v58;
    v43(v58, (uint64_t)v38, v27);
  }
  uint64_t v45 = a9 + v22[17];
  sub_255DF8D94(0, &qword_269F362E0, MEMORY[0x270FA9350], MEMORY[0x263F1B5D0]);
  *(void *)(v45 + *(int *)(v46 + 28)) = 0;
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v45, v44, v27);
  uint64_t v48 = (void *)(a9 + v22[16]);
  uint64_t v49 = v60;
  *uint64_t v48 = v59;
  v48[1] = v49;
  return result;
}

uint64_t sub_255DF2F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v58 = a4;
  uint64_t v59 = a8;
  int v55 = a7;
  uint64_t v51 = a6;
  uint64_t v52 = a5;
  uint64_t v57 = a1;
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  uint64_t v60 = a11;
  uint64_t v61 = a12;
  sub_255DF8E9C();
  uint64_t v22 = v21;
  uint64_t v23 = a9 + v21[18];
  char v62 = 0;
  sub_255EEF810();
  uint64_t v24 = v64;
  *(unsigned char *)uint64_t v23 = v63;
  *(void *)(v23 + 8) = v24;
  sub_255DF8D00(a1, a9);
  uint64_t v25 = (void *)(a9 + v22[9]);
  *uint64_t v25 = a2;
  v25[1] = a3;
  uint64_t v26 = a9 + v22[10];
  uint64_t v27 = sub_255EEE100();
  uint64_t v56 = *(void *)(v27 - 8);
  uint64_t v28 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v26, a4, v27);
  sub_255DF3BD4(a5, a9 + v22[11], (uint64_t (*)(void))sub_255D80868);
  uint64_t v29 = sub_255DF3BD4(a6, a9 + v22[12], (uint64_t (*)(void))sub_255D80868);
  *(unsigned char *)(a9 + v22[13]) = v55;
  uint64_t v30 = (void *)(a9 + v22[14]);
  *uint64_t v30 = v59;
  v30[1] = a10;
  uint64_t v31 = (void *)(a9 + v22[15]);
  uint64_t v32 = v54;
  *uint64_t v31 = v53;
  v31[1] = v32;
  uint64_t v33 = *(void *)(v28 + 64);
  MEMORY[0x270FA5388](v29);
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v59 = (char *)&v51 - v34;
  sub_255D80868(0);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (char *)&v51 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B750];
  sub_255DF8D94(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v39 = v57;
  MEMORY[0x25A29B390]();
  sub_255DF3C98(v51, (uint64_t (*)(void))sub_255D80868);
  sub_255DF3C98(v52, (uint64_t (*)(void))sub_255D80868);
  uint64_t v40 = v39;
  uint64_t v41 = v56;
  uint64_t v42 = sub_255DF3C3C(v40, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, v38);
  MEMORY[0x270FA5388](v42);
  uint64_t v43 = (char *)&v51 - v34;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
  v44((char *)&v51 - v34, v58, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v37, 1, v27) == 1)
  {
    uint64_t v45 = v59;
    v44(v59, (uint64_t)v43, v27);
    sub_255DF3C98((uint64_t)v37, (uint64_t (*)(void))sub_255D80868);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v27);
    uint64_t v45 = v59;
    v44(v59, (uint64_t)v37, v27);
  }
  uint64_t v46 = a9 + v22[17];
  sub_255DF8D94(0, &qword_269F362E0, MEMORY[0x270FA9350], MEMORY[0x263F1B5D0]);
  *(void *)(v46 + *(int *)(v47 + 28)) = 0;
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v44)(v46, v45, v27);
  uint64_t v49 = (void *)(a9 + v22[16]);
  uint64_t v50 = v61;
  *uint64_t v49 = v60;
  v49[1] = v50;
  return result;
}

uint64_t sub_255DF3328@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  if (qword_269F34B68 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_269F3FE30;
  uint64_t v4 = *(void *)algn_269F3FE38;
  uint64_t v6 = qword_269F34AE8;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_269F36238;
  uint64_t v7 = qword_269F36240;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v8;
  a2[3] = v7;
  a2[4] = v9;
  a2[5] = v10;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DF3404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MedicalIDEditPregnancyModalView();
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  if (v7 == 1)
  {
    sub_255DF3BD4(a1, a2, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
    uint64_t v4 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
    sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    sub_255EEF840();
    *(unsigned char *)(a2 + *(int *)(v4 + 20)) = 1;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 0, 1, v4);
  }
  else
  {
    uint64_t v6 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
}

uint64_t sub_255DF3598(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDEditPregnancyModalView();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 + *(int *)(v3 + 20);
  char v7 = *(unsigned char *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  char v28 = v7;
  uint64_t v29 = v8;
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  int v9 = v30;
  sub_255D80868(0);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (char *)v27 - v12;
  if (v9 != 1)
  {
    uint64_t v22 = sub_255EEE100();
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))((char *)v27 - v12, 1, 1, v22);
    MEMORY[0x270FA5388](v23);
    uint64_t v24 = (char *)v27 - v12;
LABEL_8:
    sub_255DF3BD4((uint64_t)v13, (uint64_t)v24, (uint64_t (*)(void))sub_255D80868);
    sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    sub_255EEF830();
    return sub_255DF3C98((uint64_t)v13, (uint64_t (*)(void))sub_255D80868);
  }
  uint64_t v14 = a1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  uint64_t v15 = type metadata accessor for MedicalIDData();
  v27[2] = v27;
  uint64_t v16 = MEMORY[0x270FA5388](v14 + *(int *)(v15 + 56));
  uint64_t v17 = (char *)v27 - v12;
  sub_255DF3BD4(v16, (uint64_t)v17, (uint64_t (*)(void))sub_255D80868);
  sub_255DF3BD4(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPregnancyModalView);
  uint64_t v18 = sub_255EEE100();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    sub_255DF3C98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPregnancyModalView);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v17, v18);
    goto LABEL_7;
  }
  v27[1] = v27;
  long long v20 = *(void **)&v5[*(int *)(v2 + 44)];
  if (v20)
  {
    id v21 = v20;
    MedicalIDPregnancyViewModel.defaultPregnancyDueDate(with:)(v21, (uint64_t)v13);

    sub_255DF3C98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDEditPregnancyModalView);
    sub_255DF3C98((uint64_t)v17, (uint64_t (*)(void))sub_255D80868);
LABEL_7:
    uint64_t v25 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    MEMORY[0x270FA5388](v25);
    uint64_t v24 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_8;
  }
  sub_255DB6ED8();
  sub_255DF8F00((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

uint64_t sub_255DF3A0C(uint64_t a1)
{
  return sub_255DF3A64(a1, 0x6572502074696445, 0xEE0079636E616E67, &qword_269F36228, &qword_269F36230);
}

uint64_t sub_255DF3A3C(uint64_t a1)
{
  return sub_255DF3A64(a1, 0xD000000000000029, 0x8000000255EF9BB0, &qword_269F36238, &qword_269F36240);
}

uint64_t sub_255DF3A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v10 = v8;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  *a4 = result;
  *a5 = v12;
  return result;
}

uint64_t sub_255DF3BD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DF3C3C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_255DF8D94(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_255DF3C98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_255DF3CF8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    uint64_t v25 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v107 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    uint64_t v7 = v107[5];
    uint64_t v109 = a1;
    uint64_t v8 = (void *)((char *)a1 + v7);
    id v111 = a2;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7);
    uint64_t v11 = *((void *)v9 + 1);
    *uint64_t v8 = v10;
    v8[1] = v11;
    uint64_t v12 = *((void *)v9 + 3);
    void v8[2] = *((void *)v9 + 2);
    _OWORD v8[3] = v12;
    uint64_t v13 = *((void *)v9 + 5);
    v8[4] = *((void *)v9 + 4);
    v8[5] = v13;
    uint64_t v14 = *((void *)v9 + 7);
    v8[6] = *((void *)v9 + 6);
    v8[7] = v14;
    uint64_t v15 = *((void *)v9 + 9);
    _OWORD v8[8] = *((void *)v9 + 8);
    v8[9] = v15;
    uint64_t v16 = *((void *)v9 + 11);
    v8[10] = *((void *)v9 + 10);
    v8[11] = v16;
    uint64_t v103 = (void *)*((void *)v9 + 12);
    unint64_t v104 = (void *)*((void *)v9 + 13);
    v8[12] = v103;
    v8[13] = v104;
    char v105 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v17 = v105[13];
    __dst = (char *)v8 + v17;
    char v102 = &v9[v17];
    uint64_t v18 = sub_255EEE100();
    uint64_t v112 = *(void *)(v18 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v20 = v103;
    id v21 = v104;
    if (v19(v102, 1, v18))
    {
      sub_255D80868(0);
      memcpy(__dst, v102, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v23 = v112;
    }
    else
    {
      uint64_t v23 = v112;
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(__dst, v102, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(__dst, 0, 1, v18);
    }
    uint64_t v26 = v105[14];
    uint64_t v27 = (char *)v8 + v26;
    char v28 = &v9[v26];
    uint64_t v25 = v109;
    uint64_t v108 = v18;
    if (v19(&v9[v26], 1, v18))
    {
      sub_255D80868(0);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v28, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v18);
    }
    uint64_t v30 = v105[15];
    uint64_t v31 = (void *)((char *)v8 + v30);
    uint64_t v32 = &v9[v30];
    uint64_t v33 = *((void *)v32 + 1);
    *uint64_t v31 = *(void *)v32;
    v31[1] = v33;
    uint64_t v34 = v105[16];
    uint64_t v35 = (void *)((char *)v8 + v34);
    uint64_t v36 = &v9[v34];
    uint64_t v37 = *((void *)v36 + 1);
    void *v35 = *(void *)v36;
    v35[1] = v37;
    *((unsigned char *)v8 + v105[17]) = v9[v105[17]];
    *((unsigned char *)v8 + v105[18]) = v9[v105[18]];
    uint64_t v38 = v105[19];
    uint64_t v39 = (char *)v8 + v38;
    uint64_t v40 = (uint64_t *)&v9[v38];
    unint64_t v41 = *(void *)&v9[v38 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    }
    else
    {
      uint64_t v42 = *v40;
      sub_255D80890(*v40, v41);
      *(void *)uint64_t v39 = v42;
      *((void *)v39 + 1) = v41;
    }
    uint64_t v43 = v105[20];
    uint64_t v44 = (char *)v8 + v43;
    uint64_t v45 = &v9[v43];
    uint64_t v46 = sub_255EEDF60();
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_255DF8D94(0, &qword_269F350B8, MEMORY[0x270FA8118], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    uint64_t v49 = v105[21];
    uint64_t v50 = *(void **)&v9[v49];
    *(void *)((char *)v8 + v49) = v50;
    uint64_t v51 = v105[22];
    uint64_t v52 = (char *)v8 + v51;
    uint64_t v53 = &v9[v51];
    id v54 = v50;
    if (v19(v53, 1, v108))
    {
      sub_255D80868(0);
      memcpy(v52, v53, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v52, v53, v108);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v52, 0, 1, v108);
    }
    uint64_t v56 = v107[6];
    uint64_t v57 = (char *)v109 + v56;
    uint64_t v58 = (char *)v111 + v56;
    uint64_t v59 = sub_255EEE280();
    uint64_t v60 = (void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16);
    char v106 = *v60;
    (*v60)(v57, v58, v59);
    uint64_t v61 = v107[7];
    char v62 = (char *)v109 + v61;
    char v63 = (char *)v111 + v61;
    uint64_t v64 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
    *(void *)((char *)v109 + v107[8]) = *(void *)((char *)v111 + v107[8]);
    uint64_t v65 = v107[9];
    uint64_t v66 = (char *)v109 + v65;
    uint64_t v67 = (char *)v111 + v65;
    swift_retain();
    if (v19(v67, 1, v108))
    {
      sub_255D80868(0);
      memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v66, v67, v108);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v66, 0, 1, v108);
    }
    uint64_t v69 = a3[5];
    uint64_t v70 = a3[6];
    uint64_t v71 = (char *)v109 + v69;
    uint64_t v72 = (char *)v111 + v69;
    *uint64_t v71 = *v72;
    *((void *)v71 + 1) = *((void *)v72 + 1);
    uint64_t v73 = (char *)v109 + v70;
    uint64_t v74 = (char *)v111 + v70;
    swift_retain();
    if (v19(v74, 1, v108))
    {
      sub_255D80868(0);
      memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v73, v74, v108);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v73, 0, 1, v108);
    }
    sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    *(void *)&v73[*(int *)(v76 + 28)] = *(void *)&v74[*(int *)(v76 + 28)];
    uint64_t v77 = a3[7];
    uint64_t v78 = (void *)((char *)v109 + v77);
    uint64_t v79 = (void *)((char *)v111 + v77);
    uint64_t v80 = *(void *)((char *)v111 + v77 + 8);
    swift_retain();
    if (v80)
    {
      void *v78 = *v79;
      v78[1] = v80;
      uint64_t v81 = v79[3];
      v78[2] = v79[2];
      v78[3] = v81;
      uint64_t v82 = v79[5];
      v78[4] = v79[4];
      v78[5] = v82;
      v78[6] = v79[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v83 = *((_OWORD *)v79 + 1);
      *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
      *((_OWORD *)v78 + 1) = v83;
      *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
      v78[6] = v79[6];
    }
    v78[7] = v79[7];
    uint64_t v84 = a3[8];
    uint64_t v85 = a3[9];
    id v86 = (char *)v109 + v84;
    char v87 = (char *)v111 + v84;
    uint64_t v88 = *(void *)v87;
    LOBYTE(v87) = v87[8];
    *(void *)id v86 = v88;
    v86[8] = (char)v87;
    uint64_t v89 = (char *)v109 + v85;
    uint64_t v90 = (char *)v111 + v85;
    sub_255DF8D94(0, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
    swift_retain();
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v106(v89, v90, v59);
    }
    else
    {
      *(void *)uint64_t v89 = *(void *)v90;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v91 = a3[10];
    uint64_t v92 = (void *)((char *)v109 + v91);
    uint64_t v93 = (void *)((char *)v111 + v91);
    sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v94 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v94 - 8) + 16))(v92, v93, v94);
    }
    else
    {
      void *v92 = *v93;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v95 = a3[11];
    uint64_t v96 = (void *)((char *)v109 + v95);
    uint64_t v97 = (char *)v111 + v95;
    uint64_t v99 = *(void **)v97;
    uint64_t v98 = *((void *)v97 + 1);
    void *v96 = v99;
    v96[1] = v98;
    id v100 = v99;
  }
  return v25;
}

void sub_255DF46B8(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  int v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[14];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v28 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(v4 + v5[19]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_255D80D04(*v11, v12);
  }
  uint64_t v13 = v4 + v5[20];
  uint64_t v14 = sub_255EEDF60();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }

  uint64_t v16 = v4 + v5[22];
  if (!v9(v16, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v16, v7);
  }
  uint64_t v17 = a1 + v3[6];
  uint64_t v18 = sub_255EEE280();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(v17, v18);
  uint64_t v20 = a1 + v3[7];
  uint64_t v21 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  swift_release();
  uint64_t v22 = a1 + v3[9];
  if (!v9(v22, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v22, v7);
  }
  swift_release();
  uint64_t v23 = a1 + a2[6];
  if (!v9(v23, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v23, v7);
  }
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  swift_release();
  if (*(void *)(a1 + a2[7] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  uint64_t v24 = a1 + a2[9];
  sub_255DF8D94(0, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v19(v24, v18);
  }
  else {
    swift_release();
  }
  uint64_t v25 = a1 + a2[10];
  sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  }
  else
  {
    swift_release();
  }
  uint64_t v27 = *(void **)(a1 + a2[11]);
}

void *sub_255DF4C0C(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v103 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = v103[5];
  char v105 = a1;
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v108 = a2;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = v9;
  uint64_t v11 = *(void *)((char *)a2 + v6 + 16);
  uint64_t v10 = *(void *)((char *)a2 + v6 + 24);
  void v7[2] = v11;
  v7[3] = v10;
  uint64_t v12 = *((void *)v8 + 5);
  v7[4] = *((void *)v8 + 4);
  v7[5] = v12;
  uint64_t v13 = *((void *)v8 + 7);
  v7[6] = *((void *)v8 + 6);
  v7[7] = v13;
  uint64_t v14 = *((void *)v8 + 9);
  v7[8] = *((void *)v8 + 8);
  v7[9] = v14;
  uint64_t v15 = *((void *)v8 + 11);
  v7[10] = *((void *)v8 + 10);
  v7[11] = v15;
  id v100 = (void *)*((void *)v8 + 12);
  unint64_t v101 = (void *)*((void *)v8 + 13);
  v7[12] = v100;
  v7[13] = v101;
  char v102 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v102[13];
  __dst = (char *)v7 + v16;
  uint64_t v99 = &v8[v16];
  uint64_t v17 = sub_255EEE100();
  uint64_t v107 = *(void *)(v17 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = v100;
  id v20 = v101;
  uint64_t v109 = v18;
  if (v18(v99, 1, v17))
  {
    sub_255D80868(0);
    memcpy(__dst, v99, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v107;
  }
  else
  {
    uint64_t v22 = v107;
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(__dst, v99, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v17);
  }
  uint64_t v23 = v102[14];
  uint64_t v24 = (char *)v7 + v23;
  uint64_t v25 = &v8[v23];
  uint64_t v104 = v17;
  if (v18(&v8[v23], 1, v17))
  {
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v17);
  }
  uint64_t v27 = v102[15];
  uint64_t v28 = (void *)((char *)v7 + v27);
  uint64_t v29 = &v8[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *uint64_t v28 = *(void *)v29;
  v28[1] = v30;
  uint64_t v31 = v102[16];
  uint64_t v32 = (void *)((char *)v7 + v31);
  uint64_t v33 = &v8[v31];
  uint64_t v34 = *((void *)v33 + 1);
  void *v32 = *(void *)v33;
  v32[1] = v34;
  *((unsigned char *)v7 + v102[17]) = v8[v102[17]];
  *((unsigned char *)v7 + v102[18]) = v8[v102[18]];
  uint64_t v35 = v102[19];
  uint64_t v36 = (char *)v7 + v35;
  uint64_t v37 = (uint64_t *)&v8[v35];
  unint64_t v38 = *(void *)&v8[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *v37;
    sub_255D80890(*v37, v38);
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }
  uint64_t v40 = v102[20];
  unint64_t v41 = (char *)v7 + v40;
  uint64_t v42 = &v8[v40];
  uint64_t v43 = sub_255EEDF60();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_255DF8D94(0, &qword_269F350B8, MEMORY[0x270FA8118], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v46 = v102[21];
  uint64_t v47 = *(void **)&v8[v46];
  *(void *)((char *)v7 + v46) = v47;
  uint64_t v48 = v102[22];
  uint64_t v49 = (char *)v7 + v48;
  uint64_t v50 = &v8[v48];
  id v51 = v47;
  if (v18(v50, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v49, v50, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v49, 0, 1, v17);
  }
  uint64_t v53 = v103[6];
  id v54 = (char *)v105 + v53;
  uint64_t v55 = (char *)v108 + v53;
  uint64_t v56 = sub_255EEE280();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
  v57(v54, v55, v56);
  uint64_t v58 = v103[7];
  uint64_t v59 = (char *)v105 + v58;
  uint64_t v60 = (char *)v108 + v58;
  uint64_t v61 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
  *(void *)((char *)v105 + v103[8]) = *(void *)((char *)v108 + v103[8]);
  uint64_t v62 = v103[9];
  char v63 = (char *)v105 + v62;
  uint64_t v64 = (char *)v108 + v62;
  swift_retain();
  if (v109(v64, 1, v104))
  {
    sub_255D80868(0);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v63, v64, v104);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v63, 0, 1, v104);
  }
  uint64_t v66 = a3[5];
  uint64_t v67 = a3[6];
  uint64_t v68 = (char *)v105 + v66;
  uint64_t v69 = (char *)v108 + v66;
  *uint64_t v68 = *v69;
  *((void *)v68 + 1) = *((void *)v69 + 1);
  uint64_t v70 = (char *)v105 + v67;
  uint64_t v71 = (char *)v108 + v67;
  swift_retain();
  if (v109(v71, 1, v104))
  {
    sub_255D80868(0);
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v70, v71, v104);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v70, 0, 1, v104);
  }
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v70[*(int *)(v73 + 28)] = *(void *)&v71[*(int *)(v73 + 28)];
  uint64_t v74 = a3[7];
  uint64_t v75 = (void *)((char *)v105 + v74);
  uint64_t v76 = (void *)((char *)v108 + v74);
  uint64_t v77 = *(void *)((char *)v108 + v74 + 8);
  swift_retain();
  if (v77)
  {
    void *v75 = *v76;
    v75[1] = v77;
    uint64_t v78 = v76[3];
    v75[2] = v76[2];
    v75[3] = v78;
    uint64_t v79 = v76[5];
    v75[4] = v76[4];
    v75[5] = v79;
    v75[6] = v76[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v80 = *((_OWORD *)v76 + 1);
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v80;
    *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
    v75[6] = v76[6];
  }
  v75[7] = v76[7];
  uint64_t v81 = a3[8];
  uint64_t v82 = a3[9];
  long long v83 = (char *)v105 + v81;
  uint64_t v84 = (char *)v108 + v81;
  uint64_t v85 = *(void *)v84;
  LOBYTE(v84) = v84[8];
  *(void *)long long v83 = v85;
  v83[8] = (char)v84;
  id v86 = (char *)v105 + v82;
  char v87 = (char *)v108 + v82;
  sub_255DF8D94(0, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
  swift_retain();
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v57(v86, v87, v56);
  }
  else
  {
    *(void *)id v86 = *(void *)v87;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v88 = a3[10];
  uint64_t v89 = (void *)((char *)v105 + v88);
  uint64_t v90 = (void *)((char *)v108 + v88);
  sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v91 = sub_255EEE730();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v91 - 8) + 16))(v89, v90, v91);
  }
  else
  {
    *uint64_t v89 = *v90;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v92 = a3[11];
  uint64_t v93 = (void *)((char *)v105 + v92);
  uint64_t v94 = (char *)v108 + v92;
  uint64_t v96 = *(void **)v94;
  uint64_t v95 = *((void *)v94 + 1);
  *uint64_t v93 = v96;
  v93[1] = v95;
  id v97 = v96;
  return v105;
}

char *sub_255DF5574(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v122 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v5 = v122[5];
  uint64_t v124 = a2;
  uint64_t v126 = a1;
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = *(void *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 2) = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 3) = v7[3];
  *((void *)v6 + 4) = v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 5) = v7[5];
  *((void *)v6 + 6) = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 7) = v7[7];
  *((void *)v6 + 8) = v7[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 9) = v7[9];
  *((void *)v6 + 10) = v7[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 11) = v7[11];
  uint64_t v8 = (void *)*((void *)v6 + 12);
  uint64_t v9 = (void *)v7[12];
  *((void *)v6 + 12) = v9;
  id v10 = v9;

  uint64_t v11 = (void *)*((void *)v6 + 13);
  uint64_t v12 = (void *)v7[13];
  *((void *)v6 + 13) = v12;
  id v13 = v12;

  uint64_t v14 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v15 = v14[13];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = (char *)v7 + v15;
  uint64_t v18 = sub_255EEE100();
  uint64_t v19 = *(void *)(v18 - 8);
  id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  uint64_t v129 = v20;
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_255D80868(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[14];
  uint64_t v25 = &v6[v24];
  uint64_t v26 = (char *)v7 + v24;
  int v27 = v20(&v6[v24], 1, v18);
  int v28 = v20(v26, 1, v18);
  uint64_t v123 = v18;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_255D80868(0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  uint64_t v30 = v14[15];
  uint64_t v31 = &v6[v30];
  uint64_t v32 = (void *)((char *)v7 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[16];
  uint64_t v34 = &v6[v33];
  uint64_t v35 = (void *)((char *)v7 + v33);
  *(void *)uint64_t v34 = *v35;
  *((void *)v34 + 1) = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = *((unsigned char *)v7 + v14[17]);
  v6[v14[18]] = *((unsigned char *)v7 + v14[18]);
  uint64_t v36 = v14[19];
  uint64_t v37 = (uint64_t *)&v6[v36];
  unint64_t v38 = (void *)((char *)v7 + v36);
  unint64_t v39 = *(void *)((char *)v7 + v36 + 8);
  if (*(void *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      uint64_t v40 = *v38;
      sub_255D80890(*v38, v39);
      uint64_t *v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v37);
LABEL_18:
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  uint64_t v41 = *v38;
  sub_255D80890(*v38, v39);
  uint64_t v42 = *v37;
  unint64_t v43 = v37[1];
  uint64_t *v37 = v41;
  v37[1] = v39;
  sub_255D80D04(v42, v43);
LABEL_20:
  uint64_t v44 = v14[20];
  uint64_t v45 = &v6[v44];
  uint64_t v46 = (char *)v7 + v44;
  uint64_t v47 = sub_255EEDF60();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (v50)
  {
    uint64_t v52 = v124;
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v52 = v124;
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_255DF8D94(0, &qword_269F350B8, MEMORY[0x270FA8118], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  id v54 = v126;
  uint64_t v55 = v14[21];
  uint64_t v56 = *(void **)&v6[v55];
  uint64_t v57 = *(void **)((char *)v7 + v55);
  *(void *)&v6[v55] = v57;
  id v58 = v57;

  uint64_t v59 = v14[22];
  uint64_t v60 = &v6[v59];
  uint64_t v61 = (char *)v7 + v59;
  int v62 = v129(&v6[v59], 1, v123);
  int v63 = v129(v61, 1, v123);
  uint64_t v64 = a3;
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v60, v61, v123);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v60, 0, 1, v123);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v60, v123);
LABEL_31:
    sub_255D80868(0);
    memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v60, v61, v123);
LABEL_32:
  uint64_t v66 = v122[6];
  uint64_t v67 = &v126[v66];
  uint64_t v68 = &v52[v66];
  uint64_t v69 = sub_255EEE280();
  uint64_t v125 = *(void *)(v69 - 8);
  uint64_t v127 = v69;
  (*(void (**)(char *, char *))(v125 + 24))(v67, v68);
  uint64_t v70 = v122[7];
  uint64_t v71 = &v54[v70];
  uint64_t v72 = &v52[v70];
  uint64_t v73 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 24))(v71, v72, v73);
  *(void *)&v54[v122[8]] = *(void *)&v52[v122[8]];
  swift_retain();
  swift_release();
  uint64_t v74 = v122[9];
  uint64_t v75 = &v54[v74];
  uint64_t v76 = &v52[v74];
  LODWORD(v72) = v129(&v54[v74], 1, v123);
  int v77 = v129(v76, 1, v123);
  if (v72)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v75, v76, v123);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v75, 0, 1, v123);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v75, v123);
LABEL_37:
    sub_255D80868(0);
    memcpy(v75, v76, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v75, v76, v123);
LABEL_38:
  uint64_t v79 = a3[5];
  long long v80 = &v54[v79];
  uint64_t v81 = &v52[v79];
  char *v80 = *v81;
  *((void *)v80 + 1) = *((void *)v81 + 1);
  swift_retain();
  swift_release();
  uint64_t v82 = a3[6];
  long long v83 = &v54[v82];
  uint64_t v84 = &v52[v82];
  int v85 = v129(&v54[v82], 1, v123);
  int v86 = v129(v84, 1, v123);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v83, v84, v123);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v83, 0, 1, v123);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v83, v123);
LABEL_43:
    sub_255D80868(0);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v83, v84, v123);
LABEL_44:
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v83[*(int *)(v88 + 28)] = *(void *)&v84[*(int *)(v88 + 28)];
  swift_retain();
  swift_release();
  uint64_t v89 = a3[7];
  uint64_t v90 = &v54[v89];
  uint64_t v91 = &v52[v89];
  uint64_t v92 = *(void *)&v54[v89 + 8];
  uint64_t v93 = *(void *)&v52[v89 + 8];
  if (v92)
  {
    if (v93)
    {
      *(void *)uint64_t v90 = *(void *)v91;
      *((void *)v90 + 1) = *((void *)v91 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v90 + 2) = *((void *)v91 + 2);
      *((void *)v90 + 3) = *((void *)v91 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v90 + 4) = *((void *)v91 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v90 + 5) = *((void *)v91 + 5);
      *((void *)v90 + 6) = *((void *)v91 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)v90);
      long long v95 = *((_OWORD *)v91 + 1);
      long long v94 = *((_OWORD *)v91 + 2);
      long long v96 = *(_OWORD *)v91;
      *((void *)v90 + 6) = *((void *)v91 + 6);
      *((_OWORD *)v90 + 1) = v95;
      *((_OWORD *)v90 + 2) = v94;
      *(_OWORD *)uint64_t v90 = v96;
    }
  }
  else if (v93)
  {
    *(void *)uint64_t v90 = *(void *)v91;
    *((void *)v90 + 1) = *((void *)v91 + 1);
    *((void *)v90 + 2) = *((void *)v91 + 2);
    *((void *)v90 + 3) = *((void *)v91 + 3);
    *((void *)v90 + 4) = *((void *)v91 + 4);
    *((void *)v90 + 5) = *((void *)v91 + 5);
    *((void *)v90 + 6) = *((void *)v91 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v97 = *(_OWORD *)v91;
    long long v98 = *((_OWORD *)v91 + 1);
    long long v99 = *((_OWORD *)v91 + 2);
    *((void *)v90 + 6) = *((void *)v91 + 6);
    *((_OWORD *)v90 + 1) = v98;
    *((_OWORD *)v90 + 2) = v99;
    *(_OWORD *)uint64_t v90 = v97;
  }
  *((void *)v90 + 7) = *((void *)v91 + 7);
  swift_retain();
  swift_release();
  uint64_t v100 = a3[8];
  unint64_t v101 = &v54[v100];
  char v102 = &v52[v100];
  uint64_t v103 = *(void *)v102;
  LOBYTE(v102) = v102[8];
  *(void *)unint64_t v101 = v103;
  v101[8] = (char)v102;
  swift_retain();
  swift_release();
  if (v54 != v52)
  {
    uint64_t v104 = a3[9];
    char v105 = &v54[v104];
    char v106 = &v52[v104];
    uint64_t v107 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9930];
    uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DF3C3C((uint64_t)&v54[v104], &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
    sub_255DF8D94(0, &qword_269F35318, v107, v108);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v105, v106, v127);
    }
    else
    {
      *(void *)char v105 = *(void *)v106;
      swift_retain();
    }
    uint64_t v64 = a3;
    swift_storeEnumTagMultiPayload();
    uint64_t v109 = a3[10];
    uint64_t v110 = &v54[v109];
    id v111 = &v52[v109];
    uint64_t v112 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DF3C3C((uint64_t)&v54[v109], (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    sub_255DF8D94(0, (unint64_t *)&qword_269F35580, v112, v113);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v114 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 16))(v110, v111, v114);
    }
    else
    {
      *(void *)uint64_t v110 = *(void *)v111;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v115 = v64[11];
  uint64_t v116 = &v54[v115];
  Swift::String_optional v117 = &v52[v115];
  uint64_t v118 = *(void **)&v54[v115];
  uint64_t v119 = *(void **)v117;
  *(void *)uint64_t v116 = *(void *)v117;
  id v120 = v119;

  *((void *)v116 + 1) = *((void *)v117 + 1);
  return v54;
}

_OWORD *sub_255DF633C(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v67 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v5 = v67[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = &a2[v5];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&a2[v5];
  *((void *)v6 + 2) = *(void *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((void *)v6 + 11) = *(void *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  uint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  id v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v70(v11, 1, v12))
  {
    sub_255D80868(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v68 = v13;
  if (v70(&v7[v15], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  id v20 = &v6[v19];
  int v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255DF8D94(0, &qword_269F350B8, MEMORY[0x270FA8118], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v70(&v7[v25], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = v67[6];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = &a2[v29];
  uint64_t v32 = sub_255EEE280();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  uint64_t v34 = v67[7];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = &a2[v34];
  uint64_t v37 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  *(void *)((char *)a1 + v67[8]) = *(void *)&a2[v67[8]];
  uint64_t v38 = v67[9];
  unint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = &a2[v38];
  if (v70(&a2[v38], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v39, v40, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v39, 0, 1, v12);
  }
  uint64_t v42 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)&a2[a3[5]];
  unint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = &a2[v42];
  if (v70(&a2[v42], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v43, v44, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v43, 0, 1, v12);
  }
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v43[*(int *)(v46 + 28)] = *(void *)&v44[*(int *)(v46 + 28)];
  uint64_t v47 = a3[7];
  uint64_t v48 = a3[8];
  uint64_t v49 = (_OWORD *)((char *)a1 + v47);
  int v50 = &a2[v47];
  long long v51 = *((_OWORD *)v50 + 3);
  v49[2] = *((_OWORD *)v50 + 2);
  v49[3] = v51;
  long long v52 = *((_OWORD *)v50 + 1);
  *uint64_t v49 = *(_OWORD *)v50;
  v49[1] = v52;
  uint64_t v53 = (char *)a1 + v48;
  id v54 = &a2[v48];
  v53[8] = v54[8];
  *(void *)uint64_t v53 = *(void *)v54;
  uint64_t v55 = a3[9];
  uint64_t v56 = (char *)a1 + v55;
  uint64_t v57 = &a2[v55];
  sub_255DF8D94(0, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
  uint64_t v59 = v58;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v33(v56, v57, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v56, v57, *(void *)(*(void *)(v59 - 8) + 64));
  }
  uint64_t v60 = a3[10];
  uint64_t v61 = (char *)a1 + v60;
  int v62 = &a2[v60];
  sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  uint64_t v64 = v63;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v65 = sub_255EEE730();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 32))(v61, v62, v65);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v61, v62, *(void *)(*(void *)(v64 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)&a2[a3[11]];
  return a1;
}

char *sub_255DF6B28(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  char v122 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = v122[5];
  uint64_t v7 = &a1[v6];
  uint64_t v125 = a2;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *(void *)uint64_t v7 = *(void *)&a2[v6];
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRelease();
  uint64_t v10 = *((void *)v8 + 4);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  *((void *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v8 + 6);
  *((void *)v7 + 5) = *((void *)v8 + 5);
  *((void *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v8 + 8);
  *((void *)v7 + 7) = *((void *)v8 + 7);
  *((void *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v8 + 10);
  *((void *)v7 + 9) = *((void *)v8 + 9);
  *((void *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)*((void *)v7 + 12);
  uint64_t v15 = *((void *)v8 + 12);
  *((void *)v7 + 11) = *((void *)v8 + 11);
  *((void *)v7 + 12) = v15;

  uint64_t v16 = (void *)*((void *)v7 + 13);
  *((void *)v7 + 13) = *((void *)v8 + 13);

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v7[v18];
  id v20 = &v8[v18];
  uint64_t v21 = sub_255EEE100();
  uint64_t v126 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v126 + 48);
  int v23 = v22(v19, 1, v21);
  uint64_t v127 = v22;
  int v24 = v22(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v126 + 8))(v19, v21);
LABEL_6:
    sub_255D80868(0);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v126 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v26 = v17[14];
  int v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  int v29 = v22(&v7[v26], 1, v21);
  int v30 = v22(v28, 1, v21);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v27, v28, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v27, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v126 + 8))(v27, v21);
LABEL_12:
    sub_255D80868(0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v126 + 40))(v27, v28, v21);
LABEL_13:
  uint64_t v32 = v17[15];
  uint64_t v33 = &v7[v32];
  uint64_t v34 = (uint64_t *)&v8[v32];
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = v17[16];
  uint64_t v38 = &v7[v37];
  unint64_t v39 = (uint64_t *)&v8[v37];
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  uint64_t v42 = v17[19];
  uint64_t v43 = (uint64_t)&v7[v42];
  uint64_t v44 = &v8[v42];
  unint64_t v45 = *(void *)&v7[v42 + 8];
  uint64_t v124 = a1;
  if (v45 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    goto LABEL_18;
  }
  unint64_t v46 = *((void *)v44 + 1);
  if (v46 >> 60 == 15)
  {
    sub_255D81EF8(v43);
    goto LABEL_16;
  }
  uint64_t v47 = *(void *)v43;
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v43 + 8) = v46;
  sub_255D80D04(v47, v45);
LABEL_18:
  uint64_t v48 = v17[20];
  uint64_t v49 = &v7[v48];
  int v50 = &v8[v48];
  uint64_t v51 = sub_255EEDF60();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    uint64_t v56 = v21;
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v49, v50, v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v56 = v21;
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v49, v51);
LABEL_23:
    sub_255DF8D94(0, &qword_269F350B8, MEMORY[0x270FA8118], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v49, v50, v51);
LABEL_24:
  uint64_t v58 = v17[21];
  uint64_t v59 = *(void **)&v7[v58];
  *(void *)&v7[v58] = *(void *)&v8[v58];

  uint64_t v60 = v17[22];
  uint64_t v61 = &v7[v60];
  int v62 = &v8[v60];
  int v63 = v127(&v7[v60], 1, v56);
  int v64 = v127(v62, 1, v56);
  uint64_t v65 = v125;
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v61, v62, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v61, 0, 1, v56);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v126 + 8))(v61, v56);
LABEL_29:
    sub_255D80868(0);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v126 + 40))(v61, v62, v56);
LABEL_30:
  uint64_t v67 = v122[6];
  uint64_t v68 = &v124[v67];
  uint64_t v69 = &v125[v67];
  uint64_t v70 = sub_255EEE280();
  uint64_t v121 = *(void *)(v70 - 8);
  (*(void (**)(char *, char *, uint64_t))(v121 + 40))(v68, v69, v70);
  uint64_t v71 = v122[7];
  uint64_t v72 = &v124[v71];
  uint64_t v73 = &v125[v71];
  uint64_t v74 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 40))(v72, v73, v74);
  *(void *)&v124[v122[8]] = *(void *)&v125[v122[8]];
  swift_release();
  uint64_t v75 = v122[9];
  uint64_t v76 = &v124[v75];
  int v77 = &v125[v75];
  LODWORD(v73) = v127(&v124[v75], 1, v56);
  int v78 = v127(v77, 1, v56);
  if (v73)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v76, v77, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v76, 0, 1, v56);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v78)
  {
    (*(void (**)(char *, uint64_t))(v126 + 8))(v76, v56);
LABEL_35:
    sub_255D80868(0);
    memcpy(v76, v77, *(void *)(*(void *)(v79 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v126 + 40))(v76, v77, v56);
LABEL_36:
  uint64_t v80 = a3[5];
  uint64_t v81 = &v124[v80];
  uint64_t v82 = &v125[v80];
  char *v81 = *v82;
  *((void *)v81 + 1) = *((void *)v82 + 1);
  swift_release();
  uint64_t v83 = a3[6];
  uint64_t v84 = &v124[v83];
  int v85 = &v125[v83];
  int v86 = v127(&v124[v83], 1, v56);
  int v87 = v127(v85, 1, v56);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v84, v85, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v84, 0, 1, v56);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v126 + 8))(v84, v56);
LABEL_41:
    sub_255D80868(0);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v126 + 40))(v84, v85, v56);
LABEL_42:
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  *(void *)&v84[*(int *)(v89 + 28)] = *(void *)&v85[*(int *)(v89 + 28)];
  swift_release();
  uint64_t v90 = a3[7];
  uint64_t v91 = &v124[v90];
  uint64_t v92 = &v125[v90];
  if (*(void *)&v124[v90 + 8])
  {
    uint64_t v93 = *((void *)v92 + 1);
    if (v93)
    {
      *(void *)uint64_t v91 = *(void *)v92;
      *((void *)v91 + 1) = v93;
      swift_bridgeObjectRelease();
      uint64_t v94 = *((void *)v92 + 3);
      *((void *)v91 + 2) = *((void *)v92 + 2);
      *((void *)v91 + 3) = v94;
      swift_bridgeObjectRelease();
      *((void *)v91 + 4) = *((void *)v92 + 4);
      swift_bridgeObjectRelease();
      uint64_t v95 = *((void *)v92 + 6);
      *((void *)v91 + 5) = *((void *)v92 + 5);
      *((void *)v91 + 6) = v95;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
    sub_255DB9AF8((uint64_t)v91);
  }
  long long v96 = *((_OWORD *)v92 + 1);
  *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
  *((_OWORD *)v91 + 1) = v96;
  *((_OWORD *)v91 + 2) = *((_OWORD *)v92 + 2);
  *((void *)v91 + 6) = *((void *)v92 + 6);
LABEL_47:
  *((void *)v91 + 7) = *((void *)v92 + 7);
  swift_release();
  uint64_t v97 = a3[8];
  long long v98 = &v124[v97];
  long long v99 = &v125[v97];
  uint64_t v100 = *(void *)v99;
  LOBYTE(v99) = v99[8];
  *(void *)long long v98 = v100;
  v98[8] = (char)v99;
  swift_release();
  if (v124 != v125)
  {
    uint64_t v101 = a3[9];
    char v102 = &v124[v101];
    uint64_t v103 = &v125[v101];
    uint64_t v104 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9930];
    char v105 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DF3C3C((uint64_t)&v124[v101], &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
    sub_255DF8D94(0, &qword_269F35318, v104, v105);
    uint64_t v107 = v106;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v102, v103, v70);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v102, v103, *(void *)(*(void *)(v107 - 8) + 64));
    }
    uint64_t v65 = v125;
    uint64_t v108 = a3[10];
    uint64_t v109 = &v124[v108];
    uint64_t v110 = &v125[v108];
    id v111 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    uint64_t v112 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255DF3C3C((uint64_t)&v124[v108], (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    sub_255DF8D94(0, (unint64_t *)&qword_269F35580, v111, v112);
    uint64_t v114 = v113;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v115 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v109, v110, v115);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v109, v110, *(void *)(*(void *)(v114 - 8) + 64));
    }
  }
  uint64_t v116 = a3[11];
  Swift::String_optional v117 = &v124[v116];
  uint64_t v118 = (void *)((char *)v65 + v116);
  uint64_t v119 = *(void **)&v124[v116];
  *(void *)Swift::String_optional v117 = *v118;

  *((void *)v117 + 1) = v118[1];
  return v124;
}

uint64_t sub_255DF77A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DF77BC);
}

uint64_t sub_255DF77BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = a3[6];
LABEL_13:
    uint64_t v10 = a1 + v16;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    goto LABEL_14;
  }
  sub_255DF8D94(0, &qword_269F35330, MEMORY[0x270FA9930], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v15 = *(void *)(v17 - 8);
    uint64_t v16 = a3[9];
    goto LABEL_13;
  }
  sub_255DF8D94(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a3[10];
  return v19(v21, a2, v20);
}

uint64_t sub_255DF7A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DF7A30);
}

uint64_t sub_255DF7A30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[5] + 8) = a2;
    return result;
  }
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  sub_255DF8D94(0, &qword_269F35330, MEMORY[0x270FA9930], MEMORY[0x263F185D0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[9];
    goto LABEL_9;
  }
  sub_255DF8D94(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[10];
  return v18(v20, a2, a2, v19);
}

void sub_255DF7C84()
{
  type metadata accessor for MedicalIDPregnancyViewModel();
  if (v0 <= 0x3F)
  {
    sub_255DF8D94(319, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
    if (v1 <= 0x3F)
    {
      sub_255DF8D94(319, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
      if (v2 <= 0x3F)
      {
        sub_255DF8D94(319, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_255DF7E64()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DF7E80()
{
  if (!qword_269F36258)
  {
    sub_255DF7F14();
    sub_255DF8F00(&qword_269F362B8, (void (*)(uint64_t))sub_255DF7F14);
    unint64_t v0 = type metadata accessor for MedicalIDEditModal();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36258);
    }
  }
}

void sub_255DF7F14()
{
  if (!qword_269F36260)
  {
    sub_255DF801C(255);
    sub_255DF8D94(255, &qword_269F36298, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView, MEMORY[0x263F8D8F0]);
    sub_255DF8F00(&qword_269F362A0, sub_255DF801C);
    sub_255DD25F8();
    sub_255DF8228();
    unint64_t v0 = type metadata accessor for EditingScrollView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36260);
    }
  }
}

void sub_255DF801C(uint64_t a1)
{
}

void sub_255DF8050()
{
  if (!qword_269F36270)
  {
    sub_255DF80C0();
    sub_255DF8154();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F36270);
    }
  }
}

void sub_255DF80C0()
{
  if (!qword_269F36278)
  {
    sub_255DF81D8(255, &qword_269F36280, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B6B8]);
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36278);
    }
  }
}

void sub_255DF8154()
{
  if (!qword_269F36288)
  {
    sub_255DF81D8(255, &qword_269F36290, MEMORY[0x263F1BA08], MEMORY[0x263F1BA00], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36288);
    }
  }
}

void sub_255DF81D8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_255DF8228()
{
  unint64_t result = qword_269F362A8;
  if (!qword_269F362A8)
  {
    sub_255DF8D94(255, &qword_269F36298, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView, MEMORY[0x263F8D8F0]);
    sub_255DF8F00(&qword_269F362B0, (void (*)(uint64_t))type metadata accessor for MedicalIDPregnancyStatusLabelView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F362A8);
  }
  return result;
}

uint64_t sub_255DF82FC()
{
  type metadata accessor for MedicalIDEditPregnancyModalView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255DF153C();
}

uint64_t sub_255DF83CC()
{
  return sub_255DF8474((uint64_t (*)(uint64_t))sub_255DF209C);
}

uint64_t sub_255DF83E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MedicalIDEditPregnancyModalView() - 8);
  uint64_t v4 = (uint64_t *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  return sub_255DF3328(v4, a1);
}

uint64_t sub_255DF845C()
{
  return sub_255DF8474((uint64_t (*)(uint64_t))sub_255DF3404);
}

uint64_t sub_255DF8474(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for MedicalIDEditPregnancyModalView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

uint64_t objectdestroyTm_6()
{
  int v29 = (int *)type metadata accessor for MedicalIDEditPregnancyModalView();
  uint64_t v27 = *(unsigned __int8 *)(*((void *)v29 - 1) + 80);
  uint64_t v1 = v0 + ((v27 + 16) & ~v27);
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v3 = v1 + v2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = v3 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v28 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = v3 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = v3 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v15, v6);
  }
  uint64_t v16 = v1 + v2[6];
  uint64_t v17 = sub_255EEE280();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = v1 + v2[7];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  uint64_t v21 = v1 + v2[9];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v21, v6);
  }
  swift_release();
  uint64_t v22 = v1 + v29[6];
  if (!v8(v22, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v22, v6);
  }
  sub_255DF8D94(0, &qword_269F35718, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B5D0]);
  swift_release();
  if (*(void *)(v1 + v29[7] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  uint64_t v23 = v1 + v29[9];
  sub_255DF8D94(0, &qword_269F35318, MEMORY[0x270FA9930], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v18(v23, v17);
  }
  else {
    swift_release();
  }
  uint64_t v24 = v1 + v29[10];
  sub_255DF8D94(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_255DF8AD8()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDEditPregnancyModalView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_255DF3598(v2);
}

void sub_255DF8B38(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255DF8B84()
{
  unint64_t result = qword_269F362D8;
  if (!qword_269F362D8)
  {
    sub_255DF81D8(255, &qword_269F36280, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B6B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F362D8);
  }
  return result;
}

uint64_t sub_255DF8C08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255DF8C70(uint64_t a1, uint64_t a2)
{
  sub_255DF81D8(0, &qword_269F36290, MEMORY[0x263F1BA08], MEMORY[0x263F1BA00], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DatePickerEditView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255DF8D00(uint64_t a1, uint64_t a2)
{
  sub_255DF8D94(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_255DF8D94(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255DF8E00()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255DF8E9C()
{
  if (!qword_269F362F0)
  {
    sub_255DD8400();
    sub_255DD84C8();
    unint64_t v0 = type metadata accessor for DatePickerEditView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F362F0);
    }
  }
}

uint64_t sub_255DF8F00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255DF8F48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DF8FA8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DF8FE0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_255DF9028())()
{
  return j_j__swift_endAccess;
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.allSpokenLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_255DF9084())()
{
  return j__swift_endAccess;
}

uint64_t sub_255DF90D8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 40);
  *a2 = *(void *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DF9168()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DF921C()
{
  swift_getKeyPath();
  sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_255DF92B8()
{
  unint64_t result = qword_269F36300;
  if (!qword_269F36300)
  {
    type metadata accessor for MedicalIDSpokenLanguagePickerViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36300);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDSpokenLanguagePickerViewModel()
{
  uint64_t result = qword_269F36310;
  if (!qword_269F36310) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255DF935C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DF9408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DF9474()
{
  return sub_255DF9408(v0[2], v0[3], v0[4]);
}

void (*sub_255DF9494(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI38MedicalIDSpokenLanguagePickerViewModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255DF9084();
  return sub_255DF9580;
}

void sub_255DF9580(void *a1)
{
}

uint64_t sub_255DF958C()
{
  swift_getKeyPath();
  sub_255DF92B8();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  if (*(void *)(v0 + 88)) {
    swift_bridgeObjectRetain();
  }
  sub_255DFC538();
  sub_255EEF980();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_255DF9698(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_255DF96F0;
}

uint64_t sub_255DF96F0(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_255DF958C();
  }
  return result;
}

uint64_t sub_255DF9724@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 88);
  *a2 = *(void *)(v3 + 80);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DF97B4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DF9868@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 88);
  *a1 = *(void *)(v1 + 80);
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DF9900()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DF99A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_255DF958C();
}

uint64_t sub_255DF9A1C()
{
  return sub_255DF99A8(v0[2], v0[3], v0[4]);
}

void (*sub_255DF9A3C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI38MedicalIDSpokenLanguagePickerViewModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255DF9698((uint64_t)v3);
  return sub_255DF9B28;
}

void sub_255DF9B28(void *a1)
{
}

void sub_255DF9B34(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  void *v1 = v1[4];
  swift_getKeyPath();
  sub_255EEE2E0();
  swift_release();
  free(v1);
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.__allocating_init(primaryLanguageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  MedicalIDSpokenLanguagePickerViewModel.init(primaryLanguageCode:)(a1, a2, a3, a4);
  return v8;
}

int64_t MedicalIDSpokenLanguagePickerViewModel.init(primaryLanguageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = v4;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0xE000000000000000;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  sub_255EEE300();
  *(void *)(v5 + 48) = a1;
  *(void *)(v5 + 56) = a2;
  uint64_t v50 = a3;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 72) = a4;
  unint64_t v10 = self;
  uint64_t v52 = a4;
  swift_bridgeObjectRetain();
  uint64_t v53 = a1;
  swift_retain();
  uint64_t v54 = a2;
  swift_retain();
  sub_255EEE1B0();
  unint64_t v11 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend((id)v10, sel_spokenLanguagesForLanguages_includeLanguagesForRegion_, v11, 1);

  uint64_t v13 = sub_255EEFEA0();
  int64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = MEMORY[0x263F8EE78];
  int64_t v51 = v5;
  if (v14)
  {
    v58[0] = MEMORY[0x263F8EE78];
    sub_255DFAB7C(0, v14, 0);
    uint64_t v16 = v15;
    uint64_t v17 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v19 = *(v17 - 1);
      uint64_t v18 = *v17;
      v58[0] = v16;
      unint64_t v21 = *(void *)(v16 + 16);
      unint64_t v20 = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      if (v21 >= v20 >> 1)
      {
        sub_255DFAB7C(v20 > 1, v21 + 1, 1);
        uint64_t v16 = v58[0];
      }
      v17 += 2;
      *(void *)(v16 + 16) = v21 + 1;
      uint64_t v22 = v16 + 16 * v21;
      *(void *)(v22 + 32) = v19;
      *(void *)(v22 + 40) = v18;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    int64_t v5 = v51;
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  *(void *)(v5 + 16) = v16;
  id v23 = objc_msgSend((id)v10, sel_availableSpokenLanguages, v5 + 16);
  uint64_t v24 = sub_255EEFFC0();

  int64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    v58[0] = v15;
    sub_255DFAB7C(0, v25, 0);
    uint64_t v26 = (void *)v15;
    int64_t v5 = sub_255DFC3A8(v24);
    uint64_t v28 = v27;
    char v30 = v29 & 1;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v24 + 32))
    {
      if (((*(void *)(v24 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(v24 + 36) != v28) {
        goto LABEL_37;
      }
      char v55 = v30;
      uint64_t v31 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v5);
      uint64_t v32 = *v31;
      uint64_t v33 = v31[1];
      v58[0] = (uint64_t)v26;
      unint64_t v34 = v26[2];
      unint64_t v10 = v26[3];
      swift_bridgeObjectRetain();
      if (v34 >= v10 >> 1)
      {
        sub_255DFAB7C(v10 > 1, v34 + 1, 1);
        uint64_t v26 = (void *)v58[0];
      }
      void v26[2] = v34 + 1;
      uint64_t v35 = &v26[2 * v34];
      v35[4] = v32;
      v35[5] = v33;
      int64_t v36 = sub_255DFC448(v5, v28, v55 & 1, v24);
      int64_t v5 = v36;
      uint64_t v28 = v37;
      char v30 = v38 & 1;
      if (!--v25)
      {
        sub_255DFC52C(v36, v37, v30);
        swift_bridgeObjectRelease();
        int64_t v5 = v51;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)MEMORY[0x263F8EE78];
LABEL_19:
  v58[0] = (uint64_t)v26;
  swift_bridgeObjectRetain();
  sub_255DFB5DC(v58);
  swift_bridgeObjectRelease();
  *(void *)(v5 + 24) = v58[0];
  v58[0] = v53;
  v58[1] = v54;
  v58[2] = v50;
  v58[3] = v52;
  sub_255DFC538();
  MEMORY[0x25A29B390](&v56);
  uint64_t v28 = v57;
  if (!v57)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_34;
  }
  int64_t v25 = v56;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  v58[0] = v5;
  sub_255DF92B8();
  swift_bridgeObjectRetain();
  sub_255EEE2C0();
  swift_release();
  unint64_t v10 = (unint64_t)v49;
  swift_beginAccess();
  uint64_t v40 = *(void *)(v5 + 16);
  uint64_t v41 = *(void *)(v40 + 16);
  if (!v41)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v26 = *v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v49 = v26;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_29:
      unint64_t v46 = v26[2];
      unint64_t v45 = v26[3];
      if (v46 >= v45 >> 1)
      {
        uint64_t v26 = sub_255DFA87C((void *)(v45 > 1), v46 + 1, 1, v26);
        *uint64_t v49 = v26;
      }
      void v26[2] = v46 + 1;
      uint64_t v47 = &v26[2 * v46];
      v47[4] = v25;
      v47[5] = v28;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_34;
    }
LABEL_38:
    uint64_t v26 = sub_255DFA87C(0, v26[2] + 1, 1, v26);
    *(void *)unint64_t v10 = v26;
    goto LABEL_29;
  }
  uint64_t v42 = (void *)(v40 + 40);
  while (1)
  {
    BOOL v43 = *(v42 - 1) == v25 && v28 == *v42;
    if (v43 || (sub_255EF04A0() & 1) != 0) {
      break;
    }
    v42 += 2;
    if (!--v41) {
      goto LABEL_28;
    }
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
LABEL_34:
  swift_release();
  return v5;
}

uint64_t sub_255DFA1CC()
{
  swift_getKeyPath();
  sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  unint64_t v1 = v0[5];
  uint64_t v2 = v0[4] & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  if (v2)
  {
    swift_beginAccess();
    swift_retain();
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = sub_255DFC80C(v3);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = v0[2];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_255DFA2D4()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  sub_255DF92B8();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v4 = *(void *)(v1 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    swift_retain();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = sub_255DFC80C(v5);
    swift_bridgeObjectRelease();
    swift_release();
    return v6;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI38MedicalIDSpokenLanguagePickerViewModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDSpokenLanguagePickerViewModel.__deallocating_deinit()
{
  MedicalIDSpokenLanguagePickerViewModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_255DFA4B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_255DFCDCC(0, &qword_269F36330, (uint64_t (*)(uint64_t))sub_255D969B0, MEMORY[0x263F8E0F8]);
  sub_255D969B0(0);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 72);
  unint64_t v12 = (*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_255EF03C0();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  sub_255D969B0(0);
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v19 = (unint64_t)v13 + v18;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v19 >= a4 + v18 + *(void *)(v17 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_255DFC5B4(0, v8, v19, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_255DFA74C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_255DFD168(0, &qword_269F36338, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_255DFCE30(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_255DFA87C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_255DFD168(0, &qword_269F36350, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_255DFCF24(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_255DFA9AC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_255DFD168(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_255DFD018(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_255DFAADC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_255DFAB9C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_255DFAAFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_255DFAD1C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_255DFAB1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_255DFAF88(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_255DFAB3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_255DFB114(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_255DFAB5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_255DFB2E0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_255DFAB7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_255DFB450(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_255DFAB9C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_255DFD168(0, &qword_269F36328, MEMORY[0x263F8D538], MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFAD1C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_255DFCDCC(0, &qword_269F36320, (uint64_t (*)(uint64_t))_s15SectionGridItemVMa, MEMORY[0x263F8E0F8]);
  uint64_t v10 = *(void *)(_s15SectionGridItemVMa() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(_s15SectionGridItemVMa() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  unint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFAF88(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_255DFD168(0, &qword_269F36338, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8]) {
      memmove(v13, v14, v8 << 7);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[128 * v8] || v13 >= &v14[128 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFB114(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_255DFCDCC(0, (unint64_t *)&qword_269F36340, (uint64_t (*)(uint64_t))sub_255DFD10C, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 136 * v8) {
      memmove(v10 + 4, a4 + 4, 136 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 136 * v8 || v12 >= v13 + 136 * v8)
  {
    sub_255DFD10C();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFB2E0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_255DFD168(0, &qword_269F36348, (uint64_t)&type metadata for OrganDonationStatus, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFB450(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_255DFD168(0, &qword_269F36350, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFB5DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_255E2E0D8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_255DFB648(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_255DFB648(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_255EF0470();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_129;
    }
    if (v3) {
      return sub_255DFBE64(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_137;
  }
  uint64_t v87 = result;
  uint64_t v84 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)MEMORY[0x263F8EE78];
    uint64_t v93 = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v86 = MEMORY[0x263F8EE78];
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_95:
      if (v11 >= 2)
      {
        uint64_t v78 = *v84;
        do
        {
          unint64_t v79 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_124;
          }
          if (!v78) {
            goto LABEL_136;
          }
          uint64_t v80 = *(void *)&v8[16 * v79 + 32];
          uint64_t v81 = *(void *)&v8[16 * v11 + 24];
          sub_255DFBFBC((char *)(v78 + 16 * v80), (char *)(v78 + 16 * *(void *)&v8[16 * v11 + 16]), v78 + 16 * v81, v93);
          if (v1) {
            break;
          }
          if (v81 < v80) {
            goto LABEL_125;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_255E2C5E0((uint64_t)v8);
          }
          if (v79 >= *((void *)v8 + 2)) {
            goto LABEL_126;
          }
          uint64_t v82 = &v8[16 * v79 + 32];
          *(void *)uint64_t v82 = v80;
          *((void *)v82 + 1) = v81;
          unint64_t v83 = *((void *)v8 + 2);
          if (v11 > v83) {
            goto LABEL_127;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v83 - v11));
          *((void *)v8 + 2) = v83 - 1;
          unint64_t v11 = v83 - 1;
        }
        while (v83 > 2);
      }
LABEL_106:
      swift_bridgeObjectRelease();
      *(void *)(v86 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_255EEFEE0();
    *(void *)(v7 + 16) = v6;
    uint64_t v86 = v7;
    uint64_t v93 = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v85 = *a1 + 24;
  uint64_t v8 = (char *)MEMORY[0x263F8EE78];
  uint64_t v90 = v3;
  uint64_t v94 = *a1;
  while (1)
  {
    uint64_t v12 = v9++;
    uint64_t v89 = v12;
    if (v9 < v3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      sub_255DAD520();
      uint64_t v91 = sub_255EF0240();
      swift_bridgeObjectRelease();
      uint64_t v3 = v90;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v12 + 2;
      if (v12 + 2 < v90)
      {
        uint64_t v13 = v85 + 16 * v12;
        while (1)
        {
          v13 += 16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          uint64_t v14 = sub_255EF0240();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v91 == -1) == (v14 != -1)) {
            break;
          }
          ++v9;
          uint64_t v3 = v90;
          if (v90 == v9)
          {
            uint64_t v9 = v90;
            goto LABEL_22;
          }
        }
        uint64_t v3 = v90;
      }
LABEL_22:
      uint64_t v10 = v94;
      if (v91 == -1)
      {
        if (v9 < v12) {
          goto LABEL_132;
        }
        if (v12 < v9)
        {
          uint64_t v15 = 16 * v9;
          uint64_t v16 = 16 * v12;
          uint64_t v17 = v9;
          uint64_t v18 = v12;
          do
          {
            if (v18 != --v17)
            {
              if (!v94) {
                goto LABEL_135;
              }
              uint64_t v19 = v94 + v15;
              uint64_t v20 = *(void *)(v94 + v16);
              uint64_t v21 = *(void *)(v94 + v16 + 8);
              *(_OWORD *)(v94 + v16) = *(_OWORD *)(v94 + v15 - 16);
              *(void *)(v19 - 16) = v20;
              *(void *)(v19 - 8) = v21;
            }
            ++v18;
            v15 -= 16;
            v16 += 16;
          }
          while (v18 < v17);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_128;
      }
      if (v9 - v12 < v87) {
        break;
      }
    }
LABEL_46:
    if (v9 < v12) {
      goto LABEL_123;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = sub_255E2C330(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    unint64_t v28 = *((void *)v8 + 2);
    unint64_t v27 = *((void *)v8 + 3);
    unint64_t v11 = v28 + 1;
    uint64_t v10 = v94;
    if (v28 >= v27 >> 1)
    {
      int v77 = sub_255E2C330((char *)(v27 > 1), v28 + 1, 1, v8);
      uint64_t v10 = v94;
      uint64_t v8 = v77;
    }
    *((void *)v8 + 2) = v11;
    char v29 = v8 + 32;
    char v30 = &v8[16 * v28 + 32];
    *(void *)char v30 = v12;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v11 - 1;
        if (v11 >= 4)
        {
          int64_t v36 = &v29[16 * v11];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_112;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_113;
          }
          unint64_t v43 = v11 - 2;
          uint64_t v44 = &v29[16 * v11 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_115;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_118;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_122;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_83;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v60 = *((void *)v8 + 4);
            uint64_t v61 = *((void *)v8 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_77;
          }
          uint64_t v33 = *((void *)v8 + 4);
          uint64_t v32 = *((void *)v8 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_114;
        }
        unint64_t v43 = v11 - 2;
        uint64_t v49 = &v29[16 * v11 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_117;
        }
        char v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_120;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_121;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_83:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v54) {
          goto LABEL_116;
        }
        int v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_119;
        }
        if (v65 < v53) {
          goto LABEL_14;
        }
LABEL_85:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v11)
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
        if (!v10) {
          goto LABEL_134;
        }
        uint64_t v71 = v8;
        uint64_t v72 = &v29[16 * v70];
        uint64_t v73 = *(void *)v72;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_255DFBFBC((char *)(v10 + 16 * *(void *)v72), (char *)(v10 + 16 * *(void *)v74), v10 + 16 * v75, v93);
        if (v1) {
          goto LABEL_106;
        }
        if (v75 < v73) {
          goto LABEL_109;
        }
        if (v31 > *((void *)v71 + 2)) {
          goto LABEL_110;
        }
        *(void *)uint64_t v72 = v73;
        *(void *)&v29[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v71 + 2);
        if (v31 >= v76) {
          goto LABEL_111;
        }
        uint64_t v8 = v71;
        unint64_t v11 = v76 - 1;
        memmove(&v29[16 * v31], v74 + 16, 16 * (v76 - 1 - v31));
        *((void *)v71 + 2) = v76 - 1;
        uint64_t v10 = v94;
        if (v76 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    uint64_t v3 = v90;
    if (v9 >= v90) {
      goto LABEL_95;
    }
  }
  uint64_t v22 = v12 + v87;
  if (__OFADD__(v12, v87)) {
    goto LABEL_130;
  }
  if (v22 >= v3) {
    uint64_t v22 = v3;
  }
  if (v22 >= v12)
  {
    if (v9 != v22)
    {
      uint64_t v88 = v22;
      id v23 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v92 = v23;
        do
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          sub_255DAD520();
          uint64_t v24 = sub_255EF0240();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v24 != -1) {
            break;
          }
          if (!v94) {
            goto LABEL_133;
          }
          uint64_t v25 = *v23;
          uint64_t v26 = v23[1];
          *(_OWORD *)id v23 = *((_OWORD *)v23 - 1);
          *(v23 - 1) = v26;
          *(v23 - 2) = v25;
          v23 -= 2;
          ++v12;
        }
        while (v9 != v12);
        ++v9;
        id v23 = v92 + 2;
        uint64_t v12 = v89;
      }
      while (v9 != v88);
      uint64_t v9 = v88;
    }
    goto LABEL_46;
  }
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  uint64_t result = sub_255EF03C0();
  __break(1u);
  return result;
}

uint64_t sub_255DFBE64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v13 = *a4;
    uint64_t v5 = (void *)(*a4 + 16 * a3);
LABEL_5:
    uint64_t v6 = v11;
    uint64_t v12 = v5;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      sub_255DAD520();
      uint64_t v7 = sub_255EF0240();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 != -1)
      {
LABEL_4:
        ++v4;
        uint64_t v5 = v12 + 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v13) {
        break;
      }
      uint64_t v8 = *v5;
      uint64_t v9 = v5[1];
      *(_OWORD *)uint64_t v5 = *((_OWORD *)v5 - 1);
      *(v5 - 1) = v9;
      *(v5 - 2) = v8;
      v5 -= 2;
      if (v4 == ++v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_255DFBFBC(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = a2 - __src;
  int64_t v7 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v7 = a2 - __src;
  }
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 4;
  unint64_t v28 = __src;
  unint64_t v27 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != a2 || &a2[16 * v11] <= a4) {
        memmove(a4, a2, 16 * v11);
      }
      uint64_t v15 = &a4[16 * v11];
      uint64_t v26 = v15;
      unint64_t v28 = v4;
      if (v5 < v4 && v9 >= 16)
      {
        uint64_t v16 = (char *)(a3 - 16);
        uint64_t v17 = v4;
        while (1)
        {
          id v23 = v16 + 16;
          uint64_t v25 = v4;
          uint64_t v18 = v15 - 16;
          v17 -= 16;
          unint64_t v19 = (unint64_t)v15;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
          sub_255DAD520();
          uint64_t v20 = sub_255EF0240();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v20 == -1)
          {
            if (v23 != v25 || v16 >= v25) {
              *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
            }
            unint64_t v28 = v17;
            uint64_t v15 = (char *)v19;
            if (v17 <= v5) {
              goto LABEL_45;
            }
          }
          else
          {
            uint64_t v26 = v18;
            if ((unint64_t)v23 < v19 || (unint64_t)v16 >= v19)
            {
              *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
              uint64_t v17 = v25;
              uint64_t v15 = v18;
              if (v25 <= v5) {
                goto LABEL_45;
              }
            }
            else
            {
              if (v23 != (char *)v19) {
                *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
              }
              uint64_t v17 = v25;
              uint64_t v15 = v18;
              if (v25 <= v5) {
                goto LABEL_45;
              }
            }
          }
          v16 -= 16;
          uint64_t v4 = v17;
          if (v15 <= a4) {
            goto LABEL_45;
          }
        }
      }
      goto LABEL_45;
    }
  }
  else if (v6 >= -15)
  {
    if (a4 != __src || &__src[16 * v8] <= a4) {
      memmove(a4, __src, 16 * v8);
    }
    uint64_t v26 = &a4[16 * v8];
    if ((unint64_t)v4 < a3 && v6 >= 16)
    {
      uint64_t v12 = a4;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
        MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
        sub_255DAD520();
        uint64_t v13 = sub_255EF0240();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v13 == -1)
        {
          uint64_t v14 = v4 + 16;
          if (v5 < v4 || v5 >= v14 || v5 != v4) {
            *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
          }
        }
        else
        {
          if (v5 != v12) {
            *(_OWORD *)uint64_t v5 = *(_OWORD *)v12;
          }
          v12 += 16;
          unint64_t v27 = v12;
          uint64_t v14 = v4;
        }
        v5 += 16;
        if (v12 >= &a4[16 * v8]) {
          break;
        }
        uint64_t v4 = v14;
      }
      while ((unint64_t)v14 < a3);
      unint64_t v28 = v5;
    }
LABEL_45:
    sub_255E2C524((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFC3A8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_255DFC448(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_255DFC52C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_255DFC538()
{
  if (!qword_269F36308)
  {
    sub_255DFD168(255, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EEF9D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36308);
    }
  }
}

uint64_t sub_255DFC5B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    sub_255D969B0(0);
    uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 72);
    unint64_t v10 = a4
        + ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80))
        + v9 * a1;
    unint64_t v11 = a3 + v9 * v4;
    if (v10 >= v11 || v10 + v9 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v11;
    }
  }
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFC70C()
{
  MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  sub_255DAD520();
  char v0 = sub_255EF0250();
  swift_bridgeObjectRelease();
  if (v0)
  {
    char v1 = 1;
  }
  else
  {
    MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
    char v1 = sub_255EF0250();
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

uint64_t sub_255DFC7F4(uint64_t a1)
{
  return sub_255DFC80C(a1);
}

uint64_t sub_255DFC80C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v4 = 0;
  uint64_t v5 = a1 + 40;
  uint64_t v23 = -(uint64_t)v2;
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = MEMORY[0x263F8D310];
  uint64_t v20 = a1 + 40;
  unint64_t v21 = v2;
  do
  {
    uint64_t v22 = v6;
    if (v4 <= v2) {
      unint64_t v8 = v2;
    }
    else {
      unint64_t v8 = v4;
    }
    uint64_t v24 = -(uint64_t)v8;
    uint64_t v9 = (uint64_t *)(v5 + 16 * v4);
    unint64_t v10 = v4 + 1;
    while (1)
    {
      if (v24 + v10 == 1)
      {
        __break(1u);
        return result;
      }
      unint64_t v25 = v10;
      uint64_t v12 = *(v9 - 1);
      uint64_t v11 = *v9;
      swift_getKeyPath();
      sub_255DF92B8();
      swift_bridgeObjectRetain();
      sub_255EEE2D0();
      swift_release();
      swift_bridgeObjectRetain();
      MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
      sub_255DAD520();
      char v13 = sub_255EF0250();
      swift_bridgeObjectRelease();
      if (v13) {
        break;
      }
      MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
      char v14 = sub_255EF0250();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_13;
      }
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v10 = v25 + 1;
      v9 += 2;
      if (v23 + v25 + 1 == 1) {
        return v22;
      }
    }
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = v22;
    uint64_t v15 = v7;
    if ((result & 1) == 0)
    {
      uint64_t result = sub_255DFAB7C(0, *(void *)(v22 + 16) + 1, 1);
      uint64_t v6 = v22;
    }
    uint64_t v5 = v20;
    unint64_t v2 = v21;
    uint64_t v16 = v12;
    unint64_t v18 = *(void *)(v6 + 16);
    unint64_t v17 = *(void *)(v6 + 24);
    if (v18 >= v17 >> 1)
    {
      uint64_t result = sub_255DFAB7C(v17 > 1, v18 + 1, 1);
      uint64_t v16 = v12;
      uint64_t v6 = v22;
    }
    *(void *)(v6 + 16) = v18 + 1;
    uint64_t v19 = v6 + 16 * v18;
    *(void *)(v19 + 32) = v16;
    *(void *)(v19 + 40) = v11;
    unint64_t v4 = v25;
    uint64_t v7 = v15;
  }
  while (v23 + v25);
  return v6;
}

uint64_t sub_255DFCAC0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DFCB10()
{
  return type metadata accessor for MedicalIDSpokenLanguagePickerViewModel();
}

uint64_t sub_255DFCB18()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for MedicalIDSpokenLanguagePickerViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MedicalIDSpokenLanguagePickerViewModel);
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.preferredLanguages.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.preferredLanguages.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.preferredLanguages.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.searchText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.searchText.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.searchText.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.currentlySelectedLanguage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.currentlySelectedLanguage.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.currentlySelectedLanguage.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.__allocating_init(primaryLanguageCode:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.filteredPreferredLanguages.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.filteredAllLanguages.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MedicalIDSpokenLanguagePickerViewModel.languageContainsSearchText(_:searchText:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

void sub_255DFCDCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255DFCE30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFCF24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

uint64_t sub_255DFD018(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

void sub_255DFD10C()
{
  if (!qword_269F36C90)
  {
    sub_255DD21C8();
    unint64_t v0 = _s14OrderedElementVMa();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36C90);
    }
  }
}

void sub_255DFD168(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255DFD1B4()
{
  return sub_255DF9A1C();
}

uint64_t sub_255DFD1CC()
{
  return sub_255DF9474();
}

uint64_t MedicalIDHeightFormatter.init(locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_255EEE200();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  id v6 = sub_255DFE4B8(a1, 2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  uint64_t result = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)(a2 + *(int *)(result + 20)) = v6;
  return result;
}

Swift::String __swiftcall MedicalIDHeightFormatter.localizedUnitDescription()()
{
  id v1 = sub_255DFE4B8(v0, 1);
  sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *))(v4 + 16))((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255DFEB88(0, &qword_269F36358, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA8C78]);
  MEMORY[0x270FA5388](v5 - 8);
  sub_255EEDFF0();
  id v6 = (void *)sub_255EF0090();
  id v7 = objc_msgSend(v1, sel_stringFromUnit_, v6);

  uint64_t v8 = sub_255EEFD90();
  unint64_t v10 = v9;

  uint64_t v11 = v8;
  uint64_t v12 = v10;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

void sub_255DFD46C(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
  uint64_t v5 = sub_255EEE200();
  MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_255DFEB88(0, &qword_269F36358, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA8C78]);
  MEMORY[0x270FA5388](v8 - 8);
  sub_255EEDFF0();
  uint64_t v9 = (void *)sub_255EF0090();
  sub_255DFD914(a1, (uint64_t)v9, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0, a2);
}

void sub_255DFD8E4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_255DFD914(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a1)
  {
    uint64_t v37 = a6;
    uint64_t v38 = a4;
    uint64_t v36 = a2;
    sub_255DFEB88(0, &qword_269F36370, &qword_269F36378, 0x263F08C58, MEMORY[0x270FA7ED0]);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v39 = v11;
    uint64_t v40 = v12;
    uint64_t v13 = *(void *)(v12 + 64);
    MEMORY[0x270FA5388](v11);
    unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v41 = (char *)v33 - v14;
    id v15 = a1;
    id v16 = objc_msgSend(v15, sel__foundationMeasurement);
    unint64_t v17 = (char *)v33 - v14;
    if (MEMORY[0x270FA5388](v16))
    {
      id v34 = v15;
      char v35 = v33;
      v33[1] = v6;
      sub_255D7ED10(0, &qword_269F36378);
      sub_255EEDDA0();

      uint64_t v18 = v39;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v41, v17, v39);
      uint64_t v19 = v38;
      sub_255DFEB88(0, a3, v38, a5, MEMORY[0x270FA7ED0]);
      uint64_t v21 = v20;
      v33[3] = v33;
      uint64_t v22 = *(void *)(v20 - 8);
      uint64_t v23 = MEMORY[0x270FA5388](v20);
      unint64_t v25 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      v33[2] = v33;
      MEMORY[0x270FA5388](v23);
      unint64_t v27 = (char *)v33 - v26;
      unint64_t v28 = (void *)sub_255EEDDB0();
      self;
      if (swift_dynamicCastObjCClass())
      {
        sub_255EEDDD0();
        sub_255D7ED10(0, v19);
        sub_255EEDDC0();
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v25, v27, v21);
        uint64_t v29 = v37;
        sub_255EEDE00();

        (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v18);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v29, 0, 1, v21);
      }
      else
      {

        sub_255DFEBF0();
        swift_allocError();
        unsigned char *v32 = 1;
        swift_willThrow();

        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v18);
      }
    }
    else
    {
      sub_255DFEBF0();
      swift_allocError();
      *unint64_t v31 = 0;
      swift_willThrow();
    }
  }
  else
  {
    sub_255DFEB88(0, a3, a4, a5, MEMORY[0x270FA7ED0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a6, 1, 1, v30);
  }
}

uint64_t sub_255DFDD94(uint64_t a1)
{
  uint64_t v45 = a1;
  uint64_t v2 = sub_255EEE190();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v46 = v1;
  uint64_t v6 = sub_255EEE1A0();
  MEMORY[0x270FA5388](v6);
  sub_255EEE170();
  sub_255D96964();
  char v7 = sub_255EEFCC0();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v9 = v8((char *)v41 - v5, v2);
  if (v7)
  {
    v8((char *)v41 - v5, v2);
  }
  else
  {
    MEMORY[0x270FA5388](v9);
    sub_255EEE160();
    char v10 = sub_255EEFCC0();
    v8((char *)v41 - v5, v2);
    v8((char *)v41 - v5, v2);
    if ((v10 & 1) == 0)
    {
      sub_255DFEB88(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7ED0]);
      uint64_t v35 = v34;
      uint64_t v36 = *(void *)(v34 - 8);
      MEMORY[0x270FA5388](v34);
      uint64_t v38 = (char *)v41 - v37;
      id v39 = objc_msgSend(self, sel_centimeters);
      sub_255EEDE00();

      type metadata accessor for MedicalIDHeightFormatter();
      sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
      uint64_t v33 = sub_255EF0150();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      return v33;
    }
  }
  sub_255DFEB88(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7ED0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v43 = v15;
  id v16 = self;
  id v42 = v16;
  id v17 = objc_msgSend(v16, sel_inches);
  sub_255EEDE00();

  sub_255EEDDD0();
  long double v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20((char *)v41 - v15, v12);
  uint64_t v21 = type metadata accessor for MedicalIDHeightFormatter();
  v41[1] = v41;
  MEMORY[0x270FA5388](v21);
  id v22 = objc_msgSend(v16, sel_feet);
  sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
  sub_255EEDDC0();
  uint64_t v23 = sub_255EF0150();
  uint64_t v44 = v24;
  uint64_t v45 = v23;
  v20((char *)v41 - v15, v12);
  fmod(v19, 12.0);
  MEMORY[0x270FA5388](v25);
  uint64_t v26 = (char *)v41 - v43;
  id v27 = objc_msgSend(v42, sel_inches);
  sub_255EEDDC0();
  sub_255EF0150();
  v20(v26, v12);
  uint64_t v28 = sub_255EEFD20();
  MEMORY[0x270FA5388](v28 - 8);
  sub_255EEFD10();
  sub_255EEFD00();
  sub_255EEFCF0();
  swift_bridgeObjectRelease();
  sub_255EEFD00();
  sub_255EEFCF0();
  swift_bridgeObjectRelease();
  sub_255EEFD00();
  uint64_t v29 = sub_255EEFD40();
  MEMORY[0x270FA5388](v29 - 8);
  sub_255EEFD30();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_269F352A8;
  uint64_t v31 = sub_255EEE200();
  MEMORY[0x270FA5388](v31 - 8);
  id v32 = v30;
  sub_255EEE1F0();
  return sub_255EEFDA0();
}

id sub_255DFE4B8(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08990]), sel_init);
  uint64_t v4 = (void *)sub_255EEE1C0();
  objc_msgSend(v3, sel_setLocale_, v4);

  objc_msgSend(v3, sel_setUnitStyle_, a2);
  objc_msgSend(v3, sel_setUnitOptions_, 1);
  id result = objc_msgSend(v3, sel_numberFormatter);
  if (result)
  {
    uint64_t v6 = result;
    sub_255D7ED10(0, (unint64_t *)&qword_269F35070);
    char v7 = (void *)sub_255EF01C0();
    objc_msgSend(v6, sel_setRoundingIncrement_, v7);

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDHeightFormatter()
{
  uint64_t result = qword_269F36360;
  if (!qword_269F36360) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDHeightFormatter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_255EEE200();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void destroy for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t initializeWithTake for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255DFE960);
}

uint64_t sub_255DFE960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDHeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255DFEA34);
}

uint64_t sub_255DFEA34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_255EEE200();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_255DFEAF0()
{
  uint64_t result = sub_255EEE200();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_255DFEB88(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_255D7ED10(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t sub_255DFEBF0()
{
  unint64_t result = qword_269F36380;
  if (!qword_269F36380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36380);
  }
  return result;
}

MedicalIDUI::MedicalIDSpokenLanguage __swiftcall MedicalIDSpokenLanguage.init(id:)(MedicalIDUI::MedicalIDSpokenLanguage id)
{
  MedicalIDUI::MedicalIDSpokenLanguage *v1 = id;
  return id;
}

uint64_t MedicalIDSpokenLanguage.languageInCurrentLocale.getter()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  uint64_t v3 = sub_255EEE200();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  sub_255EEE1F0();
  uint64_t v6 = (void *)sub_255EEE1C0();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v4 + 8);
  v7((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v8 = (void *)sub_255EEFD50();
  id v9 = objc_msgSend(v6, sel_localizedStringForLanguage_context_, v8, 3);

  if (v9)
  {
    uint64_t v10 = sub_255EEFD90();
  }
  else
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_255EEE3D0();
    __swift_project_value_buffer(v11, (uint64_t)qword_269F3FE80);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = sub_255EEE3B0();
    os_log_type_t v13 = sub_255EF00D0();
    int v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v27 = v25;
      *(_DWORD *)uint64_t v15 = 136315650;
      int v24 = v14;
      uint64_t v26 = sub_255DB0024(0xD000000000000017, 0x8000000255EF3E60, &v27);
      sub_255EF0200();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_255DB0024(v2, v1, &v27);
      sub_255EF0200();
      uint64_t v16 = swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 22) = 2080;
      v23[1] = v15 + 24;
      MEMORY[0x270FA5388](v16);
      id v17 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255EEE1F0();
      uint64_t v18 = sub_255EEE150();
      unint64_t v20 = v19;
      v7(v17, v3);
      uint64_t v26 = sub_255DB0024(v18, v20, &v27);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v12, (os_log_type_t)v24, "%s spoken language for %s returned nil for localizing in current locale %s.", (uint8_t *)v15, 0x20u);
      uint64_t v21 = v25;
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v21, -1, -1);
      MEMORY[0x25A29C8A0](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v10;
}

uint64_t MedicalIDSpokenLanguage.languageInLanguageLocale.getter()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  id v3 = objc_allocWithZone(MEMORY[0x263EFF960]);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_255EEFD50();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithLocaleIdentifier_, v4);

  uint64_t v6 = (void *)sub_255EEFD50();
  id v7 = objc_msgSend(v5, sel_localizedStringForLanguage_context_, v6, 3);

  if (v7)
  {
    uint64_t v8 = sub_255EEFD90();
  }
  else
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_255EEE3D0();
    __swift_project_value_buffer(v9, (uint64_t)qword_269F3FE80);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = sub_255EEE3B0();
    os_log_type_t v11 = sub_255EF00D0();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v15 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      sub_255DB0024(0xD000000000000017, 0x8000000255EF3E60, &v15);
      sub_255EF0200();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_255DB0024(v2, v1, &v15);
      sub_255EF0200();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_255D76000, v10, v11, "%s spoken language for %s returned nil for localizing in that languages locale.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v13, -1, -1);
      MEMORY[0x25A29C8A0](v12, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v8;
}

uint64_t MedicalIDSpokenLanguage.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDSpokenLanguage.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MedicalIDSpokenLanguage.id.modify())()
{
  return nullsub_1;
}

uint64_t MedicalIDSpokenLanguage.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t static MedicalIDSpokenLanguage.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_255EF04A0();
  }
}

uint64_t MedicalIDSpokenLanguage.hashValue.getter()
{
  return sub_255EF0580();
}

uint64_t sub_255DFF3E4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255DFF3F0()
{
  return sub_255EF0580();
}

uint64_t sub_255DFF44C()
{
  swift_bridgeObjectRetain();
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255DFF4A4()
{
  return sub_255EF0580();
}

uint64_t sub_255DFF4FC(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_255EF04A0();
  }
}

uint64_t sub_255DFF52C()
{
  return MEMORY[0x263F8D320];
}

unint64_t sub_255DFF53C()
{
  unint64_t result = qword_269F36398;
  if (!qword_269F36398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36398);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDSpokenLanguage()
{
  return &type metadata for MedicalIDSpokenLanguage;
}

uint64_t EditOrganDonationCellViewModel.__allocating_init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  EditOrganDonationCellViewModel.init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t sub_255DFF628@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 64);
  return result;
}

uint64_t sub_255DFF6A0()
{
  return swift_release();
}

uint64_t sub_255DFF740@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_255DFF7B8()
{
  return swift_release();
}

uint64_t (*sub_255DFF858(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v1 + 16);
  return sub_255DFF884;
}

uint64_t sub_255DFF884(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(unsigned __int8 *)(v2 + 16);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(result + 16);
  if (v3)
  {
    swift_getKeyPath();
    void *v1 = v2;
    sub_255E007FC();
    sub_255EEE2D0();
    uint64_t result = swift_release();
    if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
      return sub_255E01138();
    }
  }
  return result;
}

uint64_t sub_255DFF90C()
{
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_255DFF97C()
{
  return swift_release();
}

uint64_t sub_255DFFA1C(uint64_t result, char a2)
{
  int v2 = *(unsigned __int8 *)(result + 16);
  *(unsigned char *)(result + 16) = a2;
  if (v2 == 1)
  {
    uint64_t v3 = result;
    swift_getKeyPath();
    sub_255E007FC();
    sub_255EEE2D0();
    uint64_t result = swift_release();
    if ((*(unsigned char *)(v3 + 16) & 1) == 0) {
      return sub_255E01138();
    }
  }
  return result;
}

void (*sub_255DFFAB0(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_255E007FC();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255DFF858((uint64_t)v3);
  return sub_255DFFB9C;
}

void sub_255DFFB9C(void *a1)
{
}

uint64_t sub_255DFFBA8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a1 = *(unsigned char *)(v1 + 41);
  return result;
}

uint64_t sub_255DFFC20@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 41);
  return result;
}

uint64_t sub_255DFFC98()
{
  return swift_release();
}

uint64_t sub_255DFFD38(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  swift_release();
  uint64_t result = sub_255D8B018(v2, *(unsigned char *)(v1 + 64));
  if ((result & 1) == 0)
  {
    swift_getKeyPath();
    sub_255EEE2D0();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    sub_255EEE2C0();
    return swift_release();
  }
  return result;
}

uint64_t sub_255DFFE74(char *a1)
{
  char v2 = *a1;
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  swift_release();
  uint64_t result = sub_255D8B018(*(unsigned char *)(v1 + 64), v2);
  if ((result & 1) == 0)
  {
    swift_getKeyPath();
    swift_retain();
    swift_retain();
    sub_255EEE2D0();
    swift_release();
    sub_255E008C8();
    sub_255EEF980();
    swift_release();
    swift_release();
    swift_getKeyPath();
    sub_255EEE2D0();
    swift_release();
    switch(*(unsigned char *)(v1 + 64))
    {
      case 3:
        swift_bridgeObjectRelease();
        goto LABEL_6;
      default:
        char v4 = sub_255EF04A0();
        uint64_t result = swift_bridgeObjectRelease();
        if (v4)
        {
LABEL_6:
          swift_getKeyPath();
          sub_255EEE2D0();
          swift_release();
          switch(*(unsigned char *)(v1 + 41))
          {
            case 3:
              uint64_t result = swift_bridgeObjectRelease();
              break;
            default:
              char v5 = sub_255EF04A0();
              uint64_t result = swift_bridgeObjectRelease();
              if ((v5 & 1) == 0) {
                uint64_t result = sub_255E00920();
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t (*sub_255E00164(uint64_t a1))(unsigned char *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 64);
  return sub_255E00190;
}

uint64_t sub_255E00190(unsigned char *a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = a1[8];
  char v4 = *(unsigned char *)(*(void *)a1 + 64);
  if (a2)
  {
    unsigned __int8 v7 = a1[8];
    sub_255DFFD38(&v7);
    *(unsigned char *)(v2 + 64) = v3;
    char v8 = v4;
    char v5 = &v8;
  }
  else
  {
    unsigned __int8 v9 = a1[8];
    sub_255DFFD38(&v9);
    *(unsigned char *)(v2 + 64) = v3;
    char v10 = v4;
    char v5 = &v10;
  }
  return sub_255DFFE74(v5);
}

uint64_t sub_255E00204@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a1 = *(unsigned char *)(v1 + 64);
  return result;
}

uint64_t sub_255E0027C()
{
  return swift_release();
}

void (*sub_255E0031C(void *a1))(void *a1)
{
  char v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  *char v3 = v1;
  v3[6] = sub_255E007FC();
  sub_255EEE2D0();
  swift_release();
  *char v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255E00164((uint64_t)v3);
  return sub_255E00408;
}

void sub_255E00408(void *a1)
{
}

uint64_t sub_255E00414@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 65);
  return result;
}

uint64_t sub_255E0048C()
{
  return swift_release();
}

uint64_t sub_255E0052C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a1 = *(unsigned char *)(v1 + 65);
  return result;
}

void EditOrganDonationCellViewModel.DonateLifeFlowState.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

MedicalIDUI::EditOrganDonationCellViewModel::DonateLifeFlowState_optional __swiftcall EditOrganDonationCellViewModel.DonateLifeFlowState.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_255EF0460();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t EditOrganDonationCellViewModel.DonateLifeFlowState.rawValue.getter()
{
  return *(void *)&aOngoing_2[8 * *v0];
}

uint64_t sub_255E00630(char *a1, char *a2)
{
  return sub_255D8AF90(*a1, *a2);
}

uint64_t sub_255E0063C()
{
  return sub_255EA4098();
}

uint64_t sub_255E00644()
{
  return sub_255EA434C();
}

uint64_t sub_255E0064C()
{
  return sub_255EA4A44();
}

MedicalIDUI::EditOrganDonationCellViewModel::DonateLifeFlowState_optional sub_255E00654(Swift::String *a1)
{
  return EditOrganDonationCellViewModel.DonateLifeFlowState.init(rawValue:)(*a1);
}

uint64_t sub_255E00660@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EditOrganDonationCellViewModel.DonateLifeFlowState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_255E00688()
{
  return objc_msgSend(self, sel_hasStoredRegistrant);
}

id sub_255E006B4(uint64_t a1)
{
  id v1 = objc_msgSend(self, sel_medicalIDOrganDonorStatus_, a1);
  return v1;
}

id sub_255E00704()
{
  return objc_msgSend(self, sel_isOrganDonationRegistrationAvailable);
}

uint64_t EditOrganDonationCellViewModel.init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  char v17 = *((unsigned char *)a1 + 16);
  *(unsigned char *)(v8 + 16) = 0;
  *(unsigned char *)(v8 + 41) = 0;
  *(unsigned char *)(v8 + 65) = 3;
  sub_255EEE300();
  *(void *)(v8 + 24) = v15;
  *(void *)(v8 + 32) = v16;
  *(unsigned char *)(v8 + 40) = v17;
  sub_255E008C8();
  MEMORY[0x25A29B390](&v19);
  *(unsigned char *)(v8 + 64) = v19;
  *(void *)(v8 + 72) = a2;
  *(void *)(v8 + 80) = a3;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a7;
  return v8;
}

unint64_t sub_255E007FC()
{
  unint64_t result = qword_269F35EE8;
  if (!qword_269F35EE8)
  {
    type metadata accessor for EditOrganDonationCellViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F35EE8);
  }
  return result;
}

uint64_t type metadata accessor for EditOrganDonationCellViewModel()
{
  uint64_t result = qword_269F363C0;
  if (!qword_269F363C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E008A8()
{
  return sub_255E01EBC();
}

void sub_255E008C8()
{
  if (!qword_269F363A8)
  {
    unint64_t v0 = sub_255EEF9D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F363A8);
    }
  }
}

uint64_t sub_255E00920()
{
  uint64_t v1 = v0;
  if ((*(uint64_t (**)(void))(v0 + 88))())
  {
    if ((*(uint64_t (**)(void))(v0 + 72))())
    {
      return sub_255E00D30();
    }
    else
    {
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      sub_255E007FC();
      sub_255EEE2C0();
      swift_release();
      uint64_t v12 = swift_getKeyPath();
      MEMORY[0x270FA5388](v12);
      sub_255EEE2C0();
      return swift_release();
    }
  }
  else
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_255EEE3D0();
    __swift_project_value_buffer(v3, (uint64_t)qword_269F3FE80);
    char v4 = sub_255EEE3B0();
    os_log_type_t v5 = sub_255EF00E0();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v13 = v7;
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = sub_255EF05E0();
      sub_255DB0024(v8, v9, &v13);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      sub_255DB0024(0xD00000000000001BLL, 0x8000000255EF9FF0, &v13);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v4, v5, "[%s] %s Organ donation registration is not available.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v7, -1, -1);
      MEMORY[0x25A29C8A0](v6, -1, -1);
    }

    swift_getKeyPath();
    uint64_t v13 = v1;
    sub_255E007FC();
    sub_255EEE2D0();
    swift_release();
    uint64_t v10 = swift_getKeyPath();
    MEMORY[0x270FA5388](v10);
    uint64_t v13 = v1;
    sub_255EEE2C0();
    return swift_release();
  }
}

uint64_t sub_255E00D30()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t))(v0 + 48))(3);
  uint64_t v3 = v2;
  if (v2 && (unint64_t)objc_msgSend(v2, sel_integerValue) > 2)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_255EEE3D0();
    __swift_project_value_buffer(v5, (uint64_t)qword_269F3FE80);
    id v6 = v3;
    uint64_t v7 = sub_255EEE3B0();
    os_log_type_t v8 = sub_255EF00C0();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v18 = v10;
      *(_DWORD *)uint64_t v9 = 136315650;
      uint64_t v11 = sub_255EF05E0();
      sub_255DB0024(v11, v12, &v18);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      sub_255DB0024(0xD000000000000023, 0x8000000255EF9FC0, &v18);
      sub_255EF0200();
      *(_WORD *)(v9 + 22) = 2080;
      sub_255E01E54();
      id v13 = v6;
      uint64_t v14 = sub_255EEFDB0();
      sub_255DB0024(v14, v15, &v18);
      sub_255EF0200();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v7, v8, "[%s] %s Could not create organ donation status from %s", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v10, -1, -1);
      MEMORY[0x25A29C8A0](v9, -1, -1);
    }
    else
    {
    }
    swift_getKeyPath();
    uint64_t v18 = v1;
    sub_255E007FC();
    sub_255EEE2D0();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v18 = v1;
    sub_255EEE2C0();
  }
  else
  {
    uint64_t v4 = swift_getKeyPath();
    MEMORY[0x270FA5388](v4);
    uint64_t v18 = v0;
    sub_255E007FC();
    sub_255EEE2C0();
  }
  return swift_release();
}

uint64_t sub_255E01138()
{
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2D0();
  swift_release();
  switch(*(unsigned char *)(v0 + 65))
  {
    case 1:
    case 3:
      break;
    default:
      swift_getKeyPath();
      sub_255EEE2D0();
      swift_release();
      switch(*(unsigned char *)(v0 + 64))
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        default:
          char v1 = sub_255EF04A0();
          swift_bridgeObjectRelease();
          if (v1)
          {
LABEL_6:
            swift_getKeyPath();
            sub_255EEE2D0();
            swift_release();
            uint64_t KeyPath = swift_getKeyPath();
            MEMORY[0x270FA5388](KeyPath);
            sub_255EEE2C0();
            swift_release();
          }
          break;
      }
      break;
  }
  uint64_t v3 = swift_getKeyPath();
  MEMORY[0x270FA5388](v3);
  sub_255EEE2C0();
  return swift_release();
}

uint64_t sub_255E013F0()
{
  swift_retain();
  uint64_t v1 = sub_255E018E0((uint64_t)&unk_2704A3328, v0);
  swift_release();
  return v1;
}

uint64_t sub_255E01448(char a1)
{
  swift_getKeyPath();
  sub_255E007FC();
  sub_255EEE2C0();
  if ((a1 & 1) == 0)
  {
    swift_release();
    swift_getKeyPath();
    sub_255EEE2D0();
  }
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  sub_255EEE2C0();
  swift_release();
  uint64_t v3 = swift_getKeyPath();
  MEMORY[0x270FA5388](v3);
  sub_255E007FC();
  sub_255EEE2C0();
  return swift_release();
}

uint64_t sub_255E016F0()
{
  return swift_release();
}

uint64_t EditOrganDonationCellViewModel.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t EditOrganDonationCellViewModel.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI30EditOrganDonationCellViewModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255E018E0(uint64_t result, uint64_t a2)
{
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_2:
  if (v3 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  while (1)
  {
    if (v4 == v3) {
      return v6;
    }
    unint64_t v8 = v3;
    if (v7 == v3) {
      break;
    }
    int v9 = *(unsigned __int8 *)(v5 + v3);
    if (v9 == 3)
    {
      uint64_t result = (*(uint64_t (**)(void))(a2 + 88))();
      unint64_t v3 = v8 + 1;
      if ((result & 1) == 0) {
        continue;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = sub_255DFAB5C(0, *(void *)(v6 + 16) + 1, 1);
    }
    unint64_t v11 = *(void *)(v6 + 16);
    unint64_t v10 = *(void *)(v6 + 24);
    if (v11 >= v10 >> 1) {
      uint64_t result = sub_255DFAB5C(v10 > 1, v11 + 1, 1);
    }
    unint64_t v3 = v8 + 1;
    *(void *)(v6 + 16) = v11 + 1;
    *(unsigned char *)(v6 + v11 + 32) = v9;
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

void sub_255E019F0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 65) = *(unsigned char *)(v0 + 24);
}

unint64_t sub_255E01A0C()
{
  unint64_t result = qword_269F363B0;
  if (!qword_269F363B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F363B0);
  }
  return result;
}

unint64_t sub_255E01A64()
{
  unint64_t result = qword_269F363B8;
  if (!qword_269F363B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F363B8);
  }
  return result;
}

uint64_t sub_255E01AB8()
{
  return type metadata accessor for EditOrganDonationCellViewModel();
}

uint64_t sub_255E01AC0()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for EditOrganDonationCellViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EditOrganDonationCellViewModel);
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.isDonateLifeFlowPresented.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.isDonateLifeFlowPresented.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.isDonateLifeFlowPresented.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationStatus.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationStatus.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationStatus.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.donateLifeFlowState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.__allocating_init(outOrganDonationStatus:hasStoredRegistrant:medicalIDDonorStatusProvider:organDonationRegistrationAvailable:)()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.organDonationOptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.registrationCompleted(registered:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of EditOrganDonationCellViewModel.cancelButtonTapped()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

unsigned char *storeEnumTagSinglePayload for EditOrganDonationCellViewModel.DonateLifeFlowState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E01E1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditOrganDonationCellViewModel.DonateLifeFlowState()
{
  return &type metadata for EditOrganDonationCellViewModel.DonateLifeFlowState;
}

void sub_255E01E54()
{
  if (!qword_269F363D0)
  {
    sub_255D7EFC4();
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F363D0);
    }
  }
}

void sub_255E01EAC()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 41) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_255E01EBC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v1 + 64);
  unsigned __int8 v6 = *(unsigned char *)(v0 + 24);
  unsigned __int8 v2 = v6;
  sub_255DFFD38(&v6);
  *(unsigned char *)(v1 + 64) = v2;
  char v5 = v3;
  return sub_255DFFE74(&v5);
}

uint64_t sub_255E01F1C()
{
  return sub_255DDE848();
}

void sub_255E01F34()
{
}

void sub_255E01F4C()
{
}

uint64_t sub_255E01F64@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  char v3 = (_OWORD *)*a1;
  swift_getKeyPath();
  *(void *)&v16[0] = v3;
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v4 = v3[1];
  long long v5 = v3[2];
  long long v6 = v3[4];
  void v16[2] = v3[3];
  v16[3] = v6;
  long long v7 = v3[5];
  long long v8 = v3[6];
  long long v9 = v3[8];
  v16[6] = v3[7];
  v16[7] = v9;
  v16[4] = v7;
  v16[5] = v8;
  v16[0] = v4;
  v16[1] = v5;
  long long v10 = v3[1];
  long long v11 = v3[2];
  long long v12 = v3[4];
  a2[2] = v3[3];
  a2[3] = v12;
  *a2 = v10;
  a2[1] = v11;
  long long v13 = v3[5];
  long long v14 = v3[6];
  a2[6] = v3[7];
  a2[7] = v9;
  a2[4] = v13;
  a2[5] = v14;
  return sub_255DCB308((uint64_t)v16);
}

uint64_t sub_255E02060(_OWORD *a1)
{
  long long v1 = a1[5];
  v6[4] = a1[4];
  v6[5] = v1;
  long long v2 = a1[7];
  v6[6] = a1[6];
  v6[7] = v2;
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  void v6[2] = a1[2];
  v6[3] = v4;
  swift_getKeyPath();
  sub_255DCB308((uint64_t)v6);
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2C0();
  sub_255DCB3AC((uint64_t)v6);
  return swift_release();
}

uint64_t sub_255E0215C@<X0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  *(void *)&v11[0] = v1;
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v4 = v1[6];
  long long v14 = v1[5];
  long long v3 = v14;
  long long v15 = v4;
  long long v6 = v1[8];
  long long v16 = v1[7];
  long long v5 = v16;
  long long v17 = v6;
  long long v7 = v1[2];
  v11[0] = v1[1];
  v11[1] = v7;
  long long v9 = v1[4];
  long long v12 = v1[3];
  long long v8 = v12;
  long long v13 = v9;
  *a1 = v11[0];
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  return sub_255DCB308((uint64_t)v11);
}

uint64_t type metadata accessor for ContactLabelEditViewModel(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F363F0);
}

uint64_t sub_255E02270(_OWORD *a1)
{
  long long v1 = a1[5];
  v6[4] = a1[4];
  v6[5] = v1;
  long long v2 = a1[7];
  v6[6] = a1[6];
  v6[7] = v2;
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  void v6[2] = a1[2];
  v6[3] = v4;
  swift_getKeyPath();
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2C0();
  sub_255DCB3AC((uint64_t)v6);
  return swift_release();
}

uint64_t sub_255E02364(_OWORD *a1, long long *a2)
{
  swift_beginAccess();
  long long v4 = a1[6];
  v15[4] = a1[5];
  v15[5] = v4;
  long long v5 = a1[8];
  v15[6] = a1[7];
  v15[7] = v5;
  long long v6 = a1[2];
  v15[0] = a1[1];
  v15[1] = v6;
  long long v7 = a1[4];
  v15[2] = a1[3];
  v15[3] = v7;
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[3];
  a1[3] = a2[2];
  a1[4] = v10;
  a1[1] = v8;
  a1[2] = v9;
  long long v11 = a2[4];
  long long v12 = a2[5];
  long long v13 = a2[7];
  a1[7] = a2[6];
  a1[8] = v13;
  a1[5] = v11;
  a1[6] = v12;
  sub_255DCB308((uint64_t)a2);
  return sub_255DCB3AC((uint64_t)v15);
}

uint64_t sub_255E02404()
{
  return sub_255E02364(*(_OWORD **)(v0 + 16), *(long long **)(v0 + 24));
}

void (*sub_255E02420(void *a1))(void *a1)
{
  long long v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  *long long v3 = v1;
  v3[6] = sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  *long long v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255DADD10();
  return sub_255E0253C;
}

void sub_255E0253C(void *a1)
{
}

uint64_t (*sub_255E02548())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_255E0259C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 144);
  return result;
}

uint64_t sub_255E02658()
{
  return swift_release();
}

uint64_t sub_255E02728()
{
  swift_getKeyPath();
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t sub_255E027E4()
{
  return swift_release();
}

uint64_t sub_255E028B4()
{
  return sub_255E06D54();
}

void (*sub_255E028CC(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  v3[7] = sub_255E02548();
  return sub_255E029E8;
}

void sub_255E029E8(void *a1)
{
}

uint64_t ContactLabelEditViewModel.__allocating_init(medicalIDEmergencyContact:)(_OWORD *a1)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 144) = 0;
  sub_255EEE300();
  long long v3 = a1[5];
  *(_OWORD *)(v2 + 80) = a1[4];
  *(_OWORD *)(v2 + 96) = v3;
  long long v4 = a1[7];
  *(_OWORD *)(v2 + 112) = a1[6];
  *(_OWORD *)(v2 + 128) = v4;
  long long v5 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v5;
  long long v6 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v6;
  return v2;
}

uint64_t ContactLabelEditViewModel.init(medicalIDEmergencyContact:)(_OWORD *a1)
{
  *(unsigned char *)(v1 + 144) = 0;
  sub_255EEE300();
  long long v3 = a1[5];
  *(_OWORD *)(v1 + 80) = a1[4];
  *(_OWORD *)(v1 + 96) = v3;
  long long v4 = a1[7];
  *(_OWORD *)(v1 + 112) = a1[6];
  *(_OWORD *)(v1 + 128) = v4;
  long long v5 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v5;
  long long v6 = a1[3];
  *(_OWORD *)(v1 + 48) = a1[2];
  *(_OWORD *)(v1 + 64) = v6;
  return v1;
}

uint64_t sub_255E02AB8()
{
  swift_getKeyPath();
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  sub_255EEE2D0();
  swift_release();
  if (v0[9]) {
    uint64_t v3 = v0[8];
  }
  else {
    uint64_t v3 = 0;
  }
  if (v1) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v3;
  }
  swift_bridgeObjectRetain();
  return v4;
}

_OWORD *ContactLabelEditViewModel.deinit()
{
  long long v1 = v0[6];
  v8[4] = v0[5];
  v8[5] = v1;
  long long v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  long long v3 = v0[2];
  v8[0] = v0[1];
  v8[1] = v3;
  long long v4 = v0[4];
  void v8[2] = v0[3];
  _OWORD v8[3] = v4;
  sub_255DCB3AC((uint64_t)v8);
  long long v5 = (char *)v0 + OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  uint64_t v6 = sub_255EEE310();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t ContactLabelEditViewModel.__deallocating_deinit()
{
  long long v1 = v0[6];
  v8[4] = v0[5];
  v8[5] = v1;
  long long v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  long long v3 = v0[2];
  v8[0] = v0[1];
  v8[1] = v3;
  long long v4 = v0[4];
  void v8[2] = v0[3];
  _OWORD v8[3] = v4;
  sub_255DCB3AC((uint64_t)v8);
  long long v5 = (char *)v0 + OBJC_IVAR____TtC11MedicalIDUI25ContactLabelEditViewModel___observationRegistrar;
  uint64_t v6 = sub_255EEE310();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance();
}

uint64_t sub_255E02D38()
{
  return type metadata accessor for ContactLabelEditViewModel(0);
}

uint64_t sub_255E02D40()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ContactLabelEditViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ContactLabelEditViewModel);
}

uint64_t dispatch thunk of ContactLabelEditViewModel.medicalIDEmergencyContact.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.medicalIDEmergencyContact.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.medicalIDEmergencyContact.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.isSheetViewPresented.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.isSheetViewPresented.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.isSheetViewPresented.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.__allocating_init(medicalIDEmergencyContact:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of ContactLabelEditViewModel.titleAndSubtitle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_255E02F0C(_OWORD *a1)
{
  long long v1 = a1[5];
  v6[4] = a1[4];
  v6[5] = v1;
  long long v2 = a1[7];
  v6[6] = a1[6];
  v6[7] = v2;
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  void v6[2] = a1[2];
  v6[3] = v4;
  sub_255DCB308((uint64_t)v6);
  sub_255E07064(0, &qword_269F35C90, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F1B750]);
  return sub_255EEF980();
}

uint64_t sub_255E02FE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[3];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    long long v8 = (void *)(a1 + v7);
    long long v9 = (uint64_t *)((char *)a2 + v7);
    sub_255E066C8(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    swift_retain();
    swift_retain();
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *long long v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v5;
}

uint64_t sub_255E03164(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_255E066C8(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE860();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_255E03258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  sub_255E066C8(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_retain();
  swift_retain();
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_255EEE860();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_255E03388(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (void *)((char *)a1 + v7);
    long long v9 = (void *)((char *)a2 + v7);
    uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
    long long v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255E03504((uint64_t)a1 + v7, (uint64_t)&qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8], (uint64_t (*)(void))sub_255E066C8);
    sub_255E066C8(0, &qword_269F35680, v10, v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_255E03504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

_OWORD *sub_255E03564(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  sub_255E066C8(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  uint64_t v9 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_255EEE860();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v6, v7, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_255E03664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255E03504(a1 + v6, (uint64_t)&qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8], (uint64_t (*)(void))sub_255E066C8);
    sub_255E066C8(0, &qword_269F35680, v9, v10);
    uint64_t v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_255EEE860();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_255E037D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E037EC);
}

uint64_t sub_255E037EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255E066C8(0, &qword_269F36400, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_255E038CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E038E0);
}

void *sub_255E038E0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_255E066C8(0, &qword_269F36400, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ContactLabelEditView(uint64_t a1)
{
  return sub_255DB0714(a1, (uint64_t *)&unk_269F36408);
}

void sub_255E039D8()
{
  sub_255E066C8(319, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255E03AAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E03AC8@<X0>(uint64_t a1@<X8>)
{
  long long v2 = v1;
  uint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for ContactLabelEditView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E05BBC();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E06408(0);
  uint64_t v13 = v12;
  uint64_t v40 = v12;
  MEMORY[0x270FA5388](v12);
  long long v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E064B0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = type metadata accessor for ContactLabelEditView;
  BOOL v52 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E06B7C((uint64_t)v2, (uint64_t)v6, type metadata accessor for ContactLabelEditView);
  uint64_t v19 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v49 = ((v19 + 16) & ~v19) + v5;
  uint64_t v50 = (v19 + 16) & ~v19;
  uint64_t v20 = v50;
  uint64_t v48 = v19 | 7;
  uint64_t v21 = swift_allocObject();
  uint64_t v47 = type metadata accessor for ContactLabelEditView;
  sub_255E06B14((uint64_t)v6, v21 + v20, type metadata accessor for ContactLabelEditView);
  uint64_t v53 = v2;
  sub_255E0643C(0, &qword_269F36420, (void (*)(uint64_t))sub_255E05C50, (void (*)(uint64_t))sub_255DE777C);
  sub_255E062B0();
  sub_255EEF870();
  LODWORD(v5) = sub_255EEEF20();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v11, v8);
  *(_DWORD *)&v15[*(int *)(v13 + 36)] = v5;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v22 = v2[1];
  *(void *)&long long v62 = *v2;
  *((void *)&v62 + 1) = v22;
  sub_255E066C8(0, &qword_269F364D0, type metadata accessor for ContactLabelEditViewModel, MEMORY[0x263F1B5D0]);
  uint64_t v41 = v23;
  sub_255EEF840();
  long long v24 = v70;
  uint64_t v25 = v71;
  swift_getKeyPath();
  long long v70 = v24;
  *(void *)&long long v71 = v25;
  sub_255E066C8(0, &qword_269F364D8, type metadata accessor for ContactLabelEditViewModel, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_255E06B7C((uint64_t)v2, (uint64_t)v6, v51);
  uint64_t v26 = swift_allocObject();
  sub_255E06B14((uint64_t)v6, v26 + v50, v47);
  uint64_t v42 = type metadata accessor for RelationshipPickerView();
  unint64_t v27 = sub_255E06584();
  uint64_t v43 = sub_255E06094(&qword_269F364C8, (void (*)(uint64_t))type metadata accessor for RelationshipPickerView);
  uint64_t v28 = v40;
  sub_255EEF5F0();
  swift_release();
  swift_release();
  swift_release();
  sub_255E06BE4((uint64_t)v15, (uint64_t (*)(void))sub_255E06408);
  uint64_t v29 = v2[1];
  *(void *)&long long v70 = *v2;
  *((void *)&v70 + 1) = v29;
  sub_255EEF820();
  uint64_t v30 = (_OWORD *)v62;
  swift_getKeyPath();
  *(void *)&long long v70 = v30;
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v31 = v30[6];
  long long v66 = v30[5];
  long long v67 = v31;
  long long v32 = v30[8];
  long long v68 = v30[7];
  long long v69 = v32;
  long long v33 = v30[2];
  long long v62 = v30[1];
  long long v63 = v33;
  long long v34 = v30[4];
  long long v64 = v30[3];
  long long v65 = v34;
  sub_255DCB308((uint64_t)&v62);
  swift_release();
  long long v58 = v66;
  long long v59 = v67;
  long long v60 = v68;
  long long v61 = v69;
  long long v54 = v62;
  long long v55 = v63;
  long long v56 = v64;
  long long v57 = v65;
  sub_255E06B7C((uint64_t)v2, (uint64_t)v6, v51);
  uint64_t v35 = swift_allocObject();
  sub_255E06B14((uint64_t)v6, v35 + v50, v47);
  *(void *)&long long v70 = v28;
  *((void *)&v70 + 1) = v42;
  *(void *)&long long v71 = v27;
  *((void *)&v71 + 1) = v43;
  swift_getOpaqueTypeConformance2();
  sub_255DCB914();
  uint64_t v36 = v44;
  uint64_t v37 = v52;
  sub_255EEF680();
  swift_release();
  long long v74 = v58;
  long long v75 = v59;
  long long v76 = v60;
  long long v77 = v61;
  long long v70 = v54;
  long long v71 = v55;
  long long v72 = v56;
  long long v73 = v57;
  sub_255DCB3AC((uint64_t)&v70);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v37, v36);
}

uint64_t sub_255E041D8()
{
  return swift_release();
}

uint64_t sub_255E042FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255EEE8F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E05D24(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E05C50();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E045A0((uint64_t)v8);
  sub_255EEE8E0();
  sub_255E060DC();
  sub_255E06094(&qword_269F36498, MEMORY[0x263F18FD0]);
  sub_255EEF420();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_255E06BE4((uint64_t)v8, (uint64_t (*)(void))sub_255E05D24);
  int v14 = sub_255EEEF20();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a1, v13, v10);
  sub_255E0643C(0, &qword_269F36420, (void (*)(uint64_t))sub_255E05C50, (void (*)(uint64_t))sub_255DE777C);
  *(_DWORD *)(a1 + *(int *)(v15 + 36)) = v14;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_255E045A0(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_255E0698C(0, &qword_269F364E0, MEMORY[0x263F19B20]);
  uint64_t v56 = v4;
  MEMORY[0x270FA5388](v4);
  long long v57 = (uint64_t *)((char *)&v45 - v5);
  uint64_t v52 = sub_255EEEFA0();
  uint64_t v51 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E05E2C();
  uint64_t v54 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E05D78();
  uint64_t v48 = v11;
  uint64_t v47 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E05D44(0);
  uint64_t v55 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v46 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v49 = (uint64_t)&v45 - v16;
  uint64_t v17 = v1[1];
  *(void *)&v61[0] = *v1;
  *((void *)&v61[0] + 1) = v17;
  sub_255E066C8(0, &qword_269F364D0, type metadata accessor for ContactLabelEditViewModel, MEMORY[0x263F1B5D0]);
  uint64_t v50 = v18;
  sub_255EEF820();
  uint64_t v19 = v63;
  swift_getKeyPath();
  *(void *)&v61[0] = v19;
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v21 = v19[2];
  uint64_t v20 = v19[3];
  swift_getKeyPath();
  *(void *)&v61[0] = v19;
  swift_bridgeObjectRetain();
  sub_255EEE2D0();
  swift_release();
  uint64_t v23 = v19[8];
  uint64_t v22 = v19[9];
  if (v20)
  {
    uint64_t v45 = a1;
    swift_bridgeObjectRetain();
    uint64_t v24 = v22;
  }
  else
  {
    if (!v22)
    {
      swift_release();
      uint64_t v44 = v57;
      void *v57 = 0xD000000000000051;
      v44[1] = 0x8000000255EFA080;
      swift_storeEnumTagMultiPayload();
      sub_255E06154();
      sub_255E0625C();
      sub_255EEEE00();
      return;
    }
    uint64_t v45 = a1;
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    uint64_t v21 = v23;
    uint64_t v20 = v22;
    uint64_t v23 = 0;
  }
  swift_release();
  uint64_t v25 = sub_255EEED80();
  if (qword_269F34AF0 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_269F363D8;
  *(void *)uint64_t v10 = v25;
  *((void *)v10 + 1) = v26;
  unsigned char v10[16] = 0;
  sub_255E06A7C();
  sub_255E05178(v21, v20, v2, v23, v24, (uint64_t)&v10[*(int *)(v27 + 44)]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_255EEEF80();
  uint64_t v28 = sub_255E06094(&qword_269F36478, (void (*)(uint64_t))sub_255E05E2C);
  uint64_t v29 = v53;
  uint64_t v30 = v54;
  sub_255EEF560();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v52);
  sub_255E06BE4((uint64_t)v10, (uint64_t (*)(void))sub_255E05E2C);
  sub_255E07064(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_255EF20B0;
  uint64_t v32 = v2[1];
  *(void *)&v61[0] = *v2;
  *((void *)&v61[0] + 1) = v32;
  sub_255EEF820();
  long long v33 = v60;
  swift_getKeyPath();
  *(void *)&v61[0] = v33;
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v34 = v33[6];
  v61[4] = v33[5];
  v61[5] = v34;
  long long v35 = v33[8];
  v61[6] = v33[7];
  long long v62 = v35;
  long long v36 = v33[2];
  v61[0] = v33[1];
  v61[1] = v36;
  long long v37 = v33[4];
  v61[2] = v33[3];
  v61[3] = v37;
  sub_255DCB308((uint64_t)v61);
  swift_release();
  long long v38 = v62;
  swift_bridgeObjectRetain();
  sub_255DCB3AC((uint64_t)v61);
  *(_OWORD *)(v31 + 32) = v38;
  uint64_t v39 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v40 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v40)
  {
    sub_255EEFD90();

    uint64_t v58 = v30;
    uint64_t v59 = v28;
    swift_getOpaqueTypeConformance2();
    uint64_t v41 = (uint64_t)v46;
    uint64_t v42 = v48;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v42);
    uint64_t v43 = v49;
    sub_255E06B14(v41, v49, (uint64_t (*)(void))sub_255E05D44);
    sub_255E06B7C(v43, (uint64_t)v57, (uint64_t (*)(void))sub_255E05D44);
    swift_storeEnumTagMultiPayload();
    sub_255E06154();
    sub_255E0625C();
    sub_255EEEE00();
    sub_255E06BE4(v43, (uint64_t (*)(void))sub_255E05D44);
  }
  else
  {
    __break(1u);
  }
}

void sub_255E04DC0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *((void *)&v48 + 1) = a1[1];
  sub_255E066C8(0, &qword_269F364D0, type metadata accessor for ContactLabelEditViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  swift_getKeyPath();
  *(void *)&long long v48 = v36;
  sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v3 = *(_OWORD *)(v36 + 96);
  v45[4] = *(_OWORD *)(v36 + 80);
  v45[5] = v3;
  long long v4 = *(_OWORD *)(v36 + 128);
  long long v46 = *(_OWORD *)(v36 + 112);
  long long v47 = v4;
  long long v5 = *(_OWORD *)(v36 + 32);
  v45[0] = *(_OWORD *)(v36 + 16);
  v45[1] = v5;
  long long v6 = *(_OWORD *)(v36 + 64);
  _OWORD v45[2] = *(_OWORD *)(v36 + 48);
  v45[3] = v6;
  sub_255DCB308((uint64_t)v45);
  swift_release();
  uint64_t v7 = (void *)*((void *)&v46 + 1);
  id v8 = *((id *)&v46 + 1);
  sub_255DCB3AC((uint64_t)v45);
  uint64_t v9 = a1[1];
  *(void *)&long long v36 = *a1;
  *((void *)&v36 + 1) = v9;
  sub_255EEF840();
  long long v10 = v48;
  uint64_t v11 = v49;
  swift_getKeyPath();
  long long v48 = v10;
  *(void *)&long long v49 = v11;
  sub_255E066C8(0, &qword_269F364D8, type metadata accessor for ContactLabelEditViewModel, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v54 = v42;
  long long v55 = v43;
  long long v56 = v44;
  long long v50 = v38;
  long long v51 = v39;
  long long v52 = v40;
  long long v53 = v41;
  long long v48 = v36;
  long long v49 = v37;
  swift_getKeyPath();
  long long v30 = v55;
  long long v31 = v56;
  long long v25 = v50;
  long long v26 = v51;
  long long v28 = v53;
  long long v29 = v54;
  long long v27 = v52;
  long long v23 = v48;
  long long v24 = v49;
  sub_255E07064(0, &qword_269F35C90, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  sub_255DD3328((uint64_t)&v48);
  uint64_t v12 = v32;
  uint64_t v13 = v33;
  uint64_t v15 = v34;
  uint64_t v14 = v35;
  *((void *)&v23 + 1) = a1[1];
  sub_255EEF820();
  swift_getKeyPath();
  *(void *)&long long v23 = v22;
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v16 = v22[6];
  long long v27 = v22[5];
  long long v28 = v16;
  long long v17 = v22[8];
  long long v29 = v22[7];
  long long v30 = v17;
  long long v18 = v22[2];
  long long v23 = v22[1];
  long long v24 = v18;
  long long v19 = v22[4];
  long long v25 = v22[3];
  long long v26 = v19;
  sub_255DCB308((uint64_t)&v23);
  swift_release();
  long long v20 = v30;
  swift_bridgeObjectRetain();
  sub_255DCB3AC((uint64_t)&v23);
  sub_255EDCA00(v7, v12, v13, v15, v14, v20, *((uint64_t *)&v20 + 1), a2);
}

void sub_255E05178(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v118 = a5;
  uint64_t v110 = a4;
  id v120 = a3;
  uint64_t v115 = a6;
  sub_255E05F90();
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v116 = (uint64_t)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v113 = (uint64_t)&v105 - v11;
  sub_255E07000(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  uint64_t v111 = *(void *)(v12 - 8);
  uint64_t v112 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v114 = (uint64_t)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v107 = (char *)&v105 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v106 = (uint64_t)&v105 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  Swift::String_optional v117 = (char *)&v105 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v122 = (uint64_t)&v105 - v21;
  *(void *)&v141[0] = a1;
  *((void *)&v141[0] + 1) = a2;
  unint64_t v22 = sub_255DAD520();
  swift_bridgeObjectRetain();
  unint64_t v108 = v22;
  uint64_t v23 = sub_255EEF3D0();
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  sub_255EEF200();
  uint64_t v28 = sub_255EEF3B0();
  uint64_t v30 = v29;
  char v32 = v31;
  uint64_t v34 = v33;
  swift_release();
  sub_255D85120(v23, v25, v27);
  swift_bridgeObjectRelease();
  *(void *)&long long v133 = v28;
  *((void *)&v133 + 1) = v30;
  uint64_t v35 = v120;
  LOBYTE(v134) = v32 & 1;
  *((void *)&v134 + 1) = v34;
  sub_255E07064(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v37 = v36;
  uint64_t v38 = swift_allocObject();
  long long v109 = xmmword_255EF1E20;
  *(_OWORD *)(v38 + 16) = xmmword_255EF1E20;
  uint64_t v39 = v35[1];
  *(void *)&v141[0] = *v35;
  *((void *)&v141[0] + 1) = v39;
  sub_255E066C8(0, &qword_269F364D0, type metadata accessor for ContactLabelEditViewModel, MEMORY[0x263F1B5D0]);
  uint64_t v121 = v40;
  sub_255EEF820();
  long long v41 = (_OWORD *)v124;
  swift_getKeyPath();
  *(void *)&v141[0] = v41;
  uint64_t v42 = sub_255E06094(&qword_269F363E8, (void (*)(uint64_t))type metadata accessor for ContactLabelEditViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v43 = v41[6];
  v141[4] = v41[5];
  v141[5] = v43;
  long long v44 = v41[8];
  v141[6] = v41[7];
  long long v142 = v44;
  long long v45 = v41[2];
  v141[0] = v41[1];
  v141[1] = v45;
  long long v46 = v41[4];
  v141[2] = v41[3];
  v141[3] = v46;
  sub_255DCB308((uint64_t)v141);
  swift_release();
  long long v47 = v142;
  swift_bridgeObjectRetain();
  sub_255DCB3AC((uint64_t)v141);
  *(_OWORD *)(v38 + 32) = v47;
  *(void *)(v38 + 48) = 1701667150;
  *(void *)(v38 + 56) = 0xE400000000000000;
  long long v48 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v49 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v49)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v119 = v42;
  sub_255EEFD90();

  long long v50 = v117;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  sub_255D85120(v133, *((uint64_t *)&v133 + 1), v134);
  swift_bridgeObjectRelease();
  uint64_t v51 = (uint64_t)v50;
  uint64_t v52 = v122;
  sub_255DD8460(v51, v122);
  if (!v118)
  {
    uint64_t v82 = v113;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v113, 1, 1, v112);
    uint64_t v83 = v115;
    goto LABEL_6;
  }
  *(void *)&long long v133 = v110;
  *((void *)&v133 + 1) = v118;
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_255EEF3D0();
  uint64_t v55 = v54;
  char v57 = v56 & 1;
  sub_255EEF1F0();
  uint64_t v58 = sub_255EEF3B0();
  uint64_t v60 = v59;
  char v62 = v61;
  uint64_t v118 = v37;
  swift_release();
  sub_255D85120(v53, v55, v57);
  swift_bridgeObjectRelease();
  LODWORD(v133) = sub_255EEEF30();
  uint64_t v63 = sub_255EEF370();
  uint64_t v65 = v64;
  char v67 = v66;
  uint64_t v69 = v68;
  sub_255D85120(v58, v60, v62 & 1);
  swift_bridgeObjectRelease();
  *(void *)&long long v124 = v63;
  *((void *)&v124 + 1) = v65;
  LOBYTE(v125) = v67 & 1;
  *((void *)&v125 + 1) = v69;
  uint64_t v35 = v120;
  uint64_t v70 = swift_allocObject();
  *(_OWORD *)(v70 + 16) = v109;
  uint64_t v71 = v35[1];
  *(void *)&long long v133 = *v35;
  *((void *)&v133 + 1) = v71;
  sub_255EEF820();
  long long v72 = v132;
  swift_getKeyPath();
  *(void *)&long long v133 = v72;
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v73 = v72[6];
  long long v137 = v72[5];
  long long v138 = v73;
  long long v74 = v72[8];
  long long v139 = v72[7];
  long long v140 = v74;
  long long v75 = v72[2];
  long long v133 = v72[1];
  long long v134 = v75;
  long long v76 = v72[4];
  long long v135 = v72[3];
  long long v136 = v76;
  sub_255DCB308((uint64_t)&v133);
  swift_release();
  long long v77 = v140;
  swift_bridgeObjectRetain();
  sub_255DCB3AC((uint64_t)&v133);
  *(_OWORD *)(v70 + 32) = v77;
  *(void *)(v70 + 48) = 0x7265626D754ELL;
  *(void *)(v70 + 56) = 0xE600000000000000;
  uint64_t v78 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v79 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v79)
  {
LABEL_11:
    __break(1u);
    return;
  }
  sub_255EEFD90();

  uint64_t v80 = (uint64_t)v107;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  sub_255D85120(v124, *((uint64_t *)&v124 + 1), v125);
  swift_bridgeObjectRelease();
  uint64_t v81 = v106;
  sub_255DD8460(v80, v106);
  uint64_t v82 = v113;
  sub_255DD8460(v81, v113);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v82, 0, 1, v112);
  uint64_t v83 = v115;
  uint64_t v52 = v122;
LABEL_6:
  uint64_t v84 = v35[1];
  *(void *)&long long v133 = *v35;
  *((void *)&v133 + 1) = v84;
  sub_255EEF820();
  uint64_t v85 = (_OWORD *)v124;
  swift_getKeyPath();
  *(void *)&long long v133 = v85;
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  long long v86 = v85[6];
  long long v137 = v85[5];
  long long v138 = v86;
  long long v87 = v85[8];
  long long v139 = v85[7];
  long long v140 = v87;
  long long v88 = v85[2];
  long long v133 = v85[1];
  long long v134 = v88;
  long long v89 = v85[4];
  long long v135 = v85[3];
  long long v136 = v89;
  sub_255DCB308((uint64_t)&v133);
  swift_release();
  long long v90 = v138;
  swift_bridgeObjectRetain();
  sub_255DCB3AC((uint64_t)&v133);
  if (*((void *)&v90 + 1))
  {
    uint64_t v91 = v35[1];
    *(void *)&long long v124 = *v35;
    *((void *)&v124 + 1) = v91;
    id v120 = (void *)v90;
    sub_255EEF820();
    uint64_t v92 = v123;
    swift_getKeyPath();
    *(void *)&long long v124 = v92;
    sub_255EEE2D0();
    swift_release();
    swift_beginAccess();
    long long v93 = v92[6];
    long long v128 = v92[5];
    long long v129 = v93;
    long long v94 = v92[8];
    long long v130 = v92[7];
    long long v131 = v94;
    long long v95 = v92[2];
    long long v124 = v92[1];
    long long v125 = v95;
    long long v96 = v92[4];
    long long v126 = v92[3];
    long long v127 = v96;
    sub_255DCB308((uint64_t)&v124);
    swift_release();
    uint64_t v97 = *((void *)&v131 + 1);
    swift_bridgeObjectRetain();
    sub_255DCB3AC((uint64_t)&v124);
  }
  else
  {
    id v120 = 0;
    uint64_t v97 = 0;
  }
  uint64_t v98 = v114;
  sub_255E06C44(v52, v114);
  uint64_t v99 = v116;
  sub_255E06B7C(v82, v116, (uint64_t (*)(void))sub_255E05F90);
  sub_255E06C44(v98, v83);
  sub_255E05EC0();
  uint64_t v101 = v100;
  sub_255E06B7C(v99, v83 + *(int *)(v100 + 48), (uint64_t (*)(void))sub_255E05F90);
  char v102 = (void *)(v83 + *(int *)(v101 + 64));
  uint64_t v103 = (uint64_t)v120;
  void *v102 = v120;
  v102[1] = *((void *)&v90 + 1);
  v102[2] = v90;
  v102[3] = v97;
  sub_255E06CCC(v103, *((uint64_t *)&v90 + 1));
  sub_255E06BE4(v82, (uint64_t (*)(void))sub_255E05F90);
  uint64_t v104 = MEMORY[0x263F1A470];
  sub_255E03504(v122, (uint64_t)&qword_269F35DF8, MEMORY[0x263F1A470], MEMORY[0x263F1A830], (uint64_t (*)(void))sub_255E07000);
  sub_255E06D10(v103, *((uint64_t *)&v90 + 1));
  sub_255E06BE4(v99, (uint64_t (*)(void))sub_255E05F90);
  sub_255E03504(v98, (uint64_t)&qword_269F35DF8, v104, MEMORY[0x263F1A830], (uint64_t (*)(void))sub_255E07000);
}

void sub_255E05BBC()
{
  if (!qword_269F36418)
  {
    sub_255E0643C(255, &qword_269F36420, (void (*)(uint64_t))sub_255E05C50, (void (*)(uint64_t))sub_255DE777C);
    sub_255E062B0();
    unint64_t v0 = sub_255EEF8A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36418);
    }
  }
}

void sub_255E05C50()
{
  if (!qword_269F36428)
  {
    sub_255E05D24(255);
    sub_255EEE8F0();
    sub_255E060DC();
    sub_255E06094(&qword_269F36498, MEMORY[0x263F18FD0]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36428);
    }
  }
}

void sub_255E05D24(uint64_t a1)
{
}

void sub_255E05D44(uint64_t a1)
{
}

void sub_255E05D78()
{
  if (!qword_269F36440)
  {
    sub_255E05E2C();
    sub_255E06094(&qword_269F36478, (void (*)(uint64_t))sub_255E05E2C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36440);
    }
  }
}

void sub_255E05E2C()
{
  if (!qword_269F36448)
  {
    sub_255E066C8(255, &qword_269F36450, (uint64_t (*)(uint64_t))sub_255E05EC0, MEMORY[0x263F1BAC8]);
    sub_255E0600C();
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36448);
    }
  }
}

void sub_255E05EC0()
{
  if (!qword_269F36458)
  {
    sub_255E07000(255, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    sub_255E05F90();
    sub_255E07064(255, &qword_269F36468, (uint64_t)&type metadata for RelationshipView, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36458);
    }
  }
}

void sub_255E05F90()
{
  if (!qword_269F36460)
  {
    sub_255E07000(255, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36460);
    }
  }
}

unint64_t sub_255E0600C()
{
  unint64_t result = qword_269F36470;
  if (!qword_269F36470)
  {
    sub_255E066C8(255, &qword_269F36450, (uint64_t (*)(uint64_t))sub_255E05EC0, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36470);
  }
  return result;
}

uint64_t sub_255E06094(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E060DC()
{
  unint64_t result = qword_269F36480;
  if (!qword_269F36480)
  {
    sub_255E05D24(255);
    sub_255E06154();
    sub_255E0625C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36480);
  }
  return result;
}

unint64_t sub_255E06154()
{
  unint64_t result = qword_269F36488;
  if (!qword_269F36488)
  {
    sub_255E05D44(255);
    sub_255E05E2C();
    sub_255E06094(&qword_269F36478, (void (*)(uint64_t))sub_255E05E2C);
    swift_getOpaqueTypeConformance2();
    sub_255E06094(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36488);
  }
  return result;
}

unint64_t sub_255E0625C()
{
  unint64_t result = qword_269F36490;
  if (!qword_269F36490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36490);
  }
  return result;
}

unint64_t sub_255E062B0()
{
  unint64_t result = qword_269F364A0;
  if (!qword_269F364A0)
  {
    sub_255E0643C(255, &qword_269F36420, (void (*)(uint64_t))sub_255E05C50, (void (*)(uint64_t))sub_255DE777C);
    sub_255E05D24(255);
    sub_255EEE8F0();
    sub_255E060DC();
    sub_255E06094(&qword_269F36498, MEMORY[0x263F18FD0]);
    swift_getOpaqueTypeConformance2();
    sub_255E06094((unint64_t *)&qword_269F360B8, (void (*)(uint64_t))sub_255DE777C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F364A0);
  }
  return result;
}

void sub_255E06408(uint64_t a1)
{
}

void sub_255E0643C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E064B0()
{
  if (!qword_269F364B0)
  {
    sub_255E06408(255);
    type metadata accessor for RelationshipPickerView();
    sub_255E06584();
    sub_255E06094(&qword_269F364C8, (void (*)(uint64_t))type metadata accessor for RelationshipPickerView);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F364B0);
    }
  }
}

unint64_t sub_255E06584()
{
  unint64_t result = qword_269F364B8;
  if (!qword_269F364B8)
  {
    sub_255E06408(255);
    sub_255E06094(&qword_269F364C0, (void (*)(uint64_t))sub_255E05BBC);
    sub_255E06094((unint64_t *)&qword_269F360B8, (void (*)(uint64_t))sub_255DE777C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F364B8);
  }
  return result;
}

uint64_t sub_255E06660()
{
  type metadata accessor for ContactLabelEditView(0);
  return sub_255E041D8();
}

uint64_t sub_255E066C0@<X0>(uint64_t a1@<X8>)
{
  return sub_255E042FC(a1);
}

void sub_255E066C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t objectdestroyTm_7()
{
  uint64_t v1 = (int *)(type metadata accessor for ContactLabelEditView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[8];
  sub_255E066C8(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_255EEE860();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_255E06884(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContactLabelEditView(0) - 8);
  uint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  sub_255E04DC0(v4, a1);
}

uint64_t sub_255E068F8(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContactLabelEditView(0) - 8);
  long long v5 = a2[5];
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v11[4] = a2[4];
  v11[5] = v5;
  long long v7 = a2[7];
  v11[6] = a2[6];
  v11[7] = v7;
  long long v8 = a2[1];
  v11[0] = *a2;
  v11[1] = v8;
  long long v9 = a2[3];
  _OWORD v11[2] = a2[2];
  v11[3] = v9;
  return (*(uint64_t (**)(_OWORD *))(v6 + 16))(v11);
}

void sub_255E0698C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  if (!*a2)
  {
    sub_255E05D44(255);
    unint64_t v7 = a3(a1, v6, &type metadata for MedicalIDErrorView);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255E069F4@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_255EEF1F0();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = sub_255EEE800();
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = KeyPath;
  a1[5] = v7;
  return result;
}

void sub_255E06A6C()
{
  qword_269F363D8 = 0x4000000000000000;
}

void sub_255E06A7C()
{
  if (!qword_269F364E8)
  {
    sub_255E066C8(255, &qword_269F36450, (uint64_t (*)(uint64_t))sub_255E05EC0, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F364E8);
    }
  }
}

uint64_t sub_255E06B14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E06B7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E06BE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E06C44(uint64_t a1, uint64_t a2)
{
  sub_255E07000(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E06CCC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_255E06D10(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_255E06D54()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 144) = v2;
  return result;
}

ValueMetadata *type metadata accessor for RelationshipView()
{
  return &type metadata for RelationshipView;
}

uint64_t sub_255E06DB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E06EA4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_255E06ECC()
{
  unint64_t result = qword_269F364F0;
  if (!qword_269F364F0)
  {
    sub_255E06F74();
    sub_255E07160();
    sub_255E06094(&qword_269F36528, (void (*)(uint64_t))sub_255E070B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F364F0);
  }
  return result;
}

void sub_255E06F74()
{
  if (!qword_269F364F8)
  {
    sub_255E07000(255, &qword_269F36500, (void (*)(uint64_t))sub_255D84C2C);
    sub_255E070B0();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F364F8);
    }
  }
}

void sub_255E07000(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E07064(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255E070B0()
{
  if (!qword_269F36508)
  {
    sub_255E0710C();
    unint64_t v0 = sub_255EEEF70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36508);
    }
  }
}

unint64_t sub_255E0710C()
{
  unint64_t result = qword_269F36510;
  if (!qword_269F36510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36510);
  }
  return result;
}

unint64_t sub_255E07160()
{
  unint64_t result = qword_269F36518;
  if (!qword_269F36518)
  {
    sub_255E07000(255, &qword_269F36500, (void (*)(uint64_t))sub_255D84C2C);
    sub_255E0722C();
    sub_255E06094(&qword_269F35198, (void (*)(uint64_t))sub_255D84C2C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36518);
  }
  return result;
}

unint64_t sub_255E0722C()
{
  unint64_t result = qword_269F36520;
  if (!qword_269F36520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36520);
  }
  return result;
}

uint64_t sub_255E07280()
{
  return sub_255E02404();
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CellAccessoryButton()
{
  return &type metadata for CellAccessoryButton;
}

uint64_t sub_255E072D4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E072F0(uint64_t a1@<X8>)
{
  sub_255E07734();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255E07794();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v1;
  *(void *)&v19[16] = *(void *)(v1 + 16);
  long long v20 = *(_OWORD *)&v19[8];
  uint64_t v11 = swift_allocObject();
  long long v12 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v11 + 32) = v12;
  *(void *)(v11 + 48) = *(void *)(v1 + 32);
  uint64_t v18 = v1;
  sub_255E0786C((uint64_t)&v20);
  swift_retain();
  sub_255EEF870();
  sub_255D7F1F0();
  uint64_t v13 = swift_allocObject();
  long long v14 = v20;
  *(_OWORD *)(v13 + 16) = xmmword_255EF1E20;
  *(_OWORD *)(v13 + 32) = v14;
  *(void *)(v13 + 48) = 0x6E6F74747542;
  *(void *)(v13 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v16 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v16)
  {
    sub_255EEFD90();

    sub_255E07D5C((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    sub_255E07898((uint64_t)v10, a1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E0759C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v21 = *(unsigned char *)(a1 + 1);
  sub_255E078FC();
  sub_255DAD520();
  uint64_t v3 = sub_255EEF3D0();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  sub_255EEF1F0();
  uint64_t v8 = sub_255EEF3B0();
  uint64_t v10 = v9;
  char v12 = v11;
  swift_release();
  sub_255D85120(v3, v5, v7);
  swift_bridgeObjectRelease();
  if (v21) {
    sub_255EEF6D0();
  }
  else {
    sub_255EEF6F0();
  }
  uint64_t v13 = sub_255EEF370();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  sub_255D85120(v8, v10, v12 & 1);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = v17 & 1;
  *(void *)(a2 + 24) = v19;
  return result;
}

void sub_255E076F8(uint64_t a1@<X8>)
{
}

void sub_255E07734()
{
  if (!qword_269F35EA8)
  {
    unint64_t v0 = sub_255EEF8A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35EA8);
    }
  }
}

void sub_255E07794()
{
  if (!qword_269F36530)
  {
    sub_255E07734();
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36530);
    }
  }
}

uint64_t sub_255E077FC()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E0783C()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_255E07864@<X0>(uint64_t a1@<X8>)
{
  return sub_255E0759C(*(void *)(v1 + 16), a1);
}

uint64_t sub_255E0786C(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E07898(uint64_t a1, uint64_t a2)
{
  sub_255E07794();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E078FC()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  return sub_255EEFDA0();
}

uint64_t destroy for TextFieldClearButtonView()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s11MedicalIDUI19CellAccessoryButtonV9ViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s11MedicalIDUI19CellAccessoryButtonV9ViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s11MedicalIDUI19CellAccessoryButtonV9ViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldClearButtonView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFieldClearButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CellAccessoryButton.ViewModel()
{
  return &type metadata for CellAccessoryButton.ViewModel;
}

unint64_t sub_255E07C84()
{
  unint64_t result = qword_269F36538;
  if (!qword_269F36538)
  {
    sub_255E07794();
    sub_255E07D5C((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
    sub_255E07D5C(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36538);
  }
  return result;
}

uint64_t sub_255E07D5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CellAccessoryButton.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E07E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CellAccessoryButton.Kind()
{
  return &type metadata for CellAccessoryButton.Kind;
}

unint64_t sub_255E07EAC()
{
  unint64_t result = qword_269F36540;
  if (!qword_269F36540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36540);
  }
  return result;
}

uint64_t destroy for BasicAlertModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for BasicAlertModifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  swift_retain();
  swift_retain();
  if (v5)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    uint64_t v7 = a2[7];
    a1[6] = a2[6];
    a1[7] = v7;
    a1[8] = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v8;
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    a1[8] = a2[8];
  }
  return a1;
}

void *assignWithCopy for BasicAlertModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = a1 + 2;
  uint64_t v5 = (long long *)(a2 + 2);
  uint64_t v6 = a2[3];
  if (a1[3])
  {
    if (v6)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)(a1 + 2));
      long long v8 = *((_OWORD *)a2 + 2);
      long long v7 = *((_OWORD *)a2 + 3);
      long long v9 = *v5;
      a1[8] = a2[8];
      *((_OWORD *)a1 + 2) = v8;
      *((_OWORD *)a1 + 3) = v7;
      *uint64_t v4 = v9;
    }
  }
  else if (v6)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *((_OWORD *)a2 + 2);
    long long v12 = *((_OWORD *)a2 + 3);
    a1[8] = a2[8];
    *((_OWORD *)a1 + 2) = v11;
    *((_OWORD *)a1 + 3) = v12;
    *uint64_t v4 = v10;
  }
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for BasicAlertModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    sub_255DB9AF8(a1 + 16);
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    return a1;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicAlertModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicAlertModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BasicAlertModifier()
{
  return &type metadata for BasicAlertModifier;
}

uint64_t sub_255E0834C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E08368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v30 = a2;
  long long v3 = v2[3];
  long long v40 = v2[2];
  long long v41 = v3;
  uint64_t v42 = *((void *)v2 + 8);
  long long v4 = v2[1];
  long long v38 = *v2;
  long long v39 = v4;
  sub_255E08DB4();
  uint64_t v29 = v5;
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v26 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = v2[3];
  long long v33 = v2[2];
  long long v34 = v7;
  uint64_t v35 = *((void *)v2 + 8);
  long long v8 = *v2;
  long long v32 = v2[1];
  long long v31 = v8;
  sub_255E091F8();
  MEMORY[0x25A29B390](&v36);
  uint64_t v9 = v37;
  if (v37)
  {
    uint64_t v10 = v36;
    swift_bridgeObjectRetain();
    sub_255E092A8(v10, v9);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0xE000000000000000;
  }
  uint64_t v36 = v10;
  uint64_t v37 = v9;
  sub_255EEFF70();
  sub_255E0930C((uint64_t)&v38);
  sub_255E0930C((uint64_t)&v38);
  uint64_t v11 = sub_255EEFF60();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8F500];
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v13;
  long long v14 = v41;
  *(_OWORD *)(v12 + 64) = v40;
  *(_OWORD *)(v12 + 80) = v14;
  *(void *)(v12 + 96) = v42;
  long long v15 = v39;
  *(_OWORD *)(v12 + 32) = v38;
  *(_OWORD *)(v12 + 48) = v15;
  sub_255E0930C((uint64_t)&v38);
  uint64_t v16 = sub_255EEFF60();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v13;
  long long v18 = v41;
  *(_OWORD *)(v17 + 64) = v40;
  *(_OWORD *)(v17 + 80) = v18;
  *(void *)(v17 + 96) = v42;
  long long v19 = v39;
  *(_OWORD *)(v17 + 32) = v38;
  *(_OWORD *)(v17 + 48) = v19;
  sub_255EEF9B0();
  uint64_t v20 = sub_255E09480((uint64_t)&v38);
  uint64_t v25 = v24;
  v24[3] = v32;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  MEMORY[0x270FA5388](v21);
  sub_255E08ED4();
  sub_255E08F84();
  sub_255E09260(0, &qword_269F35150);
  sub_255E09514(&qword_269F36578, (void (*)(uint64_t))sub_255E08ED4);
  sub_255DAD520();
  sub_255E090E0();
  sub_255E09180();
  unint64_t v22 = v26;
  sub_255EEF5E0();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v22, v29);
}

uint64_t sub_255E08790@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E08F84();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = a1[3];
  long long v19 = a1[2];
  long long v20 = v9;
  uint64_t v21 = *((void *)a1 + 8);
  long long v10 = a1[1];
  long long v17 = *a1;
  long long v18 = v10;
  sub_255E091F8();
  MEMORY[0x25A29B390](&v22);
  uint64_t v11 = v23;
  if (v23)
  {
    uint64_t v12 = v22;
    uint64_t v16 = v8;
    uint64_t v13 = v24;
    swift_bridgeObjectRetain();
    long long v8 = v16;
    sub_255E092A8(v12, v11);
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  *(void *)&long long v17 = v13;
  sub_255E0955C(0, &qword_269F36568, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8D488]);
  sub_255EEE140();
  sub_255E07734();
  sub_255E09058();
  sub_255E09514((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
  sub_255E09514(&qword_269F36598, (void (*)(uint64_t))type metadata accessor for BasicAlertModel.Action);
  sub_255EEFA10();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
}

uint64_t sub_255E08A14(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v2);
  sub_255E0955C(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)v15 - v7;
  uint64_t v9 = *(int *)(v3 + 32);
  long long v10 = (void *)(a1 + *(int *)(v3 + 28));
  uint64_t v11 = v10[1];
  v15[0] = *v10;
  v15[1] = v11;
  sub_255D85730(a1 + v9, (uint64_t)v8);
  sub_255D87960(a1, (uint64_t)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  sub_255D86460((uint64_t)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  sub_255DAD520();
  swift_bridgeObjectRetain();
  return sub_255EEF880();
}

uint64_t sub_255E08BD8@<X0>(uint64_t *a1@<X8>)
{
  sub_255E091F8();
  MEMORY[0x25A29B390](&v10);
  uint64_t v2 = v11;
  if (v11 && (uint64_t v3 = v12, v4 = v10, swift_bridgeObjectRetain(), sub_255E092A8(v4, v2), v3))
  {
    sub_255DAD520();
    uint64_t result = sub_255EEF3D0();
    uint64_t v9 = v8 & 1;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  *a1 = result;
  a1[1] = v6;
  a1[2] = v9;
  a1[3] = v7;
  return result;
}

void *sub_255E08CC4@<X0>(BOOL *a1@<X8>)
{
  sub_255E091F8();
  uint64_t result = MEMORY[0x25A29B390](&v4);
  uint64_t v3 = v5;
  if (v5) {
    uint64_t result = (void *)sub_255E092A8(v4, v5);
  }
  *a1 = v3 != 0;
  return result;
}

unsigned char *sub_255E08D44(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    sub_255E091F8();
    return (unsigned char *)sub_255EEF980();
  }
  return result;
}

void sub_255E08DB4()
{
  if (!qword_269F36548)
  {
    sub_255E08ED4();
    sub_255E08F84();
    sub_255E09260(255, &qword_269F35150);
    sub_255E09514(&qword_269F36578, (void (*)(uint64_t))sub_255E08ED4);
    sub_255DAD520();
    sub_255E090E0();
    sub_255E09180();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36548);
    }
  }
}

void sub_255E08ED4()
{
  if (!qword_269F36550)
  {
    sub_255E08F30();
    unint64_t v0 = sub_255EEEF10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36550);
    }
  }
}

unint64_t sub_255E08F30()
{
  unint64_t result = qword_269F36558;
  if (!qword_269F36558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36558);
  }
  return result;
}

void sub_255E08F84()
{
  if (!qword_269F36560)
  {
    sub_255E0955C(255, &qword_269F36568, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8D488]);
    sub_255EEE140();
    sub_255E07734();
    sub_255E09058();
    sub_255D865E8();
    unint64_t v0 = sub_255EEFA20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36560);
    }
  }
}

unint64_t sub_255E09058()
{
  unint64_t result = qword_269F36570;
  if (!qword_269F36570)
  {
    sub_255E0955C(255, &qword_269F36568, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36570);
  }
  return result;
}

unint64_t sub_255E090E0()
{
  unint64_t result = qword_269F36580;
  if (!qword_269F36580)
  {
    sub_255E08F84();
    sub_255E09514((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36580);
  }
  return result;
}

unint64_t sub_255E09180()
{
  unint64_t result = qword_269F36588;
  if (!qword_269F36588)
  {
    sub_255E09260(255, &qword_269F35150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36588);
  }
  return result;
}

void sub_255E091F8()
{
  if (!qword_269F36590)
  {
    sub_255E09260(255, (unint64_t *)&qword_269F35708);
    unint64_t v0 = sub_255EEF9D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36590);
    }
  }
}

void sub_255E09260(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_255EF01E0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_255E092A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_255E0930C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_retain();
  swift_retain();
  sub_255E09390(v2, v3);
  return a1;
}

uint64_t sub_255E09390(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_255E093F8@<X0>(BOOL *a1@<X8>)
{
  return sub_255E08CC4(a1);
}

uint64_t objectdestroyTm_8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

unsigned char *sub_255E09474(unsigned char *result)
{
  return sub_255E08D44(result);
}

uint64_t sub_255E09480(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_release();
  swift_release();
  sub_255E092A8(v2, v3);
  return a1;
}

uint64_t sub_255E09504@<X0>(uint64_t a1@<X8>)
{
  return sub_255E08790(*(long long **)(v1 + 16), a1);
}

uint64_t sub_255E0950C@<X0>(uint64_t *a1@<X8>)
{
  return sub_255E08BD8(a1);
}

uint64_t sub_255E09514(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E0955C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E095C0()
{
  uint64_t v1 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = v2 + *(int *)(v1 + 24);
  uint64_t v5 = sub_255EEE4F0();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(v2 + *(int *)(v1 + 28))) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_255E09754()
{
  uint64_t v1 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t result = v1 - 8;
  uint64_t v4 = (uint64_t (**)(void))(v0
                          + *(int *)(result + 36)
                          + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  if (*v4) {
    return (*v4)();
  }
  return result;
}

uint64_t sub_255E097C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E098B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 64);
  v7[0] = *(void *)a1;
  v7[1] = v3;
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = v4;
  return MEMORY[0x25A29B090](v7, a2, &type metadata for BasicAlertModifier, a3);
}

BOOL MedicalIDEditingState.isEditingAvailable.getter()
{
  return *v0 == 0;
}

MedicalIDUI::MedicalIDEditingState_optional __swiftcall MedicalIDEditingState.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_255EF0460();
  result.value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static MedicalIDEditingState.allCases.getter()
{
  return &unk_2704A33F8;
}

unint64_t MedicalIDEditingState.rawValue.getter()
{
  unint64_t result = 0xD00000000000001BLL;
  switch(*v0)
  {
    case 1:
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      unint64_t result = 0x64656C62616E65;
      break;
  }
  return result;
}

uint64_t sub_255E09A08(unsigned __int8 *a1, char *a2)
{
  return sub_255D8B518(*a1, *a2);
}

unint64_t sub_255E09A18()
{
  unint64_t result = qword_269F365A0;
  if (!qword_269F365A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F365A0);
  }
  return result;
}

uint64_t sub_255E09A6C()
{
  return sub_255EA4104();
}

uint64_t sub_255E09A74()
{
  return sub_255EA45CC();
}

uint64_t sub_255E09A7C()
{
  return sub_255EA468C();
}

MedicalIDUI::MedicalIDEditingState_optional sub_255E09A84(Swift::String *a1)
{
  return MedicalIDEditingState.init(rawValue:)(*a1);
}

unint64_t sub_255E09A90@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = MedicalIDEditingState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_255E09ABC()
{
  unint64_t result = qword_269F365A8;
  if (!qword_269F365A8)
  {
    sub_255E09B14();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F365A8);
  }
  return result;
}

void sub_255E09B14()
{
  if (!qword_269F365B0)
  {
    unint64_t v0 = sub_255EEFF00();
    if (!v1) {
      atomic_store(v0, &qword_269F365B0);
    }
  }
}

void sub_255E09B6C(void *a1@<X8>)
{
  *a1 = &unk_2704A3420;
}

uint64_t getEnumTagSinglePayload for OrganDonationStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MedicalIDEditingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E09CD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditingState()
{
  return &type metadata for MedicalIDEditingState;
}

uint64_t sub_255E09D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEFFA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_255EEFF90();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_255E0C610(a1, &qword_269F34FE0, MEMORY[0x263F8F520]);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_255EEFF20();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_255E09ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEFFA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_255EEFF90();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_255E0C610(a1, &qword_269F34FE0, MEMORY[0x263F8F520]);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_255EEFF20();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_255E0C950();
  return swift_task_create();
}

uint64_t PregnancySampleDataProvider.__allocating_init(healthStore:)(uint64_t a1)
{
  sub_255E0B55C(0, &qword_269F34FE0, MEMORY[0x263F8F520]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v1;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  uint64_t v9 = sub_255EEE100();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  long long v10 = (void *)(v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName);
  *long long v10 = 0;
  v10[1] = 0;
  sub_255EEE300();
  *(void *)(v7 + 16) = &unk_269F365C0;
  *(void *)(v7 + 24) = v6;
  uint64_t v11 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v7;
  swift_retain();
  sub_255E09D10((uint64_t)v5, (uint64_t)&unk_269F365E8, (uint64_t)v12);
  swift_release();
  return v7;
}

uint64_t PregnancySampleDataProvider.ongoingEstimatedDueDate.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_255E0B444();
  sub_255EEE2D0();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  swift_beginAccess();
  return sub_255E0B4E8(v3, a1);
}

uint64_t PregnancySampleDataProvider.ongoingEstimatedDueDate.setter(uint64_t a1)
{
  return sub_255E0C610(a1, &qword_269F35058, MEMORY[0x270FA9250]);
}

uint64_t sub_255E0A3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  swift_beginAccess();
  sub_255E0CB8C(a2, v3);
  return swift_endAccess();
}

void (*PregnancySampleDataProvider.ongoingEstimatedDueDate.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  v3[4] = OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  *uint64_t v3 = v1;
  v3[5] = sub_255E0B444();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  swift_beginAccess();
  return sub_255E0A518;
}

void sub_255E0A518(void **a1)
{
}

uint64_t PregnancySampleDataProvider.ongoingEstimatedDueDateTimeZoneName.getter()
{
  swift_getKeyPath();
  sub_255E0B444();
  sub_255EEE2D0();
  swift_release();
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_255E0A5C4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E0B444();
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName);
  swift_beginAccess();
  uint64_t v5 = v4[1];
  *a2 = *v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E0A660()
{
  return swift_release();
}

uint64_t PregnancySampleDataProvider.ongoingEstimatedDueDateTimeZoneName.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E0A7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName);
  swift_beginAccess();
  *uint64_t v5 = a2;
  v5[1] = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void (*PregnancySampleDataProvider.ongoingEstimatedDueDateTimeZoneName.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  v3[4] = OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  *uint64_t v3 = v1;
  v3[5] = sub_255E0B444();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  swift_beginAccess();
  return sub_255E0A934;
}

void sub_255E0A934(void **a1)
{
}

void sub_255E0A940(void **a1)
{
  uint64_t v1 = *a1;
  swift_endAccess();
  void *v1 = v1[3];
  swift_getKeyPath();
  sub_255EEE2E0();
  swift_release();
  free(v1);
}

uint64_t sub_255E0A9BC(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return MEMORY[0x270FA2498](sub_255E0A9DC, 0, 0);
}

uint64_t sub_255E0A9DC()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  unint64_t v4 = sub_255E0C0D4();
  *uint64_t v3 = v0;
  v3[1] = sub_255E0AADC;
  return MEMORY[0x270FA2360](v0 + 2, 0, 0, 0xD000000000000024, 0x8000000255EFA100, sub_255E0CCBC, v2, v4);
}

uint64_t sub_255E0AADC()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_255E0CCB8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_255E0ABF8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_255E0ABF8()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t static PregnancySampleDataProvider.defaultPregnancyModelProvider(with:)(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return MEMORY[0x270FA2498](sub_255E0AC34, 0, 0);
}

uint64_t sub_255E0AC34()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  unint64_t v4 = sub_255E0C0D4();
  *uint64_t v3 = v0;
  v3[1] = sub_255E0AD34;
  return MEMORY[0x270FA2360](v0 + 2, 0, 0, 0xD000000000000024, 0x8000000255EFA100, sub_255E0C0CC, v2, v4);
}

uint64_t sub_255E0AD34()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_255E0AE50;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_255E0ABF8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_255E0AE50()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PregnancySampleDataProvider.__allocating_init(modelProvider:)(uint64_t a1, uint64_t a2)
{
  sub_255E0B55C(0, &qword_269F34FE0, MEMORY[0x263F8F520]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  uint64_t v9 = sub_255EEE100();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  long long v10 = (void *)(v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName);
  *long long v10 = 0;
  v10[1] = 0;
  sub_255EEE300();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v11 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v7;
  swift_retain();
  sub_255E09D10((uint64_t)v6, (uint64_t)&unk_269F36608, (uint64_t)v12);
  swift_release();
  return v7;
}

uint64_t PregnancySampleDataProvider.init(modelProvider:)(uint64_t a1, uint64_t a2)
{
  sub_255E0B55C(0, &qword_269F34FE0, MEMORY[0x263F8F520]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = v2 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  uint64_t v9 = sub_255EEE100();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  long long v10 = (void *)(v2 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName);
  *long long v10 = 0;
  v10[1] = 0;
  sub_255EEE300();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  uint64_t v11 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  uint64_t v12[3] = 0;
  v12[4] = v2;
  swift_retain();
  sub_255E09D10((uint64_t)v7, (uint64_t)&unk_269F36610, (uint64_t)v12);
  swift_release();
  return v2;
}

uint64_t sub_255E0B1F0()
{
  return swift_deallocObject();
}

uint64_t sub_255E0B228()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_255D89858;
  v3[3] = v2;
  return MEMORY[0x270FA2498](sub_255E0A9DC, 0, 0);
}

uint64_t sub_255E0B2D4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7EE18;
  return PregnancySampleDataProvider.fetchData()();
}

uint64_t sub_255E0B368()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7EE18;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_255D7EE18;
  return PregnancySampleDataProvider.fetchData()();
}

unint64_t sub_255E0B444()
{
  unint64_t result = qword_269F365F0;
  if (!qword_269F365F0)
  {
    type metadata accessor for PregnancySampleDataProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F365F0);
  }
  return result;
}

uint64_t type metadata accessor for PregnancySampleDataProvider()
{
  uint64_t result = qword_269F36620;
  if (!qword_269F36620) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E0B4E8(uint64_t a1, uint64_t a2)
{
  sub_255E0B55C(0, &qword_269F35058, MEMORY[0x270FA9250]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_255E0B55C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EF01E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E0B5B0()
{
  return sub_255E0A3AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_255E0B5D4()
{
  return sub_255E0A7C0(v0[2], v0[3], v0[4]);
}

uint64_t PregnancySampleDataProvider.fetchData()()
{
  v1[8] = v0;
  v1[9] = *v0;
  uint64_t v2 = sub_255EEE3D0();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_255E0B6DC, 0, 0);
}

uint64_t sub_255E0B6DC()
{
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(*(void *)(v0 + 64) + 16) + **(int **)(*(void *)(v0 + 64) + 16));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  void *v1 = v0;
  v1[1] = sub_255E0B7A8;
  return v3();
}

uint64_t sub_255E0B7A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_255E0BBE4;
  }
  else {
    uint64_t v4 = sub_255E0B8BC;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_255E0B8BC()
{
  uint64_t v1 = *(void **)(v0 + 112);
  if (v1)
  {
    if (objc_msgSend(*(id *)(v0 + 112), sel_state) == (id)1)
    {
      id v2 = objc_msgSend(v1, sel_estimatedDueDate);
      sub_255E0B55C(0, &qword_269F35058, MEMORY[0x270FA9250]);
      uint64_t v3 = swift_task_alloc();
      if (v2)
      {
        sub_255EEE0D0();

        uint64_t v4 = sub_255EEE100();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
      }
      else
      {
        uint64_t v5 = sub_255EEE100();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
      }
      uint64_t v6 = *(void *)(v0 + 64);
      swift_getKeyPath();
      uint64_t v7 = swift_task_alloc();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = v3;
      *(void *)(v0 + 48) = v6;
      sub_255E0B444();
      sub_255EEE2C0();
      swift_release();
      swift_task_dealloc();
      sub_255E0C610(v3, &qword_269F35058, MEMORY[0x270FA9250]);
      swift_task_dealloc();
      id v8 = objc_msgSend(v1, sel_sample);
      uint64_t v9 = v8;
      if (v8)
      {
        id v10 = objc_msgSend(v8, sel__timeZoneName);

        if (v10)
        {
          uint64_t v11 = sub_255EEFD90();
          uint64_t v9 = v12;
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v13 = *(void *)(v0 + 64);
      swift_getKeyPath();
      uint64_t v14 = (void *)swift_task_alloc();
      void v14[2] = v13;
      v14[3] = v11;
      void v14[4] = v9;
      *(void *)(v0 + 56) = v13;
      sub_255EEE2C0();

      swift_release();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
    }
    else
    {
    }
  }
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_255E0BBE4()
{
  char v26 = v0;
  if (qword_269F34C50 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[15];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_269F3FE80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  id v6 = v1;
  id v7 = v1;
  id v8 = sub_255EEE3B0();
  os_log_type_t v9 = sub_255EF00C0();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = (void *)v0[15];
  uint64_t v13 = v0[11];
  uint64_t v12 = v0[12];
  uint64_t v14 = v0[10];
  if (v10)
  {
    uint64_t v24 = v0[10];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v25 = v23;
    *(_DWORD *)uint64_t v15 = 136315650;
    uint64_t v16 = sub_255EF05E0();
    v0[2] = sub_255DB0024(v16, v17, &v25);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    v0[3] = sub_255DB0024(0x7461446863746566, 0xEB00000000292861, &v25);
    sub_255EF0200();
    *(_WORD *)(v15 + 22) = 2080;
    v0[4] = v11;
    id v18 = v11;
    sub_255D89E7C();
    uint64_t v19 = sub_255EEFDC0();
    v0[5] = sub_255DB0024(v19, v20, &v25);
    sub_255EF0200();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_255D76000, v8, v9, "%s %s Error: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v23, -1, -1);
    MEMORY[0x25A29C8A0](v15, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v24);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

void sub_255E0BEF0(uint64_t a1, void *a2)
{
  sub_255E0C9AC();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  id v10 = objc_allocWithZone(MEMORY[0x263F0A490]);
  aBlock[4] = sub_255E0CAE8;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_255E0C444;
  aBlock[3] = &block_descriptor_2;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = a2;
  id v13 = objc_msgSend(v10, sel_initWithUpdateHandler_, v11);
  _Block_release(v11);
  swift_release();
  objc_msgSend(v12, sel_executeQuery_, v13);
}

void sub_255E0C0CC(uint64_t a1)
{
  sub_255E0BEF0(a1, *(void **)(v1 + 16));
}

unint64_t sub_255E0C0D4()
{
  unint64_t result = qword_269F36600;
  if (!qword_269F36600)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F36600);
  }
  return result;
}

uint64_t sub_255E0C118()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_255D7EE18;
  return PregnancySampleDataProvider.fetchData()();
}

id sub_255E0C1F0(uint64_t a1, void *a2, id a3, void *a4)
{
  if (a2)
  {
    sub_255E0C9AC();
    id v7 = a2;
    sub_255EEFF40();
  }
  else
  {
    if (!a3) {
      id v9 = objc_msgSend(self, sel_hk_error_userInfo_, 0, 0);
    }
    id v10 = a3;
    sub_255E0C9AC();
    sub_255EEFF30();
  }
  return objc_msgSend(a4, sel_stopQuery_, a1);
}

uint64_t PregnancySampleDataProvider.deinit()
{
  swift_release();
  sub_255E0C610(v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate, &qword_269F35058, MEMORY[0x270FA9250]);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t PregnancySampleDataProvider.__deallocating_deinit()
{
  swift_release();
  sub_255E0C610(v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate, &qword_269F35058, MEMORY[0x270FA9250]);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void sub_255E0C444(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t sub_255E0C4EC()
{
  return type metadata accessor for PregnancySampleDataProvider();
}

void sub_255E0C4F4()
{
  sub_255E0B55C(319, &qword_269F35058, MEMORY[0x270FA9250]);
  if (v0 <= 0x3F)
  {
    sub_255EEE310();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PregnancySampleDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PregnancySampleDataProvider);
}

uint64_t dispatch thunk of PregnancySampleDataProvider.__allocating_init(modelProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_255E0C610(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_255E0B55C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255E0C66C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_255E0C74C;
  return v5(v2 + 32);
}

uint64_t sub_255E0C74C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_255E0C860()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E0C898(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_255D7E778;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_269F36630 + dword_269F36630);
  return v6(a1, v4);
}

void sub_255E0C950()
{
  if (!qword_269F36640)
  {
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36640);
    }
  }
}

void sub_255E0C9AC()
{
  if (!qword_269F36648)
  {
    sub_255E0C0D4();
    sub_255D89E7C();
    unint64_t v0 = sub_255EEFF50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36648);
    }
  }
}

uint64_t sub_255E0CA1C()
{
  sub_255E0C9AC();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  return swift_deallocObject();
}

id sub_255E0CAE8(uint64_t a1, void *a2, void *a3)
{
  sub_255E0C9AC();
  id v7 = *(void **)(v3 + 16);
  return sub_255E0C1F0(a1, a2, a3, v7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_255E0CB8C(uint64_t a1, uint64_t a2)
{
  sub_255E0B55C(0, &qword_269F35058, MEMORY[0x270FA9250]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E0CC00(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_255D7EE18;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_269F368F0 + dword_269F368F0);
  return v6(a1, v4);
}

uint64_t sub_255E0CCC4()
{
  return sub_255E0B5B0();
}

uint64_t sub_255E0CCDC()
{
  return sub_255E0B5D4();
}

ValueMetadata *type metadata accessor for MedicalIDCellPlaceholderText()
{
  return &type metadata for MedicalIDCellPlaceholderText;
}

uint64_t destroy for MedicalIDCellBodyText()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MedicalIDCellBodyText(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MedicalIDCellBodyText(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for MedicalIDCellBodyText(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDCellBodyText(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDCellBodyText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDCellBodyText()
{
  return &type metadata for MedicalIDCellBodyText;
}

uint64_t sub_255E0CF40()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E0CF5C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  sub_255E0EB0C(0, &qword_269F36680, &qword_269F36688);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v58 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v59 = (uint64_t)&v55 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v55 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v55 - v13;
  sub_255E0E384();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v62 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v61 = (uint64_t)&v55 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v60 = (char *)&v55 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v55 - v22;
  uint64_t v24 = a1[1];
  uint64_t v25 = &off_255EF1000;
  uint64_t v65 = v5;
  uint64_t v66 = v4;
  uint64_t v64 = (char *)&v55 - v22;
  if (v24)
  {
    uint64_t v67 = *a1;
    uint64_t v68 = v24;
    sub_255DAD520();
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_255EEF3D0();
    uint64_t v55 = v27;
    uint64_t v56 = v26;
    uint64_t v67 = v26;
    uint64_t v68 = v27;
    char v29 = v28 & 1;
    char v69 = v28 & 1;
    char v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v30;
    uint64_t v70 = (uint64_t)v30;
    sub_255E0E960(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8E0F8]);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_255EF1E20;
    uint64_t v32 = a1[5];
    *(void *)(v31 + 32) = a1[4];
    *(void *)(v31 + 40) = v32;
    *(void *)(v31 + 48) = 0x656C746954;
    *(void *)(v31 + 56) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    long long v33 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v34 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (!v34)
    {
      __break(1u);
      goto LABEL_11;
    }
    sub_255EEFD90();

    sub_255E0EB7C(0, &qword_269F36688);
    sub_255E0EBC8(&qword_269F366D0, &qword_269F36688, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (void (*)(void))sub_255E0E9B0);
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v56, v55, v29);
    swift_bridgeObjectRelease();
    sub_255E0EA04((uint64_t)v12, (uint64_t)v14, &qword_269F36680, &qword_269F36688);
    uint64_t v23 = v64;
    sub_255E0EA04((uint64_t)v14, (uint64_t)v64, &qword_269F36680, &qword_269F36688);
    uint64_t v4 = v66;
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56);
    v35(v23, 0, 1, v66);
    uint64_t v25 = &off_255EF1000;
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v35((char *)&v55 - v22, 1, 1, v4);
  }
  uint64_t v36 = a1[3];
  if (!v36)
  {
    uint64_t v49 = (uint64_t)v60;
    v35(v60, 1, 1, v4);
    goto LABEL_9;
  }
  char v57 = v35;
  uint64_t v67 = a1[2];
  uint64_t v68 = v36;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_255EEF3D0();
  uint64_t v39 = v38;
  uint64_t v67 = v37;
  uint64_t v68 = v38;
  char v41 = v40 & 1;
  char v69 = v40 & 1;
  uint64_t v56 = v42;
  uint64_t v70 = v42;
  sub_255E0E960(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8E0F8]);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = *((_OWORD *)v25 + 226);
  uint64_t v44 = a1[5];
  *(void *)(v43 + 32) = a1[4];
  *(void *)(v43 + 40) = v44;
  *(void *)(v43 + 48) = 0x65756C6156;
  *(void *)(v43 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  long long v45 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v46 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v46)
  {
    sub_255EEFD90();

    sub_255E0EB7C(0, &qword_269F36688);
    sub_255E0EBC8(&qword_269F366D0, &qword_269F36688, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (void (*)(void))sub_255E0E9B0);
    uint64_t v47 = (uint64_t)v58;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v37, v39, v41);
    swift_bridgeObjectRelease();
    uint64_t v48 = v59;
    sub_255E0EA04(v47, v59, &qword_269F36680, &qword_269F36688);
    uint64_t v49 = (uint64_t)v60;
    sub_255E0EA04(v48, (uint64_t)v60, &qword_269F36680, &qword_269F36688);
    uint64_t v23 = v64;
    v57((char *)v49, 0, 1, v66);
LABEL_9:
    uint64_t v50 = v61;
    sub_255E0E8A0((uint64_t)v23, v61);
    uint64_t v51 = v62;
    sub_255E0E8A0(v49, v62);
    uint64_t v52 = v63;
    sub_255E0E8A0(v50, v63);
    sub_255E0E318();
    uint64_t v54 = v52 + *(int *)(v53 + 48);
    *(void *)uint64_t v54 = 0;
    *(unsigned char *)(v54 + 8) = 1;
    sub_255E0E8A0(v51, v52 + *(int *)(v53 + 64));
    sub_255E0E904(v49);
    sub_255E0E904((uint64_t)v23);
    sub_255E0E904(v51);
    sub_255E0E904(v50);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_255E0D5EC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a2();
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 1;
  a3(0);
  return a4(a1);
}

void sub_255E0D654(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  sub_255E0EB0C(0, &qword_269F36680, &qword_269F36688);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v3);
  uint64_t v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v57 = (uint64_t)&v53 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v53 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v53 - v13;
  sub_255E0E384();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v60 = (uint64_t)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v59 = (uint64_t)&v53 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v58 = (char *)&v53 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v53 - v22;
  uint64_t v24 = a1[1];
  uint64_t v63 = v5;
  uint64_t v64 = v4;
  uint64_t v62 = (char *)&v53 - v22;
  if (!v24)
  {
    id v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v34((char *)&v53 - v22, 1, 1, v4);
    uint64_t v35 = a1[3];
    if (v35) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v48 = (uint64_t)v58;
    v34(v58, 1, 1, v4);
    goto LABEL_8;
  }
  uint64_t v65 = *a1;
  uint64_t v66 = v24;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_255EEF3D0();
  uint64_t v53 = v26;
  uint64_t v54 = v25;
  uint64_t v65 = v25;
  uint64_t v66 = v26;
  char v28 = v27 & 1;
  char v67 = v27 & 1;
  uint64_t v55 = v29;
  uint64_t v68 = (uint64_t)v29;
  sub_255E0E960(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8E0F8]);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_255EF1E20;
  uint64_t v31 = a1[5];
  *(void *)(v30 + 32) = a1[4];
  *(void *)(v30 + 40) = v31;
  *(void *)(v30 + 48) = 0x656C746954;
  *(void *)(v30 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v32 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v33 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v33)
  {
    __break(1u);
    goto LABEL_10;
  }
  sub_255EEFD90();

  sub_255E0EB7C(0, &qword_269F36688);
  sub_255E0EBC8(&qword_269F366D0, &qword_269F36688, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (void (*)(void))sub_255E0E9B0);
  sub_255EEF580();
  swift_bridgeObjectRelease();
  sub_255D85120(v54, v53, v28);
  swift_bridgeObjectRelease();
  sub_255E0EA04((uint64_t)v12, (uint64_t)v14, &qword_269F36680, &qword_269F36688);
  uint64_t v23 = v62;
  sub_255E0EA04((uint64_t)v14, (uint64_t)v62, &qword_269F36680, &qword_269F36688);
  uint64_t v4 = v64;
  id v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
  v34(v23, 0, 1, v64);
  uint64_t v35 = a1[3];
  if (!v35) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v55 = v34;
  uint64_t v65 = a1[2];
  uint64_t v66 = v35;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_255EEF3D0();
  uint64_t v38 = v37;
  uint64_t v65 = v36;
  uint64_t v66 = v37;
  char v40 = v39 & 1;
  char v67 = v39 & 1;
  uint64_t v54 = v41;
  uint64_t v68 = v41;
  sub_255E0E960(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8E0F8]);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_255EF1E20;
  uint64_t v43 = a1[5];
  *(void *)(v42 + 32) = a1[4];
  *(void *)(v42 + 40) = v43;
  *(void *)(v42 + 48) = 0x65756C6156;
  *(void *)(v42 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v44 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v45 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v45)
  {
    sub_255EEFD90();

    sub_255E0EB7C(0, &qword_269F36688);
    sub_255E0EBC8(&qword_269F366D0, &qword_269F36688, (uint64_t)&type metadata for MedicalIDCellBodyTextStyle, (void (*)(void))sub_255E0E9B0);
    uint64_t v46 = (uint64_t)v56;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v36, v38, v40);
    swift_bridgeObjectRelease();
    uint64_t v47 = v57;
    sub_255E0EA04(v46, v57, &qword_269F36680, &qword_269F36688);
    uint64_t v48 = (uint64_t)v58;
    sub_255E0EA04(v47, (uint64_t)v58, &qword_269F36680, &qword_269F36688);
    uint64_t v23 = v62;
    v55((char *)v48, 0, 1, v64);
LABEL_8:
    uint64_t v49 = v59;
    sub_255E0E8A0((uint64_t)v23, v59);
    uint64_t v50 = v60;
    sub_255E0E8A0(v48, v60);
    uint64_t v51 = v61;
    sub_255E0E8A0(v49, v61);
    sub_255E0E4A8();
    sub_255E0E8A0(v50, v51 + *(int *)(v52 + 48));
    sub_255E0E904(v48);
    sub_255E0E904((uint64_t)v23);
    sub_255E0E904(v50);
    sub_255E0E904(v49);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_255E0DCD0@<X0>(uint64_t a1@<X8>)
{
  sub_255E0E178();
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v7 = v1[1];
  long long v18 = *v1;
  long long v19 = v7;
  long long v20 = v1[2];
  sub_255E0E5B8((uint64_t)&v18, (uint64_t)v21);
  sub_255E0E5B8((uint64_t)&v19, (uint64_t)v22);
  long long v23 = v20;
  uint64_t v8 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  long long v9 = v19;
  *((_OWORD *)v8 + 1) = v18;
  *((_OWORD *)v8 + 2) = v9;
  *((_OWORD *)v8 + 3) = v20;
  uint64_t v10 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  long long v11 = v19;
  *((_OWORD *)v10 + 1) = v18;
  *((_OWORD *)v10 + 2) = v11;
  *((_OWORD *)v10 + 3) = v20;
  *uint64_t v6 = swift_getKeyPath();
  sub_255E0E740(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  id v12 = (char *)v6 + v4[15];
  uint64_t v13 = *MEMORY[0x263F18CB8];
  uint64_t v14 = sub_255EEE860();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  uint64_t v15 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v6 + v4[16]);
  *uint64_t v15 = sub_255E0E63C;
  v15[1] = v8;
  uint64_t v16 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v6 + v4[17]);
  char *v16 = sub_255E0E6E0;
  v16[1] = v10;
  sub_255E0E7A4((uint64_t)v6, a1);
  sub_255E0786C((uint64_t)v21);
  sub_255E0786C((uint64_t)v22);
  sub_255E0786C((uint64_t)&v23);
  sub_255E0786C((uint64_t)v21);
  sub_255E0786C((uint64_t)v22);
  return sub_255E0786C((uint64_t)&v23);
}

void sub_255E0DEFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a5;
  sub_255E0EB0C(0, &qword_269F366E8, (unint64_t *)&qword_269F366F0);
  MEMORY[0x270FA5388](v9 - 8);
  long long v11 = (char *)&v21 - v10;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_255EEF3D0();
  uint64_t v14 = v13;
  uint64_t v23 = v12;
  uint64_t v24 = v13;
  char v16 = v15 & 1;
  char v25 = v15 & 1;
  uint64_t v21 = v17;
  uint64_t v26 = v17;
  sub_255E0E960(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8E0F8]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_255EF1E20;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = 0x6C6F686563616C50;
  *(void *)(v18 + 56) = 0xEB00000000726564;
  swift_bridgeObjectRetain();
  long long v19 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v20 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v20)
  {
    sub_255EEFD90();

    sub_255E0EB7C(0, (unint64_t *)&qword_269F366F0);
    sub_255E0EBC8((unint64_t *)&qword_269F366F8, (unint64_t *)&qword_269F366F0, (uint64_t)&type metadata for MedicalIDCellPlaceholderTextStyle, (void (*)(void))sub_255E0EC48);
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v12, v14, v16);
    swift_bridgeObjectRelease();
    sub_255E0EA04((uint64_t)v11, v22, &qword_269F366E8, (unint64_t *)&qword_269F366F0);
  }
  else
  {
    __break(1u);
  }
}

void sub_255E0E150(uint64_t a1@<X8>)
{
  sub_255E0DEFC(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_255E0E15C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E0E178()
{
  if (!qword_269F36658)
  {
    sub_255E0E264();
    sub_255E0E3F4();
    sub_255E0E570(&qword_269F366B8, (void (*)(uint64_t))sub_255E0E264);
    sub_255E0E570(&qword_269F366C0, (void (*)(uint64_t))sub_255E0E3F4);
    unint64_t v0 = type metadata accessor for MedicalIDAXLayoutView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36658);
    }
  }
}

void sub_255E0E264()
{
  if (!qword_269F36660)
  {
    sub_255E0E740(255, &qword_269F36668, (uint64_t (*)(uint64_t))sub_255E0E318, MEMORY[0x263F1BAC8]);
    sub_255E0E50C(&qword_269F36690, &qword_269F36668, (uint64_t (*)(uint64_t))sub_255E0E318);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36660);
    }
  }
}

void sub_255E0E318()
{
  if (!qword_269F36670)
  {
    sub_255E0E384();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36670);
    }
  }
}

void sub_255E0E384()
{
  if (!qword_269F36678)
  {
    sub_255E0EB0C(255, &qword_269F36680, &qword_269F36688);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36678);
    }
  }
}

void sub_255E0E3F4()
{
  if (!qword_269F36698)
  {
    sub_255E0E740(255, &qword_269F366A0, (uint64_t (*)(uint64_t))sub_255E0E4A8, MEMORY[0x263F1BAC8]);
    sub_255E0E50C(&qword_269F366B0, &qword_269F366A0, (uint64_t (*)(uint64_t))sub_255E0E4A8);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36698);
    }
  }
}

void sub_255E0E4A8()
{
  if (!qword_269F366A8)
  {
    sub_255E0E384();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F366A8);
    }
  }
}

uint64_t sub_255E0E50C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E0E740(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E0E570(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E0E5B8(uint64_t a1, uint64_t a2)
{
  sub_255E0E960(0, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E0E63C@<X0>(uint64_t a1@<X8>)
{
  return sub_255E0D5EC(v1 + 16, MEMORY[0x263F19720], (void (*)(void))sub_255E0EA74, (uint64_t (*)(uint64_t))sub_255E0CF5C, a1);
}

uint64_t objectdestroyTm_9()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255E0E6E0@<X0>(uint64_t a1@<X8>)
{
  return sub_255E0D5EC(v1 + 16, MEMORY[0x263F19A50], (void (*)(void))sub_255E0E808, (uint64_t (*)(uint64_t))sub_255E0D654, a1);
}

void sub_255E0E740(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E0E7A4(uint64_t a1, uint64_t a2)
{
  sub_255E0E178();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_255E0E808()
{
  if (!qword_269F366C8)
  {
    sub_255E0E740(255, &qword_269F366A0, (uint64_t (*)(uint64_t))sub_255E0E4A8, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F366C8);
    }
  }
}

uint64_t sub_255E0E8A0(uint64_t a1, uint64_t a2)
{
  sub_255E0E384();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E0E904(uint64_t a1)
{
  sub_255E0E384();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255E0E960(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_255E0E9B0()
{
  unint64_t result = qword_269F366D8;
  if (!qword_269F366D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F366D8);
  }
  return result;
}

uint64_t sub_255E0EA04(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  sub_255E0EB0C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_255E0EA74()
{
  if (!qword_269F366E0)
  {
    sub_255E0E740(255, &qword_269F36668, (uint64_t (*)(uint64_t))sub_255E0E318, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F366E0);
    }
  }
}

void sub_255E0EB0C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_255E0EB7C(255, a3);
    sub_255EEF090();
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E0EB7C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_255EEE870();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_255E0EBC8(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E0EB7C(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E0EC48()
{
  unint64_t result = qword_269F36700;
  if (!qword_269F36700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36700);
  }
  return result;
}

uint64_t sub_255E0EC9C()
{
  return sub_255E0E570(&qword_269F36708, (void (*)(uint64_t))sub_255E0E178);
}

unint64_t sub_255E0ECE8()
{
  unint64_t result = qword_269F36710;
  if (!qword_269F36710)
  {
    sub_255E0EB0C(255, &qword_269F366E8, (unint64_t *)&qword_269F366F0);
    sub_255E0EBC8((unint64_t *)&qword_269F366F8, (unint64_t *)&qword_269F366F0, (uint64_t)&type metadata for MedicalIDCellPlaceholderTextStyle, (void (*)(void))sub_255E0EC48);
    sub_255E0E570(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36710);
  }
  return result;
}

uint64_t EditPhotoCellView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  sub_255E0F448();
  *(void *)&long long v34 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E0F774();
  uint64_t v38 = v5;
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v39 = sub_255E0F774;
  sub_255E0F918(0, &qword_269F36790, (void (*)(uint64_t))sub_255E0F774);
  uint64_t v36 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v35 = (char *)&v31 - v9;
  long long v10 = v1[1];
  long long v48 = *v1;
  long long v49 = v10;
  long long v50 = v1[2];
  *(void *)uint64_t v4 = sub_255EEEC90();
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  sub_255E10000();
  sub_255E0F97C(&v48, &v4[*(int *)(v11 + 44)]);
  long long v51 = v48;
  long long v41 = v48;
  sub_255E10098(0, &qword_269F367A0, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  long long v12 = v43;
  uint64_t v13 = v44;
  swift_getKeyPath();
  long long v43 = v12;
  *(void *)&long long v44 = v13;
  sub_255E10098(0, &qword_269F367A8, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = (_OWORD *)swift_allocObject();
  long long v15 = v49;
  v14[1] = v48;
  void v14[2] = v15;
  v14[3] = v50;
  sub_255E10A30((uint64_t)&v48);
  sub_255E0F848(0);
  sub_255E13FAC(&qword_269F36778, (void (*)(uint64_t))sub_255E0F448);
  sub_255E0F870();
  sub_255EEF4E0();
  swift_release();
  swift_release();
  swift_release();
  sub_255E13E98((uint64_t)v4, (uint64_t (*)(void))sub_255E0F448);
  long long v41 = v51;
  sub_255EEF840();
  long long v16 = v43;
  uint64_t v17 = v44;
  swift_getKeyPath();
  long long v41 = v16;
  uint64_t v42 = v17;
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v34 = v43;
  long long v33 = v44;
  long long v32 = v45;
  long long v31 = v46;
  uint64_t v18 = v47;
  uint64_t v19 = v37;
  uint64_t v20 = (uint64_t)v35;
  uint64_t v21 = v38;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v35, v7, v38);
  uint64_t v22 = v20 + *(int *)(v36 + 36);
  long long v23 = v33;
  *(_OWORD *)uint64_t v22 = v34;
  *(_OWORD *)(v22 + 16) = v23;
  long long v24 = v31;
  *(_OWORD *)(v22 + 32) = v32;
  *(_OWORD *)(v22 + 48) = v24;
  *(void *)(v22 + 64) = v18;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v21);
  long long v43 = v51;
  sub_255EEF820();
  uint64_t v25 = v41;
  swift_getKeyPath();
  *(void *)&long long v43 = v25;
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  uint64_t v26 = *(void *)(v25 + 64);
  unint64_t v27 = *(void *)(v25 + 72);
  sub_255DAD700(v26, v27);
  swift_release();
  *(void *)&long long v43 = v26;
  *((void *)&v43 + 1) = v27;
  char v28 = (_OWORD *)swift_allocObject();
  long long v29 = v49;
  v28[1] = v48;
  id v28[2] = v29;
  uint64_t v28[3] = v50;
  sub_255E10A30((uint64_t)&v48);
  sub_255DB6E08();
  sub_255E12638();
  sub_255E12754();
  sub_255EEF680();
  swift_release();
  sub_255DAD684(v43, *((unint64_t *)&v43 + 1));
  return sub_255E13C08(v20, (uint64_t)&qword_269F36790, (uint64_t)v39, (uint64_t)&type metadata for BasicAlertModifier, (uint64_t (*)(void))sub_255E0F918);
}

void sub_255E0F448()
{
  if (!qword_269F36718)
  {
    sub_255E10098(255, &qword_269F36720, (uint64_t (*)(uint64_t))sub_255E0F4FC, MEMORY[0x263F1BAC8]);
    sub_255E140E4(&qword_269F36760, &qword_269F36720, (uint64_t (*)(uint64_t))sub_255E0F4FC);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36718);
    }
  }
}

void sub_255E0F4FC()
{
  if (!qword_269F36728)
  {
    sub_255E0F568(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36728);
    }
  }
}

void sub_255E0F568(uint64_t a1)
{
}

void sub_255E0F59C()
{
  if (!qword_269F36738)
  {
    sub_255E0F650();
    sub_255E13FAC(&qword_269F36758, (void (*)(uint64_t))sub_255E0F650);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36738);
    }
  }
}

void sub_255E0F650()
{
  if (!qword_269F36740)
  {
    sub_255E0F6CC();
    sub_255E0F720();
    unint64_t v0 = sub_255EEF350();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36740);
    }
  }
}

unint64_t sub_255E0F6CC()
{
  unint64_t result = qword_269F36748;
  if (!qword_269F36748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36748);
  }
  return result;
}

unint64_t sub_255E0F720()
{
  unint64_t result = qword_269F36750;
  if (!qword_269F36750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36750);
  }
  return result;
}

void sub_255E0F774()
{
  if (!qword_269F36768)
  {
    sub_255E0F448();
    sub_255E0F848(255);
    sub_255E13FAC(&qword_269F36778, (void (*)(uint64_t))sub_255E0F448);
    sub_255E0F870();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36768);
    }
  }
}

void sub_255E0F848(uint64_t a1)
{
}

unint64_t sub_255E0F870()
{
  unint64_t result = qword_269F36780;
  if (!qword_269F36780)
  {
    sub_255E0F848(255);
    sub_255E13FAC(&qword_269F36788, (void (*)(uint64_t))type metadata accessor for ImagePickerView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36780);
  }
  return result;
}

void sub_255E0F918(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E0F97C@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  long long v46 = a2;
  uint64_t v3 = sub_255EEEFA0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E0F650();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E0F59C();
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E0F568(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v45 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v42 = (char *)&v41 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v41 - v20;
  long long v48 = a1;
  uint64_t v47 = a1;
  sub_255E0F6CC();
  sub_255E0F720();
  sub_255EEF340();
  sub_255EEEF80();
  uint64_t v22 = sub_255E13FAC(&qword_269F36758, (void (*)(uint64_t))sub_255E0F650);
  sub_255EEF560();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  long long v51 = *a1;
  sub_255E10098(0, &qword_269F367A0, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v23 = v49;
  swift_getKeyPath();
  *(void *)&long long v51 = v23;
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  uint64_t v24 = *(void *)(v23 + 64);
  unint64_t v25 = *(void *)(v23 + 72);
  sub_255DAD700(v24, v25);
  swift_release();
  uint64_t v26 = sub_255EEFD40();
  MEMORY[0x270FA5388](v26 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  unint64_t v27 = (void *)qword_269F352A8;
  uint64_t v28 = sub_255EEE200();
  MEMORY[0x270FA5388](v28 - 8);
  id v29 = v27;
  sub_255EEE1F0();
  uint64_t v30 = sub_255EEFDA0();
  uint64_t v32 = v31;
  sub_255DAD684(v24, v25);
  *(void *)&long long v51 = v30;
  *((void *)&v51 + 1) = v32;
  uint64_t v49 = v8;
  uint64_t v50 = v22;
  swift_getOpaqueTypeConformance2();
  sub_255DAD520();
  uint64_t v33 = (uint64_t)v42;
  uint64_t v34 = v44;
  sub_255EEF530();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v34);
  sub_255E139E4(v33, (uint64_t)v21, (uint64_t (*)(void))sub_255E0F568);
  uint64_t v35 = v45;
  sub_255E13E30((uint64_t)v21, v45, (uint64_t (*)(void))sub_255E0F568);
  uint64_t v36 = v46;
  *long long v46 = 0;
  *((unsigned char *)v36 + 8) = 1;
  sub_255E0F4FC();
  uint64_t v38 = v37;
  sub_255E13E30(v35, (uint64_t)v36 + *(int *)(v37 + 48), (uint64_t (*)(void))sub_255E0F568);
  char v39 = (char *)v36 + *(int *)(v38 + 64);
  *(void *)char v39 = 0;
  v39[8] = 1;
  sub_255E13E98((uint64_t)v21, (uint64_t (*)(void))sub_255E0F568);
  return sub_255E13E98(v35, (uint64_t (*)(void))sub_255E0F568);
}

void sub_255E10000()
{
  if (!qword_269F36798)
  {
    sub_255E10098(255, &qword_269F36720, (uint64_t (*)(uint64_t))sub_255E0F4FC, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36798);
    }
  }
}

void sub_255E10098(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E100FC(Swift::Void (__swiftcall **a1)()@<X8>)
{
  sub_255E10098(0, &qword_269F367A0, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  sub_255EEF820();
  sub_255EEF820();
  swift_getKeyPath();
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  if (*(void *)(v10 + 72) >> 60 == 15)
  {
    swift_release();
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    swift_weakInit();
    swift_release();
    uint64_t v2 = sub_255E13F3C;
  }
  uint64_t v4 = 0x6369506F746F6850;
  sub_255E13D48(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_255EF1E20;
  *(void *)(v5 + 32) = 0x496C61636964654DLL;
  *(void *)(v5 + 40) = 0xE900000000000044;
  unint64_t v6 = 0xEB0000000072656BLL;
  *(void *)(v5 + 48) = 0x6369506F746F6850;
  *(void *)(v5 + 56) = 0xEB0000000072656BLL;
  uint64_t v7 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v8 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v8)
  {
    uint64_t v4 = sub_255EEFD90();
    unint64_t v6 = v9;
  }
  *a1 = j___s11MedicalIDUI17EditPhotoCellViewV0F5ModelC22cameraMenuButtonTappedyyF;
  a1[1] = (Swift::Void (__swiftcall *)())v10;
  a1[2] = (Swift::Void (__swiftcall *)())sub_255E13EFC;
  a1[3] = (Swift::Void (__swiftcall *)())v10;
  a1[4] = (Swift::Void (__swiftcall *)())v2;
  a1[5] = (Swift::Void (__swiftcall *)())v3;
  a1[6] = (Swift::Void (__swiftcall *)())v4;
  a1[7] = (Swift::Void (__swiftcall *)())v6;
}

uint64_t sub_255E103A4()
{
  return swift_release();
}

void sub_255E10470(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746F685074696445;
  sub_255E10098(0, &qword_269F367A0, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  swift_getKeyPath();
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  uint64_t v3 = *(void *)(v10 + 64);
  unint64_t v4 = *(void *)(v10 + 72);
  sub_255DAD700(v3, v4);
  swift_release();
  sub_255E13D48(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_255EF1E20;
  unint64_t v6 = 0xE90000000000006FLL;
  *(void *)(v5 + 32) = 0x496C61636964654DLL;
  *(void *)(v5 + 40) = 0xE900000000000044;
  *(void *)(v5 + 48) = 0x746F685074696445;
  *(void *)(v5 + 56) = 0xE90000000000006FLL;
  uint64_t v7 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v8 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v8)
  {
    uint64_t v2 = sub_255EEFD90();
    unint64_t v6 = v9;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v2;
  a1[3] = v6;
}

uint64_t sub_255E10650@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = (*(unsigned char *)(v3 + 88) & 1) == 0;
  return result;
}

void sub_255E10704(char *a1)
{
}

void sub_255E1072C(char *a1)
{
}

uint64_t sub_255E10754@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ImagePickerView(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E0F848(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v24 = *a1;
  long long v22 = *a1;
  sub_255E10098(0, &qword_269F367A0, (uint64_t (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v12 = v23;
  swift_getKeyPath();
  *(void *)&long long v22 = v12;
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  uint64_t v13 = *((void *)v12 + 10);
  int v14 = *((unsigned __int8 *)v12 + 88);
  swift_release();
  if (v14) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v13;
  }
  long long v22 = v24;
  sub_255EEF820();
  uint64_t v16 = v23;
  *uint64_t v7 = swift_getKeyPath();
  sub_255E10098(0, &qword_269F35658, (uint64_t (*)(uint64_t))sub_255DAD8AC, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v7 + *(int *)(v5 + 28)) = v15;
  uint64_t v17 = (Swift::Void (__swiftcall **)(UIImage))((char *)v7 + *(int *)(v5 + 32));
  *uint64_t v17 = j___s11MedicalIDUI17EditPhotoCellViewV0F5ModelC8selected5imageySo7UIImageC_tF;
  v17[1] = v16;
  uint64_t v18 = sub_255EEE8A0();
  char v19 = sub_255EEF180();
  sub_255E13E30((uint64_t)v7, (uint64_t)v11, type metadata accessor for ImagePickerView);
  uint64_t v20 = &v11[*(int *)(v9 + 44)];
  *(void *)uint64_t v20 = v18;
  v20[8] = v19;
  sub_255E13E98((uint64_t)v7, type metadata accessor for ImagePickerView);
  return sub_255E139E4((uint64_t)v11, a2, (uint64_t (*)(void))sub_255E0F848);
}

uint64_t sub_255E10A28@<X0>(uint64_t a1@<X8>)
{
  return sub_255E10754((long long *)(v1 + 16), a1);
}

uint64_t sub_255E10A30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_255DAD700(v2, v3);
  return a1;
}

uint64_t sub_255E10A9C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3 = (void *)*a1;
  swift_getKeyPath();
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v4 = v3[12];
  uint64_t v5 = v3[13];
  uint64_t v6 = v3[14];
  uint64_t v7 = v3[15];
  uint64_t v8 = v3[16];
  uint64_t v9 = v3[17];
  uint64_t v10 = v3[18];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  return sub_255E09390(v4, v5);
}

uint64_t sub_255E10B78(uint64_t a1)
{
  sub_255E13CC0(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_255E13DB0(v2, (void (*)(void, void, void, void, void, void, void))sub_255E09390);
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2C0();
  sub_255E13DB0(v2, (void (*)(void, void, void, void, void, void, void))sub_255E092A8);
  return swift_release();
}

uint64_t sub_255E10C8C(uint64_t a1, uint64_t a2)
{
  return sub_255EEF980();
}

uint64_t sub_255E10D10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v79 = a3;
  uint64_t v5 = sub_255EEE9D0();
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  MEMORY[0x270FA5388](v5);
  long long v76 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_255EEE630();
  uint64_t v7 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  long long v72 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_255EEED60();
  uint64_t v65 = *(void *)(v9 - 8);
  uint64_t v66 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E07734();
  uint64_t v64 = v12;
  uint64_t v63 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E134E0();
  uint64_t v68 = *(void *)(v15 - 8);
  uint64_t v69 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1340C(0);
  uint64_t v62 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E133D0(0);
  uint64_t v67 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E13328(0);
  uint64_t v71 = v24;
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v75 = (uint64_t)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v70 = (uint64_t)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v73 = (uint64_t)&v62 - v29;
  uint64_t v30 = sub_255EEFD40();
  MEMORY[0x270FA5388](v30 - 8);
  if (a2 >> 60 != 15) {
    sub_255DAD700(a1, a2);
  }
  sub_255EEFCD0();
  uint64_t v80 = a1;
  unint64_t v81 = a2;
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v31 = (void *)qword_269F352A8;
  uint64_t v32 = sub_255EEE200();
  MEMORY[0x270FA5388](v32 - 8);
  id v33 = v31;
  sub_255EEE1F0();
  uint64_t v82 = sub_255EEFDA0();
  uint64_t v83 = v34;
  sub_255DAD520();
  sub_255EEF890();
  sub_255EEED50();
  sub_255E13FAC((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
  sub_255E13FAC(&qword_269F36808, MEMORY[0x263F19958]);
  uint64_t v35 = v64;
  uint64_t v36 = v66;
  sub_255EEF420();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v36);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v35);
  uint64_t v37 = v72;
  uint64_t v38 = v74;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v72, *MEMORY[0x263F18560], v74);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = (uint64_t *)&v20[*(int *)(v62 + 36)];
  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1A418];
  sub_255E10098(0, &qword_269F36810, MEMORY[0x263F18570], MEMORY[0x263F1A418]);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v40 + *(int *)(v42 + 28), v37, v38);
  uint64_t *v40 = KeyPath;
  uint64_t v44 = v68;
  uint64_t v43 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v20, v17, v69);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v43);
  uint64_t v45 = v76;
  sub_255EEE9C0();
  uint64_t v46 = swift_getKeyPath();
  uint64_t v47 = (uint64_t *)&v23[*(int *)(v67 + 36)];
  sub_255E10098(0, &qword_269F36818, MEMORY[0x263F19168], v41);
  uint64_t v50 = v77;
  uint64_t v49 = v78;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))((char *)v47 + *(int *)(v48 + 28), v45, v78);
  *uint64_t v47 = v46;
  sub_255E13E30((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(void))sub_255E1340C);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v45, v49);
  sub_255E13E98((uint64_t)v20, (uint64_t (*)(void))sub_255E1340C);
  uint64_t v51 = sub_255EEF6D0();
  uint64_t v52 = swift_getKeyPath();
  uint64_t v53 = v70;
  sub_255E13E30((uint64_t)v23, v70, (uint64_t (*)(void))sub_255E133D0);
  uint64_t v54 = (uint64_t *)(v53 + *(int *)(v71 + 36));
  *uint64_t v54 = v52;
  v54[1] = v51;
  sub_255E13E98((uint64_t)v23, (uint64_t (*)(void))sub_255E133D0);
  uint64_t v55 = v73;
  sub_255E139E4(v53, v73, (uint64_t (*)(void))sub_255E13328);
  uint64_t v56 = v75;
  sub_255E13E30(v55, v75, (uint64_t (*)(void))sub_255E13328);
  uint64_t v58 = v79;
  uint64_t v57 = v80;
  unint64_t v59 = v81;
  uint64_t *v79 = v80;
  v58[1] = v59;
  sub_255E132C0();
  sub_255E13E30(v56, (uint64_t)v58 + *(int *)(v60 + 48), (uint64_t (*)(void))sub_255E13328);
  sub_255DAD700(v57, v59);
  sub_255E13E98(v55, (uint64_t (*)(void))sub_255E13328);
  sub_255E13E98(v56, (uint64_t (*)(void))sub_255E13328);
  return sub_255DAD684(v57, v59);
}

uint64_t sub_255E11644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  *(void *)a1 = sub_255EEED70();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  sub_255E13228();
  return sub_255E10D10(v3, v4, (uint64_t *)(a1 + *(int *)(v5 + 44)));
}

void sub_255E116B0(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v95 = a1;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_255E10098(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  long long v87 = (char *)&v85 - v5;
  sub_255E10098(0, &qword_269F36830, (uint64_t (*)(uint64_t))sub_255E138A0, v3);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v94 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v93 = (uint64_t)&v85 - v9;
  sub_255E138D4();
  uint64_t v106 = v10;
  uint64_t v108 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  long long v88 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v101 = (char *)&v85 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v85 - v15;
  sub_255E138A0(0);
  uint64_t v90 = v17;
  uint64_t v89 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v92 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v91 = (uint64_t)&v85 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  long long v86 = (char *)&v85 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v85 = (uint64_t)&v85 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  long long v96 = (char *)&v85 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v105 = (uint64_t)&v85 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v97 = (char *)&v85 - v31;
  MEMORY[0x270FA5388](v30);
  id v33 = (char *)&v85 - v32;
  uint64_t v34 = *(void *)(v2 + 8);
  uint64_t v36 = *(void *)(v2 + 24);
  uint64_t v35 = *(void *)(v2 + 32);
  uint64_t v37 = *(void *)(v2 + 40);
  v109[0] = *(_OWORD *)(v2 + 48);
  uint64_t v38 = (_OWORD *)swift_allocObject();
  long long v39 = *(_OWORD *)(v2 + 16);
  v38[1] = *(_OWORD *)v2;
  v38[2] = v39;
  long long v40 = *(_OWORD *)(v2 + 48);
  v38[3] = *(_OWORD *)(v2 + 32);
  v38[4] = v40;
  uint64_t v98 = v34;
  swift_retain();
  uint64_t v99 = v36;
  swift_retain();
  sub_255E0786C((uint64_t)v109);
  uint64_t v107 = v35;
  uint64_t v100 = v37;
  sub_255D85808(v35);
  sub_255E13968();
  uint64_t v42 = v41;
  uint64_t v43 = sub_255E13FAC(&qword_269F36850, (void (*)(uint64_t))sub_255E13968);
  uint64_t v104 = v42;
  sub_255EEF870();
  sub_255E13D48(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v102 = v44;
  uint64_t v45 = swift_allocObject();
  long long v46 = v109[0];
  long long v103 = xmmword_255EF1E20;
  *(_OWORD *)(v45 + 16) = xmmword_255EF1E20;
  *(_OWORD *)(v45 + 32) = v46;
  uint64_t v47 = *((void *)&v109[0] + 1);
  *(void *)(v45 + 48) = 0x6172656D6143;
  *(void *)(v45 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v48 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v49 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v49)
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_255EEFD90();

  sub_255E13FAC(&qword_269F36858, (void (*)(uint64_t))sub_255E138D4);
  uint64_t v50 = (uint64_t)v97;
  uint64_t v51 = v106;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v108 + 8);
  v108 += 8;
  v52(v16, v51);
  uint64_t v97 = v33;
  sub_255E139E4(v50, (uint64_t)v33, (uint64_t (*)(void))sub_255E138A0);
  uint64_t v53 = (_OWORD *)swift_allocObject();
  long long v54 = *(_OWORD *)(v2 + 16);
  v53[1] = *(_OWORD *)v2;
  v53[2] = v54;
  long long v55 = *(_OWORD *)(v2 + 48);
  v53[3] = *(_OWORD *)(v2 + 32);
  v53[4] = v55;
  swift_retain();
  swift_retain();
  sub_255E0786C((uint64_t)v109);
  uint64_t v56 = v100;
  sub_255D85808(v107);
  uint64_t v57 = v101;
  uint64_t v99 = v43;
  sub_255EEF870();
  uint64_t v58 = swift_allocObject();
  long long v59 = v109[0];
  *(_OWORD *)(v58 + 16) = v103;
  *(_OWORD *)(v58 + 32) = v59;
  *(void *)(v58 + 48) = 0x7972617262694CLL;
  *(void *)(v58 + 56) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  uint64_t v60 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v61 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v98 = v47;
  if (!v61)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_255EEFD90();

  uint64_t v62 = (uint64_t)v96;
  uint64_t v63 = v106;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  v52(v57, v63);
  sub_255E139E4(v62, v105, (uint64_t (*)(void))sub_255E138A0);
  if (!v107)
  {
    uint64_t v75 = 1;
    uint64_t v74 = v93;
    goto LABEL_7;
  }
  swift_retain();
  uint64_t v64 = v87;
  sub_255EEE4D0();
  uint64_t v65 = sub_255EEE4F0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 0, 1, v65);
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = v107;
  *(void *)(v66 + 24) = v56;
  swift_retain();
  uint64_t v67 = v88;
  sub_255EEF860();
  uint64_t v68 = swift_allocObject();
  long long v69 = v109[0];
  *(_OWORD *)(v68 + 16) = v103;
  *(_OWORD *)(v68 + 32) = v69;
  *(void *)(v68 + 48) = 0x6574656C6544;
  *(void *)(v68 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v70 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v71 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v71)
  {
    sub_255EEFD90();

    uint64_t v72 = (uint64_t)v86;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D879C4(v107);
    v52(v67, v63);
    uint64_t v73 = v85;
    sub_255E139E4(v72, v85, (uint64_t (*)(void))sub_255E138A0);
    uint64_t v74 = v93;
    sub_255E139E4(v73, v93, (uint64_t (*)(void))sub_255E138A0);
    uint64_t v75 = 0;
LABEL_7:
    uint64_t v76 = (uint64_t)v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v74, v75, 1, v90);
    uint64_t v77 = v91;
    sub_255E13E30(v76, v91, (uint64_t (*)(void))sub_255E138A0);
    uint64_t v78 = v105;
    uint64_t v79 = v92;
    sub_255E13E30(v105, v92, (uint64_t (*)(void))sub_255E138A0);
    uint64_t v80 = v94;
    sub_255E13AD0(v74, v94);
    uint64_t v81 = v95;
    sub_255E13E30(v77, v95, (uint64_t (*)(void))sub_255E138A0);
    sub_255E13B64();
    uint64_t v83 = v82;
    sub_255E13E30(v79, v81 + *(int *)(v82 + 48), (uint64_t (*)(void))sub_255E138A0);
    sub_255E13AD0(v80, v81 + *(int *)(v83 + 64));
    uint64_t v84 = MEMORY[0x263F8D8F0];
    sub_255E13C08(v74, (uint64_t)&qword_269F36830, (uint64_t)sub_255E138A0, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255E10098);
    sub_255E13E98(v78, (uint64_t (*)(void))sub_255E138A0);
    sub_255E13E98(v76, (uint64_t (*)(void))sub_255E138A0);
    sub_255E13C08(v80, (uint64_t)&qword_269F36830, (uint64_t)sub_255E138A0, v84, (uint64_t (*)(void))sub_255E10098);
    sub_255E13E98(v79, (uint64_t (*)(void))sub_255E138A0);
    sub_255E13E98(v77, (uint64_t (*)(void))sub_255E138A0);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_255E121C8()
{
  return sub_255E1225C();
}

uint64_t sub_255E121F4()
{
  return sub_255E1225C();
}

uint64_t sub_255E1222C()
{
  return sub_255E1225C();
}

uint64_t sub_255E1225C()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  sub_255EEFDA0();
  sub_255DAD520();
  return sub_255EEF7F0();
}

void sub_255E123E4(uint64_t a1@<X8>)
{
}

uint64_t sub_255E12420@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = *(void *)(v3 + 72);
  *a2 = v4;
  a2[1] = v5;
  return sub_255DAD700(v4, v5);
}

uint64_t sub_255E124D0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_getKeyPath();
  sub_255DAD700(v1, v2);
  sub_255E13FAC((unint64_t *)&qword_269F367B0, (void (*)(uint64_t))type metadata accessor for EditPhotoCellView.ViewModel);
  sub_255EEE2C0();
  sub_255DAD684(v1, v2);
  return swift_release();
}

uint64_t objectdestroyTm_10()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 60 != 15) {
    sub_255D80D04(*(void *)(v0 + 48), v1);
  }
  return swift_deallocObject();
}

uint64_t sub_255E12630(uint64_t a1, uint64_t a2)
{
  return sub_255E10C8C(a1, a2);
}

unint64_t sub_255E12638()
{
  unint64_t result = qword_269F367B8;
  if (!qword_269F367B8)
  {
    sub_255E0F918(255, &qword_269F36790, (void (*)(uint64_t))sub_255E0F774);
    sub_255E0F448();
    sub_255E0F848(255);
    sub_255E13FAC(&qword_269F36778, (void (*)(uint64_t))sub_255E0F448);
    sub_255E0F870();
    swift_getOpaqueTypeConformance2();
    sub_255E08F30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F367B8);
  }
  return result;
}

unint64_t sub_255E12754()
{
  unint64_t result = qword_269F367C0;
  if (!qword_269F367C0)
  {
    sub_255DB6E08();
    sub_255E127C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F367C0);
  }
  return result;
}

unint64_t sub_255E127C4()
{
  unint64_t result = qword_269F367C8;
  if (!qword_269F367C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F367C8);
  }
  return result;
}

uint64_t sub_255E1280C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for EditPhotoCellView(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    return sub_255D80D04(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for EditPhotoCellView(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  unint64_t v5 = a2 + 4;
  unint64_t v6 = a2[5];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_255D80890(*v5, v6);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v6;
  }
  return a1;
}

void *assignWithCopy for EditPhotoCellView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  uint64_t v4 = a2 + 4;
  unint64_t v5 = a2[5];
  if (a1[5] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_255D80890(*v4, v5);
      uint64_t v8 = a1[4];
      unint64_t v9 = a1[5];
      a1[4] = v7;
      a1[5] = v5;
      sub_255D80D04(v8, v9);
      return a1;
    }
    sub_255D81EF8((uint64_t)(a1 + 4));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_255D80890(*v4, v5);
  a1[4] = v6;
  a1[5] = v5;
  return a1;
}

void *assignWithTake for EditPhotoCellView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  uint64_t v4 = a2 + 4;
  unint64_t v5 = a1[5];
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = a2[5];
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = a1[4];
      a1[4] = *v4;
      a1[5] = v6;
      sub_255D80D04(v7, v5);
      return a1;
    }
    sub_255D81EF8((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for EditPhotoCellView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditPhotoCellView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditPhotoCellView()
{
  return &type metadata for EditPhotoCellView;
}

uint64_t sub_255E12B9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PhotoEditMenuView(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 32)) {
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhotoEditMenuView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  unint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PhotoEditMenuView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[4];
  if (!a1[4])
  {
    if (v6)
    {
      uint64_t v8 = a2[5];
      a1[4] = v6;
      a1[5] = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = a2[5];
  a1[4] = v6;
  a1[5] = v7;
  swift_retain();
  swift_release();
LABEL_8:
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PhotoEditMenuView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_release();
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotoEditMenuView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotoEditMenuView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotoEditMenuView()
{
  return &type metadata for PhotoEditMenuView;
}

uint64_t destroy for PhotoEditView(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >> 60 != 15) {
    sub_255D80D04(*a1, v1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhotoEditView(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_255D80890(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PhotoEditView(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_255D80890(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_255D80D04(v7, v8);
      goto LABEL_8;
    }
    sub_255D81EF8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  sub_255D80890(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for PhotoEditView(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_255D80D04(v6, v4);
      goto LABEL_6;
    }
    sub_255D81EF8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotoEditView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotoEditView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotoEditView()
{
  return &type metadata for PhotoEditView;
}

uint64_t sub_255E131F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E1320C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E13228()
{
  if (!qword_269F367D0)
  {
    sub_255E10098(255, &qword_269F367D8, (uint64_t (*)(uint64_t))sub_255E132C0, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F367D0);
    }
  }
}

void sub_255E132C0()
{
  if (!qword_269F367E0)
  {
    sub_255E13328(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F367E0);
    }
  }
}

void sub_255E13328(uint64_t a1)
{
}

void sub_255E1335C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E133D0(uint64_t a1)
{
}

void sub_255E1340C(uint64_t a1)
{
}

void sub_255E13448(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255E10098(255, a4, a5, MEMORY[0x263F1A418]);
    unint64_t v8 = sub_255EEE870();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E134E0()
{
  if (!qword_269F36800)
  {
    sub_255E07734();
    sub_255EEED60();
    sub_255E13FAC((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
    sub_255E13FAC(&qword_269F36808, MEMORY[0x263F19958]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36800);
    }
  }
}

void sub_255E135E4()
{
  if (!qword_269F36820)
  {
    sub_255E13D48(255, &qword_269F36828, MEMORY[0x263F1B440], MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EEF080();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36820);
    }
  }
}

uint64_t sub_255E13660()
{
  return sub_255EEEA40();
}

uint64_t sub_255E13684()
{
  return sub_255EEEA40();
}

uint64_t sub_255E136A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255E13738(a1, a2, a3, a4, MEMORY[0x263F18570], MEMORY[0x263F19248]);
}

uint64_t sub_255E136D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255E13738(a1, a2, a3, a4, MEMORY[0x263F18570], MEMORY[0x263F19248]);
}

uint64_t sub_255E13714()
{
  return sub_255EEEAC0();
}

uint64_t sub_255E13738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_255E13808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_255E13738(a1, a2, a3, a4, MEMORY[0x263F19168], MEMORY[0x263F193E0]);
}

uint64_t sub_255E13848@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_255EEEBF0();
  *a1 = result;
  return result;
}

uint64_t sub_255E13874()
{
  return sub_255EEEC00();
}

void sub_255E138A0(uint64_t a1)
{
}

void sub_255E138D4()
{
  if (!qword_269F36840)
  {
    sub_255E13968();
    sub_255E13FAC(&qword_269F36850, (void (*)(uint64_t))sub_255E13968);
    unint64_t v0 = sub_255EEF8A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36840);
    }
  }
}

void sub_255E13968()
{
  if (!qword_269F36848)
  {
    unint64_t v0 = sub_255EEF800();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36848);
    }
  }
}

uint64_t sub_255E139E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroy_30Tm()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255E13AA8()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_255E13AD0(uint64_t a1, uint64_t a2)
{
  sub_255E10098(0, &qword_269F36830, (uint64_t (*)(uint64_t))sub_255E138A0, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_255E13B64()
{
  if (!qword_269F36860)
  {
    sub_255E138A0(255);
    sub_255E10098(255, &qword_269F36830, (uint64_t (*)(uint64_t))sub_255E138A0, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36860);
    }
  }
}

uint64_t sub_255E13C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_255E13C68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E13CA0()
{
  return sub_255E16C6C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_255E13CC0(uint64_t a1, uint64_t a2)
{
  sub_255E13D48(0, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_255E13D48(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E13D94()
{
  return sub_255E16DEC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void *sub_255E13DB0(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_255E13DFC()
{
  return sub_255EEEAB0();
}

void sub_255E13E20(Swift::Void (__swiftcall **a1)()@<X8>)
{
}

void sub_255E13E28(uint64_t *a1@<X8>)
{
}

uint64_t sub_255E13E30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E13E98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E13EFC()
{
  return sub_255E103A4();
}

uint64_t sub_255E13F04()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_255E13F3C()
{
  return sub_255E17CB4();
}

uint64_t sub_255E13F44()
{
  return sub_255E16DDC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_255E13F64()
{
  return sub_255E13FAC(&qword_269F36868, (void (*)(uint64_t))sub_255E13FF4);
}

uint64_t sub_255E13FAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E13FF4()
{
  if (!qword_269F36870)
  {
    sub_255E10098(255, &qword_269F367D8, (uint64_t (*)(uint64_t))sub_255E132C0, MEMORY[0x263F1BAC8]);
    sub_255E140E4(&qword_269F36878, &qword_269F367D8, (uint64_t (*)(uint64_t))sub_255E132C0);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36870);
    }
  }
}

uint64_t sub_255E140A8()
{
  return sub_255E140E4(&qword_269F36880, &qword_269F36888, (uint64_t (*)(uint64_t))sub_255E13B64);
}

uint64_t sub_255E140E4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E10098(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id _HKMedicalIDData.displayName.getter()
{
  id v1 = objc_msgSend(v0, sel_name);
  if (v1)
  {
    uint64_t v2 = sub_255EEFD90();
    unint64_t v4 = v3;

    swift_bridgeObjectRelease();
    uint64_t v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 && (id v6 = objc_msgSend(v0, sel_name)) != 0)
    {
      uint64_t v7 = v6;
      id v1 = (id)sub_255EEFD90();
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t _HKMedicalIDData.typedCopy.getter()
{
  swift_getObjectType();
  objc_msgSend(v0, sel_copy);
  sub_255EF0260();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  return v2;
}

void **sub_255E1427C(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_255EEE280();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    uint64_t v14 = v4;
    v13(v10, v11, v12);
    uint64_t v15 = *(int *)(v8 + 24);
    uint64_t v16 = (char *)v7 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = (void **)((char *)v7 + v19);
    uint64_t v21 = (void **)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
  }
  swift_retain();
  return v7;
}

uint64_t sub_255E143D4(id *a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  int v3 = (char *)a1 + *(int *)(v2 + 20);
  uint64_t v4 = sub_255EEE280();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_release();
}

void **sub_255E144B0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v6;
  v12(v9, v10, v11);
  uint64_t v14 = *(int *)(v7 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void **)((char *)a1 + v18);
  uint64_t v20 = (void **)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  return a1;
}

void **sub_255E145C0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void **)((char *)a1 + v18);
  uint64_t v20 = (void **)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_255E146D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(int *)(v6 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(v6 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_255E147BC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_255E148BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E148D0);
}

uint64_t sub_255E148D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E14990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E149A4);
}

uint64_t sub_255E149A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDMedicationsCellView()
{
  uint64_t result = qword_269F36890;
  if (!qword_269F36890) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E14AAC()
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E14B44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E14B60@<X0>(uint64_t a1@<X8>)
{
  if (qword_269F34B20 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)algn_269F3FDA8;
  uint64_t v21 = qword_269F3FDA0;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_medicationInfo);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_255EEFD90();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = sub_255EEFD40();
  MEMORY[0x270FA5388](v10 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_269F352A8;
  uint64_t v12 = sub_255EEE200();
  MEMORY[0x270FA5388](v12 - 8);
  id v13 = v11;
  sub_255EEE1F0();
  uint64_t v14 = sub_255EEFDA0();
  uint64_t v16 = v15;
  uint64_t v17 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for MedicalIDMedicationsCellView() + 20));
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v18;
  return swift_retain();
}

__n128 sub_255E14D88@<Q0>(uint64_t a1@<X8>)
{
  sub_255E14B60((uint64_t)v8);
  uint64_t v2 = v8[1];
  char v3 = v9;
  uint64_t v4 = v11;
  uint64_t v5 = v13;
  __n128 result = v12;
  long long v7 = v10;
  *(void *)a1 = v8[0];
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = v5;
  return result;
}

unint64_t sub_255E14DEC()
{
  unint64_t result = qword_269F368A0;
  if (!qword_269F368A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F368A0);
  }
  return result;
}

uint64_t MedicalIDMedicalInfoViewModel.init(data:calendar:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = (char *)a4 + *(int *)(v7 + 20);
  uint64_t v9 = sub_255EEE280();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  long long v10 = (char *)a4 + *(int *)(v7 + 24);
  uint64_t v11 = sub_255EEE200();
  __n128 v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  return v12(v10, a3, v11);
}

uint64_t type metadata accessor for MedicalIDMedicalInfoViewModel()
{
  uint64_t result = qword_269F368A8;
  if (!qword_269F368A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.medicationsInfoDescription()()
{
  uint64_t v0 = sub_255E15494((SEL *)&selRef_medicationInfo);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.syncWarningFooterText(for:)(MedicalIDUI::MedicalIDListProperty a1)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a1 == 1)
    {
      id v2 = objc_msgSend(*v1, sel_allergiesListVersion);
      if (!v2)
      {
LABEL_4:
        char v3 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      id v2 = objc_msgSend(*v1, sel_conditionsListVersion);
      if (!v2) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    id v2 = objc_msgSend(*v1, sel_medicationsListVersion);
    if (!v2) {
      goto LABEL_4;
    }
  }

  uint64_t v4 = sub_255EEFD40();
  MEMORY[0x270FA5388](v4 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_269F352A8;
  uint64_t v6 = sub_255EEE200();
  MEMORY[0x270FA5388](v6 - 8);
  id v7 = v5;
  sub_255EEE1F0();
  id v2 = (id)sub_255EEFDA0();
LABEL_11:
  result.value._object = v3;
  result.value._countAndFlagsBits = (uint64_t)v2;
  return result;
}

id MedicalIDMedicalInfoViewModel.data.getter()
{
  return *v0;
}

uint64_t MedicalIDMedicalInfoViewModel.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MedicalIDMedicalInfoViewModel() + 20);
  uint64_t v4 = sub_255EEE280();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t MedicalIDMedicalInfoViewModel.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MedicalIDMedicalInfoViewModel() + 24);
  uint64_t v4 = sub_255EEE200();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t MedicalIDMedicalInfoViewModel.locale.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MedicalIDMedicalInfoViewModel() + 24);
  uint64_t v4 = sub_255EEE200();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*MedicalIDMedicalInfoViewModel.locale.modify())(void)
{
  return nullsub_1;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.medicationsListVersionExists()()
{
  id v1 = objc_msgSend(*v0, sel_medicationsListVersion);
  id v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.allergiesListVersionExists()()
{
  id v1 = objc_msgSend(*v0, sel_allergiesListVersion);
  id v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.conditionsListVersionExists()()
{
  id v1 = objc_msgSend(*v0, sel_conditionsListVersion);
  id v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasAllergyInfo()()
{
  return sub_255E15414((SEL *)&selRef_allergyInfo);
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.allergyInfoDescription()()
{
  uint64_t v0 = sub_255E15494((SEL *)&selRef_allergyInfo);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasMedicationInfo()()
{
  return sub_255E15414((SEL *)&selRef_medicationInfo);
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasMedicalConditions()()
{
  return sub_255E15414((SEL *)&selRef_medicalConditions);
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.medicalConditionsDescription()()
{
  uint64_t v0 = sub_255E15494((SEL *)&selRef_medicalConditions);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall MedicalIDMedicalInfoViewModel.hasMedicalNotes()()
{
  return sub_255E15414((SEL *)&selRef_medicalNotes);
}

id sub_255E15414(SEL *a1)
{
  id result = [*v1 *a1];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_255EEFD90();
    unint64_t v6 = v5;

    swift_bridgeObjectRelease();
    uint64_t v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    return (id)(v7 != 0);
  }
  return result;
}

Swift::String_optional __swiftcall MedicalIDMedicalInfoViewModel.medicalNotesDescription()()
{
  uint64_t v0 = sub_255E15494((SEL *)&selRef_medicalNotes);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t sub_255E15494(SEL *a1)
{
  id v2 = [*v1 *a1];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_255EEFD90();

  return v4;
}

void **initializeBufferWithCopyOfBuffer for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    long long v10 = (char *)a2 + v8;
    uint64_t v11 = sub_255EEE280();
    __n128 v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return v7;
}

uint64_t destroy for MedicalIDMedicalInfoViewModel(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_255EEE280();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  unint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_255EEE200();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void **initializeWithCopy for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE280();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **assignWithCopy for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

void *initializeWithTake for MedicalIDMedicalInfoViewModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void **assignWithTake for MedicalIDMedicalInfoViewModel(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDMedicalInfoViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E15A84);
}

uint64_t sub_255E15A84(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_255EEE280();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_255EEE200();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDMedicalInfoViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E15BC4);
}

void *sub_255E15BC4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *Swift::String_optional result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_255EEE280();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_255EEE200();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_255E15CF0()
{
  uint64_t result = sub_255EEE280();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_255EEE200();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_255E15DC8@<X0>(uint64_t *a1@<X8>)
{
  sub_255E15E08();
  uint64_t result = sub_255EEE420();
  *a1 = result;
  return result;
}

unint64_t sub_255E15E08()
{
  unint64_t result = qword_269F35518;
  if (!qword_269F35518)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F35518);
  }
  return result;
}

uint64_t sub_255E15E48(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t EditPhotoCellView.ViewModel.__allocating_init(initialPictureData:openSettings:authorizationStatusFor:requestAccess:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 80) = 0;
  *(unsigned char *)(v16 + 88) = 1;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(void *)(v16 + 144) = 0;
  sub_255EEE300();
  *(void *)(v16 + 64) = a1;
  *(void *)(v16 + 72) = a2;
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  *(void *)(v16 + 32) = a5;
  *(void *)(v16 + 40) = a6;
  *(void *)(v16 + 48) = a7;
  *(void *)(v16 + 56) = a8;
  return v16;
}

Swift::Void __swiftcall EditPhotoCellView.ViewModel.cameraMenuButtonTapped()()
{
  uint64_t v1 = *MEMORY[0x263EF9D48];
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 32))(*MEMORY[0x263EF9D48]);
  if ((unint64_t)(v2 - 1) < 2)
  {
    sub_255E177DC();
  }
  else if (v2)
  {
    if (v2 == 3)
    {
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      uint64_t v15 = v0;
      sub_255E187BC();
      sub_255EEE2C0();
      swift_release();
    }
    else
    {
      if (qword_269F34C50 != -1) {
        swift_once();
      }
      uint64_t v6 = sub_255EEE3D0();
      __swift_project_value_buffer(v6, (uint64_t)qword_269F3FE80);
      uint64_t v14 = sub_255EEE3B0();
      os_log_type_t v7 = sub_255EF00C0();
      if (os_log_type_enabled(v14, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        uint64_t v15 = v9;
        *(_DWORD *)uint64_t v8 = 136315394;
        uint64_t v10 = sub_255EF05E0();
        sub_255DB0024(v10, v11, &v15);
        sub_255EF0200();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2080;
        type metadata accessor for AVAuthorizationStatus(0);
        uint64_t v12 = sub_255EEFDB0();
        sub_255DB0024(v12, v13, &v15);
        sub_255EF0200();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_255D76000, v14, v7, "[%s]: Encountered unkown media authorization status: %s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v9, -1, -1);
        MEMORY[0x25A29C8A0](v8, -1, -1);
      }
      else
      {
      }
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t (*)(char), uint64_t))(v0 + 48);
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    v4(v1, sub_255E18798, v5);
    swift_release_n();
  }
}

Swift::Void __swiftcall EditPhotoCellView.ViewModel.photoLibraryMenuButtonTapped()()
{
}

uint64_t (*EditPhotoCellView.ViewModel.deleteMenuButtonTapped.getter())()
{
  swift_getKeyPath();
  sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  if (*(void *)(v0 + 72) >> 60 == 15) {
    return 0;
  }
  swift_allocObject();
  swift_weakInit();
  return sub_255E13F3C;
}

uint64_t EditPhotoCellView.ViewModel.pictureData.getter()
{
  swift_getKeyPath();
  uint64_t v3 = v0;
  sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 64);
  sub_255DAD700(v1, *(void *)(v3 + 72));
  return v1;
}

BOOL EditPhotoCellView.ViewModel.imagePickerSheetOpen.getter()
{
  swift_getKeyPath();
  sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  return (*(unsigned char *)(v0 + 88) & 1) == 0;
}

void EditPhotoCellView.ViewModel.imagePickerSheetOpen.setter(char a1)
{
  if (a1)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_255EEE3D0();
    __swift_project_value_buffer(v2, (uint64_t)qword_269F3FE80);
    uint64_t v9 = sub_255EEE3B0();
    os_log_type_t v3 = sub_255EF00C0();
    if (os_log_type_enabled(v9, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v10 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      uint64_t v6 = sub_255EF05E0();
      sub_255DB0024(v6, v7, &v10);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v9, v3, "[%s]: Didn't expect the sheet to be opened directly", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v5, -1, -1);
      MEMORY[0x25A29C8A0](v4, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v10 = v1;
    sub_255E187BC();
    sub_255EEE2C0();
    swift_release();
  }
}

uint64_t EditPhotoCellView.ViewModel.imagePickerSource.getter()
{
  swift_getKeyPath();
  sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  return *(void *)(v0 + 80);
}

Swift::Void __swiftcall EditPhotoCellView.ViewModel.selected(image:)(UIImage image)
{
  uint64_t v2 = UIImagePNGRepresentation((UIImage *)image.super.isa);
  if (v2)
  {
    os_log_type_t v3 = v2;
    uint64_t v4 = sub_255EEE050();
    unint64_t v6 = v5;

    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    uint64_t v15 = v1;
    sub_255D80890(v4, v6);
    sub_255E187BC();
    sub_255EEE2C0();
    sub_255D80D04(v4, v6);
    swift_release();
    sub_255D80D04(v4, v6);
  }
  else
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_255EEE3D0();
    __swift_project_value_buffer(v8, (uint64_t)qword_269F3FE80);
    uint64_t v14 = sub_255EEE3B0();
    os_log_type_t v9 = sub_255EF00C0();
    if (os_log_type_enabled(v14, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v15 = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      uint64_t v12 = sub_255EF05E0();
      sub_255DB0024(v12, v13, &v15);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      sub_255DB0024(0xD000000000000010, 0x8000000255EFA260, &v15);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v14, v9, "%s %s Error: could not extract png data from image", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v11, -1, -1);
      MEMORY[0x25A29C8A0](v10, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t EditPhotoCellView.ViewModel.deniedPermissionsAlert.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v3 = v1[12];
  uint64_t v4 = v1[13];
  uint64_t v5 = v1[14];
  uint64_t v6 = v1[15];
  uint64_t v7 = v1[16];
  uint64_t v8 = v1[17];
  uint64_t v9 = v1[18];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return sub_255E09390(v3, v4);
}

uint64_t EditPhotoCellView.ViewModel.deniedPermissionsAlert.setter(uint64_t a1)
{
  sub_255E13CC0(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_255E187BC();
  sub_255EEE2C0();
  sub_255E18B30(v2, (void (*)(void, void, void, void, void, void, void))sub_255E092A8);
  return swift_release();
}

uint64_t sub_255E16C6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 64);
  unint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  sub_255DAD700(a2, a3);
  return sub_255DAD684(v3, v4);
}

uint64_t sub_255E16CB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E187BC();
  sub_255EEE2D0();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 88);
  *(void *)a2 = *(void *)(v3 + 80);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_255E16D38()
{
  return swift_release();
}

uint64_t sub_255E16DDC(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 80) = a2;
  *(unsigned char *)(result + 88) = a3 & 1;
  return result;
}

uint64_t sub_255E16DEC(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 96;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  sub_255E13CC0((uint64_t)a2, v4);
  sub_255E18B30(a2, (void (*)(void, void, void, void, void, void, void))sub_255E09390);
  return sub_255E092A8(v5, v6);
}

void (*EditPhotoCellView.ViewModel.deniedPermissionsAlert.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_getKeyPath();
  v3[4] = OBJC_IVAR____TtCV11MedicalIDUI17EditPhotoCellView9ViewModel___observationRegistrar;
  *uint64_t v3 = v1;
  v3[5] = sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  swift_beginAccess();
  return sub_255E16FA0;
}

void sub_255E16FA0(void **a1)
{
  uint64_t v1 = *a1;
  swift_endAccess();
  void *v1 = v1[3];
  swift_getKeyPath();
  sub_255EEE2E0();
  swift_release();
  free(v1);
}

uint64_t sub_255E1701C()
{
  sub_255E18BC4(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v11 - v1;
  uint64_t v3 = sub_255EEFFA0();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_255E18AC0((uint64_t)v2, &qword_269F34FE0, MEMORY[0x263F8F520]);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    sub_255EEFF90();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    if (*(void *)(v5 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v6 = sub_255EEFF20();
      uint64_t v7 = v8;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = &unk_269F36910;
  *(void *)(v9 + 24) = v5;
  if (v7 | v6)
  {
    v11[0] = 0;
    v11[1] = 0;
    _OWORD v11[2] = v6;
    v11[3] = v7;
  }
  swift_task_create();
  return swift_release();
}

uint64_t static EditPhotoCellView.ViewModel._openSettings@Sendable ()()
{
  sub_255E18BC4(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v11 - v1;
  uint64_t v3 = sub_255EEFFA0();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_255E18AC0((uint64_t)v2, &qword_269F34FE0, MEMORY[0x263F8F520]);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    sub_255EEFF90();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    if (*(void *)(v5 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v6 = sub_255EEFF20();
      uint64_t v7 = v8;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = &unk_269F368E8;
  *(void *)(v9 + 24) = v5;
  if (v7 | v6)
  {
    v11[0] = 0;
    v11[1] = 0;
    _OWORD v11[2] = v6;
    v11[3] = v7;
  }
  swift_task_create();
  return swift_release();
}

id sub_255E174EC(uint64_t a1)
{
  uint64_t v2 = self;
  return objc_msgSend(v2, sel_authorizationStatusForMediaType_, a1);
}

id static EditPhotoCellView.ViewModel._authorizationStatus@Sendable (_:)(uint64_t a1)
{
  uint64_t v2 = self;
  return objc_msgSend(v2, sel_authorizationStatusForMediaType_, a1);
}

void sub_255E1757C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = self;
  v8[4] = a2;
  v8[5] = a3;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  void v8[2] = sub_255E15E48;
  _OWORD v8[3] = &block_descriptor_36;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_requestAccessForMediaType_completionHandler_, a1, v7);
  _Block_release(v7);
}

void static EditPhotoCellView.ViewModel._requestAccess@Sendable (_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = self;
  v8[4] = a2;
  v8[5] = a3;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  void v8[2] = sub_255E15E48;
  _OWORD v8[3] = &block_descriptor_3;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_requestAccessForMediaType_completionHandler_, a1, v7);
  _Block_release(v7);
}

uint64_t EditPhotoCellView.ViewModel.init(initialPictureData:openSettings:authorizationStatusFor:requestAccess:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(v8 + 64) = xmmword_255EF2620;
  *(void *)(v8 + 80) = 0;
  *(unsigned char *)(v8 + 88) = 1;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(void *)(v8 + 144) = 0;
  sub_255EEE300();
  sub_255DAD684(*(void *)(v8 + 64), *(void *)(v8 + 72));
  *(void *)(v8 + 64) = a1;
  *(void *)(v8 + 72) = a2;
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = a8;
  return v8;
}

uint64_t sub_255E177DC()
{
  uint64_t v1 = v0;
  sub_255E18BC4(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v31 - v3;
  uint64_t v5 = (int *)type metadata accessor for BasicAlertModel.Action();
  uint64_t v6 = *((void *)v5 - 1);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_255EEFD40();
  MEMORY[0x270FA5388](v9 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_269F352A8;
  uint64_t v11 = sub_255EEE200();
  MEMORY[0x270FA5388](v11 - 8);
  id v12 = v10;
  sub_255EEE1F0();
  uint64_t v13 = sub_255EEFDA0();
  uint64_t v15 = v14;
  uint64_t v16 = sub_255EEE4F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_255EEE130();
  uint64_t v18 = (uint64_t *)&v8[v5[5]];
  *uint64_t v18 = v13;
  v18[1] = v15;
  sub_255D8589C((uint64_t)v4, (uint64_t)&v8[v5[6]]);
  swift_release();
  uint64_t v19 = (uint64_t (**)())&v8[v5[7]];
  *uint64_t v19 = sub_255E18BBC;
  v19[1] = (uint64_t (*)())v17;
  if (qword_269F34AF8 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_269F368B8;
  uint64_t v21 = qword_269F368C0;
  uint64_t v22 = qword_269F34B00;
  swift_bridgeObjectRetain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_269F368C8;
  uint64_t v23 = qword_269F368D0;
  sub_255E18BC4(0, &qword_269F351D0, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8E0F8]);
  uint64_t v25 = *(void *)(v6 + 72);
  unint64_t v26 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_255EF1E20;
  uint64_t v28 = v27 + v26;
  sub_255D87960((uint64_t)v8, v28);
  swift_bridgeObjectRetain();
  sub_255EB71E0(v28 + v25);
  v32[0] = v20;
  v32[1] = v21;
  v32[2] = v24;
  v32[3] = v23;
  v32[5] = 0;
  v32[6] = 0;
  v32[4] = v27;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  v31[-2] = v1;
  v31[-1] = v32;
  v31[1] = v1;
  sub_255E187BC();
  sub_255EEE2C0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_255DF00A8((uint64_t)v8);
}

uint64_t sub_255E17CB4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    sub_255E187BC();
    sub_255EEE2C0();
    swift_release();
    return swift_release();
  }
  return result;
}

void (*EditPhotoCellView.ViewModel.imagePickerSheetOpen.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  swift_getKeyPath();
  *(void *)a1 = v1;
  sub_255E187BC();
  sub_255EEE2D0();
  swift_release();
  *(unsigned char *)(a1 + 16) = (*(unsigned char *)(v1 + 88) & 1) == 0;
  return sub_255E17E4C;
}

void sub_255E17E4C(uint64_t a1)
{
}

uint64_t EditPhotoCellView.ViewModel.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  sub_255DAD684(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_255E092A8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  uint64_t v1 = v0 + OBJC_IVAR____TtCV11MedicalIDUI17EditPhotoCellView9ViewModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t EditPhotoCellView.ViewModel.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  sub_255DAD684(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_255E092A8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  uint64_t v1 = v0 + OBJC_IVAR____TtCV11MedicalIDUI17EditPhotoCellView9ViewModel___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255E17FE0()
{
  return MEMORY[0x270FA2498](sub_255E17FFC, 0, 0);
}

uint64_t sub_255E17FFC()
{
  uint64_t v1 = sub_255EEE030();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = swift_task_alloc();
  sub_255E18BC4(0, &qword_269F36908, MEMORY[0x270FA8DE8], MEMORY[0x263F8D8F0]);
  uint64_t v4 = swift_task_alloc();
  sub_255EEE020();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1) == 1)
  {
    sub_255E18AC0(v4, &qword_269F36908, MEMORY[0x270FA8DE8]);
    swift_task_dealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v4, v1);
    swift_task_dealloc();
    id v5 = objc_msgSend(self, sel_defaultWorkspace);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (void *)sub_255EEE000();
      sub_255E88BE0(MEMORY[0x263F8EE78]);
      uint64_t v8 = (void *)sub_255EEFC50();
      swift_bridgeObjectRelease();
      objc_msgSend(v6, sel_openSensitiveURL_withOptions_, v7, v8);
    }
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  }
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_255E18260()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void (**)(uint64_t))(result + 16);
    uint64_t v2 = swift_retain();
    v1(v2);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_255E182D8(char a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a1)
    {
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x270FA5388](KeyPath);
      sub_255E187BC();
      sub_255EEE2C0();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_255E183E8(uint64_t a1)
{
  return sub_255E18438(a1, 0xD000000000000029, 0x8000000255EFA3C0, &qword_269F368B8, &qword_269F368C0);
}

uint64_t sub_255E18410(uint64_t a1)
{
  return sub_255E18438(a1, 0xD00000000000002FLL, 0x8000000255EFA390, &qword_269F368C8, &qword_269F368D0);
}

uint64_t sub_255E18438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v10 = v8;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  *a4 = result;
  *a5 = v12;
  return result;
}

uint64_t sub_255E1858C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_255E18668;
  return v6(a1);
}

uint64_t sub_255E18668()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_255E18760()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_255E18798(char a1)
{
  return sub_255E182D8(a1);
}

void sub_255E187A8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 32);
  *(void *)(v1 + 80) = *(void *)(v0 + 24);
  *(unsigned char *)(v1 + 88) = v2;
}

unint64_t sub_255E187BC()
{
  unint64_t result = qword_269F367B0;
  if (!qword_269F367B0)
  {
    type metadata accessor for EditPhotoCellView.ViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F367B0);
  }
  return result;
}

uint64_t type metadata accessor for EditPhotoCellView.ViewModel()
{
  uint64_t result = qword_269F368F8;
  if (!qword_269F368F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E18868()
{
  return sub_255E18B70();
}

uint64_t sub_255E18888()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255E188C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7EE18;
  return MEMORY[0x270FA2498](sub_255E17FFC, 0, 0);
}

uint64_t sub_255E18964()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_255E189CC()
{
  return type metadata accessor for EditPhotoCellView.ViewModel();
}

uint64_t sub_255E189D4()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for EditPhotoCellView.ViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EditPhotoCellView.ViewModel);
}

uint64_t dispatch thunk of EditPhotoCellView.ViewModel.__allocating_init(initialPictureData:openSettings:authorizationStatusFor:requestAccess:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_255E18AC0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_255E18BC4(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void *sub_255E18B30(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_255E18B70()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  unint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(v2 + 64);
  unint64_t v5 = *(void *)(v2 + 72);
  *(void *)(v2 + 64) = v1;
  *(void *)(v2 + 72) = v3;
  sub_255DAD700(v1, v3);
  return sub_255DAD684(v4, v5);
}

uint64_t sub_255E18BBC()
{
  return sub_255E18260();
}

void sub_255E18BC4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E18C28()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_255D7E778;
  return MEMORY[0x270FA2498](sub_255E17FFC, 0, 0);
}

uint64_t sub_255E18CCC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_255D7E778;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_269F368F0 + dword_269F368F0);
  return v6(a1, v4);
}

uint64_t sub_255E18D94()
{
  return sub_255E13D94();
}

void sub_255E18DAC()
{
}

uint64_t sub_255E18DC4(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x65696772656C6C41, 0xE900000000000073, &qword_269F3FD70, algn_269F3FD78);
}

uint64_t sub_255E18DEC(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x6F697469646E6F43, 0xEA0000000000736ELL, &qword_269F3FD80, algn_269F3FD88);
}

uint64_t sub_255E18E14(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x7365746F4ELL, 0xE500000000000000, &qword_269F3FD90, algn_269F3FD98);
}

uint64_t sub_255E18E34(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x697461636964654DLL, 0xEB00000000736E6FLL, &qword_269F3FDA0, algn_269F3FDA8);
}

uint64_t sub_255E18E60(uint64_t a1)
{
  return sub_255E18F8C(a1, 0xD000000000000016, 0x8000000255EFA3F0, &qword_269F3FDB0, algn_269F3FDB8);
}

uint64_t sub_255E18E88(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x746867696548, 0xE600000000000000, &qword_269F3FDC0, algn_269F3FDC8);
}

uint64_t sub_255E18EA8(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x3A746867696548, 0xE700000000000000, &qword_269F3FDD0, algn_269F3FDD8);
}

uint64_t sub_255E18ECC(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x746867696557, 0xE600000000000000, &qword_269F3FDE0, algn_269F3FDE8);
}

uint64_t sub_255E18EEC(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x3A746867696557, 0xE700000000000000, &qword_269F3FDF0, algn_269F3FDF8);
}

uint64_t sub_255E18F10(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x795420646F6F6C42, 0xEA00000000006570, &qword_269F3FE00, algn_269F3FE08);
}

uint64_t sub_255E18F38(uint64_t a1)
{
  return sub_255E18F8C(a1, 0x795420646F6F6C42, 0xEB000000003A6570, &qword_269F3FE10, algn_269F3FE18);
}

uint64_t sub_255E18F64(uint64_t a1)
{
  return sub_255E18F8C(a1, 0xD000000000000012, 0x8000000255EFA410, &qword_269F3FE20, algn_269F3FE28);
}

uint64_t sub_255E18F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v10 = v8;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  *a4 = result;
  *a5 = v12;
  return result;
}

uint64_t sub_255E190E0()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  qword_269F3FE30 = result;
  *(void *)algn_269F3FE38 = v5;
  return result;
}

uint64_t sub_255E19240()
{
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_255E192F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E1939C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E19480()
{
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  unint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  if (v2) {
    return 1;
  }
  swift_getKeyPath();
  sub_255EEE2D0();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_255E19570()
{
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_255E19610@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t sub_255E196B8()
{
  return swift_release();
}

uint64_t sub_255E19788()
{
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_255E19838@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 48);
  *a2 = *(void *)(v3 + 40);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E198E4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E199C8()
{
  return swift_release();
}

uint64_t sub_255E19AF8()
{
  swift_getKeyPath();
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  if (*(void *)(v0 + 48))
  {
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    swift_bridgeObjectRetain();
    sub_255EEE2C0();
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = swift_getKeyPath();
  MEMORY[0x270FA5388](v2);
  sub_255EEE2C0();
  return swift_release();
}

uint64_t sub_255E19CC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUIP33_D4BBDB7E727832FA87D2B563116D5DE45Model___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255E19D70()
{
  return type metadata accessor for Model();
}

uint64_t type metadata accessor for Model()
{
  uint64_t result = qword_269F36930;
  if (!qword_269F36930) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E19DC4()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_255E19E84()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 32) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_255E19E9C()
{
  return sub_255E1EE6C();
}

uint64_t sub_255E19EB4()
{
  return sub_255E1D690();
}

uint64_t sub_255E19ECC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v74 = a1;
  sub_255E1DB00();
  uint64_t v4 = v3;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (void *)((char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v66 - v8;
  sub_255E1E900();
  uint64_t v11 = v10;
  uint64_t v68 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1E9C8();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v70 = v14;
  uint64_t v71 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1EAC8();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v72 = v17;
  uint64_t v73 = v18;
  MEMORY[0x270FA5388](v17);
  long long v69 = (char *)v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  long long v21 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v20 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v20 + 96) = v21;
  *(_OWORD *)(v20 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v20 + 128) = *(void *)(v2 + 112);
  long long v22 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v20 + 32) = v22;
  long long v23 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v20 + 64) = v23;
  uint64_t v24 = swift_allocObject();
  long long v25 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v24 + 96) = v25;
  *(_OWORD *)(v24 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v24 + 128) = *(void *)(v2 + 112);
  long long v26 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v24 + 32) = v26;
  long long v27 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v24 + 64) = v27;
  *uint64_t v7 = swift_getKeyPath();
  sub_255E1ED6C(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = (char *)v7 + v4[13];
  uint64_t v29 = *MEMORY[0x263F18CB8];
  uint64_t v30 = sub_255EEE860();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  uint64_t v31 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v7 + v4[14]);
  *uint64_t v31 = sub_255E1EC00;
  v31[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v20;
  uint64_t v32 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v7 + v4[15]);
  void *v32 = sub_255E1EC5C;
  v32[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v24;
  sub_255E1F4B8((uint64_t)v7, (uint64_t)v9, (uint64_t (*)(void))sub_255E1DB00);
  long long v33 = *(_OWORD *)(v2 + 72);
  long long v77 = *(_OWORD *)(v2 + 56);
  long long v78 = v33;
  sub_255E1ECBC(v2);
  sub_255E1ECBC(v2);
  sub_255E1E1B4(0, &qword_269F36948, MEMORY[0x263F8D310], MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390](&v79);
  long long v77 = v79;
  uint64_t v34 = swift_allocObject();
  long long v35 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v34 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v34 + 96) = v35;
  *(_OWORD *)(v34 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v34 + 128) = *(void *)(v2 + 112);
  long long v36 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v34 + 32) = v36;
  long long v37 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v34 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v34 + 64) = v37;
  sub_255E1ECBC(v2);
  uint64_t v38 = sub_255E1F5D4(&qword_269F36A78, (void (*)(uint64_t))sub_255E1DB00);
  sub_255EEF680();
  swift_release();
  swift_bridgeObjectRelease();
  sub_255E1EFF8((uint64_t)v9, (uint64_t (*)(void))sub_255E1DB00);
  long long v79 = *(_OWORD *)(v2 + 40);
  long long v77 = *(_OWORD *)(v2 + 40);
  sub_255E1ED6C(0, &qword_269F36A90, (uint64_t (*)(uint64_t))type metadata accessor for Model, MEMORY[0x263F1B5D0]);
  v66[1] = v39;
  sub_255EEF820();
  uint64_t v40 = v75;
  swift_getKeyPath();
  *(void *)&long long v77 = v40;
  v66[0] = sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2D0();
  swift_release();
  uint64_t v42 = *(void *)(v40 + 16);
  uint64_t v41 = *(void *)(v40 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v75 = v42;
  uint64_t v76 = v41;
  uint64_t v43 = swift_allocObject();
  long long v44 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v43 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v43 + 96) = v44;
  *(_OWORD *)(v43 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v43 + 128) = *(void *)(v2 + 112);
  long long v45 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v43 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v43 + 32) = v45;
  long long v46 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v43 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v43 + 64) = v46;
  sub_255E1ECBC(v2);
  *(void *)&long long v77 = v4;
  uint64_t v47 = MEMORY[0x263F8D310];
  *((void *)&v77 + 1) = MEMORY[0x263F8D310];
  *(void *)&long long v78 = v38;
  *((void *)&v78 + 1) = MEMORY[0x263F8D338];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  id v49 = v67;
  sub_255EEF680();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v11);
  long long v77 = *(_OWORD *)(v2 + 16);
  LOBYTE(v78) = *(unsigned char *)(v2 + 32);
  uint64_t v50 = MEMORY[0x263F8D4F8];
  sub_255E1E6BC(0, &qword_269F36950, MEMORY[0x263F8D4F8], MEMORY[0x263F8D508], MEMORY[0x263F183E8]);
  sub_255EEE550();
  uint64_t v51 = swift_allocObject();
  long long v52 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v51 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v51 + 96) = v52;
  *(_OWORD *)(v51 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v51 + 128) = *(void *)(v2 + 112);
  long long v53 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v51 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v51 + 32) = v53;
  long long v54 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v51 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v51 + 64) = v54;
  sub_255E1ECBC(v2);
  *(void *)&long long v77 = v11;
  *((void *)&v77 + 1) = v47;
  *(void *)&long long v78 = OpaqueTypeConformance2;
  *((void *)&v78 + 1) = MEMORY[0x263F8D338];
  uint64_t v55 = swift_getOpaqueTypeConformance2();
  uint64_t v56 = MEMORY[0x263F8D510];
  uint64_t v57 = v69;
  uint64_t v58 = v70;
  sub_255EEF680();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v58);
  long long v77 = v79;
  sub_255EEF820();
  uint64_t v59 = v75;
  swift_getKeyPath();
  *(void *)&long long v77 = v59;
  sub_255EEE2D0();
  swift_release();
  LOBYTE(v47) = *(unsigned char *)(v59 + 32);
  swift_release();
  LOBYTE(v75) = v47;
  uint64_t v60 = swift_allocObject();
  long long v61 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v60 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v60 + 96) = v61;
  *(_OWORD *)(v60 + 112) = *(_OWORD *)(v2 + 96);
  *(void *)(v60 + 128) = *(void *)(v2 + 112);
  long long v62 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v60 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v60 + 32) = v62;
  long long v63 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v60 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v60 + 64) = v63;
  sub_255E1ECBC(v2);
  *(void *)&long long v77 = v58;
  *((void *)&v77 + 1) = v50;
  *(void *)&long long v78 = v55;
  *((void *)&v78 + 1) = v56;
  swift_getOpaqueTypeConformance2();
  uint64_t v64 = v72;
  sub_255EEF680();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v57, v64);
}

uint64_t sub_255E1A7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  sub_255E1E4E0(0);
  uint64_t v41 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1E57C(0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v39[0] = (uint64_t)v39 - v10;
  sub_255E1F550(0, &qword_269F36AC8, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E4E0, MEMORY[0x263F19B20]);
  v39[1] = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v39 - v12;
  sub_255E1DCDC();
  v39[2] = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1F550(0, &qword_269F36978, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E4E0, MEMORY[0x263F19B28]);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v40 = (uint64_t)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  long long v21 = (char *)v39 - v20;
  sub_255DD8400();
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  long long v25 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  long long v27 = (char *)v39 - v26;
  sub_255E1AEE0((uint64_t)v39 - v26);
  long long v43 = *(_OWORD *)(a1 + 40);
  sub_255E1ED6C(0, &qword_269F36A90, (uint64_t (*)(uint64_t))type metadata accessor for Model, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  char v28 = sub_255E19480();
  swift_release();
  if (v28)
  {
    *(void *)uint64_t v16 = sub_255EEEC90();
    *((void *)v16 + 1) = 0;
    v16[16] = 1;
    sub_255E1F190(0, &qword_269F36AB8, sub_255E1DD70);
    sub_255E1C53C(a1, 2, (uint64_t)&v16[*(int *)(v29 + 44)]);
    sub_255E1F058((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))sub_255E1DCDC);
    swift_storeEnumTagMultiPayload();
    sub_255E1F5D4(&qword_269F36AA8, (void (*)(uint64_t))sub_255E1DCDC);
    sub_255E1F5D4(&qword_269F36AD0, sub_255E1E4E0);
    sub_255EEEE00();
    uint64_t v30 = (uint64_t (*)(void))sub_255E1DCDC;
    uint64_t v31 = (uint64_t)v16;
  }
  else
  {
    uint64_t v32 = v39[0];
    sub_255E1B0CC(v39[0]);
    sub_255E1F058(v32, (uint64_t)v9, (uint64_t (*)(void))sub_255E1E57C);
    *(void *)uint64_t v5 = 0;
    v5[8] = 1;
    sub_255E1E514();
    sub_255E1F058((uint64_t)v9, (uint64_t)&v5[*(int *)(v33 + 48)], (uint64_t (*)(void))sub_255E1E57C);
    sub_255E1EFF8((uint64_t)v9, (uint64_t (*)(void))sub_255E1E57C);
    sub_255E1F058((uint64_t)v5, (uint64_t)v13, (uint64_t (*)(void))sub_255E1E4E0);
    swift_storeEnumTagMultiPayload();
    sub_255E1F5D4(&qword_269F36AA8, (void (*)(uint64_t))sub_255E1DCDC);
    sub_255E1F5D4(&qword_269F36AD0, sub_255E1E4E0);
    sub_255EEEE00();
    sub_255E1EFF8((uint64_t)v5, (uint64_t (*)(void))sub_255E1E4E0);
    uint64_t v31 = v32;
    uint64_t v30 = (uint64_t (*)(void))sub_255E1E57C;
  }
  sub_255E1EFF8(v31, v30);
  sub_255E1F058((uint64_t)v27, (uint64_t)v25, (uint64_t (*)(void))sub_255DD8400);
  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B28];
  uint64_t v35 = v40;
  sub_255E1F0C0((uint64_t)v21, v40, &qword_269F36978, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E4E0, MEMORY[0x263F19B28]);
  uint64_t v36 = v42;
  sub_255E1F058((uint64_t)v25, v42, (uint64_t (*)(void))sub_255DD8400);
  sub_255E1DCB4(0);
  sub_255E1F0C0(v35, v36 + *(int *)(v37 + 48), &qword_269F36978, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E4E0, v34);
  sub_255E1F134((uint64_t)v21, &qword_269F36978, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E4E0, v34);
  sub_255E1EFF8((uint64_t)v27, (uint64_t (*)(void))sub_255DD8400);
  sub_255E1F134(v35, &qword_269F36978, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E4E0, v34);
  return sub_255E1EFF8((uint64_t)v25, (uint64_t (*)(void))sub_255DD8400);
}

void sub_255E1AEE0(uint64_t a1@<X8>)
{
  sub_255DD8400();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[1];
  uint64_t v18 = *v1;
  uint64_t v19 = v6;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8D310];
  uint64_t v8 = sub_255EEF3D0();
  uint64_t v10 = v9;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  char v12 = v11 & 1;
  char v20 = v11 & 1;
  uint64_t v21 = v13;
  sub_255E1E1B4(0, (unint64_t *)&qword_269F37DA0, v7, MEMORY[0x263F8E0F8]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_255EF1E20;
  uint64_t v15 = v1[14];
  *(void *)(v14 + 32) = v1[13];
  *(void *)(v14 + 40) = v15;
  *(void *)(v14 + 48) = 0x656C746954;
  *(void *)(v14 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v17 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v17)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v8, v10, v12);
    swift_bridgeObjectRelease();
    sub_255E1F4B8((uint64_t)v5, a1, (uint64_t (*)(void))sub_255DD8400);
  }
  else
  {
    __break(1u);
  }
}

void sub_255E1B0CC(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v2 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1B5E8];
  sub_255E1E6BC(0, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v26 - v6;
  sub_255E1E5C4();
  uint64_t v26 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1E57C(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  long long v16 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v15 + 96) = v16;
  *(_OWORD *)(v15 + 112) = *(_OWORD *)(v1 + 96);
  *(void *)(v15 + 128) = *(void *)(v1 + 112);
  long long v17 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v15 + 32) = v17;
  long long v18 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v15 + 64) = v18;
  sub_255E1ECBC(v1);
  sub_255EEF870();
  uint64_t v19 = sub_255E1E15C((unint64_t *)&qword_269F35EB0, (unint64_t *)&qword_269F35EA8, v2);
  unint64_t v20 = sub_255E1E70C();
  sub_255EEF420();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_255E1E1B4(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_255EF1E20;
  uint64_t v22 = *(void *)(v1 + 112);
  *(void *)(v21 + 32) = *(void *)(v1 + 104);
  *(void *)(v21 + 40) = v22;
  *(void *)(v21 + 48) = 0x6E6F74747542;
  *(void *)(v21 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v24 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v24)
  {
    sub_255EEFD90();

    uint64_t v28 = v4;
    uint64_t v29 = &type metadata for NoTapAnimationButtonStyle;
    uint64_t v30 = v19;
    unint64_t v31 = v20;
    swift_getOpaqueTypeConformance2();
    uint64_t v25 = v26;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v25);
    sub_255E1F4B8((uint64_t)v14, v27, (uint64_t (*)(void))sub_255E1E57C);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E1B4C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a2();
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 1;
  a3(0);
  return a4(a1);
}

uint64_t sub_255E1B52C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  sub_255E1E57C(0);
  v32[2] = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1F550(0, &qword_269F36AA0, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E57C, MEMORY[0x263F19B20]);
  v32[0] = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v32 - v7;
  sub_255E1DCDC();
  v32[1] = v9;
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1F550(0, &qword_269F36A50, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E57C, MEMORY[0x263F19B28]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  long long v17 = (char *)v32 - v16;
  sub_255DD8400();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v32 - v22;
  sub_255E1AEE0((uint64_t)v32 - v22);
  long long v34 = *(_OWORD *)(a1 + 40);
  sub_255E1ED6C(0, &qword_269F36A90, (uint64_t (*)(uint64_t))type metadata accessor for Model, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  char v24 = sub_255E19480();
  swift_release();
  if (v24)
  {
    *(void *)char v11 = sub_255EEEC90();
    *((void *)v11 + 1) = 0;
    v11[16] = 1;
    sub_255E1F190(0, &qword_269F36AB8, sub_255E1DD70);
    sub_255E1C53C(a1, 0, (uint64_t)&v11[*(int *)(v25 + 44)]);
    sub_255E1F058((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))sub_255E1DCDC);
    swift_storeEnumTagMultiPayload();
    sub_255E1F5D4(&qword_269F36AA8, (void (*)(uint64_t))sub_255E1DCDC);
    sub_255E1EEDC();
    sub_255EEEE00();
    uint64_t v26 = (uint64_t (*)(void))sub_255E1DCDC;
    uint64_t v27 = (uint64_t)v11;
  }
  else
  {
    sub_255E1B0CC((uint64_t)v5);
    sub_255E1F058((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(void))sub_255E1E57C);
    swift_storeEnumTagMultiPayload();
    sub_255E1F5D4(&qword_269F36AA8, (void (*)(uint64_t))sub_255E1DCDC);
    sub_255E1EEDC();
    sub_255EEEE00();
    uint64_t v26 = (uint64_t (*)(void))sub_255E1E57C;
    uint64_t v27 = (uint64_t)v5;
  }
  sub_255E1EFF8(v27, v26);
  sub_255E1F058((uint64_t)v23, (uint64_t)v21, (uint64_t (*)(void))sub_255DD8400);
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B28];
  sub_255E1F0C0((uint64_t)v17, (uint64_t)v15, &qword_269F36A50, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E57C, MEMORY[0x263F19B28]);
  uint64_t v29 = v33;
  sub_255E1F058((uint64_t)v21, v33, (uint64_t (*)(void))sub_255DD8400);
  sub_255E1E828(0);
  sub_255E1F0C0((uint64_t)v15, v29 + *(int *)(v30 + 48), &qword_269F36A50, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E57C, v28);
  sub_255E1F134((uint64_t)v17, &qword_269F36A50, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E57C, v28);
  sub_255E1EFF8((uint64_t)v23, (uint64_t (*)(void))sub_255DD8400);
  sub_255E1F134((uint64_t)v15, &qword_269F36A50, (uint64_t (*)(uint64_t))sub_255E1DCDC, (uint64_t (*)(uint64_t))sub_255E1E57C, v28);
  return sub_255E1EFF8((uint64_t)v21, (uint64_t (*)(void))sub_255DD8400);
}

uint64_t sub_255E1BAC0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E1BC00()
{
  return sub_255EEF980();
}

uint64_t sub_255E1BC88()
{
  return swift_release();
}

void sub_255E1BDAC(char *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_255DA7290();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1E38C();
  uint64_t v9 = v8;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = *(void *)(v2 + 96);
  if (v14)
  {
    long long v46 = v7;
    uint64_t v47 = (char *)&v46 - v12;
    uint64_t v48 = v13;
    uint64_t v49 = v5;
    uint64_t v50 = a1;
    uint64_t v51 = v11;
    uint64_t v53 = *(void *)(v2 + 88);
    uint64_t v54 = v14;
    sub_255DAD520();
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_255EEF3D0();
    uint64_t v17 = v16;
    char v19 = v18 & 1;
    uint64_t v53 = sub_255EEF6D0();
    uint64_t v20 = sub_255EEF370();
    uint64_t v52 = v21;
    char v23 = v22;
    uint64_t v25 = v24;
    sub_255D85120(v15, v17, v19);
    swift_release();
    swift_bridgeObjectRelease();
    char v26 = sub_255EEF1B0();
    if (qword_269F34B70 != -1) {
      swift_once();
    }
    sub_255EEE540();
    uint64_t v53 = v20;
    uint64_t v54 = v52;
    char v27 = v23 & 1;
    char v55 = v23 & 1;
    uint64_t v56 = v25;
    char v57 = v26;
    uint64_t v58 = v28;
    uint64_t v59 = v29;
    uint64_t v60 = v30;
    uint64_t v61 = v31;
    char v62 = 0;
    sub_255E1E1B4(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_255EF1E20;
    uint64_t v33 = *(void *)(v2 + 112);
    *(void *)(v32 + 32) = *(void *)(v2 + 104);
    *(void *)(v32 + 40) = v33;
    *(void *)(v32 + 48) = 1953066581;
    *(void *)(v32 + 56) = 0xE400000000000000;
    swift_bridgeObjectRetain();
    long long v34 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v35 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v35)
    {
      sub_255EEFD90();

      sub_255E1E6BC(0, &qword_269F35138, MEMORY[0x263F1A830], MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
      sub_255DAD5C0();
      uint64_t v36 = (uint64_t)v46;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v20, v52, v27);
      swift_bridgeObjectRelease();
      uint64_t v37 = swift_allocObject();
      long long v38 = *(_OWORD *)(v2 + 80);
      *(_OWORD *)(v37 + 80) = *(_OWORD *)(v2 + 64);
      *(_OWORD *)(v37 + 96) = v38;
      *(_OWORD *)(v37 + 112) = *(_OWORD *)(v2 + 96);
      *(void *)(v37 + 128) = *(void *)(v2 + 112);
      long long v39 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v37 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v37 + 32) = v39;
      long long v40 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v37 + 48) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v37 + 64) = v40;
      sub_255E1ECBC(v2);
      sub_255E1E454(&qword_269F369F8, (void (*)(uint64_t))sub_255DA7290, (void (*)(void))sub_255DAD5C0, (void (*)(void))sub_255D855C4);
      uint64_t v41 = v48;
      sub_255EEF4B0();
      swift_release();
      sub_255E1EFF8(v36, (uint64_t (*)(void))sub_255DA7290);
      uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
      long long v43 = v47;
      v42(v47, v41, v9);
      long long v44 = v50;
      v42(v50, (uint64_t)v43, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v44, 0, 1, v9);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    long long v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v45(a1, 1, 1, v9);
  }
}

uint64_t sub_255E1C2C0()
{
  return swift_release();
}

uint64_t sub_255E1C3E4@<X0>(uint64_t a1@<X8>)
{
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v2 = (id)qword_269F352A8;
  uint64_t v3 = sub_255EEF3C0();
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  sub_255EEF6D0();
  uint64_t v8 = sub_255EEF370();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v14 = v13;
  sub_255D85120(v3, v5, v7);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v12 & 1;
  *(void *)(a1 + 24) = v14;
  return result;
}

void sub_255E1C53C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v96 = a2;
  uint64_t v80 = a3;
  sub_255E1ED6C(0, &qword_269F369E8, (uint64_t (*)(uint64_t))sub_255E1E38C, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v81 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  long long v79 = (char *)&v73 - v7;
  uint64_t v8 = sub_255EEE670();
  uint64_t v93 = *(void *)(v8 - 8);
  uint64_t v94 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v92 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v87 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1BAB0];
  sub_255E1E6BC(0, (unint64_t *)&qword_269F369C0, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1BAB0]);
  uint64_t v89 = v10;
  uint64_t v91 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v82 = (char *)&v73 - v11;
  sub_255E1E078();
  uint64_t v90 = v12;
  uint64_t v88 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v85 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1DFE4();
  uint64_t v86 = v14 - 8;
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1DF58();
  uint64_t v83 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v84 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1DE90();
  uint64_t v77 = v19;
  uint64_t v76 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1F550(0, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v78 = (uint64_t)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v75 = (char *)&v73 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v95 = (uint64_t)&v73 - v27;
  uint64_t v29 = *(void *)a1;
  uint64_t v28 = *(void *)(a1 + 8);
  long long v30 = *(_OWORD *)(a1 + 72);
  long long v101 = *(_OWORD *)(a1 + 56);
  long long v102 = v30;
  long long v31 = *(_OWORD *)(a1 + 72);
  long long v97 = *(_OWORD *)(a1 + 56);
  long long v98 = v31;
  sub_255E1E1B4(0, &qword_269F36948, MEMORY[0x263F8D310], MEMORY[0x263F1B750]);
  uint64_t v33 = v32;
  swift_bridgeObjectRetain();
  uint64_t v74 = v33;
  sub_255EEF9A0();
  *(void *)&long long v99 = v29;
  *((void *)&v99 + 1) = v28;
  sub_255DAD520();
  long long v34 = v82;
  id v35 = v21;
  sub_255EEFB60();
  long long v97 = *(_OWORD *)(a1 + 16);
  LOBYTE(v98) = *(unsigned char *)(a1 + 32);
  sub_255E1E6BC(0, &qword_269F36950, MEMORY[0x263F8D4F8], MEMORY[0x263F8D508], MEMORY[0x263F183E8]);
  sub_255EEE570();
  sub_255E1E15C(&qword_269F369C8, (unint64_t *)&qword_269F369C0, v87);
  uint64_t v36 = v85;
  uint64_t v37 = v89;
  sub_255EEF630();
  swift_release();
  uint64_t v38 = v83;
  swift_release();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v34, v37);
  uint64_t v39 = sub_255EEF6D0();
  uint64_t v40 = v88;
  uint64_t v41 = v90;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v16, v36, v90);
  *(void *)&v16[*(int *)(v86 + 44)] = v39;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v41);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v43 = v84;
  sub_255E1F058((uint64_t)v16, v84, (uint64_t (*)(void))sub_255E1DFE4);
  uint64_t v44 = v43 + *(int *)(v38 + 36);
  *(void *)uint64_t v44 = KeyPath;
  *(unsigned char *)(v44 + 8) = v96;
  sub_255E1EFF8((uint64_t)v16, (uint64_t (*)(void))sub_255E1DFE4);
  long long v45 = v92;
  sub_255EEE660();
  uint64_t v46 = sub_255E1E454(&qword_269F369D0, (void (*)(uint64_t))sub_255E1DF58, (void (*)(void))sub_255E1E200, (void (*)(void))sub_255DE7BB0);
  sub_255EEF470();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v45, v94);
  sub_255E1EFF8(v43, (uint64_t (*)(void))sub_255E1DF58);
  sub_255E1E1B4(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_255EF1E20;
  uint64_t v48 = *(void *)(a1 + 112);
  uint64_t v93 = *(void *)(a1 + 104);
  uint64_t v94 = v48;
  *(void *)(v47 + 32) = v93;
  *(void *)(v47 + 40) = v48;
  *(void *)(v47 + 48) = 0x65756C6156;
  *(void *)(v47 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v49 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v50 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v50)
  {
    sub_255EEFD90();

    *(void *)&long long v99 = v38;
    *((void *)&v99 + 1) = v46;
    swift_getOpaqueTypeConformance2();
    uint64_t v51 = (uint64_t)v75;
    uint64_t v52 = v77;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v52);
    uint64_t v53 = v95;
    sub_255E1F204(v51, v95);
    uint64_t v54 = v79;
    sub_255E1BDAC(v79);
    long long v99 = v101;
    long long v100 = v102;
    MEMORY[0x25A29B390](&v97, v74);
    long long v55 = v97;
    swift_bridgeObjectRelease();
    uint64_t v56 = HIBYTE(*((void *)&v55 + 1)) & 0xFLL;
    if ((*((void *)&v55 + 1) & 0x2000000000000000) == 0) {
      uint64_t v56 = v55 & 0xFFFFFFFFFFFFLL;
    }
    LODWORD(v92) = v56 == 0;
    long long v99 = *(_OWORD *)(a1 + 40);
    sub_255E1ED6C(0, &qword_269F36A90, (uint64_t (*)(uint64_t))type metadata accessor for Model, MEMORY[0x263F1B5D0]);
    sub_255EEF820();
    uint64_t v57 = v97;
    swift_getKeyPath();
    *(void *)&long long v99 = v57;
    sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
    sub_255EEE2D0();
    swift_release();
    LODWORD(v91) = *(unsigned __int8 *)(v57 + 32);
    swift_release();
    uint64_t v58 = swift_allocObject();
    long long v59 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v58 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v58 + 96) = v59;
    *(_OWORD *)(v58 + 112) = *(_OWORD *)(a1 + 96);
    *(void *)(v58 + 128) = *(void *)(a1 + 112);
    long long v60 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v58 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v58 + 32) = v60;
    long long v61 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v58 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v58 + 64) = v61;
    char v62 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A470];
    long long v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F18E28];
    uint64_t v64 = v78;
    sub_255E1F0C0(v53, v78, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    uint64_t v65 = (uint64_t)v54;
    uint64_t v66 = (uint64_t)v54;
    uint64_t v67 = v81;
    sub_255E1F2E0(v65, v81);
    uint64_t v68 = v80;
    sub_255E1F0C0(v64, v80, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, v62, v63);
    sub_255E1DDA4();
    uint64_t v70 = v69;
    sub_255E1F2E0(v67, v68 + *(int *)(v69 + 48));
    uint64_t v71 = v68 + *(int *)(v70 + 64);
    *(unsigned char *)uint64_t v71 = (_BYTE)v92;
    *(unsigned char *)(v71 + 1) = v91;
    *(unsigned char *)(v71 + 2) = v96;
    uint64_t v72 = v94;
    *(void *)(v71 + 8) = v93;
    *(void *)(v71 + 16) = v72;
    *(void *)(v71 + 24) = sub_255E1F2B0;
    *(void *)(v71 + 32) = v58;
    swift_bridgeObjectRetain_n();
    swift_retain();
    sub_255E1ECBC(a1);
    sub_255E1F374(v66);
    sub_255E1F134(v95, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, v62, v63);
    swift_release();
    swift_bridgeObjectRelease();
    sub_255E1F374(v67);
    sub_255E1F134(v64, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, v62, v63);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E1D12C(uint64_t a1, void (*a2)(uint64_t))
{
  sub_255E1ED6C(0, &qword_269F36A90, (uint64_t (*)(uint64_t))type metadata accessor for Model, MEMORY[0x263F1B5D0]);
  uint64_t v3 = sub_255EEF820();
  a2(v3);
  return swift_release();
}

uint64_t sub_255E1D1B4@<X0>(uint64_t a1@<X8>)
{
  return sub_255E19ECC(a1);
}

void sub_255E1D208()
{
  qword_269F36920 = 0x4010000000000000;
}

uint64_t sub_255E1D218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  char v16 = sub_255EEE580();
  uint64_t v18 = v17;
  char v20 = v19;
  sub_255E1E1B4(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_255EF1E20;
  uint64_t v36 = a3;
  *(void *)(v21 + 32) = a3;
  *(void *)(v21 + 40) = a4;
  *(void *)(v21 + 48) = a1;
  *(void *)(v21 + 56) = a2;
  uint64_t v34 = v18;
  swift_retain();
  swift_bridgeObjectRetain_n();
  uint64_t v22 = a4;
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v24 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v24)
  {
    uint64_t v36 = sub_255EEFD90();
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();

    uint64_t v22 = v26;
  }
  char v37 = v16 & 1;
  sub_255E1E1B4(0, &qword_269F36948, MEMORY[0x263F8D310], MEMORY[0x263F1B750]);
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  MEMORY[0x25A29B390](v41, v28);
  uint64_t v29 = v41[0];
  uint64_t v30 = v41[1];
  type metadata accessor for Model();
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 32) = 0;
  *(void *)(v31 + 40) = 0;
  *(void *)(v31 + 48) = 0;
  sub_255EEE300();
  *(void *)(v31 + 16) = v29;
  *(void *)(v31 + 24) = v30;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  sub_255E1F5D4(&qword_269F36940, (void (*)(uint64_t))type metadata accessor for Model);
  sub_255EEE2C0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_255EEE2D0();
  swift_release();
  LOBYTE(v41[0]) = *(unsigned char *)(v31 + 32);
  sub_255E1E6BC(0, &qword_269F36950, MEMORY[0x263F8D4F8], MEMORY[0x263F8D508], MEMORY[0x263F183E8]);
  swift_retain();
  sub_255EEE560();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = v37;
  *(void *)(a9 + 24) = v34;
  *(unsigned char *)(a9 + 32) = v20 & 1;
  *(void *)(a9 + 40) = v31;
  *(void *)(a9 + 48) = 0;
  *(void *)(a9 + 56) = a5;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = a7;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a10;
  *(void *)(a9 + 96) = a11;
  *(void *)(a9 + 104) = v36;
  *(void *)(a9 + 112) = v22;
  return result;
}

uint64_t sub_255E1D690()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 40) = v0[3];
  *(void *)(v1 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for ClearableAddableTextField()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClearableAddableTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClearableAddableTextField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ClearableAddableTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClearableAddableTextField(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClearableAddableTextField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClearableAddableTextField()
{
  return &type metadata for ClearableAddableTextField;
}

uint64_t sub_255E1DAE4()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E1DB00()
{
  if (!qword_269F36958)
  {
    sub_255E1DBEC();
    sub_255E1E760();
    sub_255E1F5D4(&qword_269F36A60, (void (*)(uint64_t))sub_255E1DBEC);
    sub_255E1F5D4(&qword_269F36A68, (void (*)(uint64_t))sub_255E1E760);
    unint64_t v0 = type metadata accessor for MedicalIDAXLayoutView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36958);
    }
  }
}

void sub_255E1DBEC()
{
  if (!qword_269F36960)
  {
    sub_255E1DC80(255);
    sub_255E1F5D4(&qword_269F36A30, sub_255E1DC80);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36960);
    }
  }
}

void sub_255E1DC80(uint64_t a1)
{
}

void sub_255E1DCB4(uint64_t a1)
{
}

void sub_255E1DCDC()
{
  if (!qword_269F36980)
  {
    sub_255E1DD70(255);
    sub_255E1F5D4(&qword_269F36A00, sub_255E1DD70);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36980);
    }
  }
}

void sub_255E1DD70(uint64_t a1)
{
}

void sub_255E1DDA4()
{
  if (!qword_269F36990)
  {
    sub_255E1F550(255, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_255E1ED6C(255, &qword_269F369E8, (uint64_t (*)(uint64_t))sub_255E1E38C, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36990);
    }
  }
}

void sub_255E1DE90()
{
  if (!qword_269F369A0)
  {
    sub_255E1DF58();
    sub_255E1E454(&qword_269F369D0, (void (*)(uint64_t))sub_255E1DF58, (void (*)(void))sub_255E1E200, (void (*)(void))sub_255DE7BB0);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F369A0);
    }
  }
}

void sub_255E1DF58()
{
  if (!qword_269F369A8)
  {
    sub_255E1DFE4();
    sub_255E1E1B4(255, &qword_269F36048, MEMORY[0x263F18968], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F369A8);
    }
  }
}

void sub_255E1DFE4()
{
  if (!qword_269F369B0)
  {
    sub_255E1E078();
    sub_255E1E6BC(255, (unint64_t *)&qword_269F35128, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F369B0);
    }
  }
}

void sub_255E1E078()
{
  if (!qword_269F369B8)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1BAB0];
    sub_255E1E6BC(255, (unint64_t *)&qword_269F369C0, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1BAB0]);
    sub_255E1E15C(&qword_269F369C8, (unint64_t *)&qword_269F369C0, v0);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F369B8);
    }
  }
}

uint64_t sub_255E1E15C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E1E6BC(255, a2, MEMORY[0x263F1A830], MEMORY[0x263F1A820], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E1E1B4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255E1E200()
{
  unint64_t result = qword_269F369D8;
  if (!qword_269F369D8)
  {
    sub_255E1DFE4();
    uint64_t v1 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1BAB0];
    sub_255E1E6BC(255, (unint64_t *)&qword_269F369C0, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1BAB0]);
    sub_255E1E15C(&qword_269F369C8, (unint64_t *)&qword_269F369C0, v1);
    swift_getOpaqueTypeConformance2();
    sub_255E1E308();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F369D8);
  }
  return result;
}

unint64_t sub_255E1E308()
{
  unint64_t result = qword_269F369E0;
  if (!qword_269F369E0)
  {
    sub_255E1E6BC(255, (unint64_t *)&qword_269F35128, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A180]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F369E0);
  }
  return result;
}

void sub_255E1E38C()
{
  if (!qword_269F369F0)
  {
    sub_255DA7290();
    sub_255E1E454(&qword_269F369F8, (void (*)(uint64_t))sub_255DA7290, (void (*)(void))sub_255DAD5C0, (void (*)(void))sub_255D855C4);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F369F0);
    }
  }
}

uint64_t sub_255E1E454(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E1E4E0(uint64_t a1)
{
}

void sub_255E1E514()
{
  if (!qword_269F36A10)
  {
    sub_255E1E57C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F36A10);
    }
  }
}

void sub_255E1E57C(uint64_t a1)
{
}

void sub_255E1E5C4()
{
  if (!qword_269F36A20)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1B5E8];
    sub_255E1E6BC(255, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
    sub_255E1E15C((unint64_t *)&qword_269F35EB0, (unint64_t *)&qword_269F35EA8, v0);
    sub_255E1E70C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36A20);
    }
  }
}

void sub_255E1E6BC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_255E1E70C()
{
  unint64_t result = qword_269F36A28;
  if (!qword_269F36A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36A28);
  }
  return result;
}

void sub_255E1E760()
{
  if (!qword_269F36A38)
  {
    sub_255E1E7F4(255);
    sub_255E1F5D4(&qword_269F36A58, sub_255E1E7F4);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36A38);
    }
  }
}

void sub_255E1E7F4(uint64_t a1)
{
}

void sub_255E1E828(uint64_t a1)
{
}

void sub_255E1E850(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_255DD8400();
    sub_255E1F550(255, a3, (uint64_t (*)(uint64_t))sub_255E1DCDC, a4, MEMORY[0x263F19B28]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v8) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_255E1E900()
{
  if (!qword_269F36A70)
  {
    sub_255E1DB00();
    sub_255E1F5D4(&qword_269F36A78, (void (*)(uint64_t))sub_255E1DB00);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36A70);
    }
  }
}

void sub_255E1E9C8()
{
  if (!qword_269F36A80)
  {
    sub_255E1E900();
    sub_255E1DB00();
    sub_255E1F5D4(&qword_269F36A78, (void (*)(uint64_t))sub_255E1DB00);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36A80);
    }
  }
}

void sub_255E1EAC8()
{
  if (!qword_269F36A88)
  {
    sub_255E1E9C8();
    sub_255E1E900();
    sub_255E1DB00();
    sub_255E1F5D4(&qword_269F36A78, (void (*)(uint64_t))sub_255E1DB00);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36A88);
    }
  }
}

uint64_t sub_255E1EC00@<X0>(uint64_t a1@<X8>)
{
  return sub_255E1B4C4(v1 + 16, MEMORY[0x263F19720], sub_255E1F520, (uint64_t (*)(uint64_t))sub_255E1A7F8, a1);
}

uint64_t sub_255E1EC5C@<X0>(uint64_t a1@<X8>)
{
  return sub_255E1B4C4(v1 + 16, MEMORY[0x263F19A50], sub_255E1EEAC, (uint64_t (*)(uint64_t))sub_255E1B52C, a1);
}

uint64_t sub_255E1ECBC(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E1ED64()
{
  return sub_255E1BAC0();
}

void sub_255E1ED6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E1EDD4()
{
  return sub_255E1BC00();
}

uint64_t sub_255E1EDE0()
{
  return sub_255E1BC88();
}

uint64_t sub_255E1EDEC()
{
  return sub_255EEE560();
}

uint64_t sub_255E1EE6C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 16) = v0[3];
  *(void *)(v1 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_255E1EEAC(uint64_t a1)
{
}

unint64_t sub_255E1EEDC()
{
  unint64_t result = qword_269F36AB0;
  if (!qword_269F36AB0)
  {
    sub_255E1E57C(255);
    uint64_t v1 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1B5E8];
    sub_255E1E6BC(255, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
    sub_255E1E15C((unint64_t *)&qword_269F35EB0, (unint64_t *)&qword_269F35EA8, v1);
    sub_255E1E70C();
    swift_getOpaqueTypeConformance2();
    sub_255D855C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36AB0);
  }
  return result;
}

uint64_t sub_255E1EFF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E1F058(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E1F0C0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  sub_255E1F550(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_255E1F134(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  sub_255E1F550(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_255E1F190(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE7B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E1F204(uint64_t a1, uint64_t a2)
{
  sub_255E1F550(0, &qword_269F36998, (uint64_t (*)(uint64_t))sub_255E1DE90, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E1F2B0()
{
  return sub_255E1D12C(v0 + 16, (void (*)(uint64_t))sub_255E199C8);
}

uint64_t sub_255E1F2E0(uint64_t a1, uint64_t a2)
{
  sub_255E1ED6C(0, &qword_269F369E8, (uint64_t (*)(uint64_t))sub_255E1E38C, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E1F374(uint64_t a1)
{
  sub_255E1ED6C(0, &qword_269F369E8, (uint64_t (*)(uint64_t))sub_255E1E38C, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255E1F404()
{
  return sub_255E1C2C0();
}

uint64_t objectdestroyTm_11()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255E1F488()
{
  return sub_255E1D12C(v0 + 16, (void (*)(uint64_t))sub_255E19AF8);
}

uint64_t sub_255E1F4B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_255E1F520(uint64_t a1)
{
}

void sub_255E1F550(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_255E1F5D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E1F61C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E1F748()
{
}

ValueMetadata *type metadata accessor for NoTapAnimationButtonStyle()
{
  return &type metadata for NoTapAnimationButtonStyle;
}

uint64_t sub_255E1F770()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E1F78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v3 = sub_255EEF100();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = sub_255EEF0D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E1FA00();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEF0E0();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  v13[*(int *)(v11 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_255E1FBB0();
  sub_255EEF4B0();
  swift_release();
  return sub_255E1FCD0((uint64_t)v13);
}

void sub_255E1FA00()
{
  if (!qword_269F36AD8)
  {
    sub_255EEF0D0();
    sub_255E1FA68();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36AD8);
    }
  }
}

void sub_255E1FA68()
{
  if (!qword_269F36AE0)
  {
    sub_255DA6CF8();
    unint64_t v0 = sub_255EEEEF0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36AE0);
    }
  }
}

uint64_t sub_255E1FAC4()
{
  uint64_t v1 = sub_255EEF100();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_255E1FB54()
{
  return sub_255EEF0F0();
}

unint64_t sub_255E1FBB0()
{
  unint64_t result = qword_269F36AE8;
  if (!qword_269F36AE8)
  {
    sub_255E1FA00();
    sub_255E1FC88(&qword_269F36AF0, MEMORY[0x263F1A4F8]);
    sub_255E1FC88(qword_269F36AF8, (void (*)(uint64_t))sub_255E1FA68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36AE8);
  }
  return result;
}

uint64_t sub_255E1FC88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E1FCD0(uint64_t a1)
{
  sub_255E1FA00();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255E1FD2C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E1FD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

void sub_255E1FD8C()
{
  sub_255E23264(319, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_255E1FEB0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE730();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 + 72;
  uint64_t v12 = *(void *)(v9 + 64) + 7;
  unsigned int v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12
       + ((v10 + 72 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    unsigned int v17 = a2[v8];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v19 = v8;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v8 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_25;
          }
          goto LABEL_23;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_23:
          }
            unsigned int v17 = (v20 | (v18 << (8 * v8))) + 2;
          else {
LABEL_25:
          }
            unsigned int v17 = v20 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v38 = *(void *)(a3 + 16);
    uint64_t v21 = v8 + 1;
    if (v17 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      char v22 = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      swift_retain();
      char v22 = 0;
    }
    uint64_t v37 = ~v10;
    *((unsigned char *)a1 + v8) = v22;
    uint64_t v23 = (void *)(((unint64_t)a1 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
    id v24 = (void *)((unint64_t)&a2[v21 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    v23[1] = v24[1];
    uint64_t v25 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    v28[1] = v29[1];
    uint64_t v30 = v29[3];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v30)
    {
      id v28[2] = v29[2];
      uint64_t v28[3] = v29[3];
      v28[4] = v29[4];
      v28[5] = v29[5];
      v28[6] = v29[6];
      v28[7] = v29[7];
      v28[8] = v29[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v31 = *((_OWORD *)v29 + 1);
      long long v32 = *((_OWORD *)v29 + 2);
      long long v33 = *((_OWORD *)v29 + 3);
      v28[8] = v29[8];
      *((_OWORD *)v28 + 2) = v32;
      *((_OWORD *)v28 + 3) = v33;
      *((_OWORD *)v28 + 1) = v31;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v28 + v11) & v37, ((unint64_t)v29 + v11) & v37, v38);
    unint64_t v34 = (v12 + (((unint64_t)v28 + v11) & v37)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = (v12 + (((unint64_t)v29 + v11) & v37)) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v34 = *(unsigned char *)v35;
    *(void *)(v34 + 8) = *(void *)(v35 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_255E2025C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEE730();
  if (*(void *)(*(void *)(v4 - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v11 = (((((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  if (*(void *)(v11 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((v11
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  return swift_release();
}

void *sub_255E2045C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE730();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    *a1 = *(void *)a2;
    swift_retain();
    char v12 = 0;
  }
  *((unsigned char *)a1 + v7) = v12;
  unsigned int v13 = (void *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  unsigned int v18 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v18 = *v19;
  v18[1] = v19[1];
  uint64_t v20 = v19[3];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v20)
  {
    v18[2] = v19[2];
    v18[3] = v19[3];
    v18[4] = v19[4];
    v18[5] = v19[5];
    v18[6] = v19[6];
    v18[7] = v19[7];
    _OWORD v18[8] = v19[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *((_OWORD *)v19 + 1);
    long long v22 = *((_OWORD *)v19 + 2);
    long long v23 = *((_OWORD *)v19 + 3);
    _OWORD v18[8] = v19[8];
    *((_OWORD *)v18 + 2) = v22;
    *((_OWORD *)v18 + 3) = v23;
    *((_OWORD *)v18 + 1) = v21;
  }
  uint64_t v24 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v25 = v24 + 16;
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = ((unint64_t)v18 + v26 + 72) & ~v26;
  uint64_t v28 = ((unint64_t)v19 + v26 + 72) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v27, v28);
  uint64_t v29 = *(void *)(v25 + 48) + 7;
  unint64_t v30 = (v29 + v27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v29 + v28) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v30 = *(unsigned char *)v31;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  swift_retain();
  return a1;
}

unsigned __int8 *sub_255E20754(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = sub_255EEE730();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_36:
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  unint64_t v17 = *(void *)(*(void *)(sub_255EEE730() - 8) + 64);
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  unint64_t v18 = v17 + 8;
  uint64_t v19 = (void *)((unint64_t)&a1[v18] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((unint64_t)&a2[v18] & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *long long v21 = *v22;
  v21[1] = v23;
  swift_retain();
  swift_release();
  uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  swift_retain();
  swift_release();
  v24[1] = v25[1];
  swift_retain();
  swift_release();
  uint64_t v26 = v24 + 2;
  uint64_t v27 = (long long *)(v25 + 2);
  uint64_t v28 = v25[3];
  if (v24[3])
  {
    if (v28)
    {
      void v24[2] = v25[2];
      v24[3] = v25[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      _DWORD v24[4] = v25[4];
      v24[5] = v25[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24[6] = v25[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24[7] = v25[7];
      v24[8] = v25[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)(v24 + 2));
      long long v30 = *((_OWORD *)v25 + 2);
      long long v29 = *((_OWORD *)v25 + 3);
      long long v31 = *v27;
      v24[8] = v25[8];
      *((_OWORD *)v24 + 2) = v30;
      *((_OWORD *)v24 + 3) = v29;
      *uint64_t v26 = v31;
    }
  }
  else if (v28)
  {
    void v24[2] = v25[2];
    v24[3] = v25[3];
    _DWORD v24[4] = v25[4];
    v24[5] = v25[5];
    v24[6] = v25[6];
    v24[7] = v25[7];
    v24[8] = v25[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v32 = *v27;
    long long v33 = *((_OWORD *)v25 + 2);
    long long v34 = *((_OWORD *)v25 + 3);
    v24[8] = v25[8];
    *((_OWORD *)v24 + 2) = v33;
    *((_OWORD *)v24 + 3) = v34;
    *uint64_t v26 = v32;
  }
  uint64_t v35 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v36 = v35 + 24;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = ((unint64_t)v24 + v37 + 72) & ~v37;
  uint64_t v39 = ((unint64_t)v25 + v37 + 72) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 24))(v38, v39);
  uint64_t v40 = *(void *)(v36 + 40) + 7;
  unint64_t v41 = (v40 + v38) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (v40 + v39) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v41 = *(unsigned char *)v42;
  *(void *)(v41 + 8) = *(void *)(v42 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *sub_255E20C30(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE730();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v7) = v13;
  unsigned int v14 = (_OWORD *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v14 = *v15;
  int v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v16 = *v17;
  unint64_t v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  long long v20 = *(_OWORD *)(v19 + 16);
  long long v21 = *(_OWORD *)(v19 + 32);
  long long v22 = *(_OWORD *)(v19 + 48);
  *(void *)(v18 + 64) = *(void *)(v19 + 64);
  *(_OWORD *)(v18 + 32) = v21;
  *(_OWORD *)(v18 + 48) = v22;
  *(_OWORD *)(v18 + 16) = v20;
  uint64_t v23 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v24 = v23 + 32;
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = (v25 + 72 + v18) & ~v25;
  uint64_t v27 = (v25 + 72 + v19) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v26, v27);
  *(_OWORD *)((*(void *)(v24 + 32) + 7 + v26) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v24 + 32)
                                                                                       + 7
                                                                                       + v27) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}