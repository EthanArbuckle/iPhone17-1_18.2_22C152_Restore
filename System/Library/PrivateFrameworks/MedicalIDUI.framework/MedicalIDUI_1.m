unsigned __int8 *sub_255E20E44(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  _OWORD *v22;
  _OWORD *v23;
  void *v24;
  void *v25;
  _OWORD *v26;
  long long *v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a1 != a2)
  {
    v6 = sub_255EEE730();
    v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      v8 = 8;
    }
    else {
      v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    v9 = a1[v8];
    v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        v11 = v8;
      }
      else {
        v11 = 4;
      }
      switch(v11)
      {
        case 1:
          v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    v13 = a2[v8];
    v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        v15 = v8;
      }
      else {
        v15 = 4;
      }
      switch(v15)
      {
        case 1:
          v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      v17 = 1;
    }
    else
    {
LABEL_36:
      v17 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v17;
  }
  v18 = *(void *)(*(void *)(sub_255EEE730() - 8) + 64);
  if (v18 <= 8) {
    v18 = 8;
  }
  v19 = v18 + 8;
  v20 = (void *)((unint64_t)&a1[v19] & 0xFFFFFFFFFFFFFFF8);
  v21 = (void *)((unint64_t)&a2[v19] & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRelease();
  v22 = (_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  swift_release();
  v24 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_release();
  v24[1] = v25[1];
  swift_release();
  v26 = v24 + 2;
  v27 = (long long *)(v25 + 2);
  if (v24[3])
  {
    if (v25[3])
    {
      v24[2] = v25[2];
      v24[3] = v25[3];
      swift_bridgeObjectRelease();
      v24[4] = v25[4];
      v24[5] = v25[5];
      swift_bridgeObjectRelease();
      v24[6] = v25[6];
      swift_bridgeObjectRelease();
      v24[7] = v25[7];
      v24[8] = v25[8];
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)(v24 + 2));
      v32 = *((_OWORD *)v25 + 2);
      v31 = *((_OWORD *)v25 + 3);
      v33 = *v27;
      v24[8] = v25[8];
      *((_OWORD *)v24 + 2) = v32;
      *((_OWORD *)v24 + 3) = v31;
      *v26 = v33;
    }
  }
  else
  {
    v28 = *v27;
    v29 = *((_OWORD *)v25 + 2);
    v30 = *((_OWORD *)v25 + 3);
    v24[8] = v25[8];
    *((_OWORD *)v24 + 2) = v29;
    *((_OWORD *)v24 + 3) = v30;
    *v26 = v28;
  }
  v34 = *(void *)(*(void *)(a3 + 16) - 8);
  v35 = v34 + 40;
  v36 = *(unsigned __int8 *)(v34 + 80);
  v37 = ((unint64_t)v24 + v36 + 72) & ~v36;
  v38 = ((unint64_t)v25 + v36 + 72) & ~v36;
  (*(void (**)(uint64_t, uint64_t))(v34 + 40))(v37, v38);
  v39 = *(void *)(v35 + 24) + 7;
  v40 = (v39 + v37) & 0xFFFFFFFFFFFFFFF8;
  v41 = (v39 + v38) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)v40 = *(unsigned char *)v41;
  *(void *)(v40 + 8) = *(void *)(v41 + 8);
  swift_release();
  return a1;
}

uint64_t sub_255E2126C(int *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(*(void *)(sub_255EEE730() - 8) + 64);
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v11 < a2)
  {
    unint64_t v12 = ((*(void *)(v8 + 64)
          + ((v10 + (((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 72) & ~v10)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v13 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a2 - v11 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x255E2146CLL);
      case 4:
        int v17 = *(int *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_25:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          int v20 = *a1;
        }
        else
        {
          int v20 = 0;
        }
        return v11 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  unint64_t v21 = ((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 0x80000000) != 0)
  {
    v23 = *(uint64_t (**)(unint64_t))(v8 + 48);
    return v23((((((v21 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v10 + 72) & ~v10);
  }
  else
  {
    unint64_t v22 = *(void *)(v21 + 8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
}

void sub_255E21480(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(*(void *)(sub_255EEE730() - 8) + 64);
  uint64_t v9 = *(void *)(*(void *)(a4 + 16) - 8);
  if (v8 <= 8) {
    unint64_t v8 = 8;
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 64);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  size_t v15 = ((v13
        + ((v12 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 72) & ~v12)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v14 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      switch(v18)
      {
        case 1:
          *((unsigned char *)a1 + v15) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v15) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_44;
        case 4:
          *(_DWORD *)((char *)a1 + v15) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            unint64_t v22 = (void *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8);
            if ((v11 & 0x80000000) != 0)
            {
              v23 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
              v23(((((((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v12 + 72) & ~v12, a2);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *unint64_t v22 = a2 ^ 0x80000000;
              v22[1] = 0;
            }
            else
            {
              v22[1] = (a2 - 1);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v13
         + ((v12 + (((((v8 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 72) & ~v12)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v16 = a3 - v14 + 1;
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (v15) {
    int v20 = 1;
  }
  else {
    int v20 = v19;
  }
  if (v15)
  {
    int v21 = ~v14 + a2;
    bzero(a1, v15);
    *a1 = v21;
  }
  switch(v18)
  {
    case 1:
      *((unsigned char *)a1 + v15) = v20;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v15) = v20;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x255E216DCLL);
    case 4:
      *(_DWORD *)((char *)a1 + v15) = v20;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for MedicalIDEditModal()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_255E2171C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E21760()
{
  return sub_255EEF980();
}

uint64_t sub_255E217E0()
{
  return sub_255EEF9A0();
}

uint64_t sub_255E21848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  sub_255EEE810();
  uint64_t v53 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  sub_255E23264(255, &qword_269F36B80, (uint64_t (*)(uint64_t))sub_255E232C8, MEMORY[0x263F19AD0]);
  uint64_t v7 = v6;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v9 = sub_255E233A8();
  uint64_t v46 = swift_getOpaqueTypeMetadata2();
  uint64_t v64 = OpaqueTypeMetadata2;
  uint64_t v65 = v7;
  uint64_t v66 = OpaqueTypeConformance2;
  unint64_t v67 = v9;
  uint64_t v45 = swift_getOpaqueTypeConformance2();
  uint64_t v10 = sub_255EEE890();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = v10;
  uint64_t v65 = WitnessTable;
  uint64_t v47 = MEMORY[0x263F1B020];
  uint64_t v15 = swift_getOpaqueTypeMetadata2();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int v18 = (char *)&v42 - v17;
  sub_255E234B8(255, &qword_269F36BA0, MEMORY[0x263F8D4F8], MEMORY[0x263F1A4D8]);
  uint64_t v55 = sub_255EEE870();
  uint64_t v51 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  v43 = (char *)&v42 - v19;
  uint64_t v50 = sub_255EEE870();
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v50);
  v44 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v49 = (char *)&v42 - v22;
  uint64_t v56 = v3;
  uint64_t v57 = v4;
  uint64_t v23 = v48;
  uint64_t v58 = v48;
  sub_255EEE880();
  sub_255EEF5A0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v24 = (char *)(v23 + *(int *)(v53 + 52));
  char v25 = *v24;
  uint64_t v26 = *((void *)v24 + 1);
  LOBYTE(v64) = v25;
  uint64_t v65 = v26;
  sub_255E234B8(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v64 = v10;
  uint64_t v65 = WitnessTable;
  uint64_t v27 = swift_getOpaqueTypeConformance2();
  sub_255EEF660();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_255E217E0();
  uint64_t v29 = v66;
  uint64_t v28 = v67;
  uint64_t v48 = v70;
  uint64_t v47 = v72;
  v63[0] = v64;
  v63[1] = v65;
  v63[2] = v66;
  v63[3] = v67;
  v63[4] = v68;
  v63[5] = v69;
  v63[6] = v70;
  v63[7] = v71;
  v63[8] = v72;
  unint64_t v30 = sub_255E2343C();
  uint64_t v61 = v27;
  unint64_t v62 = v30;
  uint64_t v53 = MEMORY[0x263F18E48];
  uint64_t v31 = v55;
  uint64_t v32 = swift_getWitnessTable();
  v33 = v44;
  uint64_t v34 = v31;
  v35 = v43;
  sub_255E098B4((uint64_t)v63, v34, v32);
  swift_release();
  swift_release();
  sub_255E092A8(v29, v28);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v55);
  unint64_t v36 = sub_255E08F30();
  uint64_t v59 = v32;
  unint64_t v60 = v36;
  uint64_t v37 = v50;
  uint64_t v38 = swift_getWitnessTable();
  v39 = v49;
  sub_255DD37CC(v33, v37, v38);
  v40 = *(void (**)(char *, uint64_t))(v52 + 8);
  v40(v33, v37);
  sub_255DD37CC(v39, v37, v38);
  return ((uint64_t (*)(char *, uint64_t))v40)(v39, v37);
}

uint64_t sub_255E21F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v41 = sub_255EEEC70();
  uint64_t v7 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  unint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v10 = a3;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v37 = OpaqueTypeMetadata2;
  uint64_t v42 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v38 = (char *)v33 - v12;
  sub_255E23264(255, &qword_269F36B80, (uint64_t (*)(uint64_t))sub_255E232C8, MEMORY[0x263F19AD0]);
  uint64_t v14 = v13;
  v33[1] = v13;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v36 = OpaqueTypeConformance2;
  unint64_t v35 = sub_255E233A8();
  uint64_t v47 = OpaqueTypeMetadata2;
  uint64_t v48 = v14;
  uint64_t v49 = OpaqueTypeConformance2;
  unint64_t v50 = v35;
  uint64_t v39 = MEMORY[0x263F1B228];
  uint64_t v16 = swift_getOpaqueTypeMetadata2();
  uint64_t v40 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v34 = (char *)v33 - v20;
  uint64_t v21 = a2;
  uint64_t v22 = v10;
  type metadata accessor for MedicalIDEditModal();
  uint64_t v23 = v41;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F19698], v41);
  v24 = v38;
  sub_255EEF5C0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  uint64_t v44 = v21;
  uint64_t v45 = v22;
  uint64_t v46 = a1;
  uint64_t v25 = swift_checkMetadataState();
  uint64_t v27 = v36;
  uint64_t v26 = v37;
  unint64_t v28 = v35;
  sub_255EEF640();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v26);
  uint64_t v47 = v26;
  uint64_t v48 = v25;
  uint64_t v49 = v27;
  unint64_t v50 = v28;
  uint64_t v29 = swift_getOpaqueTypeConformance2();
  unint64_t v30 = v34;
  sub_255DD37CC(v19, v16, v29);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v40 + 8);
  v31(v19, v16);
  sub_255DD37CC(v30, v16, v29);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v16);
}

uint64_t sub_255E2230C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a4;
  sub_255E232C8();
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v7);
  v33 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E2333C();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_255EEEE90();
  MEMORY[0x270FA5388](v12 - 8);
  sub_255DDDF50();
  uint64_t v32 = v13;
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v14 = v30;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v28 - v18;
  sub_255EEEE60();
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  sub_255E07734();
  sub_255DDE03C();
  uint64_t v31 = v19;
  sub_255EEE680();
  sub_255EEEE80();
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v29 = v11;
  sub_255EEE680();
  sub_255EEEE70();
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a1;
  sub_255EEE680();
  uint64_t v20 = &v33[*(int *)(v37 + 48)];
  uint64_t v21 = &v33[*(int *)(v37 + 64)];
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v23 = v32;
  v22(v33, v19, v32);
  uint64_t v24 = v34;
  uint64_t v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v20, v11, v35);
  v22(v21, v17, v23);
  sub_255EEEDA0();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v17, v23);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v29, v25);
  return ((uint64_t (*)(char *, uint64_t))v26)(v31, v23);
}

uint64_t sub_255E226D0()
{
  uint64_t v0 = sub_255EEE730();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DAA4A8((uint64_t)v3);
  sub_255EEE720();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_255E2279C@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MedicalIDEditModal();
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_255EEF3D0();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = sub_255EEF3A0();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  sub_255D85120(v2, v4, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  return result;
}

uint64_t sub_255E22874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v23 = a5;
  v20[0] = a1;
  v20[1] = a4;
  uint64_t v21 = a3;
  uint64_t v7 = type metadata accessor for MedicalIDEditModal();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)v20 - v9;
  uint64_t v11 = sub_255EEFD40();
  MEMORY[0x270FA5388](v11 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_269F352A8;
  uint64_t v13 = sub_255EEE200();
  MEMORY[0x270FA5388](v13 - 8);
  id v14 = v12;
  sub_255EEE1F0();
  uint64_t v24 = sub_255EEFDA0();
  uint64_t v25 = v15;
  (*(void (**)(char *, void, uint64_t))(v8 + 16))(v10, v20[0], v7);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v21;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, v10, v7);
  sub_255DAD520();
  return sub_255EEF890();
}

uint64_t sub_255E22AE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](a1);
  char v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E23264(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  sub_255EEFF70();
  uint64_t v10 = sub_255EEFF60();
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8F500];
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v13;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v12 + v11, v5, a1);
  sub_255E09D10((uint64_t)v8, (uint64_t)&unk_269F36BB8, v12);
  return swift_release();
}

uint64_t sub_255E22CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  sub_255EEFF70();
  v6[15] = sub_255EEFF60();
  uint64_t v8 = sub_255EEFF20();
  v6[16] = v8;
  v6[17] = v7;
  return MEMORY[0x270FA2498](sub_255E22D80, v8, v7);
}

uint64_t sub_255E22D80()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = type metadata accessor for MedicalIDEditModal();
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = (char *)(v1 + *(int *)(v2 + 52));
  char v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  *(unsigned char *)(v0 + 72) = v4;
  *(void *)(v0 + 80) = v5;
  *(unsigned char *)(v0 + 168) = 1;
  sub_255E234B8(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF830();
  uint64_t v8 = (uint64_t (*)(void))(*(void *)(v1 + *(int *)(v2 + 40)) + **(int **)(v1 + *(int *)(v2 + 40)));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_255E22ED4;
  return v8();
}

uint64_t sub_255E22ED4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  uint64_t v4 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v5 = sub_255E2307C;
  }
  else {
    uint64_t v5 = sub_255E23010;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_255E23010()
{
  swift_release();
  sub_255E231D8();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255E2307C()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  swift_release();
  *(void *)(v0 + 88) = v1;
  id v2 = v1;
  sub_255D89E7C();
  char v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 160);
  if (v3)
  {

    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v15 = *(void *)(v0 + 16);
    uint64_t v16 = v5;
    long long v17 = *(_OWORD *)(v0 + 32);
    uint64_t v18 = v6;
    long long v19 = *(_OWORD *)(v0 + 56);
    sub_255E21760();
    uint64_t v7 = *(void **)(v0 + 88);
  }
  else
  {

    id v8 = v4;
    sub_255EB71FC(v4, v11);

    uint64_t v15 = v11[0];
    uint64_t v16 = v11[1];
    long long v17 = v12;
    uint64_t v18 = v13;
    long long v19 = v14;
    sub_255E21760();
    uint64_t v7 = v4;
  }

  sub_255E231D8();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_255E231D8()
{
  return sub_255EEF830();
}

void sub_255E23264(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E232C8()
{
  if (!qword_269F36B88)
  {
    sub_255DDDF50();
    sub_255E2333C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36B88);
    }
  }
}

void sub_255E2333C()
{
  if (!qword_269F36B90)
  {
    unint64_t v0 = sub_255EEE690();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36B90);
    }
  }
}

unint64_t sub_255E233A8()
{
  unint64_t result = qword_269F36B98;
  if (!qword_269F36B98)
  {
    sub_255E23264(255, &qword_269F36B80, (uint64_t (*)(uint64_t))sub_255E232C8, MEMORY[0x263F19AD0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36B98);
  }
  return result;
}

uint64_t sub_255E23430@<X0>(uint64_t a1@<X8>)
{
  return sub_255E21F10(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_255E2343C()
{
  unint64_t result = qword_269F36BA8;
  if (!qword_269F36BA8)
  {
    sub_255E234B8(255, &qword_269F36BA0, MEMORY[0x263F8D4F8], MEMORY[0x263F1A4D8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_269F36BA8);
  }
  return result;
}

void sub_255E234B8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E23504@<X0>(uint64_t a1@<X8>)
{
  return sub_255E2230C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_255E23510@<X0>(uint64_t a1@<X8>)
{
  return sub_255E22874(v1[4], v1[2], v1[3], (uint64_t)&unk_2704A57A8, (uint64_t)sub_255E23B0C, a1);
}

uint64_t sub_255E2355C@<X0>(uint64_t a1@<X8>)
{
  return sub_255E2279C(a1);
}

uint64_t sub_255E23568@<X0>(uint64_t a1@<X8>)
{
  return sub_255E22874(v1[4], v1[2], v1[3], (uint64_t)&unk_2704A5758, (uint64_t)sub_255E235B4, a1);
}

uint64_t sub_255E235B4()
{
  uint64_t v0 = type metadata accessor for MedicalIDEditModal();
  return sub_255E22AE0(v0);
}

uint64_t sub_255E23618()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for MedicalIDEditModal();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + v3;
  sub_255E23264(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE730();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v4 + *(int *)(v2 + 44);
  swift_release();
  swift_release();
  if (*(void *)(v6 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 48), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E23810(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for MedicalIDEditModal() - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_255D7E778;
  return sub_255E22CE4(a1, v7, v8, v9, v4, v5);
}

uint64_t objectdestroyTm_12()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for MedicalIDEditModal();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = v0 + v3;
  sub_255E23264(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE730();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v4 + *(int *)(v2 + 44);
  swift_release();
  swift_release();
  if (*(void *)(v6 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 48), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E23B0C()
{
  type metadata accessor for MedicalIDEditModal();
  return sub_255E226D0();
}

uint64_t sub_255E23B90()
{
  return swift_getWitnessTable();
}

char *sub_255E23DD4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v26 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v6;
    v109 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    v110 = a1;
    uint64_t v7 = v109[5];
    uint64_t v8 = &a1[v7];
    v116 = a2;
    uint64_t v9 = &a2[v7];
    uint64_t v10 = *(void *)&a2[v7];
    uint64_t v11 = *((void *)v9 + 1);
    *(void *)uint64_t v8 = v10;
    *((void *)v8 + 1) = v11;
    uint64_t v12 = *((void *)v9 + 3);
    *((void *)v8 + 2) = *((void *)v9 + 2);
    *((void *)v8 + 3) = v12;
    uint64_t v13 = *((void *)v9 + 5);
    *((void *)v8 + 4) = *((void *)v9 + 4);
    *((void *)v8 + 5) = v13;
    uint64_t v14 = *((void *)v9 + 7);
    *((void *)v8 + 6) = *((void *)v9 + 6);
    *((void *)v8 + 7) = v14;
    uint64_t v15 = *((void *)v9 + 9);
    *((void *)v8 + 8) = *((void *)v9 + 8);
    *((void *)v8 + 9) = v15;
    uint64_t v16 = *((void *)v9 + 11);
    *((void *)v8 + 10) = *((void *)v9 + 10);
    *((void *)v8 + 11) = v16;
    v106 = (void *)*((void *)v9 + 12);
    v111 = (void *)*((void *)v9 + 13);
    *((void *)v8 + 12) = v106;
    *((void *)v8 + 13) = v111;
    v113 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v17 = v113[13];
    __dst = &v8[v17];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = sub_255EEE100();
    uint64_t v107 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v106;
    id v22 = v111;
    v112 = v20;
    if (v20(v18, 1, v19))
    {
      sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v18, *(void *)(*(void *)(v23 - 8) + 64));
      uint64_t v24 = v107;
    }
    else
    {
      uint64_t v24 = v107;
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v27 = v113[14];
    uint64_t v28 = &v8[v27];
    uint64_t v29 = &v9[v27];
    if (v112(&v9[v27], 1, v19))
    {
      sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v19);
    }
    uint64_t v31 = v113[15];
    uint64_t v32 = &v8[v31];
    v33 = &v9[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *uint64_t v32 = *(void *)v33;
    v32[1] = v34;
    uint64_t v35 = v113[16];
    uint64_t v36 = &v8[v35];
    uint64_t v37 = &v9[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *uint64_t v36 = *(void *)v37;
    v36[1] = v38;
    v8[v113[17]] = v9[v113[17]];
    v8[v113[18]] = v9[v113[18]];
    uint64_t v39 = v113[19];
    uint64_t v40 = &v8[v39];
    uint64_t v41 = (uint64_t *)&v9[v39];
    unint64_t v42 = *(void *)&v9[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v43 = *v41;
      sub_255D80890(*v41, v42);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v42;
    }
    uint64_t v44 = v113[20];
    uint64_t v45 = &v8[v44];
    uint64_t v46 = &v9[v44];
    uint64_t v47 = sub_255EEDF60();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_255E2465C(0, &qword_269F350B8, MEMORY[0x270FA81A8], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    uint64_t v50 = v113[21];
    uint64_t v51 = *(void **)&v9[v50];
    *(void *)&v8[v50] = v51;
    uint64_t v52 = v113[22];
    uint64_t v53 = &v8[v52];
    uint64_t v54 = &v9[v52];
    id v55 = v51;
    if (v112(v54, 1, v19))
    {
      sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v53, v54, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v53, 0, 1, v19);
    }
    uint64_t v57 = v109[6];
    uint64_t v58 = &v110[v57];
    uint64_t v59 = &v116[v57];
    uint64_t v60 = sub_255EEE200();
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
    v61(v58, v59, v60);
    uint64_t v62 = v109[7];
    v63 = &v110[v62];
    uint64_t v64 = &v116[v62];
    v61(&v110[v62], &v116[v62], v60);
    uint64_t v65 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    uint64_t v66 = *(void **)&v64[v65];
    *(void *)&v63[v65] = v66;
    uint64_t v67 = v109[8];
    uint64_t v68 = &v110[v67];
    uint64_t v69 = &v116[v67];
    id v70 = v66;
    uint64_t v114 = v60;
    v61(v68, v69, v60);
    uint64_t v71 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v72 = *(int *)(v71 + 20);
    v73 = *(void **)&v69[v72];
    *(void *)&v68[v72] = v73;
    uint64_t v74 = *(int *)(v71 + 24);
    v75 = *(void **)&v69[v74];
    *(void *)&v68[v74] = v75;
    uint64_t v76 = a3[5];
    v77 = &v110[v76];
    v78 = &v116[v76];
    uint64_t v79 = *(void *)&v116[v76 + 8];
    *(void *)v77 = *(void *)&v116[v76];
    *((void *)v77 + 1) = v79;
    sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
    uint64_t v81 = *(int *)(v80 + 32);
    v82 = &v77[v81];
    v83 = &v78[v81];
    sub_255E246F4();
    uint64_t v85 = v84;
    uint64_t v86 = *(void *)(v84 - 8);
    v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
    id v88 = v73;
    id v89 = v75;
    swift_retain();
    swift_retain();
    if (v87(v83, 1, v85))
    {
      sub_255E246C0(0);
      memcpy(v82, v83, *(void *)(*(void *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v82, v83, v85);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v82, 0, 1, v85);
    }
    uint64_t v91 = a3[7];
    uint64_t v26 = v110;
    *(void *)&v110[a3[6]] = *(void *)&v116[a3[6]];
    *(void *)&v110[v91] = *(void *)&v116[v91];
    uint64_t v92 = a3[8];
    uint64_t v93 = a3[9];
    v94 = &v110[v92];
    v95 = &v116[v92];
    uint64_t v96 = *((void *)v95 + 1);
    *(void *)v94 = *(void *)v95;
    *((void *)v94 + 1) = v96;
    *((void *)v94 + 2) = *((void *)v95 + 2);
    v97 = &v110[v93];
    v98 = &v116[v93];
    sub_255D9870C(0);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v61(v97, v98, v114);
    }
    else
    {
      *(void *)v97 = *(void *)v98;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v99 = a3[10];
    v100 = &v110[v99];
    v101 = &v116[v99];
    v103 = *(void **)v101;
    uint64_t v102 = *((void *)v101 + 1);
    *(void *)v100 = v103;
    *((void *)v100 + 1) = v102;
    id v104 = v103;
  }
  return v26;
}

void sub_255E2465C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E246C0(uint64_t a1)
{
}

void sub_255E246F4()
{
  if (!qword_269F36388)
  {
    sub_255D7ED10(255, &qword_269F36390);
    unint64_t v0 = sub_255EEDE20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36388);
    }
  }
}

void sub_255E2475C(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v30 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v3 = a1 + v30[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = v3 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = v3 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = v3 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = a1 + v30[6];
  uint64_t v17 = sub_255EEE200();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = a1 + v30[7];
  v18(v19, v17);

  uint64_t v20 = a1 + v30[8];
  v18(v20, v17);
  uint64_t v21 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v22 = a1 + a2[5];
  swift_release();
  swift_release();
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v24 = v22 + *(int *)(v23 + 32);
  sub_255E246F4();
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = a1 + a2[9];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v18(v28, v17);
  }
  else {
    swift_release();
  }
  uint64_t v29 = *(void **)(a1 + a2[10]);
}

char *sub_255E24BF0(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  v109 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v6 = v109[5];
  v113 = a2;
  uint64_t v114 = a1;
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *(void *)uint64_t v7 = *(void *)&a2[v6];
  *((void *)v7 + 1) = v9;
  uint64_t v11 = *(void *)&a2[v6 + 16];
  uint64_t v10 = *(void *)&a2[v6 + 24];
  *((void *)v7 + 2) = v11;
  *((void *)v7 + 3) = v10;
  uint64_t v12 = *((void *)v8 + 5);
  *((void *)v7 + 4) = *((void *)v8 + 4);
  *((void *)v7 + 5) = v12;
  uint64_t v13 = *((void *)v8 + 7);
  *((void *)v7 + 6) = *((void *)v8 + 6);
  *((void *)v7 + 7) = v13;
  uint64_t v14 = *((void *)v8 + 9);
  *((void *)v7 + 8) = *((void *)v8 + 8);
  *((void *)v7 + 9) = v14;
  uint64_t v15 = *((void *)v8 + 11);
  *((void *)v7 + 10) = *((void *)v8 + 10);
  *((void *)v7 + 11) = v15;
  id v104 = (void *)*((void *)v8 + 12);
  v105 = (void *)*((void *)v8 + 13);
  *((void *)v7 + 12) = v104;
  *((void *)v7 + 13) = v105;
  uint64_t v16 = type metadata accessor for MedicalIDData();
  uint64_t v17 = *(int *)(v16 + 52);
  __dst = &v7[v17];
  v108 = (int *)v16;
  uint64_t v18 = &v8[v17];
  uint64_t v19 = sub_255EEE100();
  uint64_t v106 = *(void *)(v19 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = v104;
  id v22 = v105;
  v110 = v20;
  if (v20(v18, 1, v19))
  {
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v18, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v24 = v106;
  }
  else
  {
    uint64_t v24 = v106;
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(__dst, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(__dst, 0, 1, v19);
  }
  uint64_t v25 = v108[14];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  if (v110(&v8[v25], 1, v19))
  {
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v27, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v19);
  }
  uint64_t v29 = v108[15];
  uint64_t v30 = &v7[v29];
  uint64_t v31 = &v8[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = *(void *)v31;
  *((void *)v30 + 1) = v32;
  uint64_t v33 = v108[16];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = &v8[v33];
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v36;
  v7[v108[17]] = v8[v108[17]];
  v7[v108[18]] = v8[v108[18]];
  uint64_t v37 = v108[19];
  uint64_t v38 = &v7[v37];
  uint64_t v39 = (uint64_t *)&v8[v37];
  unint64_t v40 = *(void *)&v8[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  }
  else
  {
    uint64_t v41 = *v39;
    sub_255D80890(*v39, v40);
    *(void *)uint64_t v38 = v41;
    *((void *)v38 + 1) = v40;
  }
  uint64_t v42 = v108[20];
  uint64_t v43 = &v7[v42];
  uint64_t v44 = &v8[v42];
  uint64_t v45 = sub_255EEDF60();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_255E2465C(0, &qword_269F350B8, MEMORY[0x270FA81A8], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  uint64_t v48 = v108[21];
  uint64_t v49 = *(void **)&v8[v48];
  *(void *)&v7[v48] = v49;
  uint64_t v50 = v108[22];
  uint64_t v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  id v53 = v49;
  if (v110(v52, 1, v19))
  {
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v51, v52, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v51, 0, 1, v19);
  }
  uint64_t v55 = v109[6];
  uint64_t v56 = &v114[v55];
  uint64_t v57 = &v113[v55];
  uint64_t v58 = sub_255EEE200();
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  uint64_t v60 = v109[7];
  uint64_t v61 = &v114[v60];
  uint64_t v62 = &v113[v60];
  v59(&v114[v60], &v113[v60], v58);
  uint64_t v63 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v64 = *(void **)&v62[v63];
  *(void *)&v61[v63] = v64;
  uint64_t v65 = v109[8];
  uint64_t v66 = &v114[v65];
  uint64_t v67 = &v113[v65];
  id v68 = v64;
  uint64_t v111 = v58;
  v59(v66, v67, v58);
  uint64_t v69 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v70 = *(int *)(v69 + 20);
  uint64_t v71 = *(void **)&v67[v70];
  *(void *)&v66[v70] = v71;
  uint64_t v72 = *(int *)(v69 + 24);
  v73 = *(void **)&v67[v72];
  *(void *)&v66[v72] = v73;
  uint64_t v74 = a3[5];
  v75 = &v114[v74];
  uint64_t v76 = &v113[v74];
  uint64_t v77 = *(void *)&v113[v74 + 8];
  *(void *)v75 = *(void *)&v113[v74];
  *((void *)v75 + 1) = v77;
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v79 = *(int *)(v78 + 32);
  uint64_t v80 = &v75[v79];
  uint64_t v81 = &v76[v79];
  sub_255E246F4();
  uint64_t v83 = v82;
  uint64_t v84 = *(void *)(v82 - 8);
  uint64_t v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  id v86 = v71;
  id v87 = v73;
  swift_retain();
  swift_retain();
  if (v85(v81, 1, v83))
  {
    sub_255E246C0(0);
    memcpy(v80, v81, *(void *)(*(void *)(v88 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v80, v81, v83);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v80, 0, 1, v83);
  }
  uint64_t v89 = a3[7];
  *(void *)&v114[a3[6]] = *(void *)&v113[a3[6]];
  *(void *)&v114[v89] = *(void *)&v113[v89];
  uint64_t v90 = a3[8];
  uint64_t v91 = a3[9];
  uint64_t v92 = &v114[v90];
  uint64_t v93 = &v113[v90];
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)uint64_t v92 = *(void *)v93;
  *((void *)v92 + 1) = v94;
  *((void *)v92 + 2) = *((void *)v93 + 2);
  v95 = &v114[v91];
  uint64_t v96 = &v113[v91];
  sub_255D9870C(0);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59(v95, v96, v111);
  }
  else
  {
    *(void *)v95 = *(void *)v96;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v97 = a3[10];
  v98 = &v114[v97];
  uint64_t v99 = &v113[v97];
  v101 = *(void **)v99;
  uint64_t v100 = *((void *)v99 + 1);
  *(void *)v98 = v101;
  *((void *)v98 + 1) = v100;
  id v102 = v101;
  return v114;
}

char *sub_255E25424(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v115 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v116 = a1;
  uint64_t v5 = v115[5];
  uint64_t v6 = &a1[v5];
  v120 = a2;
  uint64_t v7 = &a2[v5];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = *(void *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 2) = *((void *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 3) = *((void *)v7 + 3);
  *((void *)v6 + 4) = *((void *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 5) = *((void *)v7 + 5);
  *((void *)v6 + 6) = *((void *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 7) = *((void *)v7 + 7);
  *((void *)v6 + 8) = *((void *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 9) = *((void *)v7 + 9);
  *((void *)v6 + 10) = *((void *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 11) = *((void *)v7 + 11);
  unint64_t v8 = (void *)*((void *)v6 + 12);
  uint64_t v9 = (void *)*((void *)v7 + 12);
  *((void *)v6 + 12) = v9;
  id v10 = v9;

  uint64_t v11 = (void *)*((void *)v6 + 13);
  uint64_t v12 = (void *)*((void *)v7 + 13);
  *((void *)v6 + 13) = v12;
  id v13 = v12;

  uint64_t v14 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v15 = v14[13];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v18 = sub_255EEE100();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  v117 = v20;
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[14];
  uint64_t v25 = &v6[v24];
  uint64_t v26 = &v7[v24];
  int v27 = v20(&v6[v24], 1, v18);
  int v28 = v20(v26, 1, v18);
  uint64_t v114 = v18;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  uint64_t v30 = v14[15];
  uint64_t v31 = &v6[v30];
  uint64_t v32 = &v7[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[16];
  uint64_t v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  uint64_t v36 = v14[19];
  uint64_t v37 = (uint64_t *)&v6[v36];
  uint64_t v38 = (uint64_t *)&v7[v36];
  unint64_t v39 = *(void *)&v7[v36 + 8];
  if (*(void *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      uint64_t v40 = *v38;
      sub_255D80890(*v38, v39);
      *uint64_t v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v37);
LABEL_18:
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  uint64_t v41 = *v38;
  sub_255D80890(*v38, v39);
  uint64_t v42 = *v37;
  unint64_t v43 = v37[1];
  *uint64_t v37 = v41;
  v37[1] = v39;
  sub_255D80D04(v42, v43);
LABEL_20:
  uint64_t v44 = v14[20];
  uint64_t v45 = &v6[v44];
  uint64_t v46 = &v7[v44];
  uint64_t v47 = sub_255EEDF60();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_255E2465C(0, &qword_269F350B8, MEMORY[0x270FA81A8], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  uint64_t v53 = v14[21];
  uint64_t v54 = *(void **)&v6[v53];
  uint64_t v55 = *(void **)&v7[v53];
  *(void *)&v6[v53] = v55;
  id v56 = v55;

  uint64_t v57 = v14[22];
  uint64_t v58 = &v6[v57];
  uint64_t v59 = &v7[v57];
  int v60 = v117(&v6[v57], 1, v114);
  int v61 = v117(v59, 1, v114);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v58, v59, v114);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v58, 0, 1, v114);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v58, v114);
LABEL_31:
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v58, v59, v114);
LABEL_32:
  uint64_t v63 = v115[6];
  uint64_t v64 = &v116[v63];
  uint64_t v65 = &v120[v63];
  uint64_t v66 = sub_255EEE200();
  uint64_t v118 = *(void *)(v66 - 8);
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v118 + 24);
  v67(v64, v65, v66);
  uint64_t v68 = v115[7];
  uint64_t v69 = &v116[v68];
  uint64_t v70 = &v120[v68];
  v67(&v116[v68], &v120[v68], v66);
  uint64_t v71 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v72 = *(void **)&v70[v71];
  v73 = *(void **)&v69[v71];
  *(void *)&v69[v71] = v72;
  id v74 = v72;

  uint64_t v75 = v115[8];
  uint64_t v76 = &v116[v75];
  uint64_t v77 = &v120[v75];
  v67(&v116[v75], &v120[v75], v66);
  uint64_t v78 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v79 = *(int *)(v78 + 20);
  uint64_t v80 = *(void **)&v77[v79];
  uint64_t v81 = *(void **)&v76[v79];
  *(void *)&v76[v79] = v80;
  id v82 = v80;

  uint64_t v83 = *(int *)(v78 + 24);
  uint64_t v84 = *(void **)&v77[v83];
  uint64_t v85 = *(void **)&v76[v83];
  *(void *)&v76[v83] = v84;
  id v86 = v84;

  uint64_t v87 = a3[5];
  uint64_t v88 = &v116[v87];
  uint64_t v89 = &v120[v87];
  *(void *)&v116[v87] = *(void *)&v120[v87];
  swift_retain();
  swift_release();
  *((void *)v88 + 1) = *((void *)v89 + 1);
  swift_retain();
  swift_release();
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v91 = *(int *)(v90 + 32);
  uint64_t v92 = &v88[v91];
  uint64_t v93 = &v89[v91];
  sub_255E246F4();
  uint64_t v95 = v94;
  uint64_t v96 = *(void *)(v94 - 8);
  uint64_t v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
  int v98 = v97(v92, 1, v94);
  int v99 = v97(v93, 1, v95);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v92, v93, v95);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v92, 0, 1, v95);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v92, v95);
LABEL_37:
    sub_255E246C0(0);
    memcpy(v92, v93, *(void *)(*(void *)(v100 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 24))(v92, v93, v95);
LABEL_38:
  *(void *)&v116[a3[6]] = *(void *)&v120[a3[6]];
  swift_retain();
  swift_release();
  *(void *)&v116[a3[7]] = *(void *)&v120[a3[7]];
  uint64_t v101 = a3[8];
  id v102 = &v116[v101];
  v103 = &v120[v101];
  *(void *)id v102 = *(void *)&v120[v101];
  *((void *)v102 + 1) = *(void *)&v120[v101 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v102 + 2) = *((void *)v103 + 2);
  swift_retain();
  swift_release();
  if (v116 != v120)
  {
    uint64_t v104 = a3[9];
    v105 = &v116[v104];
    uint64_t v106 = &v120[v104];
    sub_255E299A0((uint64_t)&v116[v104], (uint64_t (*)(void))sub_255D9870C);
    sub_255D9870C(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v105, v106, v66);
    }
    else
    {
      *(void *)v105 = *(void *)v106;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v107 = a3[10];
  v108 = &v116[v107];
  v109 = &v120[v107];
  v110 = *(void **)&v116[v107];
  uint64_t v111 = *(void **)&v120[v107];
  *(void *)v108 = v111;
  id v112 = v111;

  *((void *)v108 + 1) = *((void *)v109 + 1);
  return v116;
}

char *sub_255E25FC0(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v66 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v5 = v66[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&a2[v5];
  *((void *)v6 + 2) = *(void *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((void *)v6 + 11) = *(void *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  unint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  id v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v69(v11, 1, v12))
  {
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v68 = a2;
  uint64_t v65 = v13;
  if (v69(&v7[v15], 1, v12))
  {
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  uint64_t v20 = &v6[v19];
  int v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255E2465C(0, &qword_269F350B8, MEMORY[0x270FA81A8], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v69(&v7[v25], 1, v12))
  {
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = v66[6];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &v68[v29];
  uint64_t v32 = sub_255EEE200();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  uint64_t v34 = v66[7];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &v68[v34];
  v33(&a1[v34], &v68[v34], v32);
  uint64_t v37 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v35[*(int *)(v37 + 20)] = *(void *)&v36[*(int *)(v37 + 20)];
  uint64_t v38 = v66[8];
  unint64_t v39 = &a1[v38];
  uint64_t v40 = &v68[v38];
  v33(&a1[v38], &v68[v38], v32);
  uint64_t v41 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v39[*(int *)(v41 + 20)] = *(void *)&v40[*(int *)(v41 + 20)];
  *(void *)&v39[*(int *)(v41 + 24)] = *(void *)&v40[*(int *)(v41 + 24)];
  uint64_t v42 = a3[5];
  unint64_t v43 = &a1[v42];
  uint64_t v44 = &v68[v42];
  uint64_t v45 = *(void *)&v68[v42 + 8];
  *(void *)unint64_t v43 = *(void *)&v68[v42];
  *((void *)v43 + 1) = v45;
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v47 = *(int *)(v46 + 32);
  uint64_t v48 = &v43[v47];
  uint64_t v49 = &v44[v47];
  sub_255E246F4();
  uint64_t v51 = v50;
  uint64_t v52 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v49, 1, v50))
  {
    sub_255E246C0(0);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v49, v51);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
  }
  uint64_t v54 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&v68[a3[6]];
  *(void *)&a1[v54] = *(void *)&v68[v54];
  uint64_t v55 = a3[8];
  uint64_t v56 = a3[9];
  uint64_t v57 = &a1[v55];
  uint64_t v58 = &v68[v55];
  long long v59 = *(_OWORD *)v58;
  *((void *)v57 + 2) = *((void *)v58 + 2);
  *(_OWORD *)uint64_t v57 = v59;
  int v60 = &a1[v56];
  int v61 = &v68[v56];
  sub_255D9870C(0);
  uint64_t v63 = v62;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v33(v60, v61, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v60, v61, *(void *)(*(void *)(v63 - 8) + 64));
  }
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&v68[a3[10]];
  return a1;
}

char *sub_255E266E4(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  v115 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  v116 = a1;
  uint64_t v6 = v115[5];
  uint64_t v7 = &a1[v6];
  v119 = a2;
  unint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *(void *)uint64_t v7 = *(void *)&a2[v6];
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRelease();
  uint64_t v10 = *((void *)v8 + 4);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  *((void *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v8 + 6);
  *((void *)v7 + 5) = *((void *)v8 + 5);
  *((void *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v8 + 8);
  *((void *)v7 + 7) = *((void *)v8 + 7);
  *((void *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v8 + 10);
  *((void *)v7 + 9) = *((void *)v8 + 9);
  *((void *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)*((void *)v7 + 12);
  uint64_t v15 = *((void *)v8 + 12);
  *((void *)v7 + 11) = *((void *)v8 + 11);
  *((void *)v7 + 12) = v15;

  uint64_t v16 = (void *)*((void *)v7 + 13);
  *((void *)v7 + 13) = *((void *)v8 + 13);

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  uint64_t v21 = sub_255EEE100();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  v117 = v23;
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v27 = v17[14];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  int v30 = v23(&v7[v27], 1, v21);
  int v31 = v23(v29, 1, v21);
  uint64_t v114 = v21;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  uint64_t v33 = v17[15];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = (uint64_t *)&v8[v33];
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v17[16];
  unint64_t v39 = &v7[v38];
  uint64_t v40 = (uint64_t *)&v8[v38];
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)unint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  uint64_t v43 = v17[19];
  uint64_t v44 = (uint64_t)&v7[v43];
  uint64_t v45 = &v8[v43];
  unint64_t v46 = *(void *)&v7[v43 + 8];
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  unint64_t v47 = *((void *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_255D81EF8(v44);
    goto LABEL_16;
  }
  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_255D80D04(v48, v46);
LABEL_18:
  uint64_t v49 = v17[20];
  uint64_t v50 = &v7[v49];
  uint64_t v51 = &v8[v49];
  uint64_t v52 = sub_255EEDF60();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_255E2465C(0, &qword_269F350B8, MEMORY[0x270FA81A8], MEMORY[0x263F8D8F0]);
    memcpy(v50, v51, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  uint64_t v58 = v17[21];
  long long v59 = *(void **)&v7[v58];
  *(void *)&v7[v58] = *(void *)&v8[v58];

  uint64_t v60 = v17[22];
  int v61 = &v7[v60];
  uint64_t v62 = &v8[v60];
  int v63 = v117(&v7[v60], 1, v114);
  int v64 = v117(v62, 1, v114);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v61, v62, v114);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v61, 0, 1, v114);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v61, v114);
LABEL_29:
    sub_255E2465C(0, &qword_269F35058, MEMORY[0x270FA91E0], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v61, v62, v114);
LABEL_30:
  uint64_t v66 = v115[6];
  uint64_t v67 = &v116[v66];
  uint64_t v68 = &v119[v66];
  uint64_t v69 = sub_255EEE200();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v70 + 40);
  v71(v67, v68, v69);
  uint64_t v72 = v115[7];
  v73 = &v116[v72];
  id v74 = &v119[v72];
  v71(&v116[v72], &v119[v72], v69);
  uint64_t v75 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v76 = *(void **)&v73[v75];
  *(void *)&v73[v75] = *(void *)&v74[v75];

  uint64_t v77 = v115[8];
  uint64_t v78 = &v116[v77];
  uint64_t v79 = &v119[v77];
  v71(&v116[v77], &v119[v77], v69);
  uint64_t v80 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v81 = *(int *)(v80 + 20);
  id v82 = *(void **)&v78[v81];
  *(void *)&v78[v81] = *(void *)&v79[v81];

  uint64_t v83 = *(int *)(v80 + 24);
  uint64_t v84 = *(void **)&v78[v83];
  *(void *)&v78[v83] = *(void *)&v79[v83];

  uint64_t v85 = a3[5];
  id v86 = &v116[v85];
  uint64_t v87 = &v119[v85];
  *(void *)&v116[v85] = *(void *)&v119[v85];
  swift_release();
  *((void *)v86 + 1) = *((void *)v87 + 1);
  swift_release();
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v89 = *(int *)(v88 + 32);
  uint64_t v90 = &v86[v89];
  uint64_t v91 = &v87[v89];
  sub_255E246F4();
  uint64_t v93 = v92;
  uint64_t v94 = *(void *)(v92 - 8);
  uint64_t v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  int v96 = v95(v90, 1, v92);
  int v97 = v95(v91, 1, v93);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v90, v91, v93);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v90, 0, 1, v93);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v97)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v90, v93);
LABEL_35:
    sub_255E246C0(0);
    memcpy(v90, v91, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v90, v91, v93);
LABEL_36:
  *(void *)&v116[a3[6]] = *(void *)&v119[a3[6]];
  swift_release();
  uint64_t v99 = a3[8];
  *(void *)&v116[a3[7]] = *(void *)&v119[a3[7]];
  uint64_t v100 = &v116[v99];
  uint64_t v101 = &v119[v99];
  uint64_t v102 = *(void *)&v119[v99];
  uint64_t v103 = *(void *)&v119[v99 + 8];
  *(void *)uint64_t v100 = v102;
  *((void *)v100 + 1) = v103;
  swift_bridgeObjectRelease();
  *((void *)v100 + 2) = *((void *)v101 + 2);
  swift_release();
  if (v116 != v119)
  {
    uint64_t v104 = a3[9];
    v105 = &v116[v104];
    uint64_t v106 = &v119[v104];
    sub_255E299A0((uint64_t)&v116[v104], (uint64_t (*)(void))sub_255D9870C);
    sub_255D9870C(0);
    uint64_t v108 = v107;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v105, v106, v69);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v105, v106, *(void *)(*(void *)(v108 - 8) + 64));
    }
  }
  uint64_t v109 = a3[10];
  v110 = &v116[v109];
  uint64_t v111 = &v119[v109];
  id v112 = *(void **)&v116[v109];
  *(void *)v110 = *(void *)v111;

  *((void *)v110 + 1) = *((void *)v111 + 1);
  return v116;
}

uint64_t sub_255E27180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E27194);
}

uint64_t sub_255E27194(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    sub_255E2465C(0, &qword_269F35338, MEMORY[0x270FA97B0], MEMORY[0x263F185D0]);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[9];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_255E27368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E2737C);
}

void sub_255E2737C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
  }
  else
  {
    sub_255E2465C(0, &qword_269F35338, MEMORY[0x270FA97B0], MEMORY[0x263F185D0]);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[9];
    v16(v18, a2, a2, v17);
  }
}

uint64_t type metadata accessor for EditWeightCellView()
{
  uint64_t result = qword_269F36BD0;
  if (!qword_269F36BD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E2759C()
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  if (v0 <= 0x3F)
  {
    sub_255E2465C(319, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
    if (v1 <= 0x3F)
    {
      sub_255D9870C(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_255E276FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E27718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v96 = a1;
  uint64_t v2 = sub_255EEE830();
  uint64_t v94 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v97 = (int *)type metadata accessor for EditWeightCellView();
  uint64_t v99 = *((void *)v97 - 1);
  MEMORY[0x270FA5388](v97);
  uint64_t v98 = v5;
  uint64_t v90 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E28C60();
  uint64_t v80 = *(uint64_t **)(v6 - 8);
  uint64_t v81 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v79 = (uint64_t (*)())((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E28D34();
  uint64_t v84 = v8;
  uint64_t v82 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v100 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E28DE4();
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v89 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E28F54();
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v88 = v12;
  MEMORY[0x270FA5388](v12);
  id v86 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E29094();
  uint64_t v85 = v14;
  uint64_t v83 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v101 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269F34B40 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)algn_269F3FDE8;
  uint64_t v75 = qword_269F3FDE0;
  sub_255E291E0(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8E0F8]);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_255EF1E20;
  uint64_t v18 = v1[1];
  uint64_t v19 = v1;
  *(void *)(v17 + 32) = *v1;
  *(void *)(v17 + 40) = v18;
  uint64_t v20 = 0xE600000000000000;
  *(void *)(v17 + 48) = 0x746867696557;
  *(void *)(v17 + 56) = 0xE600000000000000;
  uint64_t v76 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v95 = v2;
  uint64_t v93 = v4;
  if (v22)
  {
    uint64_t v23 = sub_255EEFD90();
    uint64_t v20 = v24;

    int v25 = v97;
  }
  else
  {
    int v25 = v97;
    uint64_t v23 = 0x746867696557;
  }
  int v97 = (int *)v23;
  uint64_t v26 = (uint64_t)v19;
  uint64_t v27 = (char *)v19 + v25[8];
  long long v28 = *(_OWORD *)v27;
  uint64_t v78 = (long long *)v27;
  uint64_t v29 = *((void *)v27 + 2);
  long long v102 = v28;
  *(void *)&long long v103 = v29;
  sub_255E291E0(0, &qword_269F36C18, MEMORY[0x263F1B5D0]);
  uint64_t v77 = v30;
  sub_255EEF840();
  uint64_t v73 = *((void *)&v110 + 1);
  uint64_t v74 = v110;
  uint64_t v71 = *((void *)&v111 + 1);
  uint64_t v72 = v111;
  type metadata accessor for MedicalIDBiometricsViewModel();
  sub_255E44C20(1);
  uint64_t v32 = v31;
  id v33 = sub_255E44DE4();
  id v34 = objc_msgSend(v32, sel_stringFromUnit_, v33);

  uint64_t v35 = sub_255EEFD90();
  uint64_t v37 = v36;

  uint64_t v38 = *(void **)(v26 + v25[10]);
  if (v38)
  {
    uint64_t v39 = v26;
    uint64_t v40 = *(void *)(v26 + v25[6]);
    id v41 = v38;
    sub_255E9CB04(v41, v40);

    sub_255E1D218(v75, v76, (uint64_t)v97, v20, v74, v73, v72, v71, (uint64_t)&v110, v35, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v106 = v114;
    long long v107 = v115;
    long long v108 = v116;
    uint64_t v109 = v117;
    long long v102 = v110;
    long long v103 = v111;
    long long v104 = v112;
    long long v105 = v113;
    unint64_t v42 = sub_255E28CE0();
    uint64_t v43 = v79;
    MEMORY[0x25A29AF90](1, &type metadata for ClearableAddableTextField, v42);
    sub_255E29230((uint64_t)&v110);
    *(void *)&long long v102 = &type metadata for ClearableAddableTextField;
    *((void *)&v102 + 1) = v42;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v45 = v81;
    sub_255EEF4A0();
    ((void (*)(uint64_t (*)(), uint64_t))v80[1])(v43, v45);
    uint64_t v46 = sub_255EEE200();
    uint64_t v80 = &v70;
    uint64_t v47 = *(void *)(v46 - 8);
    MEMORY[0x270FA5388](v46);
    uint64_t v49 = (char *)&v70 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v70 = v39;
    sub_255DAAA88((uint64_t)v49);
    uint64_t v79 = type metadata accessor for EditWeightCellView;
    uint64_t v50 = v90;
    sub_255E29938(v39, v90, (uint64_t (*)(void))type metadata accessor for EditWeightCellView);
    uint64_t v51 = *(unsigned __int8 *)(v99 + 80);
    v98 += (v51 + 16) & ~v51;
    uint64_t v99 = (v51 + 16) & ~v51;
    uint64_t v52 = v99;
    int v97 = (int *)(v51 | 7);
    uint64_t v53 = swift_allocObject();
    sub_255E292D8(v50, v53 + v52);
    *(void *)&long long v102 = v45;
    *((void *)&v102 + 1) = OpaqueTypeConformance2;
    uint64_t v81 = swift_getOpaqueTypeConformance2();
    unint64_t v54 = sub_255E29194();
    uint64_t v55 = v84;
    int v56 = v100;
    sub_255EEF690();
    swift_release();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v56, v55);
    uint64_t v57 = *((void *)v78 + 2);
    long long v102 = *v78;
    *(void *)&long long v103 = v57;
    sub_255EEF820();
    uint64_t v58 = v70;
    long long v59 = v79;
    sub_255E29938(v70, v50, (uint64_t (*)(void))v79);
    uint64_t v60 = swift_allocObject();
    sub_255E292D8(v50, v60 + v99);
    *(void *)&long long v102 = v55;
    *((void *)&v102 + 1) = v46;
    *(void *)&long long v103 = v81;
    *((void *)&v103 + 1) = v54;
    uint64_t v100 = (char *)MEMORY[0x263F1B270];
    uint64_t v61 = swift_getOpaqueTypeConformance2();
    uint64_t v62 = v85;
    int v63 = v86;
    int v64 = v101;
    sub_255EEF690();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v64, v62);
    sub_255E29938(v58, v50, (uint64_t (*)(void))v59);
    uint64_t v65 = swift_allocObject();
    sub_255E292D8(v50, v65 + v99);
    uint64_t v66 = v93;
    sub_255EEE820();
    *(void *)&long long v102 = v62;
    *((void *)&v102 + 1) = MEMORY[0x263F8D310];
    *(void *)&long long v103 = v61;
    *((void *)&v103 + 1) = MEMORY[0x263F8D338];
    swift_getOpaqueTypeConformance2();
    uint64_t v68 = v88;
    uint64_t v67 = v89;
    sub_255EEF6A0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v66, v95);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v63, v68);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v91 + 32))(v96, v67, v92);
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DA7C7C();
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255E281DC(uint64_t a1)
{
  sub_255E246C0(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EditWeightCellView();
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  id v6 = MedicalIDBiometricsViewModel.formattedWeightText(for:)((uint64_t)v4);
  uint64_t v8 = v7;
  sub_255E299A0((uint64_t)v4, (uint64_t (*)(void))sub_255E246C0);
  uint64_t v9 = (long long *)(a1 + *(int *)(v5 + 32));
  long long v10 = *v9;
  uint64_t v11 = *((void *)v9 + 2);
  long long v14 = v10;
  uint64_t v15 = v11;
  v13[1] = v6;
  v13[2] = v8;
  sub_255E291E0(0, &qword_269F36C18, MEMORY[0x263F1B5D0]);
  return sub_255EEF830();
}

uint64_t sub_255E2832C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EditWeightCellView();
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(v2 + 32));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  uint64_t v38 = *v3;
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  sub_255E291E0(0, &qword_269F36C18, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v36 = v2;
  uint64_t v7 = sub_255E29A1C(*(void *)(a1 + *(int *)(v2 + 28)), v41, v42, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = MEMORY[0x25A29B7F0](v7, v9, v11, v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v41 = v14;
  unint64_t v42 = v16;
  sub_255EEF830();
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  sub_255EEF820();
  sub_255E246C0(0);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v20 = HIBYTE(v16) & 0xF;
  uint64_t v21 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v20 = v14 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20) {
    goto LABEL_15;
  }
  uint64_t v41 = 0;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  *(&v34 - 2) = (uint64_t)&v41;
  if ((v16 & 0x1000000000000000) != 0 || !(v16 & 0x2000000000000000 | v14 & 0x1000000000000000))
  {
    uint64_t v35 = v23;
    swift_bridgeObjectRetain();
    sub_255EF02C0();
    swift_bridgeObjectRelease();
    if ((v37 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    MEMORY[0x270FA5388](v22);
    *(&v34 - 2) = (uint64_t)sub_255E29C14;
    *(&v34 - 1) = (uint64_t)(&v34 - 4);
    if ((v16 & 0x2000000000000000) == 0)
    {
      uint64_t v35 = v24;
      if ((v14 & 0x1000000000000000) != 0)
      {
        uint64_t v25 = (v16 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        uint64_t v25 = sub_255EF0310();
        uint64_t v21 = v33;
      }
      swift_bridgeObjectRetain();
      char v26 = sub_255E9EBB8(v25, v21, (void (*)(uint64_t *__return_ptr))sub_255E29BFC);
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_10;
      }
LABEL_15:
      sub_255E246F4();
      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v29);
      goto LABEL_16;
    }
    uint64_t v38 = v14;
    uint64_t v39 = v16 & 0xFFFFFFFFFFFFFFLL;
    if (v14 <= 0x20u && ((1 << v14) & 0x100003E01) != 0)
    {
      swift_bridgeObjectRetain();
LABEL_14:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    uint64_t v35 = v24;
    swift_bridgeObjectRetain();
    int v31 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
    if (!v31) {
      goto LABEL_14;
    }
    int v32 = *v31;
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_15;
    }
  }
LABEL_10:
  sub_255E44DE4();
  sub_255D7ED10(0, &qword_269F36390);
  sub_255EEDDC0();
  sub_255E246F4();
  uint64_t v28 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v27);
LABEL_16:
  MEMORY[0x270FA5388](v28);
  sub_255E29938((uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255E246C0);
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  sub_255EEF980();
  sub_255E299A0((uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255E246C0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E28804(uint64_t a1)
{
  unint64_t v1 = (long long *)(a1 + *(int *)(type metadata accessor for EditWeightCellView() + 32));
  long long v2 = *v1;
  uint64_t v3 = *((void *)v1 + 2);
  long long v27 = v2;
  uint64_t v28 = v3;
  sub_255E291E0(0, &qword_269F36C18, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v5 = v29;
  unint64_t v4 = v30;
  sub_255E246C0(0);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v9 = HIBYTE(v30) & 0xF;
  uint64_t v10 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v9 = v29 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v29 = 0;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  *(&v23 - 2) = (uint64_t)&v29;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v5 & 0x1000000000000000))
  {
    uint64_t v24 = v12;
    swift_bridgeObjectRetain();
    sub_255EF02C0();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v25 = &v23;
    MEMORY[0x270FA5388](v11);
    *(&v23 - 2) = (uint64_t)sub_255E2991C;
    *(&v23 - 1) = (uint64_t)(&v23 - 4);
    if ((v4 & 0x2000000000000000) == 0)
    {
      uint64_t v24 = v13;
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v14 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        uint64_t v14 = sub_255EF0310();
        uint64_t v10 = v22;
      }
      swift_bridgeObjectRetain();
      char v15 = sub_255E9EBB8(v14, v10, (void (*)(uint64_t *__return_ptr))sub_255E29A00);
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_10;
      }
LABEL_15:
      sub_255E246F4();
      uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v18);
      goto LABEL_16;
    }
    *(void *)&long long v27 = v5;
    *((void *)&v27 + 1) = v4 & 0xFFFFFFFFFFFFFFLL;
    if (v5 <= 0x20u && ((1 << v5) & 0x100003E01) != 0)
    {
      swift_bridgeObjectRetain();
LABEL_14:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    uint64_t v24 = v13;
    swift_bridgeObjectRetain();
    uint64_t v20 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
    if (!v20) {
      goto LABEL_14;
    }
    int v21 = *v20;
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_15;
    }
  }
LABEL_10:
  sub_255E44DE4();
  sub_255D7ED10(0, &qword_269F36390);
  sub_255EEDDC0();
  sub_255E246F4();
  uint64_t v17 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v16);
LABEL_16:
  MEMORY[0x270FA5388](v17);
  sub_255E29938((uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255E246C0);
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  sub_255EEF980();
  sub_255E299A0((uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255E246C0);
  return swift_bridgeObjectRelease();
}

void sub_255E28C60()
{
  if (!qword_269F36BE0)
  {
    sub_255E28CE0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36BE0);
    }
  }
}

unint64_t sub_255E28CE0()
{
  unint64_t result = qword_269F36BE8;
  if (!qword_269F36BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36BE8);
  }
  return result;
}

void sub_255E28D34()
{
  if (!qword_269F36BF0)
  {
    sub_255E28C60();
    sub_255E28CE0();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36BF0);
    }
  }
}

void sub_255E28DE4()
{
  if (!qword_269F36BF8)
  {
    sub_255E28F54();
    sub_255E29094();
    sub_255E28D34();
    sub_255EEE200();
    sub_255E28C60();
    sub_255E28CE0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255E29194();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36BF8);
    }
  }
}

void sub_255E28F54()
{
  if (!qword_269F36C00)
  {
    sub_255E29094();
    sub_255E28D34();
    sub_255EEE200();
    sub_255E28C60();
    sub_255E28CE0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255E29194();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36C00);
    }
  }
}

void sub_255E29094()
{
  if (!qword_269F36C08)
  {
    sub_255E28D34();
    sub_255EEE200();
    sub_255E28C60();
    sub_255E28CE0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255E29194();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36C08);
    }
  }
}

unint64_t sub_255E29194()
{
  unint64_t result = qword_269F36C10;
  if (!qword_269F36C10)
  {
    sub_255EEE200();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36C10);
  }
  return result;
}

void sub_255E291E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E29230(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E292D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EditWeightCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E2933C()
{
  return sub_255E298A8(sub_255E281DC);
}

uint64_t objectdestroyTm_13()
{
  uint64_t v1 = type metadata accessor for EditWeightCellView();
  uint64_t v30 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = v0 + ((v30 + 16) & ~v30);
  swift_bridgeObjectRelease();
  int v31 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v3 = v2 + v31[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = v3 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  int v32 = (int *)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = v3 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = v3 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v2 + v31[6];
  uint64_t v17 = sub_255EEE200();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = v2 + v31[7];
  v18(v19, v17);

  uint64_t v20 = v2 + v31[8];
  v18(v20, v17);
  uint64_t v21 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v22 = v2 + v32[5];
  swift_release();
  swift_release();
  sub_255E2465C(0, &qword_269F36BC0, (uint64_t (*)(uint64_t))sub_255E246C0, MEMORY[0x263F1B750]);
  uint64_t v24 = v22 + *(int *)(v23 + 32);
  sub_255E246F4();
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25)) {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = v2 + v32[9];
  sub_255D9870C(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v18(v28, v17);
  }
  else {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_255E29874()
{
  return sub_255E298A8(sub_255E2832C);
}

uint64_t sub_255E29890()
{
  return sub_255E298A8(sub_255E28804);
}

uint64_t sub_255E298A8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for EditWeightCellView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

unsigned char *sub_255E2991C@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_255E9EB4C(a1, a2);
}

uint64_t sub_255E29938(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E299A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_255E29A00@<X0>(unsigned char *a1@<X8>)
{
  return sub_255E9EC18(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_255E29A1C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v6 = a2;
    }
    uint64_t v7 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v7 = 11;
    }
    uint64_t v8 = v7 | (v6 << 16);
    uint64_t v9 = sub_255EEFDF0();
    if (v10) {
      a2 = v8;
    }
    else {
      a2 = v9;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

uint64_t sub_255E29AB8()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_255E29BFC@<X0>(unsigned char *a1@<X8>)
{
  return sub_255E29A00(a1);
}

unsigned char *sub_255E29C14@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_255E2991C(a1, a2);
}

uint64_t MedicalIDEmergencyContactProvider.__allocating_init(medicalIDStore:healthStore:contactStore:)(void *a1, void *a2, void *a3)
{
  swift_allocObject();
  uint64_t v6 = sub_255E2E260(a2, a3);

  return v6;
}

uint64_t MedicalIDEmergencyContactProvider.init(medicalIDStore:healthStore:contactStore:)(void *a1, void *a2, void *a3)
{
  uint64_t v6 = sub_255E2E260(a2, a3);

  return v6;
}

uint64_t sub_255E29CE0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  swift_retain_n();
  if (v5(v3, v4))
  {
    uint64_t v6 = v1 + 7;
    uint64_t v7 = v1[10];
    uint64_t v8 = v1[11];
    __swift_project_boxed_opaque_existential_1(v6, v7);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_255E2F42C;
    *(void *)(v9 + 24) = v2;
    char v10 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v8 + 8);
    swift_retain();
    v10(sub_255E2F46C, v9, v7, v8);
    swift_release();
  }
  else
  {
    sub_255E29E28();
  }
  swift_release();
  return swift_release_n();
}

uint64_t sub_255E29E28()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 32);
    swift_retain();
    uint64_t v2 = swift_release();
    MEMORY[0x270FA5388](v2);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
    sub_255E2F474((void *)(v1 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
    return swift_release();
  }
  return result;
}

uint64_t MedicalIDEmergencyContactProvider.medicalIDEmergencyContacts(for:)(void *a1)
{
  return swift_bridgeObjectRetain();
}

void sub_255E29F30(void *a1)
{
  id v3 = objc_msgSend(a1, sel_emergencyContacts);
  if (v3)
  {
    uint64_t v4 = v3;
    sub_255D7ED10(0, &qword_269F36C88);
    unint64_t v5 = sub_255EEFEA0();

    swift_retain();
    uint64_t v6 = sub_255E2E0EC(v5);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v7 = sub_255E2A46C(1, v6);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v1 + 40) = v7;
  }
  else
  {
    swift_beginAccess();
    *(void *)(v1 + 40) = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v1 + 56) & 1) == 0)
  {
    if (objc_msgSend(a1, sel_isEmpty))
    {
      id v8 = objc_msgSend(*(id *)(v1 + 48), sel_profileIdentifier);
      id v9 = objc_msgSend(v8, sel_type);

      if (v9 == (id)3)
      {
        sub_255E2A75C((uint64_t)v28);
        sub_255E2E4D4((uint64_t)v28, (uint64_t)v29);
        sub_255E2E4D4((uint64_t)v29, (uint64_t)v30);
        if (sub_255E2E55C((uint64_t)v30) != 1)
        {
          char v10 = (void *)(v1 + 40);
          swift_beginAccess();
          unint64_t v11 = *(void **)(v1 + 40);
          sub_255E2E4D4((uint64_t)v29, (uint64_t)v27);
          sub_255DCB308((uint64_t)v27);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v1 + 40) = v11;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v11 = sub_255DFA74C(0, v11[2] + 1, 1, v11);
            *char v10 = v11;
          }
          unint64_t v13 = v11[2];
          unint64_t v14 = v11[3];
          unint64_t v15 = v13 + 1;
          if (v13 >= v14 >> 1)
          {
            unint64_t v26 = v13 + 1;
            uint64_t v23 = v11;
            unint64_t v24 = v11[2];
            uint64_t v25 = sub_255DFA74C((void *)(v14 > 1), v13 + 1, 1, v23);
            unint64_t v13 = v24;
            unint64_t v15 = v26;
            unint64_t v11 = v25;
            *char v10 = v25;
          }
          uint64_t v11[2] = v15;
          uint64_t v16 = &v11[16 * v13];
          long long v17 = v30[0];
          long long v18 = v30[1];
          long long v19 = v30[3];
          v16[4] = v30[2];
          v16[5] = v19;
          v16[2] = v17;
          v16[3] = v18;
          long long v20 = v30[4];
          long long v21 = v30[5];
          long long v22 = v30[7];
          v16[8] = v30[6];
          v16[9] = v22;
          v16[6] = v20;
          v16[7] = v21;
          swift_endAccess();
          sub_255E2E574((uint64_t)v29);
          *(unsigned char *)(v1 + 56) = 1;
        }
      }
    }
  }
}

double sub_255E2A1A8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (objc_msgSend(self, sel_authorizationStatusForEntityType_, 0) == (id)3
    && (id v4 = sub_255E2AF04(a1)) != 0)
  {
    unint64_t v5 = v4;
    sub_255E2EDB0(a1, v4);
    id v7 = v6;
    if (v6)
    {
      sub_255EEFD90();
      id v8 = v5;
      id v9 = (void *)sub_255EEFD50();
      swift_bridgeObjectRelease();
      char v10 = (void *)sub_255EEFD50();
      swift_bridgeObjectRelease();
      id v7 = objc_msgSend(self, sel_contactPropertyWithContact_propertyKey_identifier_, v8, v9, v10);
    }
    id v20 = objc_msgSend(self, sel_emergencyContactWithContact_property_, v5, v7);
    unint64_t v11 = (void *)sub_255EB9A1C();
    id v12 = objc_msgSend(v20, sel_name);
    objc_msgSend(v11, sel_setName_, v12);

    id v13 = objc_msgSend(v20, sel_nameContactIdentifier);
    objc_msgSend(v11, sel_setNameContactIdentifier_, v13);

    id v14 = objc_msgSend(v20, sel_phoneNumberPropertyID);
    objc_msgSend(v11, sel_setPhoneNumberPropertyID_, v14);

    id v15 = objc_msgSend(v20, sel_phoneNumberLabel);
    objc_msgSend(v11, sel_setPhoneNumberLabel_, v15);

    id v16 = objc_msgSend(v20, sel_phoneNumber);
    objc_msgSend(v11, sel_setPhoneNumber_, v16);

    id v17 = v5;
    MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v11, v5, a2);
  }
  else
  {
    id v19 = a1;
    return MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v19, 0, a2);
  }
  return result;
}

uint64_t sub_255E2A46C(char a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    uint64_t v64 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_255DFAB3C(0, 0, 0);
    uint64_t v4 = v64;
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      for (uint64_t i = 32; ; i += 128)
      {
        long long v8 = *(_OWORD *)(a2 + i + 80);
        long long v51 = *(_OWORD *)(a2 + i + 64);
        long long v52 = v8;
        long long v9 = *(_OWORD *)(a2 + i + 112);
        long long v53 = *(_OWORD *)(a2 + i + 96);
        long long v54 = v9;
        long long v10 = *(_OWORD *)(a2 + i + 16);
        long long v47 = *(_OWORD *)(a2 + i);
        long long v48 = v10;
        long long v11 = *(_OWORD *)(a2 + i + 48);
        long long v49 = *(_OWORD *)(a2 + i + 32);
        long long v50 = v11;
        sub_255DCB308((uint64_t)&v47);
        uint64_t v64 = v4;
        unint64_t v13 = *(void *)(v4 + 16);
        unint64_t v12 = *(void *)(v4 + 24);
        if (v13 >= v12 >> 1)
        {
          sub_255DFAB3C(v12 > 1, v13 + 1, 1);
          uint64_t v4 = v64;
        }
        long long v60 = v51;
        long long v61 = v52;
        long long v62 = v53;
        long long v63 = v54;
        long long v58 = v49;
        long long v59 = v50;
        long long v14 = v47;
        long long v56 = v47;
        long long v57 = v48;
        *(void *)(v4 + 16) = v13 + 1;
        uint64_t v15 = v4 + 136 * v13;
        long long v17 = v62;
        long long v16 = v63;
        long long v18 = v61;
        *(_OWORD *)(v15 + 96) = v60;
        *(_OWORD *)(v15 + 112) = v18;
        *(_OWORD *)(v15 + 128) = v17;
        *(_OWORD *)(v15 + 144) = v16;
        long long v19 = v59;
        long long v20 = v57;
        *(_OWORD *)(v15 + 64) = v58;
        *(_OWORD *)(v15 + 80) = v19;
        *(_OWORD *)(v15 + 32) = v14;
        *(_OWORD *)(v15 + 48) = v20;
        *(void *)(v15 + 160) = v6;
        if (v5 - 1 == v6) {
          break;
        }
        ++v6;
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_255E2E6A4(v4);
    swift_release();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_255E73D8C(v25);
    swift_bridgeObjectRelease();
    *(void *)&long long v47 = v26;
    sub_255E2B7DC((void **)&v47);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    int64_t v28 = *(void *)(v47 + 16);
    if (v28)
    {
      *(void *)&long long v56 = v3;
      sub_255DFAB1C(0, v28, 0);
      uint64_t v29 = v56;
      int64_t v30 = v28 - 1;
      for (uint64_t j = 32; ; j += 136)
      {
        long long v47 = *(_OWORD *)(v27 + j);
        long long v32 = *(_OWORD *)(v27 + j + 16);
        long long v33 = *(_OWORD *)(v27 + j + 32);
        long long v34 = *(_OWORD *)(v27 + j + 64);
        long long v50 = *(_OWORD *)(v27 + j + 48);
        long long v51 = v34;
        long long v48 = v32;
        long long v49 = v33;
        long long v35 = *(_OWORD *)(v27 + j + 80);
        long long v36 = *(_OWORD *)(v27 + j + 96);
        long long v37 = *(_OWORD *)(v27 + j + 112);
        uint64_t v55 = *(void *)(v27 + j + 128);
        long long v53 = v36;
        long long v54 = v37;
        long long v52 = v35;
        sub_255DCB308((uint64_t)&v47);
        *(void *)&long long v56 = v29;
        unint64_t v39 = *(void *)(v29 + 16);
        unint64_t v38 = *(void *)(v29 + 24);
        if (v39 >= v38 >> 1)
        {
          sub_255DFAB1C(v38 > 1, v39 + 1, 1);
          uint64_t v29 = v56;
        }
        *(void *)(v29 + 16) = v39 + 1;
        uint64_t v40 = (_OWORD *)(v29 + (v39 << 7));
        long long v41 = v47;
        long long v42 = v48;
        long long v43 = v50;
        v40[4] = v49;
        v40[5] = v43;
        v40[2] = v41;
        v40[3] = v42;
        long long v44 = v51;
        long long v45 = v52;
        long long v46 = v54;
        v40[8] = v53;
        v40[9] = v46;
        v40[6] = v44;
        v40[7] = v45;
        if (!v30) {
          break;
        }
        --v30;
      }
      swift_release();
      return v29;
    }
    else
    {
      swift_release();
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = sub_255E2E7BC(v21);
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_255E73C98(v22);
    swift_bridgeObjectRelease();
    return v23;
  }
}

uint64_t sub_255E2A75C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (objc_msgSend(self, sel_authorizationStatusForEntityType_, 0) != (id)3)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_255EEE3D0();
    __swift_project_value_buffer(v16, (uint64_t)qword_269F3FE80);
    long long v17 = sub_255EEE3B0();
    os_log_type_t v18 = sub_255EF00C0();
    if (os_log_type_enabled(v17, v18))
    {
      long long v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(void *)&v44[0] = v20;
      *(_DWORD *)long long v19 = 136315138;
      uint64_t v21 = sub_255EF05E0();
      sub_255DB0024(v21, v22, (uint64_t *)v44);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v17, v18, "%s: Not authorized to fetch me contact", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v20, -1, -1);
      MEMORY[0x25A29C8A0](v19, -1, -1);
    }

    goto LABEL_12;
  }
  uint64_t v3 = *(void **)(v1 + 24);
  sub_255E2F1D4();
  uint64_t v4 = (void *)sub_255EEFE90();
  *(void *)&v44[0] = 0;
  id v5 = objc_msgSend(v3, sel__ios_meContactWithKeysToFetch_error_, v4, v44);

  uint64_t v6 = *(void **)&v44[0];
  if (!v5)
  {
    id v24 = *(id *)&v44[0];
    uint64_t v25 = (void *)sub_255EEDFC0();

    swift_willThrow();
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_255EEE3D0();
    __swift_project_value_buffer(v26, (uint64_t)qword_269F3FE80);
    id v27 = v25;
    id v28 = v25;
    uint64_t v29 = sub_255EEE3B0();
    os_log_type_t v30 = sub_255EF00C0();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(void *)&v44[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v33 = sub_255EF05E0();
      sub_255DB0024(v33, v34, (uint64_t *)v44);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v35 = sub_255EF04E0();
      sub_255DB0024(v35, v36, (uint64_t *)v44);
      sub_255EF0200();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_255D76000, v29, v30, "%s: unable to fetch me contact with error: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v32, -1, -1);
      MEMORY[0x25A29C8A0](v31, -1, -1);
    }
    else
    {
    }
    goto LABEL_12;
  }
  id v7 = self;
  id v8 = v6;
  id v9 = objc_msgSend(v7, sel_emergencyContactUsingSimCardNumberWithContact_property_, v5, 0);
  id v10 = objc_msgSend(v9, sel_phoneNumber);
  if (!v10)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_255EEE3D0();
    __swift_project_value_buffer(v37, (uint64_t)qword_269F3FE80);
    unint64_t v38 = sub_255EEE3B0();
    os_log_type_t v39 = sub_255EF00C0();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(void *)&v44[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v42 = sub_255EF05E0();
      sub_255DB0024(v42, v43, (uint64_t *)v44);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v38, v39, "%s: Me contact did not have a phone number available to use", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v41, -1, -1);
      MEMORY[0x25A29C8A0](v40, -1, -1);
    }
    else
    {
    }
LABEL_12:
    sub_255E2F22C(v44);
    return sub_255E2E4D4((uint64_t)v44, a1);
  }

  uint64_t v11 = sub_255EEFD40();
  MEMORY[0x270FA5388](v11 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  unint64_t v12 = (void *)qword_269F352A8;
  uint64_t v13 = sub_255EEE200();
  MEMORY[0x270FA5388](v13 - 8);
  id v14 = v12;
  sub_255EEE1F0();
  sub_255EEFDA0();
  uint64_t v15 = (void *)sub_255EEFD50();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setRelationship_, v15);

  MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v9, v5, v44);
  nullsub_1(v44);
  return sub_255E2E4D4((uint64_t)v44, a1);
}

uint64_t sub_255E2AEE4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

id sub_255E2AF04(void *a1)
{
  id v3 = objc_msgSend(a1, sel_nameContactIdentifier);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = *(void **)(v1 + 24);
    sub_255E2F1D4();
    uint64_t v6 = (void *)sub_255EEFE90();
    id v7 = objc_msgSend(v5, sel_contactForIdentifier_keysToFetch_, v4, v6);

    if (v7)
    {
      id v8 = objc_msgSend(v7, sel_phoneNumbers);
      sub_255D7ED10(0, &qword_269F36CE0);
      unint64_t v9 = sub_255EEFEA0();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_255EF03F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v10) {
        return v7;
      }
    }
  }
  id v7 = objc_msgSend(a1, sel_phoneNumber);
  if (v7)
  {
    uint64_t v11 = sub_255EEFD90();
    uint64_t v13 = v12;

    id v7 = (id)sub_255E2B120(v11, v13);
    swift_bridgeObjectRelease();
    if (v7)
    {
      id v14 = objc_msgSend(v7, sel_phoneNumbers);
      sub_255D7ED10(0, &qword_269F36CE0);
      unint64_t v15 = sub_255EEFEA0();

      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_255EF03F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (!v16)
      {

        return 0;
      }
    }
  }
  return v7;
}

uint64_t sub_255E2B120(uint64_t a1, uint64_t a2)
{
  v17[0] = a1;
  v17[1] = a2;
  uint64_t v2 = sub_255EEDE50();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = sub_255EEDE30();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEDE40();
  id v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v6, v2);
  sub_255DAD520();
  uint64_t v8 = MEMORY[0x263F8D310];
  uint64_t v9 = sub_255EF0220();
  v7(v6, v2);
  v17[0] = v9;
  sub_255E2F3A8(0, &qword_269F36CD0, v8, MEMORY[0x263F8D488]);
  sub_255E2F158();
  sub_255EEFC90();
  swift_bridgeObjectRelease();
  uint64_t v10 = self;
  id v11 = objc_allocWithZone(MEMORY[0x263EFEB28]);
  uint64_t v12 = (void *)sub_255EEFD50();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_initWithStringValue_, v12);

  id v14 = objc_msgSend(v10, sel_predicateForContactsMatchingPhoneNumber_, v13);
  uint64_t v15 = sub_255E2B348((uint64_t)v14);

  return v15;
}

uint64_t sub_255E2B348(uint64_t a1)
{
  v25[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(v1 + 24);
  sub_255E2F1D4();
  uint64_t v4 = (void *)sub_255EEFE90();
  v25[0] = 0;
  id v5 = objc_msgSend(v3, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, a1, v4, v25);

  id v6 = v25[0];
  if (v5)
  {
    sub_255D7ED10(0, &qword_269F37DB0);
    unint64_t v7 = sub_255EEFEA0();
    id v8 = v6;

    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_255EF03F0();
      swift_bridgeObjectRelease();
      if (!v9) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v9)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    if ((v7 & 0xC000000000000001) != 0)
    {
      id v10 = (id)MEMORY[0x25A29BD10](0, v7);
      goto LABEL_7;
    }
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v10 = *(id *)(v7 + 32);
LABEL_7:
      uint64_t v9 = (uint64_t)v10;
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_19;
  }
  id v11 = v25[0];
  unint64_t v7 = sub_255EEDFC0();

  swift_willThrow();
  if (qword_269F34C50 != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v12 = sub_255EEE3D0();
  __swift_project_value_buffer(v12, (uint64_t)qword_269F3FE80);
  id v13 = (id *)(id)v7;
  id v14 = (id *)(id)v7;
  uint64_t v15 = sub_255EEE3B0();
  os_log_type_t v16 = sub_255EF00C0();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    os_log_type_t v18 = (void *)swift_slowAlloc();
    v25[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v19 = sub_255EF05E0();
    sub_255DB0024(v19, v20, (uint64_t *)v25);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = (id *)(id)v7;
    sub_255D89E7C();
    uint64_t v22 = sub_255EEFDC0();
    sub_255DB0024(v22, v23, (uint64_t *)v25);
    sub_255EF0200();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_255D76000, v15, v16, "%s Contact Fetch Error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v18, -1, -1);
    MEMORY[0x25A29C8A0](v17, -1, -1);
  }
  else
  {
  }
  return 0;
}

uint64_t MedicalIDEmergencyContactProvider.deinit()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MedicalIDEmergencyContactProvider.__deallocating_deinit()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_255E2B794(void *a1)
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E2B7DC(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_255E2E0C4(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  uint64_t result = sub_255E2B848(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_255E2B848(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_255EF0470();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *v2;
      uint64_t v83 = *v2 + 136;
      uint64_t v84 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v86 = v84;
        uint64_t v87 = v83;
        do
        {
          if (*(void *)(v87 + 128) >= *(void *)(v87 - 8)) {
            break;
          }
          if (!v82) {
            goto LABEL_143;
          }
          uint64_t v88 = v87 - 136;
          long long v128 = *(_OWORD *)(v87 + 96);
          long long v131 = *(_OWORD *)(v87 + 112);
          uint64_t v134 = *(void *)(v87 + 128);
          long long v116 = *(_OWORD *)(v87 + 32);
          long long v119 = *(_OWORD *)(v87 + 48);
          long long v122 = *(_OWORD *)(v87 + 64);
          long long v125 = *(_OWORD *)(v87 + 80);
          long long v110 = *(_OWORD *)v87;
          long long v113 = *(_OWORD *)(v87 + 16);
          long long v89 = *(_OWORD *)(v87 - 56);
          *(_OWORD *)(v87 + 64) = *(_OWORD *)(v87 - 72);
          *(_OWORD *)(v87 + 80) = v89;
          long long v90 = *(_OWORD *)(v87 - 24);
          *(_OWORD *)(v87 + 96) = *(_OWORD *)(v87 - 40);
          *(_OWORD *)(v87 + 112) = v90;
          *(void *)(v87 + 128) = *(void *)(v87 - 8);
          long long v91 = *(_OWORD *)(v87 - 88);
          *(_OWORD *)(v87 + 32) = *(_OWORD *)(v87 - 104);
          *(_OWORD *)(v87 + 48) = v91;
          long long v92 = *(_OWORD *)(v87 - 120);
          *(_OWORD *)uint64_t v87 = *(_OWORD *)(v87 - 136);
          *(_OWORD *)(v87 + 16) = v92;
          *(_OWORD *)(v88 + 64) = v122;
          *(_OWORD *)(v88 + 80) = v125;
          *(_OWORD *)(v88 + 96) = v128;
          *(_OWORD *)(v88 + 112) = v131;
          *(void *)(v88 + 128) = v134;
          *(_OWORD *)(v88 + 32) = v116;
          *(_OWORD *)(v88 + 48) = v119;
          v87 -= 136;
          *(_OWORD *)uint64_t v88 = v110;
          *(_OWORD *)(v88 + 16) = v113;
        }
        while (!__CFADD__(v86++, 1));
        v83 += 136;
        --v84;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_148;
  }
  uint64_t v104 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    long long v106 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v94 = (char *)MEMORY[0x263F8EE78];
LABEL_105:
      uint64_t v103 = v8;
      if (v11 >= 2)
      {
        uint64_t v95 = *v2;
        do
        {
          unint64_t v96 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_134;
          }
          if (!v95) {
            goto LABEL_147;
          }
          int v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v11 + 24];
          sub_255E2C078((char *)(v95 + 136 * v98), (char *)(v95 + 136 * *(void *)&v94[16 * v11 + 16]), v95 + 136 * v99, v106);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v97 = sub_255E2C5E0((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_136;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v11 > v101) {
            goto LABEL_137;
          }
          memmove(&v97[16 * v11 + 16], &v97[16 * v11 + 32], 16 * (v101 - v11));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v11 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_255E2E978(0, (unint64_t *)&qword_269F36C90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
    uint64_t v7 = sub_255EEFEE0();
    *(void *)(v7 + 16) = v6;
    uint64_t v103 = v7;
    long long v106 = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  long long v102 = v2;
  uint64_t v10 = *v2;
  long long v107 = (char *)MEMORY[0x263F8EE78];
  uint64_t v105 = v3;
  while (1)
  {
    uint64_t v12 = v9++;
    if (v9 < v3)
    {
      uint64_t v13 = *(void *)(v10 + 136 * v9 + 128);
      uint64_t v14 = *(void *)(v10 + 136 * v12 + 128);
      uint64_t v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v15 = (uint64_t *)(v10 + 400 + 136 * v12);
        uint64_t v16 = v13;
        while (1)
        {
          uint64_t v18 = *v15;
          v15 += 17;
          uint64_t v17 = v18;
          if (v13 < v14 == v18 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12) {
          goto LABEL_140;
        }
        if (v12 < v9)
        {
          uint64_t v19 = (_OWORD *)(v10 - 136 + 136 * v9);
          uint64_t v20 = v9;
          uint64_t v21 = v12;
          uint64_t v22 = (_OWORD *)(v10 + 136 * v12);
          do
          {
            if (v21 != --v20)
            {
              if (!v10) {
                goto LABEL_146;
              }
              long long v126 = v22[6];
              long long v129 = v22[7];
              uint64_t v132 = *((void *)v22 + 16);
              long long v114 = v22[2];
              long long v117 = v22[3];
              long long v120 = v22[4];
              long long v123 = v22[5];
              long long v108 = *v22;
              long long v111 = v22[1];
              memmove(v22, v19, 0x88uLL);
              v19[6] = v126;
              v19[7] = v129;
              *((void *)v19 + 16) = v132;
              v19[2] = v114;
              v19[3] = v117;
              v19[4] = v120;
              v19[5] = v123;
              *uint64_t v19 = v108;
              v19[1] = v111;
            }
            ++v21;
            uint64_t v19 = (_OWORD *)((char *)v19 - 136);
            uint64_t v22 = (_OWORD *)((char *)v22 + 136);
          }
          while (v21 < v20);
          uint64_t v3 = v105;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_138;
    }
    if (v9 - v12 >= v104) {
      goto LABEL_39;
    }
    uint64_t v23 = v12 + v104;
    if (__OFADD__(v12, v104)) {
      goto LABEL_141;
    }
    if (v23 >= v3) {
      uint64_t v23 = v3;
    }
    if (v23 < v12) {
      break;
    }
    if (v9 != v23)
    {
      uint64_t v74 = (long long *)(v10 + 136 * v9);
      id v24 = v107;
      do
      {
        uint64_t v75 = v12;
        uint64_t v76 = v74;
        do
        {
          if (*((void *)v76 + 16) >= *((void *)v76 - 1)) {
            break;
          }
          if (!v10) {
            goto LABEL_144;
          }
          uint64_t v77 = (uint64_t)v76 - 136;
          long long v127 = v76[6];
          long long v130 = v76[7];
          uint64_t v133 = *((void *)v76 + 16);
          long long v115 = v76[2];
          long long v118 = v76[3];
          long long v121 = v76[4];
          long long v124 = v76[5];
          long long v109 = *v76;
          long long v112 = v76[1];
          long long v78 = *(long long *)((char *)v76 - 56);
          v76[4] = *(long long *)((char *)v76 - 72);
          v76[5] = v78;
          long long v79 = *(long long *)((char *)v76 - 24);
          v76[6] = *(long long *)((char *)v76 - 40);
          v76[7] = v79;
          *((void *)v76 + 16) = *((void *)v76 - 1);
          long long v80 = *(long long *)((char *)v76 - 88);
          v76[2] = *(long long *)((char *)v76 - 104);
          v76[3] = v80;
          long long v81 = *(long long *)((char *)v76 - 120);
          *uint64_t v76 = *(long long *)((char *)v76 - 136);
          v76[1] = v81;
          *(_OWORD *)(v77 + 64) = v121;
          *(_OWORD *)(v77 + 80) = v124;
          *(_OWORD *)(v77 + 96) = v127;
          *(_OWORD *)(v77 + 112) = v130;
          *(void *)(v77 + 128) = v133;
          *(_OWORD *)(v77 + 32) = v115;
          *(_OWORD *)(v77 + 48) = v118;
          ++v75;
          uint64_t v76 = (long long *)((char *)v76 - 136);
          *(_OWORD *)uint64_t v77 = v109;
          *(_OWORD *)(v77 + 16) = v112;
        }
        while (v9 != v75);
        ++v9;
        uint64_t v74 = (long long *)((char *)v74 + 136);
      }
      while (v9 != v23);
      uint64_t v9 = v23;
      if (v23 < v12) {
        goto LABEL_133;
      }
      goto LABEL_40;
    }
LABEL_39:
    id v24 = v107;
    if (v9 < v12) {
      goto LABEL_133;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v24 = sub_255E2C330(0, *((void *)v24 + 2) + 1, 1, v24);
    }
    unint64_t v26 = *((void *)v24 + 2);
    unint64_t v25 = *((void *)v24 + 3);
    unint64_t v11 = v26 + 1;
    if (v26 >= v25 >> 1) {
      id v24 = sub_255E2C330((char *)(v25 > 1), v26 + 1, 1, v24);
    }
    *((void *)v24 + 2) = v11;
    id v27 = v24 + 32;
    id v28 = &v24[16 * v26 + 32];
    *(void *)id v28 = v12;
    *((void *)v28 + 1) = v9;
    long long v107 = v24;
    if (v26)
    {
      while (1)
      {
        unint64_t v29 = v11 - 1;
        if (v11 >= 4)
        {
          unint64_t v34 = &v27[16 * v11];
          uint64_t v35 = *((void *)v34 - 8);
          uint64_t v36 = *((void *)v34 - 7);
          BOOL v40 = __OFSUB__(v36, v35);
          uint64_t v37 = v36 - v35;
          if (v40) {
            goto LABEL_122;
          }
          uint64_t v39 = *((void *)v34 - 6);
          uint64_t v38 = *((void *)v34 - 5);
          BOOL v40 = __OFSUB__(v38, v39);
          uint64_t v32 = v38 - v39;
          char v33 = v40;
          if (v40) {
            goto LABEL_123;
          }
          unint64_t v41 = v11 - 2;
          uint64_t v42 = &v27[16 * v11 - 32];
          uint64_t v44 = *(void *)v42;
          uint64_t v43 = *((void *)v42 + 1);
          BOOL v40 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          if (v40) {
            goto LABEL_125;
          }
          BOOL v40 = __OFADD__(v32, v45);
          uint64_t v46 = v32 + v45;
          if (v40) {
            goto LABEL_128;
          }
          if (v46 >= v37)
          {
            uint64_t v64 = &v27[16 * v29];
            uint64_t v66 = *(void *)v64;
            uint64_t v65 = *((void *)v64 + 1);
            BOOL v40 = __OFSUB__(v65, v66);
            uint64_t v67 = v65 - v66;
            if (v40) {
              goto LABEL_132;
            }
            BOOL v57 = v32 < v67;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v58 = *((void *)v24 + 4);
            uint64_t v59 = *((void *)v24 + 5);
            BOOL v40 = __OFSUB__(v59, v58);
            uint64_t v51 = v59 - v58;
            char v52 = v40;
            goto LABEL_70;
          }
          uint64_t v31 = *((void *)v24 + 4);
          uint64_t v30 = *((void *)v24 + 5);
          BOOL v40 = __OFSUB__(v30, v31);
          uint64_t v32 = v30 - v31;
          char v33 = v40;
        }
        if (v33) {
          goto LABEL_124;
        }
        unint64_t v41 = v11 - 2;
        long long v47 = &v27[16 * v11 - 32];
        uint64_t v49 = *(void *)v47;
        uint64_t v48 = *((void *)v47 + 1);
        BOOL v50 = __OFSUB__(v48, v49);
        uint64_t v51 = v48 - v49;
        char v52 = v50;
        if (v50) {
          goto LABEL_127;
        }
        long long v53 = &v27[16 * v29];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v40 = __OFSUB__(v54, v55);
        uint64_t v56 = v54 - v55;
        if (v40) {
          goto LABEL_130;
        }
        if (__OFADD__(v51, v56)) {
          goto LABEL_131;
        }
        if (v51 + v56 >= v32)
        {
          BOOL v57 = v32 < v56;
LABEL_76:
          if (v57) {
            unint64_t v29 = v41;
          }
          goto LABEL_78;
        }
LABEL_70:
        if (v52) {
          goto LABEL_126;
        }
        long long v60 = &v27[16 * v29];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v40 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v40) {
          goto LABEL_129;
        }
        if (v63 < v51) {
          goto LABEL_15;
        }
LABEL_78:
        unint64_t v68 = v29 - 1;
        if (v29 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10) {
          goto LABEL_145;
        }
        uint64_t v69 = &v27[16 * v68];
        uint64_t v70 = *(void *)v69;
        uint64_t v71 = &v27[16 * v29];
        uint64_t v72 = *((void *)v71 + 1);
        sub_255E2C078((char *)(v10 + 136 * *(void *)v69), (char *)(v10 + 136 * *(void *)v71), v10 + 136 * v72, v106);
        if (v1) {
          goto LABEL_95;
        }
        if (v72 < v70) {
          goto LABEL_119;
        }
        if (v29 > *((void *)v107 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v69 = v70;
        *(void *)&v27[16 * v68 + 8] = v72;
        unint64_t v73 = *((void *)v107 + 2);
        if (v29 >= v73) {
          goto LABEL_121;
        }
        id v24 = v107;
        unint64_t v11 = v73 - 1;
        memmove(&v27[16 * v29], v71 + 16, 16 * (v73 - 1 - v29));
        *((void *)v107 + 2) = v73 - 1;
        if (v73 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    uint64_t v3 = v105;
    if (v9 >= v105)
    {
      uint64_t v8 = v103;
      uint64_t v94 = v107;
      uint64_t v2 = v102;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  uint64_t result = sub_255EF03C0();
  __break(1u);
  return result;
}

uint64_t sub_255E2C078(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 136;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 136;
  uint64_t v23 = __dst;
  uint64_t v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -135)
    {
      if (a4 != __src || &__src[136 * v11] <= a4) {
        memmove(a4, __src, 136 * v11);
      }
      uint64_t v16 = &v4[136 * v11];
      uint64_t v21 = v16;
      uint64_t v23 = v6;
      if (v7 < v6 && v10 >= 136)
      {
        uint64_t v17 = (char *)(a3 - 136);
        do
        {
          uint64_t v18 = v17 + 136;
          if (*((void *)v16 - 1) >= *((void *)v6 - 1))
          {
            uint64_t v21 = v16 - 136;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              memmove(v17, v16 - 136, 0x88uLL);
            }
            uint64_t v19 = v6;
            v16 -= 136;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v19 = v6 - 136;
            if (v18 != v6 || v17 >= v6) {
              memmove(v17, v6 - 136, 0x88uLL);
            }
            uint64_t v23 = v6 - 136;
            if (v19 <= v7) {
              break;
            }
          }
          v17 -= 136;
          uint64_t v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_255E2C458((void **)&v23, &v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -135)
  {
    if (a4 != __dst || &__dst[136 * v9] <= a4) {
      memmove(a4, __dst, 136 * v9);
    }
    uint64_t v12 = &v4[136 * v9];
    uint64_t v21 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 136)
    {
      uint64_t v13 = v4;
      while (1)
      {
        if (*((void *)v6 + 16) >= *((void *)v13 + 16))
        {
          uint64_t v4 = v13 + 136;
          uint64_t v15 = v13;
          uint64_t v14 = v6;
          if (v7 == v13)
          {
            v13 += 136;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 136;
          }
        }
        else
        {
          uint64_t v14 = v6 + 136;
          uint64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        memmove(v7, v15, 0x88uLL);
LABEL_18:
        v7 += 136;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v22 = v4;
        uint64_t v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = sub_255EF0440();
  __break(1u);
  return result;
}

char *sub_255E2C330(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_255E2F2DC(0, (unint64_t *)&unk_269F36CA0, (uint64_t (*)(uint64_t))sub_255DD1CAC, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_255E2C458(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -136)
  {
    uint64_t result = (char *)sub_255EF0440();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 136;
    if (result != v3 || result >= &v3[136 * v6])
    {
      return (char *)memmove(result, v3, 136 * v6);
    }
  }
  return result;
}

char *sub_255E2C524(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_255EF0440();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_255E2C5E0(uint64_t a1)
{
  return sub_255E2C330(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_255E2C5F4(_OWORD *a1, long long *a2)
{
  long long v5 = a2[5];
  long long v6 = a2[3];
  long long v45 = a2[4];
  long long v46 = v5;
  long long v7 = a2[5];
  long long v8 = a2[7];
  long long v47 = a2[6];
  long long v48 = v8;
  long long v9 = a2[1];
  long long v41 = *a2;
  long long v42 = v9;
  long long v10 = a2[3];
  long long v12 = *a2;
  long long v11 = a2[1];
  long long v43 = a2[2];
  long long v44 = v10;
  uint64_t v13 = *v2;
  long long v53 = v45;
  long long v54 = v7;
  long long v14 = a2[7];
  long long v55 = v47;
  long long v56 = v14;
  long long v49 = v12;
  long long v50 = v11;
  long long v51 = v43;
  long long v52 = v6;
  sub_255EF0540();
  swift_bridgeObjectRetain();
  MedicalIDEmergencyContact.hash(into:)();
  uint64_t v15 = sub_255EF0580();
  uint64_t v16 = -1 << *(unsigned char *)(v13 + 32);
  unint64_t v17 = v15 & ~v16;
  if ((*(void *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
  {
    uint64_t v18 = (long long *)(*(void *)(v13 + 48) + (v17 << 7));
    long long v53 = v18[4];
    long long v54 = v18[5];
    long long v55 = v18[6];
    long long v56 = v18[7];
    long long v49 = *v18;
    long long v50 = v18[1];
    long long v51 = v18[2];
    long long v52 = v18[3];
    if (_s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v49, &v41))
    {
LABEL_6:
      swift_bridgeObjectRelease();
      sub_255DCB3AC((uint64_t)a2);
      uint64_t v21 = (long long *)(*(void *)(*v2 + 48) + (v17 << 7));
      long long v22 = *v21;
      long long v23 = v21[1];
      long long v24 = v21[2];
      long long v52 = v21[3];
      long long v25 = v21[4];
      long long v26 = v21[5];
      long long v27 = v21[7];
      long long v55 = v21[6];
      long long v56 = v27;
      long long v53 = v25;
      long long v54 = v26;
      long long v50 = v23;
      long long v51 = v24;
      long long v49 = v22;
      long long v28 = *v21;
      long long v29 = v21[1];
      long long v30 = v21[3];
      a1[2] = v21[2];
      a1[3] = v30;
      *a1 = v28;
      a1[1] = v29;
      long long v31 = v21[4];
      long long v32 = v21[5];
      long long v33 = v21[7];
      a1[6] = v21[6];
      a1[7] = v33;
      a1[4] = v31;
      a1[5] = v32;
      sub_255DCB308((uint64_t)&v49);
      return 0;
    }
    uint64_t v19 = ~v16;
    while (1)
    {
      unint64_t v17 = (v17 + 1) & v19;
      if (((*(void *)(v13 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        break;
      }
      uint64_t v20 = (long long *)(*(void *)(v13 + 48) + (v17 << 7));
      long long v53 = v20[4];
      long long v54 = v20[5];
      long long v55 = v20[6];
      long long v56 = v20[7];
      long long v49 = *v20;
      long long v50 = v20[1];
      long long v51 = v20[2];
      long long v52 = v20[3];
      if (_s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v49, &v41)) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  long long v53 = v45;
  long long v54 = v46;
  long long v55 = v47;
  long long v56 = v48;
  long long v49 = v41;
  long long v50 = v42;
  long long v51 = v43;
  long long v52 = v44;
  uint64_t v40 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  sub_255DCB308((uint64_t)&v49);
  sub_255E2D200((uint64_t)&v49, v17, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v40;
  swift_bridgeObjectRelease();
  long long v36 = v54;
  a1[4] = v53;
  a1[5] = v36;
  long long v37 = v56;
  a1[6] = v55;
  a1[7] = v37;
  long long v38 = v50;
  *a1 = v49;
  a1[1] = v38;
  long long v39 = v52;
  uint64_t result = 1;
  a1[2] = v51;
  a1[3] = v39;
  return result;
}

uint64_t sub_255E2C8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  sub_255EF0540();
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v60 = *(_OWORD *)(a2 + 96);
  long long v61 = v7;
  uint64_t v62 = *(void *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v56 = *(_OWORD *)(a2 + 32);
  long long v57 = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  long long v58 = *(_OWORD *)(a2 + 64);
  long long v59 = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v54 = *(_OWORD *)a2;
  long long v55 = v10;
  swift_bridgeObjectRetain();
  MedicalIDEmergencyContact.hash(into:)();
  uint64_t v11 = sub_255EF0580();
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    while (1)
    {
      uint64_t v15 = *(void *)(v6 + 48) + 136 * v13;
      long long v54 = *(_OWORD *)v15;
      long long v16 = *(_OWORD *)(v15 + 48);
      long long v17 = *(_OWORD *)(v15 + 64);
      long long v18 = *(_OWORD *)(v15 + 32);
      long long v55 = *(_OWORD *)(v15 + 16);
      long long v56 = v18;
      long long v57 = v16;
      long long v58 = v17;
      long long v19 = *(_OWORD *)(v15 + 80);
      long long v20 = *(_OWORD *)(v15 + 96);
      long long v21 = *(_OWORD *)(v15 + 112);
      uint64_t v62 = *(void *)(v15 + 128);
      long long v60 = v20;
      long long v61 = v21;
      long long v59 = v19;
      sub_255EF0540();
      long long v51 = v60;
      long long v52 = v61;
      uint64_t v53 = v62;
      long long v47 = v56;
      long long v48 = v57;
      long long v49 = v58;
      long long v50 = v59;
      long long v45 = v54;
      long long v46 = v55;
      sub_255DCB308((uint64_t)&v54);
      MedicalIDEmergencyContact.hash(into:)();
      uint64_t v22 = sub_255EF0580();
      sub_255EF0540();
      long long v23 = *(_OWORD *)(a2 + 112);
      long long v51 = *(_OWORD *)(a2 + 96);
      long long v52 = v23;
      uint64_t v53 = *(void *)(a2 + 128);
      long long v24 = *(_OWORD *)(a2 + 48);
      long long v47 = *(_OWORD *)(a2 + 32);
      long long v48 = v24;
      long long v25 = *(_OWORD *)(a2 + 80);
      long long v49 = *(_OWORD *)(a2 + 64);
      long long v50 = v25;
      long long v26 = *(_OWORD *)(a2 + 16);
      long long v45 = *(_OWORD *)a2;
      long long v46 = v26;
      MedicalIDEmergencyContact.hash(into:)();
      uint64_t v27 = sub_255EF0580();
      sub_255DCB3AC((uint64_t)&v54);
      if (v22 == v27) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_255DCB3AC(a2);
    uint64_t v34 = *(void *)(*v3 + 48) + 136 * v13;
    long long v36 = *(_OWORD *)(v34 + 16);
    long long v35 = *(_OWORD *)(v34 + 32);
    long long v37 = *(_OWORD *)(v34 + 64);
    long long v48 = *(_OWORD *)(v34 + 48);
    long long v49 = v37;
    long long v39 = *(_OWORD *)(v34 + 96);
    long long v38 = *(_OWORD *)(v34 + 112);
    long long v40 = *(_OWORD *)(v34 + 80);
    uint64_t v53 = *(void *)(v34 + 128);
    long long v51 = v39;
    long long v52 = v38;
    long long v50 = v40;
    long long v45 = *(_OWORD *)v34;
    long long v46 = v36;
    long long v47 = v35;
    long long v41 = *(_OWORD *)(v34 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v34 + 96);
    *(_OWORD *)(a1 + 112) = v41;
    *(void *)(a1 + 128) = *(void *)(v34 + 128);
    long long v42 = *(_OWORD *)(v34 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v34 + 32);
    *(_OWORD *)(a1 + 48) = v42;
    long long v43 = *(_OWORD *)(v34 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v34 + 64);
    *(_OWORD *)(a1 + 80) = v43;
    long long v44 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v34;
    *(_OWORD *)(a1 + 16) = v44;
    sub_255DCB308((uint64_t)&v45);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v54 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_255DCB308(a2);
    sub_255E2D410(a2, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v54;
    swift_bridgeObjectRelease();
    long long v29 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v29;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    long long v30 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v30;
    long long v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    long long v32 = *(_OWORD *)(a2 + 16);
    uint64_t result = 1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v32;
  }
  return result;
}

uint64_t sub_255E2CB90()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_255E2E978(0, (unint64_t *)&unk_269F36CC0, MEMORY[0x263F8DBD8]);
  uint64_t v3 = sub_255EF0290();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      long long v20 = (long long *)(*(void *)(v2 + 48) + (v16 << 7));
      long long v33 = v20[4];
      long long v34 = v20[5];
      long long v35 = v20[6];
      long long v36 = v20[7];
      long long v29 = *v20;
      long long v30 = v20[1];
      long long v31 = v20[2];
      long long v32 = v20[3];
      sub_255EF0540();
      MedicalIDEmergencyContact.hash(into:)();
      uint64_t result = sub_255EF0580();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (_OWORD *)(*(void *)(v4 + 48) + (v13 << 7));
      v14[4] = v33;
      v14[5] = v34;
      v14[6] = v35;
      v14[7] = v36;
      *uint64_t v14 = v29;
      v14[1] = v30;
      v14[2] = v31;
      v14[3] = v32;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_255E2CECC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_255E2E8F8();
  uint64_t v3 = sub_255EF0290();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 136 * v16;
      long long v35 = *(_OWORD *)(v20 + 96);
      long long v36 = *(_OWORD *)(v20 + 112);
      uint64_t v37 = *(void *)(v20 + 128);
      long long v31 = *(_OWORD *)(v20 + 32);
      long long v32 = *(_OWORD *)(v20 + 48);
      long long v33 = *(_OWORD *)(v20 + 64);
      long long v34 = *(_OWORD *)(v20 + 80);
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      sub_255EF0540();
      MedicalIDEmergencyContact.hash(into:)();
      uint64_t result = sub_255EF0580();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 136 * v13;
      *(_OWORD *)(v14 + 96) = v35;
      *(_OWORD *)(v14 + 112) = v36;
      *(void *)(v14 + 128) = v37;
      *(_OWORD *)(v14 + 32) = v31;
      *(_OWORD *)(v14 + 48) = v32;
      *(_OWORD *)(v14 + 64) = v33;
      *(_OWORD *)(v14 + 80) = v34;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_255E2D200(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = (long long *)result;
  long long v6 = *(_OWORD *)(result + 80);
  v46[4] = *(_OWORD *)(result + 64);
  v46[5] = v6;
  long long v7 = *(_OWORD *)(result + 112);
  v46[6] = *(_OWORD *)(result + 96);
  v46[7] = v7;
  long long v8 = *(_OWORD *)(result + 16);
  v46[0] = *(_OWORD *)result;
  v46[1] = v8;
  long long v9 = *(_OWORD *)(result + 48);
  v46[2] = *(_OWORD *)(result + 32);
  v46[3] = v9;
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_255E2CB90();
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (uint64_t)sub_255E2D6B0();
      goto LABEL_14;
    }
    sub_255E2DA9C();
  }
  uint64_t v12 = *v3;
  long long v13 = v5[5];
  long long v42 = v5[4];
  long long v43 = v13;
  long long v14 = v5[7];
  long long v44 = v5[6];
  long long v45 = v14;
  long long v15 = v5[1];
  long long v38 = *v5;
  long long v39 = v15;
  long long v16 = v5[3];
  long long v40 = v5[2];
  long long v41 = v16;
  sub_255EF0540();
  MedicalIDEmergencyContact.hash(into:)();
  uint64_t result = sub_255EF0580();
  uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
  a2 = result & ~v17;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    unint64_t v18 = (long long *)(*(void *)(v12 + 48) + (a2 << 7));
    long long v19 = v18[5];
    long long v42 = v18[4];
    long long v43 = v19;
    long long v20 = v18[7];
    long long v44 = v18[6];
    long long v45 = v20;
    long long v21 = v18[1];
    long long v38 = *v18;
    long long v39 = v21;
    long long v22 = v18[3];
    long long v40 = v18[2];
    long long v41 = v22;
    uint64_t result = _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v38, v46);
    if (result)
    {
LABEL_13:
      uint64_t result = sub_255EF04C0();
      __break(1u);
    }
    else
    {
      uint64_t v23 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v23;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        char v24 = (long long *)(*(void *)(v12 + 48) + (a2 << 7));
        long long v25 = v24[5];
        long long v42 = v24[4];
        long long v43 = v25;
        long long v26 = v24[7];
        long long v44 = v24[6];
        long long v45 = v26;
        long long v27 = v24[1];
        long long v38 = *v24;
        long long v39 = v27;
        long long v28 = v24[3];
        long long v40 = v24[2];
        long long v41 = v28;
        uint64_t result = _s11MedicalIDUI0A18IDEmergencyContactV2eeoiySbAC_ACtFZ_0(&v38, v46);
        if (result) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v29 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  long long v30 = (long long *)(*(void *)(v29 + 48) + (a2 << 7));
  long long v31 = v5[1];
  *long long v30 = *v5;
  v30[1] = v31;
  long long v32 = v5[3];
  v30[2] = v5[2];
  v30[3] = v32;
  long long v33 = v5[7];
  v30[6] = v5[6];
  v30[7] = v33;
  long long v34 = v5[5];
  v30[4] = v5[4];
  v30[5] = v34;
  uint64_t v35 = *(void *)(v29 + 16);
  BOOL v36 = __OFADD__(v35, 1);
  uint64_t v37 = v35 + 1;
  if (v36) {
    __break(1u);
  }
  else {
    *(void *)(v29 + 16) = v37;
  }
  return result;
}

uint64_t sub_255E2D410(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_255E2CECC();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_255E2D8AC();
      goto LABEL_12;
    }
    sub_255E2DDAC();
  }
  uint64_t v9 = *v3;
  sub_255EF0540();
  long long v10 = *(_OWORD *)(v6 + 112);
  long long v40 = *(_OWORD *)(v6 + 96);
  long long v41 = v10;
  uint64_t v42 = *(void *)(v6 + 128);
  long long v11 = *(_OWORD *)(v6 + 48);
  long long v36 = *(_OWORD *)(v6 + 32);
  long long v37 = v11;
  long long v12 = *(_OWORD *)(v6 + 80);
  long long v38 = *(_OWORD *)(v6 + 64);
  long long v39 = v12;
  long long v13 = *(_OWORD *)(v6 + 16);
  long long v34 = *(_OWORD *)v6;
  long long v35 = v13;
  MedicalIDEmergencyContact.hash(into:)();
  uint64_t result = sub_255EF0580();
  uint64_t v14 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v14;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v15 = ~v14;
    do
    {
      uint64_t v16 = *(void *)(v9 + 48) + 136 * a2;
      long long v34 = *(_OWORD *)v16;
      long long v17 = *(_OWORD *)(v16 + 48);
      long long v18 = *(_OWORD *)(v16 + 64);
      long long v19 = *(_OWORD *)(v16 + 32);
      long long v35 = *(_OWORD *)(v16 + 16);
      long long v36 = v19;
      long long v37 = v17;
      long long v38 = v18;
      long long v20 = *(_OWORD *)(v16 + 80);
      long long v21 = *(_OWORD *)(v16 + 96);
      long long v22 = *(_OWORD *)(v16 + 112);
      uint64_t v42 = *(void *)(v16 + 128);
      long long v40 = v21;
      long long v41 = v22;
      long long v39 = v20;
      sub_255EF0540();
      sub_255DCB308((uint64_t)&v34);
      MedicalIDEmergencyContact.hash(into:)();
      uint64_t v23 = sub_255EF0580();
      sub_255EF0540();
      MedicalIDEmergencyContact.hash(into:)();
      uint64_t v24 = sub_255EF0580();
      uint64_t result = sub_255DCB3AC((uint64_t)&v34);
      if (v23 == v24) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v15;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v25 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v26 = *(void *)(v25 + 48) + 136 * a2;
  long long v27 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(v26 + 48) = v27;
  *(void *)(v26 + 128) = *(void *)(v6 + 128);
  long long v28 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(v26 + 96) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(v26 + 112) = v28;
  long long v29 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(v26 + 64) = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(v26 + 80) = v29;
  long long v30 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v6;
  *(_OWORD *)(v26 + 16) = v30;
  uint64_t v31 = *(void *)(v25 + 16);
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (!v32)
  {
    *(void *)(v25 + 16) = v33;
    return result;
  }
  __break(1u);
LABEL_15:
  sub_255E2E978(0, (unint64_t *)&qword_269F36C90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
  uint64_t result = sub_255EF04C0();
  __break(1u);
  return result;
}

void *sub_255E2D6B0()
{
  uint64_t v1 = v0;
  sub_255E2E978(0, (unint64_t *)&unk_269F36CC0, MEMORY[0x263F8DBD8]);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_255EF0280();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25)
      {
        int64_t v9 = v24 + 2;
        if (v24 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v6 + 8 * v9);
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = v15 << 7;
    long long v17 = (long long *)(*(void *)(v2 + 48) + v16);
    long long v19 = *v17;
    long long v18 = v17[1];
    long long v20 = v17[2];
    v27[3] = v17[3];
    long long v21 = v17[4];
    long long v22 = v17[5];
    long long v23 = v17[7];
    v27[6] = v17[6];
    v27[7] = v23;
    v27[4] = v21;
    v27[5] = v22;
    v27[1] = v18;
    v27[2] = v20;
    v27[0] = v19;
    memmove((void *)(*(void *)(v4 + 48) + v16), v17, 0x80uLL);
    uint64_t result = (void *)sub_255DCB308((uint64_t)v27);
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v13) {
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_255E2D8AC()
{
  uint64_t v1 = v0;
  sub_255E2E8F8();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_255EF0280();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25)
      {
        int64_t v9 = v24 + 2;
        if (v24 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v6 + 8 * v9);
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 136 * v15;
    long long v17 = (_OWORD *)(*(void *)(v2 + 48) + v16);
    long long v19 = v17[1];
    long long v18 = v17[2];
    long long v20 = v17[4];
    v27[3] = v17[3];
    v27[4] = v20;
    long long v21 = v17[5];
    long long v22 = v17[6];
    long long v23 = v17[7];
    uint64_t v28 = *((void *)v17 + 16);
    v27[6] = v22;
    v27[7] = v23;
    v27[5] = v21;
    v27[0] = *v17;
    v27[1] = v19;
    v27[2] = v18;
    memmove((void *)(*(void *)(v4 + 48) + v16), v17, 0x88uLL);
    uint64_t result = (void *)sub_255DCB308((uint64_t)v27);
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v13) {
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_255E2DA9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_255E2E978(0, (unint64_t *)&unk_269F36CC0, MEMORY[0x263F8DBD8]);
  uint64_t v3 = sub_255EF0290();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v21 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v22 = v21 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= v9) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v12;
    if (!v24)
    {
      int64_t v12 = v23 + 1;
      if (v23 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v12);
      if (!v24)
      {
        int64_t v12 = v23 + 2;
        if (v23 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v12);
        if (!v24) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_24:
    int64_t v26 = (long long *)(*(void *)(v2 + 48) + (v22 << 7));
    long long v28 = *v26;
    long long v27 = v26[1];
    long long v29 = v26[3];
    long long v42 = v26[2];
    long long v43 = v29;
    long long v30 = v26[4];
    long long v31 = v26[5];
    long long v32 = v26[7];
    long long v46 = v26[6];
    long long v47 = v32;
    long long v44 = v30;
    long long v45 = v31;
    long long v40 = v28;
    long long v41 = v27;
    sub_255EF0540();
    sub_255DCB308((uint64_t)&v40);
    MedicalIDEmergencyContact.hash(into:)();
    uint64_t result = sub_255EF0580();
    uint64_t v33 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v10 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v34) & ~*(void *)(v10 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v10 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v13 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = (_OWORD *)(*(void *)(v4 + 48) + (v13 << 7));
    long long v15 = v40;
    long long v17 = v42;
    long long v16 = v43;
    v14[1] = v41;
    v14[2] = v17;
    *unint64_t v14 = v15;
    long long v18 = v44;
    long long v19 = v45;
    long long v20 = v47;
    v14[6] = v46;
    v14[7] = v20;
    v14[4] = v18;
    v14[5] = v19;
    v14[3] = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v12 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v12);
    ++v25;
    if (v24) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_255E2DDAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_255E2E8F8();
  uint64_t v3 = sub_255EF0290();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v21 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v22 = v21 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= v9) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v12;
    if (!v24)
    {
      int64_t v12 = v23 + 1;
      if (v23 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v12);
      if (!v24)
      {
        int64_t v12 = v23 + 2;
        if (v23 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v12);
        if (!v24) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_24:
    uint64_t v26 = *(void *)(v2 + 48) + 136 * v22;
    long long v27 = *(_OWORD *)(v26 + 64);
    long long v28 = *(_OWORD *)(v26 + 16);
    long long v29 = *(_OWORD *)(v26 + 32);
    long long v43 = *(_OWORD *)(v26 + 48);
    long long v44 = v27;
    long long v42 = v29;
    long long v30 = *(_OWORD *)(v26 + 80);
    long long v31 = *(_OWORD *)(v26 + 96);
    long long v32 = *(_OWORD *)(v26 + 112);
    uint64_t v48 = *(void *)(v26 + 128);
    long long v46 = v31;
    long long v47 = v32;
    long long v45 = v30;
    long long v40 = *(_OWORD *)v26;
    long long v41 = v28;
    sub_255EF0540();
    sub_255DCB308((uint64_t)&v40);
    MedicalIDEmergencyContact.hash(into:)();
    uint64_t result = sub_255EF0580();
    uint64_t v33 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v10 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v34) & ~*(void *)(v10 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v10 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v13 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 136 * v13;
    long long v15 = v41;
    long long v16 = v42;
    long long v17 = v44;
    *(_OWORD *)(v14 + 48) = v43;
    *(_OWORD *)(v14 + 64) = v17;
    *(_OWORD *)(v14 + 16) = v15;
    *(_OWORD *)(v14 + 32) = v16;
    long long v18 = v45;
    long long v19 = v46;
    long long v20 = v47;
    *(void *)(v14 + 128) = v48;
    *(_OWORD *)(v14 + 96) = v19;
    *(_OWORD *)(v14 + 112) = v20;
    *(_OWORD *)(v14 + 80) = v18;
    *(_OWORD *)uint64_t v14 = v40;
    ++*(void *)(v4 + 16);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v12 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v12);
    ++v25;
    if (v24) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_255E2E0C4(void *a1)
{
  return sub_255DFB114(0, a1[2], 0, a1);
}

uint64_t sub_255E2E0D8(uint64_t a1)
{
  return sub_255DFB450(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_255E2E0EC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_255EF03F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t result = sub_255DFAB1C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v3 = v18;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x25A29BD10](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      sub_255E2A1A8(v6, v17);

      uint64_t v18 = v3;
      unint64_t v9 = *(void *)(v3 + 16);
      unint64_t v8 = *(void *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_255DFAB1C(v8 > 1, v9 + 1, 1);
        uint64_t v3 = v18;
      }
      ++v5;
      *(void *)(v3 + 16) = v9 + 1;
      uint64_t v10 = (_OWORD *)(v3 + (v9 << 7));
      long long v11 = v17[0];
      long long v12 = v17[1];
      long long v13 = v17[3];
      v10[4] = v17[2];
      v10[5] = v13;
      v10[2] = v11;
      v10[3] = v12;
      long long v14 = v17[4];
      long long v15 = v17[5];
      long long v16 = v17[7];
      v10[8] = v17[6];
      v10[9] = v16;
      v10[6] = v14;
      v10[7] = v15;
    }
    while (v2 != v5);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_255E2E260(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker();
  uint64_t v7 = swift_allocObject();
  uint64_t Request = type metadata accessor for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest();
  uint64_t v9 = swift_allocObject();
  type metadata accessor for SuggestedEmergencyContactFetcher();
  uint64_t v10 = (void *)swift_allocObject();
  v10[5] = v6;
  v10[6] = &protocol witness table for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker;
  v10[2] = v7;
  v10[10] = Request;
  v10[11] = &protocol witness table for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest;
  v10[7] = v9;
  *(void *)(v3 + 16) = v10;
  sub_255E2F244();
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 32) = v11;
  *(void *)(v3 + 40) = v12;
  *(unsigned char *)(v3 + 56) = 0;
  sub_255E2F3A8(0, (unint64_t *)&qword_269F37DE0, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_255EF50E0;
  long long v14 = self;
  *(void *)(v13 + 32) = objc_msgSend(v14, sel_descriptorForRequiredKeysForStyle_, 0);
  id v15 = objc_msgSend(v14, sel_descriptorForRequiredKeysForStyle_, 1);
  long long v16 = (void *)*MEMORY[0x263EFDF48];
  *(void *)(v13 + 40) = v15;
  *(void *)(v13 + 48) = v16;
  long long v17 = (void *)*MEMORY[0x263EFDFF8];
  uint64_t v18 = (void *)*MEMORY[0x263EFE140];
  *(void *)(v13 + 56) = *MEMORY[0x263EFDFF8];
  *(void *)(v13 + 64) = v18;
  long long v19 = (void *)*MEMORY[0x263EFE070];
  long long v20 = (void *)*MEMORY[0x263EFE148];
  *(void *)(v13 + 72) = *MEMORY[0x263EFE070];
  *(void *)(v13 + 80) = v20;
  *(void *)(v13 + 88) = v18;
  sub_255EEFEB0();
  *(void *)(v3 + 64) = v13;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 24) = a2;
  id v21 = v18;
  id v22 = v16;
  id v23 = v17;
  id v24 = v19;
  id v25 = v20;
  id v26 = a1;
  id v27 = a2;
  sub_255E29CE0();
  return v3;
}

uint64_t dispatch thunk of MedicalIDEmergencyContactProviding.medicalIDEmergencyContacts(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for MedicalIDEmergencyContactProvider()
{
  return self;
}

uint64_t method lookup function for MedicalIDEmergencyContactProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MedicalIDEmergencyContactProvider);
}

uint64_t dispatch thunk of MedicalIDEmergencyContactProvider.__allocating_init(medicalIDStore:healthStore:contactStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_255E2E4D4(uint64_t a1, uint64_t a2)
{
  sub_255E2F3A8(0, &qword_269F36C80, (uint64_t)&type metadata for MedicalIDEmergencyContact, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E2E55C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_255E2E574(uint64_t a1)
{
  return a1;
}

void sub_255E2E5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  if (a13)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_255E2E6A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_255E2E978(0, (unint64_t *)&qword_269F36C90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
  sub_255E2E884();
  uint64_t result = sub_255EEFFD0();
  uint64_t v13 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      long long v5 = *(_OWORD *)(v4 + 112);
      v14[6] = *(_OWORD *)(v4 + 96);
      v14[7] = v5;
      uint64_t v15 = *(void *)(v4 + 128);
      long long v6 = *(_OWORD *)(v4 + 48);
      v14[2] = *(_OWORD *)(v4 + 32);
      v14[3] = v6;
      long long v7 = *(_OWORD *)(v4 + 80);
      v14[4] = *(_OWORD *)(v4 + 64);
      v14[5] = v7;
      long long v8 = *(_OWORD *)(v4 + 16);
      v14[0] = *(_OWORD *)v4;
      v14[1] = v8;
      sub_255DCB308((uint64_t)v14);
      sub_255E2C8B4((uint64_t)v9, (uint64_t)v14);
      v11[6] = v9[6];
      v11[7] = v9[7];
      uint64_t v12 = v10;
      uint64_t v11[2] = v9[2];
      v11[3] = v9[3];
      v11[4] = v9[4];
      v11[5] = v9[5];
      v11[0] = v9[0];
      v11[1] = v9[1];
      sub_255DCB3AC((uint64_t)v11);
      v4 += 136;
      --v2;
    }
    while (v2);
    return v13;
  }
  return result;
}

uint64_t sub_255E2E7BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_255DD21C8();
  uint64_t result = sub_255EEFFD0();
  uint64_t v11 = result;
  if (v2)
  {
    uint64_t v4 = (long long *)(a1 + 32);
    do
    {
      long long v5 = v4[5];
      v12[4] = v4[4];
      v12[5] = v5;
      long long v6 = v4[7];
      v12[6] = v4[6];
      v12[7] = v6;
      long long v7 = v4[1];
      v12[0] = *v4;
      v12[1] = v7;
      long long v8 = v4[3];
      v12[2] = v4[2];
      v12[3] = v8;
      sub_255DCB308((uint64_t)v12);
      sub_255E2C5F4(v9, v12);
      v10[4] = v9[4];
      v10[5] = v9[5];
      v10[6] = v9[6];
      v10[7] = v9[7];
      v10[0] = v9[0];
      v10[1] = v9[1];
      v10[2] = v9[2];
      v10[3] = v9[3];
      sub_255DCB3AC((uint64_t)v10);
      v4 += 8;
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

unint64_t sub_255E2E884()
{
  unint64_t result = qword_269F36CB0;
  if (!qword_269F36CB0)
  {
    sub_255E2E978(255, (unint64_t *)&qword_269F36C90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36CB0);
  }
  return result;
}

void sub_255E2E8F8()
{
  if (!qword_269F36CB8)
  {
    sub_255E2E978(255, (unint64_t *)&qword_269F36C90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))_s14OrderedElementVMa);
    sub_255E2E884();
    unint64_t v0 = sub_255EF02B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36CB8);
    }
  }
}

void sub_255E2E978(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_255DD21C8();
    unint64_t v7 = a3(a1, &type metadata for MedicalIDEmergencyContact, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255E2E9DC(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_255EF03F0())
  {
    unint64_t v21 = v2;
    unint64_t v22 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    while (1)
    {
      id v6 = v22 ? (id)MEMORY[0x25A29BD10](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      unint64_t v7 = v6;
      uint64_t v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_identifier);
      uint64_t v10 = sub_255EEFD90();
      uint64_t v12 = v11;

      id v13 = objc_msgSend(a2, sel_phoneNumberContactIdentifier);
      if (v13)
      {
        long long v14 = v13;
        uint64_t v15 = v3;
        uint64_t v16 = sub_255EEFD90();
        uint64_t v18 = v17;

        if (v10 == v16 && v12 == v18)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          uint64_t v19 = 1;
          goto LABEL_20;
        }
        char v5 = sub_255EF04A0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v15;
        unint64_t v2 = v21;
        if (v5)
        {
          uint64_t v19 = 1;
          goto LABEL_20;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v4;
      if (v8 == v3)
      {
        uint64_t v19 = 0;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_255E2EBCC(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_255EF03F0();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v5 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v6 = (id)MEMORY[0x25A29BD10](i - 4, a1);
          uint64_t v7 = i - 3;
          if (__OFADD__(v5, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          id v6 = *(id *)(a1 + 8 * i);
          uint64_t v7 = i - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        unint64_t v21 = v6;
        id v8 = objc_msgSend(v6, sel_value);
        id v9 = objc_msgSend(v8, sel_digits);

        uint64_t v10 = sub_255EEFD90();
        uint64_t v12 = v11;

        id v13 = objc_msgSend(a2, sel_digits);
        uint64_t v14 = sub_255EEFD90();
        uint64_t v16 = v15;

        if (v10 == v14 && v12 == v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          uint64_t v3 = (uint64_t)v21;
          swift_bridgeObjectRelease();
          return v3;
        }
        char v18 = sub_255EF04A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_17;
        }

        if (v7 == v3)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_255E2EDB0(void *a1, void *a2)
{
  id v4 = objc_msgSend(a1, sel_phoneNumberContactIdentifier);
  if (!v4)
  {
LABEL_4:
    id v11 = objc_msgSend(a1, sel_phoneNumber);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = sub_255EEFD90();
      uint64_t v15 = v14;

      uint64_t v37 = v13;
      uint64_t v38 = v15;
      uint64_t v16 = sub_255EEDE50();
      uint64_t v36 = 0;
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(void *)(v17 + 64);
      MEMORY[0x270FA5388](v16);
      uint64_t v19 = sub_255EEDE30();
      id v35 = a2;
      MEMORY[0x270FA5388](v19);
      long long v20 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255EEDE40();
      unint64_t v21 = *(void (**)(char *, uint64_t))(v17 + 8);
      v21(v20, v16);
      sub_255DAD520();
      uint64_t v22 = MEMORY[0x263F8D310];
      uint64_t v23 = sub_255EF0220();
      v21(v20, v16);
      uint64_t v37 = v23;
      sub_255E2F3A8(0, &qword_269F36CD0, v22, MEMORY[0x263F8D488]);
      sub_255E2F158();
      sub_255EEFC90();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v24 = objc_allocWithZone(MEMORY[0x263EFEB28]);
      id v25 = (void *)sub_255EEFD50();
      swift_bridgeObjectRelease();
      id v26 = objc_msgSend(v24, sel_initWithStringValue_, v25);

      id v27 = objc_msgSend(v35, sel_phoneNumbers);
      sub_255D7ED10(0, &qword_269F36CE0);
      unint64_t v28 = sub_255EEFEA0();

      id v29 = v26;
      long long v30 = (void *)sub_255E2EBCC(v28, v29);
      swift_bridgeObjectRelease();

      if (v30)
      {
        id v31 = v30;
        id v32 = objc_msgSend(v31, sel_identifier);
        uint64_t v6 = sub_255EEFD90();

        return v6;
      }
    }
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_255EEFD90();

  id v7 = objc_msgSend(a2, sel_phoneNumbers);
  sub_255D7ED10(0, &qword_269F36CE0);
  unint64_t v8 = sub_255EEFEA0();

  id v9 = a1;
  char v10 = sub_255E2E9DC(v8, v9);
  swift_bridgeObjectRelease();

  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  return v6;
}

unint64_t sub_255E2F158()
{
  unint64_t result = qword_269F36CD8;
  if (!qword_269F36CD8)
  {
    sub_255E2F3A8(255, &qword_269F36CD0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36CD8);
  }
  return result;
}

unint64_t sub_255E2F1D4()
{
  unint64_t result = qword_269F36CE8;
  if (!qword_269F36CE8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269F36CE8);
  }
  return result;
}

double sub_255E2F22C(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_255E2F244()
{
  if (!qword_269F36D00)
  {
    sub_255E2F2DC(255, &qword_269F36D08, (uint64_t (*)(uint64_t))sub_255E2F340, MEMORY[0x263F8D8F0]);
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_255EF0300();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36D00);
    }
  }
}

void sub_255E2F2DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E2F340()
{
  if (!qword_269F36D10[0])
  {
    sub_255D7ED10(255, &qword_269F37DB0);
    unint64_t v0 = sub_255EEFF00();
    if (!v1) {
      atomic_store(v0, qword_269F36D10);
    }
  }
}

void sub_255E2F3A8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E2F3F4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_255E2F42C()
{
  return sub_255E29E28();
}

uint64_t sub_255E2F434()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E2F46C(uint64_t a1)
{
  return sub_255E7322C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_255E2F474(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E2F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 64);
}

uint64_t sub_255E2F4C4()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_255E2F508(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_255E2F574(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_255E2F5EC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for EditingScrollView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_255E2F65C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E2F6A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = a1[2];
  uint64_t v17 = a1[3];
  uint64_t v4 = a1[4];
  sub_255EEFA60();
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  uint64_t v34 = a1[6];
  uint64_t v35 = v5;
  uint64_t v36 = v6;
  swift_getWitnessTable();
  uint64_t v7 = sub_255EEF2E0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)&v16 - v9;
  uint64_t v20 = v3;
  uint64_t v21 = v17;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  uint64_t v24 = v34;
  uint64_t v25 = v6;
  uint64_t v26 = v18;
  sub_255EEF2D0();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_255D79E7C(v7, WitnessTable, &v30);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v29[0] = v30;
  v29[1] = v31;
  sub_255D7B42C(255, &qword_269F34DD8, (uint64_t (*)(uint64_t))sub_255D7B3F8, MEMORY[0x263F1A418]);
  sub_255EEE870();
  unint64_t v12 = sub_255DBC180();
  uint64_t v27 = WitnessTable;
  unint64_t v28 = v12;
  swift_getWitnessTable();
  uint64_t v13 = sub_255EEE940();
  uint64_t v14 = swift_getWitnessTable();
  sub_255DD37CC(v29, v13, v14);
  swift_release();
  uint64_t v30 = v32;
  uint64_t v31 = v33;
  sub_255DD37CC(&v30, v13, v14);
  return swift_release();
}

uint64_t sub_255E2F95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v27 = a8;
  uint64_t v15 = sub_255EEFA60();
  uint64_t v26 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v25 = (char *)&v24 - v19;
  v36[2] = a2;
  v36[3] = a3;
  v36[4] = a4;
  v36[5] = a5;
  v36[6] = a6;
  v36[7] = a7;
  v36[8] = a1;
  v35[2] = a2;
  v35[3] = a3;
  v35[4] = a4;
  v35[5] = a5;
  v35[6] = a6;
  v35[7] = a7;
  v35[8] = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v34 = a1;
  sub_255E2FF24((uint64_t)sub_255E300A4, (uint64_t)v36, (uint64_t)sub_255E300BC, (uint64_t)v35, (void (*)(uint64_t))sub_255E300D4);
  v36[10] = a6;
  v36[11] = a5;
  v36[12] = a7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = v25;
  sub_255DD37CC(v18, v15, WitnessTable);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v26 + 8);
  v22(v18, v15);
  sub_255DD37CC(v21, v15, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v15);
}

uint64_t sub_255E2FB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  char v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = (void (**)(void))MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v16 - v12;
  (*v11)();
  sub_255DD37CC(v10, a2, a5);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, a2);
  sub_255DD37CC(v13, a2, a5);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, a2);
}

uint64_t sub_255E2FCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  id v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(void))(v12 + 16))();
  sub_255DD37CC(v11, a3, a6);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, a3);
  sub_255DD37CC(v14, a3, a6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a3);
}

uint64_t sub_255E2FDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(void))(v13 + 32))();
  sub_255DD37CC(v12, a4, a7);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, a4);
  sub_255DD37CC(v15, a4, a7);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, a4);
}

uint64_t sub_255E2FF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = v8(v7);
  a5(v9);
  return sub_255EEFA40();
}

uint64_t sub_255E30050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255E2F6A8(a1, a2);
}

uint64_t sub_255E3008C()
{
  return sub_255E300EC((uint64_t (*)(void, void, void, void, void, void, void))sub_255E2F95C);
}

uint64_t sub_255E300A4()
{
  return sub_255E300EC((uint64_t (*)(void, void, void, void, void, void, void))sub_255E2FB88);
}

uint64_t sub_255E300BC()
{
  return sub_255E300EC((uint64_t (*)(void, void, void, void, void, void, void))sub_255E2FCBC);
}

uint64_t sub_255E300D4()
{
  return sub_255E300EC(sub_255E2FDF0);
}

uint64_t sub_255E300EC(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_255E30108()
{
  return swift_getWitnessTable();
}

uint64_t *sub_255E30254(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_255EEDF60();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    uint64_t v17 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = (uint64_t)v17;
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    id v18 = v16;
    id v19 = v17;
  }
  return v4;
}

void sub_255E30384(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_255EEDF60();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  uint64_t v6 = *(void **)(a1 + a2[8]);
}

void *sub_255E30424(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEDF60();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = *(void **)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v15;
  uint64_t v16 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v16;
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  id v17 = v15;
  id v18 = v16;
  return a1;
}

void *sub_255E30504(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_255EEDF60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  uint64_t v14 = a3[8];
  uint64_t v15 = *(void **)((char *)a2 + v14);
  uint64_t v16 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = v15;
  id v17 = v15;

  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_255E30604(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEDF60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *sub_255E306B0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEDF60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  id v13 = *(void **)((char *)a1 + v12);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);

  uint64_t v14 = a3[8];
  uint64_t v15 = *(void **)((char *)a1 + v14);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);

  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_255E30788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E3079C);
}

uint64_t sub_255E3079C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_255EEDF60();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_255E3084C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E30860);
}

uint64_t sub_255E30860(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_255EEDF60();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for HealthDemographicData()
{
  uint64_t result = qword_269F36D98;
  if (!qword_269F36D98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E30954()
{
  uint64_t result = sub_255EEDF60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_255E30A0C(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_255EF04A0(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = sub_255EF04A0(), result = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = type metadata accessor for HealthDemographicData();
      if ((MEMORY[0x25A2998D0]((char *)a1 + *(int *)(v9 + 24), (char *)a2 + *(int *)(v9 + 24)) & 1) != 0
        && (sub_255E30AFC(), (sub_255EF01D0() & 1) != 0)
        && (sub_255EF01D0() & 1) != 0)
      {
        return *(void *)((char *)a1 + *(int *)(v9 + 36)) == *(void *)((char *)a2 + *(int *)(v9 + 36));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_255E30AFC()
{
  unint64_t result = qword_269F35048;
  if (!qword_269F35048)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_269F35048);
  }
  return result;
}

void sub_255E30B3C()
{
  sub_255E3A358(319, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  if (v0 <= 0x3F)
  {
    sub_255EEE100();
    if (v1 <= 0x3F)
    {
      sub_255D80868(319);
      if (v2 <= 0x3F)
      {
        sub_255E3A358(319, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void *sub_255E30D04(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    BOOL v7 = a1;
    a1[1] = *((void *)a2 + 1);
    sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    uint64_t v9 = *(int *)(v8 + 32);
    __dst = (char *)v7 + v9;
    uint64_t v10 = &a2[v9];
    uint64_t v11 = sub_255EEE100();
    uint64_t v12 = *(void *)(v11 - 8);
    id v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    uint64_t v53 = v13;
    if (v13(v10, 1, v11))
    {
      sub_255D80868(0);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = a3[9];
    uint64_t v16 = a3[10];
    id v17 = (void *)((char *)v7 + v15);
    id v18 = &a2[v15];
    uint64_t v19 = *((void *)v18 + 1);
    *id v17 = *(void *)v18;
    v17[1] = v19;
    uint64_t v20 = (char *)v7 + v16;
    uint64_t v21 = &a2[v16];
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    v22(v20, v21, v11);
    uint64_t v23 = a3[11];
    uint64_t v24 = (char *)v7 + v23;
    uint64_t v25 = &a2[v23];
    if (v53(&a2[v23], 1, v11))
    {
      sub_255D80868(0);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      v22(v24, v25, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
    }
    uint64_t v27 = a3[12];
    uint64_t v28 = (char *)v7 + v27;
    uint64_t v29 = &a2[v27];
    if (v53(&a2[v27], 1, v11))
    {
      sub_255D80868(0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v22(v28, v29, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v11);
    }
    uint64_t v31 = a3[14];
    *((unsigned char *)v7 + a3[13]) = a2[a3[13]];
    uint64_t v32 = (void *)((char *)v7 + v31);
    uint64_t v33 = &a2[v31];
    uint64_t v34 = v22;
    if (*(void *)v33)
    {
      uint64_t v35 = *((void *)v33 + 1);
      *uint64_t v32 = *(void *)v33;
      v32[1] = v35;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    }
    uint64_t v36 = a3[15];
    uint64_t v37 = a3[16];
    uint64_t v38 = (void *)((char *)v7 + v36);
    uint64_t v39 = &a2[v36];
    uint64_t v40 = *((void *)v39 + 1);
    *uint64_t v38 = *(void *)v39;
    v38[1] = v40;
    long long v41 = (void *)((char *)v7 + v37);
    long long v42 = &a2[v37];
    uint64_t v43 = *((void *)v42 + 1);
    *long long v41 = *(void *)v42;
    v41[1] = v43;
    uint64_t v44 = a3[17];
    long long v45 = (char *)v7 + v44;
    long long v46 = &a2[v44];
    swift_retain();
    swift_bridgeObjectRetain();
    v34(v45, v46, v11);
    sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
    *(void *)&v45[*(int *)(v47 + 28)] = *(void *)&v46[*(int *)(v47 + 28)];
    uint64_t v48 = a3[18];
    long long v49 = (char *)v7 + v48;
    long long v50 = &a2[v48];
    char *v49 = *v50;
    *((void *)v49 + 1) = *((void *)v50 + 1);
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_255E3112C(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(a1 + a2[10], v6);
  uint64_t v10 = a1 + a2[11];
  if (!v8(v10, 1, v6)) {
    v9(v10, v6);
  }
  uint64_t v11 = a1 + a2[12];
  if (!v8(v11, 1, v6)) {
    v9(v11, v6);
  }
  if (*(void *)(a1 + a2[14])) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  v9(a1 + a2[17], v6);
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  swift_release();
  return swift_release();
}

void *sub_255E31374(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v8 = *(int *)(v7 + 32);
  __dst = (char *)a1 + v8;
  uint64_t v9 = &a2[v8];
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  long long v52 = v12;
  if (v12(v9, 1, v10))
  {
    sub_255D80868(0);
    memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  uint64_t v16 = (void *)((char *)a1 + v14);
  id v17 = &a2[v14];
  uint64_t v18 = *((void *)v17 + 1);
  *uint64_t v16 = *(void *)v17;
  v16[1] = v18;
  uint64_t v19 = (char *)a1 + v15;
  uint64_t v20 = &a2[v15];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v21(v19, v20, v10);
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = &a2[v22];
  if (v52(&a2[v22], 1, v10))
  {
    sub_255D80868(0);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v21(v23, v24, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
  }
  uint64_t v26 = a3[12];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = &a2[v26];
  if (v52(&a2[v26], 1, v10))
  {
    sub_255D80868(0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v21(v27, v28, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
  }
  uint64_t v30 = a3[14];
  *((unsigned char *)a1 + a3[13]) = a2[a3[13]];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = &a2[v30];
  uint64_t v33 = v21;
  if (*(void *)v32)
  {
    uint64_t v34 = *((void *)v32 + 1);
    *uint64_t v31 = *(void *)v32;
    v31[1] = v34;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  uint64_t v35 = a3[15];
  uint64_t v36 = a3[16];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *uint64_t v37 = *(void *)v38;
  v37[1] = v39;
  uint64_t v40 = (void *)((char *)a1 + v36);
  long long v41 = &a2[v36];
  uint64_t v42 = *((void *)v41 + 1);
  *uint64_t v40 = *(void *)v41;
  v40[1] = v42;
  uint64_t v43 = a3[17];
  uint64_t v44 = (char *)a1 + v43;
  long long v45 = &a2[v43];
  swift_retain();
  swift_bridgeObjectRetain();
  v33(v44, v45, v10);
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  *(void *)&v44[*(int *)(v46 + 28)] = *(void *)&v45[*(int *)(v46 + 28)];
  uint64_t v47 = a3[18];
  uint64_t v48 = (char *)a1 + v47;
  long long v49 = &a2[v47];
  *uint64_t v48 = *v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_255E31750(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_255D80868(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[9];
  id v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)id v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v53(&a1[a3[10]], &a2[a3[10]], v10);
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  int v22 = v12(&a1[v19], 1, v10);
  int v23 = v12(v21, 1, v10);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v20, v21, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
LABEL_12:
    sub_255D80868(0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  v53(v20, v21, v10);
LABEL_13:
  uint64_t v25 = a3[12];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  int v28 = v12(&a1[v25], 1, v10);
  int v29 = v12(v27, 1, v10);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v26, v27, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v10);
LABEL_18:
    sub_255D80868(0);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  v53(v26, v27, v10);
LABEL_19:
  a1[a3[13]] = a2[a3[13]];
  uint64_t v31 = a3[14];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *(void *)&a1[v31];
  uint64_t v35 = *(void *)&a2[v31];
  if (!v34)
  {
    if (v35)
    {
      uint64_t v37 = *((void *)v33 + 1);
      *(void *)uint64_t v32 = v35;
      *((void *)v32 + 1) = v37;
      swift_retain();
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_26;
  }
  if (!v35)
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v36 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v36;
  swift_retain();
  swift_release();
LABEL_26:
  uint64_t v38 = a3[15];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = *(void *)v40;
  *((void *)v39 + 1) = v41;
  swift_retain();
  swift_release();
  uint64_t v42 = a3[16];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[17];
  uint64_t v46 = &a1[v45];
  uint64_t v47 = &a2[v45];
  v53(&a1[v45], &a2[v45], v10);
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  *(void *)&v46[*(int *)(v48 + 28)] = *(void *)&v47[*(int *)(v48 + 28)];
  swift_retain();
  swift_release();
  uint64_t v49 = a3[18];
  long long v50 = &a1[v49];
  long long v51 = &a2[v49];
  *long long v50 = *v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_255E31CD4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_255EEE100();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v35(v10, 1, v11))
  {
    sub_255D80868(0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    int v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  }
  else
  {
    int v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v14(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  v14(&a1[v15], &a2[v15], v11);
  uint64_t v16 = a3[11];
  id v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (v35(&a2[v16], 1, v11))
  {
    sub_255D80868(0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v14(v17, v18, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = &a1[v20];
  int v22 = &a2[v20];
  if (v35(&a2[v20], 1, v11))
  {
    sub_255D80868(0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    v14(v21, v22, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  uint64_t v24 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = (uint64_t *)&a2[v24];
  uint64_t v27 = *v26;
  if (*v26)
  {
    uint64_t v28 = v26[1];
    *(void *)uint64_t v25 = v27;
    *((void *)v25 + 1) = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  }
  uint64_t v29 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[17];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  v14(&a1[v30], &a2[v30], v11);
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  *(void *)&v31[*(int *)(v33 + 28)] = *(void *)&v32[*(int *)(v33 + 28)];
  *(_OWORD *)&a1[a3[18]] = *(_OWORD *)&a2[a3[18]];
  return a1;
}

char *sub_255E32038(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_release();
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_255D80868(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[9];
  id v17 = &a1[v16];
  uint64_t v18 = (uint64_t *)&a2[v16];
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *(void *)id v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  long long v52 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v52(&a1[a3[10]], &a2[a3[10]], v10);
  uint64_t v21 = a3[11];
  int v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  int v24 = v12(&a1[v21], 1, v10);
  int v25 = v12(v23, 1, v10);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v23, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v22, v10);
LABEL_12:
    sub_255D80868(0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  v52(v22, v23, v10);
LABEL_13:
  uint64_t v27 = a3[12];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  int v30 = v12(&a1[v27], 1, v10);
  int v31 = v12(v29, 1, v10);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v28, v29, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v28, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v10);
LABEL_18:
    sub_255D80868(0);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  v52(v28, v29, v10);
LABEL_19:
  uint64_t v33 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(void *)&a2[v33];
  if (!*(void *)&a1[v33])
  {
    if (v36)
    {
      uint64_t v38 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = v36;
      *((void *)v34 + 1) = v38;
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_26;
  }
  if (!v36)
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v37 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = v36;
  *((void *)v34 + 1) = v37;
  swift_release();
LABEL_26:
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  swift_release();
  uint64_t v39 = a3[16];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = (uint64_t *)&a2[v39];
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[17];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  v52(&a1[v44], &a2[v44], v10);
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  *(void *)&v45[*(int *)(v47 + 28)] = *(void *)&v46[*(int *)(v47 + 28)];
  swift_release();
  uint64_t v48 = a3[18];
  uint64_t v49 = &a1[v48];
  long long v50 = &a2[v48];
  char *v49 = *v50;
  *((void *)v49 + 1) = *((void *)v50 + 1);
  swift_release();
  return a1;
}

uint64_t sub_255E32560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E32574);
}

uint64_t sub_255E32574(uint64_t a1, uint64_t a2, int *a3)
{
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[9] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = sub_255EEE100();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[10];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  sub_255D80868(0);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[11];
    goto LABEL_11;
  }
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[17];
  return v18(v20, a2, v19);
}

uint64_t sub_255E32798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E327AC);
}

void sub_255E327AC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    v11(v12, a2, a2, v10);
    return;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[9] + 8) = (a2 - 1);
    return;
  }
  uint64_t v13 = sub_255EEE100();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[10];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  sub_255D80868(0);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[11];
    goto LABEL_9;
  }
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[17];
  v18(v20, a2, a2, v19);
}

uint64_t type metadata accessor for DatePickerEditView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_255E329E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E32A2C(uint64_t a1)
{
  sub_255D80868(0);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255E3A2BC(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255D80868);
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  sub_255EEF980();
  return sub_255E3AAD4(a1, (uint64_t (*)(void))sub_255D80868);
}

void sub_255E32B1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v112 = a1;
  uint64_t v109 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v107 = v3;
  long long v108 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E394B8();
  uint64_t v100 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v103 = (uint64_t)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_255EEE920();
  MEMORY[0x270FA5388](v98);
  unint64_t v101 = (uint64_t *)((char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E39348(0);
  uint64_t v99 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v104 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E39314(0);
  uint64_t v102 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v105 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E39280(0, &qword_269F36EC0, sub_255E39314, (unint64_t *)&qword_269F35128, MEMORY[0x263F1A180]);
  uint64_t v111 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v106 = (uint64_t)&v92 - v12;
  sub_255E391C4();
  uint64_t v95 = v13;
  uint64_t v94 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  long long v110 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E39190(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v93 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_255EEE100();
  uint64_t v17 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  uint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = v2;
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v20 = sub_255EEE090();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEE080();
  uint64_t v24 = sub_255EEE070();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEE060();
  uint64_t v28 = sub_255EEE0E0();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v97);
  *(void *)&long long v123 = v28;
  *((void *)&v123 + 1) = v30;
  sub_255DAD520();
  uint64_t v31 = sub_255EEF3D0();
  uint64_t v33 = v32;
  char v35 = v34;
  uint64_t v37 = v36;
  char v38 = sub_255EEF170();
  if (qword_269F34B80 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  char v47 = sub_255EEF1E0();
  if (qword_269F34B88 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  char v122 = v35 & 1;
  char v119 = 0;
  char v116 = 0;
  id v56 = objc_msgSend(self, sel_tertiarySystemGroupedBackgroundColor);
  uint64_t v57 = MEMORY[0x25A29B180](v56);
  char v58 = sub_255EEF180();
  *(void *)&long long v123 = v31;
  *((void *)&v123 + 1) = v33;
  LOBYTE(v124) = v122;
  *(_DWORD *)((char *)&v124 + 1) = *(_DWORD *)v121;
  DWORD1(v124) = *(_DWORD *)&v121[3];
  *((void *)&v124 + 1) = v37;
  LOBYTE(v125) = v38;
  *(_DWORD *)((char *)&v125 + 1) = *(_DWORD *)v120;
  DWORD1(v125) = *(_DWORD *)&v120[3];
  *((void *)&v125 + 1) = v40;
  *(void *)&long long v126 = v42;
  *((void *)&v126 + 1) = v44;
  *(void *)&long long v127 = v46;
  BYTE8(v127) = v119;
  HIDWORD(v127) = *(_DWORD *)&v118[3];
  *(_DWORD *)((char *)&v127 + 9) = *(_DWORD *)v118;
  LOBYTE(v128) = v47;
  DWORD1(v128) = *(_DWORD *)&v117[3];
  *(_DWORD *)((char *)&v128 + 1) = *(_DWORD *)v117;
  *((void *)&v128 + 1) = v49;
  *(void *)&long long v129 = v51;
  *((void *)&v129 + 1) = v53;
  *(void *)long long v130 = v55;
  v130[8] = v116;
  *(void *)&v130[16] = v57;
  v130[24] = v58;
  if (qword_269F34B78 != -1) {
    swift_once();
  }
  uint64_t v59 = qword_269F36DA8;
  long long v60 = v101;
  long long v61 = (char *)v101 + *(int *)(v98 + 20);
  uint64_t v62 = *MEMORY[0x263F19860];
  uint64_t v63 = sub_255EEED40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104))(v61, v62, v63);
  *long long v60 = v59;
  v60[1] = v59;
  uint64_t v64 = v103;
  sub_255E3A2BC((uint64_t)v60, v103, MEMORY[0x263F19048]);
  *(_WORD *)(v64 + *(int *)(v100 + 36)) = 256;
  uint64_t v65 = v104;
  sub_255E3A2BC(v64, (uint64_t)&v104[*(int *)(v99 + 36)], (uint64_t (*)(void))sub_255E394B8);
  long long v66 = v128;
  long long v67 = *(_OWORD *)v130;
  v65[6] = v129;
  v65[7] = v67;
  *(_OWORD *)((char *)v65 + 121) = *(_OWORD *)&v130[9];
  long long v68 = v126;
  v65[2] = v125;
  v65[3] = v68;
  v65[4] = v127;
  v65[5] = v66;
  long long v69 = v124;
  *uint64_t v65 = v123;
  v65[1] = v69;
  sub_255E3A8B8((uint64_t)&v123);
  sub_255E3AAD4(v64, (uint64_t (*)(void))sub_255E394B8);
  sub_255E3AAD4((uint64_t)v60, MEMORY[0x263F19048]);
  sub_255E3A90C((uint64_t)&v123);
  uint64_t v70 = sub_255EEF200();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v72 = v105;
  sub_255E3A2BC((uint64_t)v65, v105, (uint64_t (*)(void))sub_255E39348);
  unint64_t v73 = (uint64_t *)(v72 + *(int *)(v102 + 36));
  uint64_t *v73 = KeyPath;
  v73[1] = v70;
  sub_255E3AAD4((uint64_t)v65, (uint64_t (*)(void))sub_255E39348);
  uint64_t v74 = sub_255EEF6D0();
  uint64_t v75 = v106;
  sub_255E3A2BC(v72, v106, (uint64_t (*)(void))sub_255E39314);
  uint64_t v76 = v111;
  *(void *)(v75 + *(int *)(v111 + 36)) = v74;
  sub_255E3AAD4(v72, (uint64_t (*)(void))sub_255E39314);
  uint64_t v77 = v109;
  long long v78 = v108;
  uint64_t v79 = v113;
  uint64_t v80 = v112;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v108, v113, v112);
  unint64_t v81 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = *(_OWORD *)(v80 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v77 + 32))(v82 + v81, v78, v80);
  unint64_t v83 = sub_255E3959C();
  uint64_t v84 = v110;
  sub_255EEF4B0();
  swift_release();
  sub_255E3A9D0(v75);
  sub_255E3A650(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_255EF1E20;
  uint64_t v86 = (void *)(v79 + *(int *)(v80 + 64));
  uint64_t v87 = v86[1];
  *(void *)(v85 + 32) = *v86;
  *(void *)(v85 + 40) = v87;
  *(void *)(v85 + 48) = 1702125892;
  *(void *)(v85 + 56) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  uint64_t v88 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v89 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v89)
  {
    sub_255EEFD90();

    uint64_t v114 = v76;
    unint64_t v115 = v83;
    swift_getOpaqueTypeConformance2();
    uint64_t v90 = (uint64_t)v93;
    uint64_t v91 = v95;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v84, v91);
    sub_255E3A6CC(v90, v96, (uint64_t (*)(void))sub_255E39190);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E33798(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(void))(v1 + *(int *)(a1 + 56));
  if (v2) {
    a1 = v2();
  }
  MEMORY[0x270FA5388](a1);
  sub_255EEFB30();
  sub_255EEE7D0();
  return swift_release();
}

uint64_t sub_255E33850@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t result = MEMORY[0x270FA5388](a1);
  if (*(unsigned char *)(v2 + *(int *)(v9 + 60)) == 1)
  {
    uint64_t v10 = (char *)(v2 + *(int *)(a1 + 72));
    char v11 = *v10;
    uint64_t v12 = *((void *)v10 + 1);
    v19[8] = v11;
    uint64_t v20 = v12;
    sub_255E3A650(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
    uint64_t result = sub_255EEF820();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (v21 == 1)
    {
      uint64_t v17 = (uint64_t *)(v3 + *(int *)(a1 + 64));
      uint64_t v13 = *v17;
      uint64_t v14 = v17[1];
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a1);
      unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = *(_OWORD *)(a1 + 16);
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v16 + v18, &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v15 = sub_255E3A808;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  *a2 = v13;
  a2[1] = v14;
  a2[2] = v15;
  a2[3] = v16;
  return result;
}

uint64_t sub_255E33A30(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatePickerEditView();
  uint64_t v3 = *(void (**)(void))(a1 + *(int *)(v2 + 56));
  if (v3) {
    v3();
  }
  sub_255D80868(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_255EEE100();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_255E32A2C((uint64_t)v6);
  uint64_t v8 = (char *)(a1 + *(int *)(v2 + 72));
  char v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  v12[16] = v9;
  uint64_t v13 = v10;
  v12[15] = 0;
  sub_255E3A650(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  return sub_255EEF830();
}

uint64_t sub_255E33B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v273 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_255E38F8C(0, &qword_269F36E40, MEMORY[0x263F19B20]);
  uint64_t v267 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v269 = (uint64_t)&v246 - v5;
  sub_255E38D18(0, &qword_269F36E78, v3);
  uint64_t v249 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v250 = (uint64_t)&v246 - v7;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B28];
  sub_255E38D18(0, &qword_269F36E48, MEMORY[0x263F19B28]);
  uint64_t v268 = v9;
  MEMORY[0x270FA5388](v9);
  v251 = (char *)&v246 - v10;
  sub_255E38F28(0, &qword_269F36E80, MEMORY[0x263F19B20]);
  uint64_t v246 = v11;
  MEMORY[0x270FA5388](v11);
  v247 = (char *)&v246 - v12;
  uint64_t v264 = sub_255EEEF60();
  uint64_t v260 = *(void *)(v264 - 8);
  MEMORY[0x270FA5388](v264);
  v259 = (char *)&v246 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = sub_255EEEE30();
  uint64_t v253 = *(void *)(v254 - 8);
  MEMORY[0x270FA5388](v254);
  v255 = (char *)&v246 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E3954C(0, &qword_269F36E60, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F18390]);
  v262 = v15;
  uint64_t v258 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v15);
  v256 = (char *)&v246 - v16;
  sub_255E38DA4();
  uint64_t v266 = v17;
  uint64_t v263 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  v257 = (char *)&v246 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v261 = (char *)&v246 - v20;
  sub_255E38F28(0, &qword_269F36E50, MEMORY[0x263F19B28]);
  uint64_t v248 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v252 = (uint64_t)&v246 - v22;
  sub_255E38F8C(0, &qword_269F36E88, v8);
  uint64_t v309 = v23;
  uint64_t v308 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v265 = (char *)&v246 - v24;
  sub_255E39018();
  uint64_t v272 = v25;
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  v310 = (char *)&v246 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v304 = (uint64_t)&v246 - v29;
  v320 = *(uint64_t **)(a1 - 8);
  v321 = (int *)a1;
  uint64_t v317 = v320[8];
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v246 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DD8400();
  sub_255E3908C(255);
  v318 = *(char **)(a1 + 16);
  sub_255EEEE10();
  swift_getTupleTypeMetadata3();
  sub_255EEFB90();
  swift_getWitnessTable();
  uint64_t v32 = sub_255EEF8C0();
  sub_255E3994C(255);
  sub_255EEEE10();
  swift_getTupleTypeMetadata2();
  sub_255EEFB90();
  swift_getWitnessTable();
  uint64_t v33 = sub_255EEF950();
  v292 = (char *)v33;
  uint64_t v34 = v32;
  uint64_t v293 = v32;
  uint64_t WitnessTable = swift_getWitnessTable();
  v291 = (uint64_t *)WitnessTable;
  uint64_t v290 = swift_getWitnessTable();
  v326 = (char *)v34;
  uint64_t v327 = v33;
  unint64_t v328 = WitnessTable;
  unint64_t v329 = v290;
  uint64_t v36 = type metadata accessor for MedicalIDAXLayoutView();
  uint64_t v295 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  v285 = (uint64_t *)((char *)&v246 - v37);
  uint64_t v281 = v36;
  uint64_t v38 = sub_255EEE870();
  uint64_t v294 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  v284 = (char *)&v246 - v39;
  sub_255E1FA68();
  uint64_t v282 = v38;
  uint64_t v40 = sub_255EEE870();
  uint64_t v299 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  v283 = (char *)&v246 - v41;
  uint64_t v280 = swift_getWitnessTable();
  v325[4] = v280;
  v325[5] = MEMORY[0x263F19CA0];
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v279 = v42;
  uint64_t v43 = sub_255E3A734(qword_269F36AF8, (void (*)(uint64_t))sub_255E1FA68);
  v325[2] = v42;
  v325[3] = v43;
  uint64_t v44 = swift_getWitnessTable();
  v326 = (char *)v40;
  uint64_t v327 = v44;
  uint64_t v277 = v40;
  uint64_t v45 = v44;
  uint64_t v278 = v44;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v300 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  v313 = (char *)&v246 - v47;
  sub_255D80868(255);
  uint64_t v49 = v48;
  v326 = (char *)v40;
  uint64_t v327 = v45;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v51 = sub_255E39AEC();
  uint64_t v52 = OpaqueTypeMetadata2;
  uint64_t v286 = OpaqueTypeMetadata2;
  v326 = (char *)OpaqueTypeMetadata2;
  uint64_t v327 = v49;
  uint64_t v53 = v49;
  uint64_t v276 = v49;
  unint64_t v328 = OpaqueTypeConformance2;
  unint64_t v329 = v51;
  uint64_t v288 = OpaqueTypeConformance2;
  unint64_t v54 = v51;
  unint64_t v287 = v51;
  uint64_t v55 = (uint64_t *)MEMORY[0x263F1B270];
  uint64_t v56 = swift_getOpaqueTypeMetadata2();
  uint64_t v57 = sub_255EEE100();
  uint64_t v289 = v57;
  v326 = (char *)v52;
  uint64_t v327 = v53;
  unint64_t v328 = OpaqueTypeConformance2;
  unint64_t v329 = v54;
  v302 = v55;
  uint64_t v58 = swift_getOpaqueTypeConformance2();
  uint64_t v301 = v58;
  uint64_t v303 = sub_255E3A4A8(&qword_269F361E8);
  v326 = (char *)v56;
  uint64_t v327 = v57;
  unint64_t v328 = v58;
  unint64_t v329 = v303;
  uint64_t v307 = swift_getOpaqueTypeMetadata2();
  uint64_t v305 = *(void *)(v307 - 8);
  uint64_t v59 = MEMORY[0x270FA5388](v307);
  v306 = (char *)&v246 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v271 = v60;
  MEMORY[0x270FA5388](v59);
  uint64_t v270 = v61;
  v297 = (char *)&v246 - v61;
  v296 = (uint64_t *)swift_checkMetadataState();
  v298 = (uint64_t *)*(v296 - 1);
  MEMORY[0x270FA5388](v296);
  v312 = (char *)&v246 - v62;
  uint64_t v63 = v320;
  uint64_t v64 = v321;
  v319 = (void (*)(char *, char *, int *))v320[2];
  v314 = v320 + 2;
  uint64_t v65 = v322;
  v319(v31, v322, v321);
  uint64_t v66 = *((unsigned __int8 *)v63 + 80);
  uint64_t v67 = (v66 + 32) & ~v66;
  uint64_t v68 = v67 + v317;
  uint64_t v317 = v66 | 7;
  uint64_t v315 = v68;
  uint64_t v69 = swift_allocObject();
  uint64_t v70 = (void (*)(void, void, void))*((void *)v64 + 3);
  uint64_t v71 = v318;
  *(void *)(v69 + 16) = v318;
  *(void *)(v69 + 24) = v70;
  v311 = v70;
  v316 = (void (*)(char *, uint64_t))v67;
  uint64_t v72 = (void (*)(uint64_t, char *, int *))v63[4];
  v72(v69 + v67, v31, v64);
  v320 = v63 + 4;
  v275 = v72;
  v319(v31, v65, v64);
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = v71;
  *(void *)(v73 + 24) = v70;
  v72(v73 + v67, v31, v64);
  uint64_t v74 = v285;
  sub_255E50DD8((uint64_t)sub_255E39B70, v69, (uint64_t)sub_255E39E60, v73, v285);
  uint64_t v75 = v284;
  uint64_t v76 = v281;
  sub_255EEF480();
  (*(void (**)(uint64_t *, uint64_t))(v295 + 8))(v74, v76);
  sub_255DA6CF8();
  uint64_t v77 = v283;
  uint64_t v78 = v282;
  sub_255EEF490();
  (*(void (**)(char *, uint64_t))(v294 + 8))(v75, v78);
  uint64_t v79 = v31;
  v274 = v31;
  v319(v31, v322, v64);
  uint64_t v80 = swift_allocObject();
  unint64_t v81 = v318;
  uint64_t v82 = v311;
  *(void *)(v80 + 16) = v318;
  *(void *)(v80 + 24) = v82;
  unint64_t v83 = (void (*)(char *, char *, int *))v275;
  v275((uint64_t)v316 + v80, v79, v64);
  uint64_t v84 = v277;
  sub_255EEF4B0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v299 + 8))(v77, v84);
  uint64_t v85 = swift_checkMetadataState();
  uint64_t v299 = *(void *)(*(void *)(v85 - 8) + 64);
  MEMORY[0x270FA5388](v85);
  uint64_t v293 = v86;
  uint64_t v87 = (char *)&v246 - v86;
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v88 = v322;
  MEMORY[0x25A29B390]();
  id v89 = v274;
  uint64_t v90 = v88;
  uint64_t v91 = v321;
  v319(v274, v90, v321);
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = v81;
  *(void *)(v92 + 24) = v82;
  uint64_t v93 = v89;
  uint64_t v94 = v91;
  v83((char *)v316 + v92, v89, v91);
  uint64_t v95 = v286;
  uint64_t v96 = v313;
  sub_255EEF690();
  swift_release();
  sub_255E3AAD4((uint64_t)v87, (uint64_t (*)(void))sub_255D80868);
  (*(void (**)(char *, uint64_t))(v300 + 8))(v96, v95);
  uint64_t v97 = swift_checkMetadataState();
  uint64_t v98 = *(uint64_t **)(v97 - 8);
  uint64_t v300 = v98[8];
  MEMORY[0x270FA5388](v97);
  v292 = v99;
  uint64_t v100 = (char *)((char *)&v246 - v99);
  unint64_t v101 = v322;
  uint64_t v102 = (uint64_t)&v322[v94[17]];
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  uint64_t v294 = v103;
  uint64_t v295 = v102;
  sub_255EEF820();
  uint64_t v104 = v94;
  v319(v93, v101, v94);
  uint64_t v105 = swift_allocObject();
  uint64_t v106 = v311;
  *(void *)(v105 + 16) = v318;
  *(void *)(v105 + 24) = v106;
  uint64_t v107 = v307;
  v83((char *)v316 + v105, v93, v104);
  long long v108 = v297;
  uint64_t v109 = (char *)v296;
  unint64_t v110 = v301;
  uint64_t v111 = v303;
  uint64_t v112 = v312;
  sub_255EEF690();
  swift_release();
  v320 = v98;
  uint64_t v114 = (void (*)(char *, char *, int *))v98[1];
  uint64_t v113 = v98 + 1;
  v319 = v114;
  ((void (*)(char *, uint64_t))v114)(v100, v97);
  unint64_t v115 = v112;
  char v116 = v109;
  long long v117 = v306;
  ((void (*)(char *, char *))v298[1])(v115, v116);
  v326 = v116;
  uint64_t v327 = v97;
  v313 = (char *)v97;
  unint64_t v328 = v110;
  unint64_t v329 = v111;
  uint64_t v118 = swift_getOpaqueTypeConformance2();
  sub_255DD37CC(v108, v107, v118);
  uint64_t v119 = v305;
  uint64_t v121 = v305 + 8;
  long long v120 = *(void (**)(char *, uint64_t))(v305 + 8);
  v120(v108, v107);
  uint64_t v122 = (uint64_t)v310;
  long long v123 = &v322[v321[18]];
  char v124 = *v123;
  uint64_t v125 = *((void *)v123 + 1);
  LOBYTE(v326) = v124;
  uint64_t v327 = v125;
  sub_255E3A650(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  uint64_t v126 = sub_255EEF820();
  uint64_t v127 = 1;
  uint64_t v128 = v308;
  uint64_t v129 = v309;
  if (LOBYTE(v325[0]) != 1) {
    goto LABEL_14;
  }
  v314 = v113;
  MEMORY[0x270FA5388](v126);
  v318 = (char *)((char *)&v246 - v292);
  uint64_t v130 = MEMORY[0x270FA5388](&v322[v321[11]]);
  long long v131 = (char *)&v246 - v293;
  sub_255E3A2BC(v130, (uint64_t)&v246 - v293, (uint64_t (*)(void))sub_255D80868);
  uint64_t v132 = v320;
  uint64_t v133 = (uint64_t (*)(char *, uint64_t, char *))v320[6];
  int v134 = v133(v131, 1, v313);
  v316 = v120;
  uint64_t v317 = v121;
  uint64_t v315 = v118;
  if (v134 == 1)
  {
    uint64_t v135 = sub_255E3AAD4((uint64_t)v131, (uint64_t (*)(void))sub_255D80868);
    MEMORY[0x270FA5388](v135);
    v137 = (char *)&v246 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v138 = MEMORY[0x270FA5388](&v322[v321[12]]);
    v140 = (char *)&v246 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255E3A2BC(v138, (uint64_t)v140, (uint64_t (*)(void))sub_255D80868);
    if (v133(v140, 1, v313) == 1)
    {
      sub_255E3AAD4((uint64_t)v140, (uint64_t (*)(void))sub_255D80868);
      sub_255EEED10();
      sub_255E3A358(0, &qword_269F36F90, MEMORY[0x270FA9128], MEMORY[0x263F1B750]);
      MEMORY[0x270FA5388](v141 - 8);
      sub_255EEF840();
      sub_255E3A358(0, &qword_269F36F98, MEMORY[0x263F19B78], MEMORY[0x263F8E0F8]);
      uint64_t v142 = swift_allocObject();
      *(_OWORD *)(v142 + 16) = xmmword_255EF20B0;
      sub_255EEEE20();
      v326 = (char *)v142;
      sub_255E3A734(&qword_269F36FA0, MEMORY[0x263F19B78]);
      sub_255E3A324(0);
      sub_255E3A734(&qword_269F36FB0, sub_255E3A324);
      sub_255EF0270();
      v143 = v256;
      sub_255EEE500();
      v144 = v259;
      sub_255EEEF50();
      unint64_t v145 = sub_255E38EA4();
      uint64_t v146 = sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
      v147 = v257;
      v148 = v262;
      uint64_t v149 = v264;
      sub_255EEF4D0();
      (*(void (**)(char *, uint64_t))(v260 + 8))(v144, v149);
      (*(void (**)(char *, char *))(v258 + 8))(v143, v148);
      uint64_t v150 = v263;
      v151 = v261;
      v152 = v147;
      uint64_t v153 = v266;
      (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v261, v152, v266);
      (*(void (**)(uint64_t, char *, uint64_t))(v150 + 16))(v269, v151, v153);
      swift_storeEnumTagMultiPayload();
      sub_255E3A148();
      v326 = v148;
      uint64_t v327 = v149;
      unint64_t v328 = v145;
      unint64_t v329 = v146;
      swift_getOpaqueTypeConformance2();
      uint64_t v154 = (uint64_t)v265;
      sub_255EEEE00();
      (*(void (**)(char *, uint64_t))(v150 + 8))(v151, v153);
LABEL_13:
      sub_255E3A3BC(v154, v304, (uint64_t)&qword_269F36E88, MEMORY[0x263F19B28], (uint64_t (*)(void, uint64_t, uint64_t))sub_255E38F8C);
      uint64_t v127 = 0;
      uint64_t v122 = (uint64_t)v310;
      uint64_t v129 = v309;
      uint64_t v128 = v308;
      long long v117 = v306;
      uint64_t v119 = v305;
      long long v120 = v316;
      uint64_t v118 = v315;
      uint64_t v107 = v307;
LABEL_14:
      uint64_t v243 = v304;
      uint64_t v244 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v304, v127, 1, v129);
      MEMORY[0x270FA5388](v244);
      v245 = (char *)&v246 - v270;
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))((char *)&v246 - v270, v117, v107);
      v326 = v245;
      sub_255E3A2BC(v243, v122, (uint64_t (*)(void))sub_255E39018);
      uint64_t v327 = v122;
      v325[0] = v107;
      v325[1] = v272;
      uint64_t v323 = v118;
      unint64_t v324 = sub_255E39F58();
      sub_255E3B2E8((uint64_t)&v326, 2uLL, (uint64_t)v325);
      sub_255E3AAD4(v243, (uint64_t (*)(void))sub_255E39018);
      v120(v117, v107);
      sub_255E3AAD4(v122, (uint64_t (*)(void))sub_255E39018);
      return ((uint64_t (*)(char *, uint64_t))v120)(v245, v107);
    }
    v322 = (char *)&v246;
    v181 = v320;
    ((void (*)(char *, char *, char *))v320[4])(v137, v140, v313);
    v321 = (int *)sub_255EEED10();
    v318 = v182;
    sub_255E3A358(0, &qword_269F36F90, MEMORY[0x270FA9128], MEMORY[0x263F1B750]);
    MEMORY[0x270FA5388](v183 - 8);
    sub_255EEF840();
    sub_255E3A42C(0, &qword_269F36FB8, MEMORY[0x263F8DFB8]);
    MEMORY[0x270FA5388](v184 - 8);
    v186 = (char *)&v246 - v185;
    v188 = v187;
    uint64_t result = sub_255EEFCC0();
    if (result)
    {
      v189 = (void (*)(char *, char *, char *))v181[2];
      v312 = v188;
      v189(v186, v188, v313);
      sub_255E3A358(0, &qword_269F36F98, MEMORY[0x263F19B78], MEMORY[0x263F8E0F8]);
      uint64_t v190 = swift_allocObject();
      *(_OWORD *)(v190 + 16) = xmmword_255EF20B0;
      sub_255EEEE20();
      v326 = (char *)v190;
      sub_255E3A734(&qword_269F36FA0, MEMORY[0x263F19B78]);
      sub_255E3A324(0);
      sub_255E3A734(&qword_269F36FB0, sub_255E3A324);
      sub_255EF0270();
      v191 = v256;
      sub_255EEE530();
      v192 = v259;
      sub_255EEEF50();
      unint64_t v193 = sub_255E38EA4();
      uint64_t v194 = sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
      v195 = v257;
      v196 = v262;
      uint64_t v197 = v264;
      sub_255EEF4D0();
      (*(void (**)(char *, uint64_t))(v260 + 8))(v192, v197);
      (*(void (**)(char *, char *))(v258 + 8))(v191, v196);
      uint64_t v198 = v263;
      v199 = v261;
      v200 = v195;
      uint64_t v201 = v266;
      (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v261, v200, v266);
      (*(void (**)(uint64_t, char *, uint64_t))(v198 + 16))(v250, v199, v201);
      swift_storeEnumTagMultiPayload();
      sub_255E3A184();
      v326 = v196;
      uint64_t v327 = v197;
      unint64_t v328 = v193;
      unint64_t v329 = v194;
      swift_getOpaqueTypeConformance2();
      uint64_t v202 = (uint64_t)v251;
      sub_255EEEE00();
      uint64_t v203 = MEMORY[0x263F19B28];
      sub_255E3A4EC(v202, v269, (uint64_t)&qword_269F36E48, MEMORY[0x263F19B28], (uint64_t (*)(void, uint64_t, uint64_t))sub_255E38D18);
      swift_storeEnumTagMultiPayload();
      sub_255E3A148();
      uint64_t v154 = (uint64_t)v265;
      sub_255EEEE00();
      sub_255E3A55C(v202, (uint64_t)&qword_269F36E48, v203, (uint64_t (*)(void))sub_255E38D18);
      (*(void (**)(char *, uint64_t))(v198 + 8))(v199, v201);
      ((void (*)(char *, char *))v319)(v312, v313);
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  v155 = (void (*)(void, void, void))v132[4];
  v156 = v313;
  v312 = (char *)(v132 + 4);
  v311 = v155;
  uint64_t v157 = ((uint64_t (*)(char *, char *, char *))v155)(v318, v131, v313);
  MEMORY[0x270FA5388](v157);
  v159 = (char *)&v246 - ((v158 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = MEMORY[0x270FA5388](&v322[v321[12]]);
  v162 = (char *)&v246 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E3A2BC(v160, (uint64_t)v162, (uint64_t (*)(void))sub_255D80868);
  int v163 = v133(v162, 1, v156);
  v302 = &v246;
  if (v163 == 1)
  {
    sub_255E3AAD4((uint64_t)v162, (uint64_t (*)(void))sub_255D80868);
    v322 = (char *)sub_255EEED10();
    sub_255E3A358(0, &qword_269F36F90, MEMORY[0x270FA9128], MEMORY[0x263F1B750]);
    MEMORY[0x270FA5388](v164 - 8);
    sub_255EEF840();
    sub_255E3A42C(0, &qword_269F36FC0, MEMORY[0x263F8DE70]);
    MEMORY[0x270FA5388](v165 - 8);
    v167 = (char *)&v246 - v166;
    uint64_t result = sub_255EEFCC0();
    if ((result & 1) == 0)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    ((void (*)(char *, char *, char *))v320[2])(v167, v318, v313);
    sub_255E3A358(0, &qword_269F36F98, MEMORY[0x263F19B78], MEMORY[0x263F8E0F8]);
    uint64_t v169 = swift_allocObject();
    *(_OWORD *)(v169 + 16) = xmmword_255EF20B0;
    sub_255EEEE20();
    v326 = (char *)v169;
    sub_255E3A734(&qword_269F36FA0, MEMORY[0x263F19B78]);
    sub_255E3A324(0);
    sub_255E3A734(&qword_269F36FB0, sub_255E3A324);
    sub_255EF0270();
    v170 = v256;
    sub_255EEE520();
    v171 = v259;
    sub_255EEEF50();
    unint64_t v172 = sub_255E38EA4();
    uint64_t v173 = sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
    v174 = v257;
    v175 = v262;
    uint64_t v176 = v264;
    sub_255EEF4D0();
    (*(void (**)(char *, uint64_t))(v260 + 8))(v171, v176);
    (*(void (**)(char *, char *))(v258 + 8))(v170, v175);
    uint64_t v177 = v263;
    v178 = v261;
    uint64_t v179 = v266;
    (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v261, v174, v266);
    (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v247, v178, v179);
    swift_storeEnumTagMultiPayload();
    v326 = v175;
    uint64_t v327 = v176;
    unint64_t v328 = v172;
    unint64_t v329 = v173;
    swift_getOpaqueTypeConformance2();
    uint64_t v180 = v252;
    sub_255EEEE00();
    (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v179);
LABEL_12:
    uint64_t v238 = MEMORY[0x263F19B28];
    sub_255E3A4EC(v180, v250, (uint64_t)&qword_269F36E50, MEMORY[0x263F19B28], (uint64_t (*)(void, uint64_t, uint64_t))sub_255E38F28);
    swift_storeEnumTagMultiPayload();
    sub_255E3A184();
    unint64_t v239 = sub_255E38EA4();
    uint64_t v240 = sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
    v326 = v175;
    uint64_t v327 = v176;
    unint64_t v328 = v239;
    unint64_t v329 = v240;
    swift_getOpaqueTypeConformance2();
    uint64_t v241 = (uint64_t)v251;
    sub_255EEEE00();
    uint64_t v242 = MEMORY[0x263F19B28];
    sub_255E3A4EC(v241, v269, (uint64_t)&qword_269F36E48, MEMORY[0x263F19B28], (uint64_t (*)(void, uint64_t, uint64_t))sub_255E38D18);
    swift_storeEnumTagMultiPayload();
    sub_255E3A148();
    uint64_t v154 = (uint64_t)v265;
    sub_255EEEE00();
    sub_255E3A55C(v241, (uint64_t)&qword_269F36E48, v242, (uint64_t (*)(void))sub_255E38D18);
    sub_255E3A55C(v252, (uint64_t)&qword_269F36E50, v238, (uint64_t (*)(void))sub_255E38F28);
    ((void (*)(char *, char *))v319)(v318, v313);
    goto LABEL_13;
  }
  v321 = (int *)&v246;
  v311(v159, v162, v313);
  uint64_t v303 = sub_255EEED10();
  uint64_t v301 = v204;
  LODWORD(v299) = v205;
  uint64_t v300 = v206;
  sub_255E3A358(0, &qword_269F36F90, MEMORY[0x270FA9128], MEMORY[0x263F1B750]);
  v298 = &v246;
  MEMORY[0x270FA5388](v207 - 8);
  v297 = (char *)&v246 - v208;
  sub_255EEF840();
  sub_255E3A42C(0, &qword_269F36FC8, MEMORY[0x263F8D1A0]);
  v296 = &v246;
  uint64_t v294 = v209;
  unint64_t v210 = (*(void *)(*(void *)(v209 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v209);
  uint64_t v295 = (uint64_t)&v246 - v210;
  sub_255E3A4A8((unint64_t *)&qword_269F35060);
  v211 = v159;
  uint64_t result = sub_255EEFCB0();
  if (result)
  {
    v292 = (char *)&v246;
    MEMORY[0x270FA5388](result);
    v322 = (char *)&v246 - v210;
    sub_255E3A5BC();
    v291 = &v246;
    uint64_t v213 = v212 - 8;
    uint64_t v214 = *(void *)(*(void *)(v212 - 8) + 64);
    MEMORY[0x270FA5388](v212);
    unint64_t v215 = (v214 + 15) & 0xFFFFFFFFFFFFFFF0;
    v216 = (char *)&v246 + *(int *)(v213 + 56) - v215;
    v217 = (void (*)(char *, char *, char *))v320[2];
    v218 = v313;
    v217((char *)&v246 - v215, v318, v313);
    uint64_t v290 = (uint64_t)v216;
    v219 = v211;
    uint64_t v293 = (uint64_t)v211;
    v220 = v218;
    uint64_t v221 = ((uint64_t (*)(char *, char *, char *))v217)(v216, v219, v218);
    v320 = &v246;
    MEMORY[0x270FA5388](v221);
    v222 = (char *)&v246 + *(int *)(v213 + 56) - v215;
    v217((char *)&v246 - v215, (char *)&v246 - v215, v220);
    v217(v222, v216, v220);
    v223 = (void (*)(char *, char *, char *))v311;
    v311(v322, (char *)&v246 - v215, v220);
    v224 = (void (*)(char *, char *))v319;
    uint64_t v225 = ((uint64_t (*)(char *, char *))v319)(v222, v220);
    v320 = &v246;
    MEMORY[0x270FA5388](v225);
    v226 = (char *)&v246 - v215;
    v227 = (char *)&v246 + *(int *)(v213 + 56) - v215;
    v223((char *)&v246 - v215, (char *)&v246 - v215, v220);
    v223(v227, (char *)v290, v220);
    uint64_t v228 = (uint64_t)v322;
    v223(&v322[*(int *)(v294 + 36)], v227, v220);
    v224(v226, v220);
    sub_255E3A3BC(v228, v295, (uint64_t)&qword_269F36FC8, MEMORY[0x263F8D1A0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255E3A42C);
    sub_255E3A358(0, &qword_269F36F98, MEMORY[0x263F19B78], MEMORY[0x263F8E0F8]);
    uint64_t v229 = swift_allocObject();
    *(_OWORD *)(v229 + 16) = xmmword_255EF20B0;
    sub_255EEEE20();
    v326 = (char *)v229;
    sub_255E3A734(&qword_269F36FA0, MEMORY[0x263F19B78]);
    sub_255E3A324(0);
    sub_255E3A734(&qword_269F36FB0, sub_255E3A324);
    sub_255EF0270();
    v230 = v256;
    sub_255EEE510();
    v231 = v259;
    sub_255EEEF50();
    unint64_t v232 = sub_255E38EA4();
    uint64_t v233 = sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
    v234 = v257;
    v175 = v262;
    uint64_t v176 = v264;
    sub_255EEF4D0();
    (*(void (**)(char *, uint64_t))(v260 + 8))(v231, v176);
    (*(void (**)(char *, char *))(v258 + 8))(v230, v175);
    uint64_t v235 = v263;
    v236 = v261;
    uint64_t v237 = v266;
    (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v261, v234, v266);
    (*(void (**)(char *, char *, uint64_t))(v235 + 16))(v247, v236, v237);
    swift_storeEnumTagMultiPayload();
    v326 = v175;
    uint64_t v327 = v176;
    unint64_t v328 = v232;
    unint64_t v329 = v233;
    swift_getOpaqueTypeConformance2();
    uint64_t v180 = v252;
    sub_255EEEE00();
    (*(void (**)(char *, uint64_t))(v235 + 8))(v236, v237);
    v224((char *)v293, v313);
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_255E36AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255DD8400();
  sub_255E3908C(255);
  sub_255EEEE10();
  swift_getTupleTypeMetadata3();
  sub_255EEFB90();
  swift_getWitnessTable();
  uint64_t v6 = sub_255EEF8C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v16[-v11];
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a1;
  sub_255EEEC90();
  sub_255EEF8B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_255DD37CC(v10, v6, WitnessTable);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  sub_255DD37CC(v12, v6, WitnessTable);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v12, v6);
}

void sub_255E36D10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v75 = a4;
  uint64_t v70 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v69 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v68 = (char *)&v68 - v9;
  sub_255E3908C(0);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v71 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v74 = a3;
  uint64_t v13 = (int *)type metadata accessor for DatePickerEditView();
  uint64_t v77 = *((void *)v13 - 1);
  MEMORY[0x270FA5388](v13);
  uint64_t v76 = (char *)&v68 - v14;
  uint64_t v72 = v11;
  uint64_t v73 = a2;
  uint64_t v15 = sub_255EEEE10();
  uint64_t v81 = *(void *)(v15 - 8);
  uint64_t v82 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v84 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v80 = (char *)&v68 - v18;
  sub_255DD8400();
  uint64_t v78 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v79 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v68 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v83 = (uint64_t)&v68 - v25;
  uint64_t v26 = (uint64_t *)(a1 + v13[9]);
  uint64_t v27 = (uint64_t *)v26[1];
  uint64_t v93 = *v26;
  uint64_t v94 = v27;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v28 = MEMORY[0x263F8D310];
  uint64_t v29 = sub_255EEF3D0();
  uint64_t v31 = (uint64_t)v30;
  uint64_t v93 = v29;
  uint64_t v94 = v30;
  char v33 = v32 & 1;
  LOBYTE(v95) = v32 & 1;
  uint64_t v96 = v34;
  sub_255E3A650(0, (unint64_t *)&qword_269F37DA0, v28, MEMORY[0x263F8E0F8]);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_255EF1E20;
  uint64_t v36 = (void *)(a1 + v13[16]);
  uint64_t v37 = v36[1];
  *(void *)(v35 + 32) = *v36;
  *(void *)(v35 + 40) = v37;
  *(void *)(v35 + 48) = 0x656C746954;
  *(void *)(v35 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v38 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v39 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v39)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v29, v31, v33);
    swift_bridgeObjectRelease();
    uint64_t v40 = v83;
    sub_255E3A6CC((uint64_t)v24, v83, (uint64_t (*)(void))sub_255DD8400);
    sub_255D80868(0);
    MEMORY[0x270FA5388](v41 - 8);
    uint64_t v43 = (char *)&v68 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    MEMORY[0x25A29B390]();
    uint64_t v44 = sub_255EEE100();
    int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44);
    sub_255E3AAD4((uint64_t)v43, (uint64_t (*)(void))sub_255D80868);
    uint64_t v46 = v77;
    uint64_t v47 = v76;
    (*(void (**)(char *, uint64_t, int *))(v77 + 16))(v76, a1, v13);
    if (v45 == 1)
    {
      uint64_t v48 = &v47[v13[18]];
      char v49 = *v48;
      uint64_t v50 = (uint64_t *)*((void *)v48 + 1);
      LOBYTE(v93) = v49;
      uint64_t v94 = v50;
      sub_255E3A650(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
      sub_255EEF820();
      uint64_t v51 = (*(uint64_t (**)(char *, int *))(v46 + 8))(v47, v13);
      uint64_t v53 = v81;
      uint64_t v52 = v82;
      unint64_t v54 = v84;
      uint64_t v56 = (uint64_t)v79;
      uint64_t v55 = v80;
      if (LOBYTE(v90[0]) != 1)
      {
        uint64_t v57 = *(void (**)(uint64_t))(a1 + v13[15]);
        uint64_t v58 = (uint64_t)v69;
        v57(v51);
        uint64_t v59 = v68;
        uint64_t v60 = v73;
        uint64_t v61 = v74;
        sub_255DD37CC(v58, v73, v74);
        uint64_t v77 = *(void *)(v70 + 8);
        ((void (*)(uint64_t, uint64_t))v77)(v58, v60);
        unint64_t v54 = v84;
        sub_255DD37CC(v59, v60, v61);
        sub_255E3A734(&qword_269F36FE8, sub_255E3908C);
        sub_255DD3900(v58, v72, v60);
        uint64_t v62 = v58;
        uint64_t v63 = (void (*)(char *, uint64_t))v77;
        ((void (*)(uint64_t, uint64_t))v77)(v62, v60);
        v63(v59, v60);
        uint64_t v40 = v83;
LABEL_7:
        sub_255E3A2BC(v40, v56, (uint64_t (*)(void))sub_255DD8400);
        uint64_t v91 = 0;
        char v92 = 1;
        uint64_t v93 = v56;
        uint64_t v94 = &v91;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, v55, v52);
        uint64_t v95 = v54;
        v90[0] = v78;
        v90[1] = MEMORY[0x263F1B6B0];
        v90[2] = v52;
        unint64_t v87 = sub_255DD84C8();
        uint64_t v88 = MEMORY[0x263F1B698];
        uint64_t v85 = sub_255E3A734(&qword_269F36FE8, sub_255E3908C);
        uint64_t v86 = v61;
        uint64_t WitnessTable = swift_getWitnessTable();
        sub_255E3B2E8((uint64_t)&v93, 3uLL, (uint64_t)v90);
        uint64_t v67 = *(void (**)(char *, uint64_t))(v53 + 8);
        v67(v55, v52);
        sub_255E3AAD4(v40, (uint64_t (*)(void))sub_255DD8400);
        v67(v54, v52);
        sub_255E3AAD4(v56, (uint64_t (*)(void))sub_255DD8400);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, int *))(v46 + 8))(v47, v13);
      uint64_t v53 = v81;
      uint64_t v52 = v82;
      unint64_t v54 = v84;
      uint64_t v56 = (uint64_t)v79;
      uint64_t v55 = v80;
    }
    uint64_t v64 = sub_255EEEC90();
    uint64_t v65 = (uint64_t)v71;
    *uint64_t v71 = v64;
    *(void *)(v65 + 8) = 0;
    *(unsigned char *)(v65 + 16) = 1;
    sub_255E3AA70(0, &qword_269F36FF0, sub_255E390C8);
    uint64_t v61 = v74;
    sub_255E376AC(v65 + *(int *)(v66 + 44));
    sub_255E3A734(&qword_269F36FE8, sub_255E3908C);
    sub_255DD3808(v65, v72);
    sub_255E3AAD4(v65, (uint64_t (*)(void))sub_255E3908C);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_255E376AC@<X0>(uint64_t a1@<X8>)
{
  sub_255E39190(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v16 - v6;
  uint64_t v8 = type metadata accessor for DatePickerEditView();
  sub_255E32B1C(v8, (uint64_t)v7);
  sub_255E33850(v8, v16);
  uint64_t v9 = v16[0];
  uint64_t v10 = v16[1];
  uint64_t v11 = v16[2];
  uint64_t v12 = v16[3];
  sub_255E3A2BC((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))sub_255E39190);
  sub_255E3A2BC((uint64_t)v5, a1, (uint64_t (*)(void))sub_255E39190);
  sub_255E390FC();
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(v13 + 48));
  *uint64_t v14 = v9;
  v14[1] = v10;
  v14[2] = v11;
  v14[3] = v12;
  sub_255E3A77C(v9, v10);
  sub_255E3AAD4((uint64_t)v7, (uint64_t (*)(void))sub_255E39190);
  sub_255E3A7C0(v9, v10);
  return sub_255E3AAD4((uint64_t)v5, (uint64_t (*)(void))sub_255E39190);
}

uint64_t sub_255E3782C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255DD8400();
  sub_255E3994C(255);
  sub_255EEEE10();
  swift_getTupleTypeMetadata2();
  sub_255EEFB90();
  swift_getWitnessTable();
  uint64_t v6 = sub_255EEF950();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v16[-v11];
  sub_255EEED80();
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a1;
  sub_255EEF940();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_255DD37CC(v10, v6, WitnessTable);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  sub_255DD37CC(v12, v6, WitnessTable);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v12, v6);
}

void sub_255E37A3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v74 = a4;
  uint64_t v68 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v67 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v69 = (char *)&v67 - v9;
  sub_255E3994C(0);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v70 = (uint64_t *)((char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = a3;
  uint64_t v13 = (int *)type metadata accessor for DatePickerEditView();
  uint64_t v76 = *((void *)v13 - 1);
  MEMORY[0x270FA5388](v13);
  uint64_t v75 = (char *)&v67 - v14;
  uint64_t v71 = v11;
  uint64_t v72 = a2;
  uint64_t v15 = sub_255EEEE10();
  uint64_t v80 = *(void *)(v15 - 8);
  uint64_t v81 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v79 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v78 = (char *)&v67 - v18;
  sub_255DD8400();
  uint64_t v77 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v83 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v67 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v82 = (uint64_t)&v67 - v25;
  uint64_t v26 = (uint64_t *)(a1 + v13[9]);
  uint64_t v27 = (char *)v26[1];
  uint64_t v89 = *v26;
  uint64_t v90 = v27;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v28 = MEMORY[0x263F8D310];
  uint64_t v29 = sub_255EEF3D0();
  uint64_t v31 = v30;
  uint64_t v89 = v29;
  uint64_t v90 = (char *)v30;
  char v33 = v32 & 1;
  char v91 = v32 & 1;
  uint64_t v92 = v34;
  sub_255E3A650(0, (unint64_t *)&qword_269F37DA0, v28, MEMORY[0x263F8E0F8]);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_255EF1E20;
  uint64_t v36 = (void *)(a1 + v13[16]);
  uint64_t v37 = v36[1];
  *(void *)(v35 + 32) = *v36;
  *(void *)(v35 + 40) = v37;
  *(void *)(v35 + 48) = 0x656C746954;
  *(void *)(v35 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v38 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v39 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v39)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v29, v31, v33);
    swift_bridgeObjectRelease();
    uint64_t v40 = v82;
    sub_255E3A6CC((uint64_t)v24, v82, (uint64_t (*)(void))sub_255DD8400);
    sub_255D80868(0);
    MEMORY[0x270FA5388](v41 - 8);
    uint64_t v43 = (char *)&v67 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    MEMORY[0x25A29B390]();
    uint64_t v44 = sub_255EEE100();
    int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44);
    sub_255E3AAD4((uint64_t)v43, (uint64_t (*)(void))sub_255D80868);
    uint64_t v47 = v75;
    uint64_t v46 = v76;
    (*(void (**)(char *, uint64_t, int *))(v76 + 16))(v75, a1, v13);
    if (v45 == 1)
    {
      uint64_t v48 = &v47[v13[18]];
      char v49 = *v48;
      uint64_t v50 = (char *)*((void *)v48 + 1);
      LOBYTE(v89) = v49;
      uint64_t v90 = v50;
      sub_255E3A650(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
      sub_255EEF820();
      uint64_t v51 = (*(uint64_t (**)(char *, int *))(v46 + 8))(v47, v13);
      uint64_t v53 = v80;
      uint64_t v52 = v81;
      uint64_t v55 = v78;
      unint64_t v54 = v79;
      uint64_t v56 = (uint64_t)v83;
      if (LOBYTE(v88[0]) != 1)
      {
        uint64_t v57 = (uint64_t)v67;
        (*(void (**)(uint64_t))(a1 + v13[15]))(v51);
        uint64_t v58 = v69;
        uint64_t v59 = v72;
        uint64_t v60 = v73;
        sub_255DD37CC(v57, v72, v73);
        uint64_t v76 = *(void *)(v68 + 8);
        ((void (*)(uint64_t, uint64_t))v76)(v57, v59);
        uint64_t v56 = (uint64_t)v83;
        sub_255DD37CC(v58, v59, v60);
        sub_255E3A734(&qword_269F36FD8, sub_255E3994C);
        sub_255DD3900(v57, v71, v59);
        uint64_t v61 = v57;
        uint64_t v40 = v82;
        uint64_t v62 = (void (*)(char *, uint64_t))v76;
        ((void (*)(uint64_t, uint64_t))v76)(v61, v59);
        v62(v69, v59);
LABEL_7:
        sub_255E3A2BC(v40, v56, (uint64_t (*)(void))sub_255DD8400);
        uint64_t v89 = v56;
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, v55, v52);
        uint64_t v90 = v54;
        v88[0] = v77;
        v88[1] = v52;
        unint64_t v86 = sub_255DD84C8();
        uint64_t v84 = sub_255E3A734(&qword_269F36FD8, sub_255E3994C);
        uint64_t v85 = v60;
        uint64_t WitnessTable = swift_getWitnessTable();
        sub_255E3B2E8((uint64_t)&v89, 2uLL, (uint64_t)v88);
        uint64_t v66 = *(void (**)(char *, uint64_t))(v53 + 8);
        v66(v55, v52);
        sub_255E3AAD4(v40, (uint64_t (*)(void))sub_255DD8400);
        v66(v54, v52);
        sub_255E3AAD4(v56, (uint64_t (*)(void))sub_255DD8400);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, int *))(v46 + 8))(v47, v13);
      uint64_t v53 = v80;
      uint64_t v52 = v81;
      uint64_t v55 = v78;
      unint64_t v54 = v79;
      uint64_t v56 = (uint64_t)v83;
    }
    uint64_t v63 = sub_255EEEC90();
    uint64_t v64 = (uint64_t)v70;
    *uint64_t v70 = v63;
    *(void *)(v64 + 8) = 0;
    *(unsigned char *)(v64 + 16) = 1;
    sub_255E3AA70(0, &qword_269F36FE0, sub_255E39A1C);
    uint64_t v60 = v73;
    sub_255E38388(v64 + *(int *)(v65 + 44));
    sub_255E3A734(&qword_269F36FD8, sub_255E3994C);
    sub_255DD3808(v64, v71);
    sub_255E3AAD4(v64, (uint64_t (*)(void))sub_255E3994C);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_255E38388@<X0>(uint64_t a1@<X8>)
{
  sub_255E39190(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = type metadata accessor for DatePickerEditView();
  sub_255E32B1C(v8, (uint64_t)v7);
  sub_255E33850(v8, v17);
  uint64_t v9 = v17[0];
  uint64_t v10 = v17[1];
  uint64_t v11 = v17[2];
  uint64_t v12 = v17[3];
  sub_255E3A2BC((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))sub_255E39190);
  sub_255E3A2BC((uint64_t)v5, a1, (uint64_t (*)(void))sub_255E39190);
  sub_255E39A50();
  uint64_t v14 = a1 + *(int *)(v13 + 48);
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = (uint64_t *)(a1 + *(int *)(v13 + 64));
  *uint64_t v15 = v9;
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  sub_255E3A77C(v9, v10);
  sub_255E3AAD4((uint64_t)v7, (uint64_t (*)(void))sub_255E39190);
  sub_255E3A7C0(v9, v10);
  return sub_255E3AAD4((uint64_t)v5, (uint64_t (*)(void))sub_255E39190);
}

uint64_t sub_255E3851C()
{
  return sub_255EEE6A0();
}

uint64_t sub_255E38544()
{
  uint64_t v0 = sub_255EEE100();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  MEMORY[0x270FA5388](v0);
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255D80868(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePickerEditView();
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
  {
    uint64_t v7 = sub_255E3AAD4((uint64_t)v6, (uint64_t (*)(void))sub_255D80868);
    v12[1] = v12;
    MEMORY[0x270FA5388](v7);
    uint64_t v8 = *(uint64_t (**)(char *))(v1 + 16);
    uint64_t v9 = v8((char *)v12 - v3);
    MEMORY[0x270FA5388](v9);
    ((void (*)(char *, char *, uint64_t))v8)((char *)v12 - v3, (char *)v12 - v3, v0);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))((char *)v12 - v3, v6, v0);
    MEMORY[0x270FA5388](v11);
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))((char *)v12 - v3, (char *)v12 - v3, v0);
  }
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  sub_255EEF830();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))((char *)v12 - v3, v0);
}

uint64_t sub_255E38898(uint64_t a1)
{
  uint64_t v1 = *(void (**)(void))(a1 + *(int *)(type metadata accessor for DatePickerEditView() + 56));
  if (v1) {
    v1();
  }
  sub_255D80868(0);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))((char *)&v9 - v4, 1, v5);
  uint64_t result = sub_255E3AAD4((uint64_t)&v9 - v4, (uint64_t (*)(void))sub_255D80868);
  if (v7 != 1)
  {
    MEMORY[0x270FA5388](result);
    sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
    sub_255EEF820();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))((char *)&v9 - v4, 0, 1, v5);
    return sub_255E32A2C((uint64_t)&v9 - v4);
  }
  return result;
}

uint64_t sub_255E38AA4(uint64_t a1)
{
  sub_255D80868(0);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = type metadata accessor for DatePickerEditView();
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(&v14[-v4], 1, v6);
  uint64_t v9 = sub_255E3AAD4((uint64_t)&v14[-v4], (uint64_t (*)(void))sub_255D80868);
  if (v8 == 1)
  {
    MEMORY[0x270FA5388](v9);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(&v14[-v4], a1 + *(int *)(v5 + 40), v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(&v14[-v4], 0, 1, v6);
    sub_255E32A2C((uint64_t)&v14[-v4]);
  }
  uint64_t v10 = a1 + *(int *)(v5 + 72);
  uint64_t v12 = *(void *)(v10 + 8);
  v14[0] = *(unsigned char *)v10;
  char v11 = v14[0];
  uint64_t v15 = v12;
  sub_255E3A650(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  swift_retain();
  sub_255EEF820();
  v14[0] = v11;
  uint64_t v15 = v12;
  BOOL v16 = (v17 & 1) == 0;
  sub_255EEF830();
  return swift_release();
}

void sub_255E38D18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255E38F28(255, &qword_269F36E50, MEMORY[0x263F19B28]);
    uint64_t v7 = v6;
    sub_255E38DA4();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_255E38DA4()
{
  if (!qword_269F36E58)
  {
    sub_255E3954C(255, &qword_269F36E60, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F18390]);
    sub_255EEEF60();
    sub_255E38EA4();
    sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36E58);
    }
  }
}

unint64_t sub_255E38EA4()
{
  unint64_t result = qword_269F36E68;
  if (!qword_269F36E68)
  {
    sub_255E3954C(255, &qword_269F36E60, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F18390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36E68);
  }
  return result;
}

void sub_255E38F28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255E38DA4();
    unint64_t v7 = a3(a1, v6, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_255E38F8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255E38D18(255, &qword_269F36E48, MEMORY[0x263F19B28]);
    uint64_t v7 = v6;
    sub_255E38DA4();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_255E39018()
{
  if (!qword_269F36E90)
  {
    sub_255E38F8C(255, &qword_269F36E88, MEMORY[0x263F19B28]);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36E90);
    }
  }
}

void sub_255E3908C(uint64_t a1)
{
}

void sub_255E390C8(uint64_t a1)
{
}

void sub_255E390FC()
{
  if (!qword_269F36EA8)
  {
    sub_255E39190(255);
    sub_255E3A650(255, &qword_269F36F38, (uint64_t)&type metadata for ClearButtonView, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F36EA8);
    }
  }
}

void sub_255E39190(uint64_t a1)
{
}

void sub_255E391C4()
{
  if (!qword_269F36EB8)
  {
    sub_255E39280(255, &qword_269F36EC0, sub_255E39314, (unint64_t *)&qword_269F35128, MEMORY[0x263F1A180]);
    sub_255E3959C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F36EB8);
    }
  }
}

void sub_255E39280(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255E3954C(255, a4, MEMORY[0x263F1B440], MEMORY[0x263F1B420], a5);
    unint64_t v8 = sub_255EEE870();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E39314(uint64_t a1)
{
}

void sub_255E39348(uint64_t a1)
{
}

void sub_255E3937C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E393F0(uint64_t a1)
{
}

void sub_255E3942C()
{
  if (!qword_269F36EE0)
  {
    sub_255E3954C(255, &qword_269F35138, MEMORY[0x263F1A830], MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36EE0);
    }
  }
}

void sub_255E394B8()
{
  if (!qword_269F36EF0)
  {
    sub_255EEE920();
    sub_255E3A734(&qword_269F36EF8, MEMORY[0x263F19048]);
    unint64_t v0 = sub_255EEE6B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36EF0);
    }
  }
}

void sub_255E3954C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_255E3959C()
{
  unint64_t result = qword_269F36F00;
  if (!qword_269F36F00)
  {
    uint64_t v1 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x263F1A180];
    sub_255E39280(255, &qword_269F36EC0, sub_255E39314, (unint64_t *)&qword_269F35128, MEMORY[0x263F1A180]);
    sub_255E3970C(&qword_269F36F08, sub_255E39314, (void (*)(void))sub_255E396C4, (void (*)(void))sub_255D84EE0);
    sub_255E398F4((unint64_t *)&qword_269F369E0, (unint64_t *)&qword_269F35128, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F00);
  }
  return result;
}

uint64_t sub_255E396C4()
{
  return sub_255E3970C(&qword_269F36F10, sub_255E39348, (void (*)(void))sub_255E39798, (void (*)(void))sub_255E398C0);
}

uint64_t sub_255E3970C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E39798()
{
  unint64_t result = qword_269F36F18;
  if (!qword_269F36F18)
  {
    sub_255E393F0(255);
    sub_255E39848();
    sub_255E398F4((unint64_t *)&qword_269F36F28, &qword_269F36EE8, MEMORY[0x263F1A158]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F18);
  }
  return result;
}

unint64_t sub_255E39848()
{
  unint64_t result = qword_269F36F20;
  if (!qword_269F36F20)
  {
    sub_255E3942C();
    sub_255DAD5C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F20);
  }
  return result;
}

uint64_t sub_255E398C0()
{
  return sub_255E3A734(&qword_269F36F30, (void (*)(uint64_t))sub_255E394B8);
}

uint64_t sub_255E398F4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E3954C(255, a2, MEMORY[0x263F1B440], MEMORY[0x263F1B420], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E3994C(uint64_t a1)
{
}

void sub_255E39988(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255E3A734(a4, a5);
    unint64_t v8 = sub_255EEF8C0();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E39A1C(uint64_t a1)
{
}

void sub_255E39A50()
{
  if (!qword_269F36F58)
  {
    sub_255E39190(255);
    sub_255E3A650(255, &qword_269F36F38, (uint64_t)&type metadata for ClearButtonView, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F36F58);
    }
  }
}

unint64_t sub_255E39AEC()
{
  unint64_t result = qword_269F36F68;
  if (!qword_269F36F68)
  {
    sub_255D80868(255);
    sub_255E3A4A8(&qword_269F361E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F68);
  }
  return result;
}

uint64_t sub_255E39B70()
{
  return sub_255E39E78(sub_255E36AF8);
}

uint64_t objectdestroyTm_14()
{
  uint64_t v1 = (int *)type metadata accessor for DatePickerEditView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  swift_release();
  swift_release();
  sub_255E3A358(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v5 = v3 + *(int *)(v4 + 32);
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v3 + v1[10], v6);
  uint64_t v10 = v3 + v1[11];
  if (!v8(v10, 1, v6)) {
    v9(v10, v6);
  }
  uint64_t v11 = v3 + v1[12];
  if (!v8(v11, 1, v6)) {
    v9(v11, v6);
  }
  if (*(void *)(v3 + v1[14])) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  v9(v3 + v1[17], v6);
  sub_255E3A358(0, &qword_269F362E0, MEMORY[0x270FA9128], MEMORY[0x263F1B5D0]);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E39E60()
{
  return sub_255E39E78(sub_255E3782C);
}

uint64_t sub_255E39E78(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for DatePickerEditView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1(v5, v2, v3);
}

uint64_t sub_255E39F24()
{
  return sub_255E3A820((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_255E38544);
}

uint64_t sub_255E39F40()
{
  return sub_255E3A820((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_255E38898);
}

unint64_t sub_255E39F58()
{
  unint64_t result = qword_269F36F70;
  if (!qword_269F36F70)
  {
    sub_255E39018();
    sub_255E3A000(&qword_269F36F78, (uint64_t)&qword_269F36E88, (void (*)(uint64_t, uint64_t, void))sub_255E38F8C, (void (*)(void))sub_255E3A148);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F70);
  }
  return result;
}

uint64_t sub_255E3A000(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(255, a2, MEMORY[0x263F19B28]);
    a4();
    sub_255E3954C(255, &qword_269F36E60, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F18390]);
    sub_255EEEF60();
    sub_255E38EA4();
    sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
    swift_getOpaqueTypeConformance2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E3A148()
{
  return sub_255E3A000(&qword_269F36F80, (uint64_t)&qword_269F36E48, (void (*)(uint64_t, uint64_t, void))sub_255E38D18, (void (*)(void))sub_255E3A184);
}

unint64_t sub_255E3A184()
{
  unint64_t result = qword_269F36F88;
  if (!qword_269F36F88)
  {
    sub_255E38F28(255, &qword_269F36E50, MEMORY[0x263F19B28]);
    sub_255E3954C(255, &qword_269F36E60, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F18390]);
    sub_255EEEF60();
    sub_255E38EA4();
    sub_255E3A734(&qword_269F36E70, MEMORY[0x263F1A0F0]);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F88);
  }
  return result;
}

uint64_t sub_255E3A2BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255E3A324(uint64_t a1)
{
}

void sub_255E3A358(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E3A3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_255E3A42C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_255EEE100();
    uint64_t v7 = sub_255E3A4A8((unint64_t *)&qword_269F35060);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E3A4A8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255EEE100();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E3A4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_255E3A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_255E3A5BC()
{
  if (!qword_269F36FD0)
  {
    sub_255EEE100();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F36FD0);
    }
  }
}

uint64_t sub_255E3A624()
{
  return sub_255E38AA4(*(void *)(v0 + 32));
}

void sub_255E3A644(uint64_t a1@<X8>)
{
  sub_255E37A3C(v1[4], v1[2], v1[3], a1);
}

void sub_255E3A650(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255E3A69C()
{
  qword_269F36DA8 = 0x4020000000000000;
}

void sub_255E3A6AC()
{
  qword_269F36DB0 = 0x4026000000000000;
}

void sub_255E3A6BC()
{
  qword_269F36DB8 = 0x401C000000000000;
}

uint64_t sub_255E3A6CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E3A734(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E3A77C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_255E3A7C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_255E3A808()
{
  return sub_255E3A820((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_255E33A30);
}

uint64_t sub_255E3A820(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for DatePickerEditView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1(v5, v2, v3);
}

uint64_t sub_255E3A8B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E3A90C(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E3A96C()
{
  uint64_t v0 = type metadata accessor for DatePickerEditView();
  return sub_255E33798(v0);
}

uint64_t sub_255E3A9D0(uint64_t a1)
{
  sub_255E39280(0, &qword_269F36EC0, sub_255E39314, (unint64_t *)&qword_269F35128, MEMORY[0x263F1A180]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255E3AA64(uint64_t a1@<X8>)
{
  sub_255E36D10(v1[4], v1[2], v1[3], a1);
}

void sub_255E3AA70(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE7B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E3AAD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E3AB34()
{
  return swift_getWitnessTable();
}

void sub_255E3AEA4(uint64_t a1, void *a2)
{
  sub_255E3B048();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_255E3B1C4;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_255E3B244;
  aBlock[3] = &block_descriptor_4;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_fetchMedicalIDDataWithCompletion_, v10);
  _Block_release(v10);
}

void sub_255E3B048()
{
  if (!qword_269F36FF8)
  {
    sub_255D896F4();
    sub_255D89E7C();
    unint64_t v0 = sub_255EEFF50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36FF8);
    }
  }
}

uint64_t sub_255E3B0B8(void *a1, id a2)
{
  if (a2)
  {
    id v2 = a2;
    sub_255E3B048();
    return sub_255EEFF30();
  }
  else
  {
    sub_255E3B048();
    id v5 = a1;
    return sub_255EEFF40();
  }
}

uint64_t sub_255E3B134()
{
  sub_255E3B048();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_255E3B1C4(void *a1, void *a2)
{
  sub_255E3B048();
  return sub_255E3B0B8(a1, a2);
}

void sub_255E3B244(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_255E3B2E8(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  id v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    unint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        BOOL v16 = &v8[8 * v9];
        char v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)BOOL v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return sub_255EEFBA0();
}

void sub_255E3B4AC()
{
  sub_255E3CA10(255, &qword_269F37088, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, MEMORY[0x263F8D8F0]);
  swift_getTupleTypeMetadata2();
  sub_255EEFB90();
  swift_getWitnessTable();
  uint64_t v0 = sub_255EEF950();
  MEMORY[0x270FA5388](v0);
  uint64_t v1 = sub_255EEE870();
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  MEMORY[0x270FA5388](v2);
  sub_255EEED80();
  sub_255EEF940();
  swift_getWitnessTable();
  sub_255E5B380();
}

uint64_t sub_255E3B6F4()
{
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  unint64_t v9 = sub_255E3C79C();
  *(void *)(v8 - 96) = v0;
  *(void *)(v8 - 88) = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_255DD37CC(v7, v2, WitnessTable);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v11(v7, v2);
  sub_255DD37CC(v5, v2, WitnessTable);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v5, v2);
}

uint64_t sub_255E3B7AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v55 = (char *)&v40 - v12;
  long long v13 = (int *)type metadata accessor for MedicalIDCellHeaderView();
  uint64_t v53 = *((void *)v13 - 1);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E3CA10(0, &qword_269F37088, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, MEMORY[0x263F8D8F0]);
  uint64_t v54 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v40 - v20;
  if (*((unsigned char *)a1 + 64) == 1)
  {
    uint64_t v45 = *a1;
    uint64_t v46 = a3;
    uint64_t v22 = a1[1];
    int v23 = *((unsigned __int8 *)a1 + 16);
    int v43 = *((unsigned __int8 *)a1 + 17);
    int v44 = v23;
    uint64_t v24 = a1[3];
    uint64_t v51 = a1[4];
    uint64_t v52 = v22;
    uint64_t v41 = a1[5];
    uint64_t v42 = v24;
    uint64_t v50 = a1[6];
    uint64_t v25 = (uint64_t *)&v15[v13[5]];
    *uint64_t v25 = swift_getKeyPath();
    sub_255E3CA10(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = v13[6];
    uint64_t v47 = v11;
    uint64_t v48 = a4;
    uint64_t v27 = (uint64_t *)&v15[v26];
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    uint64_t v49 = v8;
    sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    *uint64_t v27 = sub_255EEE9F0();
    v27[1] = v28;
    uint64_t v29 = (uint64_t *)&v15[v13[7]];
    sub_255D7ED10(0, &qword_269F35500);
    sub_255DD7C58(&qword_269F35DD8, &qword_269F35500);
    *uint64_t v29 = sub_255EEE9F0();
    v29[1] = v30;
    uint64_t v31 = (uint64_t *)&v15[v13[8]];
    sub_255D7ED10(0, (unint64_t *)&qword_269F35518);
    uint64_t v8 = v49;
    sub_255DD7C58(&qword_269F35DE0, (unint64_t *)&qword_269F35518);
    a3 = v46;
    *uint64_t v31 = sub_255EEE9F0();
    v31[1] = v32;
    uint64_t v11 = v47;
    uint64_t v33 = v52;
    *(void *)uint64_t v15 = v45;
    *((void *)v15 + 1) = v33;
    v15[16] = v44;
    v15[17] = v43;
    uint64_t v34 = v51;
    *((void *)v15 + 3) = v42;
    *((void *)v15 + 4) = v34;
    uint64_t v35 = v50;
    *((void *)v15 + 5) = v41;
    *((void *)v15 + 6) = v35;
    sub_255E3CA74((uint64_t)v15, (uint64_t)v21);
    (*(void (**)(char *, void, uint64_t, int *))(v53 + 56))(v21, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, int *))(v53 + 56))((char *)&v40 - v20, 1, 1, v13);
  }
  uint64_t v36 = (uint64_t)a1 + *(int *)(type metadata accessor for MedicalIDCellView() + 44);
  uint64_t v37 = v55;
  sub_255DD37CC(v36, a2, a3);
  sub_255E3C7F0((uint64_t)v21, (uint64_t)v19);
  v59[0] = v19;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v37, a2);
  v59[1] = v11;
  v58[0] = v54;
  v58[1] = a2;
  unint64_t v56 = sub_255E3C884();
  uint64_t v57 = a3;
  sub_255E3B2E8((uint64_t)v59, 2uLL, (uint64_t)v58);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
  v38(v37, a2);
  sub_255E3C97C((uint64_t)v21);
  v38(v11, a2);
  return sub_255E3C97C((uint64_t)v19);
}

void sub_255E3BCE0()
{
  qword_269F37000 = 0x4018000000000000;
}

uint64_t sub_255E3BCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t sub_255E3BCF8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E3BDAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 65) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v10;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v11 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v11;
    uint64_t v12 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v12;
    unint64_t v13 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v13 = *(void *)v14;
    *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
    uint64_t v15 = (v13 + v6 + 9) & ~v6;
    uint64_t v16 = (v14 + v6 + 9) & ~v6;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v17(v15, v16, v4);
  }
  return a1;
}

uint64_t sub_255E3BF08(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((a1 + 63) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return v5(v6);
}

uint64_t sub_255E3BF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  unint64_t v7 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v12 = (v11 + 9 + v7) & ~v11;
  uint64_t v13 = (v11 + 9 + v8) & ~v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10(v12, v13, v9);
  return a1;
}

uint64_t sub_255E3C074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v7 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(unsigned __int8 *)(v9 + 80) + 9 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_255E3C174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  unint64_t v5 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 9 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 9 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_255E3C214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  unint64_t v8 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_255E3C2EC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 65) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 9) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_255E3C494(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 65) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x255E3C70CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 63) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for MedicalIDCellView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_255E3C74C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E3C790@<X0>(uint64_t a1@<X8>)
{
  return sub_255E3B7AC(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_255E3C79C()
{
  unint64_t result = qword_269F37090;
  if (!qword_269F37090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37090);
  }
  return result;
}

uint64_t sub_255E3C7F0(uint64_t a1, uint64_t a2)
{
  sub_255E3CA10(0, &qword_269F37088, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_255E3C884()
{
  unint64_t result = qword_269F37098;
  if (!qword_269F37098)
  {
    sub_255E3CA10(255, &qword_269F37088, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, MEMORY[0x263F8D8F0]);
    sub_255E3C924();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37098);
  }
  return result;
}

unint64_t sub_255E3C924()
{
  unint64_t result = qword_269F370A0;
  if (!qword_269F370A0)
  {
    type metadata accessor for MedicalIDCellHeaderView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F370A0);
  }
  return result;
}

uint64_t sub_255E3C97C(uint64_t a1)
{
  sub_255E3CA10(0, &qword_269F37088, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDCellHeaderView, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255E3CA10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E3CA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDCellHeaderView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E3CAD8()
{
  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for MedicalIDEditMedicalNotesModalView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for MedicalIDEditMedicalNotesModalView()
{
  return swift_release();
}

uint64_t assignWithCopy for MedicalIDEditMedicalNotesModalView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MedicalIDEditMedicalNotesModalView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDEditMedicalNotesModalView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditMedicalNotesModalView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditMedicalNotesModalView()
{
  return &type metadata for MedicalIDEditMedicalNotesModalView;
}

uint64_t sub_255E3CD60()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E3CD7C(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v38 = a1;
  int v37 = a2 & 1;
  uint64_t v4 = type metadata accessor for MedicalIDData();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_255EEFD40();
  uint64_t v40 = &v35;
  MEMORY[0x270FA5388](v10 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  BOOL v11 = (void *)qword_269F352A8;
  uint64_t v12 = sub_255EEE200();
  MEMORY[0x270FA5388](v12 - 8);
  id v13 = v11;
  sub_255EEE1F0();
  uint64_t v14 = sub_255EEFDA0();
  uint64_t v41 = v15;
  uint64_t v42 = v14;
  if (qword_269F34B18 != -1) {
    swift_once();
  }
  uint64_t v16 = 0x4E6C61636964654DLL;
  uint64_t v39 = qword_269F3FD90;
  uint64_t v40 = (uint64_t *)MEMORY[0x270FA5388](*(void *)algn_269F3FD98);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_255EEFCD0();
  unint64_t v18 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v17);
  id v19 = v18;
  sub_255EEE1F0();
  uint64_t v20 = sub_255EEFDA0();
  uint64_t v36 = v21;
  uint64_t v22 = swift_retain();
  uint64_t v23 = sub_255DAA2A0(v22, v37);
  swift_release();
  swift_getKeyPath();
  uint64_t v43 = v23;
  sub_255E3D35C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v24 = v23 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255D895B0(v24, (uint64_t)v9);
  swift_release();
  LoadState<>.loadedValue.getter((uint64_t)v6);
  sub_255D89614((uint64_t)v9, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v26 = *((void *)v6 + 7);
  uint64_t v25 = *((void *)v6 + 8);
  swift_bridgeObjectRetain();
  sub_255D89614((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  sub_255D7F1F0();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_255EF1E20;
  *(void *)(v27 + 32) = 0x496C61636964654DLL;
  *(void *)(v27 + 40) = 0xE900000000000044;
  unint64_t v28 = 0xEC0000007365746FLL;
  strcpy((char *)(v27 + 48), "MedicalNotes");
  *(unsigned char *)(v27 + 61) = 0;
  *(_WORD *)(v27 + 62) = -5120;
  uint64_t v29 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v30 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v30)
  {
    uint64_t v16 = sub_255EEFD90();
    unint64_t v28 = v31;
  }
  uint64_t v32 = v41;
  *a3 = v42;
  a3[1] = v32;
  uint64_t v33 = v40;
  a3[2] = v39;
  a3[3] = (uint64_t)v33;
  uint64_t v34 = v36;
  a3[4] = v20;
  a3[5] = v34;
  a3[6] = v26;
  a3[7] = v25;
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = v16;
  a3[11] = v28;
}

uint64_t sub_255E3D268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  return result;
}

double sub_255E3D2B0@<D0>(uint64_t a1@<X8>)
{
  sub_255E3CD7C(*(void *)v1, *(unsigned char *)(v1 + 8), (uint64_t *)v4);
  return sub_255E45818(v4, (uint64_t)sub_255E3D268, 0, a1);
}

uint64_t sub_255E3D314()
{
  return sub_255E3D35C((unint64_t *)&qword_269F35E18, (void (*)(uint64_t))type metadata accessor for MedicalIDEditFreeformTextModalView);
}

uint64_t sub_255E3D35C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ImageProcessorError.hash(into:)()
{
  return sub_255EF0550();
}

BOOL static ImageProcessorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ImageProcessorError.hashValue.getter()
{
  return sub_255EF0580();
}

uint8_t *_s11MedicalIDUI16UIImageProcessorV5scale5image2toSo0C0CSgAH_So6CGSizeVtAA05ImageD5ErrorOYKF(uint8_t *a1, unsigned char *a2, double a3, double a4)
{
  if (a3 <= 0.0 || a4 <= 0.0)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_255EEE3D0();
    __swift_project_value_buffer(v19, (uint64_t)qword_269F3FE80);
    uint64_t v20 = sub_255EEE3B0();
    os_log_type_t v21 = sub_255EF00C0();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v43 = v22;
      *(_DWORD *)uint64_t v4 = 136315394;
      sub_255DB0024(0xD000000000000010, 0x8000000255EF54E0, &v43);
      sub_255EF0200();
      *((_WORD *)v4 + 6) = 2080;
      uint64_t v23 = sub_255EF01A0();
      sub_255DB0024(v23, v24, &v43);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v20, v21, "[%s]: passed in an invalid size: %s", v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v22, -1, -1);
      MEMORY[0x25A29C8A0](v4, -1, -1);
    }

    goto LABEL_26;
  }
  uint64_t v4 = a1;
  [(uint8_t *)a1 size];
  if (v9 <= 0.0 || v8 <= 0.0)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_255EEE3D0();
    __swift_project_value_buffer(v25, (uint64_t)qword_269F3FE80);
    uint64_t v4 = v4;
    uint64_t v26 = sub_255EEE3B0();
    os_log_type_t v27 = sub_255EF00C0();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v43 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      sub_255DB0024(0xD000000000000010, 0x8000000255EF54E0, &v43);
      sub_255EF0200();
      *(_WORD *)(v28 + 12) = 2080;
      [(uint8_t *)v4 size];
      uint64_t v30 = sub_255EF01A0();
      sub_255DB0024(v30, v31, &v43);
      sub_255EF0200();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v26, v27, "[%s]: passed in an image with an invalid size: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v29, -1, -1);
      MEMORY[0x25A29C8A0](v28, -1, -1);
    }
    else
    {
    }
LABEL_26:
    *a2 = 0;
    LOBYTE(v43) = 0;
LABEL_27:
    sub_255E3DD34();
    swift_willThrowTypedImpl();
    return v4;
  }
  [(uint8_t *)v4 size];
  if (v11 == a3 && v10 == a4)
  {
    uint64_t v32 = v4;
    return v4;
  }
  id v13 = (uint8_t *)sub_255E3DB68(v4, a4 / a3);
  if (!v13)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_255EEE3D0();
    __swift_project_value_buffer(v34, (uint64_t)qword_269F3FE80);
    uint64_t v35 = sub_255EEE3B0();
    os_log_type_t v36 = sub_255EF00C0();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v43 = v37;
      *(_DWORD *)uint64_t v4 = 136315138;
      sub_255DB0024(0xD000000000000010, 0x8000000255EF54E0, &v43);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v35, v36, "[%s]: Could not crop image", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v37, -1, -1);
      MEMORY[0x25A29C8A0](v4, -1, -1);
    }

    *a2 = 2;
    LOBYTE(v43) = 2;
    goto LABEL_27;
  }
  uint64_t v4 = v13;
  [(uint8_t *)v13 size];
  if (v14 > a3)
  {
    id v15 = -[uint8_t imageByPreparingThumbnailOfSize:](v4, sel_imageByPreparingThumbnailOfSize_, a3, a4);
    if (v15)
    {
      uint64_t v16 = v15;
      objc_msgSend(v15, sel_size);
      if (v18 > 0.0 && v17 > 0.0)
      {

        return (uint8_t *)v16;
      }
    }
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v38 = sub_255EEE3D0();
    __swift_project_value_buffer(v38, (uint64_t)qword_269F3FE80);
    uint64_t v39 = sub_255EEE3B0();
    os_log_type_t v40 = sub_255EF00C0();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      sub_255DB0024(0xD000000000000010, 0x8000000255EF54E0, &v43);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v39, v40, "[%s]: image scaling failed", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v42, -1, -1);
      MEMORY[0x25A29C8A0](v41, -1, -1);
    }

    *a2 = 1;
    LOBYTE(v43) = 1;
    sub_255E3DD34();
    swift_willThrowTypedImpl();
  }
  return v4;
}

id sub_255E3DB68(void *a1, double a2)
{
  id v3 = a1;
  objc_msgSend(a1, sel_size);
  if (v5 / v4 != a2)
  {
    objc_msgSend(v3, sel_size);
    double v8 = v7;
    double v10 = v9;
    objc_msgSend(v3, sel_size);
    double v12 = v11;
    objc_msgSend(v3, sel_size);
    double v14 = v13;
    objc_msgSend(v3, sel_size);
    if (v14 >= v12) {
      double v10 = floor(v15 * a2);
    }
    else {
      double v8 = floor(v16 / a2);
    }
    objc_msgSend(v3, sel_size);
    double v18 = v17;
    objc_msgSend(v3, sel_size);
    double v20 = v19;
    os_log_type_t v21 = (CGImage *)objc_msgSend(v3, sel_CGImage);
    if (v21)
    {
      uint64_t v22 = v21;
      v27.origin.y = floor(ceil(v20 * 0.5) - v10 * 0.5);
      v27.origin.x = floor(ceil(v18 * 0.5) - v8 * 0.5);
      v27.size.width = v8;
      v27.size.height = v10;
      CGImageRef v23 = CGImageCreateWithImageInRect(v21, v27);
      if (v23)
      {
        CGImageRef v24 = v23;
        id v25 = objc_msgSend(v3, sel_imageOrientation);
        id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_scale_orientation_, v24, v25, 1.0);

        return v3;
      }
    }
    return 0;
  }
  id v6 = v3;
  return v3;
}

uint8_t *sub_255E3DCFC(uint8_t *a1, unsigned char *a2, double a3, double a4)
{
  uint64_t result = _s11MedicalIDUI16UIImageProcessorV5scale5image2toSo0C0CSgAH_So6CGSizeVtAA05ImageD5ErrorOYKF(a1, &v7, a3, a4);
  if (v4) {
    *a2 = v7;
  }
  return result;
}

unint64_t sub_255E3DD34()
{
  unint64_t result = qword_269F370A8;
  if (!qword_269F370A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F370A8);
  }
  return result;
}

unint64_t sub_255E3DD8C()
{
  unint64_t result = qword_269F370B0;
  if (!qword_269F370B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F370B0);
  }
  return result;
}

uint64_t _s11MedicalIDUI14ImageProcessorP5scale5image2toSo7UIImageCSgAH_So6CGSizeVtAA0cD5ErrorOYKFTj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

unsigned char *storeEnumTagSinglePayload for ImageProcessorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E3DED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageProcessorError()
{
  return &type metadata for ImageProcessorError;
}

ValueMetadata *type metadata accessor for UIImageProcessor()
{
  return &type metadata for UIImageProcessor;
}

__n128 sub_255E3DF1C@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  double v14 = (int *)type metadata accessor for EditPrimaryLanguageCellView();
  uint64_t v15 = a8 + v14[7];
  sub_255DF8B38(0, (unint64_t *)&qword_269F35700, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
  long long v27 = 0uLL;
  sub_255EEF810();
  *(_OWORD *)uint64_t v15 = v24;
  *(void *)(v15 + 16) = v26;
  uint64_t v16 = a8 + v14[8];
  LOBYTE(v27) = 0;
  sub_255EEF810();
  *(unsigned char *)uint64_t v16 = v24;
  *(void *)(v16 + 8) = *((void *)&v24 + 1);
  sub_255E43CC4(a1, a8, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  double v17 = (unint64_t *)(a8 + v14[5]);
  *double v17 = a2;
  v17[1] = a3;
  void v17[2] = a4;
  v17[3] = a5;
  v25.n128_u64[0] = a2;
  v25.n128_u64[1] = a3;
  sub_255DFC538();
  uint64_t v19 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x25A29B390](&v27, v19);
  sub_255EEF810();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_255E43D2C(a1, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
  swift_bridgeObjectRelease();
  swift_release();
  __n128 result = v25;
  *(__n128 *)uint64_t v15 = v25;
  *(void *)(v15 + 16) = a4;
  os_log_type_t v21 = (void *)(a8 + v14[6]);
  *os_log_type_t v21 = a6;
  v21[1] = a7;
  return result;
}

uint64_t type metadata accessor for EditPrimaryLanguageCellView()
{
  uint64_t result = qword_269F370B8;
  if (!qword_269F370B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_255E3E154(void *a1, char *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    unsigned int v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    unint64_t v87 = (void *)*((void *)a2 + 12);
    uint64_t v88 = (void *)*((void *)a2 + 13);
    a1[12] = v87;
    a1[13] = v88;
    char v91 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v91[13];
    __dst = (char *)v4 + v12;
    double v13 = &a2[v12];
    uint64_t v14 = sub_255EEE100();
    uint64_t v90 = *(void *)(v14 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v87;
    id v17 = v88;
    if (v15(v13, 1, v14))
    {
      sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = v91[14];
    os_log_type_t v21 = (char *)v4 + v20;
    uint64_t v22 = &a2[v20];
    if (v15(&a2[v20], 1, v14))
    {
      sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v21, v22, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v21, 0, 1, v14);
    }
    uint64_t v24 = v91[15];
    __n128 v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = &a2[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *__n128 v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v91[16];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *uint64_t v29 = *(void *)v30;
    v29[1] = v31;
    *((unsigned char *)v4 + v91[17]) = a2[v91[17]];
    *((unsigned char *)v4 + v91[18]) = a2[v91[18]];
    uint64_t v32 = v91[19];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (uint64_t *)&a2[v32];
    unint64_t v35 = *(void *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_255D80890(*v34, v35);
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = v91[20];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = &a2[v37];
    uint64_t v40 = sub_255EEDF60();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_255E3E848(0, &qword_269F350B8, MEMORY[0x270FA8198], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v91[21];
    int v44 = *(void **)&a2[v43];
    *(void *)((char *)v4 + v43) = v44;
    uint64_t v45 = v91[22];
    uint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = &a2[v45];
    id v48 = v44;
    if (v15(v47, 1, v14))
    {
      sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v46, v47, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v46, 0, 1, v14);
    }
    uint64_t v50 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    uint64_t v51 = v50[5];
    uint64_t v52 = (char *)v4 + v51;
    uint64_t v53 = &a2[v51];
    uint64_t v54 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
    uint64_t v55 = v50[6];
    unint64_t v56 = (char *)v4 + v55;
    uint64_t v57 = &a2[v55];
    uint64_t v58 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
    uint64_t v59 = v50[7];
    uint64_t v60 = *(void **)&a2[v59];
    *(void *)((char *)v4 + v59) = v60;
    uint64_t v61 = v50[8];
    uint64_t v62 = *(void **)&a2[v61];
    *(void *)((char *)v4 + v61) = v62;
    uint64_t v63 = v50[9];
    uint64_t v64 = (void *)((char *)v4 + v63);
    uint64_t v65 = &a2[v63];
    uint64_t v66 = *((void *)v65 + 1);
    *uint64_t v64 = *(void *)v65;
    v64[1] = v66;
    uint64_t v67 = a3[5];
    uint64_t v68 = a3[6];
    uint64_t v69 = (void *)((char *)v4 + v67);
    uint64_t v70 = &a2[v67];
    uint64_t v71 = *((void *)v70 + 1);
    *uint64_t v69 = *(void *)v70;
    v69[1] = v71;
    uint64_t v72 = *((void *)v70 + 3);
    v69[2] = *((void *)v70 + 2);
    v69[3] = v72;
    uint64_t v73 = (void *)((char *)v4 + v68);
    uint64_t v74 = &a2[v68];
    uint64_t v75 = *(void *)&a2[v68];
    id v76 = v60;
    id v77 = v62;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v75)
    {
      uint64_t v78 = *((void *)v74 + 1);
      void *v73 = v75;
      v73[1] = v78;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    }
    uint64_t v79 = a3[7];
    uint64_t v80 = a3[8];
    uint64_t v81 = (void *)((char *)v4 + v79);
    uint64_t v82 = &a2[v79];
    uint64_t v83 = *((void *)v82 + 1);
    *uint64_t v81 = *(void *)v82;
    v81[1] = v83;
    v81[2] = *((void *)v82 + 2);
    uint64_t v84 = (char *)v4 + v80;
    uint64_t v85 = &a2[v80];
    *uint64_t v84 = *v85;
    *((void *)v84 + 1) = *((void *)v85 + 1);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

void sub_255E3E848(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E3E8AC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unsigned int v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  id v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v17 = a1 + v16[5];
  uint64_t v18 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = a1 + v16[6];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 24))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *sub_255E3EC34(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  uint64_t v85 = (void *)*((void *)a2 + 12);
  unint64_t v86 = (void *)*((void *)a2 + 13);
  a1[12] = v85;
  a1[13] = v86;
  uint64_t v89 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v89[13];
  __dst = (char *)a1 + v11;
  uint64_t v12 = &a2[v11];
  uint64_t v13 = sub_255EEE100();
  uint64_t v88 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v85;
  id v16 = v86;
  if (v14(v12, 1, v13))
  {
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = v89[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v14(&a2[v18], 1, v13))
  {
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v89[15];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *uint64_t v23 = *(void *)v24;
  v23[1] = v25;
  uint64_t v26 = v89[16];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *uint64_t v27 = *(void *)v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v89[17]) = a2[v89[17]];
  *((unsigned char *)a1 + v89[18]) = a2[v89[18]];
  uint64_t v30 = v89[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (uint64_t *)&a2[v30];
  unint64_t v33 = *(void *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    sub_255D80890(*v32, v33);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v35 = v89[20];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_255EEDF60();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_255E3E848(0, &qword_269F350B8, MEMORY[0x270FA8198], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v41 = v89[21];
  uint64_t v42 = *(void **)&a2[v41];
  *(void *)((char *)a1 + v41) = v42;
  uint64_t v43 = v89[22];
  int v44 = (char *)a1 + v43;
  uint64_t v45 = &a2[v43];
  id v46 = v42;
  if (v14(v45, 1, v13))
  {
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v44, v45, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v44, 0, 1, v13);
  }
  id v48 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v49 = v48[5];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = &a2[v49];
  uint64_t v52 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  uint64_t v53 = v48[6];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = &a2[v53];
  uint64_t v56 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
  uint64_t v57 = v48[7];
  uint64_t v58 = *(void **)&a2[v57];
  *(void *)((char *)a1 + v57) = v58;
  uint64_t v59 = v48[8];
  uint64_t v60 = *(void **)&a2[v59];
  *(void *)((char *)a1 + v59) = v60;
  uint64_t v61 = v48[9];
  uint64_t v62 = (void *)((char *)a1 + v61);
  uint64_t v63 = &a2[v61];
  uint64_t v64 = *((void *)v63 + 1);
  *uint64_t v62 = *(void *)v63;
  v62[1] = v64;
  uint64_t v65 = a3[5];
  uint64_t v66 = a3[6];
  uint64_t v67 = (void *)((char *)a1 + v65);
  uint64_t v68 = &a2[v65];
  uint64_t v69 = *((void *)v68 + 1);
  *uint64_t v67 = *(void *)v68;
  v67[1] = v69;
  uint64_t v70 = *((void *)v68 + 3);
  v67[2] = *((void *)v68 + 2);
  v67[3] = v70;
  uint64_t v71 = (void *)((char *)a1 + v66);
  uint64_t v72 = &a2[v66];
  uint64_t v73 = *(void *)&a2[v66];
  id v74 = v58;
  id v75 = v60;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v73)
  {
    uint64_t v76 = *((void *)v72 + 1);
    *uint64_t v71 = v73;
    v71[1] = v76;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
  }
  uint64_t v77 = a3[7];
  uint64_t v78 = a3[8];
  uint64_t v79 = (void *)((char *)a1 + v77);
  uint64_t v80 = &a2[v77];
  uint64_t v81 = *((void *)v80 + 1);
  *uint64_t v79 = *(void *)v80;
  v79[1] = v81;
  v79[2] = *((void *)v80 + 2);
  uint64_t v82 = (char *)a1 + v78;
  uint64_t v83 = &a2[v78];
  char *v82 = *v83;
  *((void *)v82 + 1) = *((void *)v83 + 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

char *sub_255E3F2DC(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)a2[12];
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)a2[13];
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v99 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((unsigned char *)a2 + v11[17]);
  a1[v11[18]] = *((unsigned char *)a2 + v11[18]);
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v98 = v17;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  id v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = v98;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = v98;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255E3E848(0, &qword_269F350B8, MEMORY[0x270FA8198], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)((char *)a2 + v51);
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = (char *)a2 + v55;
  int v58 = v49(&a1[v55], 1, v99);
  int v59 = v49(v57, 1, v99);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v99);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v99);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v99);
LABEL_31:
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v99);
LABEL_32:
  uint64_t v61 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v62 = v61[5];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = (char *)a2 + v62;
  uint64_t v65 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 24))(v63, v64, v65);
  uint64_t v66 = v61[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = (char *)a2 + v66;
  uint64_t v69 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v61[7];
  uint64_t v71 = *(void **)&a1[v70];
  uint64_t v72 = *(void **)((char *)a2 + v70);
  *(void *)&a1[v70] = v72;
  id v73 = v72;

  uint64_t v74 = v61[8];
  id v75 = *(void **)((char *)a2 + v74);
  uint64_t v76 = *(void **)&a1[v74];
  *(void *)&a1[v74] = v75;
  id v77 = v75;

  uint64_t v78 = v61[9];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = (void *)((char *)a2 + v78);
  *(void *)uint64_t v79 = *v80;
  *((void *)v79 + 1) = v80[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = a3[5];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = (void *)((char *)a2 + v81);
  *(void *)&a1[v81] = *(void *)((char *)a2 + v81);
  swift_retain();
  swift_release();
  *((void *)v82 + 1) = v83[1];
  swift_retain();
  swift_release();
  *((void *)v82 + 2) = v83[2];
  *((void *)v82 + 3) = v83[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v84 = a3[6];
  uint64_t v85 = &a1[v84];
  unint64_t v86 = (char *)a2 + v84;
  uint64_t v87 = *(void *)&a1[v84];
  uint64_t v88 = *(void *)((char *)a2 + v84);
  if (!v87)
  {
    if (v88)
    {
      uint64_t v90 = *((void *)v86 + 1);
      *(void *)uint64_t v85 = v88;
      *((void *)v85 + 1) = v90;
      swift_retain();
      goto LABEL_39;
    }
LABEL_38:
    *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    goto LABEL_39;
  }
  if (!v88)
  {
    swift_release();
    goto LABEL_38;
  }
  uint64_t v89 = *((void *)v86 + 1);
  *(void *)uint64_t v85 = v88;
  *((void *)v85 + 1) = v89;
  swift_retain();
  swift_release();
LABEL_39:
  uint64_t v91 = a3[7];
  uint64_t v92 = &a1[v91];
  uint64_t v93 = (char *)a2 + v91;
  *(void *)uint64_t v92 = *(void *)((char *)a2 + v91);
  *((void *)v92 + 1) = *(void *)((char *)a2 + v91 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v92 + 2) = *((void *)v93 + 2);
  swift_retain();
  swift_release();
  uint64_t v94 = a3[8];
  uint64_t v95 = &a1[v94];
  uint64_t v96 = (char *)a2 + v94;
  char *v95 = *v96;
  *((void *)v95 + 1) = *((void *)v96 + 1);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255E3FC64(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v5[13];
  id v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v50 = v11;
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(unsigned char *)(a1 + v5[17]) = *(unsigned char *)(a2 + v5[17]);
  *(unsigned char *)(a1 + v5[18]) = *(unsigned char *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  uint64_t v17 = v5[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255E3E848(0, &qword_269F350B8, MEMORY[0x270FA8198], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v5[21]) = *(void *)(a2 + v5[21]);
  uint64_t v23 = v5[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v50((const void *)(a2 + v23), 1, v9))
  {
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v28 = v27[5];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
  uint64_t v32 = v27[6];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  *(void *)(a1 + v27[7]) = *(void *)(a2 + v27[7]);
  *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  uint64_t v36 = a3[5];
  uint64_t v37 = a3[6];
  uint64_t v38 = (_OWORD *)(a1 + v36);
  uint64_t v39 = (_OWORD *)(a2 + v36);
  long long v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v40;
  uint64_t v41 = (void *)(a1 + v37);
  uint64_t v42 = (uint64_t *)(a2 + v37);
  uint64_t v43 = *v42;
  if (*v42)
  {
    uint64_t v44 = v42[1];
    *uint64_t v41 = v43;
    v41[1] = v44;
  }
  else
  {
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  }
  uint64_t v45 = a3[7];
  uint64_t v46 = a3[8];
  uint64_t v47 = a1 + v45;
  uint64_t v48 = a2 + v45;
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
  *(void *)(v47 + 16) = *(void *)(v48 + 16);
  *(_OWORD *)(a1 + v46) = *(_OWORD *)(a2 + v46);
  return a1;
}

char *sub_255E401DC(char *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v101 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
  a1[v13[18]] = *((unsigned char *)a2 + v13[18]);
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = (char *)a2 + v39;
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v103 = v13;
  if (v42 >> 60 == 15)
  {
    uint64_t v43 = v19;
LABEL_17:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_19;
  }
  unint64_t v44 = *((void *)v41 + 1);
  uint64_t v43 = v19;
  if (v44 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_17;
  }
  uint64_t v45 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v44;
  sub_255D80D04(v45, v42);
LABEL_19:
  uint64_t v46 = v103[20];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = sub_255EEDF60();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (v52)
  {
    id v54 = v43;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v54 = v43;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_24:
    sub_255E3E848(0, &qword_269F350B8, MEMORY[0x270FA8198], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_25:
  uint64_t v56 = v103[21];
  uint64_t v57 = *(void **)&a1[v56];
  *(void *)&a1[v56] = *(void *)((char *)a2 + v56);

  uint64_t v58 = v103[22];
  int v59 = &a1[v58];
  uint64_t v60 = (char *)a2 + v58;
  int v61 = v54(&a1[v58], 1, v101);
  int v62 = v54(v60, 1, v101);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v59, v60, v101);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v101);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v101);
LABEL_30:
    sub_255E3E848(0, &qword_269F35058, MEMORY[0x270FA9140], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v59, v60, v101);
LABEL_31:
  uint64_t v64 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v65 = v64[5];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = (char *)a2 + v65;
  uint64_t v68 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 40))(v66, v67, v68);
  uint64_t v69 = v64[6];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = (char *)a2 + v69;
  uint64_t v72 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 40))(v70, v71, v72);
  uint64_t v73 = v64[7];
  uint64_t v74 = *(void **)&a1[v73];
  *(void *)&a1[v73] = *(void *)((char *)a2 + v73);

  uint64_t v75 = v64[8];
  uint64_t v76 = *(void **)&a1[v75];
  *(void *)&a1[v75] = *(void *)((char *)a2 + v75);

  uint64_t v77 = v64[9];
  uint64_t v78 = &a1[v77];
  uint64_t v79 = (void *)((char *)a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *(void *)uint64_t v78 = v81;
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[5];
  uint64_t v83 = &a1[v82];
  uint64_t v84 = (void *)((char *)a2 + v82);
  *(void *)&a1[v82] = *(void *)((char *)a2 + v82);
  swift_release();
  *((void *)v83 + 1) = v84[1];
  swift_release();
  uint64_t v85 = v84[3];
  *((void *)v83 + 2) = v84[2];
  *((void *)v83 + 3) = v85;
  swift_bridgeObjectRelease();
  uint64_t v86 = a3[6];
  uint64_t v87 = &a1[v86];
  uint64_t v88 = (char *)a2 + v86;
  uint64_t v89 = *(void *)&a1[v86];
  uint64_t v90 = *(void *)((char *)a2 + v86);
  if (!v89)
  {
    if (v90)
    {
      uint64_t v92 = *((void *)v88 + 1);
      *(void *)uint64_t v87 = v90;
      *((void *)v87 + 1) = v92;
      goto LABEL_38;
    }
LABEL_37:
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    goto LABEL_38;
  }
  if (!v90)
  {
    swift_release();
    goto LABEL_37;
  }
  uint64_t v91 = *((void *)v88 + 1);
  *(void *)uint64_t v87 = v90;
  *((void *)v87 + 1) = v91;
  swift_release();
LABEL_38:
  uint64_t v93 = a3[7];
  uint64_t v94 = &a1[v93];
  uint64_t v95 = (char *)a2 + v93;
  uint64_t v96 = *(void *)((char *)a2 + v93 + 8);
  *(void *)uint64_t v94 = *(void *)((char *)a2 + v93);
  *((void *)v94 + 1) = v96;
  swift_bridgeObjectRelease();
  *((void *)v94 + 2) = *((void *)v95 + 2);
  swift_release();
  uint64_t v97 = a3[8];
  uint64_t v98 = &a1[v97];
  uint64_t v99 = (char *)a2 + v97;
  char *v98 = *v99;
  *((void *)v98 + 1) = *((void *)v99 + 1);
  swift_release();
  return a1;
}

uint64_t sub_255E40A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E40A68);
}

uint64_t sub_255E40A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E40B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E40B40);
}

uint64_t sub_255E40B40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_255E40C00()
{
  uint64_t result = type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E40CAC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E40CC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v150 = a2;
  sub_255E43BBC(0, &qword_269F37190, MEMORY[0x263F19B20]);
  uint64_t v147 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v149 = (uint64_t)&v132 - v4;
  sub_255E3E848(0, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C, MEMORY[0x263F1BAC8]);
  uint64_t v148 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v132 - v6;
  sub_255E3E848(0, (unint64_t *)&qword_269F36460, (uint64_t (*)(uint64_t))sub_255DD8400, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v132 - v12;
  sub_255DD8400();
  uint64_t v146 = v14;
  uint64_t v143 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v142 = (char *)&v132 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v141 = (uint64_t)&v132 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  *(void *)&long long v144 = (char *)&v132 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v152 = (char *)&v132 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v132 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v132 - v29;
  uint64_t v31 = *(int *)(type metadata accessor for EditPrimaryLanguageCellView() + 20);
  uint64_t v151 = a1;
  uint64_t v32 = a1 + v31;
  uint64_t v33 = *(void *)(v32 + 8);
  uint64_t v153 = *(void *)v32;
  uint64_t v154 = v33;
  long long v155 = *(_OWORD *)(v32 + 16);
  sub_255DFC538();
  MEMORY[0x25A29B390](&v156);
  uint64_t v35 = v156;
  uint64_t v34 = v157;
  if (!v157)
  {
    *(void *)&long long v145 = v30;
    v152 = v28;
    uint64_t v60 = v151;
    sub_255EEED10();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    id v61 = (id)qword_269F352A8;
    uint64_t v62 = sub_255EEF3C0();
    uint64_t v64 = v63;
    char v66 = v65 & 1;
    uint64_t v153 = sub_255EEF6D0();
    uint64_t v67 = sub_255EEF370();
    uint64_t v69 = v68;
    char v71 = v70;
    uint64_t v73 = v72;
    sub_255D85120(v62, v64, v66);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v153 = v67;
    uint64_t v154 = v69;
    LOBYTE(v155) = v71 & 1;
    uint64_t v143 = v73;
    *((void *)&v155 + 1) = v73;
    sub_255DF8B38(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v74 = swift_allocObject();
    long long v144 = xmmword_255EF1E20;
    *(_OWORD *)(v74 + 16) = xmmword_255EF1E20;
    uint64_t v75 = swift_allocObject();
    *(_OWORD *)(v75 + 16) = v144;
    uint64_t v76 = (void *)(v60 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
    uint64_t v77 = v76[1];
    *(void *)(v75 + 32) = *v76;
    *(void *)(v75 + 40) = v77;
    uint64_t v78 = 0x4C7972616D697250;
    unint64_t v79 = 0xEF65676175676E61;
    *(void *)(v75 + 48) = 0x4C7972616D697250;
    *(void *)(v75 + 56) = 0xEF65676175676E61;
    swift_bridgeObjectRetain();
    uint64_t v80 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v81 = (id)HKUIJoinStringsForAutomationIdentifier();

    uint64_t v82 = v145;
    if (v81)
    {
      uint64_t v78 = sub_255EEFD90();
      unint64_t v79 = v83;
    }
    uint64_t v84 = (uint64_t)v152;
    *(void *)(v74 + 32) = v78;
    *(void *)(v74 + 40) = v79;
    *(void *)(v74 + 48) = 6579265;
    *(void *)(v74 + 56) = 0xE300000000000000;
    uint64_t v85 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v86 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v86)
    {
      sub_255EEFD90();

      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v67, v69, v71 & 1);
      swift_bridgeObjectRelease();
      sub_255E43C5C(v84, v82, (uint64_t (*)(void))sub_255DD8400);
      sub_255E43CC4(v82, v149, (uint64_t (*)(void))sub_255DD8400);
      swift_storeEnumTagMultiPayload();
      sub_255E437A0(&qword_269F37120, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C);
      sub_255DD84C8();
      sub_255EEEE00();
      uint64_t v87 = v82;
LABEL_19:
      sub_255E43D2C(v87, (uint64_t (*)(void))sub_255DD8400);
      return;
    }
    goto LABEL_21;
  }
  uint64_t v133 = v17;
  int v134 = v11;
  v140 = v13;
  uint64_t v135 = v7;
  uint64_t v153 = v156;
  uint64_t v154 = v157;
  uint64_t v153 = MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  uint64_t v154 = v36;
  unint64_t v139 = sub_255DAD520();
  uint64_t v37 = sub_255EEF3D0();
  uint64_t v39 = v38;
  char v41 = v40 & 1;
  uint64_t v153 = sub_255EEF6D0();
  uint64_t v42 = sub_255EEF370();
  uint64_t v44 = v43;
  int v46 = v45;
  LOBYTE(v45) = v41;
  uint64_t v48 = v47;
  sub_255D85120(v37, v39, v45);
  unint64_t v49 = 0xEF65676175676E61;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v138 = v42;
  uint64_t v153 = v42;
  uint64_t v154 = v44;
  uint64_t v137 = v44;
  int v136 = v46;
  LOBYTE(v155) = v46 & 1;
  *((void *)&v155 + 1) = v48;
  sub_255DF8B38(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v50 = swift_allocObject();
  long long v145 = xmmword_255EF1E20;
  *(_OWORD *)(v50 + 16) = xmmword_255EF1E20;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = v145;
  int v52 = (uint64_t *)(v151 + *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36));
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *(void *)(v51 + 32) = *v52;
  *(void *)(v51 + 40) = v53;
  *(void *)(v51 + 48) = 0x4C7972616D697250;
  *(void *)(v51 + 56) = 0xEF65676175676E61;
  uint64_t v151 = v53;
  swift_bridgeObjectRetain();
  uint64_t v55 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v56 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v57 = v35;
  if (v56)
  {
    uint64_t v58 = sub_255EEFD90();
    unint64_t v49 = v59;
  }
  else
  {
    uint64_t v58 = 0x4C7972616D697250;
  }
  *(void *)(v50 + 32) = v58;
  *(void *)(v50 + 40) = v49;
  *(void *)(v50 + 48) = 0xD000000000000012;
  *(void *)(v50 + 56) = 0x8000000255EFA660;
  uint64_t v88 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v89 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v89)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_255EEFD90();

  uint64_t v90 = v144;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  sub_255D85120(v138, v137, v136 & 1);
  swift_bridgeObjectRelease();
  uint64_t v91 = (uint64_t)v152;
  sub_255E43C5C(v90, (uint64_t)v152, (uint64_t (*)(void))sub_255DD8400);
  uint64_t v153 = v57;
  uint64_t v154 = v34;
  swift_bridgeObjectRetain();
  uint64_t v153 = MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  uint64_t v154 = v92;
  uint64_t v156 = v57;
  uint64_t v157 = v34;
  uint64_t v156 = MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
  uint64_t v157 = v93;
  char v94 = sub_255EF0250();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v94)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v95 = 1;
    uint64_t v96 = (uint64_t)v140;
LABEL_18:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 56))(v96, v95, 1, v146);
    uint64_t v125 = v91;
    uint64_t v126 = (uint64_t)v133;
    sub_255E43CC4(v125, (uint64_t)v133, (uint64_t (*)(void))sub_255DD8400);
    uint64_t v127 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
    uint64_t v128 = (uint64_t)v134;
    sub_255E43D8C(v96, (uint64_t)v134, (unint64_t *)&qword_269F36460, (uint64_t (*)(uint64_t))sub_255DD8400, MEMORY[0x263F8D8F0]);
    uint64_t v129 = (uint64_t)v135;
    sub_255E43CC4(v126, (uint64_t)v135, (uint64_t (*)(void))sub_255DD8400);
    sub_255E4352C();
    sub_255E43D8C(v128, v129 + *(int *)(v130 + 48), (unint64_t *)&qword_269F36460, (uint64_t (*)(uint64_t))sub_255DD8400, v127);
    sub_255E43DFC(v128, (unint64_t *)&qword_269F36460, (uint64_t (*)(uint64_t))sub_255DD8400, v127);
    sub_255E43D2C(v126, (uint64_t (*)(void))sub_255DD8400);
    long long v131 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1BAC8];
    sub_255E43D8C(v129, v149, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C, MEMORY[0x263F1BAC8]);
    swift_storeEnumTagMultiPayload();
    sub_255E437A0(&qword_269F37120, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C);
    sub_255DD84C8();
    sub_255EEEE00();
    uint64_t v87 = (uint64_t)v152;
    sub_255E43DFC(v129, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C, v131);
    sub_255E43DFC(v96, (unint64_t *)&qword_269F36460, (uint64_t (*)(uint64_t))sub_255DD8400, v127);
    goto LABEL_19;
  }
  uint64_t v153 = v57;
  uint64_t v154 = v34;
  uint64_t v97 = MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
  uint64_t v99 = v98;
  swift_bridgeObjectRelease_n();
  uint64_t v153 = v97;
  uint64_t v154 = v99;
  uint64_t v100 = sub_255EEF3D0();
  uint64_t v102 = v101;
  char v104 = v103 & 1;
  uint64_t v105 = sub_255EEF6D0();
  *(void *)&long long v144 = v54;
  uint64_t v153 = v105;
  uint64_t v106 = sub_255EEF370();
  uint64_t v108 = v107;
  char v110 = v109;
  unint64_t v112 = v111;
  char v113 = v104;
  unint64_t v114 = 0xEF65676175676E61;
  sub_255D85120(v100, v102, v113);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v138 = v106;
  uint64_t v153 = v106;
  uint64_t v154 = v108;
  LOBYTE(v155) = v110 & 1;
  unint64_t v139 = v112;
  *((void *)&v155 + 1) = v112;
  uint64_t v115 = swift_allocObject();
  *(_OWORD *)(v115 + 16) = v145;
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = v145;
  *(void *)(v116 + 32) = v144;
  uint64_t v117 = 0x4C7972616D697250;
  *(void *)(v116 + 40) = v151;
  *(void *)(v116 + 48) = 0x4C7972616D697250;
  *(void *)(v116 + 56) = 0xEF65676175676E61;
  swift_bridgeObjectRetain();
  uint64_t v118 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v119 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v119)
  {
    uint64_t v117 = sub_255EEFD90();
    unint64_t v114 = v120;
  }
  uint64_t v96 = (uint64_t)v140;
  *(void *)(v115 + 32) = v117;
  *(void *)(v115 + 40) = v114;
  *(void *)(v115 + 48) = 0xD000000000000014;
  *(void *)(v115 + 56) = 0x8000000255EFA680;
  uint64_t v121 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v122 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v122)
  {
    sub_255EEFD90();

    uint64_t v123 = (uint64_t)v142;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v138, v108, v110 & 1);
    swift_bridgeObjectRelease();
    uint64_t v124 = v141;
    sub_255E43C5C(v123, v141, (uint64_t (*)(void))sub_255DD8400);
    sub_255E43C5C(v124, v96, (uint64_t (*)(void))sub_255DD8400);
    uint64_t v95 = 0;
    uint64_t v91 = (uint64_t)v152;
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_255E41BAC(uint64_t a1)
{
  unint64_t v1 = (void (**)(void))(a1 + *(int *)(type metadata accessor for EditPrimaryLanguageCellView() + 24));
  if (*v1) {
    (*v1)();
  }
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  return sub_255EEF830();
}

uint64_t sub_255E41C60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v36 = a1;
  uint64_t v3 = type metadata accessor for EditPrimaryLanguageCellView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4310C();
  uint64_t v31 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v32 = (uint64_t)&v30 - v12;
  uint64_t v30 = v2;
  uint64_t v35 = type metadata accessor for EditPrimaryLanguageCellView;
  sub_255E43CC4(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v33 = v13 | 7;
  uint64_t v34 = v14 + v6;
  uint64_t v15 = swift_allocObject();
  sub_255E43C5C((uint64_t)v7, v15 + v14, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  sub_255E43CC4(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  uint64_t v16 = swift_allocObject();
  sub_255E43C5C((uint64_t)v7, v16 + v14, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  *uint64_t v11 = swift_getKeyPath();
  sub_255E3E848(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = v31;
  uint64_t v18 = (char *)v11 + *(int *)(v31 + 52);
  uint64_t v19 = *MEMORY[0x263F18CB8];
  uint64_t v20 = sub_255EEE860();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  uint64_t v21 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v11 + *(int *)(v17 + 56));
  *uint64_t v21 = sub_255E43808;
  v21[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v15;
  uint64_t v22 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v11 + *(int *)(v17 + 60));
  *uint64_t v22 = sub_255E4384C;
  v22[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v16;
  uint64_t v23 = v32;
  sub_255E43C5C((uint64_t)v11, v32, (uint64_t (*)(void))sub_255E4310C);
  uint64_t v24 = v30;
  uint64_t v25 = v30 + *(int *)(v4 + 40);
  char v26 = *(unsigned char *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  char v37 = v26;
  uint64_t v38 = v27;
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  sub_255E43CC4(v24, (uint64_t)v7, (uint64_t (*)(void))v35);
  uint64_t v28 = swift_allocObject();
  sub_255E43C5C((uint64_t)v7, v28 + v14, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
  sub_255E43994(&qword_269F37168, (void (*)(uint64_t))sub_255E4310C);
  sub_255E439DC();
  sub_255EEF5F0();
  swift_release();
  swift_release();
  swift_release();
  return sub_255E43D2C(v23, (uint64_t (*)(void))sub_255E4310C);
}

void sub_255E420A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v72 = a2;
  uint64_t v2 = type metadata accessor for EditPrimaryLanguageCellView();
  uint64_t v62 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v63 = v3;
  uint64_t v64 = (uint64_t)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E434AC();
  uint64_t v68 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E433F8();
  uint64_t v69 = v7;
  uint64_t v67 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v66 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E43324();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v71 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v57 - v12;
  sub_255DD8400();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v70 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  id v61 = (char *)&v57 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v65 = (uint64_t)&v57 - v19;
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v20 = 0x4C7972616D697250;
  id v21 = (id)qword_269F352A8;
  uint64_t v22 = sub_255EEF3C0();
  char v24 = v23;
  uint64_t v59 = v22;
  uint64_t v75 = v22;
  uint64_t v76 = v25;
  uint64_t v58 = v25;
  char v77 = v23 & 1;
  uint64_t v60 = v26;
  uint64_t v78 = v26;
  sub_255DF8B38(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v27 = swift_allocObject();
  long long v73 = xmmword_255EF1E20;
  *(_OWORD *)(v27 + 16) = xmmword_255EF1E20;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v73;
  uint64_t v29 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v30 = v74;
  uint64_t v31 = (void *)(v74 + *(int *)(v29 + 36));
  uint64_t v32 = v31[1];
  *(void *)(v28 + 32) = *v31;
  *(void *)(v28 + 40) = v32;
  unint64_t v33 = 0xEF65676175676E61;
  *(void *)(v28 + 48) = 0x4C7972616D697250;
  *(void *)(v28 + 56) = 0xEF65676175676E61;
  swift_bridgeObjectRetain();
  uint64_t v34 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v35 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v35)
  {
    uint64_t v20 = sub_255EEFD90();
    unint64_t v33 = v36;
  }
  *(void *)(v27 + 32) = v20;
  *(void *)(v27 + 40) = v33;
  *(void *)(v27 + 48) = 0x656C746954;
  *(void *)(v27 + 56) = 0xE500000000000000;
  char v37 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v38 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v38)
  {
    uint64_t v39 = v30;
    sub_255EEFD90();

    char v40 = v61;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v59, v58, v24 & 1);
    swift_bridgeObjectRelease();
    uint64_t v41 = (uint64_t)v40;
    uint64_t v42 = v65;
    sub_255E43C5C(v41, v65, (uint64_t (*)(void))sub_255DD8400);
    uint64_t v43 = sub_255EEED90();
    *(void *)uint64_t v13 = sub_255EEEC90();
    *((void *)v13 + 1) = 0;
    v13[16] = 1;
    sub_255E43AC8();
    int v45 = &v13[*(int *)(v44 + 44)];
    *(void *)uint64_t v6 = v43;
    *((void *)v6 + 1) = 0;
    v6[16] = 1;
    sub_255E43B30();
    sub_255E40CC8(v39, (uint64_t)&v6[*(int *)(v46 + 44)]);
    uint64_t v47 = v39;
    uint64_t v48 = v64;
    sub_255E43CC4(v47, v64, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
    unint64_t v49 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    uint64_t v50 = swift_allocObject();
    sub_255E43C5C(v48, v50 + v49, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
    sub_255E43994(&qword_269F37128, (void (*)(uint64_t))sub_255E434AC);
    uint64_t v51 = v66;
    sub_255EEF4B0();
    swift_release();
    sub_255E43D2C((uint64_t)v6, (uint64_t (*)(void))sub_255E434AC);
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v45, v51, v69);
    uint64_t v52 = v70;
    sub_255E43CC4(v42, v70, (uint64_t (*)(void))sub_255DD8400);
    uint64_t v53 = v71;
    sub_255E43CC4((uint64_t)v13, v71, (uint64_t (*)(void))sub_255E43324);
    uint64_t v54 = v72;
    sub_255E43CC4(v52, v72, (uint64_t (*)(void))sub_255DD8400);
    sub_255E432AC();
    uint64_t v56 = v54 + *(int *)(v55 + 48);
    *(void *)uint64_t v56 = 0;
    *(unsigned char *)(v56 + 8) = 1;
    sub_255E43CC4(v53, v54 + *(int *)(v55 + 64), (uint64_t (*)(void))sub_255E43324);
    sub_255E43D2C((uint64_t)v13, (uint64_t (*)(void))sub_255E43324);
    sub_255E43D2C(v42, (uint64_t (*)(void))sub_255DD8400);
    sub_255E43D2C(v53, (uint64_t (*)(void))sub_255E43324);
    sub_255E43D2C(v52, (uint64_t (*)(void))sub_255DD8400);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E42820@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a2();
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 1;
  a3(0);
  return a4(a1);
}

void sub_255E42888(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v3 = type metadata accessor for EditPrimaryLanguageCellView();
  uint64_t v60 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v61 = v4;
  uint64_t v62 = &v56[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255E434AC();
  uint64_t v65 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = &v56[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255E433F8();
  uint64_t v66 = v8;
  uint64_t v64 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v63 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255E43324();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v67 = &v56[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v58 = (uint64_t *)&v56[-v13];
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v14 = 0x4C7972616D697250;
  id v15 = (id)qword_269F352A8;
  uint64_t v16 = sub_255EEF3C0();
  uint64_t v18 = v17;
  int v57 = v19;
  uint64_t v59 = v20;
  sub_255DF8B38(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v21 = swift_allocObject();
  long long v69 = xmmword_255EF1E20;
  *(_OWORD *)(v21 + 16) = xmmword_255EF1E20;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v69;
  uint64_t v23 = *(int *)(type metadata accessor for MedicalIDPersonalInfoViewModel() + 36);
  *(void *)&long long v69 = a1;
  char v24 = (void *)(a1 + v23);
  uint64_t v25 = v24[1];
  *(void *)(v22 + 32) = *v24;
  *(void *)(v22 + 40) = v25;
  unint64_t v26 = 0xEF65676175676E61;
  *(void *)(v22 + 48) = 0x4C7972616D697250;
  *(void *)(v22 + 56) = 0xEF65676175676E61;
  swift_bridgeObjectRetain();
  uint64_t v27 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v28 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v28)
  {
    uint64_t v14 = sub_255EEFD90();
    unint64_t v26 = v29;
  }
  *(void *)(v21 + 32) = v14;
  *(void *)(v21 + 40) = v26;
  *(void *)(v21 + 48) = 0x656C746954;
  *(void *)(v21 + 56) = 0xE500000000000000;
  uint64_t v30 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v31 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v31)
  {
    char v32 = v57 & 1;
    uint64_t v33 = sub_255EEFD90();
    uint64_t v35 = v34;

    uint64_t v70 = v33;
    uint64_t v71 = v35;
    sub_255DAD520();
    uint64_t v36 = sub_255EEF380();
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    LOBYTE(v33) = v41 & 1;
    sub_255D85120(v16, v18, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = sub_255EEED80();
    uint64_t v43 = sub_255EEEC90();
    uint64_t v44 = (uint64_t)v58;
    *uint64_t v58 = v43;
    *(void *)(v44 + 8) = 0;
    *(unsigned char *)(v44 + 16) = 1;
    sub_255E43AC8();
    uint64_t v46 = v44 + *(int *)(v45 + 44);
    *(void *)uint64_t v7 = v42;
    *((void *)v7 + 1) = 0;
    v7[16] = 1;
    sub_255E43B30();
    uint64_t v48 = v69;
    sub_255E40CC8(v69, (uint64_t)&v7[*(int *)(v47 + 44)]);
    unint64_t v49 = v62;
    sub_255E43CC4(v48, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
    unint64_t v50 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v51 = swift_allocObject();
    sub_255E43C5C((uint64_t)v49, v51 + v50, (uint64_t (*)(void))type metadata accessor for EditPrimaryLanguageCellView);
    sub_255E43994(&qword_269F37128, (void (*)(uint64_t))sub_255E434AC);
    uint64_t v52 = v63;
    sub_255EEF4B0();
    swift_release();
    sub_255E43D2C((uint64_t)v7, (uint64_t (*)(void))sub_255E434AC);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v64 + 32))(v46, v52, v66);
    uint64_t v53 = v67;
    sub_255E43CC4(v44, (uint64_t)v67, (uint64_t (*)(void))sub_255E43324);
    uint64_t v54 = v68;
    *uint64_t v68 = v36;
    v54[1] = v38;
    *((unsigned char *)v54 + 16) = v33;
    v54[3] = v40;
    sub_255E43738();
    sub_255E43CC4((uint64_t)v53, (uint64_t)v54 + *(int *)(v55 + 48), (uint64_t (*)(void))sub_255E43324);
    sub_255D85214(v36, v38, v33);
    swift_bridgeObjectRetain();
    sub_255E43D2C(v44, (uint64_t (*)(void))sub_255E43324);
    sub_255E43D2C((uint64_t)v53, (uint64_t (*)(void))sub_255E43324);
    sub_255D85120(v36, v38, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_255E42F18(uint64_t a1@<X8>)
{
  type metadata accessor for EditPrimaryLanguageCellView();
  sub_255DFC538();
  sub_255EEF9A0();
  sub_255DF8B38(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  sub_255DF8B38(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_255EF1E20;
  *(void *)(v2 + 32) = 0x496C61636964654DLL;
  *(void *)(v2 + 40) = 0xE900000000000044;
  *(void *)(v2 + 48) = 0xD000000000000015;
  *(void *)(v2 + 56) = 0x8000000255EFA620;
  uint64_t v3 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v4 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v4)
  {
    uint64_t v5 = sub_255EEFD90();
    uint64_t v7 = v6;

    type metadata accessor for MedicalIDSpokenLanguagePickerViewModel();
    swift_allocObject();
    int64_t v8 = MedicalIDSpokenLanguagePickerViewModel.init(primaryLanguageCode:)(v9, v10, v11, v12);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v7;
  }
  else
  {
    __break(1u);
  }
}

void sub_255E4310C()
{
  if (!qword_269F370C8)
  {
    sub_255E431F8();
    sub_255E43684();
    sub_255E43994(&qword_269F37158, (void (*)(uint64_t))sub_255E431F8);
    sub_255E43994(&qword_269F37160, (void (*)(uint64_t))sub_255E43684);
    unint64_t v0 = type metadata accessor for MedicalIDAXLayoutView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F370C8);
    }
  }
}

void sub_255E431F8()
{
  if (!qword_269F370D0)
  {
    sub_255E3E848(255, &qword_269F370D8, (uint64_t (*)(uint64_t))sub_255E432AC, MEMORY[0x263F1BAC8]);
    sub_255E437A0(&qword_269F37130, &qword_269F370D8, (uint64_t (*)(uint64_t))sub_255E432AC);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F370D0);
    }
  }
}

void sub_255E432AC()
{
  if (!qword_269F370E0)
  {
    sub_255DD8400();
    sub_255E43324();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F370E0);
    }
  }
}

void sub_255E43324()
{
  if (!qword_269F370E8)
  {
    sub_255E433F8();
    sub_255E434AC();
    sub_255E43994(&qword_269F37128, (void (*)(uint64_t))sub_255E434AC);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F370E8);
    }
  }
}

void sub_255E433F8()
{
  if (!qword_269F370F0)
  {
    sub_255E434AC();
    sub_255E43994(&qword_269F37128, (void (*)(uint64_t))sub_255E434AC);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F370F0);
    }
  }
}

void sub_255E434AC()
{
  if (!qword_269F370F8)
  {
    sub_255E43BBC(255, &qword_269F37100, MEMORY[0x263F19B28]);
    sub_255E435CC();
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F370F8);
    }
  }
}

void sub_255E4352C()
{
  if (!qword_269F37110)
  {
    sub_255DD8400();
    sub_255E3E848(255, (unint64_t *)&qword_269F36460, (uint64_t (*)(uint64_t))sub_255DD8400, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37110);
    }
  }
}

unint64_t sub_255E435CC()
{
  unint64_t result = qword_269F37118;
  if (!qword_269F37118)
  {
    sub_255E43BBC(255, &qword_269F37100, MEMORY[0x263F19B28]);
    sub_255E437A0(&qword_269F37120, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C);
    sub_255DD84C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37118);
  }
  return result;
}

void sub_255E43684()
{
  if (!qword_269F37138)
  {
    sub_255E3E848(255, &qword_269F37140, (uint64_t (*)(uint64_t))sub_255E43738, MEMORY[0x263F1BAC8]);
    sub_255E437A0(&qword_269F37150, &qword_269F37140, (uint64_t (*)(uint64_t))sub_255E43738);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37138);
    }
  }
}

void sub_255E43738()
{
  if (!qword_269F37148)
  {
    sub_255E43324();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37148);
    }
  }
}

uint64_t sub_255E437A0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E3E848(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E43808@<X0>(uint64_t a1@<X8>)
{
  return sub_255E4388C(MEMORY[0x263F19720], (void (*)(void))sub_255E43E58, (uint64_t (*)(uint64_t))sub_255E420A4, a1);
}

uint64_t sub_255E4384C@<X0>(uint64_t a1@<X8>)
{
  return sub_255E4388C(MEMORY[0x263F19A50], (void (*)(void))sub_255E43A30, (uint64_t (*)(uint64_t))sub_255E42888, a1);
}

uint64_t sub_255E4388C@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(type metadata accessor for EditPrimaryLanguageCellView() - 8);
  return sub_255E42820(v4 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a1, a2, a3, a4);
}

void sub_255E43924(uint64_t a1@<X8>)
{
  type metadata accessor for EditPrimaryLanguageCellView();
  sub_255E42F18(a1);
}

uint64_t sub_255E43994(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E439DC()
{
  unint64_t result = qword_269F37170;
  if (!qword_269F37170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37170);
  }
  return result;
}

void sub_255E43A30()
{
  if (!qword_269F37178)
  {
    sub_255E3E848(255, &qword_269F37140, (uint64_t (*)(uint64_t))sub_255E43738, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37178);
    }
  }
}

void sub_255E43AC8()
{
  if (!qword_269F37180)
  {
    sub_255E433F8();
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37180);
    }
  }
}

void sub_255E43B30()
{
  if (!qword_269F37188)
  {
    sub_255E43BBC(255, &qword_269F37100, MEMORY[0x263F19B28]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37188);
    }
  }
}

void sub_255E43BBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255E3E848(255, &qword_269F37108, (uint64_t (*)(uint64_t))sub_255E4352C, MEMORY[0x263F1BAC8]);
    uint64_t v7 = v6;
    sub_255DD8400();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_255E43C5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E43CC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E43D2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E43D8C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_255E3E848(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_255E43DFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_255E3E848(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_255E43E58()
{
  if (!qword_269F37198)
  {
    sub_255E3E848(255, &qword_269F370D8, (uint64_t (*)(uint64_t))sub_255E432AC, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37198);
    }
  }
}

uint64_t objectdestroyTm_15()
{
  uint64_t v1 = type metadata accessor for EditPrimaryLanguageCellView();
  uint64_t v21 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = v0 + ((v21 + 16) & ~v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v4 = v2 + v3[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[14];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v9 = (uint64_t *)(v2 + v3[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = v2 + v3[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v2 + v3[22];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  id v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v16 = v2 + v15[5];
  uint64_t v17 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v2 + v15[6];
  uint64_t v19 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + *(int *)(v1 + 24))) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E44308()
{
  uint64_t v1 = *(void *)(type metadata accessor for EditPrimaryLanguageCellView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_255E41BAC(v2);
}

uint64_t sub_255E44368()
{
  return swift_getOpaqueTypeConformance2();
}

void MedicalIDWeightFormatter.init(locale:personWeightFormatter:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_255EEE200();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, a1, v6);
  uint64_t v8 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)(a3 + *(int *)(v8 + 20)) = a2;
  id v9 = a2;
  id v10 = objc_msgSend(v9, sel_massFormatter);
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = objc_msgSend(v10, sel_numberFormatter);

    if (v12)
    {
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08990]), sel_init);
      uint64_t v14 = (void *)sub_255EEE1C0();
      objc_msgSend(v13, sel_setLocale_, v14);

      objc_msgSend(v13, sel_setUnitOptions_, 1);
      objc_msgSend(v13, sel_setUnitStyle_, 2);
      objc_msgSend(v13, sel_setNumberFormatter_, v12);

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      *(void *)(a3 + *(int *)(v8 + 24)) = v13;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for MedicalIDWeightFormatter()
{
  uint64_t result = qword_269F371A0;
  if (!qword_269F371A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::String_optional __swiftcall MedicalIDWeightFormatter.localizedDescription(for:)(HKQuantity_optional a1)
{
  Class isa = a1.value.super.isa;
  sub_255E457B0(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC8]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v16 - v5;
  sub_255E246C0(0);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E447D4(isa, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_255E44B48((uint64_t)v9);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    type metadata accessor for MedicalIDWeightFormatter();
    sub_255D7ED10(0, &qword_269F36390);
    uint64_t v10 = sub_255EF0150();
    uint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v13 = v10;
  uint64_t v14 = v11;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void sub_255E447D4(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = sub_255E44DE4();
  sub_255DFD8E4(a1, (uint64_t)v4, a2);
}

uint64_t sub_255E44B48(uint64_t a1)
{
  sub_255E246C0(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::String __swiftcall MedicalIDWeightFormatter.localizedUnitDescription()()
{
  sub_255E44C20(1);
  uint64_t v1 = v0;
  id v2 = sub_255E44DE4();
  id v3 = objc_msgSend(v1, sel_stringFromUnit_, v2);

  uint64_t v4 = sub_255EEFD90();
  uint64_t v6 = v5;

  uint64_t v7 = v4;
  uint64_t v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

void sub_255E44C20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_255EEE200();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  id v8 = objc_msgSend(*(id *)(v2 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 20)), sel_massFormatter);
  if (v8)
  {
    id v9 = v8;
    id v10 = objc_msgSend(v8, sel_numberFormatter);

    if (v10)
    {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08990]), sel_init);
      id v12 = (void *)sub_255EEE1C0();
      objc_msgSend(v11, sel_setLocale_, v12);

      objc_msgSend(v11, sel_setUnitOptions_, 1);
      objc_msgSend(v11, sel_setUnitStyle_, a1);
      objc_msgSend(v11, sel_setNumberFormatter_, v10);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_255E44DE4()
{
  uint64_t v1 = (uint64_t)objc_msgSend(*(id *)(v0 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 20)), sel_localWeightUnit);
  if (v1 <= 1536)
  {
    if (v1 == 11)
    {
      uint64_t v2 = &selRef_grams;
      goto LABEL_12;
    }
    if (v1 == 14)
    {
      uint64_t v2 = &selRef_kilograms;
      goto LABEL_12;
    }
LABEL_15:
    id result = (id)sub_255EF03D0();
    __break(1u);
    return result;
  }
  if (v1 == 1537)
  {
    uint64_t v2 = &selRef_ounces;
    goto LABEL_12;
  }
  if (v1 != 1538)
  {
    if (v1 == 1539)
    {
      uint64_t v2 = &selRef_stones;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  uint64_t v2 = &selRef_poundsMass;
LABEL_12:
  id v3 = [self *v2];
  return v3;
}

id MedicalIDWeightFormatter.formattedText(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_255E457B0(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC8]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v18 - v7;
  sub_255E246C0(0);
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E45168(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    sub_255E44B48((uint64_t)v11);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  sub_255EEDDD0();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A20]), sel_initWithDouble_, v12);
  id result = objc_msgSend(*(id *)(v2 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 24)), sel_numberFormatter);
  if (result)
  {
    id v15 = result;
    id v16 = objc_msgSend(result, sel_stringFromNumber_, v13);

    if (v16)
    {
      uint64_t v17 = sub_255EEFD90();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return (id)v17;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_255E45168(uint64_t a1, uint64_t a2)
{
  sub_255E246C0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDWeightFormatter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_255EEE200();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    id v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    id v12 = v10;
    id v13 = v11;
  }
  return a1;
}

void destroy for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t initializeWithCopy for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  id v11 = v9;
  id v12 = v10;
  return a1;
}

uint64_t assignWithCopy for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = *(int *)(a3 + 24);
  id v12 = *(void **)(a2 + v11);
  id v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  return a1;
}

uint64_t initializeWithTake for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = *(int *)(a3 + 24);
  id v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E45584);
}

uint64_t sub_255E45584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255EEE200();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDWeightFormatter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E45658);
}

uint64_t sub_255E45658(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_255EEE200();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_255E45714()
{
  uint64_t result = sub_255EEE200();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_255E457B0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_255D7ED10(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

double sub_255E45818@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_255E487E8(0, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, MEMORY[0x263F8D8F0]);
  sub_255EEF810();
  *(_OWORD *)(a4 + 112) = v17;
  *(_OWORD *)(a4 + 128) = v18;
  *(_OWORD *)(a4 + 144) = v19;
  *(_OWORD *)(a4 + 160) = v20;
  uint64_t v8 = (int *)type metadata accessor for MedicalIDEditFreeformTextModalView();
  unint64_t v9 = (uint64_t *)(a4 + v8[7]);
  *unint64_t v9 = swift_getKeyPath();
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = a4 + v8[8];
  type metadata accessor for MedicalIDDataManager();
  sub_255E482E0(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  *(void *)uint64_t v10 = sub_255EEE650();
  *(unsigned char *)(v10 + 8) = v11 & 1;
  long long v12 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v12;
  long long v13 = a1[5];
  *(_OWORD *)(a4 + 64) = a1[4];
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = a1[3];
  *(_OWORD *)(a4 + 32) = a1[2];
  *(_OWORD *)(a4 + 48) = v14;
  *(void *)(a4 + 96) = a2;
  *(void *)(a4 + 104) = a3;
  uint64_t v15 = a4 + v8[9];
  swift_bridgeObjectRetain();
  sub_255EEF810();
  double result = *(double *)&v17;
  *(_OWORD *)uint64_t v15 = v17;
  *(void *)(v15 + 16) = v18;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditFreeformTextModalView()
{
  uint64_t result = qword_269F371B0;
  if (!qword_269F371B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_255E45A38(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    *uint64_t v4 = *a2;
    v4[1] = v7;
    uint64_t v8 = a2[3];
    v4[2] = a2[2];
    v4[3] = v8;
    uint64_t v9 = a2[5];
    v4[4] = a2[4];
    v4[5] = v9;
    uint64_t v10 = a2[7];
    _OWORD v4[6] = a2[6];
    v4[7] = v10;
    uint64_t v11 = a2[9];
    v4[8] = a2[8];
    v4[9] = v11;
    v4[10] = a2[10];
    uint64_t v12 = a2[13];
    *(_OWORD *)(v4 + 11) = *(_OWORD *)(a2 + 11);
    v4[13] = v12;
    uint64_t v13 = a2[15];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v13)
    {
      v4[14] = a2[14];
      v4[15] = v13;
      uint64_t v14 = a2[17];
      v4[16] = a2[16];
      v4[17] = v14;
      uint64_t v15 = a2[19];
      v4[18] = a2[18];
      v4[19] = v15;
      v4[20] = a2[20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v17 = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 8) = v17;
      *((_OWORD *)v4 + 9) = *((_OWORD *)a2 + 9);
      v4[20] = a2[20];
    }
    v4[21] = a2[21];
    uint64_t v18 = a3[7];
    long long v19 = (void *)((char *)v4 + v18);
    long long v20 = (uint64_t *)((char *)a2 + v18);
    sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *long long v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    char v24 = (char *)v4 + v22;
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = *v25;
    LOBYTE(v25) = *((unsigned char *)v25 + 8);
    *(void *)char v24 = v26;
    v24[8] = (char)v25;
    uint64_t v27 = (void *)((char *)v4 + v23);
    id v28 = (uint64_t *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    v27[2] = v28[2];
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_255E45CC0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_255E45E04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12)
  {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v12;
    uint64_t v13 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v13;
    uint64_t v14 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v14;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
  }
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v16 = a3[7];
  long long v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = sub_255EEE730();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    *long long v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((unsigned char *)v23 + 8);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = (_BYTE)v23;
  uint64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  id v25[2] = v26[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_255E46040(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[13];
  a1[12] = a2[12];
  a1[13] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a1 + 14;
  uint64_t v8 = (long long *)(a2 + 14);
  uint64_t v9 = a2[15];
  if (a1[15])
  {
    if (v9)
    {
      a1[14] = a2[14];
      a1[15] = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[16] = a2[16];
      a1[17] = a2[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[18] = a2[18];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[19] = a2[19];
      a1[20] = a2[20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)(a1 + 14));
      long long v11 = *((_OWORD *)a2 + 8);
      long long v10 = *((_OWORD *)a2 + 9);
      long long v12 = *v8;
      a1[20] = a2[20];
      *((_OWORD *)a1 + 8) = v11;
      *((_OWORD *)a1 + 9) = v10;
      *uint64_t v7 = v12;
    }
  }
  else if (v9)
  {
    a1[14] = a2[14];
    a1[15] = a2[15];
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    a1[19] = a2[19];
    a1[20] = a2[20];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *v8;
    long long v14 = *((_OWORD *)a2 + 8);
    long long v15 = *((_OWORD *)a2 + 9);
    a1[20] = a2[20];
    *((_OWORD *)a1 + 8) = v14;
    *((_OWORD *)a1 + 9) = v15;
    *uint64_t v7 = v13;
  }
  a1[21] = a2[21];
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v16 = a3[7];
    long long v17 = (void *)((char *)a1 + v16);
    uint64_t v18 = (void *)((char *)a2 + v16);
    sub_255E463BC((uint64_t)a1 + v16);
    sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      *long long v17 = *v18;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(void *)v22;
  LOBYTE(v22) = v22[8];
  *(void *)uint64_t v21 = v23;
  v21[8] = (char)v22;
  swift_retain();
  swift_release();
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  *uint64_t v25 = *(void *)((char *)a2 + v24);
  v25[1] = *(void *)((char *)a2 + v24 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v25[2] = *((void *)v26 + 2);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255E463BC(uint64_t a1)
{
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_255E46434(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  long long v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  long long v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = a2[10];
  a1[9] = a2[9];
  a1[10] = v11;
  long long v12 = a2[8];
  a1[7] = v10;
  a1[8] = v12;
  uint64_t v13 = a3[7];
  long long v14 = (char *)a1 + v13;
  long long v15 = (char *)a2 + v13;
  a1[6] = v9;
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  uint64_t v17 = v16;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = sub_255EEE730();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v14, v15, v18);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  uint64_t v23 = (char *)a1 + v20;
  uint64_t v24 = (char *)a2 + v20;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((void *)v23 + 2) = *((void *)v24 + 2);
  return a1;
}

uint64_t sub_255E4658C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  if (*(void *)(a1 + 120))
  {
    uint64_t v12 = *(void *)(a2 + 120);
    if (v12)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v13;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_255DB9AF8(a1 + 112);
  }
  long long v15 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v15;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
LABEL_6:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v16 = a3[7];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    sub_255E463BC(a1 + v16);
    sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
    uint64_t v20 = v19;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_255EEE730();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 32))(v17, v18, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  LOBYTE(v24) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = (_BYTE)v24;
  swift_release();
  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (void *)(a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v27[2] = v28[2];
  swift_release();
  return a1;
}

uint64_t sub_255E467D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E467EC);
}

uint64_t sub_255E467EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255E468B8(0, &qword_269F35720, MEMORY[0x263F185D0]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

void sub_255E468B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_255EEE730();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255E46918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E4692C);
}

uint64_t sub_255E4692C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_255E468B8(0, &qword_269F35720, MEMORY[0x263F185D0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_255E469F0()
{
  sub_255E468B8(319, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255E46AD0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E46AEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MedicalIDEditFreeformTextModalView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 8);
  uint64_t v35 = *(void *)v1;
  uint64_t v36 = type metadata accessor for MedicalIDEditFreeformTextModalView;
  sub_255E4883C(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MedicalIDEditFreeformTextModalView);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  sub_255E47EB8((uint64_t)v7, v10 + v9);
  long long v11 = *(_OWORD *)(v1 + 128);
  long long v38 = *(_OWORD *)(v1 + 112);
  long long v39 = v11;
  long long v12 = *(_OWORD *)(v1 + 160);
  long long v40 = *(_OWORD *)(v1 + 144);
  long long v41 = v12;
  sub_255DD059C();
  swift_bridgeObjectRetain();
  sub_255EEF840();
  long long v33 = v42;
  long long v32 = v43;
  long long v31 = v44;
  long long v30 = v45;
  uint64_t v13 = v46;
  *a1 = swift_getKeyPath();
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_255E47FE8();
  long long v15 = v14;
  uint64_t v16 = v14[9];
  uint64_t v34 = a1;
  uint64_t v17 = (uint64_t *)((char *)a1 + v16);
  *uint64_t v17 = v35;
  v17[1] = v8;
  uint64_t v18 = (uint64_t *)((char *)a1 + v14[10]);
  *uint64_t v18 = &unk_269F371C8;
  v18[1] = v10;
  uint64_t v19 = (char *)a1 + v14[11];
  long long v20 = v32;
  *(_OWORD *)uint64_t v19 = v33;
  *((_OWORD *)v19 + 1) = v20;
  long long v21 = v30;
  *((_OWORD *)v19 + 2) = v31;
  *((_OWORD *)v19 + 3) = v21;
  *((void *)v19 + 8) = v13;
  uint64_t v22 = (uint64_t (**)())((char *)a1 + v14[12]);
  uint64_t v23 = v36;
  sub_255E4883C(v2, (uint64_t)v7, (uint64_t (*)(void))v36);
  uint64_t v24 = swift_allocObject();
  sub_255E47EB8((uint64_t)v7, v24 + v9);
  sub_255E4883C(v2, (uint64_t)v7, (uint64_t (*)(void))v23);
  uint64_t v25 = swift_allocObject();
  sub_255E47EB8((uint64_t)v7, v25 + v9);
  sub_255E4883C(v2, (uint64_t)v7, (uint64_t (*)(void))v23);
  uint64_t v26 = swift_allocObject();
  sub_255E47EB8((uint64_t)v7, v26 + v9);
  *uint64_t v22 = sub_255E48484;
  v22[1] = (uint64_t (*)())v24;
  v22[2] = (uint64_t (*)())sub_255E484A0;
  v22[3] = (uint64_t (*)())v25;
  v22[4] = sub_255E486D8;
  v22[5] = (uint64_t (*)())v26;
  uint64_t v27 = (char *)v34 + v15[13];
  char v37 = 0;
  uint64_t result = sub_255EEF810();
  uint64_t v29 = *((void *)&v38 + 1);
  *uint64_t v27 = v38;
  *((void *)v27 + 1) = v29;
  return result;
}

uint64_t sub_255E46E3C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255E46ECC();
}

uint64_t sub_255E46ECC()
{
  v1[17] = v0;
  uint64_t v2 = sub_255EEE730();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  sub_255D894E4(0);
  v1[21] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[22] = swift_task_alloc();
  v1[23] = type metadata accessor for MedicalIDEditFreeformTextModalView();
  v1[24] = swift_task_alloc();
  v1[25] = sub_255EEFF70();
  v1[26] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v1[27] = v4;
  v1[28] = v3;
  return MEMORY[0x270FA2498](sub_255E4704C, v4, v3);
}

uint64_t sub_255E4704C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[17];
  char v3 = *(unsigned char *)(v2 + *(int *)(v0[23] + 32) + 8);
  uint64_t v4 = swift_retain();
  v0[29] = sub_255DAA2A0(v4, v3);
  swift_release();
  sub_255E4883C(v2, v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditFreeformTextModalView);
  v0[30] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v0[31] = v6;
  v0[32] = v5;
  return MEMORY[0x270FA2498](sub_255E4713C, v6, v5);
}

uint64_t sub_255E4713C()
{
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[22];
  swift_getKeyPath();
  v0[15] = v1;
  sub_255E482E0(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v6 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255E4883C(v6, v4, (uint64_t (*)(void))sub_255D894E4);
  LoadState<>.loadedValue.getter(v5);
  sub_255E488A4(v4, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v7 = *(void (**)(void, uint64_t, uint64_t))(v2 + 96);
  uint64_t v8 = (uint64_t *)(v2 + *(int *)(v3 + 36));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v11 = v8[2];
  v0[2] = *v8;
  v0[3] = v9;
  v0[4] = v11;
  sub_255E487E8(0, &qword_269F36C18, MEMORY[0x263F8D310], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v13 = v0[11];
  unint64_t v12 = v0[12];
  swift_bridgeObjectRelease();
  uint64_t v14 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    v0[8] = v10;
    v0[9] = v9;
    v0[10] = v11;
    sub_255EEF820();
    uint64_t v15 = v0[13];
    uint64_t v16 = v0[14];
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  v7(v0[22], v15, v16);
  swift_bridgeObjectRelease();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[33] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_255E473A4;
  uint64_t v18 = v0[22];
  return sub_255E8F53C(v18, (uint64_t)(v0 + 16));
}

uint64_t sub_255E473A4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 248);
  uint64_t v4 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v5 = sub_255E47644;
  }
  else {
    uint64_t v5 = sub_255E474B4;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255E474B4()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[22];
  swift_release();
  sub_255E488A4(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  sub_255E488A4(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditFreeformTextModalView);
  swift_release();
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[28];
  return MEMORY[0x270FA2498](sub_255E47568, v3, v4);
}

uint64_t sub_255E47568()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  swift_release();
  sub_255DAA4A8(v1);
  sub_255EEE720();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_255E47644()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[22];
  swift_release();
  sub_255E488A4(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  v0[34] = v0[16];
  sub_255E488A4(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditFreeformTextModalView);
  swift_release();
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[28];
  return MEMORY[0x270FA2498](sub_255E47700, v3, v4);
}

uint64_t sub_255E47700()
{
  uint64_t v1 = *(void *)(v0 + 272);
  swift_release();
  sub_255DBD3D8();
  swift_allocError();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_255E477C8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  sub_255E4816C();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E48240(0, &qword_269F371E0, (void (*)(uint64_t))sub_255E4816C);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = a1[3];
  uint64_t v23 = a1[2];
  uint64_t v24 = v11;
  unint64_t v12 = (char *)a1 + *(int *)(type metadata accessor for MedicalIDEditFreeformTextModalView() + 36);
  long long v13 = *(_OWORD *)v12;
  uint64_t v14 = *((void *)v12 + 2);
  long long v21 = v13;
  uint64_t v22 = v14;
  uint64_t v15 = MEMORY[0x263F8D310];
  sub_255E487E8(0, &qword_269F36C18, MEMORY[0x263F8D310], MEMORY[0x263F1B5D0]);
  swift_bridgeObjectRetain();
  sub_255EEF840();
  sub_255DAD520();
  sub_255EEFB70();
  sub_255E487E8(0, (unint64_t *)&qword_269F37DA0, v15, MEMORY[0x263F8E0F8]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_255EF1E20;
  uint64_t v17 = a1[11];
  *(void *)(v16 + 32) = a1[10];
  *(void *)(v16 + 40) = v17;
  *(void *)(v16 + 48) = 0x6C65694674786554;
  *(void *)(v16 + 56) = 0xE900000000000064;
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v19 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v19)
  {
    sub_255EEFD90();

    sub_255E482AC();
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_255E4877C((uint64_t)v10, v20, &qword_269F371E0, (void (*)(uint64_t))sub_255E4816C);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E47AB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  *a2 = a1[2];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_255E47B08(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E48240(0, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  if (a1[9])
  {
    uint64_t v32 = (uint64_t)&v32 - v8;
    uint64_t v34 = v9;
    uint64_t v36 = v7;
    uint64_t v37 = v6;
    uint64_t v38 = a2;
    swift_bridgeObjectRetain();
    sub_255EEED10();
    uint64_t v10 = sub_255EEF3C0();
    uint64_t v12 = v11;
    char v14 = v13 & 1;
    sub_255EEF2A0();
    uint64_t v15 = sub_255EEF3B0();
    uint64_t v17 = v16;
    char v19 = v18;
    uint64_t v21 = v20;
    swift_release();
    sub_255D85120(v10, v12, v14);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v35 = v15;
    uint64_t v39 = v15;
    uint64_t v40 = v17;
    uint64_t v33 = v17;
    char v41 = v19 & 1;
    uint64_t v42 = v21;
    uint64_t v43 = KeyPath;
    char v44 = 0;
    sub_255E487E8(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_255EF1E20;
    uint64_t v24 = a1[11];
    *(void *)(v23 + 32) = a1[10];
    *(void *)(v23 + 40) = v24;
    *(void *)(v23 + 48) = 0x7265746F6F46;
    *(void *)(v23 + 56) = 0xE600000000000000;
    swift_bridgeObjectRetain();
    uint64_t v25 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v26 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v26)
    {
      sub_255EEFD90();

      sub_255DE7494();
      sub_255DEABD4();
      uint64_t v27 = v34;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v35, v33, v19 & 1);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v28 = v32;
      sub_255E4877C(v27, v32, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
      uint64_t v29 = v28;
      uint64_t v30 = v38;
      sub_255E4877C(v29, v38, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v37);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    long long v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
    v31(a2, 1, 1);
  }
}

uint64_t sub_255E47EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDEditFreeformTextModalView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E47F1C()
{
  type metadata accessor for MedicalIDEditFreeformTextModalView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255E46E3C();
}

void sub_255E47FE8()
{
  if (!qword_269F371D0)
  {
    sub_255E4807C();
    sub_255E482E0(&qword_269F37200, (void (*)(uint64_t))sub_255E4807C);
    unint64_t v0 = type metadata accessor for MedicalIDEditModal();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F371D0);
    }
  }
}

void sub_255E4807C()
{
  if (!qword_269F371D8)
  {
    sub_255E48240(255, &qword_269F371E0, (void (*)(uint64_t))sub_255E4816C);
    sub_255E481CC();
    sub_255E483D0(&qword_269F371E8, &qword_269F371E0, (void (*)(uint64_t))sub_255E4816C, (void (*)(void))sub_255E482AC);
    sub_255DD25F8();
    sub_255E48328();
    unint64_t v0 = type metadata accessor for EditingScrollView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F371D8);
    }
  }
}

void sub_255E4816C()
{
  if (!qword_269F369C0)
  {
    unint64_t v0 = sub_255EEFB80();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F369C0);
    }
  }
}

void sub_255E481CC()
{
  if (!qword_269F36030)
  {
    sub_255E48240(255, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36030);
    }
  }
}

void sub_255E48240(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255EEF090();
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E482AC()
{
  return sub_255E482E0(&qword_269F369C8, (void (*)(uint64_t))sub_255E4816C);
}

uint64_t sub_255E482E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E48328()
{
  unint64_t result = qword_269F371F0;
  if (!qword_269F371F0)
  {
    sub_255E481CC();
    sub_255E483D0((unint64_t *)&qword_269F371F8, (unint64_t *)&qword_269F36038, (void (*)(uint64_t))sub_255DE7494, (void (*)(void))sub_255DEABD4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F371F0);
  }
  return result;
}

uint64_t sub_255E483D0(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E48240(255, a2, a3);
    a4();
    sub_255E482E0(&qword_269F351C0, MEMORY[0x263F1A470]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E48484()
{
  return sub_255E486F0((uint64_t (*)(uint64_t))sub_255E477C8);
}

uint64_t sub_255E484A0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for MedicalIDEditFreeformTextModalView() - 8);
  unint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  return sub_255E47AB0(v4, a1);
}

uint64_t objectdestroyTm_16()
{
  uint64_t v1 = type metadata accessor for MedicalIDEditFreeformTextModalView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v2 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 28);
  sub_255E468B8(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E486D8()
{
  return sub_255E486F0((uint64_t (*)(uint64_t))sub_255E47B08);
}

uint64_t sub_255E486F0(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for MedicalIDEditFreeformTextModalView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

uint64_t sub_255E4877C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255E48240(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_255E487E8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E4883C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E488A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for MedicalIDEditFreeformTextConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MedicalIDEditFreeformTextConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MedicalIDEditFreeformTextConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for MedicalIDEditFreeformTextConfiguration(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDEditFreeformTextConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDEditFreeformTextConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditFreeformTextConfiguration()
{
  return &type metadata for MedicalIDEditFreeformTextConfiguration;
}

uint64_t sub_255E48C34()
{
  return sub_255E482E0(&qword_269F37210, (void (*)(uint64_t))sub_255E47FE8);
}

uint64_t *sub_255E48C7C(uint64_t *a1, uint64_t *a2)
{
  sub_255DF0220();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_255EEE730();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_255E48D84(uint64_t a1)
{
  sub_255DF0220();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_255EEE730();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *sub_255E48E24(void *a1, void *a2)
{
  sub_255DF0220();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_255EEE730();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_255E48EDC(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_255E4BF48((uint64_t)a1, (uint64_t (*)(void))sub_255DF0220);
    sub_255DF0220();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_255E48FB8(void *a1, const void *a2)
{
  sub_255DF0220();
  uint64_t v5 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_255EEE730();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  return a1;
}

void *sub_255E49078(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_255E4BF48((uint64_t)a1, (uint64_t (*)(void))sub_255DF0220);
    sub_255DF0220();
    uint64_t v5 = v4;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_255EEE730();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_255E4915C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E49170);
}

uint64_t sub_255E49170(uint64_t a1, uint64_t a2)
{
  sub_255E4BE74(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_255E4920C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E49220);
}

uint64_t sub_255E49220(uint64_t a1, uint64_t a2)
{
  sub_255E4BE74(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MedicalIDLearnMoreNavigationView()
{
  uint64_t result = qword_269F37230;
  if (!qword_269F37230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E4930C()
{
  sub_255DF0220();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255E49398()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E493B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v1 = sub_255EEEC70();
  uint64_t v55 = *(void *)(v1 - 8);
  uint64_t v56 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v53 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_255EEEEB0();
  uint64_t v47 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4B350();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x263F1ADC0];
  sub_255E4B834(0, &qword_269F372C0, (void (*)(uint64_t))sub_255E4B350, (void (*)(void))sub_255E4B8C0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v14 = (char *)&v43 - v13;
  sub_255E4B8F4();
  uint64_t v16 = v15;
  uint64_t v46 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4BA08();
  uint64_t v50 = v19;
  uint64_t v48 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  char v44 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4BB4C();
  uint64_t v51 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  MEMORY[0x270FA5388](v21);
  unint64_t v49 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4B3D0();
  sub_255E4B720();
  sub_255EEF320();
  uint64_t v23 = sub_255E4B8C0();
  sub_255EEF550();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_255EEEEA0();
  uint64_t v57 = v6;
  uint64_t v58 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v25 = MEMORY[0x263F19D08];
  uint64_t v26 = v45;
  sub_255EEF6B0();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v4, v26);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (qword_269F34BA0 != -1) {
    swift_once();
  }
  uint64_t v57 = v11;
  uint64_t v58 = v26;
  uint64_t v59 = OpaqueTypeConformance2;
  uint64_t v60 = v25;
  uint64_t v27 = swift_getOpaqueTypeConformance2();
  uint64_t v28 = v44;
  sub_255EEF450();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v16);
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v29 = (id)qword_269F352A8;
  uint64_t v30 = sub_255EEF3C0();
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  uint64_t v57 = v16;
  uint64_t v58 = v27;
  uint64_t v35 = swift_getOpaqueTypeConformance2();
  uint64_t v37 = v49;
  uint64_t v36 = v50;
  sub_255EEF4F0();
  sub_255D85120(v30, v32, v34);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v28, v36);
  uint64_t v39 = v55;
  uint64_t v38 = v56;
  uint64_t v40 = v53;
  (*(void (**)(char *, void, uint64_t))(v55 + 104))(v53, *MEMORY[0x263F19698], v56);
  uint64_t v57 = v36;
  uint64_t v58 = v35;
  swift_getOpaqueTypeConformance2();
  uint64_t v41 = v52;
  sub_255EEF5C0();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v37, v41);
}

double sub_255E49AF4@<D0>(uint64_t a1@<X8>)
{
  if (qword_269F34B98 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_269F37218;
  uint64_t v3 = sub_255EEED70();
  sub_255E49C74((uint64_t)v11);
  *(_OWORD *)&v12[87] = v11[5];
  *(_OWORD *)&v12[103] = v11[6];
  *(_OWORD *)&v12[119] = v11[7];
  *(_OWORD *)&v12[135] = v11[8];
  *(_OWORD *)&v12[23] = v11[1];
  *(_OWORD *)&v12[39] = v11[2];
  *(_OWORD *)&v12[55] = v11[3];
  *(_OWORD *)&v12[71] = v11[4];
  char v13 = 0;
  *(_OWORD *)&v12[7] = v11[0];
  if (qword_269F34BA8 != -1) {
    swift_once();
  }
  long long v4 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a1 + 129) = v4;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v12[128];
  long long v5 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v12[32];
  *(_OWORD *)(a1 + 65) = v5;
  long long v6 = *(_OWORD *)&v12[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v12[64];
  *(_OWORD *)(a1 + 97) = v6;
  double result = *(double *)v12;
  long long v8 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v12;
  uint64_t v9 = qword_269F37228;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v10 = *(void *)&v12[143];
  *(_OWORD *)(a1 + 33) = v8;
  *(void *)(a1 + 160) = v10;
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 184) = v9;
  *(void *)(a1 + 192) = v9;
  *(unsigned char *)(a1 + 200) = 0;
  return result;
}

uint64_t sub_255E49C74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v16 = sub_255EEED80();
  sub_255E49DDC((uint64_t)&v17);
  uint64_t v2 = v19;
  uint64_t v14 = v18;
  uint64_t v15 = v17;
  uint64_t v3 = v20;
  char v4 = v21;
  uint64_t v5 = v22;
  uint64_t v13 = sub_255EEED80();
  sub_255E4A068((uint64_t)&v17);
  uint64_t v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  uint64_t v9 = v20;
  char v10 = v21;
  uint64_t v11 = v22;
  LOBYTE(v17) = 0;
  char v25 = v4;
  char v24 = 0;
  char v23 = v21;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = v9;
  *(unsigned char *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRetain();
  sub_255D85214(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_255D85214(v8, v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_255D85120(v8, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_255D85120(v2, v3, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E49DDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255EEFD40();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_269F352A8;
  uint64_t v4 = sub_255EEE200();
  MEMORY[0x270FA5388](v4 - 8);
  id v5 = v3;
  sub_255EEE1F0();
  uint64_t v6 = sub_255EEFDA0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v9);
  id v10 = v5;
  sub_255EEE1F0();
  sub_255EEFDA0();
  sub_255DAD520();
  uint64_t v11 = sub_255EEF3D0();
  uint64_t v13 = v12;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  LOBYTE(v6) = v14 & 1;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 32) = v14 & 1;
  *(void *)(a1 + 40) = v15;
  swift_bridgeObjectRetain();
  sub_255D85214(v11, v13, v6);
  swift_bridgeObjectRetain();
  sub_255D85120(v11, v13, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E4A068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255EEFD40();
  v18[0] = v18;
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_269F352A8;
  uint64_t v4 = sub_255EEE200();
  MEMORY[0x270FA5388](v4 - 8);
  id v5 = v3;
  sub_255EEE1F0();
  uint64_t v6 = sub_255EEFDA0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v9);
  id v10 = v5;
  sub_255EEE1F0();
  v18[1] = sub_255EEFDA0();
  v18[2] = v11;
  sub_255DAD520();
  uint64_t v12 = sub_255EEF3D0();
  uint64_t v14 = v13;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  LOBYTE(v6) = v15 & 1;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 32) = v15 & 1;
  *(void *)(a1 + 40) = v16;
  swift_bridgeObjectRetain();
  sub_255D85214(v12, v14, v6);
  swift_bridgeObjectRetain();
  sub_255D85120(v12, v14, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E4A300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a3;
  sub_255DE7714(0);
  uint64_t v39 = v5 - 8;
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v38 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255DE7748(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_255EEF3D0();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  uint64_t v14 = sub_255EEF3A0();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_255D85120(v9, v11, v13);
  swift_bridgeObjectRelease();
  sub_255EEF240();
  uint64_t v19 = sub_255EEF3B0();
  uint64_t v21 = v20;
  LOBYTE(v11) = v22;
  swift_release();
  LOBYTE(v9) = v11 & 1;
  sub_255D85120(v14, v16, v18);
  swift_bridgeObjectRelease();
  sub_255EEF730();
  uint64_t v23 = sub_255EEF360();
  uint64_t v25 = v24;
  LOBYTE(v14) = v26;
  uint64_t v28 = v27;
  swift_release();
  sub_255D85120(v19, v21, v9);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_255EEF390();
  uint64_t v30 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v37, 1, 1, v29);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v38;
  sub_255E4BEE0(v30, (uint64_t)v38 + *(int *)(v39 + 36), (uint64_t (*)(void))sub_255DE7748);
  *uint64_t v32 = KeyPath;
  sub_255DE76B4();
  uint64_t v34 = v40;
  sub_255E4BEE0((uint64_t)v32, v40 + *(int *)(v33 + 36), (uint64_t (*)(void))sub_255DE7714);
  *(void *)uint64_t v34 = v23;
  *(void *)(v34 + 8) = v25;
  *(unsigned char *)(v34 + 16) = v14 & 1;
  *(void *)(v34 + 24) = v28;
  sub_255D85214(v23, v25, v14 & 1);
  swift_bridgeObjectRetain();
  sub_255E4BF48((uint64_t)v32, (uint64_t (*)(void))sub_255DE7714);
  sub_255E4BF48(v30, (uint64_t (*)(void))sub_255DE7748);
  sub_255D85120(v23, v25, v14 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E4A610@<X0>(uint64_t a1@<X8>)
{
  return sub_255E4A300(*v1, v1[1], a1);
}

uint64_t sub_255E4A618()
{
  return sub_255EEF640();
}

uint64_t sub_255E4A708(uint64_t a1)
{
  uint64_t v2 = sub_255EEEE90();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255DDDF50();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255EEEE70();
  uint64_t v11 = a1;
  sub_255E07734();
  sub_255E4B058((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
  sub_255EEE680();
  uint64_t v8 = sub_255E4B024();
  MEMORY[0x25A29A8F0](v7, v4, v8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_255E4A8A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = sub_255EEFD40();
  MEMORY[0x270FA5388](v5 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_269F352A8;
  uint64_t v7 = sub_255EEE200();
  MEMORY[0x270FA5388](v7 - 8);
  id v8 = v6;
  sub_255EEE1F0();
  v13[1] = sub_255EEFDA0();
  v13[2] = v9;
  sub_255E4BEE0(a1, (uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDLearnMoreNavigationView);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  sub_255DF0278((uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  sub_255DAD520();
  return sub_255EEF890();
}

uint64_t sub_255E4AB00()
{
  uint64_t v0 = sub_255EEE730();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DAA4A8((uint64_t)v3);
  sub_255EEE720();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_255E4ABCC()
{
  sub_255E4ADD4();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = v0;
  sub_255E4AF14();
  sub_255E4B834(255, (unint64_t *)&qword_269F35E98, (void (*)(uint64_t))sub_255DDDF50, (void (*)(void))sub_255E4B024);
  uint64_t v7 = v6;
  unint64_t v8 = sub_255E4B0A0();
  sub_255DDDF50();
  unint64_t v10 = v9;
  uint64_t v11 = sub_255E4B024();
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v16 = &type metadata for MedicalIDLearnMoreView;
  uint64_t v17 = v7;
  unint64_t v18 = v8;
  uint64_t v19 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_255EEE880();
  sub_255E4B058(&qword_269F37258, (void (*)(uint64_t))sub_255E4ADD4);
  sub_255EEF550();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_255E4ADD4()
{
  if (!qword_269F37240)
  {
    sub_255EEE810();
    sub_255E4AF14();
    sub_255E4B834(255, (unint64_t *)&qword_269F35E98, (void (*)(uint64_t))sub_255DDDF50, (void (*)(void))sub_255E4B024);
    sub_255E4B0A0();
    sub_255DDDF50();
    sub_255E4B024();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_255EEE890();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37240);
    }
  }
}

void sub_255E4AF14()
{
  if (!qword_269F37248)
  {
    sub_255E4B834(255, (unint64_t *)&qword_269F35E98, (void (*)(uint64_t))sub_255DDDF50, (void (*)(void))sub_255E4B024);
    sub_255E4B0A0();
    sub_255DDDF50();
    sub_255E4B024();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37248);
    }
  }
}

uint64_t sub_255E4B024()
{
  return sub_255E4B058(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
}

uint64_t sub_255E4B058(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E4B0A0()
{
  unint64_t result = qword_269F37250;
  if (!qword_269F37250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37250);
  }
  return result;
}

uint64_t sub_255E4B0F4()
{
  return sub_255E4A618();
}

uint64_t sub_255E4B0FC()
{
  return sub_255E4A708(*(void *)(v0 + 16));
}

uint64_t sub_255E4B104()
{
  return sub_255E4A8A8(*(void *)(v0 + 16));
}

uint64_t sub_255E4B10C()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDLearnMoreNavigationView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_255DF0220();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = sub_255EEE730();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_255E4B20C()
{
  type metadata accessor for MedicalIDLearnMoreNavigationView();
  return sub_255E4AB00();
}

void sub_255E4B26C()
{
  qword_269F37218 = 0x4034000000000000;
}

void sub_255E4B27C()
{
  qword_269F37220 = 0x4034000000000000;
}

void sub_255E4B28C()
{
  qword_269F37228 = 0x4030000000000000;
}

ValueMetadata *type metadata accessor for MedicalIDLearnMoreView()
{
  return &type metadata for MedicalIDLearnMoreView;
}

uint64_t sub_255E4B2AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E4B334()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E4B350()
{
  if (!qword_269F37260)
  {
    sub_255E4B3D0();
    sub_255E4B720();
    unint64_t v0 = sub_255EEF330();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37260);
    }
  }
}

void sub_255E4B3D0()
{
  if (!qword_269F37268)
  {
    sub_255E4B6A0(255, &qword_269F37270, (uint64_t (*)(uint64_t))sub_255E4B4C0, sub_255E4B66C, MEMORY[0x263F1B6D0]);
    sub_255E4B6A0(255, &qword_269F35B40, MEMORY[0x263F19D18], sub_255DD1A9C, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37268);
    }
  }
}

void sub_255E4B4C0(uint64_t a1)
{
}

void sub_255E4B4F4()
{
  if (!qword_269F37280)
  {
    sub_255E4B6A0(255, &qword_269F37288, (uint64_t (*)(uint64_t))sub_255E4B59C, sub_255E4B638, MEMORY[0x263F1B6D0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37280);
    }
  }
}

void sub_255E4B59C(uint64_t a1)
{
}

void sub_255E4B5D0()
{
  if (!qword_269F37298)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37298);
    }
  }
}

uint64_t sub_255E4B638()
{
  return sub_255E4B058(&qword_269F372A0, sub_255E4B59C);
}

uint64_t sub_255E4B66C()
{
  return sub_255E4B058(&qword_269F372A8, sub_255E4B4C0);
}

void sub_255E4B6A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t sub_255E4B720()
{
  unint64_t result = qword_269F372B0;
  if (!qword_269F372B0)
  {
    sub_255E4B3D0();
    sub_255E4B798();
    sub_255DD2BDC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F372B0);
  }
  return result;
}

unint64_t sub_255E4B798()
{
  unint64_t result = qword_269F372B8;
  if (!qword_269F372B8)
  {
    sub_255E4B6A0(255, &qword_269F37270, (uint64_t (*)(uint64_t))sub_255E4B4C0, sub_255E4B66C, MEMORY[0x263F1B6D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F372B8);
  }
  return result;
}

void sub_255E4B834(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

uint64_t sub_255E4B8C0()
{
  return sub_255E4B058(&qword_269F372C8, (void (*)(uint64_t))sub_255E4B350);
}

void sub_255E4B8F4()
{
  if (!qword_269F372D0)
  {
    sub_255E4B834(255, &qword_269F372C0, (void (*)(uint64_t))sub_255E4B350, (void (*)(void))sub_255E4B8C0);
    sub_255EEEEB0();
    sub_255E4B350();
    sub_255E4B8C0();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F372D0);
    }
  }
}

void sub_255E4BA08()
{
  if (!qword_269F372D8)
  {
    sub_255E4B8F4();
    sub_255E4B834(255, &qword_269F372C0, (void (*)(uint64_t))sub_255E4B350, (void (*)(void))sub_255E4B8C0);
    sub_255EEEEB0();
    sub_255E4B350();
    sub_255E4B8C0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F372D8);
    }
  }
}

void sub_255E4BB4C()
{
  if (!qword_269F372E0)
  {
    sub_255E4BA08();
    sub_255E4B8F4();
    sub_255E4B834(255, &qword_269F372C0, (void (*)(uint64_t))sub_255E4B350, (void (*)(void))sub_255E4B8C0);
    sub_255EEEEB0();
    sub_255E4B350();
    sub_255E4B8C0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F372E0);
    }
  }
}

ValueMetadata *type metadata accessor for LearnMoreHeaderView()
{
  return &type metadata for LearnMoreHeaderView;
}

uint64_t sub_255E4BCD8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E4BE58()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E4BE74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E4BEE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E4BF48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_255E4BFAC()
{
  unint64_t result = qword_269F360A8;
  if (!qword_269F360A8)
  {
    sub_255DE76B4();
    sub_255E4B058(&qword_269F360B0, sub_255DE7714);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F360A8);
  }
  return result;
}

void *sub_255E4C054(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    char v26 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v85 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    uint64_t v7 = v85[5];
    id v81 = a1;
    unint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v87 = a2;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7);
    uint64_t v11 = *((void *)v9 + 1);
    *unint64_t v8 = v10;
    v8[1] = v11;
    uint64_t v12 = *((void *)v9 + 3);
    v8[2] = *((void *)v9 + 2);
    v8[3] = v12;
    uint64_t v13 = *((void *)v9 + 5);
    v8[4] = *((void *)v9 + 4);
    v8[5] = v13;
    uint64_t v14 = *((void *)v9 + 7);
    v8[6] = *((void *)v9 + 6);
    v8[7] = v14;
    uint64_t v15 = *((void *)v9 + 9);
    v8[8] = *((void *)v9 + 8);
    v8[9] = v15;
    uint64_t v16 = *((void *)v9 + 11);
    v8[10] = *((void *)v9 + 10);
    v8[11] = v16;
    uint64_t v82 = (void *)*((void *)v9 + 12);
    unint64_t v83 = (void *)*((void *)v9 + 13);
    v8[12] = v82;
    v8[13] = v83;
    id v89 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v17 = v89[13];
    __dst = (char *)v8 + v17;
    unint64_t v18 = &v9[v17];
    uint64_t v19 = sub_255EEE100();
    uint64_t v88 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v82;
    id v22 = v83;
    if (v20(v18, 1, v19))
    {
      sub_255D80868(0);
      memcpy(__dst, v18, *(void *)(*(void *)(v23 - 8) + 64));
      uint64_t v24 = v88;
    }
    else
    {
      uint64_t v24 = v88;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v27 = v89[14];
    uint64_t v28 = (char *)v8 + v27;
    uint64_t v29 = &v9[v27];
    if (v20(&v9[v27], 1, v19))
    {
      sub_255D80868(0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v19);
    }
    uint64_t v31 = v89[15];
    uint64_t v32 = (void *)((char *)v8 + v31);
    uint64_t v33 = &v9[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *uint64_t v32 = *(void *)v33;
    v32[1] = v34;
    uint64_t v35 = v89[16];
    uint64_t v36 = (void *)((char *)v8 + v35);
    uint64_t v37 = &v9[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *uint64_t v36 = *(void *)v37;
    v36[1] = v38;
    *((unsigned char *)v8 + v89[17]) = v9[v89[17]];
    *((unsigned char *)v8 + v89[18]) = v9[v89[18]];
    uint64_t v39 = v89[19];
    uint64_t v40 = (char *)v8 + v39;
    uint64_t v41 = (uint64_t *)&v9[v39];
    unint64_t v42 = *(void *)&v9[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v43 = v20;
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v44 = *v41;
      sub_255D80890(*v41, v42);
      *(void *)uint64_t v40 = v44;
      *((void *)v40 + 1) = v42;
    }
    char v26 = v81;
    uint64_t v45 = v89[20];
    uint64_t v46 = (char *)v8 + v45;
    uint64_t v47 = &v9[v45];
    uint64_t v48 = sub_255EEDF60();
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      sub_255E4C704(0, &qword_269F350B8, MEMORY[0x270FA8190], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    uint64_t v51 = v89[21];
    uint64_t v52 = *(void **)&v9[v51];
    *(void *)((char *)v8 + v51) = v52;
    uint64_t v53 = v89[22];
    uint64_t v54 = (char *)v8 + v53;
    uint64_t v55 = &v9[v53];
    id v56 = v52;
    if (v43(v55, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v54, v55, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v54, 0, 1, v19);
    }
    uint64_t v58 = v85[6];
    uint64_t v59 = (char *)v81 + v58;
    uint64_t v60 = (char *)v87 + v58;
    uint64_t v61 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
    uint64_t v62 = v85[7];
    uint64_t v63 = (char *)v81 + v62;
    uint64_t v64 = (char *)v87 + v62;
    uint64_t v65 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
    *(void *)((char *)v81 + v85[8]) = *(void *)((char *)v87 + v85[8]);
    uint64_t v66 = v85[9];
    uint64_t v67 = (char *)v81 + v66;
    uint64_t v68 = (char *)v87 + v66;
    swift_retain();
    if (v43(v68, 1, v19))
    {
      sub_255D80868(0);
      memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v67, v68, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v67, 0, 1, v19);
    }
    uint64_t v70 = *(int *)(a3 + 20);
    uint64_t v71 = *(int *)(a3 + 24);
    uint64_t v72 = (void *)((char *)v81 + v70);
    long long v73 = (void *)((char *)v87 + v70);
    uint64_t v74 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v74;
    uint64_t v75 = (void *)((char *)v81 + v71);
    uint64_t v76 = (char *)v87 + v71;
    uint64_t v78 = *(void **)v76;
    uint64_t v77 = *((void *)v76 + 1);
    void *v75 = v78;
    v75[1] = v77;
    swift_retain();
    id v79 = v78;
  }
  return v26;
}

void sub_255E4C704(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E4C768(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v3 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v4 = a1 + v3[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  int v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[14];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v23 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(v4 + v5[19]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_255D80D04(*v11, v12);
  }
  uint64_t v13 = v4 + v5[20];
  uint64_t v14 = sub_255EEDF60();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }

  uint64_t v16 = v4 + v5[22];
  if (!v9(v16, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v16, v7);
  }
  uint64_t v17 = a1 + v3[6];
  uint64_t v18 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = a1 + v3[7];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_release();
  uint64_t v21 = a1 + v3[9];
  if (!v9(v21, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v7);
  }
  swift_release();
  id v22 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *sub_255E4CAF4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  id v81 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = v81[5];
  unint64_t v83 = a2;
  uint64_t v84 = a1;
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = v9;
  uint64_t v11 = *(void *)((char *)a2 + v6 + 16);
  uint64_t v10 = *(void *)((char *)a2 + v6 + 24);
  v7[2] = v11;
  v7[3] = v10;
  uint64_t v12 = *((void *)v8 + 5);
  v7[4] = *((void *)v8 + 4);
  v7[5] = v12;
  uint64_t v13 = *((void *)v8 + 7);
  v7[6] = *((void *)v8 + 6);
  v7[7] = v13;
  uint64_t v14 = *((void *)v8 + 9);
  v7[8] = *((void *)v8 + 8);
  v7[9] = v14;
  uint64_t v15 = *((void *)v8 + 11);
  v7[10] = *((void *)v8 + 10);
  v7[11] = v15;
  uint64_t v77 = (void *)*((void *)v8 + 12);
  uint64_t v78 = (void *)*((void *)v8 + 13);
  v7[12] = v77;
  v7[13] = v78;
  uint64_t v85 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v85[13];
  __dst = (char *)v7 + v16;
  uint64_t v76 = &v8[v16];
  uint64_t v17 = sub_255EEE100();
  uint64_t v79 = *(void *)(v17 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = v77;
  id v20 = v78;
  if (v18(v76, 1, v17))
  {
    sub_255D80868(0);
    memcpy(__dst, v76, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v79;
  }
  else
  {
    uint64_t v22 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v76, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v17);
  }
  uint64_t v23 = v85[14];
  uint64_t v24 = (char *)v7 + v23;
  uint64_t v25 = &v8[v23];
  if (v18(&v8[v23], 1, v17))
  {
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v17);
  }
  uint64_t v27 = v85[15];
  uint64_t v28 = (void *)((char *)v7 + v27);
  uint64_t v29 = &v8[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *uint64_t v28 = *(void *)v29;
  v28[1] = v30;
  uint64_t v31 = v85[16];
  uint64_t v32 = (void *)((char *)v7 + v31);
  uint64_t v33 = &v8[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *uint64_t v32 = *(void *)v33;
  v32[1] = v34;
  *((unsigned char *)v7 + v85[17]) = v8[v85[17]];
  *((unsigned char *)v7 + v85[18]) = v8[v85[18]];
  uint64_t v35 = v85[19];
  uint64_t v36 = (char *)v7 + v35;
  uint64_t v37 = (uint64_t *)&v8[v35];
  unint64_t v38 = *(void *)&v8[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *v37;
    sub_255D80890(*v37, v38);
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }
  uint64_t v40 = v85[20];
  uint64_t v41 = (char *)v7 + v40;
  unint64_t v42 = &v8[v40];
  uint64_t v43 = sub_255EEDF60();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_255E4C704(0, &qword_269F350B8, MEMORY[0x270FA8190], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v46 = v85[21];
  uint64_t v47 = *(void **)&v8[v46];
  *(void *)((char *)v7 + v46) = v47;
  uint64_t v48 = v85[22];
  uint64_t v49 = (char *)v7 + v48;
  uint64_t v50 = &v8[v48];
  id v51 = v47;
  if (v18(v50, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v49, v50, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v49, 0, 1, v17);
  }
  uint64_t v53 = v81[6];
  uint64_t v54 = (char *)v84 + v53;
  uint64_t v55 = (char *)v83 + v53;
  uint64_t v56 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
  uint64_t v57 = v81[7];
  uint64_t v58 = (char *)v84 + v57;
  uint64_t v59 = (char *)v83 + v57;
  uint64_t v60 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
  *(void *)((char *)v84 + v81[8]) = *(void *)((char *)v83 + v81[8]);
  uint64_t v61 = v81[9];
  uint64_t v62 = (char *)v84 + v61;
  uint64_t v63 = (char *)v83 + v61;
  swift_retain();
  if (v18(v63, 1, v17))
  {
    sub_255D80868(0);
    memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v62, v63, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v62, 0, 1, v17);
  }
  uint64_t v65 = *(int *)(a3 + 20);
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = (void *)((char *)v84 + v65);
  uint64_t v68 = (void *)((char *)v83 + v65);
  uint64_t v69 = v68[1];
  *uint64_t v67 = *v68;
  v67[1] = v69;
  uint64_t v70 = (void *)((char *)v84 + v66);
  uint64_t v71 = (char *)v83 + v66;
  long long v73 = *(void **)v71;
  uint64_t v72 = *((void *)v71 + 1);
  *uint64_t v70 = v73;
  v70[1] = v72;
  swift_retain();
  id v74 = v73;
  return v84;
}

char *sub_255E4D148(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v5 = v93[5];
  uint64_t v95 = a2;
  uint64_t v96 = a1;
  uint64_t v6 = &a1[v5];
  uint64_t v7 = (void *)((char *)a2 + v5);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *((void *)v6 + 1) = *(void *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 2) = v7[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 3) = v7[3];
  *((void *)v6 + 4) = v7[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 5) = v7[5];
  *((void *)v6 + 6) = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 7) = v7[7];
  *((void *)v6 + 8) = v7[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 9) = v7[9];
  *((void *)v6 + 10) = v7[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 11) = v7[11];
  uint64_t v8 = (void *)*((void *)v6 + 12);
  uint64_t v9 = (void *)v7[12];
  *((void *)v6 + 12) = v9;
  id v10 = v9;

  uint64_t v11 = (void *)*((void *)v6 + 13);
  uint64_t v12 = (void *)v7[13];
  *((void *)v6 + 13) = v12;
  id v13 = v12;

  uint64_t v14 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v15 = v14[13];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = (char *)v7 + v15;
  uint64_t v18 = sub_255EEE100();
  uint64_t v19 = *(void *)(v18 - 8);
  id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  uint64_t v97 = v20;
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_255D80868(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[14];
  uint64_t v25 = &v6[v24];
  uint64_t v26 = (char *)v7 + v24;
  int v27 = v20(&v6[v24], 1, v18);
  int v28 = v20(v26, 1, v18);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_255D80868(0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  uint64_t v30 = v14[15];
  uint64_t v31 = &v6[v30];
  uint64_t v32 = (void *)((char *)v7 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[16];
  uint64_t v34 = &v6[v33];
  uint64_t v35 = (void *)((char *)v7 + v33);
  *(void *)uint64_t v34 = *v35;
  *((void *)v34 + 1) = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = *((unsigned char *)v7 + v14[17]);
  v6[v14[18]] = *((unsigned char *)v7 + v14[18]);
  uint64_t v36 = v14[19];
  uint64_t v37 = (uint64_t *)&v6[v36];
  unint64_t v38 = (void *)((char *)v7 + v36);
  unint64_t v39 = *(void *)((char *)v7 + v36 + 8);
  uint64_t v91 = v19;
  uint64_t v92 = v18;
  if (*(void *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      uint64_t v40 = *v38;
      sub_255D80890(*v38, v39);
      *uint64_t v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v37);
LABEL_18:
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  uint64_t v41 = *v38;
  sub_255D80890(*v38, v39);
  uint64_t v42 = *v37;
  unint64_t v43 = v37[1];
  *uint64_t v37 = v41;
  v37[1] = v39;
  sub_255D80D04(v42, v43);
LABEL_20:
  uint64_t v44 = v14[20];
  uint64_t v45 = &v6[v44];
  uint64_t v46 = (char *)v7 + v44;
  uint64_t v47 = sub_255EEDF60();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (v50)
  {
    uint64_t v52 = v96;
    uint64_t v54 = v91;
    uint64_t v53 = v92;
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v52 = v96;
  uint64_t v54 = v91;
  uint64_t v53 = v92;
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_255E4C704(0, &qword_269F350B8, MEMORY[0x270FA8190], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  uint64_t v56 = v14[21];
  uint64_t v57 = *(void **)&v6[v56];
  uint64_t v58 = *(void **)((char *)v7 + v56);
  *(void *)&v6[v56] = v58;
  id v59 = v58;

  uint64_t v60 = v14[22];
  uint64_t v61 = &v6[v60];
  uint64_t v62 = (char *)v7 + v60;
  int v63 = v97(&v6[v60], 1, v53);
  int v64 = v97(v62, 1, v53);
  if (v63)
  {
    uint64_t v65 = v95;
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v61, v62, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v61, 0, 1, v53);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v65 = v95;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v61, v53);
LABEL_31:
    sub_255D80868(0);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v61, v62, v53);
LABEL_32:
  uint64_t v67 = v93[6];
  uint64_t v68 = &v52[v67];
  uint64_t v69 = (uint64_t)v65 + v67;
  uint64_t v70 = sub_255EEE280();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 24))(v68, v69, v70);
  uint64_t v71 = v93[7];
  uint64_t v72 = &v52[v71];
  uint64_t v73 = (uint64_t)v65 + v71;
  uint64_t v74 = sub_255EEE200();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 24))(v72, v73, v74);
  *(void *)&v52[v93[8]] = *(void *)((char *)v65 + v93[8]);
  swift_retain();
  swift_release();
  uint64_t v75 = v93[9];
  uint64_t v76 = &v52[v75];
  uint64_t v77 = (char *)v65 + v75;
  LODWORD(v73) = v97(&v52[v75], 1, v53);
  int v78 = v97(v77, 1, v53);
  if (!v73)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v76, v77, v53);
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v76, v53);
    goto LABEL_37;
  }
  if (v78)
  {
LABEL_37:
    sub_255D80868(0);
    memcpy(v76, v77, *(void *)(*(void *)(v79 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v76, v77, v53);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v76, 0, 1, v53);
LABEL_38:
  uint64_t v80 = *(int *)(a3 + 20);
  id v81 = &v52[v80];
  uint64_t v82 = (void *)((char *)v65 + v80);
  uint64_t v83 = v82[1];
  *(void *)id v81 = *v82;
  *((void *)v81 + 1) = v83;
  swift_retain();
  swift_release();
  uint64_t v84 = *(int *)(a3 + 24);
  uint64_t v85 = &v52[v84];
  uint64_t v86 = (uint64_t)v65 + v84;
  uint64_t v87 = *(void **)&v52[v84];
  uint64_t v88 = *(void **)v86;
  *(void *)uint64_t v85 = *(void *)v86;
  id v89 = v88;

  *((void *)v85 + 1) = *(void *)(v86 + 8);
  return v52;
}

_OWORD *sub_255E4DA7C(_OWORD *a1, char *a2, uint64_t a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v44 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v5 = v44[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = &a2[v5];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&a2[v5];
  *((void *)v6 + 2) = *(void *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((void *)v6 + 11) = *(void *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  uint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  id v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v47(v11, 1, v12))
  {
    sub_255D80868(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v46 = a2;
  uint64_t v43 = v13;
  if (v47(&v7[v15], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  id v20 = &v6[v19];
  int v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255E4C704(0, &qword_269F350B8, MEMORY[0x270FA8190], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v47(&v7[v25], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = v44[6];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = &v46[v29];
  uint64_t v32 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = v44[7];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = &v46[v33];
  uint64_t v36 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
  *(void *)((char *)a1 + v44[8]) = *(void *)&v46[v44[8]];
  uint64_t v37 = v44[9];
  unint64_t v38 = (char *)a1 + v37;
  unint64_t v39 = &v46[v37];
  if (v47(&v46[v37], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v38, v39, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v38, 0, 1, v12);
  }
  uint64_t v41 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)&v46[*(int *)(a3 + 20)];
  *(_OWORD *)((char *)a1 + v41) = *(_OWORD *)&v46[v41];
  return a1;
}

char *sub_255E4DFEC(char *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  uint64_t v87 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = v87[5];
  id v89 = a2;
  uint64_t v90 = a1;
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = v8[2];
  swift_bridgeObjectRelease();
  uint64_t v10 = v8[4];
  *((void *)v7 + 3) = v8[3];
  *((void *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v8[6];
  *((void *)v7 + 5) = v8[5];
  *((void *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v8[8];
  *((void *)v7 + 7) = v8[7];
  *((void *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v8[10];
  *((void *)v7 + 9) = v8[9];
  *((void *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)*((void *)v7 + 12);
  uint64_t v15 = v8[12];
  *((void *)v7 + 11) = v8[11];
  *((void *)v7 + 12) = v15;

  uint64_t v16 = (void *)*((void *)v7 + 13);
  *((void *)v7 + 13) = v8[13];

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v7[v18];
  id v20 = (char *)v8 + v18;
  uint64_t v21 = sub_255EEE100();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  uint64_t v91 = v23;
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_255D80868(0);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v27 = v17[14];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = (char *)v8 + v27;
  int v30 = v23(&v7[v27], 1, v21);
  int v31 = v23(v29, 1, v21);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_255D80868(0);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  uint64_t v33 = v17[15];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = (void *)((char *)v8 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v17[16];
  unint64_t v39 = &v7[v38];
  uint64_t v40 = (void *)((char *)v8 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)unint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = *((unsigned char *)v8 + v17[17]);
  v7[v17[18]] = *((unsigned char *)v8 + v17[18]);
  uint64_t v43 = v17[19];
  uint64_t v44 = (uint64_t)&v7[v43];
  uint64_t v45 = (char *)v8 + v43;
  unint64_t v46 = *(void *)&v7[v43 + 8];
  uint64_t v86 = v22;
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  unint64_t v47 = *((void *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_255D81EF8(v44);
    goto LABEL_16;
  }
  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_255D80D04(v48, v46);
LABEL_18:
  uint64_t v49 = v17[20];
  int v50 = &v7[v49];
  int v51 = (char *)v8 + v49;
  uint64_t v52 = sub_255EEDF60();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (v55)
  {
    uint64_t v57 = v90;
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v57 = v90;
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_255E4C704(0, &qword_269F350B8, MEMORY[0x270FA8190], MEMORY[0x263F8D8F0]);
    memcpy(v50, v51, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  uint64_t v59 = v17[21];
  uint64_t v60 = *(void **)&v7[v59];
  *(void *)&v7[v59] = *(void *)((char *)v8 + v59);

  uint64_t v61 = v17[22];
  uint64_t v62 = &v7[v61];
  int v63 = (char *)v8 + v61;
  int v64 = v91(&v7[v61], 1, v21);
  int v65 = v91(v63, 1, v21);
  if (v64)
  {
    uint64_t v66 = v89;
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v62, v63, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v62, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v66 = v89;
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v62, v21);
LABEL_29:
    sub_255D80868(0);
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 40))(v62, v63, v21);
LABEL_30:
  uint64_t v68 = v87[6];
  uint64_t v69 = &v57[v68];
  uint64_t v70 = (uint64_t)v66 + v68;
  uint64_t v71 = sub_255EEE280();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 40))(v69, v70, v71);
  uint64_t v72 = v87[7];
  uint64_t v73 = &v57[v72];
  uint64_t v74 = (uint64_t)v66 + v72;
  uint64_t v75 = sub_255EEE200();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 40))(v73, v74, v75);
  *(void *)&v57[v87[8]] = *(void *)((char *)v66 + v87[8]);
  swift_release();
  uint64_t v76 = v87[9];
  uint64_t v77 = &v57[v76];
  int v78 = (char *)v66 + v76;
  LODWORD(v74) = v91(&v57[v76], 1, v21);
  int v79 = v91(v78, 1, v21);
  if (!v74)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 40))(v77, v78, v21);
      goto LABEL_36;
    }
    (*(void (**)(char *, uint64_t))(v86 + 8))(v77, v21);
    goto LABEL_35;
  }
  if (v79)
  {
LABEL_35:
    sub_255D80868(0);
    memcpy(v77, v78, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v77, v78, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v77, 0, 1, v21);
LABEL_36:
  *(_OWORD *)&v57[*(int *)(a3 + 20)] = *(_OWORD *)((char *)v66 + *(int *)(a3 + 20));
  swift_release();
  uint64_t v81 = *(int *)(a3 + 24);
  uint64_t v82 = &v57[v81];
  uint64_t v83 = (void *)((char *)v66 + v81);
  uint64_t v84 = *(void **)&v57[v81];
  *(void *)uint64_t v82 = *v83;

  *((void *)v82 + 1) = v83[1];
  return v57;
}

uint64_t sub_255E4E844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E4E858);
}

uint64_t sub_255E4E858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E4E918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E4E92C);
}

uint64_t sub_255E4E92C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDPregnancyCellView()
{
  uint64_t result = qword_269F372F0;
  if (!qword_269F372F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E4EA34()
{
  uint64_t result = type metadata accessor for MedicalIDPregnancyViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E4EAD8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E4EAF4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E4FC2C(0, &qword_269F37340, (uint64_t (*)(uint64_t))sub_255E4FA80, (uint64_t (*)(uint64_t))sub_255E4FBE4, MEMORY[0x263F19B20]);
  v40[3] = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v40 - v5;
  sub_255E4FA80();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4FBE4(0);
  v40[4] = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v40 - v15;
  sub_255D80868(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_255EEE100();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = MedicalIDPregnancyViewModel.gestationalAgeDescription(startDate:)((uint64_t)v19);
  uint64_t v23 = v22;
  sub_255E4FECC((uint64_t)v19, (uint64_t (*)(void))sub_255D80868);
  if (v23)
  {
    uint64_t v24 = sub_255EEED80();
    if (qword_269F34BB0 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_269F372E8;
    *(void *)unint64_t v10 = v24;
    *((void *)v10 + 1) = v25;
    unsigned char v10[16] = 0;
    sub_255E4FF2C();
    sub_255E4F0D0(v21, v23, a1, (uint64_t *)&v10[*(int *)(v26 + 44)]);
    swift_bridgeObjectRelease();
    sub_255E4FF94((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))sub_255E4FA80);
    swift_storeEnumTagMultiPayload();
    sub_255E4FDFC(&qword_269F37338, (void (*)(uint64_t))sub_255E4FA80);
    sub_255E0ECE8();
    sub_255EEEE00();
    uint64_t v27 = (uint64_t (*)(void))sub_255E4FA80;
    uint64_t v28 = (uint64_t)v10;
    goto LABEL_9;
  }
  v40[1] = v8;
  v40[2] = a2;
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v29 = (id)qword_269F352A8;
  uint64_t v30 = sub_255EEF3C0();
  uint64_t v32 = v31;
  v40[5] = v30;
  v40[6] = v31;
  char v34 = v33 & 1;
  char v41 = v33 & 1;
  v40[0] = v35;
  uint64_t v42 = v35;
  sub_255D7F1F0();
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_255EF1E20;
  uint64_t v37 = a1[1];
  *(void *)(v36 + 32) = *a1;
  *(void *)(v36 + 40) = v37;
  strcpy((char *)(v36 + 48), "PregnancyState");
  *(unsigned char *)(v36 + 63) = -18;
  swift_bridgeObjectRetain();
  uint64_t v38 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v39 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v39)
  {
    sub_255EEFD90();

    sub_255E4FCB0();
    sub_255E4FE44();
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v30, v32, v34);
    swift_bridgeObjectRelease();
    sub_255E50030((uint64_t)v14, (uint64_t)v16, (uint64_t (*)(void))sub_255E4FBE4);
    sub_255E4FF94((uint64_t)v16, (uint64_t)v6, (uint64_t (*)(void))sub_255E4FBE4);
    swift_storeEnumTagMultiPayload();
    sub_255E4FDFC(&qword_269F37338, (void (*)(uint64_t))sub_255E4FA80);
    sub_255E0ECE8();
    sub_255EEEE00();
    uint64_t v27 = (uint64_t (*)(void))sub_255E4FBE4;
    uint64_t v28 = (uint64_t)v16;
LABEL_9:
    sub_255E4FECC(v28, v27);
    return;
  }
  __break(1u);
}

uint64_t sub_255E4F0D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v52 = (void *)type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (uint64_t)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MedicalIDPregnancyCellView();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E4FBB0(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v56 = (uint64_t)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v47 - v13;
  uint64_t v15 = sub_255EEFD40();
  MEMORY[0x270FA5388](v15 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)qword_269F352A8;
  uint64_t v17 = sub_255EEE200();
  MEMORY[0x270FA5388](v17 - 8);
  id v18 = v16;
  sub_255EEE1F0();
  uint64_t v54 = sub_255EEFDA0();
  uint64_t v55 = v19;
  uint64_t v20 = a3[1];
  uint64_t v21 = *(void **)((char *)a3 + *(int *)(v7 + 24));
  if (v21)
  {
    uint64_t v53 = *a3;
    swift_bridgeObjectRetain();
    uint64_t v22 = v58;
    swift_bridgeObjectRetain();
    unsigned __int8 v23 = objc_msgSend(v21, sel_isLockScreen);
    sub_255E4FF94((uint64_t)a3, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyCellView);
    if ((v23 & 1) == 0)
    {
      int v50 = v14;
      uint64_t v24 = sub_255EEE100();
      uint64_t v49 = v47;
      uint64_t v25 = *(void *)(v24 - 8);
      MEMORY[0x270FA5388](v24);
      uint64_t v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v28 = *((int *)v52 + 5);
      uint64_t v29 = (uint64_t)&v9[v28 + *(int *)(type metadata accessor for MedicalIDData() + 52)];
      sub_255D80868(0);
      uint64_t v52 = v47;
      v47[1] = v30;
      uint64_t v31 = *(void *)(*(void *)(v30 - 8) + 64);
      MEMORY[0x270FA5388](v30);
      sub_255E4FF94(v29, (uint64_t)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255D80868);
      uint64_t v48 = v25;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))((char *)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v24) != 1)
      {
        uint64_t v38 = v48;
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v27, (char *)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
        sub_255D7ED10(0, (unint64_t *)&qword_269F37350);
        char v39 = sub_255EF0190();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v24);
        sub_255E4FECC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyCellView);
        uint64_t v22 = v58;
        uint64_t v14 = v50;
        if (v39)
        {
          uint64_t v40 = v51;
          sub_255E4FF94((uint64_t)a3, v51, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
          sub_255E4FFFC(0);
          uint64_t v42 = MEMORY[0x270FA5388](v41 - 8);
          uint64_t v44 = (char *)v47 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
          MEMORY[0x270FA5388](v42);
          uint64_t v45 = (char *)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, uint64_t, uint64_t))(v48 + 56))(v45, 1, 1);
          sub_255EEF9C0();
          sub_255E4FECC((uint64_t)v45, (uint64_t (*)(void))sub_255D80868);
          sub_255E50030(v40, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
          uint64_t v46 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
          v14[*(int *)(v46 + 20)] = 0;
          sub_255E50030((uint64_t)v44, (uint64_t)&v14[*(int *)(v46 + 24)], (uint64_t (*)(void))sub_255E4FFFC);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v14, 0, 1, v46);
          goto LABEL_9;
        }
LABEL_8:
        uint64_t v32 = type metadata accessor for MedicalIDPregnancyStatusLabelView();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v14, 1, 1, v32);
LABEL_9:
        uint64_t v34 = v56;
        uint64_t v33 = v57;
        sub_255E4FF94((uint64_t)v14, v56, (uint64_t (*)(void))sub_255E4FBB0);
        uint64_t v35 = v55;
        *a4 = v54;
        a4[1] = v35;
        a4[2] = v33;
        a4[3] = v22;
        a4[4] = v53;
        a4[5] = v20;
        sub_255E4FB48();
        sub_255E4FF94(v34, (uint64_t)a4 + *(int *)(v36 + 48), (uint64_t (*)(void))sub_255E4FBB0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_255E4FECC((uint64_t)v14, (uint64_t (*)(void))sub_255E4FBB0);
        sub_255E4FECC(v34, (uint64_t (*)(void))sub_255E4FBB0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      sub_255E4FECC((uint64_t)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255D80868);
      uint64_t v14 = v50;
      uint64_t v22 = v58;
    }
    sub_255E4FECC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyCellView);
    goto LABEL_8;
  }
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

void sub_255E4F8B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_269F34B68 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_269F3FE30;
  uint64_t v5 = *(void *)algn_269F3FE38;
  swift_bridgeObjectRetain();
  Swift::Bool v7 = MedicalIDPregnancyViewModel.hasPregnancyData()();
  uint64_t v9 = *v2;
  uint64_t v8 = v2[1];
  uint64_t v10 = (uint64_t *)((char *)v2 + *(int *)(a1 + 20));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = qword_269F34B90;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_269F37000;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 17) = 2;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v14;
  *(unsigned char *)(a2 + 64) = 1;
  sub_255E4F9D8();
  sub_255E4EAF4(v2, a2 + *(int *)(v15 + 44));
}

void sub_255E4F9D8()
{
  if (!qword_269F37300)
  {
    sub_255E4FC2C(255, &qword_269F37308, (uint64_t (*)(uint64_t))sub_255E4FA80, (uint64_t (*)(uint64_t))sub_255E4FBE4, MEMORY[0x263F19B28]);
    sub_255E4FD10();
    unint64_t v0 = type metadata accessor for MedicalIDCellView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37300);
    }
  }
}

void sub_255E4FA80()
{
  if (!qword_269F37310)
  {
    sub_255E4FB14(255);
    sub_255E4FDFC(&qword_269F37328, sub_255E4FB14);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37310);
    }
  }
}

void sub_255E4FB14(uint64_t a1)
{
}

void sub_255E4FB48()
{
  if (!qword_269F37320)
  {
    sub_255E4FBB0(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37320);
    }
  }
}

void sub_255E4FBB0(uint64_t a1)
{
}

void sub_255E4FBE4(uint64_t a1)
{
}

void sub_255E4FC2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255E4FCB0()
{
  if (!qword_269F366F0)
  {
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F366F0);
    }
  }
}

unint64_t sub_255E4FD10()
{
  unint64_t result = qword_269F37330;
  if (!qword_269F37330)
  {
    sub_255E4FC2C(255, &qword_269F37308, (uint64_t (*)(uint64_t))sub_255E4FA80, (uint64_t (*)(uint64_t))sub_255E4FBE4, MEMORY[0x263F19B28]);
    sub_255E4FDFC(&qword_269F37338, (void (*)(uint64_t))sub_255E4FA80);
    sub_255E0ECE8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37330);
  }
  return result;
}

uint64_t sub_255E4FDFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E4FE44()
{
  unint64_t result = qword_269F366F8;
  if (!qword_269F366F8)
  {
    sub_255E4FCB0();
    sub_255E0EC48();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F366F8);
  }
  return result;
}

void sub_255E4FEBC()
{
  qword_269F372E8 = 0x4010000000000000;
}

uint64_t sub_255E4FECC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255E4FF2C()
{
  if (!qword_269F37348)
  {
    sub_255E4FB14(255);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37348);
    }
  }
}

uint64_t sub_255E4FF94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255E4FFFC(uint64_t a1)
{
}

uint64_t sub_255E50030(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E50098()
{
  return sub_255E4FDFC(qword_269F37358, (void (*)(uint64_t))sub_255E4F9D8);
}

uint64_t sub_255E500E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

void sub_255E500E8()
{
  sub_255E50BDC(319, &qword_269F35680, MEMORY[0x263F185C8]);
  if (v0 <= 0x3F)
  {
    sub_255EEE860();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_255E501DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_255EEE860();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[13];
    uint64_t v10 = (char *)v4 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_255EEE860();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[14];
    uint64_t v14 = a3[15];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    id v18 = (uint64_t *)((char *)v4 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *id v18 = *v19;
    v18[1] = v20;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_255E50380(uint64_t a1, uint64_t a2)
{
  sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_255EEE860();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 52);
  uint64_t v6 = sub_255EEE860();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_release();
}

void *sub_255E50494(void *a1, void *a2, int *a3)
{
  sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_255EEE860();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[13];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE860();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[14];
  uint64_t v12 = a3[15];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)((char *)a1 + v12);
  uint64_t v17 = (void *)((char *)a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_255E505EC(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_255E5076C((uint64_t)a1);
    sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[13];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE860();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[14];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  uint64_t v15 = a3[15];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255E5076C(uint64_t a1)
{
  sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_255E507E4(char *a1, char *a2, int *a3)
{
  sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_255EEE860();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[13];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_255EEE860();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  return a1;
}

char *sub_255E50928(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_255E5076C((uint64_t)a1);
    sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_255EEE860();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v9 = a3[13];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_255EEE860();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  swift_release();
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  swift_release();
  return a1;
}

uint64_t sub_255E50A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E50AAC);
}

uint64_t sub_255E50AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255E50BDC(0, &qword_269F36400, MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_255EEE860();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 52);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 56));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

void sub_255E50BDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_255EEE860();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255E50C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E50C50);
}

uint64_t sub_255E50C50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_255E50BDC(0, &qword_269F36400, MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_255EEE860();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 56)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 52);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MedicalIDAXLayoutView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_255E50D94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E50DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = swift_getKeyPath();
  sub_255E50BDC(0, &qword_269F35680, MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (int *)type metadata accessor for MedicalIDAXLayoutView();
  uint64_t v11 = (char *)a5 + v10[13];
  uint64_t v12 = *MEMORY[0x263F18CB8];
  uint64_t v13 = sub_255EEE860();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  uint64_t v15 = (uint64_t *)((char *)a5 + v10[14]);
  *uint64_t v15 = a1;
  v15[1] = a2;
  uint64_t v16 = (uint64_t *)((char *)a5 + v10[15]);
  *uint64_t v16 = a3;
  v16[1] = a4;
  return result;
}

uint64_t sub_255E50F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v36 = (char *)&v34 - v9;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v34 = (char *)&v34 - v14;
  uint64_t v15 = sub_255EEE860();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_255EEEE10();
  uint64_t v39 = *(void *)(v19 - 8);
  uint64_t v40 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v38 = (char *)&v34 - v20;
  sub_255DAAD40((uint64_t)v18);
  char v21 = sub_255EEE850();
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v21)
  {
    (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 56)))(v22);
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v24 = v34;
    sub_255DD37CC(v13, v10, v23);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v35 + 8);
    v25(v13, v10);
    sub_255DD37CC(v24, v10, v23);
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v27 = v38;
    sub_255DD3808((uint64_t)v13, v10);
    v25(v13, v10);
    uint64_t v28 = v24;
    uint64_t v29 = v10;
  }
  else
  {
    (*(void (**)(uint64_t))(v2 + *(int *)(a1 + 60)))(v22);
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v30 = v36;
    sub_255DD37CC(v7, v4, v26);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v37 + 8);
    v25(v7, v4);
    sub_255DD37CC(v30, v4, v26);
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v27 = v38;
    sub_255DD3900((uint64_t)v7, v10, v4);
    v25(v7, v4);
    uint64_t v28 = v30;
    uint64_t v29 = v4;
  }
  v25(v28, v29);
  uint64_t v42 = v23;
  uint64_t v43 = v26;
  uint64_t v31 = v40;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_255DD37CC(v27, v31, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v27, v31);
}

uint64_t sub_255E51360()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for MeasurementError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E51488);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasurementError()
{
  return &type metadata for MeasurementError;
}

unint64_t sub_255E514C4()
{
  unint64_t result = qword_269F373E0;
  if (!qword_269F373E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F373E0);
  }
  return result;
}

void *sub_255E51518(void *a1, char *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *unsigned int v4 = *(void *)a2;
    unsigned int v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    uint64_t v93 = (void *)*((void *)a2 + 12);
    uint64_t v95 = (void *)*((void *)a2 + 13);
    a1[12] = v93;
    a1[13] = v95;
    uint64_t v90 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v90[13];
    __dst = (char *)v4 + v12;
    uint64_t v86 = &a2[v12];
    uint64_t v13 = sub_255EEE100();
    uint64_t v89 = *(void *)(v13 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v93;
    id v16 = v95;
    char v94 = v14;
    if (v14(v86, 1, v13))
    {
      sub_255D80868(0);
      memcpy(__dst, v86, *(void *)(*(void *)(v17 - 8) + 64));
      uint64_t v18 = v89;
    }
    else
    {
      uint64_t v18 = v89;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(__dst, v86, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v20 = v90[14];
    char v21 = (char *)v4 + v20;
    uint64_t v22 = &a2[v20];
    if (v14(&a2[v20], 1, v13))
    {
      sub_255D80868(0);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v22, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v13);
    }
    uint64_t v24 = v90[15];
    uint64_t v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = &a2[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *uint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v90[16];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *uint64_t v29 = *(void *)v30;
    v29[1] = v31;
    *((unsigned char *)v4 + v90[17]) = a2[v90[17]];
    *((unsigned char *)v4 + v90[18]) = a2[v90[18]];
    uint64_t v32 = v90[19];
    uint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (uint64_t *)&a2[v32];
    unint64_t v35 = *(void *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_255D80890(*v34, v35);
      *(void *)uint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = v90[20];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = &a2[v37];
    uint64_t v40 = sub_255EEDF60();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_255E51CA0(0, &qword_269F350B8, MEMORY[0x270FA8170], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v90[21];
    uint64_t v44 = *(void **)&a2[v43];
    *(void *)((char *)v4 + v43) = v44;
    uint64_t v45 = v90[22];
    uint64_t v46 = (char *)v4 + v45;
    unint64_t v47 = &a2[v45];
    id v48 = v44;
    if (v94(v47, 1, v13))
    {
      sub_255D80868(0);
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v13);
    }
    uint64_t v50 = v13;
    uint64_t v51 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    uint64_t v52 = v51[5];
    uint64_t v53 = (char *)v4 + v52;
    uint64_t v54 = &a2[v52];
    uint64_t v91 = sub_255EEE280();
    __dsta = *(void (**)(char *, char *))(*(void *)(v91 - 8) + 16);
    __dsta(v53, v54);
    uint64_t v55 = v51[6];
    uint64_t v56 = (char *)v4 + v55;
    uint64_t v57 = &a2[v55];
    uint64_t v58 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
    uint64_t v59 = v51[7];
    uint64_t v60 = *(void **)&a2[v59];
    *(void *)((char *)v4 + v59) = v60;
    uint64_t v61 = v51[8];
    uint64_t v62 = *(void **)&a2[v61];
    *(void *)((char *)v4 + v61) = v62;
    uint64_t v63 = v51[9];
    int v64 = (void *)((char *)v4 + v63);
    int v65 = &a2[v63];
    uint64_t v66 = *((void *)v65 + 1);
    *int v64 = *(void *)v65;
    v64[1] = v66;
    uint64_t v67 = a3[5];
    uint64_t v68 = (void *)((char *)v4 + v67);
    uint64_t v69 = &a2[v67];
    uint64_t v70 = *(void *)&a2[v67 + 8];
    *uint64_t v68 = *(void *)&a2[v67];
    v68[1] = v70;
    sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    uint64_t v72 = *(int *)(v71 + 32);
    uint64_t v73 = (char *)v68 + v72;
    uint64_t v74 = &v69[v72];
    id v75 = v60;
    id v76 = v62;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v94(v74, 1, v50))
    {
      sub_255D80868(0);
      memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v73, v74, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v73, 0, 1, v50);
    }
    uint64_t v78 = a3[6];
    int v79 = (void *)((char *)v4 + v78);
    uint64_t v80 = &a2[v78];
    if (*(void *)v80)
    {
      uint64_t v81 = *((void *)v80 + 1);
      *int v79 = *(void *)v80;
      v79[1] = v81;
      swift_retain();
    }
    else
    {
      *(_OWORD *)int v79 = *(_OWORD *)v80;
    }
    uint64_t v82 = a3[7];
    uint64_t v83 = (void *)((char *)v4 + v82);
    uint64_t v84 = &a2[v82];
    sub_255D986E4(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      ((void (*)(void *, char *, uint64_t))__dsta)(v83, v84, v91);
    }
    else
    {
      void *v83 = *(void *)v84;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

void sub_255E51CA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E51D04(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unsigned int v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  id v16 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v17 = a1 + v16[5];
  uint64_t v18 = sub_255EEE280();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v26(v17, v18);
  uint64_t v19 = a1 + v16[6];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  uint64_t v21 = a1 + a2[5];
  swift_release();
  swift_release();
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v23 = v21 + *(int *)(v22 + 32);
  if (!v8(v23, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v23, v6);
  }
  if (*(void *)(a1 + a2[6])) {
    swift_release();
  }
  uint64_t v24 = a1 + a2[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v26)(v24, v18);
  }
  else
  {
    return swift_release();
  }
}

void *sub_255E52154(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  uint64_t v90 = (void *)*((void *)a2 + 12);
  uint64_t v92 = (void *)*((void *)a2 + 13);
  a1[12] = v90;
  a1[13] = v92;
  uint64_t v88 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v88[13];
  __dst = (char *)a1 + v11;
  uint64_t v84 = &a2[v11];
  uint64_t v12 = sub_255EEE100();
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v90;
  id v15 = v92;
  uint64_t v91 = v13;
  if (v13(v84, 1, v12))
  {
    sub_255D80868(0);
    memcpy(__dst, v84, *(void *)(*(void *)(v16 - 8) + 64));
    uint64_t v17 = v87;
  }
  else
  {
    uint64_t v17 = v87;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(__dst, v84, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v18 = v88[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v13(&a2[v18], 1, v12))
  {
    sub_255D80868(0);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v20, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v12);
  }
  uint64_t v22 = v88[15];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *uint64_t v23 = *(void *)v24;
  v23[1] = v25;
  uint64_t v26 = v88[16];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *uint64_t v27 = *(void *)v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v88[17]) = a2[v88[17]];
  *((unsigned char *)a1 + v88[18]) = a2[v88[18]];
  uint64_t v30 = v88[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (uint64_t *)&a2[v30];
  unint64_t v33 = *(void *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    sub_255D80890(*v32, v33);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v35 = v88[20];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_255EEDF60();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_255E51CA0(0, &qword_269F350B8, MEMORY[0x270FA8170], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v41 = v88[21];
  uint64_t v42 = *(void **)&a2[v41];
  *(void *)((char *)a1 + v41) = v42;
  uint64_t v43 = v88[22];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = &a2[v43];
  id v46 = v42;
  if (v91(v45, 1, v12))
  {
    sub_255D80868(0);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v44, v45, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v44, 0, 1, v12);
  }
  uint64_t v48 = v12;
  uint64_t v49 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v50 = v49[5];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = &a2[v50];
  uint64_t v89 = sub_255EEE280();
  __dsta = *(void (**)(char *, char *))(*(void *)(v89 - 8) + 16);
  __dsta(v51, v52);
  uint64_t v53 = v49[6];
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = &a2[v53];
  uint64_t v56 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(v54, v55, v56);
  uint64_t v57 = v49[7];
  uint64_t v58 = *(void **)&a2[v57];
  *(void *)((char *)a1 + v57) = v58;
  uint64_t v59 = v49[8];
  uint64_t v60 = *(void **)&a2[v59];
  *(void *)((char *)a1 + v59) = v60;
  uint64_t v61 = v49[9];
  uint64_t v62 = (void *)((char *)a1 + v61);
  uint64_t v63 = &a2[v61];
  uint64_t v64 = *((void *)v63 + 1);
  *uint64_t v62 = *(void *)v63;
  v62[1] = v64;
  uint64_t v65 = a3[5];
  uint64_t v66 = (void *)((char *)a1 + v65);
  uint64_t v67 = &a2[v65];
  uint64_t v68 = *(void *)&a2[v65 + 8];
  *uint64_t v66 = *(void *)&a2[v65];
  v66[1] = v68;
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v70 = *(int *)(v69 + 32);
  uint64_t v71 = (char *)v66 + v70;
  uint64_t v72 = &v67[v70];
  id v73 = v58;
  id v74 = v60;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v91(v72, 1, v48))
  {
    sub_255D80868(0);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v71, v72, v48);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v71, 0, 1, v48);
  }
  uint64_t v76 = a3[6];
  uint64_t v77 = (void *)((char *)a1 + v76);
  uint64_t v78 = &a2[v76];
  if (*(void *)v78)
  {
    uint64_t v79 = *((void *)v78 + 1);
    void *v77 = *(void *)v78;
    v77[1] = v79;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
  }
  uint64_t v80 = a3[7];
  uint64_t v81 = (void *)((char *)a1 + v80);
  uint64_t v82 = &a2[v80];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(void *, char *, uint64_t))__dsta)(v81, v82, v89);
  }
  else
  {
    *uint64_t v81 = *(void *)v82;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_255E52888(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a1 + 8) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = *((void *)a2 + 9);
  *((void *)a1 + 10) = *((void *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = *((void *)a2 + 11);
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)*((void *)a2 + 12);
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)*((void *)a2 + 13);
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  id v14 = &a2[v12];
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  char v104 = v17;
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255D80868(0);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v101 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255D80868(0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = a2[v11[17]];
  a1[v11[18]] = a2[v11[18]];
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (uint64_t *)&a2[v33];
  unint64_t v36 = *(void *)&a2[v33 + 8];
  uint64_t v102 = v16;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  id v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255E51CA0(0, &qword_269F350B8, MEMORY[0x270FA8170], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v50 = v11[21];
  uint64_t v51 = *(void **)&a1[v50];
  uint64_t v52 = *(void **)&a2[v50];
  *(void *)&a1[v50] = v52;
  id v53 = v52;

  uint64_t v54 = v11[22];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  int v57 = v104(&a1[v54], 1, v101);
  int v58 = v104(v56, 1, v101);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v55, v56, v101);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v55, 0, 1, v101);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v55, v101);
LABEL_31:
    sub_255D80868(0);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v55, v56, v101);
LABEL_32:
  uint64_t v60 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v61 = v60[5];
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &a2[v61];
  uint64_t v64 = sub_255EEE280();
  uint64_t v65 = *(void *)(v64 - 8);
  (*(void (**)(char *, char *, uint64_t))(v65 + 24))(v62, v63, v64);
  uint64_t v66 = v60[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  uint64_t v69 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v60[7];
  uint64_t v71 = *(void **)&a1[v70];
  uint64_t v72 = *(void **)&a2[v70];
  *(void *)&a1[v70] = v72;
  id v73 = v72;

  uint64_t v74 = v60[8];
  uint64_t v75 = *(void **)&a2[v74];
  uint64_t v76 = *(void **)&a1[v74];
  *(void *)&a1[v74] = v75;
  id v77 = v75;

  uint64_t v78 = v60[9];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  *(void *)uint64_t v79 = *(void *)v80;
  *((void *)v79 + 1) = *((void *)v80 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = a3[5];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  *(void *)&a1[v81] = *(void *)&a2[v81];
  swift_retain();
  swift_release();
  *((void *)v82 + 1) = *((void *)v83 + 1);
  swift_retain();
  swift_release();
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v85 = *(int *)(v84 + 32);
  uint64_t v86 = &v82[v85];
  uint64_t v87 = &v83[v85];
  LODWORD(v68) = v104(&v82[v85], 1, v101);
  int v88 = v104(v87, 1, v101);
  if (v68)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v86, v87, v101);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v86, 0, 1, v101);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v102 + 8))(v86, v101);
LABEL_37:
    sub_255D80868(0);
    memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v102 + 24))(v86, v87, v101);
LABEL_38:
  uint64_t v90 = a3[6];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = &a2[v90];
  uint64_t v93 = *(void *)&a1[v90];
  uint64_t v94 = *(void *)&a2[v90];
  if (v93)
  {
    if (v94)
    {
      uint64_t v95 = *((void *)v92 + 1);
      *(void *)uint64_t v91 = v94;
      *((void *)v91 + 1) = v95;
      swift_retain();
      swift_release();
      goto LABEL_45;
    }
    swift_release();
  }
  else if (v94)
  {
    uint64_t v96 = *((void *)v92 + 1);
    *(void *)uint64_t v91 = v94;
    *((void *)v91 + 1) = v96;
    swift_retain();
    goto LABEL_45;
  }
  *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
LABEL_45:
  if (a1 != a2)
  {
    uint64_t v97 = a3[7];
    uint64_t v98 = &a1[v97];
    uint64_t v99 = &a2[v97];
    sub_255E55708((uint64_t)&a1[v97], (uint64_t (*)(void))sub_255D986E4);
    sub_255D986E4(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v98, v99, v64);
    }
    else
    {
      *(void *)uint64_t v98 = *(void *)v99;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_255E53304(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = v6[13];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  int v58 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v58(v9, 1, v10))
  {
    sub_255D80868(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = v6[14];
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  int v57 = a3;
  if (v58((const void *)(a2 + v13), 1, v10))
  {
    sub_255D80868(0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(unsigned char *)(a1 + v6[17]) = *(unsigned char *)(a2 + v6[17]);
  *(unsigned char *)(a1 + v6[18]) = *(unsigned char *)(a2 + v6[18]);
  *(_OWORD *)(a1 + v6[19]) = *(_OWORD *)(a2 + v6[19]);
  uint64_t v17 = v6[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255E51CA0(0, &qword_269F350B8, MEMORY[0x270FA8170], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v6[21]) = *(void *)(a2 + v6[21]);
  uint64_t v23 = v6[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v58((const void *)(a2 + v23), 1, v10))
  {
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v24, v25, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v28 = v27[5];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = sub_255EEE280();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32);
  v56(v29, v30, v31);
  uint64_t v32 = v27[6];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  *(void *)(a1 + v27[7]) = *(void *)(a2 + v27[7]);
  *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
  *(_OWORD *)(a1 + v27[9]) = *(_OWORD *)(a2 + v27[9]);
  uint64_t v36 = v57[5];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = a2 + v36;
  uint64_t v39 = *(void *)(a2 + v36 + 8);
  *uint64_t v37 = *(void *)(a2 + v36);
  v37[1] = v39;
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v41 = *(int *)(v40 + 32);
  uint64_t v42 = (char *)v37 + v41;
  uint64_t v43 = (const void *)(v38 + v41);
  if (v58(v43, 1, v10))
  {
    sub_255D80868(0);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v11 + 32))(v42, v43, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
  }
  uint64_t v45 = v57[6];
  id v46 = (void *)(a1 + v45);
  int v47 = (uint64_t *)(a2 + v45);
  uint64_t v48 = *v47;
  if (*v47)
  {
    uint64_t v49 = v47[1];
    *id v46 = v48;
    v46[1] = v49;
  }
  else
  {
    *(_OWORD *)id v46 = *(_OWORD *)v47;
  }
  uint64_t v50 = v57[7];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (const void *)(a2 + v50);
  sub_255D986E4(0);
  uint64_t v54 = v53;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v56((uint64_t)v51, (uint64_t)v52, v31);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  return a1;
}

char *sub_255E53950(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRelease();
  uint64_t v6 = *((void *)a2 + 4);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)a2 + 8);
  *((void *)a1 + 7) = *((void *)a2 + 7);
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *((void *)a2 + 10);
  *((void *)a1 + 9) = *((void *)a2 + 9);
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = *((void *)a2 + 12);
  *((void *)a1 + 11) = *((void *)a2 + 11);
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = *((void *)a2 + 13);

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  uint64_t v106 = v19;
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255D80868(0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = &a2[v23];
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v103 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255D80868(0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = (uint64_t *)&a2[v34];
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = a2[v13[17]];
  a1[v13[18]] = a2[v13[18]];
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = &a2[v39];
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v104 = v18;
  if (v42 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_18;
  }
  unint64_t v43 = *((void *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_16;
  }
  uint64_t v44 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v43;
  sub_255D80D04(v44, v42);
LABEL_18:
  uint64_t v45 = v13[20];
  id v46 = &a1[v45];
  int v47 = &a2[v45];
  uint64_t v48 = sub_255EEDF60();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_23:
    sub_255E51CA0(0, &qword_269F350B8, MEMORY[0x270FA8170], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 40))(v46, v47, v48);
LABEL_24:
  uint64_t v54 = v13[21];
  uint64_t v55 = *(void **)&a1[v54];
  *(void *)&a1[v54] = *(void *)&a2[v54];

  uint64_t v56 = v13[22];
  int v57 = &a1[v56];
  int v58 = &a2[v56];
  int v59 = v19(&a1[v56], 1, v103);
  int v60 = v19(v58, 1, v103);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v57, v58, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v57, 0, 1, v103);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v57, v103);
LABEL_29:
    sub_255D80868(0);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 40))(v57, v58, v103);
LABEL_30:
  uint64_t v62 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v63 = v62[5];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v66 = sub_255EEE280();
  uint64_t v67 = *(void *)(v66 - 8);
  (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v64, v65, v66);
  uint64_t v68 = v62[6];
  uint64_t v69 = &a1[v68];
  uint64_t v70 = &a2[v68];
  uint64_t v71 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 40))(v69, v70, v71);
  uint64_t v72 = v62[7];
  id v73 = *(void **)&a1[v72];
  *(void *)&a1[v72] = *(void *)&a2[v72];

  uint64_t v74 = v62[8];
  uint64_t v75 = *(void **)&a1[v74];
  *(void *)&a1[v74] = *(void *)&a2[v74];

  uint64_t v76 = v62[9];
  id v77 = &a1[v76];
  uint64_t v78 = (uint64_t *)&a2[v76];
  uint64_t v80 = *v78;
  uint64_t v79 = v78[1];
  *(void *)id v77 = v80;
  *((void *)v77 + 1) = v79;
  swift_bridgeObjectRelease();
  uint64_t v81 = a3[5];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  *(void *)&a1[v81] = *(void *)&a2[v81];
  swift_release();
  *((void *)v82 + 1) = *((void *)v83 + 1);
  swift_release();
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v85 = *(int *)(v84 + 32);
  uint64_t v86 = &v82[v85];
  uint64_t v87 = &v83[v85];
  LODWORD(v70) = v106(&v82[v85], 1, v103);
  int v88 = v106(v87, 1, v103);
  if (v70)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v86, v87, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v86, 0, 1, v103);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v86, v103);
LABEL_35:
    sub_255D80868(0);
    memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 40))(v86, v87, v103);
LABEL_36:
  uint64_t v90 = a3[6];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = &a2[v90];
  uint64_t v93 = *(void *)&a1[v90];
  uint64_t v94 = *(void *)&a2[v90];
  if (v93)
  {
    if (v94)
    {
      uint64_t v95 = *((void *)v92 + 1);
      *(void *)uint64_t v91 = v94;
      *((void *)v91 + 1) = v95;
      swift_release();
      goto LABEL_43;
    }
    swift_release();
  }
  else if (v94)
  {
    uint64_t v96 = *((void *)v92 + 1);
    *(void *)uint64_t v91 = v94;
    *((void *)v91 + 1) = v96;
    goto LABEL_43;
  }
  *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
LABEL_43:
  if (a1 != a2)
  {
    uint64_t v97 = a3[7];
    uint64_t v98 = &a1[v97];
    uint64_t v99 = &a2[v97];
    sub_255E55708((uint64_t)&a1[v97], (uint64_t (*)(void))sub_255D986E4);
    sub_255D986E4(0);
    uint64_t v101 = v100;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v98, v99, v66);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v98, v99, *(void *)(*(void *)(v101 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_255E542F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E54304);
}

uint64_t sub_255E54304(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 2147483646)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 - 1;
    if (v15 < 0) {
      int v15 = -1;
    }
    return (v15 + 1);
  }
  else
  {
    sub_255E51CA0(0, &qword_269F35330, MEMORY[0x270FA9938], MEMORY[0x263F185D0]);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[7];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_255E544E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E544F8);
}

void sub_255E544F8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[6]) = a2;
  }
  else
  {
    sub_255E51CA0(0, &qword_269F35330, MEMORY[0x270FA9938], MEMORY[0x263F185D0]);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    v16(v18, a2, a2, v17);
  }
}

uint64_t type metadata accessor for EditDateOfBirthCellView()
{
  uint64_t result = qword_269F373E8;
  if (!qword_269F373E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E54718()
{
  type metadata accessor for MedicalIDPersonalInfoViewModel();
  if (v0 <= 0x3F)
  {
    sub_255E51CA0(319, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
    if (v1 <= 0x3F)
    {
      sub_255D986E4(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_255E54854()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E54870()
{
  uint64_t v1 = type metadata accessor for EditDateOfBirthCellView();
  MEMORY[0x270FA5388](v1 - 8);
  int v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D7F1F0();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_255EF1E20;
  uint64_t v5 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v6 = (void *)(v0 + *(int *)(v5 + 36));
  uint64_t v7 = v6[1];
  *(void *)(v4 + 32) = *v6;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 48) = 0x6942664F65746144;
  *(void *)(v4 + 56) = 0xEB00000000687472;
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v9 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v9)
  {
    sub_255E5512C(v0, (uint64_t)v3);
LABEL_5:
    uint64_t v10 = *(void *)&v3[*(int *)(v5 + 36)];
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  uint64_t v10 = sub_255EEFD90();
  uint64_t v12 = v11;

  sub_255E5512C(v0, (uint64_t)v3);
  if (!v12) {
    goto LABEL_5;
  }
LABEL_6:
  sub_255E55708((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for EditDateOfBirthCellView);
  return v10;
}

uint64_t sub_255E549EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = type metadata accessor for EditDateOfBirthCellView();
  uint64_t v37 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v38 = v4;
  uint64_t v39 = (uint64_t)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  MEMORY[0x270FA5388](v5);
  uint64_t v36 = (uint64_t)v32 - v6;
  sub_255EEF9A0();
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v10 = v8;
  sub_255EEE1F0();
  uint64_t v11 = sub_255EEFDA0();
  uint64_t v33 = v12;
  uint64_t v34 = v11;
  uint64_t v13 = sub_255EEE100();
  uint64_t v35 = v32;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MedicalIDPersonalInfoViewModel.defaultDateOfBirth()(v16);
  sub_255D80868(0);
  v32[2] = v32;
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v21 = v20(v19, 1, 1, v13);
  v32[1] = v32;
  MEMORY[0x270FA5388](v21);
  sub_255EEE0F0();
  v20(v19, 0, 1, v13);
  uint64_t v22 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  uint64_t v23 = (char *)*v22;
  uint64_t v24 = v22[1];
  sub_255D85808(*v22);
  uint64_t v25 = sub_255E54870();
  uint64_t v27 = v26;
  uint64_t v28 = v39;
  sub_255E5512C(v2, v39);
  unint64_t v29 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v30 = swift_allocObject();
  sub_255E556A0(v28, v30 + v29, (uint64_t (*)(void))type metadata accessor for EditDateOfBirthCellView);
  return sub_255DF2F20(v36, v34, v33, (uint64_t)v16, (uint64_t)v19, (uint64_t)v19, 1, v23, v40, v24, v25, v27, (uint64_t)sub_255E55630, v30);
}

void sub_255E54E8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  sub_255DD8400();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v5 = (id)qword_269F352A8;
  uint64_t v6 = sub_255EEF3C0();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v26 = sub_255EEF6D0();
  uint64_t v11 = sub_255EEF370();
  uint64_t v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  sub_255D85120(v6, v8, v10);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v26 = v11;
  uint64_t v27 = v13;
  char v18 = v15 & 1;
  char v28 = v15 & 1;
  uint64_t v29 = v17;
  sub_255D7F1F0();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_255EF1E20;
  *(void *)(v19 + 32) = sub_255E54870();
  *(void *)(v19 + 40) = v20;
  *(void *)(v19 + 48) = 6579265;
  *(void *)(v19 + 56) = 0xE300000000000000;
  uint64_t v21 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v22)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v11, v13, v18);
    swift_bridgeObjectRelease();
    sub_255E556A0((uint64_t)v4, v24, (uint64_t (*)(void))sub_255DD8400);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E5512C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EditDateOfBirthCellView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E55190()
{
  uint64_t v1 = type metadata accessor for EditDateOfBirthCellView();
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = v0 + ((v26 + 16) & ~v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v4 = v2 + v3[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[14];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v27 = (int *)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v9 = (uint64_t *)(v2 + v3[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = v2 + v3[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v2 + v3[22];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  char v15 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  uint64_t v16 = v2 + v15[5];
  uint64_t v17 = sub_255EEE280();
  char v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = v2 + v15[6];
  uint64_t v20 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);

  swift_bridgeObjectRelease();
  uint64_t v21 = v2 + v27[5];
  swift_release();
  swift_release();
  sub_255E51CA0(0, &qword_269F350C0, (uint64_t (*)(uint64_t))sub_255D80868, MEMORY[0x263F1B750]);
  uint64_t v23 = v21 + *(int *)(v22 + 32);
  if (!v7(v23, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, v5);
  }
  if (*(void *)(v2 + v27[6])) {
    swift_release();
  }
  uint64_t v24 = v2 + v27[7];
  sub_255D986E4(0);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v18(v24, v17);
  }
  else {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_255E55630(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for EditDateOfBirthCellView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  sub_255E54E8C(v4, a1);
}

uint64_t sub_255E556A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E55708(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E55768()
{
  return sub_255E557B0(&qword_269F373F8, (void (*)(uint64_t))sub_255DF8E9C);
}

uint64_t sub_255E557B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_255E557F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    uint64_t v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    uint64_t v12 = (void *)a2[12];
    uint64_t v11 = (void *)a2[13];
    a1[12] = (uint64_t)v12;
    a1[13] = (uint64_t)v11;
    uint64_t v13 = a2[15];
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v20 = (uint64_t *)((char *)a2 + v14);
    uint64_t v21 = (uint64_t *)((char *)a1 + v14);
    a1[14] = a2[14];
    a1[15] = v13;
    sub_255E5629C(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v12;
    id v16 = v11;
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v21, v20, v17);
    }
    else
    {
      *uint64_t v21 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t sub_255E559E8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_255E5629C(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE860();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_255E55B0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  uint64_t v11 = (void *)a2[12];
  uint64_t v10 = (void *)a2[13];
  a1[12] = v11;
  a1[13] = v10;
  uint64_t v12 = a2[15];
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = (void *)((char *)a1 + v13);
  a1[14] = a2[14];
  a1[15] = v12;
  sub_255E5629C(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v11;
  id v15 = v10;
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_255EEE860();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v19, v18, v16);
  }
  else
  {
    *uint64_t v19 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_255E55CA8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)a2[12];
  uint64_t v7 = (void *)a1[12];
  a1[12] = v6;
  id v8 = v6;

  uint64_t v9 = (void *)a1[13];
  uint64_t v10 = (void *)a2[13];
  a1[13] = v10;
  id v11 = v10;

  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (void *)((char *)a1 + v12);
    id v14 = (void *)((char *)a2 + v12);
    id v15 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255E57FD4((uint64_t)a1 + v12, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    sub_255E5629C(0, &qword_269F35680, v15, v16);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v13, v14, v17);
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_255E55ED0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  long long v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  a1[2] = a2[2];
  a1[3] = v7;
  sub_255E5629C(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  uint64_t v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_255EEE860();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v9, v10, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  return a1;
}

void *sub_255E55FE8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)a1[12];
  a1[12] = a2[12];

  uint64_t v13 = (void *)a1[13];
  a1[13] = a2[13];

  uint64_t v14 = a2[15];
  a1[14] = a2[14];
  a1[15] = v14;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = (uint64_t (*)(uint64_t))MEMORY[0x263F18D80];
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255E57FD4((uint64_t)a1 + v15, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    sub_255E5629C(0, &qword_269F35680, v18, v19);
    uint64_t v21 = v20;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_255EEE860();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v16, v17, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_255E561A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E561BC);
}

uint64_t sub_255E561BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 96);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255E5629C(0, &qword_269F36400, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

void sub_255E5629C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E56300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E56314);
}

uint64_t sub_255E56314(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 96) = (a2 - 1);
  }
  else
  {
    sub_255E5629C(0, &qword_269F36400, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ContactLabelView()
{
  uint64_t result = qword_269F37400;
  if (!qword_269F37400) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E56438()
{
  sub_255E5629C(319, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255E56500()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E5651C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E57844();
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - v8;
  *(void *)uint64_t v9 = sub_255EEED80();
  *((void *)v9 + 1) = 0;
  v9[16] = 0;
  sub_255E57C98();
  sub_255E5663C(a1, &v9[*(int *)(v10 + 44)]);
  sub_255E57D30((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(void))sub_255E57844);
  sub_255E57D30((uint64_t)v7, a2, (uint64_t (*)(void))sub_255E57844);
  sub_255E577DC();
  uint64_t v12 = a2 + *(int *)(v11 + 48);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  sub_255E57E90((uint64_t)v9, (uint64_t (*)(void))sub_255E57844);
  return sub_255E57E90((uint64_t)v7, (uint64_t (*)(void))sub_255E57844);
}

uint64_t sub_255E5663C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v110 = a2;
  sub_255E57B24();
  uint64_t v108 = v3;
  uint64_t v107 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v104 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_255E5629C(0, &qword_269F37458, (uint64_t (*)(uint64_t))sub_255E57B24, MEMORY[0x263F8D8F0]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v116 = (uint64_t)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v114 = (uint64_t)&v100 - v9;
  sub_255E57AC0(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  uint64_t v11 = v10;
  char v109 = (void (*)())*((void *)v10 - 1);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v105 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v106 = (uint64_t *)((char *)&v100 - v14);
  sub_255E05F90();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v115 = (uint64_t)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v100 - v18;
  sub_255E5629C(0, &qword_269F36090, MEMORY[0x263F1A620], v5);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v100 - v21;
  uint64_t v23 = sub_255EEF2C0();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a1 + 88);
  if (v27)
  {
    uint64_t v124 = *(void *)(a1 + 80);
    uint64_t v28 = *(void *)(a1 + 120);
    uint64_t v119 = *(void *)(a1 + 112);
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, *MEMORY[0x263F1A6C0], v23);
    uint64_t v29 = sub_255EEF210();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v22, 1, 1, v29);
    swift_bridgeObjectRetain();
    uint64_t v125 = v28;
    swift_bridgeObjectRetain();
    sub_255EEF220();
    uint64_t v118 = sub_255EEF230();
    sub_255E57FD4((uint64_t)v22, &qword_269F36090, MEMORY[0x263F1A620], MEMORY[0x263F8D8F0]);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    uint64_t KeyPath = swift_getKeyPath();
    unsigned int v30 = sub_255EEEF30();
    unsigned __int8 v31 = sub_255EEF1A0();
    if (qword_269F34A50 != -1) {
      swift_once();
    }
    sub_255EEE540();
    uint64_t v112 = v32;
    uint64_t v111 = v33;
    uint64_t v122 = v34;
    uint64_t v121 = v35;
    uint64_t v123 = v31;
    uint64_t v113 = v30;
  }
  else
  {
    uint64_t v124 = 0;
    uint64_t v119 = 0;
    uint64_t v125 = 0;
    uint64_t KeyPath = 0;
    uint64_t v118 = 0;
    uint64_t v113 = 0;
    uint64_t v123 = 0;
    uint64_t v112 = 0;
    uint64_t v111 = 0;
    uint64_t v122 = 0;
    uint64_t v121 = 0;
  }
  uint64_t v36 = *(void *)a1;
  uint64_t v37 = *(void *)(a1 + 8);
  unint64_t v120 = v19;
  uint64_t v126 = v27;
  if (!v37)
  {
    uint64_t v53 = 1;
LABEL_10:
    (*((void (**)(char *, uint64_t, uint64_t, char *))v109 + 7))(v19, v53, 1, v11);
    uint64_t v54 = *(void *)(a1 + 56);
    if (v54)
    {
      uint64_t v55 = *(void *)(a1 + 48);
      uint64_t v56 = (void (*)())sub_255EEE030();
      uint64_t v106 = &v100;
      char v109 = v56;
      uint64_t v57 = *((void *)v56 - 1);
      MEMORY[0x270FA5388](v56);
      uint64_t v101 = v58;
      uint64_t v103 = (char *)&v100 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255E5629C(0, &qword_269F36908, MEMORY[0x270FA8EC0], MEMORY[0x263F8D8F0]);
      uint64_t v105 = (char *)&v100;
      uint64_t v60 = *(void *)(*(void *)(v59 - 8) + 64);
      MEMORY[0x270FA5388](v59 - 8);
      unint64_t v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v62 = (char *)&v100 - v61;
      uint64_t v63 = *(void *)(a1 + 96);
      uint64_t v64 = *(void *)(a1 + 120);
      uint64_t v127 = v36;
      uint64_t v128 = v37;
      long long v65 = *(_OWORD *)(a1 + 32);
      long long v129 = *(_OWORD *)(a1 + 16);
      long long v130 = v65;
      uint64_t v131 = v55;
      uint64_t v132 = v54;
      long long v66 = *(_OWORD *)(a1 + 80);
      long long v133 = *(_OWORD *)(a1 + 64);
      long long v134 = v66;
      uint64_t v135 = v63;
      long long v136 = *(_OWORD *)(a1 + 104);
      uint64_t v137 = v64;
      uint64_t v67 = self;
      sub_255DCB308((uint64_t)&v127);
      uint64_t v102 = v55;
      uint64_t v68 = (void *)sub_255EEFD50();
      id v69 = objc_msgSend(v67, sel_emergencyContactURL_, v68);

      MEMORY[0x270FA5388](v70);
      uint64_t v71 = (char *)&v100 - v61;
      if (v69)
      {
        sub_255EEE010();

        uint64_t v72 = 0;
      }
      else
      {
        uint64_t v72 = 1;
      }
      id v73 = (char *)&v100 - v61;
      uint64_t v74 = v109;
      (*(void (**)(char *, uint64_t, uint64_t, void (*)()))(v57 + 56))(v73, v72, 1, v109);
      sub_255E57F54((uint64_t)v71, (uint64_t)v62, (uint64_t)&qword_269F36908, MEMORY[0x270FA8EC0], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255E5629C);
      sub_255DCB3AC((uint64_t)&v127);
      int v75 = (*(uint64_t (**)(char *, uint64_t, void (*)()))(v57 + 48))(v62, 1, v74);
      uint64_t v19 = v120;
      if (v75 != 1)
      {
        id v77 = v103;
        uint64_t v78 = v109;
        uint64_t v79 = (*(uint64_t (**)(char *, char *, void (*)()))(v57 + 32))(v103, v62, v109);
        uint64_t v105 = (char *)&v100;
        MEMORY[0x270FA5388](v79);
        uint64_t v81 = (*(uint64_t (**)(char *, char *, void (*)()))(v57 + 16))((char *)&v100 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0), v77, v78);
        MEMORY[0x270FA5388](v81);
        uint64_t v82 = v57;
        sub_255E57B88();
        sub_255E57BF0();
        uint64_t v83 = v104;
        sub_255EEF2F0();
        (*(void (**)(char *, void (*)()))(v82 + 8))(v77, v78);
        uint64_t v84 = v107;
        uint64_t v76 = v114;
        uint64_t v85 = v108;
        (*(void (**)(uint64_t, char *, uint64_t))(v107 + 32))(v114, v83, v108);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v76, 0, 1, v85);
        goto LABEL_18;
      }
      sub_255E57FD4((uint64_t)v62, &qword_269F36908, MEMORY[0x270FA8EC0], MEMORY[0x263F8D8F0]);
    }
    uint64_t v76 = v114;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v114, 1, 1, v108);
LABEL_18:
    uint64_t v86 = v115;
    char v109 = sub_255E05F90;
    sub_255E57D30((uint64_t)v19, v115, (uint64_t (*)(void))sub_255E05F90);
    sub_255E57D98(v76, v116);
    uint64_t v87 = v110;
    uint64_t v88 = v123;
    uint64_t v89 = v126;
    void *v110 = v124;
    v87[1] = v89;
    uint64_t v90 = v125;
    v87[2] = v119;
    v87[3] = v90;
    uint64_t v91 = v118;
    v87[4] = KeyPath;
    v87[5] = v91;
    v87[6] = v113;
    v87[7] = v88;
    uint64_t v123 = v88;
    uint64_t v92 = v111;
    v87[8] = v112;
    v87[9] = v92;
    uint64_t v93 = v121;
    v87[10] = v122;
    v87[11] = v93;
    uint64_t v121 = v93;
    *((unsigned char *)v87 + 96) = 0;
    sub_255E578F8();
    uint64_t v95 = v94;
    sub_255E57D30(v86, (uint64_t)v87 + *(int *)(v94 + 48), (uint64_t (*)(void))sub_255E05F90);
    uint64_t v96 = v116;
    sub_255E57D98(v116, (uint64_t)v87 + *(int *)(v95 + 64));
    sub_255E57E2C(v124, v126);
    uint64_t v97 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
    sub_255E57FD4(v114, &qword_269F37458, (uint64_t (*)(uint64_t))sub_255E57B24, MEMORY[0x263F8D8F0]);
    uint64_t v98 = v109;
    sub_255E57E90((uint64_t)v120, (uint64_t (*)(void))v109);
    sub_255E57FD4(v96, &qword_269F37458, (uint64_t (*)(uint64_t))sub_255E57B24, v97);
    sub_255E57E90(v115, (uint64_t (*)(void))v98);
    return sub_255E57EF0(v124, v126);
  }
  uint64_t v103 = v11;
  uint64_t v102 = v36;
  uint64_t v127 = v36;
  uint64_t v128 = v37;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v38 = MEMORY[0x263F8D310];
  uint64_t v39 = sub_255EEF3D0();
  uint64_t v41 = v40;
  uint64_t v127 = v39;
  uint64_t v128 = v40;
  char v43 = v42 & 1;
  LOBYTE(v129) = v42 & 1;
  uint64_t v101 = v44;
  *((void *)&v129 + 1) = v44;
  sub_255DE79B0(0, (unint64_t *)&qword_269F37DA0, v38, MEMORY[0x263F8E0F8]);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_255EF1E20;
  uint64_t v46 = *(void *)(a1 + 120);
  *(void *)(v45 + 32) = *(void *)(a1 + 112);
  *(void *)(v45 + 40) = v46;
  *(void *)(v45 + 48) = 1701667150;
  *(void *)(v45 + 56) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  int v47 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v48 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v48)
  {
    sub_255EEFD90();

    uint64_t v49 = MEMORY[0x263F1A830];
    uint64_t v50 = (uint64_t)v105;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v39, v41, v43);
    swift_bridgeObjectRelease();
    uint64_t v51 = MEMORY[0x263F1A470];
    uint64_t v52 = (uint64_t)v106;
    sub_255E57F54(v50, (uint64_t)v106, (uint64_t)&qword_269F35DF8, MEMORY[0x263F1A470], v49, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255E57AC0);
    uint64_t v19 = v120;
    sub_255E57F54(v52, (uint64_t)v120, (uint64_t)&qword_269F35DF8, v51, v49, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_255E57AC0);
    uint64_t v53 = 0;
    uint64_t v11 = v103;
    uint64_t v36 = v102;
    goto LABEL_10;
  }
  uint64_t result = sub_255E57EF0(v124, v126);
  __break(1u);
  return result;
}

void sub_255E574F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a4;
  sub_255E57B88();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v10 = MEMORY[0x263F8D310];
  uint64_t v11 = sub_255EEF3D0();
  uint64_t v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = v11;
  uint64_t v27 = v13;
  char v19 = v15 & 1;
  char v28 = v19;
  uint64_t v29 = v17;
  uint64_t v30 = KeyPath;
  char v31 = 0;
  sub_255DE79B0(0, (unint64_t *)&qword_269F37DA0, v10, MEMORY[0x263F8E0F8]);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_255EF1E20;
  uint64_t v21 = *(void *)(a3 + 120);
  *(void *)(v20 + 32) = *(void *)(a3 + 112);
  *(void *)(v20 + 40) = v21;
  *(void *)(v20 + 48) = 0x7265626D754ELL;
  *(void *)(v20 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v23 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v23)
  {
    sub_255EEFD90();

    sub_255DE7494();
    sub_255DEABD4();
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v11, v13, v19);
    swift_release();
    swift_bridgeObjectRelease();
    sub_255E58040((uint64_t)v9, v25);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E57700@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_255EEEC90();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  sub_255E57744();
  return sub_255E5651C(v1, a1 + *(int *)(v3 + 44));
}

void sub_255E57744()
{
  if (!qword_269F37410)
  {
    sub_255E5629C(255, &qword_269F37418, (uint64_t (*)(uint64_t))sub_255E577DC, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37410);
    }
  }
}

void sub_255E577DC()
{
  if (!qword_269F37420)
  {
    sub_255E57844();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37420);
    }
  }
}

void sub_255E57844()
{
  if (!qword_269F37428)
  {
    sub_255E5629C(255, &qword_269F37430, (uint64_t (*)(uint64_t))sub_255E578F8, MEMORY[0x263F1BAC8]);
    sub_255E581E8(&qword_269F37468, &qword_269F37430, (uint64_t (*)(uint64_t))sub_255E578F8);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37428);
    }
  }
}

void sub_255E578F8()
{
  if (!qword_269F37438)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
    sub_255E5629C(255, &qword_269F37440, (uint64_t (*)(uint64_t))sub_255E579D4, MEMORY[0x263F8D8F0]);
    sub_255E05F90();
    sub_255E5629C(255, &qword_269F37458, (uint64_t (*)(uint64_t))sub_255E57B24, v0);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v2) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F37438);
    }
  }
}

void sub_255E579D4()
{
  if (!qword_269F37448)
  {
    sub_255E57A34();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37448);
    }
  }
}

void sub_255E57A34()
{
  if (!qword_269F37450)
  {
    sub_255E57AC0(255, &qword_269F36500, (void (*)(uint64_t))sub_255D84C2C);
    sub_255DE777C();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37450);
    }
  }
}

void sub_255E57AC0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E57B24()
{
  if (!qword_269F37460)
  {
    sub_255E57B88();
    sub_255E57BF0();
    unint64_t v0 = sub_255EEF300();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37460);
    }
  }
}

void sub_255E57B88()
{
  if (!qword_269F36038)
  {
    sub_255DE7494();
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36038);
    }
  }
}

unint64_t sub_255E57BF0()
{
  unint64_t result = qword_269F371F8;
  if (!qword_269F371F8)
  {
    sub_255E57B88();
    sub_255DEABD4();
    sub_255E580EC(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F371F8);
  }
  return result;
}

void sub_255E57C98()
{
  if (!qword_269F37470)
  {
    sub_255E5629C(255, &qword_269F37430, (uint64_t (*)(uint64_t))sub_255E578F8, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37470);
    }
  }
}

uint64_t sub_255E57D30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E57D98(uint64_t a1, uint64_t a2)
{
  sub_255E5629C(0, &qword_269F37458, (uint64_t (*)(uint64_t))sub_255E57B24, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E57E2C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_255E57E90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E57EF0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_255E57F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void sub_255E57FC8(uint64_t a1@<X8>)
{
  sub_255E574F8(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_255E57FD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_255E5629C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_255E58040(uint64_t a1, uint64_t a2)
{
  sub_255E57B88();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E580A4()
{
  return sub_255E580EC(&qword_269F37478, (void (*)(uint64_t))sub_255E58134);
}

uint64_t sub_255E580EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E58134()
{
  if (!qword_269F37480)
  {
    sub_255E5629C(255, &qword_269F37418, (uint64_t (*)(uint64_t))sub_255E577DC, MEMORY[0x263F1BAC8]);
    sub_255E581E8(qword_269F37488, &qword_269F37418, (uint64_t (*)(uint64_t))sub_255E577DC);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37480);
    }
  }
}

uint64_t sub_255E581E8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E5629C(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id static MIUIDisplayConfiguration.mockDisplayConfiguration()()
{
  return objc_msgSend(objc_allocWithZone((Class)MIUIDisplayConfiguration), sel_initWithEntryPoint_isEditingAvailable_isDeletionAvailable_shouldShowDonateLifeRegistrationIfAvailable_isShowWhenLockedVisible_isShareDuringEmergencyCallVisible_accessPoint_, 0, 1, 1, 1, 1, 1, 0);
}

uint64_t sub_255E5829C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  char v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_255EF0020();
  if (!v20) {
    return sub_255EEFED0();
  }
  uint64_t v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = sub_255EF0390();
  uint64_t v35 = sub_255EF03A0();
  sub_255EF0340();
  uint64_t v41 = v19;
  uint64_t result = sub_255EF0010();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    id v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))sub_255EF0040();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_255EF0380();
      sub_255EF0030();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t Array<A>.withoutDuplicates(preserveOrder:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v6 = sub_255EEFF00();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v8 = MEMORY[0x25A29B880](&v28, v6, WitnessTable);
    uint64_t v27 = v28;
    MEMORY[0x270FA5388](v8);
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v9 = sub_255EF03E0();
    uint64_t v10 = (char *)_s14OrderedElementVMa();
    uint64_t v11 = swift_getWitnessTable();
    uint64_t v12 = MEMORY[0x263F8E628];
    uint64_t v13 = MEMORY[0x263F8E658];
    sub_255E58B60((void (*)(char *, char *))sub_255E58B40, (uint64_t)v24, v9, v10, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v14);
    swift_bridgeObjectRelease();
    swift_getWitnessTable();
    uint64_t v15 = sub_255E59274();
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v28 = v15;
    MEMORY[0x270FA5388](v16);
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    sub_255EEFFE0();
    swift_getWitnessTable();
    uint64_t v17 = sub_255EEFE70();
    uint64_t v18 = swift_bridgeObjectRelease();
    uint64_t v28 = v17;
    MEMORY[0x270FA5388](v18);
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v19 = sub_255EEFF00();
    uint64_t v20 = swift_getWitnessTable();
    uint64_t v22 = sub_255E5829C((void (*)(char *, char *))sub_255E5934C, (uint64_t)v24, v19, a3, v12, v20, v13, v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_255EEFF00();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v28 = sub_255EEFFF0();
    sub_255EEFFE0();
    swift_getWitnessTable();
    return sub_255EEFF10();
  }
  return v22;
}

uint64_t sub_255E58A0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(int *)(MEMORY[0x270FA5388](TupleTypeMetadata2 - 8) + 56);
  uint64_t v9 = (char *)&v14 + v8 - v7;
  uint64_t v10 = (char *)a1 + v8;
  uint64_t v11 = *a1;
  uint64_t v12 = *(void *)(a2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v9, a2);
  uint64_t result = _s14OrderedElementVMa();
  *(void *)(a3 + *(int *)(result + 36)) = v11;
  return result;
}

uint64_t sub_255E58B40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255E58A0C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_255E58B60(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_255EF01E0();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  id v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_255EEFE50();
  uint64_t v61 = sub_255EF0390();
  uint64_t v56 = sub_255EF03A0();
  sub_255EF0340();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = sub_255EEFE40();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_255EF01F0();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_255EF0380();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  sub_255EF01F0();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_255EF0380();
      sub_255EF01F0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t _s14OrderedElementVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_255E59274()
{
  return sub_255EEFFF0();
}

BOOL sub_255E592F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s14OrderedElementVMa();
  return *(void *)(a1 + *(int *)(v4 + 36)) < *(void *)(a2 + *(int *)(v4 + 36));
}

uint64_t sub_255E5934C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_255E593A4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_255E59440(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_255E59538(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_255E59564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_255E595E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_255E5965C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_255E596D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_255E59754(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x255E59868);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_255E5987C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x255E59A28);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t sub_255E59A50()
{
  return sub_255EEFC80();
}

BOOL sub_255E59A5C()
{
  _s14OrderedElementVMa();
  uint64_t v0 = sub_255E59AB8();
  return v0 == sub_255E59AB8();
}

uint64_t sub_255E59AB8()
{
  return sub_255EF0580();
}

uint64_t sub_255E59B08()
{
  return sub_255EF0580();
}

BOOL sub_255E59B4C()
{
  return sub_255E59A5C();
}

uint64_t sub_255E59B58()
{
  return swift_getWitnessTable();
}

uint64_t *destroy for ProfileImageView(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >> 60 != 15) {
    return (uint64_t *)sub_255D80D04(*result, v1);
  }
  return result;
}

uint64_t _s11MedicalIDUI16ProfileImageViewVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_255D80890(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for ProfileImageView(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      sub_255D80890(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_255D80D04(v7, v8);
      return a1;
    }
    sub_255D81EF8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v5 = *(void *)a2;
  sub_255D80890(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for ProfileImageView(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_255D80D04(v6, v4);
      return a1;
    }
    sub_255D81EF8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileImageView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileImageView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)uint64_t result = a2 - 12;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileImageView()
{
  return &type metadata for ProfileImageView;
}

uint64_t sub_255E59DB8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E59DD4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v55 = a3;
  sub_255E394B8();
  *(void *)&long long v60 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_255EEE920();
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (double *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v56 = sub_255EEF7C0();
  uint64_t v11 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  int v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5A588();
  uint64_t v58 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E5A5E8();
  uint64_t v59 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v57 = (uint64_t)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5A648(0);
  uint64_t v54 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v61 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5A6D8(0, &qword_269F37538, (uint64_t (*)(uint64_t))sub_255E5A648, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v53 = (char *)&v52 - v22;
  unint64_t v23 = a2 >> 60;
  if (a2 >> 60 != 15)
  {
    uint64_t v52 = v8;
    uint64_t v24 = a1;
    id v25 = objc_allocWithZone(MEMORY[0x263F827E8]);
    sub_255D80890(v24, a2);
    uint64_t v26 = v24;
    uint64_t v27 = (void *)sub_255EEE040();
    id v28 = objc_msgSend(v25, sel_initWithData_, v27);

    if (v28)
    {
      sub_255EEF7A0();
      sub_255DAD684(v26, a2);
      uint64_t v8 = v52;
      goto LABEL_6;
    }
    sub_255DAD684(v26, a2);
    uint64_t v8 = v52;
  }
  sub_255EEF7B0();
LABEL_6:
  uint64_t v29 = v56;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x263F1B4B8], v56);
  uint64_t v30 = sub_255EEF7E0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
  if (qword_269F34BB8 != -1) {
    swift_once();
  }
  char v31 = v23 > 0xE;
  uint64_t v32 = 0x6C616E6F73726550;
  double v33 = *(double *)&qword_269F37510 * 0.5;
  uint64_t v34 = (char *)v10 + *(int *)(v8 + 20);
  uint64_t v35 = *MEMORY[0x263F19860];
  uint64_t v36 = sub_255EEED40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v34, v35, v36);
  *unsigned int v10 = v33;
  v10[1] = v33;
  sub_255E5AA74((uint64_t)v10, (uint64_t)v7, MEMORY[0x263F19048]);
  *(_WORD *)&v7[*(int *)(v60 + 36)] = 256;
  sub_255E5AA74((uint64_t)v7, (uint64_t)v16 + *(int *)(v58 + 36), (uint64_t (*)(void))sub_255E394B8);
  *uint64_t v16 = v30;
  swift_retain();
  sub_255E5AADC((uint64_t)v7, (uint64_t (*)(void))sub_255E394B8);
  sub_255E5AADC((uint64_t)v10, MEMORY[0x263F19048]);
  swift_release();
  sub_255EEFB10();
  sub_255EEE710();
  uint64_t v37 = v57;
  sub_255E5AA74((uint64_t)v16, v57, (uint64_t (*)(void))sub_255E5A588);
  uint64_t v38 = (_OWORD *)(v37 + *(int *)(v59 + 36));
  long long v39 = v63;
  *uint64_t v38 = v62;
  v38[1] = v39;
  v38[2] = v64;
  sub_255E5AADC((uint64_t)v16, (uint64_t (*)(void))sub_255E5A588);
  id v40 = objc_msgSend(self, sel_secondarySystemFillColor);
  uint64_t v41 = MEMORY[0x25A29B180](v40);
  uint64_t v42 = (uint64_t)v61;
  sub_255E5A7BC(v37, v31, v41);
  swift_release();
  sub_255E5AADC(v37, (uint64_t (*)(void))sub_255E5A5E8);
  sub_255D7F1F0();
  uint64_t v43 = swift_allocObject();
  long long v60 = xmmword_255EF1E20;
  *(_OWORD *)(v43 + 16) = xmmword_255EF1E20;
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = v60;
  *(void *)(v44 + 32) = 0x496C61636964654DLL;
  *(void *)(v44 + 40) = 0xE900000000000044;
  unint64_t v45 = 0xEC0000006F666E49;
  strcpy((char *)(v44 + 48), "PersonalInfo");
  *(unsigned char *)(v44 + 61) = 0;
  *(_WORD *)(v44 + 62) = -5120;
  uint64_t v46 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v47 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v47)
  {
    uint64_t v32 = sub_255EEFD90();
    unint64_t v45 = v48;
  }
  *(void *)(v43 + 32) = v32;
  *(void *)(v43 + 40) = v45;
  *(void *)(v43 + 48) = 0x6F746F6850;
  *(void *)(v43 + 56) = 0xE500000000000000;
  uint64_t v49 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v50 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v50)
  {
    sub_255EEFD90();

    sub_255E5AB3C();
    uint64_t v51 = (uint64_t)v53;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255E5AADC(v42, (uint64_t (*)(void))sub_255E5A648);
    sub_255E5AD7C(v51, v55);
  }
  else
  {
    __break(1u);
  }
}

void sub_255E5A580(uint64_t a1@<X8>)
{
  sub_255E59DD4(*(void *)v1, *(void *)(v1 + 8), a1);
}

void sub_255E5A588()
{
  if (!qword_269F37518)
  {
    sub_255E394B8();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37518);
    }
  }
}

void sub_255E5A5E8()
{
  if (!qword_269F37520)
  {
    sub_255E5A588();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37520);
    }
  }
}

void sub_255E5A648(uint64_t a1)
{
}

void sub_255E5A690(uint64_t a1)
{
}

void sub_255E5A6D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255E5A75C()
{
  if (!qword_269F35128)
  {
    unint64_t v0 = sub_255EEEF70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35128);
    }
  }
}

uint64_t sub_255E5A7BC(uint64_t a1, char a2, uint64_t a3)
{
  sub_255E5A5E8();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5A6D8(0, &qword_269F37560, (uint64_t (*)(uint64_t))sub_255E5A690, (uint64_t (*)(uint64_t))sub_255E5A5E8, MEMORY[0x263F19B20]);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v20 - v10;
  sub_255E5A690(0);
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = (char *)&v20 - v15;
  if (a2)
  {
    sub_255E5AA74(a1, (uint64_t)&v20 - v15, (uint64_t (*)(void))sub_255E5A5E8);
    *(void *)&v16[*(int *)(v13 + 36)] = a3;
    sub_255E5AA74((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(void))sub_255E5A690);
    swift_storeEnumTagMultiPayload();
    sub_255E5ABB4();
    sub_255E5AC5C();
    swift_retain();
    sub_255EEEE00();
    uint64_t v17 = (uint64_t (*)(void))sub_255E5A690;
    uint64_t v18 = (uint64_t)v16;
  }
  else
  {
    sub_255E5AA74(a1, (uint64_t)v8, (uint64_t (*)(void))sub_255E5A5E8);
    sub_255E5AA74((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))sub_255E5A5E8);
    swift_storeEnumTagMultiPayload();
    sub_255E5ABB4();
    sub_255E5AC5C();
    sub_255EEEE00();
    uint64_t v17 = (uint64_t (*)(void))sub_255E5A5E8;
    uint64_t v18 = (uint64_t)v8;
  }
  return sub_255E5AADC(v18, v17);
}

void sub_255E5AA64()
{
  qword_269F37510 = 0x4056000000000000;
}

uint64_t sub_255E5AA74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E5AADC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_255E5AB3C()
{
  unint64_t result = qword_269F37540;
  if (!qword_269F37540)
  {
    sub_255E5A648(255);
    sub_255E5ABB4();
    sub_255E5AC5C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37540);
  }
  return result;
}

unint64_t sub_255E5ABB4()
{
  unint64_t result = qword_269F37548;
  if (!qword_269F37548)
  {
    sub_255E5A690(255);
    sub_255E5AC5C();
    sub_255E5AF14((unint64_t *)&qword_269F369E0, (void (*)(uint64_t))sub_255E5A75C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37548);
  }
  return result;
}

unint64_t sub_255E5AC5C()
{
  unint64_t result = qword_269F37550;
  if (!qword_269F37550)
  {
    sub_255E5A5E8();
    sub_255E5ACD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37550);
  }
  return result;
}

unint64_t sub_255E5ACD4()
{
  unint64_t result = qword_269F37558;
  if (!qword_269F37558)
  {
    sub_255E5A588();
    sub_255E5AF14(&qword_269F36F30, (void (*)(uint64_t))sub_255E394B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37558);
  }
  return result;
}

uint64_t sub_255E5AD7C(uint64_t a1, uint64_t a2)
{
  sub_255E5A6D8(0, &qword_269F37538, (uint64_t (*)(uint64_t))sub_255E5A648, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_255E5AE28()
{
  unint64_t result = qword_269F37568;
  if (!qword_269F37568)
  {
    sub_255E5A6D8(255, &qword_269F37538, (uint64_t (*)(uint64_t))sub_255E5A648, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_255E5AB3C();
    sub_255E5AF14(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37568);
  }
  return result;
}

uint64_t sub_255E5AF14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E5AF5C@<X0>(uint64_t *a1@<X8>)
{
  sub_255DB6ED8();
  uint64_t result = sub_255EEE420();
  *a1 = result;
  return result;
}

void sub_255E5AF9C()
{
  qword_269F37570 = (uint64_t)&unk_2704A3448;
}

uint64_t static MIUIEntryPoint.allCases.getter()
{
  return sub_255E5B030(&qword_269F34BC0);
}

uint64_t sub_255E5AFD4@<X0>(void *a1@<X8>)
{
  return sub_255E5B2FC(&qword_269F34BC0, &qword_269F37570, a1);
}

void sub_255E5AFF8()
{
  qword_269F37578 = (uint64_t)&unk_2704A3488;
}

uint64_t static MIUIMedicalIDAccessPoint.allCases.getter()
{
  return sub_255E5B030(&qword_269F34BC8);
}

uint64_t sub_255E5B030(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t MIUIMedicalIDAccessPoint.analyticsDisplayName.getter()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_255E5B1BC()
{
  return sub_255E5B234(&qword_269F37580, &qword_269F37588, type metadata accessor for MIUIEntryPoint);
}

uint64_t sub_255E5B1F8()
{
  return sub_255E5B234(&qword_269F37590, &qword_269F37598, type metadata accessor for MIUIMedicalIDAccessPoint);
}

uint64_t sub_255E5B234(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E5B284(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E5B284(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEFF00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E5B2D8@<X0>(void *a1@<X8>)
{
  return sub_255E5B2FC(&qword_269F34BC8, &qword_269F37578, a1);
}

uint64_t sub_255E5B2FC@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for MedicalIDCellPlaceholderTextStyle()
{
  return &type metadata for MedicalIDCellPlaceholderTextStyle;
}

uint64_t sub_255E5B364()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E5B380()
{
}

void sub_255E5B394(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = sub_255EEF1E0();
  if (qword_269F34BD0 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_255E5D680(0, &qword_269F37678, (void (*)(void))sub_255E3C79C);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a2, a1, v13);
  sub_255E5D0D0();
  uint64_t v15 = a2 + *(int *)(v14 + 36);
  *(unsigned char *)uint64_t v15 = v4;
  *(void *)(v15 + 8) = v6;
  *(void *)(v15 + 16) = v8;
  *(void *)(v15 + 24) = v10;
  *(void *)(v15 + 32) = v12;
  *(unsigned char *)(v15 + 40) = 0;
}

uint64_t sub_255E5B4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  sub_255E5CD48(0, &qword_269F376E0, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v21 - v5;
  sub_255E5D734();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_255EEF2B0();
  uint64_t KeyPath = swift_getKeyPath();
  sub_255E5D680(0, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v6, a1, v13);
  uint64_t v14 = (uint64_t *)&v6[*(int *)(v4 + 44)];
  *uint64_t v14 = KeyPath;
  v14[1] = v11;
  if (qword_269F34C30 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_269F3FE50;
  sub_255E5D02C((uint64_t)v6, (uint64_t)v10, &qword_269F376E0, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
  *(void *)&v10[*(int *)(v8 + 36)] = v15;
  swift_retain();
  sub_255E5CBE4((uint64_t)v6, &qword_269F376E0, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = v22;
  sub_255E5D7E0((uint64_t)v10, v22, (uint64_t (*)(void))sub_255E5D734);
  sub_255E5D848();
  uint64_t v19 = v17 + *(int *)(v18 + 36);
  *(void *)uint64_t v19 = v16;
  *(unsigned char *)(v19 + 8) = 0;
  return sub_255E5D8D4((uint64_t)v10, (uint64_t (*)(void))sub_255E5D734);
}

uint64_t sub_255E5B730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E5D680(0, &qword_269F37670, (void (*)(void))sub_255E0E9B0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a2, a1, v4);
}

uint64_t sub_255E5B7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E5B8E8();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5D680(0, &qword_269F375B0, (void (*)(void))sub_255E0EC48);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a1, v7);
  LODWORD(a1) = sub_255EEEF30();
  sub_255E5D7E0((uint64_t)v6, a2, (uint64_t (*)(void))sub_255E5B8E8);
  sub_255E5B96C();
  *(_DWORD *)(a2 + *(int *)(v8 + 36)) = a1;
  return sub_255E5D8D4((uint64_t)v6, (uint64_t (*)(void))sub_255E5B8E8);
}

void sub_255E5B8E8()
{
  if (!qword_269F375A8)
  {
    sub_255E5D680(255, &qword_269F375B0, (void (*)(void))sub_255E0EC48);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F375A8);
    }
  }
}

void sub_255E5B96C()
{
  if (!qword_269F375B8)
  {
    sub_255E5B8E8();
    sub_255E5CA28(255, (unint64_t *)&qword_269F36088);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F375B8);
    }
  }
}

ValueMetadata *type metadata accessor for EditSectionHeaderViewDescriptionStyle()
{
  return &type metadata for EditSectionHeaderViewDescriptionStyle;
}

ValueMetadata *type metadata accessor for EditSectionHeaderViewTitleStyle()
{
  return &type metadata for EditSectionHeaderViewTitleStyle;
}

ValueMetadata *type metadata accessor for MedicalIDCellStyle()
{
  return &type metadata for MedicalIDCellStyle;
}

ValueMetadata *type metadata accessor for MedicalIDCellBodyTextStyle()
{
  return &type metadata for MedicalIDCellBodyTextStyle;
}

uint64_t sub_255E5BA2C()
{
  return sub_255E5D9D8(&qword_269F375C0, (void (*)(uint64_t))sub_255E5B96C, (void (*)(void))sub_255E5BA88, (void (*)(void))sub_255E5BB4C);
}

uint64_t sub_255E5BA88()
{
  return sub_255E5D9D8(&qword_269F375C8, (void (*)(uint64_t))sub_255E5B8E8, (void (*)(void))sub_255E5BAD0, (void (*)(void))sub_255E0E9B0);
}

unint64_t sub_255E5BAD0()
{
  unint64_t result = qword_269F375D0;
  if (!qword_269F375D0)
  {
    sub_255E5D680(255, &qword_269F375B0, (void (*)(void))sub_255E0EC48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F375D0);
  }
  return result;
}

unint64_t sub_255E5BB4C()
{
  unint64_t result = qword_269F360B8;
  if (!qword_269F360B8)
  {
    sub_255E5CA28(255, (unint64_t *)&qword_269F36088);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F360B8);
  }
  return result;
}

uint64_t sub_255E5BBBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E5BBD8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E5BBF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E5BC10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v49 = a2;
  sub_255DE7748(0);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_255EEE5D0();
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v43 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5CD48(0, &qword_269F375D8, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v40 - v7;
  sub_255E5C768();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5C9A8();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5CA74();
  uint64_t v47 = v18;
  uint64_t v45 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v41 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_255EEF250();
  uint64_t KeyPath = swift_getKeyPath();
  sub_255E5D680(0, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v8, v42, v22);
  unint64_t v23 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *unint64_t v23 = KeyPath;
  v23[1] = v20;
  sub_255EEF220();
  sub_255E5C818();
  sub_255EEF400();
  sub_255E5CBE4((uint64_t)v8, &qword_269F375D8, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
  id v24 = objc_msgSend(self, sel_labelColor);
  uint64_t v25 = MEMORY[0x25A29B180](v24);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v13, v10);
  *(void *)&v17[*(int *)(v15 + 36)] = v25;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v27 = v43;
  uint64_t v26 = v44;
  uint64_t v28 = v46;
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, *MEMORY[0x263F18440], v46);
  sub_255E5CAF8();
  uint64_t v29 = v41;
  sub_255EEF510();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  sub_255E5D8D4((uint64_t)v17, (uint64_t (*)(void))sub_255E5C9A8);
  uint64_t v30 = sub_255EEF390();
  uint64_t v31 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v48, 1, 1, v30);
  uint64_t v32 = swift_getKeyPath();
  sub_255E5CC48(0, &qword_269F37620, (void (*)(uint64_t))sub_255E5CA74);
  uint64_t v34 = v49;
  uint64_t v35 = (uint64_t *)(v49 + *(int *)(v33 + 36));
  sub_255E5CCE4(0, &qword_269F36078, (uint64_t (*)(uint64_t))sub_255DE7748, MEMORY[0x263F1A418]);
  sub_255E5D7E0(v31, (uint64_t)v35 + *(int *)(v36 + 28), (uint64_t (*)(void))sub_255DE7748);
  uint64_t *v35 = v32;
  uint64_t v37 = v45;
  uint64_t v38 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v34, v29, v47);
  sub_255E5D8D4(v31, (uint64_t (*)(void))sub_255DE7748);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v29, v38);
}

uint64_t sub_255E5C1CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v42 = a2;
  sub_255DE7748(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5CD48(0, &qword_269F37628, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v37 - v6;
  sub_255E5CE28();
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5CED4();
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5CF54();
  uint64_t v40 = v16 - 8;
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v38 = (uint64_t)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_255EEF1F0();
  uint64_t KeyPath = swift_getKeyPath();
  sub_255E5D680(0, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v39, v20);
  uint64_t v21 = (uint64_t *)&v7[*(int *)(v5 + 44)];
  *uint64_t v21 = KeyPath;
  v21[1] = v18;
  id v22 = objc_msgSend(self, sel_secondaryLabelColor);
  uint64_t v23 = MEMORY[0x25A29B180](v22);
  sub_255E5D02C((uint64_t)v7, (uint64_t)v11, &qword_269F37628, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
  *(void *)&v11[*(int *)(v9 + 44)] = v23;
  sub_255E5CBE4((uint64_t)v7, &qword_269F37628, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
  uint64_t v24 = swift_getKeyPath();
  sub_255E5D7E0((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))sub_255E5CE28);
  uint64_t v25 = &v15[*(int *)(v13 + 44)];
  *(void *)uint64_t v25 = v24;
  *((void *)v25 + 1) = 0;
  v25[16] = 1;
  sub_255E5D8D4((uint64_t)v11, (uint64_t (*)(void))sub_255E5CE28);
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = v38;
  sub_255E5D7E0((uint64_t)v15, v38, (uint64_t (*)(void))sub_255E5CED4);
  uint64_t v28 = v27 + *(int *)(v40 + 44);
  *(void *)uint64_t v28 = v26;
  *(unsigned char *)(v28 + 8) = 0;
  sub_255E5D8D4((uint64_t)v15, (uint64_t (*)(void))sub_255E5CED4);
  uint64_t v29 = sub_255EEF390();
  uint64_t v30 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v41, 1, 1, v29);
  uint64_t v31 = swift_getKeyPath();
  sub_255E5D0B0(0);
  uint64_t v33 = v42;
  uint64_t v34 = (uint64_t *)(v42 + *(int *)(v32 + 36));
  sub_255E5CCE4(0, &qword_269F36078, (uint64_t (*)(uint64_t))sub_255DE7748, MEMORY[0x263F1A418]);
  sub_255E5D7E0(v30, (uint64_t)v34 + *(int *)(v35 + 28), (uint64_t (*)(void))sub_255DE7748);
  *uint64_t v34 = v31;
  sub_255E5D7E0(v27, v33, (uint64_t (*)(void))sub_255E5CF54);
  sub_255E5D8D4(v30, (uint64_t (*)(void))sub_255DE7748);
  return sub_255E5D8D4(v27, (uint64_t (*)(void))sub_255E5CF54);
}

uint64_t sub_255E5C68C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_255E5C6A8()
{
  unint64_t result = qword_269F375E8;
  if (!qword_269F375E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F375E8);
  }
  return result;
}

void sub_255E5C6FC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_255E5CFE0(255, a3, a4, MEMORY[0x263F8D8F0]);
    unint64_t v5 = sub_255EEF080();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255E5C768()
{
  if (!qword_269F375F0)
  {
    sub_255E5CD48(255, &qword_269F375D8, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
    sub_255E5C818();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F375F0);
    }
  }
}

unint64_t sub_255E5C818()
{
  unint64_t result = qword_269F375F8;
  if (!qword_269F375F8)
  {
    sub_255E5CD48(255, &qword_269F375D8, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
    sub_255E5C8DC();
    sub_255E5C958(&qword_269F35198, (unint64_t *)&qword_269F35178, &qword_269F35180, MEMORY[0x263F1A738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F375F8);
  }
  return result;
}

unint64_t sub_255E5C8DC()
{
  unint64_t result = qword_269F37600;
  if (!qword_269F37600)
  {
    sub_255E5D680(255, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37600);
  }
  return result;
}

uint64_t sub_255E5C958(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E5C6FC(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E5C9A8()
{
  if (!qword_269F37608)
  {
    sub_255E5C768();
    sub_255E5CA28(255, (unint64_t *)&qword_269F35128);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37608);
    }
  }
}

void sub_255E5CA28(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_255EEEF70();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_255E5CA74()
{
  if (!qword_269F37610)
  {
    sub_255E5C9A8();
    sub_255E5CAF8();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37610);
    }
  }
}

unint64_t sub_255E5CAF8()
{
  unint64_t result = qword_269F37618;
  if (!qword_269F37618)
  {
    sub_255E5C9A8();
    sub_255E5CD48(255, &qword_269F375D8, &qword_269F375E0, (void (*)(void))sub_255E5C6A8);
    sub_255E5C818();
    swift_getOpaqueTypeConformance2();
    sub_255E1E308();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37618);
  }
  return result;
}

void sub_255E5CBCC()
{
  qword_269F375A0 = 0x4030000000000000;
}

uint64_t sub_255E5CBE4(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  sub_255E5CD48(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_255E5CC48(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255E5CCE4(255, &qword_269F36078, (uint64_t (*)(uint64_t))sub_255DE7748, MEMORY[0x263F1A418]);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E5CCE4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E5CD48(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    sub_255E5D680(255, a3, a4);
    sub_255E5C6FC(255, (unint64_t *)&qword_269F35178, &qword_269F35180, MEMORY[0x263F1A738]);
    unint64_t v5 = sub_255EEE870();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255E5CDD4()
{
  unint64_t result = qword_269F37638;
  if (!qword_269F37638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37638);
  }
  return result;
}

void sub_255E5CE28()
{
  if (!qword_269F37640)
  {
    sub_255E5CD48(255, &qword_269F37628, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
    sub_255E5CA28(255, (unint64_t *)&qword_269F35128);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37640);
    }
  }
}

void sub_255E5CED4()
{
  if (!qword_269F37648)
  {
    sub_255E5CE28();
    sub_255E5C6FC(255, &qword_269F37650, &qword_269F37658, MEMORY[0x263F8D6C8]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37648);
    }
  }
}

void sub_255E5CF54()
{
  if (!qword_269F37660)
  {
    sub_255E5CED4();
    sub_255E5CFE0(255, &qword_269F36048, MEMORY[0x263F18968], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37660);
    }
  }
}

void sub_255E5CFE0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E5D02C(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  sub_255E5CD48(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_255E5D0B0(uint64_t a1)
{
}

void sub_255E5D0D0()
{
  if (!qword_269F37680)
  {
    sub_255E5D680(255, &qword_269F37678, (void (*)(void))sub_255E3C79C);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37680);
    }
  }
}

ValueMetadata *type metadata accessor for MedicalIDCellHeaderTextStyle()
{
  return &type metadata for MedicalIDCellHeaderTextStyle;
}

unint64_t sub_255E5D168()
{
  unint64_t result = qword_269F37688;
  if (!qword_269F37688)
  {
    sub_255E5CC48(255, &qword_269F37620, (void (*)(uint64_t))sub_255E5CA74);
    sub_255E5C9A8();
    sub_255E5CAF8();
    swift_getOpaqueTypeConformance2();
    sub_255DE7B7C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37688);
  }
  return result;
}

uint64_t sub_255E5D22C()
{
  return sub_255E5D9D8(&qword_269F37690, sub_255E5D0B0, (void (*)(void))sub_255E5D288, (void (*)(void))sub_255DE7B7C);
}

uint64_t sub_255E5D288()
{
  return sub_255E5D9D8(&qword_269F37698, (void (*)(uint64_t))sub_255E5CF54, (void (*)(void))sub_255E5D2D0, (void (*)(void))sub_255DE7BB0);
}

unint64_t sub_255E5D2D0()
{
  unint64_t result = qword_269F376A0;
  if (!qword_269F376A0)
  {
    sub_255E5CED4();
    sub_255E5D9D8(&qword_269F376A8, (void (*)(uint64_t))sub_255E5CE28, (void (*)(void))sub_255E5D3AC, (void (*)(void))sub_255E1E308);
    sub_255E5C958(&qword_269F376C0, &qword_269F37650, &qword_269F37658, MEMORY[0x263F8D6C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376A0);
  }
  return result;
}

unint64_t sub_255E5D3AC()
{
  unint64_t result = qword_269F376B0;
  if (!qword_269F376B0)
  {
    sub_255E5CD48(255, &qword_269F37628, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
    sub_255E5D470();
    sub_255E5C958(&qword_269F35198, (unint64_t *)&qword_269F35178, &qword_269F35180, MEMORY[0x263F1A738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376B0);
  }
  return result;
}

unint64_t sub_255E5D470()
{
  unint64_t result = qword_269F376B8;
  if (!qword_269F376B8)
  {
    sub_255E5D680(255, &qword_269F37630, (void (*)(void))sub_255E5CDD4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376B8);
  }
  return result;
}

unint64_t sub_255E5D4F0()
{
  unint64_t result = qword_269F376C8;
  if (!qword_269F376C8)
  {
    sub_255E5D680(255, &qword_269F37670, (void (*)(void))sub_255E0E9B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376C8);
  }
  return result;
}

unint64_t sub_255E5D570()
{
  unint64_t result = qword_269F376D0;
  if (!qword_269F376D0)
  {
    sub_255E5D0D0();
    sub_255E5D5E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376D0);
  }
  return result;
}

unint64_t sub_255E5D5E8()
{
  unint64_t result = qword_269F376D8;
  if (!qword_269F376D8)
  {
    sub_255E5D680(255, &qword_269F37678, (void (*)(void))sub_255E3C79C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376D8);
  }
  return result;
}

uint64_t sub_255E5D664()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E5D680(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_255EEEF10();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_255E5D6E0()
{
  unint64_t result = qword_269F376F0;
  if (!qword_269F376F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F376F0);
  }
  return result;
}

void sub_255E5D734()
{
  if (!qword_269F376F8)
  {
    sub_255E5CD48(255, &qword_269F376E0, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
    sub_255E5CA28(255, (unint64_t *)&qword_269F35128);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F376F8);
    }
  }
}

uint64_t sub_255E5D7E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255E5D848()
{
  if (!qword_269F37700)
  {
    sub_255E5D734();
    sub_255E5CFE0(255, &qword_269F36048, MEMORY[0x263F18968], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37700);
    }
  }
}

uint64_t sub_255E5D8D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E5D934()
{
  return sub_255E5D9D8(&qword_269F37708, (void (*)(uint64_t))sub_255E5D848, (void (*)(void))sub_255E5D990, (void (*)(void))sub_255DE7BB0);
}

uint64_t sub_255E5D990()
{
  return sub_255E5D9D8(&qword_269F37710, (void (*)(uint64_t))sub_255E5D734, (void (*)(void))sub_255E5DA64, (void (*)(void))sub_255E1E308);
}

uint64_t sub_255E5D9D8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E5DA64()
{
  unint64_t result = qword_269F37718;
  if (!qword_269F37718)
  {
    sub_255E5CD48(255, &qword_269F376E0, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
    sub_255E5DB28();
    sub_255E5C958(&qword_269F35198, (unint64_t *)&qword_269F35178, &qword_269F35180, MEMORY[0x263F1A738]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37718);
  }
  return result;
}

unint64_t sub_255E5DB28()
{
  unint64_t result = qword_269F37720;
  if (!qword_269F37720)
  {
    sub_255E5D680(255, &qword_269F376E8, (void (*)(void))sub_255E5D6E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37720);
  }
  return result;
}

id sub_255E5DBA8(void *a1)
{
  return objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

void **sub_255E5DBBC(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_255EEE280();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    uint64_t v14 = v4;
    v13(v10, v11, v12);
    uint64_t v15 = *(int *)(v8 + 24);
    uint64_t v16 = (char *)v7 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = *(void **)((char *)a2 + v19);
    *(void **)((char *)v7 + v19) = v20;
    id v21 = v20;
  }
  return v7;
}

void sub_255E5DD10(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v5 = (char *)a1 + *(int *)(v4 + 20);
  uint64_t v6 = sub_255EEE280();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (char *)a1 + *(int *)(v4 + 24);
  uint64_t v8 = sub_255EEE200();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = *(id *)((char *)a1 + *(int *)(a2 + 20));
}

void **sub_255E5DDE8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v6;
  v12(v9, v10, v11);
  uint64_t v14 = *(int *)(v7 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(void **)((char *)a2 + v18);
  *(void **)((char *)a1 + v18) = v19;
  id v20 = v19;
  return a1;
}

void **sub_255E5DEF0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(void **)((char *)a2 + v18);
  id v20 = *(void **)((char *)a1 + v18);
  *(void **)((char *)a1 + v18) = v19;
  id v21 = v19;

  return a1;
}

void *sub_255E5DFF4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(int *)(v6 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(v6 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_255E5E0E0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = *(void **)((char *)a1 + v16);
  *(void **)((char *)a1 + v16) = *(void **)((char *)a2 + v16);

  return a1;
}

uint64_t sub_255E5E1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E5E1F0);
}

uint64_t sub_255E5E1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E5E2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E5E2C4);
}

uint64_t sub_255E5E2C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDEditAllergiesModalView()
{
  uint64_t result = qword_269F37728;
  if (!qword_269F37728) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E5E3CC()
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E5E464()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E5E480(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_255EEFD40();
  MEMORY[0x270FA5388](v3 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_269F352A8;
  uint64_t v5 = sub_255EEE200();
  MEMORY[0x270FA5388](v5 - 8);
  id v6 = v4;
  sub_255EEE1F0();
  uint64_t v7 = sub_255EEFDA0();
  uint64_t v39 = v8;
  uint64_t v40 = v7;
  if (qword_269F34B08 != -1) {
    swift_once();
  }
  uint64_t v37 = qword_269F3FD70;
  uint64_t v38 = MEMORY[0x270FA5388](*(void *)algn_269F3FD78);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_255EEFCD0();
  unint64_t v10 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v9);
  id v11 = v10;
  sub_255EEE1F0();
  uint64_t v12 = sub_255EEFDA0();
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  id v14 = *a1;
  id v15 = objc_msgSend(*a1, sel_allergyInfo);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = sub_255EEFD90();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  id v20 = objc_msgSend(v14, sel_allergiesListVersion, a1);
  if (v20)
  {

    MEMORY[0x270FA5388](v21);
    uint64_t v22 = sub_255EEFCD0();
    uint64_t v23 = (void *)qword_269F352A8;
    MEMORY[0x270FA5388](v22);
    id v24 = v23;
    sub_255EEE1F0();
    uint64_t v25 = sub_255EEFDA0();
    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
  }
  uint64_t v28 = 0x65696772656C6C41;
  sub_255D7F1F0();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_255EF1E20;
  unint64_t v30 = 0xE900000000000073;
  *(void *)(v29 + 32) = 0x496C61636964654DLL;
  *(void *)(v29 + 40) = 0xE900000000000044;
  *(void *)(v29 + 48) = 0x65696772656C6C41;
  *(void *)(v29 + 56) = 0xE900000000000073;
  uint64_t v31 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    uint64_t v28 = sub_255EEFD90();
    unint64_t v30 = v33;
  }
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v36;
  a2[5] = v35;
  a2[6] = v17;
  a2[7] = v19;
  a2[8] = v25;
  a2[9] = v27;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t sub_255E5E8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  return result;
}

double sub_255E5E93C@<D0>(uint64_t a1@<X8>)
{
  sub_255E5E480(v1, (uint64_t *)v4);
  return sub_255E45818(v4, (uint64_t)sub_255E5E8F4, 0, a1);
}

uint64_t sub_255E5E994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v5 = a2 + v4[5];
  sub_255EEF810();
  *(unsigned char *)uint64_t v5 = v15;
  *(void *)(v5 + 8) = v16;
  id v6 = (uint64_t *)(a2 + v4[8]);
  sub_255DB6ED8();
  sub_255E66530((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  *id v6 = sub_255EEE9F0();
  v6[1] = v7;
  uint64_t v8 = a2 + v4[9];
  type metadata accessor for MedicalIDDataManager();
  sub_255E66530(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  *(void *)uint64_t v8 = sub_255EEE650();
  *(unsigned char *)(v8 + 8) = v9 & 1;
  sub_255E67060(a1, a2, type metadata accessor for MedicalIDSettingsViewModel);
  uint64_t v10 = type metadata accessor for MedicalIDData();
  LOBYTE(v8) = *(unsigned char *)(a1 + *(int *)(v10 + 72));
  uint64_t v11 = a2 + v4[6];
  sub_255EEF810();
  *(unsigned char *)uint64_t v11 = v15;
  *(void *)(v11 + 8) = v16;
  LOBYTE(v10) = *(unsigned char *)(a1 + *(int *)(v10 + 68));
  type metadata accessor for MedicalIDEditableSettingsViewModel(0);
  uint64_t v12 = swift_allocObject();
  sub_255EEE300();
  *(unsigned char *)(v12 + 17) = (v10 & 1) == 0;
  *(unsigned char *)(v12 + 16) = v8;
  uint64_t result = sub_255E67144(a1, type metadata accessor for MedicalIDSettingsViewModel);
  id v14 = (uint64_t *)(a2 + v4[7]);
  *id v14 = v12;
  v14[1] = 0;
  return result;
}

uint64_t type metadata accessor for MedicalIDEditSettingsView()
{
  uint64_t result = qword_269F37770;
  if (!qword_269F37770) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_255E5EBEC(void *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v6;
    uint64_t v7 = *((void *)a2 + 3);
    a1[2] = *((void *)a2 + 2);
    a1[3] = v7;
    uint64_t v8 = *((void *)a2 + 5);
    a1[4] = *((void *)a2 + 4);
    a1[5] = v8;
    uint64_t v9 = *((void *)a2 + 7);
    a1[6] = *((void *)a2 + 6);
    a1[7] = v9;
    uint64_t v10 = *((void *)a2 + 9);
    a1[8] = *((void *)a2 + 8);
    a1[9] = v10;
    uint64_t v11 = *((void *)a2 + 11);
    a1[10] = *((void *)a2 + 10);
    a1[11] = v11;
    uint64_t v83 = (void *)*((void *)a2 + 12);
    uint64_t v84 = (void *)*((void *)a2 + 13);
    a1[12] = v83;
    a1[13] = v84;
    uint64_t v88 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v12 = v88[13];
    __dst = (char *)v4 + v12;
    uint64_t v13 = &a2[v12];
    uint64_t v14 = sub_255EEE100();
    uint64_t v87 = *(void *)(v14 - 8);
    char v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v83;
    id v17 = v84;
    if (v15(v13, 1, v14))
    {
      sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v20 = v88[14];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = &a2[v20];
    if (v15(&a2[v20], 1, v14))
    {
      sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v21, v22, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v21, 0, 1, v14);
    }
    uint64_t v24 = v88[15];
    uint64_t v25 = (void *)((char *)v4 + v24);
    uint64_t v26 = &a2[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *uint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v88[16];
    uint64_t v29 = (void *)((char *)v4 + v28);
    unint64_t v30 = &a2[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *uint64_t v29 = *(void *)v30;
    v29[1] = v31;
    *((unsigned char *)v4 + v88[17]) = a2[v88[17]];
    *((unsigned char *)v4 + v88[18]) = a2[v88[18]];
    uint64_t v32 = v88[19];
    unint64_t v33 = (char *)v4 + v32;
    uint64_t v34 = (uint64_t *)&a2[v32];
    unint64_t v35 = *(void *)&a2[v32 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v36 = *v34;
      sub_255D80890(*v34, v35);
      *(void *)unint64_t v33 = v36;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v37 = v88[20];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = &a2[v37];
    uint64_t v40 = sub_255EEDF60();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_255E5F280(0, &qword_269F350B8, MEMORY[0x270FA8130], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v88[21];
    uint64_t v44 = *(void **)&a2[v43];
    *(void *)((char *)v4 + v43) = v44;
    uint64_t v45 = v88[22];
    uint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = &a2[v45];
    id v48 = v44;
    if (v15(v47, 1, v14))
    {
      sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v46, v47, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v46, 0, 1, v14);
    }
    id v50 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
    uint64_t v51 = v50[5];
    uint64_t v52 = *(void **)&a2[v51];
    *(void *)((char *)v4 + v51) = v52;
    uint64_t v53 = v50[6];
    uint64_t v54 = (void *)((char *)v4 + v53);
    uint64_t v55 = &a2[v53];
    uint64_t v56 = *((void *)v55 + 1);
    *uint64_t v54 = *(void *)v55;
    v54[1] = v56;
    *((unsigned char *)v4 + v50[7]) = a2[v50[7]];
    *((unsigned char *)v4 + v50[8]) = a2[v50[8]];
    *((unsigned char *)v4 + v50[9]) = a2[v50[9]];
    *((unsigned char *)v4 + v50[10]) = a2[v50[10]];
    uint64_t v57 = v50[11];
    uint64_t v58 = (void *)((char *)v4 + v57);
    uint64_t v59 = &a2[v57];
    uint64_t v60 = *((void *)v59 + 1);
    *uint64_t v58 = *(void *)v59;
    v58[1] = v60;
    uint64_t v61 = a3[5];
    uint64_t v62 = a3[6];
    long long v63 = (char *)v4 + v61;
    long long v64 = &a2[v61];
    char *v63 = *v64;
    *((void *)v63 + 1) = *((void *)v64 + 1);
    long long v65 = (char *)v4 + v62;
    long long v66 = &a2[v62];
    *long long v65 = *v66;
    *((void *)v65 + 1) = *((void *)v66 + 1);
    uint64_t v67 = a3[7];
    uint64_t v68 = a3[8];
    id v69 = (void *)((char *)v4 + v67);
    uint64_t v70 = &a2[v67];
    uint64_t v71 = *((void *)v70 + 1);
    *id v69 = *(void *)v70;
    v69[1] = v71;
    uint64_t v72 = (void *)((char *)v4 + v68);
    id v73 = &a2[v68];
    int v75 = *(void **)v73;
    uint64_t v74 = *((void *)v73 + 1);
    *uint64_t v72 = v75;
    v72[1] = v74;
    uint64_t v76 = a3[9];
    id v77 = (char *)v4 + v76;
    uint64_t v78 = &a2[v76];
    uint64_t v79 = *(void *)v78;
    LOBYTE(v78) = v78[8];
    *(void *)id v77 = v79;
    v77[8] = (char)v78;
    id v80 = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v81 = v75;
  }
  swift_retain();
  return v4;
}

void sub_255E5F280(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E5F2E4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = a1 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(a1 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = a1 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = a1 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_255E5F5E0(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *((void *)a2 + 3);
  a1[2] = *((void *)a2 + 2);
  a1[3] = v6;
  uint64_t v7 = *((void *)a2 + 5);
  a1[4] = *((void *)a2 + 4);
  a1[5] = v7;
  uint64_t v8 = *((void *)a2 + 7);
  a1[6] = *((void *)a2 + 6);
  a1[7] = v8;
  uint64_t v9 = *((void *)a2 + 9);
  a1[8] = *((void *)a2 + 8);
  a1[9] = v9;
  uint64_t v10 = *((void *)a2 + 11);
  a1[10] = *((void *)a2 + 10);
  a1[11] = v10;
  id v81 = (void *)*((void *)a2 + 12);
  uint64_t v82 = (void *)*((void *)a2 + 13);
  a1[12] = v81;
  a1[13] = v82;
  uint64_t v86 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v11 = v86[13];
  __dst = (char *)a1 + v11;
  uint64_t v12 = &a2[v11];
  uint64_t v13 = sub_255EEE100();
  uint64_t v85 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v81;
  id v16 = v82;
  if (v14(v12, 1, v13))
  {
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v18 = v86[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v14(&a2[v18], 1, v13))
  {
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v86[15];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *uint64_t v23 = *(void *)v24;
  v23[1] = v25;
  uint64_t v26 = v86[16];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *((void *)v28 + 1);
  *uint64_t v27 = *(void *)v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v86[17]) = a2[v86[17]];
  *((unsigned char *)a1 + v86[18]) = a2[v86[18]];
  uint64_t v30 = v86[19];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (uint64_t *)&a2[v30];
  unint64_t v33 = *(void *)&a2[v30 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v34 = *v32;
    sub_255D80890(*v32, v33);
    *(void *)uint64_t v31 = v34;
    *((void *)v31 + 1) = v33;
  }
  uint64_t v35 = v86[20];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = &a2[v35];
  uint64_t v38 = sub_255EEDF60();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_255E5F280(0, &qword_269F350B8, MEMORY[0x270FA8130], MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  uint64_t v41 = v86[21];
  uint64_t v42 = *(void **)&a2[v41];
  *(void *)((char *)a1 + v41) = v42;
  uint64_t v43 = v86[22];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = &a2[v43];
  id v46 = v42;
  if (v14(v45, 1, v13))
  {
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v44, v45, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v44, 0, 1, v13);
  }
  id v48 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v49 = v48[5];
  id v50 = *(void **)&a2[v49];
  *(void *)((char *)a1 + v49) = v50;
  uint64_t v51 = v48[6];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = &a2[v51];
  uint64_t v54 = *((void *)v53 + 1);
  *uint64_t v52 = *(void *)v53;
  v52[1] = v54;
  *((unsigned char *)a1 + v48[7]) = a2[v48[7]];
  *((unsigned char *)a1 + v48[8]) = a2[v48[8]];
  *((unsigned char *)a1 + v48[9]) = a2[v48[9]];
  *((unsigned char *)a1 + v48[10]) = a2[v48[10]];
  uint64_t v55 = v48[11];
  uint64_t v56 = (void *)((char *)a1 + v55);
  uint64_t v57 = &a2[v55];
  uint64_t v58 = *((void *)v57 + 1);
  *uint64_t v56 = *(void *)v57;
  v56[1] = v58;
  uint64_t v59 = a3[5];
  uint64_t v60 = a3[6];
  uint64_t v61 = (char *)a1 + v59;
  uint64_t v62 = &a2[v59];
  *uint64_t v61 = *v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  long long v63 = (char *)a1 + v60;
  long long v64 = &a2[v60];
  char *v63 = *v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  uint64_t v65 = a3[7];
  uint64_t v66 = a3[8];
  uint64_t v67 = (void *)((char *)a1 + v65);
  uint64_t v68 = &a2[v65];
  uint64_t v69 = *((void *)v68 + 1);
  *uint64_t v67 = *(void *)v68;
  v67[1] = v69;
  uint64_t v70 = (void *)((char *)a1 + v66);
  uint64_t v71 = &a2[v66];
  id v73 = *(void **)v71;
  uint64_t v72 = *((void *)v71 + 1);
  *uint64_t v70 = v73;
  v70[1] = v72;
  uint64_t v74 = a3[9];
  int v75 = (char *)a1 + v74;
  uint64_t v76 = &a2[v74];
  uint64_t v77 = *(void *)v76;
  LOBYTE(v76) = v76[8];
  *(void *)int v75 = v77;
  v75[8] = (char)v76;
  id v78 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v79 = v73;
  swift_retain();
  return a1;
}

char *sub_255E5FC28(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 11) = a2[11];
  uint64_t v5 = (void *)*((void *)a1 + 12);
  uint64_t v6 = (void *)a2[12];
  *((void *)a1 + 12) = v6;
  id v7 = v6;

  uint64_t v8 = (void *)*((void *)a1 + 13);
  uint64_t v9 = (void *)a2[13];
  *((void *)a1 + 13) = v9;
  id v10 = v9;

  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[14];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  int v24 = v17(&a1[v21], 1, v15);
  int v25 = v17(v23, 1, v15);
  uint64_t v93 = v15;
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  uint64_t v27 = v11[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = (void *)((char *)a2 + v27);
  *(void *)uint64_t v28 = *v29;
  *((void *)v28 + 1) = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v11[16];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = (void *)((char *)a2 + v30);
  *(void *)uint64_t v31 = *v32;
  *((void *)v31 + 1) = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v11[17]] = *((unsigned char *)a2 + v11[17]);
  a1[v11[18]] = *((unsigned char *)a2 + v11[18]);
  uint64_t v33 = v11[19];
  uint64_t v34 = (uint64_t *)&a1[v33];
  uint64_t v35 = (void *)((char *)a2 + v33);
  unint64_t v36 = *(void *)((char *)a2 + v33 + 8);
  uint64_t v92 = v17;
  if (*(void *)&a1[v33 + 8] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_255D80890(*v35, v36);
      *uint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v36 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v34);
LABEL_18:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_20;
  }
  uint64_t v38 = *v35;
  sub_255D80890(*v35, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *uint64_t v34 = v38;
  v34[1] = v36;
  sub_255D80D04(v39, v40);
LABEL_20:
  uint64_t v41 = v11[20];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  id v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (v47)
  {
    uint64_t v49 = v92;
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v49 = v92;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_25:
    sub_255E5F280(0, &qword_269F350B8, MEMORY[0x270FA8130], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_26:
  uint64_t v51 = v11[21];
  uint64_t v52 = *(void **)&a1[v51];
  uint64_t v53 = *(void **)((char *)a2 + v51);
  *(void *)&a1[v51] = v53;
  id v54 = v53;

  uint64_t v55 = v11[22];
  uint64_t v56 = &a1[v55];
  uint64_t v57 = (char *)a2 + v55;
  int v58 = v49(&a1[v55], 1, v93);
  int v59 = v49(v57, 1, v93);
  if (!v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v56, v57, v93);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v56, v93);
    goto LABEL_31;
  }
  if (v59)
  {
LABEL_31:
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v56, v57, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v56, 0, 1, v93);
LABEL_32:
  uint64_t v61 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v62 = v61[5];
  long long v63 = *(void **)((char *)a2 + v62);
  long long v64 = *(void **)&a1[v62];
  *(void *)&a1[v62] = v63;
  id v65 = v63;

  uint64_t v66 = v61[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = (void *)((char *)a2 + v66);
  *(void *)uint64_t v67 = *v68;
  *((void *)v67 + 1) = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v61[7]] = *((unsigned char *)a2 + v61[7]);
  a1[v61[8]] = *((unsigned char *)a2 + v61[8]);
  a1[v61[9]] = *((unsigned char *)a2 + v61[9]);
  a1[v61[10]] = *((unsigned char *)a2 + v61[10]);
  uint64_t v69 = v61[11];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = (void *)((char *)a2 + v69);
  *(void *)uint64_t v70 = *v71;
  *((void *)v70 + 1) = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[5];
  id v73 = &a1[v72];
  uint64_t v74 = (char *)a2 + v72;
  char *v73 = *v74;
  *((void *)v73 + 1) = *((void *)v74 + 1);
  swift_retain();
  swift_release();
  uint64_t v75 = a3[6];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = (char *)a2 + v75;
  *uint64_t v76 = *v77;
  *((void *)v76 + 1) = *((void *)v77 + 1);
  swift_retain();
  swift_release();
  uint64_t v78 = a3[7];
  id v79 = &a1[v78];
  id v80 = (char *)a2 + v78;
  *(void *)&a1[v78] = *(void *)((char *)a2 + v78);
  swift_retain();
  swift_release();
  *((void *)v79 + 1) = *((void *)v80 + 1);
  swift_retain();
  swift_release();
  uint64_t v81 = a3[8];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = (char *)a2 + v81;
  uint64_t v84 = *(void **)&a1[v81];
  uint64_t v85 = *(void **)((char *)a2 + v81);
  *(void *)uint64_t v82 = v85;
  id v86 = v85;

  *((void *)v82 + 1) = *((void *)v83 + 1);
  uint64_t v87 = a3[9];
  uint64_t v88 = &a1[v87];
  uint64_t v89 = (char *)a2 + v87;
  uint64_t v90 = *(void *)v89;
  LOBYTE(v89) = v89[8];
  *(void *)uint64_t v88 = v90;
  v88[8] = (char)v89;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_255E60524(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v5[13];
  id v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = v5[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v34 = v11;
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_OWORD *)(a1 + v5[15]) = *(_OWORD *)(a2 + v5[15]);
  *(_OWORD *)(a1 + v5[16]) = *(_OWORD *)(a2 + v5[16]);
  *(unsigned char *)(a1 + v5[17]) = *(unsigned char *)(a2 + v5[17]);
  *(unsigned char *)(a1 + v5[18]) = *(unsigned char *)(a2 + v5[18]);
  *(_OWORD *)(a1 + v5[19]) = *(_OWORD *)(a2 + v5[19]);
  uint64_t v17 = v5[20];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_255EEDF60();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_255E5F280(0, &qword_269F350B8, MEMORY[0x270FA8130], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(void *)(a1 + v5[21]) = *(void *)(a2 + v5[21]);
  uint64_t v23 = v5[22];
  int v24 = (void *)(a1 + v23);
  int v25 = (const void *)(a2 + v23);
  if (v34((const void *)(a2 + v23), 1, v9))
  {
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v24, v25, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
  }
  uint64_t v27 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  *(void *)(a1 + v27[5]) = *(void *)(a2 + v27[5]);
  *(_OWORD *)(a1 + v27[6]) = *(_OWORD *)(a2 + v27[6]);
  *(unsigned char *)(a1 + v27[7]) = *(unsigned char *)(a2 + v27[7]);
  *(unsigned char *)(a1 + v27[8]) = *(unsigned char *)(a2 + v27[8]);
  *(unsigned char *)(a1 + v27[9]) = *(unsigned char *)(a2 + v27[9]);
  *(unsigned char *)(a1 + v27[10]) = *(unsigned char *)(a2 + v27[10]);
  *(_OWORD *)(a1 + v27[11]) = *(_OWORD *)(a2 + v27[11]);
  uint64_t v28 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  uint64_t v29 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return a1;
}

char *sub_255E60A20(char *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *((void *)a1 + 3) = a2[3];
  *((void *)a1 + 4) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  *((void *)a1 + 7) = a2[7];
  *((void *)a1 + 8) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[10];
  *((void *)a1 + 9) = a2[9];
  *((void *)a1 + 10) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)*((void *)a1 + 12);
  uint64_t v11 = a2[12];
  *((void *)a1 + 11) = a2[11];
  *((void *)a1 + 12) = v11;

  uint64_t v12 = (void *)*((void *)a1 + 13);
  *((void *)a1 + 13) = a2[13];

  uint64_t v13 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v13[13];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = v13[14];
  int v24 = &a1[v23];
  int v25 = (char *)a2 + v23;
  int v26 = v19(&a1[v23], 1, v17);
  int v27 = v19(v25, 1, v17);
  uint64_t v95 = v17;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v25, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v24, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
LABEL_12:
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v24, v25, v17);
LABEL_13:
  uint64_t v29 = v13[15];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (void *)((char *)a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v13[16];
  uint64_t v35 = &a1[v34];
  unint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  a1[v13[17]] = *((unsigned char *)a2 + v13[17]);
  a1[v13[18]] = *((unsigned char *)a2 + v13[18]);
  uint64_t v39 = v13[19];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = (char *)a2 + v39;
  unint64_t v42 = *(void *)&a1[v39 + 8];
  uint64_t v97 = v13;
  if (v42 >> 60 == 15)
  {
    uint64_t v43 = v19;
LABEL_17:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_19;
  }
  unint64_t v44 = *((void *)v41 + 1);
  uint64_t v43 = v19;
  if (v44 >> 60 == 15)
  {
    sub_255D81EF8(v40);
    goto LABEL_17;
  }
  uint64_t v45 = *(void *)v40;
  *(void *)uint64_t v40 = *(void *)v41;
  *(void *)(v40 + 8) = v44;
  sub_255D80D04(v45, v42);
LABEL_19:
  uint64_t v46 = v97[20];
  int v47 = &a1[v46];
  int v48 = (char *)a2 + v46;
  uint64_t v49 = sub_255EEDF60();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (v52)
  {
    id v54 = v43;
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v54 = v43;
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
LABEL_24:
    sub_255E5F280(0, &qword_269F350B8, MEMORY[0x270FA8130], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_25:
  uint64_t v56 = v97[21];
  uint64_t v57 = *(void **)&a1[v56];
  *(void *)&a1[v56] = *(void *)((char *)a2 + v56);

  uint64_t v58 = v97[22];
  int v59 = &a1[v58];
  uint64_t v60 = (char *)a2 + v58;
  int v61 = v54(&a1[v58], 1, v95);
  int v62 = v54(v60, 1, v95);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v59, v60, v95);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v59, v95);
    goto LABEL_30;
  }
  if (v62)
  {
LABEL_30:
    sub_255E5F280(0, &qword_269F35058, MEMORY[0x270FA9150], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v59, v60, v95);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0, 1, v95);
LABEL_31:
  long long v64 = (int *)type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v65 = v64[5];
  uint64_t v66 = *(void **)&a1[v65];
  *(void *)&a1[v65] = *(void *)((char *)a2 + v65);

  uint64_t v67 = v64[6];
  uint64_t v68 = &a1[v67];
  uint64_t v69 = (void *)((char *)a2 + v67);
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  *(void *)uint64_t v68 = v71;
  *((void *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
  a1[v64[7]] = *((unsigned char *)a2 + v64[7]);
  a1[v64[8]] = *((unsigned char *)a2 + v64[8]);
  a1[v64[9]] = *((unsigned char *)a2 + v64[9]);
  a1[v64[10]] = *((unsigned char *)a2 + v64[10]);
  uint64_t v72 = v64[11];
  id v73 = &a1[v72];
  uint64_t v74 = (void *)((char *)a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *(void *)id v73 = v76;
  *((void *)v73 + 1) = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[5];
  uint64_t v78 = &a1[v77];
  id v79 = (char *)a2 + v77;
  char *v78 = *v79;
  *((void *)v78 + 1) = *((void *)v79 + 1);
  swift_release();
  uint64_t v80 = a3[6];
  uint64_t v81 = &a1[v80];
  uint64_t v82 = (char *)a2 + v80;
  *uint64_t v81 = *v82;
  *((void *)v81 + 1) = *((void *)v82 + 1);
  swift_release();
  uint64_t v83 = a3[7];
  uint64_t v84 = &a1[v83];
  uint64_t v85 = (char *)a2 + v83;
  *(void *)&a1[v83] = *(void *)((char *)a2 + v83);
  swift_release();
  *((void *)v84 + 1) = *((void *)v85 + 1);
  swift_release();
  uint64_t v86 = a3[8];
  uint64_t v87 = &a1[v86];
  uint64_t v88 = (void *)((char *)a2 + v86);
  uint64_t v89 = *(void **)&a1[v86];
  *(void *)uint64_t v87 = *v88;

  *((void *)v87 + 1) = v88[1];
  uint64_t v90 = a3[9];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = (char *)a2 + v90;
  uint64_t v93 = *(void *)v92;
  LOBYTE(v92) = v92[8];
  *(void *)uint64_t v91 = v93;
  v91[8] = (char)v92;
  swift_release();
  return a1;
}

uint64_t sub_255E61220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E61234);
}

uint64_t sub_255E61234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E612F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E61308);
}

uint64_t sub_255E61308(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDSettingsViewModel(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_255E613C4()
{
  uint64_t result = type metadata accessor for MedicalIDSettingsViewModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E61470()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E6148C()
{
  return sub_255EEEB50();
}

uint64_t sub_255E614B0(uint64_t a1)
{
  uint64_t v2 = sub_255EEE780();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_255EEEB60();
}

uint64_t sub_255E61578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v49 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v56 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v57 = v1;
  uint64_t v58 = (uint64_t)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_255EEEEC0();
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = sub_255EEFAD0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (_OWORD *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E65380();
  uint64_t v48 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E65938(0, &qword_269F37848, (void (*)(uint64_t))sub_255E65380);
  uint64_t v60 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v45 - v12;
  sub_255E65C18();
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v55 = v14;
  MEMORY[0x270FA5388](v14);
  int v52 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E65DDC();
  uint64_t v53 = v16;
  uint64_t v51 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v50 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5F280(0, &qword_269F37880, MEMORY[0x263F1B8D0], MEMORY[0x263F8E0F8]);
  sub_255EEFAE0();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_255EF20B0;
  *uint64_t v6 = xmmword_255EF63C0;
  (*(void (**)(_OWORD *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F1B8C8], v3);
  sub_255EEFAF0();
  sub_255EEED80();
  uint64_t v18 = v47;
  uint64_t v61 = v47;
  LODWORD(v62) = 0;
  sub_255E66530(&qword_269F35618, MEMORY[0x263F19D28]);
  sub_255EF05D0();
  sub_255E5F280(0, &qword_269F37788, (uint64_t (*)(uint64_t))sub_255E65414, MEMORY[0x263F1BAC8]);
  sub_255E65B90();
  sub_255EEFB40();
  unsigned __int8 v19 = sub_255EEF1B0();
  unsigned __int8 v20 = sub_255EEF1D0();
  unsigned __int8 v21 = sub_255EEF190();
  char v22 = sub_255EEF1C0();
  sub_255EEF1C0();
  if (sub_255EEF1C0() != v19) {
    char v22 = sub_255EEF1C0();
  }
  sub_255EEF1C0();
  if (sub_255EEF1C0() != v20) {
    char v22 = sub_255EEF1C0();
  }
  sub_255EEF1C0();
  if (sub_255EEF1C0() != v21) {
    char v22 = sub_255EEF1C0();
  }
  uint64_t v23 = v48;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v10, v48);
  int v24 = &v13[*(int *)(v60 + 36)];
  char *v24 = v22;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v24[40] = 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  uint64_t v25 = v49;
  uint64_t v26 = v18;
  uint64_t v27 = v18 + *(int *)(v49 + 20);
  char v28 = *(unsigned char *)v27;
  uint64_t v29 = *(void *)(v27 + 8);
  LOBYTE(v66) = v28;
  uint64_t v67 = v29;
  uint64_t v30 = MEMORY[0x263F8D4F8];
  sub_255E66760(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v45 = type metadata accessor for MedicalIDLearnMoreNavigationView();
  unint64_t v46 = sub_255E65D10();
  uint64_t v48 = sub_255E66530((unint64_t *)&qword_269F36208, (void (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView);
  uint64_t v31 = v52;
  sub_255EEF5F0();
  swift_release();
  swift_release();
  sub_255E664D0((uint64_t)v13, (uint64_t)&qword_269F37848, (uint64_t)sub_255E65380, MEMORY[0x263F18C18], (uint64_t (*)(void))sub_255E65938);
  sub_255E66760(0, &qword_269F37888, v30, MEMORY[0x263F8E0F8]);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_255EF1E20;
  uint64_t v33 = (uint64_t *)(v26 + *(int *)(v25 + 28));
  uint64_t v34 = v33[1];
  uint64_t v62 = *v33;
  uint64_t v63 = v34;
  sub_255E5F280(0, &qword_269F37890, type metadata accessor for MedicalIDEditableSettingsViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v35 = v66;
  swift_getKeyPath();
  uint64_t v62 = v35;
  sub_255E66530((unint64_t *)&qword_269F356D8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditableSettingsViewModel);
  sub_255EEE2D0();
  swift_release();
  char v36 = *(unsigned char *)(v35 + 16);
  swift_release();
  *(unsigned char *)(v32 + 32) = v36;
  uint64_t v37 = v33[1];
  uint64_t v62 = *v33;
  uint64_t v63 = v37;
  sub_255EEF820();
  uint64_t v38 = v66;
  swift_getKeyPath();
  uint64_t v62 = v38;
  sub_255EEE2D0();
  swift_release();
  LOBYTE(v33) = *(unsigned char *)(v38 + 17);
  swift_release();
  *(unsigned char *)(v32 + 33) = (_BYTE)v33;
  uint64_t v66 = v32;
  uint64_t v39 = v58;
  sub_255E67060(v26, v58, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  unint64_t v40 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v41 = swift_allocObject();
  sub_255E669D0(v39, v41 + v40, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  sub_255E66760(0, &qword_269F37870, MEMORY[0x263F8D4F8], MEMORY[0x263F8D488]);
  uint64_t v62 = v60;
  uint64_t v63 = v45;
  unint64_t v64 = v46;
  uint64_t v65 = v48;
  swift_getOpaqueTypeConformance2();
  sub_255E65F48();
  unint64_t v42 = v50;
  uint64_t v43 = v55;
  sub_255EEF690();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v43);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v59, v42, v53);
}

uint64_t sub_255E6202C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v185 = a2;
  uint64_t v167 = sub_255EEE780();
  uint64_t v166 = *(void *)(v167 - 8);
  MEMORY[0x270FA5388](v167);
  uint64_t v164 = (char *)&v156 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E65B30();
  MEMORY[0x270FA5388](v4 - 8);
  int v163 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E65A98();
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v168 = (uint64_t)&v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v162 = (char *)&v156 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v165 = (uint64_t)&v156 - v12;
  sub_255E65A3C(0, &qword_269F37820, (uint64_t)&qword_269F37828, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E67268);
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v156 - v15;
  sub_255E6599C();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v176 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E65910(0);
  uint64_t v174 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v161 = (uint64_t)&v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v173 = (uint64_t)&v156 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v156 - v24;
  sub_255E65838(0);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v184 = (uint64_t)&v156 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v191 = (char *)&v156 - v29;
  sub_255E65758(0, &qword_269F377E8, &qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v172 = (uint64_t)&v156 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  v170 = (char *)&v156 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v171 = (uint64_t)&v156 - v35;
  sub_255E65A3C(0, &qword_269F377D8, (uint64_t)&qword_269F377E0, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E656C4);
  uint64_t v179 = v36;
  MEMORY[0x270FA5388](v36);
  uint64_t v181 = (uint64_t)&v156 - v37;
  sub_255E65624();
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v180 = (char *)&v156 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E655FC(0);
  uint64_t v178 = v40;
  uint64_t v41 = MEMORY[0x270FA5388](v40);
  uint64_t v169 = (uint64_t)&v156 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v177 = (uint64_t)&v156 - v44;
  MEMORY[0x270FA5388](v43);
  uint64_t v186 = (uint64_t)&v156 - v45;
  sub_255E6550C(0);
  uint64_t v47 = MEMORY[0x270FA5388](v46 - 8);
  uint64_t v190 = (uint64_t)&v156 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  uint64_t v194 = (uint64_t)&v156 - v49;
  sub_255E65758(0, &qword_269F377A0, &qword_269F377A8, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
  uint64_t v188 = *(void *)(v50 - 8);
  uint64_t v189 = v50;
  uint64_t v51 = MEMORY[0x270FA5388](v50);
  uint64_t v53 = (char *)&v156 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  uint64_t v55 = (char *)&v156 - v54;
  uint64_t v56 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v57 = v56 - 8;
  uint64_t v157 = *(void *)(v56 - 8);
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v159 = (uint64_t)&v156 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = v59;
  MEMORY[0x270FA5388](v58);
  uint64_t v61 = (char *)&v156 - v60;
  sub_255E6549C();
  uint64_t v63 = MEMORY[0x270FA5388](v62 - 8);
  uint64_t v183 = (uint64_t)&v156 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  uint64_t v66 = (char *)&v156 - v65;
  v192 = (id *)(a1 + *(int *)(v57 + 40));
  if (!*v192) {
    goto LABEL_31;
  }
  unsigned __int8 v67 = objc_msgSend(*v192, sel_isShowWhenLockedVisible);
  sub_255E67060(a1, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  unint64_t v193 = v66;
  uint64_t v160 = v7;
  v182 = v25;
  v187 = v16;
  uint64_t v175 = v14;
  if (v67)
  {
    sub_255E67144((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  }
  else
  {
    char v68 = sub_255E63864();
    sub_255E67144((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
    if ((v68 & 1) == 0)
    {
      uint64_t v73 = a1;
      uint64_t v78 = 1;
      goto LABEL_10;
    }
  }
  if (qword_269F34BD8 != -1) {
    swift_once();
  }
  uint64_t v69 = qword_269F37738;
  uint64_t v70 = qword_269F37740;
  swift_bridgeObjectRetain();
  char v71 = sub_255EEF170();
  uint64_t v195 = v69;
  uint64_t v196 = v70;
  char v197 = v71;
  long long v198 = 0u;
  long long v199 = 0u;
  LOBYTE(v200) = 1;
  sub_255E66760(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_255EF1E20;
  uint64_t v73 = a1;
  uint64_t v74 = (void *)(a1 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
  uint64_t v75 = v74[1];
  *(void *)(v72 + 32) = *v74;
  *(void *)(v72 + 40) = v75;
  *(void *)(v72 + 48) = 0x726564616548;
  *(void *)(v72 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v76 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v77 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v77)
  {
    __break(1u);
    goto LABEL_27;
  }
  sub_255EEFD90();

  sub_255E657E8(0, &qword_269F377A8, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
  sub_255E66FC4(&qword_269F378E0, &qword_269F377A8, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView, (void (*)(void))sub_255E671A4);
  sub_255EEF580();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_255E671F8((uint64_t)v53, (uint64_t)v55, &qword_269F377A0, &qword_269F377A8, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
  uint64_t v66 = v193;
  sub_255E671F8((uint64_t)v55, (uint64_t)v193, &qword_269F377A0, &qword_269F377A8, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
  uint64_t v78 = 0;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v188 + 56))(v66, v78, 1, v189);
  uint64_t v79 = (uint64_t)v191;
  if (!*v192) {
    goto LABEL_31;
  }
  uint64_t v80 = v73;
  if ((objc_msgSend(*v192, sel_isShowWhenLockedVisible) & 1) == 0)
  {
    sub_255E65540(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v194, 1, 1, v114);
LABEL_20:
    uint64_t v115 = (uint64_t)v187;
    if ((sub_255E63864() & 1) == 0)
    {
      sub_255E6586C(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 56))(v79, 1, 1, v148);
      uint64_t v145 = v184;
      goto LABEL_25;
    }
    sub_255E63E54(v80, v115);
    sub_255E66760(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v116 = swift_allocObject();
    *(_OWORD *)(v116 + 16) = xmmword_255EF1E20;
    uint64_t v117 = (void *)(v80 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
    uint64_t v118 = v117[1];
    *(void *)(v116 + 32) = *v117;
    *(void *)(v116 + 40) = v118;
    *(void *)(v116 + 48) = 0xD000000000000014;
    *(void *)(v116 + 56) = 0x8000000255EFA8B0;
    swift_bridgeObjectRetain();
    uint64_t v119 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v120 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v120)
    {
      sub_255EEFD90();

      sub_255E667AC();
      uint64_t v121 = (uint64_t)v176;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255E66F68(v115, &qword_269F37820, (uint64_t)&qword_269F37828, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E67268);
      uint64_t v122 = v173;
      sub_255E67060(v121, v173, (uint64_t (*)(void))sub_255E6599C);
      *(unsigned char *)(v122 + *(int *)(v174 + 36)) = 1;
      sub_255E67144(v121, (uint64_t (*)(void))sub_255E6599C);
      sub_255E669D0(v122, (uint64_t)v182, (uint64_t (*)(void))sub_255E65910);
      MedicalIDSettingsViewModel.shareDuringEmergencyCallFooter.getter();
      uint64_t v195 = sub_255EEED10();
      uint64_t v196 = v123;
      char v197 = v124 & 1;
      *(void *)&long long v198 = v125;
      uint64_t v126 = swift_allocObject();
      *(_OWORD *)(v126 + 16) = xmmword_255EF63D0;
      uint64_t v127 = v117[1];
      *(void *)(v126 + 32) = *v117;
      *(void *)(v126 + 40) = v127;
      *(void *)(v126 + 48) = 0xD000000000000014;
      *(void *)(v126 + 56) = 0x8000000255EFA8B0;
      *(void *)(v126 + 64) = 0x7265746F6F46;
      *(void *)(v126 + 72) = 0xE600000000000000;
      swift_bridgeObjectRetain();
      uint64_t v128 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      id v129 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (v129)
      {
        sub_255EEFD90();

        sub_255E66A38();
        uint64_t v130 = (uint64_t)v163;
        sub_255EEF580();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v132 = v159;
        sub_255E67060(v80, v159, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
        unint64_t v133 = (*(unsigned __int8 *)(v157 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
        uint64_t v134 = swift_allocObject();
        sub_255E669D0(v132, v134 + v133, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
        uint64_t v135 = v164;
        sub_255EEE770();
        uint64_t v136 = (uint64_t)v162;
        uint64_t v137 = (uint64_t *)&v162[*(int *)(v160 + 36)];
        sub_255E5F280(0, &qword_269F36168, MEMORY[0x263F18948], MEMORY[0x263F1A418]);
        uint64_t v139 = v166;
        uint64_t v140 = v167;
        (*(void (**)(char *, char *, uint64_t))(v166 + 16))((char *)v137 + *(int *)(v138 + 28), v135, v167);
        uint64_t *v137 = KeyPath;
        sub_255E67060(v130, v136, (uint64_t (*)(void))sub_255E65B30);
        (*(void (**)(char *, uint64_t))(v139 + 8))(v135, v140);
        sub_255E67144(v130, (uint64_t (*)(void))sub_255E65B30);
        uint64_t v141 = v165;
        sub_255E669D0(v136, v165, (uint64_t (*)(void))sub_255E65A98);
        uint64_t v142 = (uint64_t)v182;
        uint64_t v143 = v161;
        sub_255E67060((uint64_t)v182, v161, (uint64_t (*)(void))sub_255E65910);
        uint64_t v144 = v168;
        sub_255E67060(v141, v168, (uint64_t (*)(void))sub_255E65A98);
        uint64_t v145 = v184;
        sub_255E67060(v143, v184, (uint64_t (*)(void))sub_255E65910);
        sub_255E658A0();
        sub_255E67060(v144, v145 + *(int *)(v146 + 48), (uint64_t (*)(void))sub_255E65A98);
        sub_255E67144(v141, (uint64_t (*)(void))sub_255E65A98);
        sub_255E67144(v142, (uint64_t (*)(void))sub_255E65910);
        sub_255E67144(v144, (uint64_t (*)(void))sub_255E65A98);
        sub_255E67144(v143, (uint64_t (*)(void))sub_255E65910);
        sub_255E6586C(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v147 - 8) + 56))(v145, 0, 1, v147);
        sub_255E669D0(v145, v79, (uint64_t (*)(void))sub_255E65838);
        uint64_t v66 = v193;
LABEL_25:
        uint64_t v149 = v183;
        sub_255E67060((uint64_t)v66, v183, (uint64_t (*)(void))sub_255E6549C);
        uint64_t v150 = v194;
        uint64_t v151 = v190;
        sub_255E67060(v194, v190, (uint64_t (*)(void))sub_255E6550C);
        sub_255E67060(v79, v145, (uint64_t (*)(void))sub_255E65838);
        uint64_t v152 = v185;
        sub_255E67060(v149, v185, (uint64_t (*)(void))sub_255E6549C);
        sub_255E65414();
        uint64_t v154 = v153;
        sub_255E67060(v151, v152 + *(int *)(v153 + 48), (uint64_t (*)(void))sub_255E6550C);
        sub_255E67060(v145, v152 + *(int *)(v154 + 64), (uint64_t (*)(void))sub_255E65838);
        sub_255E67144(v79, (uint64_t (*)(void))sub_255E65838);
        sub_255E67144(v150, (uint64_t (*)(void))sub_255E6550C);
        sub_255E67144((uint64_t)v66, (uint64_t (*)(void))sub_255E6549C);
        sub_255E67144(v145, (uint64_t (*)(void))sub_255E65838);
        sub_255E67144(v151, (uint64_t (*)(void))sub_255E6550C);
        return sub_255E67144(v149, (uint64_t (*)(void))sub_255E6549C);
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v81 = v181;
  sub_255E63A30(v80, v181);
  sub_255E66760(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_255EF1E20;
  uint64_t v83 = (void *)(v80 + *(int *)(type metadata accessor for MedicalIDSettingsViewModel(0) + 44));
  uint64_t v84 = v83[1];
  *(void *)(v82 + 32) = *v83;
  *(void *)(v82 + 40) = v84;
  strcpy((char *)(v82 + 48), "ShowWhenLocked");
  *(unsigned char *)(v82 + 63) = -18;
  swift_bridgeObjectRetain();
  uint64_t v85 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v86 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v86)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_255EEFD90();

  sub_255E66EC0();
  uint64_t v87 = (uint64_t)v180;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  sub_255E66F68(v81, &qword_269F377D8, (uint64_t)&qword_269F377E0, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E656C4);
  uint64_t v88 = v177;
  sub_255E67060(v87, v177, (uint64_t (*)(void))sub_255E65624);
  *(unsigned char *)(v88 + *(int *)(v178 + 36)) = 1;
  sub_255E67144(v87, (uint64_t (*)(void))sub_255E65624);
  sub_255E669D0(v88, v186, (uint64_t (*)(void))sub_255E655FC);
  uint64_t v89 = v80;
  MedicalIDSettingsViewModel.showWhenLockedFooter.getter();
  uint64_t v90 = sub_255EEED10();
  uint64_t v92 = v91;
  char v94 = v93;
  uint64_t v96 = v95;
  char v97 = sub_255EEF1A0();
  if (*v192)
  {
    if ((objc_msgSend(*v192, sel_isShareDuringEmergencyCallVisible) & 1) != 0 && qword_269F34BF0 != -1) {
      swift_once();
    }
    sub_255EEE540();
    uint64_t v195 = v90;
    uint64_t v196 = v92;
    char v197 = v94 & 1;
    *(void *)&long long v198 = v96;
    BYTE8(v198) = v97;
    *(void *)&long long v199 = v98;
    *((void *)&v199 + 1) = v99;
    uint64_t v200 = v100;
    uint64_t v201 = v101;
    char v202 = 0;
    uint64_t v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = xmmword_255EF63D0;
    uint64_t v103 = v83[1];
    *(void *)(v102 + 32) = *v83;
    *(void *)(v102 + 40) = v103;
    strcpy((char *)(v102 + 48), "ShowWhenLocked");
    *(unsigned char *)(v102 + 63) = -18;
    *(void *)(v102 + 64) = 0x7265746F6F46;
    *(void *)(v102 + 72) = 0xE600000000000000;
    swift_bridgeObjectRetain();
    uint64_t v104 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v105 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v105)
    {
      sub_255EEFD90();

      sub_255E657E8(0, &qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
      sub_255E66FC4(&qword_269F378D8, &qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView, (void (*)(void))sub_255E66A38);
      uint64_t v106 = (uint64_t)v170;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v107 = v171;
      sub_255E671F8(v106, v171, &qword_269F377E8, &qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView);
      uint64_t v108 = v186;
      uint64_t v109 = v169;
      sub_255E67060(v186, v169, (uint64_t (*)(void))sub_255E655FC);
      uint64_t v110 = v172;
      sub_255E670C8(v107, v172);
      uint64_t v111 = v190;
      sub_255E67060(v109, v190, (uint64_t (*)(void))sub_255E655FC);
      sub_255E65574();
      sub_255E670C8(v110, v111 + *(int *)(v112 + 48));
      sub_255E664D0(v107, (uint64_t)&qword_269F377E8, (uint64_t)&qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView, (uint64_t (*)(void))sub_255E65758);
      sub_255E67144(v108, (uint64_t (*)(void))sub_255E655FC);
      sub_255E664D0(v110, (uint64_t)&qword_269F377E8, (uint64_t)&qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView, (uint64_t (*)(void))sub_255E65758);
      sub_255E67144(v109, (uint64_t (*)(void))sub_255E655FC);
      sub_255E65540(0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v111, 0, 1, v113);
      sub_255E669D0(v111, v194, (uint64_t (*)(void))sub_255E6550C);
      uint64_t v79 = (uint64_t)v191;
      uint64_t v80 = v89;
      uint64_t v66 = v193;
      goto LABEL_20;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_31:
  sub_255DB6ED8();
  sub_255E66530((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

uint64_t sub_255E63864()
{
  uint64_t v1 = type metadata accessor for MedicalIDSettingsViewModel(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E67060(v0, (uint64_t)v3, type metadata accessor for MedicalIDSettingsViewModel);
  uint64_t v4 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v5 = *(void **)(v0 + *(int *)(v4 + 32));
  if (v5)
  {
    uint64_t v6 = v0 + *(int *)(v4 + 24);
    unsigned __int8 v7 = *(unsigned char *)v6;
    uint64_t v8 = *(void *)(v6 + 8);
    unsigned __int8 v15 = v7;
    uint64_t v16 = v8;
    sub_255E66760(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
    uint64_t v9 = v5;
    sub_255EEF820();
    Swift::Bool v10 = v17;
    if ([(MIUIDisplayConfiguration *)v9 isShareDuringEmergencyCallVisible])
    {
      MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(v9, v10);
      unsigned int v11 = v15;

      BOOL v12 = v11 < 2;
    }
    else
    {

      BOOL v12 = 0;
    }
    sub_255E67144((uint64_t)v3, type metadata accessor for MedicalIDSettingsViewModel);
    return v12;
  }
  else
  {
    sub_255DB6ED8();
    sub_255E66530((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255E63A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_255E656C4(0, &qword_269F378F0, MEMORY[0x263F19B20]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  unsigned __int8 v7 = (void *)((char *)v29 - v6);
  sub_255E657E8(0, &qword_269F36280, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B6B8]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v12 = (char *)v29 - v11;
  uint64_t v13 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v14 = *(void **)(a1 + *(int *)(v13 + 32));
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    Swift::Bool v17 = MedicalIDSettingsViewModel.isShowWhenLockedEditable(with:)(v16);

    if (v17)
    {
      uint64_t v18 = (uint64_t *)(a1 + *(int *)(v15 + 28));
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      void v29[2] = v20;
      v29[3] = v19;
      sub_255E5F280(0, &qword_269F37890, type metadata accessor for MedicalIDEditableSettingsViewModel, MEMORY[0x263F1B5D0]);
      sub_255EEF840();
      uint64_t v21 = v30;
      uint64_t v22 = v31;
      v29[1] = a2;
      uint64_t v23 = v32;
      swift_getKeyPath();
      v29[0] = v5;
      uint64_t v30 = v21;
      uint64_t v31 = v22;
      uint64_t v32 = v23;
      sub_255E5F280(0, &qword_269F378F8, type metadata accessor for MedicalIDEditableSettingsViewModel, MEMORY[0x263F1B750]);
      sub_255EEF990();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_255EEF920();
      (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v7, v12, v9);
      swift_storeEnumTagMultiPayload();
      sub_255DF8B84();
      sub_255E6697C();
      sub_255EEEE00();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      if (qword_269F34BE8 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_269F37758;
      uint64_t v25 = qword_269F37760;
      swift_bridgeObjectRetain();
      uint64_t locked = MedicalIDSettingsViewModel.showWhenLockedDetail.getter();
      *unsigned __int8 v7 = v26;
      v7[1] = v25;
      v7[2] = locked;
      v7[3] = v28;
      swift_storeEnumTagMultiPayload();
      sub_255DF8B84();
      sub_255E6697C();
      return sub_255EEEE00();
    }
  }
  else
  {
    sub_255DB6ED8();
    sub_255E66530((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255E63E2C@<X0>(uint64_t a1@<X8>)
{
  return sub_255E64504(&qword_269F34BE8, a1);
}

uint64_t sub_255E63E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  sub_255E67268(0, &qword_269F37900, MEMORY[0x263F19B20]);
  uint64_t v43 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v38 - v4;
  sub_255E656C4(0, &qword_269F378F0, MEMORY[0x263F19B20]);
  uint64_t v40 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v38 - v7);
  sub_255E656C4(0, &qword_269F377E0, MEMORY[0x263F19B28]);
  uint64_t v42 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v38 - v10;
  sub_255E657E8(0, &qword_269F36280, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B6B8]);
  uint64_t v41 = v12;
  uint64_t v39 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = type metadata accessor for MedicalIDSettingsViewModel(0);
  MEMORY[0x270FA5388](v15 - 8);
  Swift::Bool v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E67060(a1, (uint64_t)v17, type metadata accessor for MedicalIDSettingsViewModel);
  uint64_t v18 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v19 = *(void **)(a1 + *(int *)(v18 + 32));
  if (v19)
  {
    uint64_t v20 = v18;
    uint64_t v21 = a1 + *(int *)(v18 + 24);
    char v22 = *(unsigned char *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    LOBYTE(v47) = v22;
    uint64_t v48 = v23;
    sub_255E66760(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
    uint64_t v24 = v19;
    sub_255EEF820();
    MedicalIDSettingsViewModel.shareDuringEmergencyCallViewState(with:hasShareDuringEmergencyCallBeenEnabled:)(v24, v45);

    sub_255E67144((uint64_t)v17, type metadata accessor for MedicalIDSettingsViewModel);
    if (v50)
    {
      if (v50 == 1)
      {
        if (qword_269F34BE0 != -1) {
          swift_once();
        }
        uint64_t v26 = qword_269F37748;
        uint64_t v25 = qword_269F37750;
        swift_bridgeObjectRetain();
        uint64_t v27 = MedicalIDSettingsViewModel.shareDuringEmergencyCallDetail.getter();
        *uint64_t v8 = v26;
        v8[1] = v25;
        v8[2] = v27;
        v8[3] = v28;
        swift_storeEnumTagMultiPayload();
        sub_255DF8B84();
        sub_255E6697C();
        sub_255EEEE00();
        sub_255E672EC((uint64_t)v11, (uint64_t)v5);
        swift_storeEnumTagMultiPayload();
        sub_255E668E8();
        sub_255EEEE00();
        return sub_255E6736C((uint64_t)v11);
      }
      else
      {
        swift_storeEnumTagMultiPayload();
        sub_255E668E8();
        return sub_255EEEE00();
      }
    }
    else
    {
      uint64_t v30 = (uint64_t *)(a1 + *(int *)(v20 + 28));
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      BOOL v45 = v32;
      uint64_t v46 = v31;
      sub_255E5F280(0, &qword_269F37890, type metadata accessor for MedicalIDEditableSettingsViewModel, MEMORY[0x263F1B5D0]);
      sub_255EEF840();
      uint64_t v33 = v47;
      uint64_t v34 = v48;
      uint64_t v35 = v49;
      swift_getKeyPath();
      uint64_t v47 = v33;
      uint64_t v48 = v34;
      uint64_t v49 = v35;
      sub_255E5F280(0, &qword_269F378F8, type metadata accessor for MedicalIDEditableSettingsViewModel, MEMORY[0x263F1B750]);
      sub_255EEF990();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_255EEF920();
      uint64_t v36 = v39;
      uint64_t v37 = v41;
      (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 16))(v8, v14, v41);
      swift_storeEnumTagMultiPayload();
      sub_255DF8B84();
      sub_255E6697C();
      sub_255EEEE00();
      sub_255E672EC((uint64_t)v11, (uint64_t)v5);
      swift_storeEnumTagMultiPayload();
      sub_255E668E8();
      sub_255EEEE00();
      sub_255E6736C((uint64_t)v11);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v14, v37);
    }
  }
  else
  {
    sub_255DB6ED8();
    sub_255E66530((unint64_t *)&qword_269F35578, (void (*)(uint64_t))sub_255DB6ED8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255E644DC@<X0>(uint64_t a1@<X8>)
{
  return sub_255E64504(&qword_269F34BE0, a1);
}

uint64_t sub_255E64504@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t result = sub_255EEF3D0();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 & 1;
  *(void *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_255E64594()
{
  return sub_255EEE760();
}

uint64_t sub_255E64634@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_255E5F280(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_255E646B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  char v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E5F280(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_255E67060(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  sub_255EEFF70();
  uint64_t v10 = sub_255EEFF60();
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8F500];
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v13;
  sub_255E669D0((uint64_t)v5, v12 + v11, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  sub_255E651B8((uint64_t)v8, (uint64_t)&unk_269F378A0, v12);
  return swift_release();
}

uint64_t sub_255E648B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  sub_255D894E4(0);
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for MedicalIDData();
  v4[18] = swift_task_alloc();
  v4[19] = type metadata accessor for MedicalIDEditSettingsView();
  v4[20] = swift_task_alloc();
  v4[21] = sub_255EEFF70();
  v4[22] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v4[23] = v6;
  v4[24] = v5;
  return MEMORY[0x270FA2498](sub_255E649DC, v6, v5);
}

uint64_t sub_255E649DC()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[15];
  char v3 = *(unsigned char *)(v2 + *(int *)(v0[19] + 36) + 8);
  uint64_t v4 = swift_retain();
  v0[25] = sub_255DAA2A0(v4, v3);
  swift_release();
  sub_255E67060(v2, v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  v0[26] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v0[27] = v6;
  v0[28] = v5;
  return MEMORY[0x270FA2498](sub_255E64ACC, v6, v5);
}

uint64_t sub_255E64ACC()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v15 = v0[17];
  uint64_t v5 = v0[16];
  swift_getKeyPath();
  v0[12] = v1;
  sub_255E66530(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v6 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255E67060(v6, v5, (uint64_t (*)(void))sub_255D894E4);
  LoadState<>.loadedValue.getter(v4);
  sub_255E67144(v5, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v7 = (void *)(v3 + *(int *)(v2 + 28));
  uint64_t v8 = v7[1];
  v0[7] = *v7;
  v0[8] = v8;
  sub_255E5F280(0, &qword_269F37890, type metadata accessor for MedicalIDEditableSettingsViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v9 = v0[9];
  swift_getKeyPath();
  v0[10] = v9;
  sub_255E66530((unint64_t *)&qword_269F356D8, (void (*)(uint64_t))type metadata accessor for MedicalIDEditableSettingsViewModel);
  sub_255EEE2D0();
  swift_release();
  LOBYTE(v6) = *(unsigned char *)(v9 + 16);
  swift_release();
  *(unsigned char *)(v4 + *(int *)(v15 + 72)) = v6;
  uint64_t v10 = v7[1];
  v0[5] = *v7;
  v0[6] = v10;
  sub_255EEF820();
  uint64_t v11 = v0[11];
  swift_getKeyPath();
  v0[13] = v11;
  sub_255EEE2D0();
  swift_release();
  LOBYTE(v6) = *(unsigned char *)(v11 + 17);
  swift_release();
  *(unsigned char *)(v4 + *(int *)(v15 + 68)) = (v6 & 1) == 0;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[29] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_255E64DE8;
  uint64_t v13 = v0[18];
  return sub_255E8F53C(v13, (uint64_t)(v0 + 14));
}

uint64_t sub_255E64DE8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  uint64_t v4 = *(void *)(v2 + 224);
  if (v0) {
    uint64_t v5 = sub_255E6503C;
  }
  else {
    uint64_t v5 = sub_255E64EF8;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255E64EF8()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  swift_release();
  sub_255E67144(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  sub_255E67144(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  swift_release();
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[24];
  return MEMORY[0x270FA2498](sub_255E64FAC, v3, v4);
}

uint64_t sub_255E64FAC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255E6503C()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  swift_release();
  sub_255E67144(v2, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  v0[30] = v0[14];
  sub_255E67144(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDEditSettingsView);
  swift_release();
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[24];
  return MEMORY[0x270FA2498](sub_255E650F8, v3, v4);
}

uint64_t sub_255E650F8()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_release();
  sub_255DBD3D8();
  swift_allocError();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_255E651B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_255EEFFA0();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_255EEFF90();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_255E664D0(a1, (uint64_t)&qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255E5F280);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_255EEFF20();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_255E65380()
{
  if (!qword_269F37780)
  {
    sub_255E5F280(255, &qword_269F37788, (uint64_t (*)(uint64_t))sub_255E65414, MEMORY[0x263F1BAC8]);
    sub_255E65B90();
    unint64_t v0 = sub_255EEFB50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37780);
    }
  }
}

void sub_255E65414()
{
  if (!qword_269F37790)
  {
    sub_255E6549C();
    sub_255E6550C(255);
    sub_255E65838(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F37790);
    }
  }
}

void sub_255E6549C()
{
  if (!qword_269F37798)
  {
    sub_255E65758(255, &qword_269F377A0, &qword_269F377A8, (uint64_t)&type metadata for ListInsetGroupedTableHeaderView);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37798);
    }
  }
}

void sub_255E6550C(uint64_t a1)
{
}

void sub_255E65540(uint64_t a1)
{
}

void sub_255E65574()
{
  if (!qword_269F377C0)
  {
    sub_255E655FC(255);
    sub_255E65758(255, &qword_269F377E8, &qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F377C0);
    }
  }
}

void sub_255E655FC(uint64_t a1)
{
}

void sub_255E65624()
{
  if (!qword_269F377D0)
  {
    sub_255E65A3C(255, &qword_269F377D8, (uint64_t)&unk_269F377E0, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E656C4);
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F377D0);
    }
  }
}

void sub_255E656C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  if (!*a2)
  {
    sub_255E657E8(255, &qword_269F36280, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B6B8]);
    unint64_t v7 = a3(a1, v6, &type metadata for HorizontalTitleDetailLabelView);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_255E65758(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_255E657E8(255, a3, a4, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    sub_255EEF090();
    unint64_t v5 = sub_255EEE870();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255E657E8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E65838(uint64_t a1)
{
}

void sub_255E6586C(uint64_t a1)
{
}

void sub_255E658A0()
{
  if (!qword_269F37808)
  {
    sub_255E65910(255);
    sub_255E65A98();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37808);
    }
  }
}

void sub_255E65910(uint64_t a1)
{
}

void sub_255E65938(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E6599C()
{
  if (!qword_269F37818)
  {
    sub_255E65A3C(255, &qword_269F37820, (uint64_t)&unk_269F37828, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E67268);
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37818);
    }
  }
}

void sub_255E65A3C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = sub_255EEF790();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E65A98()
{
  if (!qword_269F37830)
  {
    sub_255E65B30();
    sub_255E5F280(255, &qword_269F36168, MEMORY[0x263F18948], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37830);
    }
  }
}

void sub_255E65B30()
{
  if (!qword_269F37838)
  {
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37838);
    }
  }
}

unint64_t sub_255E65B90()
{
  unint64_t result = qword_269F37840;
  if (!qword_269F37840)
  {
    sub_255E5F280(255, &qword_269F37788, (uint64_t (*)(uint64_t))sub_255E65414, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37840);
  }
  return result;
}

void sub_255E65C18()
{
  if (!qword_269F37850)
  {
    sub_255E65938(255, &qword_269F37848, (void (*)(uint64_t))sub_255E65380);
    type metadata accessor for MedicalIDLearnMoreNavigationView();
    sub_255E65D10();
    sub_255E66530((unint64_t *)&qword_269F36208, (void (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37850);
    }
  }
}

unint64_t sub_255E65D10()
{
  unint64_t result = qword_269F37858;
  if (!qword_269F37858)
  {
    sub_255E65938(255, &qword_269F37848, (void (*)(uint64_t))sub_255E65380);
    sub_255E66530(&qword_269F37860, (void (*)(uint64_t))sub_255E65380);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37858);
  }
  return result;
}

void sub_255E65DDC()
{
  if (!qword_269F37868)
  {
    sub_255E65C18();
    sub_255E66760(255, &qword_269F37870, MEMORY[0x263F8D4F8], MEMORY[0x263F8D488]);
    sub_255E65938(255, &qword_269F37848, (void (*)(uint64_t))sub_255E65380);
    type metadata accessor for MedicalIDLearnMoreNavigationView();
    sub_255E65D10();
    sub_255E66530((unint64_t *)&qword_269F36208, (void (*)(uint64_t))type metadata accessor for MedicalIDLearnMoreNavigationView);
    swift_getOpaqueTypeConformance2();
    sub_255E65F48();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37868);
    }
  }
}

unint64_t sub_255E65F48()
{
  unint64_t result = qword_269F37878;
  if (!qword_269F37878)
  {
    sub_255E66760(255, &qword_269F37870, MEMORY[0x263F8D4F8], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37878);
  }
  return result;
}

uint64_t sub_255E65FD4@<X0>(uint64_t a1@<X8>)
{
  return sub_255E6202C(*(void *)(v1 + 16), a1);
}

uint64_t sub_255E65FF0()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDEditSettingsView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_255E646B8(v2);
}

uint64_t sub_255E66050()
{
  uint64_t v1 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v16 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  uint64_t v2 = v0 + ((v16 + 32) & ~v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v4 = v2 + v3[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[14];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v2 + v3[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = v2 + v3[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v2 + v3[22];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E663E4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MedicalIDEditSettingsView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_255D7E778;
  return sub_255E648B4(a1, v5, v6, v7);
}

uint64_t sub_255E664D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_255E66530(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E66578(uint64_t a1)
{
  return sub_255E665F0(a1, 0xD000000000000010, 0x8000000255EFA8D0, &qword_269F37738, &qword_269F37740);
}

uint64_t sub_255E665A0(uint64_t a1)
{
  return sub_255E665F0(a1, 0xD00000000000001BLL, 0x8000000255EFA710, &qword_269F37748, &qword_269F37750);
}

uint64_t sub_255E665C8(uint64_t a1)
{
  return sub_255E665F0(a1, 0xD000000000000010, 0x8000000255EFA8F0, &qword_269F37758, &qword_269F37760);
}

uint64_t sub_255E665F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v10 = v8;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  *a4 = result;
  *a5 = v12;
  return result;
}

void sub_255E66744()
{
  qword_269F37768 = 0x4020000000000000;
}

void sub_255E66760(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_255E667AC()
{
  unint64_t result = qword_269F378A8;
  if (!qword_269F378A8)
  {
    sub_255E65A3C(255, &qword_269F37820, (uint64_t)&qword_269F37828, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E67268);
    sub_255E66854();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378A8);
  }
  return result;
}

unint64_t sub_255E66854()
{
  unint64_t result = qword_269F378B0;
  if (!qword_269F378B0)
  {
    sub_255E67268(255, &qword_269F37828, MEMORY[0x263F19B28]);
    sub_255E668E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378B0);
  }
  return result;
}

unint64_t sub_255E668E8()
{
  unint64_t result = qword_269F378B8;
  if (!qword_269F378B8)
  {
    sub_255E656C4(255, &qword_269F377E0, MEMORY[0x263F19B28]);
    sub_255DF8B84();
    sub_255E6697C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378B8);
  }
  return result;
}

unint64_t sub_255E6697C()
{
  unint64_t result = qword_269F378C0;
  if (!qword_269F378C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378C0);
  }
  return result;
}

uint64_t sub_255E669D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_255E66A38()
{
  unint64_t result = qword_269F378C8;
  if (!qword_269F378C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378C8);
  }
  return result;
}

uint64_t sub_255E66A8C()
{
  return sub_255EEEB50();
}

uint64_t objectdestroyTm_17()
{
  uint64_t v1 = type metadata accessor for MedicalIDEditSettingsView();
  uint64_t v16 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = v0 + ((v16 + 16) & ~v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v4 = v2 + v3[13];
  uint64_t v5 = sub_255EEE100();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[14];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v2 + v3[19]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_255D80D04(*v9, v10);
  }
  uint64_t v11 = v2 + v3[20];
  uint64_t v12 = sub_255EEDF60();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }

  uint64_t v14 = v2 + v3[22];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E66E40()
{
  type metadata accessor for MedicalIDEditSettingsView();
  return sub_255E64594();
}

unint64_t sub_255E66EC0()
{
  unint64_t result = qword_269F378D0;
  if (!qword_269F378D0)
  {
    sub_255E65A3C(255, &qword_269F377D8, (uint64_t)&qword_269F377E0, MEMORY[0x263F19B28], (void (*)(uint64_t, uint64_t, uint64_t))sub_255E656C4);
    sub_255E668E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378D0);
  }
  return result;
}

uint64_t sub_255E66F68(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  sub_255E65A3C(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_255E66FC4(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E657E8(255, a2, a3, MEMORY[0x263F18C18], MEMORY[0x263F18E28]);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E67060(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E670C8(uint64_t a1, uint64_t a2)
{
  sub_255E65758(0, &qword_269F377E8, &qword_269F377F0, (uint64_t)&type metadata for ListInsetGroupedFooterView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E67144(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_255E671A4()
{
  unint64_t result = qword_269F378E8;
  if (!qword_269F378E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F378E8);
  }
  return result;
}

uint64_t sub_255E671F8(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  sub_255E65758(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_255E67268(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    sub_255E656C4(255, &qword_269F377E0, MEMORY[0x263F19B28]);
    unint64_t v7 = a3(a1, v6, MEMORY[0x263F1BA08]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255E672EC(uint64_t a1, uint64_t a2)
{
  sub_255E656C4(0, &qword_269F377E0, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E6736C(uint64_t a1)
{
  sub_255E656C4(0, &qword_269F377E0, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255E673E4()
{
  return swift_getOpaqueTypeConformance2();
}

void *MedicalIDViewFactory.scrollView.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void MedicalIDViewFactory.scrollView.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*MedicalIDViewFactory.scrollView.modify())()
{
  return j__swift_endAccess;
}

id MedicalIDViewFactory.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id MedicalIDViewFactory.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

char *MedicalIDViewFactory.makeHostingController(healthStore:medicalIDData:displayConfiguration:)(void *a1, void *a2, void *a3)
{
  id v30 = a1;
  uint64_t v5 = sub_255EEF0C0();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = type metadata accessor for MedicalIDMainView();
  unint64_t v7 = (int *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v29 - v11;
  objc_msgSend(a3, sel_setIsHostingView_, 1);
  uint64_t v13 = (uint64_t *)((char *)v10 + v7[7]);
  *uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_255E67FD0(0, &qword_269F35318, MEMORY[0x270FA9960], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = (uint64_t *)((char *)v10 + v7[8]);
  *uint64_t v15 = swift_getKeyPath();
  sub_255E67FD0(0, &qword_269F35320, MEMORY[0x270FA97F8], v14);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for MedicalIDModelProvider();
  swift_allocObject();
  id v16 = a2;
  id v17 = a3;
  *unint64_t v10 = sub_255D87B1C(v30, a2, v17);
  *(uint64_t *)((char *)v10 + v7[10]) = (uint64_t)v17;
  uint64_t v18 = (char *)v10 + v7[9];
  *uint64_t v18 = 1;
  *((void *)v18 + 1) = 0;
  sub_255DD66B8((uint64_t)v10, (uint64_t)v12);
  uint64_t v19 = (char *)objc_allocWithZone((Class)type metadata accessor for MedicalIDHostingController());
  *(void *)&v19[qword_269F37910] = 0;
  sub_255E67EB8((uint64_t)v12, (uint64_t)v10);
  uint64_t v20 = (void *)sub_255EEEDC0();
  sub_255E67F1C((uint64_t)v12);
  uint64_t v21 = (uint64_t (*)(uint64_t))MEMORY[0x263F1A4B8];
  sub_255E67FD0(0, &qword_269F37918, MEMORY[0x263F1A4B8], MEMORY[0x263F8E0F8]);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_255EF1E20;
  uint64_t v23 = v20;
  sub_255EEF0A0();
  sub_255EEF0B0();
  uint64_t v34 = v22;
  sub_255E67F78();
  sub_255E67FD0(0, &qword_269F37928, v21, MEMORY[0x263F8D488]);
  sub_255E68034();
  sub_255EF0270();
  sub_255EEEDB0();

  if (objc_msgSend(v17, sel_entryPoint) == (id)1 && (sub_255E680BC() & 1) != 0) {
    objc_msgSend(v17, sel_setEntryPoint_, 2);
  }
  uint64_t v24 = *(void **)&v23[qword_269F37910];
  uint64_t v25 = (void **)(v33 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDViewFactory_scrollView);
  swift_beginAccess();
  uint64_t v26 = *v25;
  *uint64_t v25 = v24;
  id v27 = v24;

  return v23;
}

uint64_t sub_255E67B94(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MedicalIDMainView();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (char *)objc_allocWithZone(v1);
  *(void *)&v6[qword_269F37910] = 0;
  sub_255E67EB8(a1, (uint64_t)v5);
  uint64_t v7 = sub_255EEEDC0();
  sub_255E67F1C(a1);
  return v7;
}

uint64_t sub_255E67CE8()
{
  return 1;
}

void sub_255E67CF0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v9.receiver = a1;
  v9.super_class = (Class)swift_getObjectType();
  id v6 = a3;
  uint64_t v7 = (char *)v9.receiver;
  objc_msgSendSuper2(&v9, sel_setContentScrollView_forEdge_, v6, a4);
  uint64_t v8 = *(void **)&v7[qword_269F37910];
  *(void *)&v7[qword_269F37910] = a3;
}

id sub_255E67D7C(char *a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a1[qword_269F37910] = 0;
  v7.receiver = a1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_initWithCoder_, a3);
}

void sub_255E67DD0()
{
}

void sub_255E67E00()
{
}

id _s11MedicalIDUI0A13IDViewFactoryCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_255E67E4C(uint64_t a1)
{
}

uint64_t type metadata accessor for MedicalIDHostingController()
{
  uint64_t result = qword_269F37938;
  if (!qword_269F37938) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E67EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDMainView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E67F1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDMainView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_255E67F78()
{
  unint64_t result = qword_269F37920;
  if (!qword_269F37920)
  {
    sub_255EEF0C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37920);
  }
  return result;
}

void sub_255E67FD0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_255E68034()
{
  unint64_t result = qword_269F37930;
  if (!qword_269F37930)
  {
    sub_255E67FD0(255, &qword_269F37928, MEMORY[0x263F1A4B8], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37930);
  }
  return result;
}

uint64_t sub_255E680BC()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    uint64_t v2 = sub_255EEFD90();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  if (off_2704A3518)
  {
    if (!v4)
    {
      if (!off_2704A3528) {
        return 1;
      }
      goto LABEL_18;
    }
    if (qword_2704A3510 == v2 && off_2704A3518 == v4 || (sub_255EF04A0() & 1) != 0) {
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    return 1;
  }
  if (off_2704A3528 && (qword_2704A3520 == v2 && off_2704A3528 == v4 || (sub_255EF04A0() & 1) != 0))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for MedicalIDViewFactory()
{
  return self;
}

uint64_t sub_255E68218()
{
  return swift_initClassMetadata2();
}

uint64_t sub_255E68264()
{
  return type metadata accessor for MedicalIDHostingController();
}

void sub_255E6826C()
{
  if (HKImproveHealthAndActivityAnalyticsAllowed())
  {
    id v0 = (void *)sub_255EEFD50();
    sub_255E30AFC();
    id v1 = (void *)sub_255EEFC50();
    AnalyticsSendEvent();

    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_255EEE3D0();
    __swift_project_value_buffer(v2, (uint64_t)qword_269F3FE80);
    oslog = sub_255EEE3B0();
    os_log_type_t v3 = sub_255EF00E0();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v7 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      sub_255DB0024(0xD00000000000001DLL, 0x8000000255EFAA80, &v7);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, oslog, v3, "[%s] Submitted Medical ID Access Event", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v5, -1, -1);
      MEMORY[0x25A29C8A0](v4, -1, -1);
    }
    else
    {
    }
  }
}

unint64_t sub_255E6847C()
{
  sub_255E68638();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_255EF6660;
  *(void *)(inited + 32) = 0xD000000000000015;
  *(void *)(inited + 40) = 0x8000000255EFAAA0;
  id v1 = objc_msgSend(self, sel_mainBundle);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    sub_255EEFD90();
  }
  uint64_t v3 = sub_255EEFD50();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = 0xD000000000000010;
  *(void *)(inited + 64) = 0x8000000255EFAAC0;
  uint64_t v4 = sub_255EEFD50();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 80) = 0x54656C69666F7270;
  *(void *)(inited + 88) = 0xEB00000000657079;
  *(void *)(inited + 96) = sub_255EF0000();
  strcpy((char *)(inited + 104), "typeOfAccess");
  *(unsigned char *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  uint64_t v5 = sub_255EEFD50();
  swift_bridgeObjectRelease();
  *(void *)(inited + 120) = v5;
  return sub_255E88BC4(inited);
}

void sub_255E68638()
{
  if (!qword_269F37948)
  {
    sub_255E68690();
    unint64_t v0 = sub_255EF0490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37948);
    }
  }
}

void sub_255E68690()
{
  if (!qword_269F37950)
  {
    sub_255E30AFC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37950);
    }
  }
}

uint64_t sub_255E686F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E6870C);
}

uint64_t sub_255E6870C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E687CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E687E0);
}

uint64_t sub_255E687E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDMedicalConditionsCellView()
{
  uint64_t result = qword_269F37958;
  if (!qword_269F37958) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E688E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E68904@<X0>(uint64_t a1@<X8>)
{
  if (qword_269F34B10 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)algn_269F3FD88;
  uint64_t v21 = qword_269F3FD80;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_medicalConditions);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sub_255EEFD90();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = sub_255EEFD40();
  MEMORY[0x270FA5388](v10 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_269F352A8;
  uint64_t v12 = sub_255EEE200();
  MEMORY[0x270FA5388](v12 - 8);
  id v13 = v11;
  sub_255EEE1F0();
  uint64_t v14 = sub_255EEFDA0();
  uint64_t v16 = v15;
  id v17 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for MedicalIDMedicalConditionsCellView() + 20));
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v18;
  return swift_retain();
}

__n128 sub_255E68B30@<Q0>(uint64_t a1@<X8>)
{
  sub_255E68904((uint64_t)v8);
  uint64_t v2 = v8[1];
  char v3 = v9;
  uint64_t v4 = v11;
  uint64_t v5 = v13;
  __n128 result = v12;
  long long v7 = v10;
  *(void *)a1 = v8[0];
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 40) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = v5;
  return result;
}

uint64_t MedicalIDPregnancyViewModel.pregnancyDueDateLabelState(_:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v100 = a2;
  uint64_t v5 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v90 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v92 = (uint64_t *)((char *)&v85 - v9);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  char v94 = (uint64_t *)((char *)&v85 - v11);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v85 - v12;
  uint64_t v14 = sub_255EEE100();
  uint64_t v15 = *(char **)(v14 - 8);
  uint64_t v16 = *((void *)v15 + 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v102 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v85 - v21;
  sub_255E0B4E8(a1, (uint64_t)&v85 - v21);
  uint64_t v98 = (void *)v3;
  sub_255E69690(v3, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v23 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v15 + 6);
  int v24 = v23(v22, 1, v14);
  uint64_t v95 = v5;
  if (v24 == 1)
  {
    uint64_t v101 = (uint64_t *)v23;
    uint64_t v25 = *(int *)(v5 + 20);
    uint64_t v26 = type metadata accessor for MedicalIDData();
    sub_255E0B4E8((uint64_t)&v13[v25 + *(int *)(v26 + 56)], (uint64_t)v20);
    sub_255E696F8((uint64_t)v13);
    sub_255D7ED4C((uint64_t)v22);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v101)(v20, 1, v14) != 1)
    {
      uint64_t v96 = v15 + 48;
      id v27 = v15 + 32;
      uint64_t v28 = (void (*)(char *, char *, uint64_t))*((void *)v15 + 4);
      goto LABEL_7;
    }
LABEL_5:
    uint64_t result = sub_255D7ED4C((uint64_t)v20);
    char v30 = 3;
LABEL_17:
    unsigned char *v100 = v30;
    return result;
  }
  sub_255E696F8((uint64_t)v13);
  id v27 = v15 + 32;
  uint64_t v28 = (void (*)(char *, char *, uint64_t))*((void *)v15 + 4);
  v28(v20, v22, v14);
  (*((void (**)(char *, void, uint64_t, uint64_t))v15 + 7))(v20, 0, 1, v14);
  if (v23(v20, 1, v14) == 1) {
    goto LABEL_5;
  }
  uint64_t v101 = (uint64_t *)v23;
  uint64_t v96 = v15 + 48;
LABEL_7:
  uint64_t v99 = (void (*)(char *, uint64_t))v15;
  uint64_t v91 = v28;
  uint64_t v31 = v102;
  uint64_t v32 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v102, v20, v14);
  uint64_t v89 = &v85;
  MEMORY[0x270FA5388](v32);
  unint64_t v33 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v34 = v95;
  uint64_t v35 = (uint64_t)v98;
  uint64_t v36 = (unint64_t)v27 & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  char v93 = (char *)v98 + *(int *)(v95 + 24);
  sub_255EEE230();
  uint64_t v37 = v16;
  uint64_t v38 = (void (*)(char *, uint64_t))*((void *)v99 + 1);
  uint64_t v99 = (void (*)(char *, uint64_t))((char *)v99 + 8);
  v38(v31, v14);
  uint64_t v39 = v31;
  uint64_t v40 = v37;
  uint64_t v41 = v34;
  uint64_t v42 = (uint64_t (*)(char *, char *, uint64_t))v91;
  uint64_t v43 = ((uint64_t (*)(char *, char *, uint64_t))v91)(v39, (char *)&v85 - v33, v14);
  uint64_t v89 = &v85;
  MEMORY[0x270FA5388](v43);
  unint64_t v86 = v33;
  uint64_t v44 = (char *)&v85 - v33;
  uint64_t v88 = &v85;
  uint64_t v45 = MEMORY[0x270FA5388](v35 + *(int *)(v41 + 36));
  uint64_t v47 = (char *)&v85 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = v45;
  sub_255E0B4E8(v45, (uint64_t)v47);
  uint64_t v48 = (uint64_t)v94;
  sub_255E69690(v35, (uint64_t)v94, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v49 = ((uint64_t (*)(char *, uint64_t, uint64_t))v101)(v47, 1, v14);
  uint64_t v85 = v36;
  if (v49 == 1)
  {
    MEMORY[0x270FA5388](v49);
    char v50 = (char *)&v85 - v86;
    sub_255EEE0F0();
    sub_255EEE230();
    v38(v50, v14);
    sub_255E696F8(v48);
    uint64_t v51 = sub_255D7ED4C((uint64_t)v47);
  }
  else
  {
    sub_255E696F8(v48);
    uint64_t v51 = v42(v44, v47, v14);
  }
  MEMORY[0x270FA5388](v51);
  unint64_t v52 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v53 = v40;
  uint64_t v54 = v102;
  sub_255EEE230();
  char v55 = sub_255EEE0C0();
  v38((char *)&v85 - v52, v14);
  uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v38)(v44, v14);
  if (v55)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v38)(v54, v14);
    unsigned char *v100 = 0;
    return result;
  }
  uint64_t v99 = v38;
  char v94 = &v85;
  uint64_t v57 = MEMORY[0x270FA5388](v56);
  uint64_t v59 = v58;
  uint64_t v60 = (char *)&v85 - v52;
  uint64_t v89 = &v85;
  uint64_t v61 = MEMORY[0x270FA5388](v57);
  uint64_t v62 = (char *)&v85 - v52;
  uint64_t v88 = &v85;
  MEMORY[0x270FA5388](v61);
  uint64_t v64 = (char *)&v85 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E0B4E8(v87, (uint64_t)v64);
  uint64_t v65 = (uint64_t)v92;
  sub_255E69690((uint64_t)v98, (uint64_t)v92, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v96 = v59;
  uint64_t v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v101)(v64, 1, v14);
  if (v66 == 1)
  {
    MEMORY[0x270FA5388](v66);
    sub_255EEE0F0();
    sub_255EEE230();
    unsigned __int8 v67 = v99;
    v99((char *)&v85 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    sub_255E696F8(v65);
    sub_255D7ED4C((uint64_t)v64);
  }
  else
  {
    sub_255E696F8(v65);
    v91((char *)&v85 - v52, v64, v14);
    unsigned __int8 v67 = v99;
  }
  sub_255EEE230();
  v67(v62, v14);
  char v68 = v102;
  char v69 = sub_255EEE0B0();
  uint64_t v70 = ((uint64_t (*)(char *, uint64_t))v67)(v60, v14);
  if (v69)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v67)(v68, v14);
    char v30 = 2;
    goto LABEL_17;
  }
  MEMORY[0x270FA5388](v70);
  unint64_t v71 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255E69754();
  char v94 = (uint64_t *)((char *)&v85 - v71);
  uint64_t v72 = sub_255EF0170();
  uint64_t v92 = &v85;
  uint64_t v73 = MEMORY[0x270FA5388](v72);
  uint64_t v74 = (char *)&v85 - v71;
  uint64_t v89 = &v85;
  uint64_t v75 = MEMORY[0x270FA5388](v73);
  uint64_t v76 = (char *)&v85 - v71;
  MEMORY[0x270FA5388](v75);
  uint64_t v78 = (char *)&v85 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E0B4E8(v87, (uint64_t)v78);
  uint64_t v79 = v90;
  sub_255E69690((uint64_t)v98, v90, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v80 = ((uint64_t (*)(char *, uint64_t, uint64_t))v101)(v78, 1, v14);
  if (v80 == 1)
  {
    uint64_t v101 = &v85;
    uint64_t v98 = &v85;
    MEMORY[0x270FA5388](v80);
    sub_255EEE0F0();
    sub_255EEE230();
    uint64_t v81 = (char *)&v85 - v71;
    uint64_t v82 = v99;
    v99(v81, v14);
    sub_255E696F8(v79);
    sub_255D7ED4C((uint64_t)v78);
  }
  else
  {
    sub_255E696F8(v79);
    v91((char *)&v85 - v71, v78, v14);
    uint64_t v82 = v99;
  }
  sub_255EEE230();
  v82(v76, v14);
  uint64_t v83 = (uint64_t)v94;
  char v84 = sub_255EEE0B0();
  v82(v74, v14);
  v82((char *)v83, v14);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v82)(v102, v14);
  unsigned char *v100 = (v84 & 1) != 0;
  return result;
}

uint64_t type metadata accessor for MedicalIDPregnancyViewModel()
{
  uint64_t result = qword_269F37980;
  if (!qword_269F37980) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E69690(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E696F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDPregnancyViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_255E69754()
{
  unint64_t result = qword_269F37350;
  if (!qword_269F37350)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F37350);
  }
  return result;
}

uint64_t MedicalIDPregnancyViewModel.gestationalAgeDescription(dueDate:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_255EEE100();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  v28[0] = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v28 - v14;
  sub_255E0B4E8(a1, (uint64_t)v28 - v14);
  v28[1] = v2;
  sub_255E69690(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v16(v15, 1, v7) == 1)
  {
    uint64_t v17 = *(int *)(v4 + 20);
    uint64_t v18 = type metadata accessor for MedicalIDData();
    sub_255E0B4E8((uint64_t)&v6[v17 + *(int *)(v18 + 56)], (uint64_t)v13);
    sub_255E696F8((uint64_t)v6);
    sub_255D7ED4C((uint64_t)v15);
    if (v16(v13, 1, v7) != 1)
    {
      uint64_t v19 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
LABEL_6:
      uint64_t v21 = (char *)v28[0];
      uint64_t v22 = v19((char *)v28[0], v13, v7);
      MEMORY[0x270FA5388](v22);
      uint64_t v23 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255E69754();
      uint64_t v24 = sub_255EF0170();
      MEMORY[0x270FA5388](v24);
      uint64_t v25 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v25, v23, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
      uint64_t v20 = MedicalIDPregnancyViewModel.gestationalAgeDescription(startDate:)((uint64_t)v25);
      sub_255D7ED4C((uint64_t)v25);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
      v26(v23, v7);
      v26(v21, v7);
      return v20;
    }
  }
  else
  {
    sub_255E696F8((uint64_t)v6);
    uint64_t v19 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
    v19(v13, v15, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    if (v16(v13, 1, v7) != 1) {
      goto LABEL_6;
    }
  }
  sub_255D7ED4C((uint64_t)v13);
  return 0;
}

uint64_t MedicalIDPregnancyViewModel.init(data:calendar:locale:sampleDataProvider:currentDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = 0x636E616E67657250;
  sub_255D7F1F0();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_255EF1E20;
  unint64_t v14 = 0xE900000000000079;
  *(void *)(v13 + 32) = 0x496C61636964654DLL;
  *(void *)(v13 + 40) = 0xE900000000000044;
  *(void *)(v13 + 48) = 0x636E616E67657250;
  *(void *)(v13 + 56) = 0xE900000000000079;
  uint64_t v15 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v16 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v16)
  {
    uint64_t v12 = sub_255EEFD90();
    unint64_t v14 = v17;
  }
  *a6 = v12;
  a6[1] = v14;
  uint64_t v18 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  sub_255E6D900(a1, (uint64_t)a6 + v18[5], (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  uint64_t v19 = (char *)a6 + v18[6];
  uint64_t v20 = sub_255EEE280();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a2, v20);
  uint64_t v21 = (char *)a6 + v18[7];
  uint64_t v22 = sub_255EEE200();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a3, v22);
  *(uint64_t *)((char *)a6 + v18[8]) = a4;
  uint64_t v23 = (uint64_t)a6 + v18[9];
  return sub_255D8BB10(a5, v23);
}

uint64_t MedicalIDPregnancyViewModel.defaultPregnancyDueDate(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (objc_msgSend(a1, sel_suggestHealthData))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    MEMORY[0x270FA5388](v4 - 8);
    uint64_t v6 = (char *)v23 - v5;
    uint64_t v7 = *(void *)(v2 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 32));
    if (v7)
    {
      swift_getKeyPath();
      v23[1] = v7;
      sub_255E0B444();
      sub_255EEE2D0();
      swift_release();
      uint64_t v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
      swift_beginAccess();
      sub_255E0B4E8(v8, (uint64_t)v6);
      uint64_t v9 = sub_255EEE100();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1) {
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v6, v9);
      }
    }
    else
    {
      uint64_t v12 = sub_255EEE100();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
    }
    sub_255D7ED4C((uint64_t)v6);
  }
  id v13 = (id)HKUIDefaultPregnancyDueDate();
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  id v16 = (char *)v23 - v15;
  if (v13)
  {
    uint64_t v17 = sub_255EEE100();
    uint64_t v18 = *(void *)(v17 - 8);
    MEMORY[0x270FA5388](v17);
    uint64_t v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255EEE0D0();

    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v21(v16, v20, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a2, v16, v17);
    }
  }
  else
  {
    uint64_t v22 = sub_255EEE100();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v16, 1, 1, v22);
  }
  sub_255EEE0F0();
  return sub_255D7ED4C((uint64_t)v16);
}

id MedicalIDPregnancyViewModel.minimumSelectableDueDate.getter@<X0>(char *a1@<X8>)
{
  char v55 = a1;
  uint64_t v54 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v54);
  uint64_t v50 = (uint64_t)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_255EEE100();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (char *)v40 - v6;
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v53 = v1;
  _s11MedicalIDUI0A20IDPregnancyViewModelV24maximumSelectableDueDate10Foundation0I0VSgvg_0((uint64_t)v40 - v10);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v56 = v3;
  unint64_t v52 = v11;
  if (v11((char *)v40 - v10, 1, v3) == 1)
  {
    sub_255D7ED4C((uint64_t)v40 - v10);
    return (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v55, 1, 1, v56);
  }
  else
  {
    uint64_t v49 = v4;
    uint64_t v44 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v45 = v4 + 32;
    uint64_t v13 = v44((char *)v40 - v6, (char *)v40 - v10, v56);
    uint64_t v48 = v40;
    v40[1] = v5;
    uint64_t v14 = MEMORY[0x270FA5388](v13);
    uint64_t v15 = (char *)v40 - v6;
    uint64_t v47 = v40;
    MEMORY[0x270FA5388](v14);
    id v16 = (char *)v40 - v10;
    uint64_t v17 = sub_255EEE270();
    uint64_t v46 = v40;
    uint64_t v18 = *(void **)(v17 - 8);
    uint64_t v19 = v18[8];
    MEMORY[0x270FA5388](v17);
    uint64_t v51 = v7;
    uint64_t v20 = *MEMORY[0x263F07838];
    uint64_t v43 = (void (*)(char *, uint64_t, uint64_t))v18[13];
    v43((char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v17);
    id result = objc_msgSend(self, sel_maximumNumberOfWeeksPregnant);
    if (__OFSUB__(0, result))
    {
      __break(1u);
    }
    else
    {
      uint64_t v41 = v15;
      uint64_t v42 = v9;
      uint64_t v21 = v53;
      sub_255EEE260();
      uint64_t v22 = (void (*)(char *, uint64_t))v18[1];
      v22((char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
      uint64_t v23 = v52;
      if (v52(v16, 1, v56) == 1)
      {
        sub_255D7ED4C((uint64_t)v16);
        uint64_t v24 = MEMORY[0x270FA5388](v21 + *(int *)(v54 + 36));
        uint64_t v26 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_255E0B4E8(v24, (uint64_t)v26);
        uint64_t v27 = v50;
        sub_255E69690(v21, v50, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
        uint64_t v28 = v23(v26, 1, v56);
        uint64_t v29 = v55;
        if (v28 == 1)
        {
          MEMORY[0x270FA5388](v28);
          uint64_t v31 = (char *)v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
          sub_255EEE0F0();
          sub_255EEE230();
          uint64_t v32 = v49;
          unint64_t v33 = *(void (**)(char *, uint64_t))(v49 + 8);
          v33(v31, v56);
          sub_255E696F8(v27);
          sub_255D7ED4C((uint64_t)v26);
        }
        else
        {
          sub_255E696F8(v27);
          v44(v29, v26, v56);
          uint64_t v32 = v49;
          unint64_t v33 = *(void (**)(char *, uint64_t))(v49 + 8);
        }
        uint64_t v39 = v56;
        v33(v51, v56);
        return (id)(*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v39);
      }
      else
      {
        uint64_t v34 = v41;
        uint64_t v35 = v56;
        uint64_t v36 = v44(v41, v16, v56);
        MEMORY[0x270FA5388](v36);
        uint64_t v37 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
        v43(v37, *MEMORY[0x263F07868], v17);
        sub_255EEE260();
        v22(v37, v17);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v49 + 8);
        v38(v34, v35);
        return (id)((uint64_t (*)(char *, uint64_t))v38)(v51, v35);
      }
    }
  }
  return result;
}

uint64_t MedicalIDPregnancyViewModel.update(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_255EEE100();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8 - 8);
  sub_255E0B4E8(a2, (uint64_t)v19 - v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))((char *)v19 - v9, 1, v4) == 1)
  {
    sub_255D7ED4C((uint64_t)v19 - v9);
    uint64_t v10 = type metadata accessor for MedicalIDData();
    uint64_t v11 = a1 + *(int *)(v10 + 56);
    sub_255D7ED4C(v11);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v12(v11, 1, 1, v4);
    uint64_t v13 = a1 + *(int *)(v10 + 52);
    sub_255D7ED4C(v13);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v13, 1, 1, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, (char *)v19 - v9, v4);
    uint64_t v15 = type metadata accessor for MedicalIDData();
    uint64_t v16 = a1 + *(int *)(v15 + 56);
    sub_255D7ED4C(v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v16, v7, v4);
    uint64_t v17 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v18 = v17(v16, 0, 1, v4);
    v19[1] = v19;
    MEMORY[0x270FA5388](v18);
    sub_255E69754();
    sub_255EF0170();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v17((uint64_t)v19 - v9, 0, 1, v4);
    return sub_255E6D828((uint64_t)v19 - v9, a1 + *(int *)(v15 + 52));
  }
}

double MedicalIDPregnancyViewModel.validationResult(for:)@<D0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v159 = a2;
  uint64_t v155 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v3 = MEMORY[0x270FA5388](v155);
  uint64_t v152 = (uint64_t)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v154 = (uint64_t)&v124 - v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void (*)(char *, uint64_t))((char *)&v124 - v7);
  uint64_t v9 = sub_255EEE100();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v157 = (long long *)((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = (char *)((char *)&v124 - (char *)v157);
  uint64_t v12 = type metadata accessor for MedicalIDData();
  uint64_t v13 = *(int *)(v12 + 52);
  uint64_t v158 = a1;
  uint64_t v14 = (uint64_t)a1 + v13;
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  unint64_t v16 = (*(void *)(*(void *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = v14;
  uint64_t v18 = v10;
  sub_255E0B4E8(v17, (uint64_t)&v124 - v16);
  uint64_t v21 = *(long long **)(v10 + 48);
  uint64_t v19 = (long long *)(v10 + 48);
  uint64_t v20 = v21;
  uint64_t v161 = v9;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v21)((char *)&v124 - v16, 1, v9) == 1)
  {
    sub_255D7ED4C((uint64_t)&v124 - v16);
LABEL_5:
    uint64_t v27 = v159;
    v159[6] = 0;
    double result = 0.0;
    *((_OWORD *)v27 + 1) = 0u;
    *((_OWORD *)v27 + 2) = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    return result;
  }
  uint64_t v148 = v8;
  uint64_t v22 = v161;
  uint64_t v150 = *(uint64_t (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v151 = v18 + 32;
  uint64_t v23 = v150(v160, (char *)&v124 - v16, v161);
  uint64_t v153 = &v124;
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = (char *)((char *)&v124 - (char *)v157);
  uint64_t v157 = &v124;
  uint64_t v25 = MEMORY[0x270FA5388]((char *)v158 + *(int *)(v12 + 56));
  uint64_t v26 = (char *)&v124 - v16;
  sub_255E0B4E8(v25, (uint64_t)&v124 - v16);
  uint64_t v158 = v19;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v20)((char *)&v124 - v16, 1, v22) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v160, v161);
    sub_255D7ED4C((uint64_t)&v124 - v16);
    goto LABEL_5;
  }
  uint64_t v29 = v20;
  uint64_t v149 = v18;
  uint64_t v30 = v150(v24, v26, v161);
  uint64_t v144 = &v124;
  MEMORY[0x270FA5388](v30);
  unint64_t v31 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v32 = v155;
  uint64_t v33 = *(int *)(v155 + 24);
  uint64_t v157 = v29;
  uint64_t v34 = v156;
  uint64_t v35 = v156 + v33;
  uint64_t v147 = (char *)&v124 - v31;
  uint64_t v36 = v160;
  uint64_t v37 = sub_255EEE230();
  uint64_t v143 = &v124;
  MEMORY[0x270FA5388](v37);
  uint64_t v145 = (char *)&v124 - v31;
  uint64_t v142 = v24;
  uint64_t v139 = v35;
  uint64_t v38 = sub_255EEE230();
  uint64_t v146 = &v124;
  MEMORY[0x270FA5388](v38);
  uint64_t v39 = (char *)&v124 - v31;
  uint64_t v40 = MEMORY[0x270FA5388](v34 + *(int *)(v32 + 36));
  uint64_t v141 = v41;
  uint64_t v42 = (char *)&v124 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = v40;
  sub_255E0B4E8(v40, (uint64_t)v42);
  uint64_t v43 = v148;
  sub_255E69690(v34, (uint64_t)v148, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v157)(v42, 1, v161);
  if (v44 == 1)
  {
    MEMORY[0x270FA5388](v44);
    sub_255EEE0F0();
    sub_255EEE230();
    uint64_t v45 = v149;
    (*(void (**)(char *, uint64_t))(v149 + 8))((char *)&v124 - v31, v161);
    sub_255E696F8((uint64_t)v43);
    uint64_t v36 = v160;
    sub_255D7ED4C((uint64_t)v42);
  }
  else
  {
    sub_255E696F8((uint64_t)v43);
    v150((char *)&v124 - v31, v42, v161);
    uint64_t v45 = v149;
  }
  uint64_t v46 = v147;
  sub_255E6D8B0((unint64_t *)&qword_269F35060, MEMORY[0x270FA9260]);
  uint64_t v47 = v161;
  char v48 = sub_255EEFCA0();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v50 = v45 + 8;
  uint64_t v49 = v51;
  v51(v39, v47);
  if (v48)
  {
    char v162 = 1;
    MedicalIDPregnancyViewModel.validationError(for:)(&v163, (MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError)&v162);
    uint64_t v52 = v161;
    v49(v145, v161);
    v49(v46, v52);
    v49(v142, v52);
    v49(v36, v52);
    object = v163.title._object;
    rawValue = v163.actions._rawValue;
    char v55 = v159;
    uint64_t *v159 = v163.title._countAndFlagsBits;
    v55[1] = (uint64_t)object;
    *((_OWORD *)v55 + 1) = v163.message;
    v55[4] = (uint64_t)rawValue;
    double result = *(double *)&v163.code.value._countAndFlagsBits;
    *(Swift::String_optional *)(v55 + 5) = v163.code;
  }
  else
  {
    uint64_t v148 = v49;
    uint64_t v149 = v50;
    uint64_t v56 = sub_255EEDF60();
    unint64_t v133 = &v124;
    uint64_t v135 = *(void *)(v56 - 8);
    uint64_t v57 = *(void *)(v135 + 64);
    MEMORY[0x270FA5388](v56);
    uint64_t v146 = (long long *)((char *)&v124 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
    sub_255E6E0D4(0, &qword_269F37968, MEMORY[0x270FA98B8], MEMORY[0x263F8E0F8]);
    uint64_t v59 = v58;
    uint64_t v60 = sub_255EEE270();
    uint64_t v61 = *(void *)(v60 - 8);
    uint64_t v62 = *(unsigned __int8 *)(v61 + 80);
    uint64_t v63 = (v62 + 32) & ~v62;
    uint64_t v64 = v63 + *(void *)(v61 + 72);
    uint64_t v129 = v59;
    uint64_t v127 = v64;
    uint64_t v126 = v62 | 7;
    uint64_t v65 = swift_allocObject();
    long long v124 = xmmword_255EF20B0;
    *(_OWORD *)(v65 + 16) = xmmword_255EF20B0;
    uint64_t v128 = v63;
    uint64_t v66 = *MEMORY[0x263F07838];
    uint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 104);
    v125(v65 + v63, v66, v60);
    uint64_t v138 = (long long *)sub_255EEA08C(v65);
    swift_setDeallocating();
    uint64_t v131 = v60;
    swift_arrayDestroy();
    uint64_t v67 = swift_deallocClassInstance();
    uint64_t v137 = &v124;
    uint64_t v68 = MEMORY[0x270FA5388](v67);
    unint64_t v69 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v136 = &v124;
    MEMORY[0x270FA5388](v68);
    unint64_t v71 = (char *)&v124 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255E0B4E8(v140, (uint64_t)v71);
    uint64_t v72 = v154;
    sub_255E69690(v156, v154, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
    uint64_t v73 = v161;
    uint64_t v74 = ((uint64_t (*)(char *, uint64_t, uint64_t))v157)(v71, 1, v161);
    uint64_t v134 = v56;
    uint64_t v132 = v11;
    uint64_t v130 = v57;
    if (v74 == 1)
    {
      uint64_t v75 = v72;
      MEMORY[0x270FA5388](v74);
      sub_255EEE0F0();
      sub_255EEE230();
      uint64_t v76 = v148;
      v148((char *)&v124 - v69, v73);
      sub_255E696F8(v75);
      uint64_t v77 = (uint64_t)v71;
      uint64_t v78 = v76;
      sub_255D7ED4C(v77);
    }
    else
    {
      sub_255E696F8(v72);
      v150((char *)&v124 - v69, v71, v73);
      uint64_t v78 = v148;
    }
    uint64_t v79 = v146;
    uint64_t v80 = v147;
    sub_255EEE240();
    swift_bridgeObjectRelease();
    v78((char *)&v124 - v69, v73);
    uint64_t v81 = sub_255EEDE90();
    if (v82)
    {
      (*(void (**)(long long *, uint64_t))(v135 + 8))(v79, v134);
      v78(v145, v73);
      v78(v80, v73);
      v78(v142, v73);
      v78(v160, v73);
      uint64_t v96 = v159;
      v159[6] = 0;
      double result = 0.0;
      *((_OWORD *)v96 + 1) = 0u;
      *((_OWORD *)v96 + 2) = 0u;
      *(_OWORD *)uint64_t v96 = 0u;
    }
    else
    {
      uint64_t v136 = (long long *)v81;
      MEMORY[0x270FA5388](v81);
      uint64_t v154 = (uint64_t)&v124 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = v124;
      v125(v84 + v128, *MEMORY[0x263F07868], v131);
      sub_255EEA08C(v84);
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v85 = swift_deallocClassInstance();
      uint64_t v137 = &v124;
      uint64_t v86 = v132;
      uint64_t v87 = MEMORY[0x270FA5388](v85);
      unint64_t v88 = (v86 + 15) & 0xFFFFFFFFFFFFFFF0;
      MEMORY[0x270FA5388](v87);
      uint64_t v90 = (char *)&v124 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_255E0B4E8(v140, (uint64_t)v90);
      uint64_t v91 = v152;
      sub_255E69690(v156, v152, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
      uint64_t v92 = ((uint64_t (*)(char *, uint64_t, uint64_t))v157)(v90, 1, v73);
      uint64_t v138 = &v124;
      if (v92 == 1)
      {
        uint64_t v158 = &v124;
        uint64_t v93 = v91;
        MEMORY[0x270FA5388](v92);
        sub_255EEE0F0();
        sub_255EEE230();
        char v94 = v148;
        v148((char *)&v124 - v88, v73);
        sub_255E696F8(v93);
        uint64_t v95 = v94;
        sub_255D7ED4C((uint64_t)v90);
      }
      else
      {
        sub_255E696F8(v91);
        v150((char *)&v124 - v88, v90, v73);
        uint64_t v95 = v148;
      }
      uint64_t v97 = v154;
      uint64_t v98 = v145;
      sub_255EEE240();
      swift_bridgeObjectRelease();
      v95((char *)&v124 - v88, v73);
      uint64_t v99 = sub_255EEDED0();
      if (v100)
      {
        uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
        uint64_t v113 = v134;
        v112(v97, v134);
        v112((uint64_t)v146, v113);
        v95(v98, v73);
        v95(v147, v73);
        v95(v142, v73);
        v95(v160, v73);
        uint64_t v114 = v159;
        v159[6] = 0;
        double result = 0.0;
        *((_OWORD *)v114 + 1) = 0u;
        *((_OWORD *)v114 + 2) = 0u;
        *(_OWORD *)uint64_t v114 = 0u;
      }
      else
      {
        uint64_t v101 = v99;
        uint64_t v102 = self;
        uint64_t v103 = (long long *)objc_msgSend(v102, sel_maximumNumberOfWeeksPregnant);
        if ((uint64_t)v136 >= (uint64_t)v103)
        {
          char v162 = 0;
          MedicalIDPregnancyViewModel.validationError(for:)(&v163, (MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError)&v162);
          uint64_t v115 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
          uint64_t v116 = v134;
          v115(v97, v134);
          v115((uint64_t)v146, v116);
          uint64_t v117 = v148;
          v148(v98, v73);
          v117(v147, v73);
          v117(v142, v73);
          v117(v160, v73);
          uint64_t v118 = v163.title._object;
          uint64_t v119 = v163.actions._rawValue;
          id v120 = v159;
          uint64_t *v159 = v163.title._countAndFlagsBits;
          v120[1] = (uint64_t)v118;
          *((_OWORD *)v120 + 1) = v163.message;
          v120[4] = (uint64_t)v119;
          double result = *(double *)&v163.code.value._countAndFlagsBits;
          *(Swift::String_optional *)(v120 + 5) = v163.code;
        }
        else
        {
          BOOL v104 = (uint64_t)objc_msgSend(v102, sel_estimatedDueDateNumberOfDays) < v101;
          id v105 = v159;
          uint64_t v106 = v142;
          if (v104)
          {
            char v162 = 1;
            MedicalIDPregnancyViewModel.validationError(for:)(&v163, (MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError)&v162);
            uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            uint64_t v108 = v134;
            v107(v154, v134);
            v107((uint64_t)v146, v108);
            uint64_t v109 = v148;
            v148(v98, v73);
            v109(v147, v73);
            v109(v106, v73);
            v109(v160, v73);
            uint64_t v110 = v163.title._object;
            uint64_t v111 = v163.actions._rawValue;
            uint64_t *v105 = v163.title._countAndFlagsBits;
            v105[1] = (uint64_t)v110;
            *((_OWORD *)v105 + 1) = v163.message;
            v105[4] = (uint64_t)v111;
            double result = *(double *)&v163.code.value._countAndFlagsBits;
            *(Swift::String_optional *)(v105 + 5) = v163.code;
          }
          else
          {
            uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            uint64_t v122 = v134;
            v121(v154, v134);
            v121((uint64_t)v146, v122);
            uint64_t v123 = v148;
            v148(v98, v73);
            v123(v147, v73);
            v123(v106, v73);
            v123(v160, v73);
            v105[6] = 0;
            double result = 0.0;
            *((_OWORD *)v105 + 1) = 0u;
            *((_OWORD *)v105 + 2) = 0u;
            *(_OWORD *)id v105 = 0u;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_255E6BBDC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E0B444();
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDate;
  swift_beginAccess();
  return sub_255E0B4E8(v4, a2);
}

uint64_t sub_255E6BC78(uint64_t a1, uint64_t *a2)
{
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-v5];
  sub_255E0B4E8(a1, (uint64_t)&v9[-v5]);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_255E0B444();
  sub_255EEE2C0();
  swift_release();
  return sub_255D7ED4C((uint64_t)v6);
}

uint64_t MedicalIDPregnancyViewModel.gestationalAgeDescription(startDate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v40 - v13;
  sub_255E0B4E8(a1, (uint64_t)v40 - v13);
  uint64_t v41 = (void *)v1;
  sub_255E69690(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v16 = v15(v14, 1, v6);
  uint64_t v43 = v7;
  if (v16 == 1)
  {
    uint64_t v17 = *(int *)(v3 + 20);
    uint64_t v18 = type metadata accessor for MedicalIDData();
    sub_255E0B4E8((uint64_t)&v5[v17 + *(int *)(v18 + 52)], (uint64_t)v12);
    sub_255E696F8((uint64_t)v5);
    sub_255D7ED4C((uint64_t)v14);
    if (v15(v12, 1, v6) != 1)
    {
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      goto LABEL_6;
    }
LABEL_5:
    sub_255D7ED4C((uint64_t)v12);
    return 0;
  }
  sub_255E696F8((uint64_t)v5);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v19(v12, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  if (v15(v12, 1, v6) == 1) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v20 = v41;
  v19(v42, v12, v6);
  uint64_t v21 = *(void *)((char *)v20 + *(int *)(v3 + 32));
  if (v21
    && (swift_getKeyPath(),
        uint64_t v44 = v21,
        sub_255E0B444(),
        sub_255EEE2D0(),
        swift_release(),
        uint64_t v22 = v21 + OBJC_IVAR____TtC11MedicalIDUI27PregnancySampleDataProvider__ongoingEstimatedDueDateTimeZoneName,
        swift_beginAccess(),
        *(void *)(v22 + 8)))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v23 = sub_255EEE2B0();
    uint64_t v24 = *(void *)(v23 - 8);
    MEMORY[0x270FA5388](v23);
    uint64_t v26 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255EEE2A0();
    sub_255EEE290();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = v43;
  unint64_t v28 = sub_255E69754();
  MEMORY[0x270FA5388](v28);
  sub_255EEE0F0();
  uint64_t v29 = sub_255EF0180();
  uint64_t v43 = *(void *)(v27 + 8);
  v40[1] = v31;
  void v40[2] = v29;
  ((void (*)(char *, uint64_t))v43)((char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_bridgeObjectRelease();
  uint64_t v32 = sub_255EF05B0();
  uint64_t v41 = v40;
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)v40 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_255EF05A0();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)v40 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EF0590();
  sub_255EF0160();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
  sub_255E6D8B0(&qword_269F37970, MEMORY[0x270FA9D68]);
  sub_255EF05C0();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  ((void (*)(char *, uint64_t))v43)(v42, v6);
  return v45;
}

Swift::Bool __swiftcall MedicalIDPregnancyViewModel.isGestationalAgeValid()()
{
  uint64_t v1 = sub_255EEE100();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for MedicalIDData() + 52);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v12 - v8;
  sub_255E0B4E8(v6, (uint64_t)&v12 - v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 1, v1) == 1)
  {
    sub_255D7ED4C((uint64_t)v9);
    char v10 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v9, v1);
    sub_255E69754();
    char v10 = sub_255EF0190();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v10 & 1;
}

Swift::Bool __swiftcall MedicalIDPregnancyViewModel.hasPregnancyData()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + *(int *)(v3 + 20);
  uint64_t v17 = type metadata accessor for MedicalIDData();
  uint64_t v7 = v6 + *(int *)(v17 + 52);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8 - 8);
  sub_255E0B4E8(v7, (uint64_t)&v16 - v9);
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  int v12 = v11((char *)&v16 - v9, 1, v10);
  sub_255D7ED4C((uint64_t)&v16 - v9);
  sub_255E69690(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  if (v12 == 1)
  {
    sub_255E696F8((uint64_t)v5);
    return 0;
  }
  else
  {
    uint64_t v14 = MEMORY[0x270FA5388](&v5[*(int *)(v2 + 20) + (uint64_t)*(int *)(v17 + 56)]);
    sub_255E0B4E8(v14, (uint64_t)&v16 - v9);
    sub_255E696F8((uint64_t)v5);
    Swift::Bool v13 = v11((char *)&v16 - v9, 1, v10) != 1;
    sub_255D7ED4C((uint64_t)&v16 - v9);
  }
  return v13;
}

uint64_t MedicalIDPregnancyViewModel.baseIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicalIDPregnancyViewModel.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDPregnancyViewModel();
  return sub_255E69690(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
}

uint64_t MedicalIDPregnancyViewModel.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 24);
  uint64_t v4 = sub_255EEE280();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t MedicalIDPregnancyViewModel.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 28);
  uint64_t v4 = sub_255EEE200();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t MedicalIDPregnancyViewModel.sampleDataProvider.getter()
{
  type metadata accessor for MedicalIDPregnancyViewModel();
  return swift_retain();
}

uint64_t _s11MedicalIDUI0A20IDPregnancyViewModelV24maximumSelectableDueDate10Foundation0I0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v2 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_255EEE270();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *MEMORY[0x263F07868];
  uint64_t v22 = v10;
  uint64_t v23 = v9;
  (*(void (**)(char *, uint64_t))(v10 + 104))(v7, v8);
  v21[1] = objc_msgSend(self, sel_estimatedDueDateNumberOfDays);
  uint64_t v11 = sub_255EEE100();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = v2;
  uint64_t v15 = v1 + *(int *)(v2 + 36);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v21 - v17;
  sub_255E0B4E8(v15, (uint64_t)v21 - v17);
  sub_255E69690(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, v11);
  if (v19 == 1)
  {
    v21[0] = v21;
    MEMORY[0x270FA5388](v19);
    sub_255EEE0F0();
    sub_255EEE230();
    (*(void (**)(char *, uint64_t))(v12 + 8))((char *)v21 - v14, v11);
    sub_255E696F8((uint64_t)v4);
    sub_255D7ED4C((uint64_t)v18);
  }
  else
  {
    sub_255E696F8((uint64_t)v4);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v21 - v14, v18, v11);
  }
  sub_255EEE260();
  (*(void (**)(char *, uint64_t))(v12 + 8))((char *)v21 - v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v23);
}

Swift::String_optional __swiftcall MedicalIDPregnancyViewModel.dueDateDescription()()
{
  uint64_t v1 = sub_255EEE100();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + *(int *)(type metadata accessor for MedicalIDPregnancyViewModel() + 20);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for MedicalIDData() + 56);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7 - 8);
  sub_255E0B4E8(v6, (uint64_t)&v16 - v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))((char *)&v16 - v8, 1, v1) == 1)
  {
    sub_255D7ED4C((uint64_t)&v16 - v8);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 32))(v4, (char *)&v16 - v8, v1);
    MEMORY[0x270FA5388](v11);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v16 - v8, v4, v1);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))((char *)&v16 - v8, 0, 1, v1);
    uint64_t v9 = sub_255E6CF70((uint64_t)&v16 - v8);
    uint64_t v10 = v12;
    sub_255D7ED4C((uint64_t)&v16 - v8);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v13 = v9;
  unint64_t v14 = v10;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

uint64_t sub_255E6CF70(uint64_t a1)
{
  uint64_t v2 = sub_255EEE100();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v15 - v7;
  sub_255E0B4E8(a1, (uint64_t)&v15 - v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_255D7ED4C((uint64_t)v8);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08788]), sel_init);
    type metadata accessor for MedicalIDPregnancyViewModel();
    uint64_t v11 = (void *)sub_255EEE1C0();
    objc_msgSend(v10, sel_setLocale_, v11);

    objc_msgSend(v10, sel_setDateStyle_, 2);
    uint64_t v12 = (void *)sub_255EEE0A0();
    id v13 = objc_msgSend(v10, sel_stringFromDate_, v12);

    uint64_t v9 = sub_255EEFD90();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v9;
}

void __swiftcall MedicalIDPregnancyViewModel.validationError(for:)(MedicalIDUI::BasicAlertModel *__return_ptr retstr, MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  uint64_t v39 = retstr;
  uint64_t v3 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v41 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v42 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *v2;
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  unint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v34 = v8;
  sub_255EEE1F0();
  uint64_t v10 = sub_255EEFDA0();
  uint64_t v37 = v11;
  uint64_t v38 = v10;
  v33[1] = v33;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = sub_255EEFCD0();
  if (v6)
  {
    unint64_t v35 = 0xD000000000000015;
    unint64_t v36 = 0x8000000255EF8CE0;
  }
  else
  {
    unint64_t v35 = 0xD000000000000013;
    unint64_t v36 = 0x8000000255EF8CC0;
  }
  MEMORY[0x270FA5388](v12);
  id v13 = v34;
  sub_255EEE1F0();
  uint64_t v14 = sub_255EEFDA0();
  id v34 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v16);
  id v17 = v13;
  sub_255EEE1F0();
  uint64_t v18 = sub_255EEFDA0();
  uint64_t v20 = v19;
  uint64_t v21 = v40;
  uint64_t v22 = (uint64_t)v42;
  uint64_t v23 = &v42[*(int *)(v40 + 24)];
  sub_255EEE4E0();
  uint64_t v24 = sub_255EEE4F0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  sub_255EEE130();
  uint64_t v25 = (uint64_t *)(v22 + *(int *)(v21 + 20));
  *uint64_t v25 = v18;
  v25[1] = v20;
  uint64_t v26 = (void *)(v22 + *(int *)(v21 + 28));
  sub_255E6E0D4(0, &qword_269F351D0, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8E0F8]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  unint64_t v27 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_255EF20B0;
  sub_255E6D900(v22, v28 + v27, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);
  uint64_t v29 = v39;
  uint64_t v30 = v37;
  v39->title._countAndFlagsBits = v38;
  v29->title._object = v30;
  id v31 = v34;
  v29->message.value._countAndFlagsBits = v14;
  v29->message.value._object = v31;
  unint64_t v32 = v35;
  v29->actions._rawValue = (void *)v28;
  v29->code.value._countAndFlagsBits = v32;
  v29->code.value._object = (void *)v36;
}

MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError_optional __swiftcall MedicalIDPregnancyViewModel.ValidationError.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_255EF0460();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t MedicalIDPregnancyViewModel.ValidationError.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_255E6D740(char *a1, char *a2)
{
  return sub_255D8B1A0(*a1, *a2);
}

uint64_t sub_255E6D74C()
{
  return sub_255EA41E4();
}

uint64_t sub_255E6D754()
{
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255E6D7C8()
{
  return sub_255EA48E4();
}

MedicalIDUI::MedicalIDPregnancyViewModel::ValidationError_optional sub_255E6D7D0(Swift::String *a1)
{
  return MedicalIDPregnancyViewModel.ValidationError.init(rawValue:)(*a1);
}

void sub_255E6D7DC(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000015;
  }
  else {
    unint64_t v2 = 0xD000000000000013;
  }
  unint64_t v3 = 0x8000000255EF8CC0;
  if (*v1) {
    unint64_t v3 = 0x8000000255EF8CE0;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_255E6D828(uint64_t a1, uint64_t a2)
{
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E6D8B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E6D900(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_255E6D96C()
{
  unint64_t result = qword_269F37978;
  if (!qword_269F37978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37978);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDPregnancyViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v26 = (uint64_t *)(v25 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a3[5];
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    unint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *uint64_t v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 16);
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = v11;
    v7[3] = v10;
    uint64_t v12 = *((void *)v8 + 5);
    v7[4] = *((void *)v8 + 4);
    v7[5] = v12;
    uint64_t v13 = *((void *)v8 + 7);
    v7[6] = *((void *)v8 + 6);
    v7[7] = v13;
    uint64_t v14 = *((void *)v8 + 9);
    v7[8] = *((void *)v8 + 8);
    v7[9] = v14;
    uint64_t v15 = *((void *)v8 + 11);
    v7[10] = *((void *)v8 + 10);
    v7[11] = v15;
    uint64_t v73 = (void *)*((void *)v8 + 12);
    uint64_t v78 = (void *)*((void *)v8 + 13);
    v7[12] = v73;
    v7[13] = v78;
    uint64_t v79 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v16 = v79[13];
    __dst = (char *)v7 + v16;
    uint64_t v72 = &v8[v16];
    uint64_t v17 = sub_255EEE100();
    uint64_t v74 = *(void *)(v17 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    uint64_t v19 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v20 = v73;
    id v21 = v78;
    uint64_t v22 = v19;
    if (v18(v72, 1, v19))
    {
      sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v72, *(void *)(*(void *)(v23 - 8) + 64));
      uint64_t v24 = v74;
    }
    else
    {
      uint64_t v24 = v74;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v72, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(__dst, 0, 1, v22);
    }
    uint64_t v27 = v79[14];
    uint64_t v28 = (char *)v7 + v27;
    uint64_t v29 = &v8[v27];
    if (v18(&v8[v27], 1, v22))
    {
      sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v22);
    }
    uint64_t v31 = v79[15];
    unint64_t v32 = (void *)((char *)v7 + v31);
    uint64_t v33 = &v8[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *unint64_t v32 = *(void *)v33;
    v32[1] = v34;
    uint64_t v35 = v79[16];
    unint64_t v36 = (void *)((char *)v7 + v35);
    uint64_t v37 = &v8[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *unint64_t v36 = *(void *)v37;
    v36[1] = v38;
    *((unsigned char *)v7 + v79[17]) = v8[v79[17]];
    *((unsigned char *)v7 + v79[18]) = v8[v79[18]];
    uint64_t v39 = v79[19];
    uint64_t v40 = (char *)v7 + v39;
    uint64_t v41 = (uint64_t *)&v8[v39];
    unint64_t v42 = *(void *)&v8[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v43 = v18;
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v44 = *v41;
      sub_255D80890(*v41, v42);
      *(void *)uint64_t v40 = v44;
      *((void *)v40 + 1) = v42;
    }
    uint64_t v26 = a1;
    uint64_t v45 = v79[20];
    uint64_t v46 = (char *)v7 + v45;
    uint64_t v47 = &v8[v45];
    uint64_t v48 = sub_255EEDF60();
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      sub_255E6E0D4(0, &qword_269F350B8, MEMORY[0x270FA8188], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    uint64_t v51 = v79[21];
    uint64_t v52 = *(void **)&v8[v51];
    *(void *)((char *)v7 + v51) = v52;
    uint64_t v53 = v79[22];
    uint64_t v54 = (char *)v7 + v53;
    char v55 = &v8[v53];
    id v56 = v52;
    if (v43(v55, 1, v22))
    {
      sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
      memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v54, v55, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v54, 0, 1, v22);
    }
    uint64_t v58 = a3[6];
    uint64_t v59 = (char *)a1 + v58;
    uint64_t v60 = (char *)a2 + v58;
    uint64_t v61 = sub_255EEE280();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
    uint64_t v62 = a3[7];
    uint64_t v63 = (char *)a1 + v62;
    uint64_t v64 = (char *)a2 + v62;
    uint64_t v65 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
    uint64_t v66 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v67 = (char *)a1 + v66;
    uint64_t v68 = (char *)a2 + v66;
    swift_retain();
    if (v43(v68, 1, v22))
    {
      sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
      memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v67, v68, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v67, 0, 1, v22);
    }
  }
  return v26;
}

void sub_255E6E0D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for MedicalIDPregnancyViewModel(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v23 = *(void *)(v7 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v6, v7);
  }
  uint64_t v9 = v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = v4 + v5[22];
  if (!v8(v15, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v15, v7);
  }
  uint64_t v16 = a1 + a2[6];
  uint64_t v17 = sub_255EEE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = a1 + a2[7];
  uint64_t v19 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_release();
  uint64_t v20 = a1 + a2[9];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v20, 1, v7);
  if (!result)
  {
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8);
    return v22(v20, v7);
  }
  return result;
}

void *initializeWithCopy for MedicalIDPregnancyViewModel(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a3[5];
  uint64_t v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = *(void *)((char *)a2 + v4 + 8);
  *uint64_t v5 = *(void *)((char *)a2 + v4);
  v5[1] = v7;
  uint64_t v9 = *(void *)((char *)a2 + v4 + 16);
  uint64_t v8 = *(void *)((char *)a2 + v4 + 24);
  void v5[2] = v9;
  v5[3] = v8;
  uint64_t v10 = *((void *)v6 + 5);
  v5[4] = *((void *)v6 + 4);
  v5[5] = v10;
  uint64_t v11 = *((void *)v6 + 7);
  v5[6] = *((void *)v6 + 6);
  v5[7] = v11;
  uint64_t v12 = *((void *)v6 + 9);
  v5[8] = *((void *)v6 + 8);
  v5[9] = v12;
  uint64_t v13 = *((void *)v6 + 11);
  v5[10] = *((void *)v6 + 10);
  v5[11] = v13;
  uint64_t v69 = (void *)*((void *)v6 + 12);
  uint64_t v74 = (void *)*((void *)v6 + 13);
  v5[12] = v69;
  v5[13] = v74;
  uint64_t v75 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v14 = v75[13];
  __dst = (char *)v5 + v14;
  uint64_t v68 = &v6[v14];
  uint64_t v15 = sub_255EEE100();
  uint64_t v70 = *(void *)(v15 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  uint64_t v17 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v69;
  id v19 = v74;
  uint64_t v20 = v17;
  if (v16(v68, 1, v17))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v68, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v70;
  }
  else
  {
    uint64_t v22 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(__dst, v68, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v20);
  }
  uint64_t v23 = v75[14];
  uint64_t v24 = (char *)v5 + v23;
  uint64_t v25 = &v6[v23];
  if (v16(&v6[v23], 1, v20))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v20);
  }
  uint64_t v27 = v75[15];
  uint64_t v28 = (void *)((char *)v5 + v27);
  uint64_t v29 = &v6[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *uint64_t v28 = *(void *)v29;
  v28[1] = v30;
  uint64_t v31 = v75[16];
  unint64_t v32 = (void *)((char *)v5 + v31);
  uint64_t v33 = &v6[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *unint64_t v32 = *(void *)v33;
  v32[1] = v34;
  *((unsigned char *)v5 + v75[17]) = v6[v75[17]];
  *((unsigned char *)v5 + v75[18]) = v6[v75[18]];
  uint64_t v35 = v75[19];
  unint64_t v36 = (char *)v5 + v35;
  uint64_t v37 = (uint64_t *)&v6[v35];
  unint64_t v38 = *(void *)&v6[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v39 = v16;
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v40 = *v37;
    sub_255D80890(*v37, v38);
    *(void *)unint64_t v36 = v40;
    *((void *)v36 + 1) = v38;
  }
  uint64_t v41 = v75[20];
  unint64_t v42 = (char *)v5 + v41;
  uint64_t v43 = &v6[v41];
  uint64_t v44 = sub_255EEDF60();
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    sub_255E6E0D4(0, &qword_269F350B8, MEMORY[0x270FA8188], MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  uint64_t v47 = v75[21];
  uint64_t v48 = *(void **)&v6[v47];
  *(void *)((char *)v5 + v47) = v48;
  uint64_t v49 = v75[22];
  uint64_t v50 = (char *)v5 + v49;
  uint64_t v51 = &v6[v49];
  id v52 = v48;
  if (v39(v51, 1, v20))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v50, v51, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v50, 0, 1, v20);
  }
  uint64_t v54 = a3[6];
  char v55 = (char *)a1 + v54;
  id v56 = (char *)a2 + v54;
  uint64_t v57 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
  uint64_t v58 = a3[7];
  uint64_t v59 = (char *)a1 + v58;
  uint64_t v60 = (char *)a2 + v58;
  uint64_t v61 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
  uint64_t v62 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v63 = (char *)a1 + v62;
  uint64_t v64 = (char *)a2 + v62;
  swift_retain();
  if (v39(v64, 1, v20))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v63, v64, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v63, 0, 1, v20);
  }
  return a1;
}

char *assignWithCopy for MedicalIDPregnancyViewModel(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = a3;
  char v82 = a2;
  uint64_t v6 = a3[5];
  uint64_t v83 = a1;
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (void *)((char *)a2 + v6);
  *(void *)uint64_t v7 = *v8;
  *((void *)v7 + 1) = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = v8[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 3) = v8[3];
  *((void *)v7 + 4) = v8[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 5) = v8[5];
  *((void *)v7 + 6) = v8[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 7) = v8[7];
  *((void *)v7 + 8) = v8[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = v8[9];
  *((void *)v7 + 10) = v8[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = v8[11];
  uint64_t v9 = (void *)*((void *)v7 + 12);
  uint64_t v10 = (void *)v8[12];
  *((void *)v7 + 12) = v10;
  id v11 = v10;

  uint64_t v12 = (void *)*((void *)v7 + 13);
  uint64_t v13 = (void *)v8[13];
  *((void *)v7 + 13) = v13;
  id v14 = v13;

  uint64_t v15 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v15[13];
  uint64_t v17 = &v7[v16];
  id v18 = (char *)v8 + v16;
  uint64_t v19 = sub_255EEE100();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  uint64_t v84 = v21;
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  uint64_t v25 = v15[14];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = (char *)v8 + v25;
  int v28 = v21(&v7[v25], 1, v19);
  int v29 = v21(v27, 1, v19);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v26, v27, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v26, v27, v19);
LABEL_13:
  uint64_t v31 = v15[15];
  unint64_t v32 = &v7[v31];
  uint64_t v33 = (void *)((char *)v8 + v31);
  *(void *)unint64_t v32 = *v33;
  *((void *)v32 + 1) = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = v15[16];
  uint64_t v35 = &v7[v34];
  unint64_t v36 = (void *)((char *)v8 + v34);
  *(void *)uint64_t v35 = *v36;
  *((void *)v35 + 1) = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v15[17]] = *((unsigned char *)v8 + v15[17]);
  v7[v15[18]] = *((unsigned char *)v8 + v15[18]);
  uint64_t v37 = v15[19];
  unint64_t v38 = (uint64_t *)&v7[v37];
  uint64_t v39 = (void *)((char *)v8 + v37);
  unint64_t v40 = *(void *)((char *)v8 + v37 + 8);
  uint64_t v80 = v20;
  if (*(void *)&v7[v37 + 8] >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      uint64_t v41 = *v39;
      sub_255D80890(*v39, v40);
      *unint64_t v38 = v41;
      v38[1] = v40;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v40 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v38);
LABEL_18:
    *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
    goto LABEL_20;
  }
  uint64_t v42 = *v39;
  sub_255D80890(*v39, v40);
  uint64_t v43 = *v38;
  unint64_t v44 = v38[1];
  *unint64_t v38 = v42;
  v38[1] = v40;
  sub_255D80D04(v43, v44);
LABEL_20:
  uint64_t v45 = v15[20];
  uint64_t v46 = &v7[v45];
  uint64_t v47 = (char *)v8 + v45;
  uint64_t v48 = sub_255EEDF60();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    uint64_t v53 = v80;
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v53 = v80;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_25:
    sub_255E6E0D4(0, &qword_269F350B8, MEMORY[0x270FA8188], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v46, v47, v48);
LABEL_26:
  uint64_t v55 = v15[21];
  id v56 = *(void **)&v7[v55];
  uint64_t v57 = *(void **)((char *)v8 + v55);
  *(void *)&v7[v55] = v57;
  id v58 = v57;

  uint64_t v59 = v15[22];
  uint64_t v60 = &v7[v59];
  uint64_t v61 = (char *)v8 + v59;
  int v62 = v84(&v7[v59], 1, v19);
  int v63 = v84(v61, 1, v19);
  if (v62)
  {
    uint64_t v64 = v83;
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v60, v61, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v60, 0, 1, v19);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v64 = v83;
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v19);
LABEL_31:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v60, v61, v19);
LABEL_32:
  uint64_t v66 = v81[6];
  uint64_t v67 = &v64[v66];
  uint64_t v68 = (char *)v82 + v66;
  uint64_t v69 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v81[7];
  unint64_t v71 = &v64[v70];
  uint64_t v72 = (char *)v82 + v70;
  uint64_t v73 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 24))(v71, v72, v73);
  *(void *)&v64[v81[8]] = *(void *)((char *)v82 + v81[8]);
  swift_retain();
  swift_release();
  uint64_t v74 = v81[9];
  uint64_t v75 = &v64[v74];
  uint64_t v76 = (char *)v82 + v74;
  LODWORD(v71) = v84(&v64[v74], 1, v19);
  int v77 = v84(v76, 1, v19);
  if (!v71)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v75, v76, v19);
      return v64;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v75, v19);
    goto LABEL_37;
  }
  if (v77)
  {
LABEL_37:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v75, v76, *(void *)(*(void *)(v78 - 8) + 64));
    return v64;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v75, v76, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v75, 0, 1, v19);
  return v64;
}

_OWORD *initializeWithTake for MedicalIDPregnancyViewModel(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)((char *)a2 + v5);
  *((void *)v6 + 2) = *(void *)((char *)a2 + v5 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)((char *)a2 + v5 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)((char *)a2 + v5 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)a2 + v5 + 72);
  *((void *)v6 + 11) = *(void *)((char *)a2 + v5 + 88);
  *((_OWORD *)v6 + 6) = *(_OWORD *)((char *)a2 + v5 + 96);
  uint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  uint64_t v10 = &v6[v9];
  id v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v45(v11, 1, v12))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  unint64_t v44 = a1;
  uint64_t v42 = v13;
  if (v45(&v7[v15], 1, v12))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  uint64_t v20 = &v6[v19];
  uint64_t v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255E6E0D4(0, &qword_269F350B8, MEMORY[0x270FA8188], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v45(&v7[v25], 1, v12))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = a3[6];
  uint64_t v30 = (char *)v44 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = a3[7];
  uint64_t v34 = (char *)v44 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
  uint64_t v37 = a3[9];
  *(void *)((char *)v44 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  unint64_t v38 = (char *)v44 + v37;
  uint64_t v39 = (char *)a2 + v37;
  if (v45(v39, 1, v12))
  {
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v39, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v12);
  }
  return v44;
}

char *assignWithTake for MedicalIDPregnancyViewModel(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v85 = a3;
  uint64_t v86 = a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *(void *)uint64_t v8 = *v9;
  *((void *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((void *)v8 + 2) = v9[2];
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[4];
  *((void *)v8 + 3) = v9[3];
  *((void *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[6];
  *((void *)v8 + 5) = v9[5];
  *((void *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[8];
  *((void *)v8 + 7) = v9[7];
  *((void *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = v9[10];
  *((void *)v8 + 9) = v9[9];
  *((void *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)*((void *)v8 + 12);
  uint64_t v16 = v9[12];
  *((void *)v8 + 11) = v9[11];
  *((void *)v8 + 12) = v16;

  uint64_t v17 = (void *)*((void *)v8 + 13);
  *((void *)v8 + 13) = v9[13];

  unint64_t v88 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v88[13];
  uint64_t v19 = &v8[v18];
  uint64_t v20 = (char *)v9 + v18;
  uint64_t v21 = sub_255EEE100();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v27 = v88[14];
  uint64_t v28 = &v8[v27];
  uint64_t v29 = (char *)v9 + v27;
  int v30 = v23(&v8[v27], 1, v21);
  int v31 = v23(v29, 1, v21);
  uint64_t v87 = a1;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  uint64_t v33 = v88[15];
  uint64_t v34 = &v8[v33];
  uint64_t v35 = (void *)((char *)v9 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v88[16];
  uint64_t v39 = &v8[v38];
  uint64_t v40 = (void *)((char *)v9 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v8[v88[17]] = *((unsigned char *)v9 + v88[17]);
  v8[v88[18]] = *((unsigned char *)v9 + v88[18]);
  uint64_t v43 = v88[19];
  uint64_t v44 = (uint64_t)&v8[v43];
  uint64_t v45 = (char *)v9 + v43;
  unint64_t v46 = *(void *)&v8[v43 + 8];
  uint64_t v84 = v22;
  uint64_t v83 = v23;
  if (v46 >> 60 == 15)
  {
    uint64_t v47 = v21;
LABEL_17:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_19;
  }
  unint64_t v48 = *((void *)v45 + 1);
  uint64_t v47 = v21;
  if (v48 >> 60 == 15)
  {
    sub_255D81EF8(v44);
    goto LABEL_17;
  }
  uint64_t v49 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v48;
  sub_255D80D04(v49, v46);
LABEL_19:
  uint64_t v50 = v88[20];
  int v51 = &v8[v50];
  int v52 = (char *)v9 + v50;
  uint64_t v53 = sub_255EEDF60();
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  uint64_t v58 = v47;
  if (v56)
  {
    uint64_t v59 = v83;
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v59 = v83;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
LABEL_24:
    sub_255E6E0D4(0, &qword_269F350B8, MEMORY[0x270FA8188], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v51, v52, v53);
LABEL_25:
  uint64_t v61 = v88[21];
  int v62 = *(void **)&v8[v61];
  *(void *)&v8[v61] = *(void *)((char *)v9 + v61);

  uint64_t v63 = v88[22];
  uint64_t v64 = &v8[v63];
  uint64_t v65 = (char *)v9 + v63;
  int v66 = v59(&v8[v63], 1, v58);
  int v67 = v59(v65, 1, v58);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v64, v65, v58);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v64, 0, 1, v58);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v58);
LABEL_30:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v84 + 40))(v64, v65, v58);
LABEL_31:
  uint64_t v69 = v85[6];
  uint64_t v70 = &v87[v69];
  unint64_t v71 = (char *)v86 + v69;
  uint64_t v72 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 40))(v70, v71, v72);
  uint64_t v73 = v85[7];
  uint64_t v74 = &v87[v73];
  uint64_t v75 = (char *)v86 + v73;
  uint64_t v76 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 40))(v74, v75, v76);
  *(void *)&v87[v85[8]] = *(void *)((char *)v86 + v85[8]);
  swift_release();
  uint64_t v77 = v85[9];
  uint64_t v78 = &v87[v77];
  uint64_t v79 = (char *)v86 + v77;
  LODWORD(v74) = v59(&v87[v77], 1, v58);
  int v80 = v59(v79, 1, v58);
  if (!v74)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 40))(v78, v79, v58);
      return v87;
    }
    (*(void (**)(char *, uint64_t))(v84 + 8))(v78, v58);
    goto LABEL_36;
  }
  if (v80)
  {
LABEL_36:
    sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
    memcpy(v78, v79, *(void *)(*(void *)(v81 - 8) + 64));
    return v87;
  }
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v78, v79, v58);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v78, 0, 1, v58);
  return v87;
}

uint64_t getEnumTagSinglePayload for MedicalIDPregnancyViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E70378);
}

uint64_t sub_255E70378(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for MedicalIDData();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_255EEE280();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_11;
  }
  uint64_t v13 = sub_255EEE200();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[9];
  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for MedicalIDPregnancyViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E70574);
}

uint64_t sub_255E70574(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for MedicalIDData();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_255EEE280();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  uint64_t v13 = sub_255EEE200();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  sub_255E6E0D4(0, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[9];
  return v16(v18, a2, a2, v17);
}

void sub_255E7075C()
{
  type metadata accessor for MedicalIDData();
  if (v0 <= 0x3F)
  {
    sub_255EEE280();
    if (v1 <= 0x3F)
    {
      sub_255EEE200();
      if (v2 <= 0x3F)
      {
        sub_255E6E0D4(319, &qword_269F35058, MEMORY[0x270FA9178], MEMORY[0x263F8D8F0]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for MedicalIDPregnancyViewModel.ValidationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E709A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDPregnancyViewModel.ValidationError()
{
  return &type metadata for MedicalIDPregnancyViewModel.ValidationError;
}

uint64_t _s11MedicalIDUI0A18IDValidationResultO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v15 = a2[6];
  if (!v3)
  {
    if (!v10)
    {
      sub_255E092A8(*a1, 0);
      sub_255E092A8(v9, 0);
      char v16 = 1;
      return v16 & 1;
    }
    goto LABEL_5;
  }
  if (!v10)
  {
LABEL_5:
    sub_255E09390(*a2, a2[1]);
    sub_255E09390(v2, v3);
    sub_255E092A8(v2, v3);
    sub_255E092A8(v9, v10);
    char v16 = 0;
    return v16 & 1;
  }
  v20[0] = *a1;
  v20[1] = v3;
  void v20[2] = v5;
  v20[3] = v4;
  v20[4] = v6;
  v20[5] = v7;
  v20[6] = v8;
  v19[0] = v9;
  v19[1] = v10;
  void v19[2] = v12;
  v19[3] = v11;
  v19[4] = v14;
  v19[5] = v13;
  v19[6] = v15;
  sub_255E09390(v9, v10);
  sub_255E09390(v2, v3);
  sub_255E09390(v9, v10);
  sub_255E09390(v2, v3);
  char v18 = _s11MedicalIDUI15BasicAlertModelV2eeoiySbAC_ACtFZ_0(v20, v19);
  sub_255E092A8(v2, v3);
  sub_255E092A8(v9, v10);
  sub_255E092A8(v9, v10);
  sub_255E092A8(v2, v3);
  char v16 = v18;
  return v16 & 1;
}

unint64_t destroy for MedicalIDValidationResult(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MedicalIDValidationResult(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for MedicalIDValidationResult(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)a2;
    long long v6 = *((_OWORD *)a2 + 1);
    long long v7 = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
    *((_OWORD *)a1 + 1) = v6;
    *((_OWORD *)a1 + 2) = v7;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicalIDValidationResult(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDValidationResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MedicalIDValidationResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_255E7106C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_255E71084(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDValidationResult()
{
  return &type metadata for MedicalIDValidationResult;
}

id sub_255E710C4()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82808]), sel_init);
  sub_255E724F8();
  sub_255EEF130();
  objc_msgSend(v1, sel_setDelegate_, v4);

  objc_msgSend(v1, sel_setAllowsEditing_, 1);
  uint64_t v2 = *(void *)(v0 + *(int *)(type metadata accessor for ImagePickerView(0) + 20));
  objc_msgSend(v1, sel_setSourceType_, v2);
  if (v2 == 1) {
    objc_msgSend(v1, sel_setCameraDevice_, 1);
  }
  return v1;
}

uint64_t sub_255E71394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[3] = a5;
  sub_255EEE910();
  v5[4] = swift_task_alloc();
  sub_255DAD8AC(0);
  v5[5] = v6;
  v5[6] = swift_task_alloc();
  sub_255EEFF70();
  v5[7] = sub_255EEFF60();
  uint64_t v8 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255E71488, v8, v7);
}

uint64_t sub_255E71488()
{
  uint64_t v1 = v0[2];
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor + 24);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor), v2);
  if (qword_269F34BF8 != -1) {
    swift_once();
  }
  uint64_t v4 = (*(uint64_t (**)(void, void *, uint64_t, uint64_t, double, double))(v3 + 8))(v0[3], v0 + 8, v2, v3, *(double *)&xmmword_269F37990, *((double *)&xmmword_269F37990 + 1));
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v0[2] + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_parent;
    uint64_t v7 = type metadata accessor for ImagePickerView(0);
    (*(void (**)(void *))(v6 + *(int *)(v7 + 24)))(v5);
  }
  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  sub_255DAB038(v8);
  MEMORY[0x25A29B390](v9);
  sub_255EEE900();
  sub_255EEF980();
  sub_255E72B74(v8, (uint64_t (*)(void))sub_255DAD8AC);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_255E716CC()
{
  return type metadata accessor for ImagePickerView.Coordinator(0);
}

uint64_t type metadata accessor for ImagePickerView.Coordinator(uint64_t a1)
{
  return sub_255DB0714(a1, qword_269F37A78);
}

uint64_t sub_255E716F4()
{
  uint64_t result = type metadata accessor for ImagePickerView(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ImagePickerView(uint64_t a1)
{
  return sub_255DB0714(a1, qword_269F37AA8);
}

uint64_t *sub_255E717AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_255E71924(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      sub_255DAD8AC(0);
      uint64_t v9 = *(int *)(v8 + 32);
      uint64_t v19 = (char *)a1 + v9;
      uint64_t v10 = (char *)a2 + v9;
      uint64_t v11 = sub_255EEE910();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_retain();
      swift_retain();
      v12(v19, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    char v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
  }
  swift_retain();
  return a1;
}

void sub_255E71924(uint64_t a1)
{
}

uint64_t sub_255E71958(uint64_t a1)
{
  sub_255E71924(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    sub_255DAD8AC(0);
    uint64_t v4 = a1 + *(int *)(v3 + 32);
    uint64_t v5 = sub_255EEE910();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  return swift_release();
}

void *sub_255E71A18(void *a1, void *a2, uint64_t a3)
{
  sub_255E71924(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    sub_255DAD8AC(0);
    uint64_t v8 = *(int *)(v7 + 32);
    uint64_t v17 = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = sub_255EEE910();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v17, v9, v10);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain();
  return a1;
}

void *sub_255E71B44(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_255E72B74((uint64_t)a1, (uint64_t (*)(void))sub_255E71924);
    sub_255E71924(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      sub_255DAD8AC(0);
      uint64_t v8 = *(int *)(v7 + 32);
      uint64_t v17 = (char *)a1 + v8;
      uint64_t v9 = (char *)a2 + v8;
      uint64_t v10 = sub_255EEE910();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_retain();
      swift_retain();
      v11(v17, v9, v10);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_255E71CA4(void *a1, void *a2, uint64_t a3)
{
  sub_255E71924(0);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    sub_255DAD8AC(0);
    uint64_t v10 = *(int *)(v9 + 32);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_255EEE910();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v14 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  return a1;
}

void *sub_255E71DA0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_255E72B74((uint64_t)a1, (uint64_t (*)(void))sub_255E71924);
    sub_255E71924(0);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      sub_255DAD8AC(0);
      uint64_t v10 = *(int *)(v9 + 32);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = sub_255EEE910();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v14 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  swift_release();
  return a1;
}

uint64_t sub_255E71ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E71EE0);
}

uint64_t sub_255E71EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255E72B10(0, (unint64_t *)&unk_269F37A98, (uint64_t (*)(uint64_t))sub_255DAD8AC, MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E71FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E71FE4);
}

void sub_255E71FE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_255E72B10(0, (unint64_t *)&unk_269F37A98, (uint64_t (*)(uint64_t))sub_255DAD8AC, MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
}

void sub_255E720D0()
{
  sub_255E71924(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255E72178()
{
  return sub_255E7244C(&qword_269F36788, (void (*)(uint64_t))type metadata accessor for ImagePickerView);
}

uint64_t sub_255E721C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x270FA5388](a1 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E72494(v2, (uint64_t)v5);
  uint64_t v13 = &type metadata for UIImageProcessor;
  uint64_t v14 = &protocol witness table for UIImageProcessor;
  uint64_t v6 = (objc_class *)type metadata accessor for ImagePickerView.Coordinator(0);
  id v7 = objc_allocWithZone(v6);
  sub_255E72494((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_parent);
  sub_255D89DC8((uint64_t)v12, (uint64_t)v7 + OBJC_IVAR____TtCV11MedicalIDUI15ImagePickerView11Coordinator_imageProcessor);
  v11.receiver = v7;
  v11.super_class = v6;
  id v8 = objc_msgSendSuper2(&v11, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t result = sub_255E72B74((uint64_t)v5, type metadata accessor for ImagePickerView);
  *a2 = v8;
  return result;
}

uint64_t sub_255E722CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255E7244C(&qword_269F37AC0, (void (*)(uint64_t))type metadata accessor for ImagePickerView);
  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t sub_255E72360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_255E7244C(&qword_269F37AC0, (void (*)(uint64_t))type metadata accessor for ImagePickerView);
  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void sub_255E723F4()
{
}

uint64_t sub_255E7244C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E72494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImagePickerView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_255E724F8()
{
  if (!qword_269F37AC8)
  {
    type metadata accessor for ImagePickerView(255);
    sub_255E7244C(&qword_269F37AC0, (void (*)(uint64_t))type metadata accessor for ImagePickerView);
    unint64_t v0 = sub_255EEF140();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37AC8);
    }
  }
}

int64x2_t sub_255E7258C()
{
  int64x2_t result = vdupq_n_s64(0x4069000000000000uLL);
  xmmword_269F37990 = (__int128)result;
  return result;
}

unint64_t sub_255E725A4(uint64_t a1, uint64_t a2)
{
  sub_255EF0540();
  sub_255EEFDE0();
  uint64_t v4 = sub_255EF0580();
  return sub_255E726B0(a1, a2, v4);
}

unint64_t sub_255E72620(uint64_t a1)
{
  sub_255EEFD90();
  sub_255EF0540();
  sub_255EEFDE0();
  uint64_t v2 = sub_255EF0580();
  swift_bridgeObjectRelease();
  return sub_255E72794(a1, v2);
}

unint64_t sub_255E726B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_255EF04A0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_255EF04A0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_255E72794(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_255EEFD90();
    uint64_t v8 = v7;
    if (v6 == sub_255EEFD90() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_255EF04A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_255EEFD90();
          uint64_t v15 = v14;
          if (v13 == sub_255EEFD90() && v15 == v16) {
            break;
          }
          char v18 = sub_255EF04A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_255E7290C(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_255E72B10(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v18 - v5;
  if (!*(void *)(a1 + 16))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    return sub_255E72B74((uint64_t)&v19, (uint64_t (*)(void))sub_255E72BD4);
  }
  id v7 = (id)*MEMORY[0x263F83670];
  unint64_t v8 = sub_255E72620((uint64_t)v7);
  if ((v9 & 1) == 0)
  {
    long long v19 = 0u;
    long long v20 = 0u;

    return sub_255E72B74((uint64_t)&v19, (uint64_t (*)(void))sub_255E72BD4);
  }
  sub_255DB2C70(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v19);

  if (!*((void *)&v20 + 1)) {
    return sub_255E72B74((uint64_t)&v19, (uint64_t (*)(void))sub_255E72BD4);
  }
  sub_255E72C30();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    char v11 = (void *)v18[1];
    uint64_t v12 = sub_255EEFFA0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
    sub_255EEFF70();
    id v13 = v2;
    id v14 = v11;
    uint64_t v15 = sub_255EEFF60();
    uint64_t v16 = (void *)swift_allocObject();
    uint64_t v17 = MEMORY[0x263F8F500];
    v16[2] = v15;
    v16[3] = v17;
    void v16[4] = v13;
    v16[5] = v14;
    sub_255E09D10((uint64_t)v6, (uint64_t)&unk_269F37AE8, (uint64_t)v16);

    return swift_release();
  }
  return result;
}

void sub_255E72B10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E72B74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255E72BD4()
{
  if (!qword_269F37AD0)
  {
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37AD0);
    }
  }
}

unint64_t sub_255E72C30()
{
  unint64_t result = qword_269F37AD8;
  if (!qword_269F37AD8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_269F37AD8);
  }
  return result;
}

uint64_t sub_255E72C70()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_255E72CB8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_255D7E778;
  return sub_255E71394(a1, v4, v5, v7, v6);
}

uint64_t *SuggestedEmergencyContactFetcher.__allocating_init(contactAuthorizationChecker:suggestedContactFetcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)swift_allocObject();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = sub_255E74434((uint64_t)v9, (uint64_t)v15, v4, v6, v11, v5, v12);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t SuggestedEmergencyContactFetcher.fetch(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6) & 1) == 0) {
    return a1(0);
  }
  uint64_t v8 = v2[10];
  uint64_t v7 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v8);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 8);
  swift_retain();
  v10(sub_255E7457C, v9, v8, v7);
  return swift_release();
}

uint64_t SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *SuggestedEmergencyContactFetcher.init(contactAuthorizationChecker:suggestedContactFetcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  char v18 = sub_255E74434((uint64_t)v10, (uint64_t)v16, v3, v7, v12, v6, v13);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v18;
}

uint64_t sub_255E7322C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.init()()
{
  return v0;
}

BOOL sub_255E7325C()
{
  id v0 = objc_msgSend(self, sel_authorizationStatusForEntityType_, 0);
  if (v0 != (id)3)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v1 = sub_255EEE3D0();
    __swift_project_value_buffer(v1, (uint64_t)qword_269F3FE80);
    uint64_t v2 = sub_255EEE3B0();
    os_log_type_t v3 = sub_255EF00C0();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v9 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      uint64_t v6 = sub_255EF05E0();
      sub_255DB0024(v6, v7, &v9);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v2, v3, "%s MedicalID is unauthorized for fetching contacts and cannot get family circle contacts", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v5, -1, -1);
      MEMORY[0x25A29C8A0](v4, -1, -1);
    }
  }
  return v0 == (id)3;
}

uint64_t SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.deinit()
{
  return v0;
}

BOOL sub_255E73438()
{
  return sub_255E7325C();
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.init()()
{
  return v0;
}

void sub_255E73468(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F3BF48]), sel_init);
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v5;
  v9[4] = sub_255E745DC;
  v9[5] = v7;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = sub_255E3B244;
  v9[3] = &block_descriptor_5;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_startRequestWithCompletionHandler_, v8);
  _Block_release(v8);
}

uint64_t sub_255E73594(void *a1, id a2, void (*a3)(void *))
{
  unint64_t v4 = 0x269F34000uLL;
  if (!a2)
  {
LABEL_5:
    if (a1) {
      goto LABEL_6;
    }
LABEL_30:
    if (*(void *)(v4 + 3152) != -1) {
      swift_once();
    }
    uint64_t v48 = sub_255EEE3D0();
    __swift_project_value_buffer(v48, (uint64_t)qword_269F3FE80);
    uint64_t v49 = sub_255EEE3B0();
    os_log_type_t v50 = sub_255EF00E0();
    if (os_log_type_enabled(v49, v50))
    {
      int v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v63 = (void *)v52;
      *(_DWORD *)int v51 = 136315138;
      uint64_t v53 = sub_255EF05E0();
      sub_255DB0024(v53, v54, (uint64_t *)&v63);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v49, v50, "%s there was no familyCircle fetched", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v52, -1, -1);
      MEMORY[0x25A29C8A0](v51, -1, -1);
    }

    uint64_t v55 = 0;
    goto LABEL_41;
  }
  uint64_t v5 = (uint64_t)a2;
  id v6 = a2;
  if (qword_269F34C50 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v7 = sub_255EEE3D0();
  __swift_project_value_buffer(v7, (uint64_t)qword_269F3FE80);
  id v8 = (id)v5;
  id v9 = (id)v5;
  uint64_t v10 = sub_255EEE3B0();
  os_log_type_t v11 = sub_255EF00C0();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v63 = (void *)v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v14 = sub_255EF05E0();
    sub_255DB0024(v14, v15, (uint64_t *)&v63);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v16 = sub_255EF04E0();
    sub_255DB0024(v16, v17, (uint64_t *)&v63);
    unint64_t v4 = 0x269F34000;
    sub_255EF0200();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_255D76000, v10, v11, "%s Failed to fetch family circle with error %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v13, -1, -1);
    MEMORY[0x25A29C8A0](v12, -1, -1);

    goto LABEL_5;
  }

  if (!a1) {
    goto LABEL_30;
  }
LABEL_6:
  id v18 = a1;
  uint64_t v19 = (void *)sub_255E88D1C(MEMORY[0x263F8EE78]);
  uint64_t v58 = v18;
  id v20 = objc_msgSend(v18, sel_members);
  sub_255D7ED10(0, &qword_269F37AF0);
  unint64_t v21 = sub_255EEFEA0();

  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_255EF03F0();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v22)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    uint64_t v56 = swift_bridgeObjectRetain();
    uint64_t v55 = sub_255E73E7C(v56);

    swift_bridgeObjectRelease_n();
LABEL_41:
    a3(v55);
    return swift_bridgeObjectRelease();
  }
LABEL_8:
  unint64_t v23 = v21 & 0xC000000000000001;
  uint64_t v5 = 4;
  int v24 = &off_2653EE000;
  uint64_t v61 = v22;
  unint64_t v62 = v21;
  unint64_t v60 = v21 & 0xC000000000000001;
  while (1)
  {
    unint64_t v4 = v5 - 4;
    if (v23) {
      id v25 = (id)MEMORY[0x25A29BD10](v5 - 4, v21);
    }
    else {
      id v25 = *(id *)(v21 + 8 * v5);
    }
    uint64_t v26 = v25;
    a1 = (void *)(v5 - 3);
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (([v25 (SEL)v24[379]] & 1) == 0)
    {
      id v27 = objc_msgSend(v26, sel_contact);
      if (v27) {
        break;
      }
    }

LABEL_10:
    ++v5;
    if (a1 == (void *)v22) {
      goto LABEL_40;
    }
  }
  uint64_t v28 = v27;
  id v29 = objc_msgSend(v27, sel_identifier);
  uint64_t v30 = sub_255EEFD90();
  uint64_t v32 = v31;

  id v33 = v28;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v63 = v19;
  unint64_t v4 = sub_255E725A4(v30, v32);
  uint64_t v36 = v19[2];
  BOOL v37 = (v35 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37)) {
    goto LABEL_36;
  }
  char v39 = v35;
  if (v19[3] >= v38)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v19 = v63;
      if (v35) {
        goto LABEL_24;
      }
    }
    else
    {
      sub_255E74284();
      uint64_t v19 = v63;
      if (v39) {
        goto LABEL_24;
      }
    }
LABEL_26:
    v19[(v4 >> 6) + 8] |= 1 << v4;
    uint64_t v44 = (uint64_t *)(v19[6] + 16 * v4);
    uint64_t *v44 = v30;
    v44[1] = v32;
    *(void *)(v19[7] + 8 * v4) = v33;
    uint64_t v45 = v19[2];
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v47 = v45 + 1;
    if (v46) {
      goto LABEL_37;
    }
    void v19[2] = v47;
    swift_bridgeObjectRetain();
    goto LABEL_28;
  }
  sub_255E73F78(v38, isUniquelyReferenced_nonNull_native);
  unint64_t v40 = sub_255E725A4(v30, v32);
  if ((v39 & 1) == (v41 & 1))
  {
    unint64_t v4 = v40;
    uint64_t v19 = v63;
    if ((v39 & 1) == 0) {
      goto LABEL_26;
    }
LABEL_24:
    uint64_t v42 = v19[7];
    uint64_t v43 = 8 * v4;

    *(void *)(v42 + v43) = v33;
LABEL_28:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v61;
    unint64_t v21 = v62;
    unint64_t v23 = v60;
    int v24 = &off_2653EE000;
    goto LABEL_10;
  }
  uint64_t result = sub_255EF04D0();
  __break(1u);
  return result;
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.deinit()
{
  return v0;
}

uint64_t SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_255E73C0C(uint64_t a1, uint64_t a2)
{
}

uint64_t SuggestedEmergencyContactFetcher.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t SuggestedEmergencyContactFetcher.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t sub_255E73C98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_255DB2CCC(0, &qword_269F36338);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 + 95;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * (v5 >> 7);
  id v6 = sub_255E747D8(&v8, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_255E74E44();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_255E73D8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_255E74E4C();
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 136);
  uint64_t v5 = sub_255E74A04(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_255E74E44();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

void *sub_255E73E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_255DB2CCC(0, (unint64_t *)&qword_269F37DE0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  id v6 = sub_255E74C48(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_255E74E44();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_255E73F78(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_255E74760();
  char v38 = a2;
  uint64_t v6 = sub_255EF0410();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    id v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_255EF0540();
    sub_255EEFDE0();
    uint64_t result = sub_255EF0580();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *id v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

id sub_255E74284()
{
  uint64_t v1 = v0;
  sub_255E74760();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_255EF0400();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t *sub_255E74434(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  a3[5] = a4;
  a3[6] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  a3[10] = a5;
  a3[11] = a7;
  unint64_t v14 = __swift_allocate_boxed_opaque_existential_1(a3 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v14, a2, a5);
  return a3;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_255E74544()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E7457C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_255E745A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E745DC(void *a1, void *a2)
{
  return sub_255E73594(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t dispatch thunk of ContactAuthorizationChecker.isContactsAuthorized()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ContactRequestFetcher.fetchContacts(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for SuggestedEmergencyContactFetcher()
{
  return self;
}

uint64_t method lookup function for SuggestedEmergencyContactFetcher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SuggestedEmergencyContactFetcher);
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.__allocating_init(contactAuthorizationChecker:suggestedContactFetcher:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker()
{
  return self;
}

uint64_t method lookup function for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker);
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.CNContactStoreAuthorizationChecker.isContactsAuthorized()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t type metadata accessor for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest()
{
  return self;
}

uint64_t method lookup function for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest);
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SuggestedEmergencyContactFetcher.FamilyCircleFetchRequest.fetchContacts(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

void sub_255E74760()
{
  if (!qword_269F37AF8)
  {
    sub_255D7ED10(255, &qword_269F37DB0);
    unint64_t v0 = sub_255EF0430();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37AF8);
    }
  }
}

void *sub_255E747D8(void *result, char *__dst, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!__dst)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = __dst;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (long long *)(*(void *)(a4 + 48) + (v16 << 7));
    long long v21 = v20[3];
    long long v23 = *v20;
    long long v22 = v20[1];
    v27[2] = v20[2];
    v27[3] = v21;
    v27[0] = v23;
    v27[1] = v22;
    long long v24 = v20[7];
    long long v26 = v20[4];
    long long v25 = v20[5];
    v27[6] = v20[6];
    v27[7] = v24;
    v27[4] = v26;
    v27[5] = v25;
    memmove(v11, v20, 0x80uLL);
    if (v13 == v10)
    {
      sub_255DCB308((uint64_t)v27);
      goto LABEL_38;
    }
    v11 += 128;
    uint64_t result = (void *)sub_255DCB308((uint64_t)v27);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_255E74A04(void *result, char *__dst, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!__dst)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = __dst;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v27 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (_OWORD *)(*(void *)(a4 + 48) + 136 * v16);
    v28[0] = *v20;
    long long v21 = v20[4];
    long long v23 = v20[1];
    long long v22 = v20[2];
    v28[3] = v20[3];
    v28[4] = v21;
    v28[1] = v23;
    void v28[2] = v22;
    long long v25 = v20[6];
    long long v24 = v20[7];
    long long v26 = v20[5];
    uint64_t v29 = *((void *)v20 + 16);
    v28[6] = v25;
    v28[7] = v24;
    v28[5] = v26;
    memmove(v11, v20, 0x88uLL);
    if (v13 == v10)
    {
      sub_255DCB308((uint64_t)v28);
      goto LABEL_38;
    }
    v11 += 136;
    uint64_t result = (void *)sub_255DCB308((uint64_t)v28);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_255E74C48(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_255E74E44()
{
  return swift_release();
}

void sub_255E74E4C()
{
  if (!qword_269F36340)
  {
    sub_255DFD10C();
    unint64_t v0 = sub_255EF0490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F36340);
    }
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t MedicalIDSpokenLanguagePickerView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v2 = sub_255EEEE50();
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E75438();
  uint64_t v38 = v5;
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = v1[1];
  long long v50 = *v1;
  *(_OWORD *)int v51 = v8;
  *(_OWORD *)&v51[16] = v1[2];
  uint64_t v52 = *((void *)v1 + 6);
  uint64_t v43 = &v50;
  sub_255E756BC();
  uint64_t v37 = v9;
  sub_255E75918();
  uint64_t v11 = v10;
  sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
  uint64_t v13 = v12;
  sub_255E75AD0();
  uint64_t v15 = v14;
  sub_255E75C3C();
  uint64_t v17 = v16;
  sub_255E75D78();
  uint64_t v19 = v18;
  sub_255DDDE9C();
  uint64_t v21 = v20;
  uint64_t v22 = sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
  sub_255DDDF50();
  uint64_t v24 = v23;
  uint64_t v25 = sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
  uint64_t v46 = v24;
  uint64_t v47 = v25;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v46 = v19;
  uint64_t v47 = v21;
  uint64_t v48 = v22;
  unint64_t v49 = OpaqueTypeConformance2;
  uint64_t v27 = swift_getOpaqueTypeConformance2();
  uint64_t v46 = v17;
  uint64_t v47 = v27;
  uint64_t v28 = swift_getOpaqueTypeConformance2();
  unint64_t v29 = sub_255DAD520();
  uint64_t v46 = v15;
  uint64_t v47 = MEMORY[0x263F8D310];
  uint64_t v48 = v28;
  unint64_t v49 = v29;
  uint64_t v30 = swift_getOpaqueTypeConformance2();
  uint64_t v31 = sub_255E77134(&qword_269F37CA0, (void (*)(void))sub_255DFF53C);
  uint64_t v46 = v11;
  uint64_t v47 = v13;
  uint64_t v48 = v30;
  unint64_t v49 = v31;
  swift_getOpaqueTypeConformance2();
  sub_255EEE880();
  long long v44 = *(_OWORD *)&v51[8];
  sub_255E76BF0(0, &qword_269F37CA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  uint64_t v34 = v48;
  swift_getKeyPath();
  *(void *)&long long v44 = v32;
  *((void *)&v44 + 1) = v33;
  uint64_t v45 = v34;
  sub_255E76BF0(0, &qword_269F37CB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B750]);
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_255EEEE40();
  sub_255E7A1BC(&qword_269F37CB8, (void (*)(uint64_t))sub_255E75438);
  uint64_t v35 = v38;
  sub_255EEF410();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v4, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v35);
}

void sub_255E75438()
{
  if (!qword_269F37B00)
  {
    sub_255EEE810();
    sub_255E756BC();
    sub_255E75918();
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    sub_255E75AD0();
    sub_255E75C3C();
    sub_255E75D78();
    sub_255DDDE9C();
    sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
    sub_255DDDF50();
    sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255DAD520();
    swift_getOpaqueTypeConformance2();
    sub_255E77134(&qword_269F37CA0, (void (*)(void))sub_255DFF53C);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = sub_255EEE890();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37B00);
    }
  }
}

void sub_255E756BC()
{
  if (!qword_269F37B08)
  {
    sub_255E75918();
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    sub_255E75AD0();
    sub_255E75C3C();
    sub_255E75D78();
    sub_255DDDE9C();
    sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
    sub_255DDDF50();
    sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255DAD520();
    swift_getOpaqueTypeConformance2();
    sub_255E77134(&qword_269F37CA0, (void (*)(void))sub_255DFF53C);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37B08);
    }
  }
}

void sub_255E75918()
{
  if (!qword_269F37B10)
  {
    sub_255E75AD0();
    sub_255E75C3C();
    sub_255E75D78();
    sub_255DDDE9C();
    sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
    sub_255DDDF50();
    sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_255DAD520();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37B10);
    }
  }
}

void sub_255E75AD0()
{
  if (!qword_269F37B18)
  {
    sub_255E75C3C();
    sub_255E75D78();
    sub_255DDDE9C();
    sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
    sub_255DDDF50();
    sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37B18);
    }
  }
}

void sub_255E75C3C()
{
  if (!qword_269F37B20)
  {
    sub_255E75D78();
    sub_255DDDE9C();
    sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
    sub_255DDDF50();
    sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37B20);
    }
  }
}

void sub_255E75D78()
{
  if (!qword_269F37B28)
  {
    sub_255E76BF0(255, &qword_269F37B30, (uint64_t (*)(uint64_t))sub_255E75E28, MEMORY[0x263F1BAC8]);
    sub_255E770AC();
    unint64_t v0 = sub_255EEF330();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37B28);
    }
  }
}

void sub_255E75E28()
{
  if (!qword_269F37B38)
  {
    sub_255E75ECC();
    sub_255E766BC(255, &qword_269F37BF8, (void (*)(uint64_t))sub_255E7676C, (void (*)(void))sub_255E77078);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F37B38);
    }
  }
}

void sub_255E75ECC()
{
  if (!qword_269F37B40)
  {
    sub_255E766BC(255, &qword_269F37B48, (void (*)(uint64_t))sub_255E75F54, (void (*)(void))sub_255E76688);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37B40);
    }
  }
}

void sub_255E75F54()
{
  if (!qword_269F37B50)
  {
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    sub_255E7608C(255);
    sub_255E77134(&qword_269F37B88, (void (*)(void))sub_255E762D8);
    sub_255E76F00(&qword_269F37BC8, sub_255E7608C, (void (*)(void))sub_255E764EC, (void (*)(void))sub_255D855C4);
    unint64_t v0 = sub_255EEF910();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37B50);
    }
  }
}

void sub_255E7608C(uint64_t a1)
{
}

void sub_255E760AC(uint64_t a1)
{
}

void sub_255E760CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255E76B3C(255, &qword_269F37BA0, (uint64_t (*)(uint64_t))sub_255E76360, sub_255E764B8, MEMORY[0x263F19DC0]);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E7617C()
{
  if (!qword_269F37B70)
  {
    sub_255E76B3C(255, &qword_269F37B78, (uint64_t (*)(uint64_t))sub_255E76220, sub_255E7632C, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37B70);
    }
  }
}

void sub_255E76220()
{
  if (!qword_269F37B80)
  {
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    sub_255E77134(&qword_269F37B88, (void (*)(void))sub_255E762D8);
    unint64_t v0 = sub_255EEE960();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37B80);
    }
  }
}

unint64_t sub_255E762D8()
{
  unint64_t result = qword_269F37B90;
  if (!qword_269F37B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37B90);
  }
  return result;
}

uint64_t sub_255E7632C()
{
  return sub_255E7A1BC(&qword_269F37B98, (void (*)(uint64_t))sub_255E76220);
}

void sub_255E76360(uint64_t a1)
{
}

void sub_255E763A8()
{
  if (!qword_269F37BB0)
  {
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37BB0);
    }
  }
}

unint64_t sub_255E76424()
{
  unint64_t result = qword_269F37BB8;
  if (!qword_269F37BB8)
  {
    sub_255E763A8();
    sub_255E77134(&qword_269F37B88, (void (*)(void))sub_255E762D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37BB8);
  }
  return result;
}

uint64_t sub_255E764B8()
{
  return sub_255E7A1BC(&qword_269F37BC0, sub_255E76360);
}

uint64_t sub_255E764EC()
{
  return sub_255E76F00(&qword_269F37BD0, sub_255E760AC, (void (*)(void))sub_255E76534, (void (*)(void))sub_255E765E8);
}

unint64_t sub_255E76534()
{
  unint64_t result = qword_269F37BD8;
  if (!qword_269F37BD8)
  {
    sub_255E7617C();
    sub_255E765AC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37BD8);
  }
  return result;
}

uint64_t sub_255E765AC()
{
  return sub_255E76624(&qword_269F37BE0, &qword_269F37B78, (uint64_t (*)(uint64_t))sub_255E76220, sub_255E7632C);
}

uint64_t sub_255E765E8()
{
  return sub_255E76624(&qword_269F37BE8, &qword_269F37BA0, (uint64_t (*)(uint64_t))sub_255E76360, sub_255E764B8);
}

uint64_t sub_255E76624(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E76B3C(255, a2, a3, a4, MEMORY[0x263F19DC0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E76688()
{
  return sub_255E7A1BC(&qword_269F37BF0, (void (*)(uint64_t))sub_255E75F54);
}

void sub_255E766BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    sub_255EEEC60();
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_255E7676C()
{
  if (!qword_269F37C00)
  {
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    sub_255E76860();
    sub_255E77134(&qword_269F37B88, (void (*)(void))sub_255E762D8);
    sub_255E76E04();
    unint64_t v0 = sub_255EEF910();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37C00);
    }
  }
}

void sub_255E76860()
{
  if (!qword_269F37C08)
  {
    sub_255E7A32C(255, &qword_269F37C10, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D488]);
    sub_255E7691C(255);
    sub_255E76D88();
    unint64_t v0 = sub_255EEFA20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37C08);
    }
  }
}

void sub_255E7691C(uint64_t a1)
{
}

void sub_255E7693C()
{
  if (!qword_269F37C20)
  {
    sub_255E769E8(255);
    sub_255E76B3C(255, &qword_269F37B78, (uint64_t (*)(uint64_t))sub_255E76220, sub_255E7632C, MEMORY[0x263F19DC0]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37C20);
    }
  }
}

void sub_255E769E8(uint64_t a1)
{
}

void sub_255E76A08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255EEF090();
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E76A74()
{
  if (!qword_269F37C30)
  {
    sub_255E76B3C(255, &qword_269F37C38, (uint64_t (*)(uint64_t))sub_255E76BBC, sub_255E76CB8, MEMORY[0x263F1B6D0]);
    sub_255E76CEC();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F37C30);
    }
  }
}

void sub_255E76B3C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255E76BBC(uint64_t a1)
{
}

void sub_255E76BF0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E76C54()
{
  if (!qword_269F37C48)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37C48);
    }
  }
}

uint64_t sub_255E76CB8()
{
  return sub_255E7A1BC(&qword_269F37C50, sub_255E76BBC);
}

unint64_t sub_255E76CEC()
{
  unint64_t result = qword_269F37C58;
  if (!qword_269F37C58)
  {
    sub_255E76B3C(255, &qword_269F37C38, (uint64_t (*)(uint64_t))sub_255E76BBC, sub_255E76CB8, MEMORY[0x263F1B6D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37C58);
  }
  return result;
}

unint64_t sub_255E76D88()
{
  unint64_t result = qword_269F37C60;
  if (!qword_269F37C60)
  {
    sub_255E7A32C(255, &qword_269F37C10, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37C60);
  }
  return result;
}

unint64_t sub_255E76E04()
{
  unint64_t result = qword_269F37C68;
  if (!qword_269F37C68)
  {
    sub_255E76860();
    sub_255E76F00(&qword_269F37C70, sub_255E7691C, (void (*)(void))sub_255E76EB8, (void (*)(void))sub_255E765E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37C68);
  }
  return result;
}

uint64_t sub_255E76EB8()
{
  return sub_255E76F00(&qword_269F37C78, (void (*)(uint64_t))sub_255E7693C, (void (*)(void))sub_255E76F8C, (void (*)(void))sub_255E765AC);
}

uint64_t sub_255E76F00(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E76F8C()
{
  unint64_t result = qword_269F37C80;
  if (!qword_269F37C80)
  {
    sub_255E769E8(255);
    sub_255E76B3C(255, &qword_269F37C38, (uint64_t (*)(uint64_t))sub_255E76BBC, sub_255E76CB8, MEMORY[0x263F1B6D0]);
    sub_255E76CEC();
    swift_getOpaqueTypeConformance2();
    sub_255D855C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37C80);
  }
  return result;
}

uint64_t sub_255E77078()
{
  return sub_255E7A1BC(&qword_269F37C88, (void (*)(uint64_t))sub_255E7676C);
}

unint64_t sub_255E770AC()
{
  unint64_t result = qword_269F37C90;
  if (!qword_269F37C90)
  {
    sub_255E76BF0(255, &qword_269F37B30, (uint64_t (*)(uint64_t))sub_255E75E28, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37C90);
  }
  return result;
}

uint64_t sub_255E77134(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E7A32C(255, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E771C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v51 = sub_255EEEC70();
  uint64_t v3 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E75D78();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E75C3C();
  uint64_t v49 = v11;
  uint64_t v50 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E75AD0();
  uint64_t v55 = v14;
  uint64_t v54 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E75918();
  uint64_t v58 = v17;
  uint64_t v57 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v56 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a1;
  sub_255E76BF0(0, &qword_269F37B30, (uint64_t (*)(uint64_t))sub_255E75E28, MEMORY[0x263F1BAC8]);
  sub_255E770AC();
  sub_255EEF320();
  uint64_t v53 = a1;
  uint64_t v60 = a1;
  sub_255DDDE9C();
  uint64_t v20 = v19;
  uint64_t v21 = sub_255E7A1BC(&qword_269F37C98, (void (*)(uint64_t))sub_255E75D78);
  sub_255DDDF50();
  uint64_t v23 = v22;
  uint64_t v24 = sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
  *(void *)&long long v66 = v23;
  *((void *)&v66 + 1) = v24;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_255EEF640();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v26 = v51;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F19698], v51);
  *(void *)&long long v66 = v7;
  *((void *)&v66 + 1) = v20;
  uint64_t v67 = v21;
  unint64_t v68 = OpaqueTypeConformance2;
  uint64_t v27 = swift_getOpaqueTypeConformance2();
  uint64_t v52 = v16;
  uint64_t v28 = v49;
  sub_255EEF5C0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v26);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v28);
  uint64_t v29 = sub_255EEFD40();
  MEMORY[0x270FA5388](v29 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)qword_269F352A8;
  uint64_t v31 = sub_255EEE200();
  MEMORY[0x270FA5388](v31 - 8);
  id v32 = v30;
  sub_255EEE1F0();
  *(void *)&long long v66 = sub_255EEFDA0();
  *((void *)&v66 + 1) = v33;
  uint64_t v64 = v28;
  uint64_t v65 = v27;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  unint64_t v35 = sub_255DAD520();
  uint64_t v36 = MEMORY[0x263F8D310];
  uint64_t v37 = v56;
  uint64_t v38 = v55;
  uint64_t v39 = v52;
  sub_255EEF500();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v38);
  uint64_t v40 = v53;
  long long v66 = *(_OWORD *)(v53 + 24);
  sub_255E76BF0(0, &qword_269F37CA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v41 = v64;
  swift_getKeyPath();
  *(void *)&long long v66 = v41;
  sub_255E7A1BC((unint64_t *)&qword_269F36300, (void (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v43 = *(void *)(v41 + 80);
  uint64_t v42 = *(void *)(v41 + 88);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v62 = v43;
  uint64_t v63 = v42;
  uint64_t v44 = swift_allocObject();
  long long v45 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)(v44 + 16) = *(_OWORD *)v40;
  *(_OWORD *)(v44 + 32) = v45;
  *(_OWORD *)(v44 + 48) = *(_OWORD *)(v40 + 32);
  *(void *)(v44 + 64) = *(void *)(v40 + 48);
  sub_255E7A20C(v40);
  sub_255E7A32C(0, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
  *(void *)&long long v66 = v38;
  *((void *)&v66 + 1) = v36;
  uint64_t v67 = v34;
  unint64_t v68 = v35;
  swift_getOpaqueTypeConformance2();
  sub_255E77134(&qword_269F37CA0, (void (*)(void))sub_255DFF53C);
  uint64_t v46 = v58;
  sub_255EEF690();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v37, v46);
}

uint64_t sub_255E77A88@<X0>(uint64_t a1@<X8>)
{
  return sub_255E771C4(*(void *)(v1 + 16), a1);
}

uint64_t sub_255E77A98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E77AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v102 = a2;
  sub_255E7676C();
  uint64_t v107 = v3;
  uint64_t v111 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v98 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E766BC(0, &qword_269F37BF8, (void (*)(uint64_t))sub_255E7676C, (void (*)(void))sub_255E77078);
  uint64_t v101 = v5;
  uint64_t v110 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  char v100 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v99 = (char *)&v84 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v109 = (char *)&v84 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v108 = (char *)&v84 - v12;
  uint64_t v13 = sub_255EEEC60();
  uint64_t v112 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E75F54();
  unint64_t v95 = v16;
  uint64_t v94 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v93 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E766BC(0, &qword_269F37B48, (void (*)(uint64_t))sub_255E75F54, (void (*)(void))sub_255E76688);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v92 = (char *)&v84 - v21;
  sub_255E75ECC();
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v97 = (uint64_t)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v84 - v25;
  long long v119 = *(_OWORD *)(a1 + 24);
  long long v115 = *(_OWORD *)(a1 + 24);
  sub_255E76BF0(0, &qword_269F37CA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B5D0]);
  uint64_t v28 = v27;
  sub_255EEF820();
  uint64_t v29 = v113;
  swift_getKeyPath();
  *(void *)&long long v115 = v29;
  sub_255E7A1BC((unint64_t *)&qword_269F36300, (void (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v30 = *(void *)(v29 + 32);
  unint64_t v31 = *(void *)(v29 + 40);
  swift_release();
  uint64_t v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v32 = v30 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v106 = a1;
  uint64_t v105 = v28;
  uint64_t v96 = v15;
  uint64_t v103 = v13;
  if (v32)
  {
    uint64_t v33 = v13;
    uint64_t v34 = 1;
  }
  else
  {
    long long v113 = v119;
    sub_255EEF840();
    long long v35 = v115;
    uint64_t v36 = v116;
    swift_getKeyPath();
    long long v113 = v35;
    *(void *)&long long v114 = v36;
    sub_255E76BF0(0, &qword_269F37CB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B750]);
    sub_255EEF990();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v37 = swift_release();
    long long v113 = v115;
    long long v114 = v116;
    MEMORY[0x270FA5388](v37);
    sub_255E7A32C(0, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
    sub_255E7608C(0);
    sub_255E77134(&qword_269F37B88, (void (*)(void))sub_255E762D8);
    sub_255E76F00(&qword_269F37BC8, sub_255E7608C, (void (*)(void))sub_255E764EC, (void (*)(void))sub_255D855C4);
    uint64_t v38 = v93;
    sub_255EEF8E0();
    sub_255EEEC50();
    sub_255E76688();
    uint64_t v39 = v92;
    unint64_t v40 = v95;
    uint64_t v41 = v103;
    sub_255EEF460();
    uint64_t v42 = v15;
    uint64_t v33 = v41;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v42, v41);
    (*(void (**)(char *, unint64_t))(v94 + 8))(v38, v40);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v39, v19);
    uint64_t v34 = 0;
  }
  BOOL v104 = v26;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v26, v34, 1, v19);
  uint64_t v43 = sub_255EEFD40();
  MEMORY[0x270FA5388](v43 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v44 = (void *)qword_269F352A8;
  uint64_t v45 = sub_255EEE200();
  uint64_t v46 = *(void *)(*(void *)(v45 - 8) + 64);
  MEMORY[0x270FA5388](v45 - 8);
  unint64_t v95 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v47 = v44;
  sub_255EEE1F0();
  uint64_t v117 = sub_255EEFDA0();
  uint64_t v118 = v48;
  long long v113 = v119;
  sub_255EEF840();
  long long v49 = v115;
  uint64_t v50 = v116;
  swift_getKeyPath();
  long long v113 = v49;
  *(void *)&long long v114 = v50;
  sub_255E76BF0(0, &qword_269F37CB0, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B750]);
  uint64_t v94 = v51;
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v52 = swift_release();
  long long v113 = v115;
  long long v114 = v116;
  MEMORY[0x270FA5388](v52);
  sub_255E7A32C(0, &qword_269F37B58, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D8F0]);
  uint64_t v93 = v53;
  sub_255E76860();
  uint64_t v92 = v54;
  uint64_t v91 = sub_255E77134(&qword_269F37B88, (void (*)(void))sub_255E762D8);
  unint64_t v90 = sub_255E76E04();
  unint64_t v89 = sub_255DAD520();
  uint64_t v55 = v98;
  sub_255EEF900();
  uint64_t v56 = v96;
  sub_255EEEC50();
  uint64_t v88 = sub_255E77078();
  uint64_t v57 = v109;
  uint64_t v58 = v107;
  sub_255EEF460();
  uint64_t v59 = *(void (**)(char *, uint64_t))(v112 + 8);
  v112 += 8;
  uint64_t v87 = v59;
  v59(v56, v33);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v111 + 8);
  v111 += 8;
  uint64_t v86 = v60;
  v60(v55, v58);
  uint64_t v85 = *(uint64_t (**)(char *, char *, uint64_t))(v110 + 32);
  uint64_t v61 = v101;
  uint64_t v62 = v85(v108, v57, v101);
  MEMORY[0x270FA5388](v62);
  uint64_t v63 = sub_255EEFCD0();
  uint64_t v64 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v63);
  id v65 = v64;
  sub_255EEE1F0();
  uint64_t v117 = sub_255EEFDA0();
  uint64_t v118 = v66;
  long long v113 = v119;
  sub_255EEF840();
  long long v67 = v115;
  uint64_t v68 = v116;
  swift_getKeyPath();
  long long v113 = v67;
  *(void *)&long long v114 = v68;
  sub_255EEF990();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v69 = swift_release();
  long long v113 = v115;
  long long v114 = v116;
  MEMORY[0x270FA5388](v69);
  sub_255EEF900();
  sub_255EEEC50();
  uint64_t v70 = v99;
  uint64_t v71 = v107;
  uint64_t v72 = v103;
  sub_255EEF460();
  v87(v56, v72);
  v86(v55, v71);
  uint64_t v73 = v57;
  v85(v57, v70, v61);
  uint64_t v74 = v97;
  sub_255E7A404((uint64_t)v104, v97, (uint64_t (*)(void))sub_255E75ECC);
  uint64_t v75 = v110;
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  uint64_t v77 = v108;
  v76(v70, v108, v61);
  uint64_t v78 = v100;
  v76(v100, v73, v61);
  uint64_t v79 = v102;
  sub_255E7A404(v74, v102, (uint64_t (*)(void))sub_255E75ECC);
  sub_255E75E28();
  uint64_t v81 = v80;
  v76((char *)(v79 + *(int *)(v80 + 48)), v70, v61);
  v76((char *)(v79 + *(int *)(v81 + 64)), v78, v61);
  char v82 = *(void (**)(char *, uint64_t))(v75 + 8);
  v82(v109, v61);
  v82(v77, v61);
  sub_255E7A46C((uint64_t)v104, (uint64_t (*)(void))sub_255E75ECC);
  v82(v78, v61);
  v82(v70, v61);
  return sub_255E7A46C(v74, (uint64_t (*)(void))sub_255E75ECC);
}

uint64_t sub_255E78A64(long long *a1)
{
  uint64_t v2 = sub_255EEFD40();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_269F352A8;
  uint64_t v4 = sub_255EEE200();
  MEMORY[0x270FA5388](v4 - 8);
  id v5 = v3;
  sub_255EEE1F0();
  sub_255EEFDA0();
  sub_255DAD520();
  uint64_t v6 = sub_255EEF3D0();
  uint64_t v8 = v7;
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  char v10 = v9 & 1;
  char v21 = v9 & 1;
  uint64_t v22 = v11;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v12 = a1[1];
  long long v15 = *a1;
  long long v16 = v12;
  long long v17 = a1[2];
  uint64_t v18 = *((void *)a1 + 6);
  v14[0] = 0;
  v14[1] = 0;
  sub_255E78CAC(v14, 1701736270, 0xE400000000000000);
  sub_255E760AC(0);
  sub_255E764EC();
  sub_255EEF580();
  swift_bridgeObjectRelease();
  sub_255D85120(v6, v8, v10);
  swift_bridgeObjectRelease();
  sub_255E7A318(0, 0);
  return sub_255E7A308(0, 0);
}

void sub_255E78CAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v8 = *(void *)(v3 + 48);
  sub_255E7A32C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_255EF1E20;
  *(void *)(v10 + 32) = v9;
  *(void *)(v10 + 40) = v8;
  *(void *)(v10 + 48) = a2;
  *(void *)(v10 + 56) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t)sub_255DFA9AC((void *)1, 3, 1, (void *)v10);
    *(void *)(v10 + 16) = 3;
    *(void *)(v10 + 64) = v7;
    *(void *)(v10 + 72) = v6;
  }
  sub_255E76BF0(0, &qword_269F37CA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  swift_getKeyPath();
  sub_255E7A1BC((unint64_t *)&qword_269F36300, (void (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  uint64_t v12 = *(void *)(v19 + 80);
  uint64_t v11 = *(void *)(v19 + 88);
  swift_bridgeObjectRetain();
  swift_release();
  if (!v6)
  {
    if (!v11) {
      goto LABEL_13;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v7 == v12 && v6 == v11)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = sub_255EF04A0();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      goto LABEL_16;
    }
  }
LABEL_13:
  unint64_t v15 = *(void *)(v10 + 16);
  unint64_t v14 = *(void *)(v10 + 24);
  if (v15 >= v14 >> 1) {
    uint64_t v10 = (uint64_t)sub_255DFA9AC((void *)(v14 > 1), v15 + 1, 1, (void *)v10);
  }
  *(void *)(v10 + 16) = v15 + 1;
  uint64_t v16 = v10 + 16 * v15;
  *(void *)(v16 + 32) = 0x64657463656C6553;
  *(void *)(v16 + 40) = 0xE800000000000000;
LABEL_16:
  swift_bridgeObjectRetain();
  long long v17 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v18 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v18)
  {
    sub_255EEFD90();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E78FAC(uint64_t a1)
{
  sub_255E76BF0(0, &qword_269F37CA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  swift_getKeyPath();
  sub_255E7A1BC((unint64_t *)&qword_269F36300, (void (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  unint64_t v2 = *(void *)(v8 + 40);
  uint64_t v3 = *(void *)(v8 + 32) & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  if (v3)
  {
    swift_beginAccess();
    swift_retain();
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_255DFC7F4(v4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
  }
  swift_release();
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v5 + 64) = *(void *)(a1 + 48);
  sub_255E7A20C(a1);
  sub_255E7A32C(0, &qword_269F37C10, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D488]);
  sub_255E7691C(0);
  sub_255E76D88();
  sub_255E76F00(&qword_269F37C70, sub_255E7691C, (void (*)(void))sub_255E76EB8, (void (*)(void))sub_255E765E8);
  sub_255E7A3B0();
  return sub_255EEFA10();
}

uint64_t sub_255E79254@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v40 = a4;
  uint64_t v6 = sub_255EEEFA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E76A74();
  uint64_t v36 = v10;
  uint64_t v39 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = *v4;
  uint64_t v34 = v4[1];
  uint64_t v35 = v15;
  int v33 = *((unsigned __int8 *)v4 + 16);
  long long v32 = *(_OWORD *)(v4 + 3);
  uint64_t v31 = v4[5];
  uint64_t v30 = v4[6];
  uint64_t v16 = sub_255EEED80();
  sub_255E79D7C((uint64_t)&v42);
  char v17 = v43;
  uint64_t v18 = *(void *)v44;
  char v19 = v45;
  uint64_t v20 = v46;
  long long v21 = v42;
  long long v22 = *(_OWORD *)&v44[8];
  long long v42 = (unint64_t)v16;
  char v43 = 1;
  *(_OWORD *)uint64_t v44 = v21;
  v44[16] = v17;
  uint64_t v45 = v18;
  long long v46 = v22;
  char v47 = v19;
  uint64_t v48 = v20;
  sub_255EEEF90();
  sub_255E76B3C(0, &qword_269F37C38, (uint64_t (*)(uint64_t))sub_255E76BBC, sub_255E76CB8, MEMORY[0x263F1B6D0]);
  uint64_t v24 = v23;
  unint64_t v25 = sub_255E76CEC();
  sub_255EEF560();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  long long v26 = v46;
  char v27 = v47;
  sub_255D85120(*(uint64_t *)v44, *(uint64_t *)&v44[8], v44[16]);
  swift_bridgeObjectRelease();
  sub_255D85120(v26, *((uint64_t *)&v26 + 1), v27);
  swift_bridgeObjectRelease();
  *(void *)&long long v42 = v35;
  *((void *)&v42 + 1) = v34;
  char v43 = v33;
  *(_OWORD *)uint64_t v44 = v32;
  *(void *)&v44[16] = v31;
  uint64_t v45 = v30;
  v41[0] = v14;
  v41[1] = v13;
  swift_bridgeObjectRetain();
  sub_255E78CAC(v41, v37, v38);
  swift_bridgeObjectRelease();
  *(void *)&long long v42 = v24;
  *((void *)&v42 + 1) = v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v28 = v36;
  sub_255EEF580();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v12, v28);
}

uint64_t sub_255E795B8(uint64_t a1)
{
  sub_255E76BF0(0, &qword_269F37CA8, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  swift_getKeyPath();
  sub_255E7A1BC((unint64_t *)&qword_269F36300, (void (*)(uint64_t))type metadata accessor for MedicalIDSpokenLanguagePickerViewModel);
  sub_255EEE2D0();
  swift_release();
  swift_beginAccess();
  unint64_t v2 = *(void *)(v8 + 40);
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v3 = *(void *)(v8 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    swift_retain();
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_255DFC7F4(v4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_release();
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v5 + 64) = *(void *)(a1 + 48);
  sub_255E7A20C(a1);
  sub_255E7A32C(0, &qword_269F37C10, (uint64_t)&type metadata for MedicalIDSpokenLanguage, MEMORY[0x263F8D488]);
  sub_255E7691C(0);
  sub_255E76D88();
  sub_255E76F00(&qword_269F37C70, sub_255E7691C, (void (*)(void))sub_255E76EB8, (void (*)(void))sub_255E765E8);
  sub_255E7A3B0();
  return sub_255EEFA10();
}

uint64_t sub_255E79838@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_255E7693C();
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E769E8(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  v21[0] = v16;
  v21[1] = v15;
  sub_255E79254(v21, a2, a3, (uint64_t)v14);
  sub_255E7A404((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))sub_255E769E8);
  char v17 = (uint64_t *)&v11[*(int *)(v9 + 44)];
  *char v17 = v16;
  v17[1] = v15;
  sub_255E7A404((uint64_t)v11, a4, (uint64_t (*)(void))sub_255E7693C);
  sub_255E7691C(0);
  char v19 = (uint64_t *)(a4 + *(int *)(v18 + 36));
  *char v19 = v16;
  v19[1] = v15;
  swift_bridgeObjectRetain_n();
  sub_255E7A46C((uint64_t)v11, (uint64_t (*)(void))sub_255E7693C);
  return sub_255E7A46C((uint64_t)v14, (uint64_t (*)(void))sub_255E769E8);
}

uint64_t sub_255E799E0(uint64_t a1)
{
  uint64_t v2 = sub_255EEEE90();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255DDDF50();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255EEEE60();
  uint64_t v11 = a1;
  sub_255E07734();
  sub_255E7A1BC((unint64_t *)&qword_269F35EB0, (void (*)(uint64_t))sub_255E07734);
  sub_255EEE680();
  uint64_t v8 = sub_255E7A1BC(&qword_269F35EB8, (void (*)(uint64_t))sub_255DDDF50);
  MEMORY[0x25A29A8F0](v7, v4, v8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_255E79BB0(uint64_t a1)
{
  uint64_t v2 = sub_255EEFD40();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_269F352A8;
  uint64_t v4 = sub_255EEE200();
  MEMORY[0x270FA5388](v4 - 8);
  id v5 = v3;
  sub_255EEE1F0();
  sub_255EEFDA0();
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v6 + 64) = *(void *)(a1 + 48);
  sub_255E7A20C(a1);
  sub_255DAD520();
  return sub_255EEF890();
}

uint64_t sub_255E79D7C@<X0>(uint64_t a1@<X8>)
{
  MedicalIDSpokenLanguage.languageInLanguageLocale.getter();
  sub_255DAD520();
  uint64_t v2 = sub_255EEF3D0();
  uint64_t v20 = v3;
  uint64_t v21 = v2;
  uint64_t v22 = v4;
  char v6 = v5 & 1;
  MedicalIDSpokenLanguage.languageInCurrentLocale.getter();
  uint64_t v7 = sub_255EEF3D0();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  sub_255EEEF30();
  uint64_t v12 = sub_255EEF370();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  sub_255D85120(v7, v9, v11);
  swift_bridgeObjectRelease();
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v22;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v16;
  sub_255D85214(v21, v20, v6);
  swift_bridgeObjectRetain();
  sub_255D85214(v12, v14, v18);
  swift_bridgeObjectRetain();
  sub_255D85120(v12, v14, v18);
  swift_bridgeObjectRelease();
  sub_255D85120(v21, v20, v6);
  return swift_bridgeObjectRelease();
}

uint64_t destroy for MedicalIDSpokenLanguagePickerView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MedicalIDSpokenLanguagePickerView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDSpokenLanguagePickerView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicalIDSpokenLanguagePickerView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MedicalIDSpokenLanguagePickerView()
{
  return &type metadata for MedicalIDSpokenLanguagePickerView;
}

uint64_t sub_255E7A11C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E7A1A4@<X0>(uint64_t a1@<X8>)
{
  return sub_255E77AB4(*(void *)(v1 + 16), a1);
}

uint64_t sub_255E7A1AC()
{
  return sub_255E799E0(*(void *)(v0 + 16));
}

uint64_t sub_255E7A1BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E7A20C(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E7A270()
{
  return sub_255E79BB0(*(void *)(v0 + 16));
}

uint64_t sub_255E7A27C()
{
  return sub_255EEF980();
}

uint64_t sub_255E7A2F0()
{
  return sub_255E78FAC(*(void *)(v0 + 16));
}

uint64_t sub_255E7A2F8()
{
  return sub_255E795B8(*(void *)(v0 + 16));
}

uint64_t sub_255E7A300()
{
  return sub_255E78A64(*(long long **)(v0 + 16));
}

uint64_t sub_255E7A308(uint64_t a1, uint64_t a2)
{
  if (a2 != 2) {
    return sub_255E7A318(a1, a2);
  }
  return a1;
}

uint64_t sub_255E7A318(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_255E7A32C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E7A37C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255E79838(a1, 0xD000000000000012, 0x8000000255EFADE0, a2);
}

unint64_t sub_255E7A3B0()
{
  unint64_t result = qword_269F37CC0;
  if (!qword_269F37CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37CC0);
  }
  return result;
}

uint64_t sub_255E7A404(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E7A46C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroyTm_18()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255E7A528@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255E79838(a1, 0xD00000000000001ALL, 0x8000000255EFADC0, a2);
}

uint64_t sub_255E7A55C@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_255EEFD40();
  MEMORY[0x270FA5388](v4 - 8);
  if ((a1 & 1) == 0)
  {
    sub_255EEFCD0();
    if (qword_269F349A0 == -1) {
      goto LABEL_5;
    }
    goto LABEL_6;
  }
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
LABEL_6:
  }
    swift_once();
LABEL_5:
  uint64_t v5 = (void *)qword_269F352A8;
  uint64_t v6 = sub_255EEE200();
  MEMORY[0x270FA5388](v6 - 8);
  id v7 = v5;
  sub_255EEE1F0();
  uint64_t v8 = sub_255EEFDA0();
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  uint64_t v20 = (uint64_t)&v20;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v10);
  id v11 = v7;
  sub_255EEE1F0();
  uint64_t v12 = sub_255EEFDA0();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v15);
  id v16 = v11;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  uint64_t v18 = v21;
  *a2 = v22;
  a2[1] = v18;
  a2[2] = v12;
  a2[3] = v14;
  a2[4] = result;
  a2[5] = v19;
  return result;
}

__n128 sub_255E7AA20@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (void *)a1[2];
  sub_255E7BFAC(0, &qword_269F37D60, &qword_269F36C80, (uint64_t)&type metadata for MedicalIDEmergencyContact);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  sub_255EEF9A0();
  sub_255E7BFAC(0, &qword_269F37D68, &qword_269F37D70, (uint64_t)&type metadata for EmergencyContactPickerError);
  sub_255EEF9A0();
  *(_OWORD *)(a2 + 112) = v17;
  *(_OWORD *)(a2 + 128) = v18;
  *(_OWORD *)(a2 + 144) = v19;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(_OWORD *)(a2 + 80) = v15;
  *(_OWORD *)(a2 + 96) = v16;
  __n128 result = v12;
  *(_OWORD *)(a2 + 16) = v11;
  *(__n128 *)(a2 + 32) = v12;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 160) = v8;
  *(void *)(a2 + 168) = v9;
  *(unsigned char *)(a2 + 176) = v10;
  *(_DWORD *)(a2 + 177) = v11;
  *(_DWORD *)(a2 + 180) = *(_DWORD *)((char *)&v11 + 3);
  *(void *)(a2 + 184) = v6;
  return result;
}

uint64_t sub_255E7ABA4()
{
  return sub_255EEE880();
}

id sub_255E7AC3C()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  long long v22 = *((_OWORD *)v0 + 9);
  long long v23 = *((_OWORD *)v0 + 10);
  long long v24 = *((_OWORD *)v0 + 11);
  long long v18 = *((_OWORD *)v0 + 5);
  long long v19 = *((_OWORD *)v0 + 6);
  long long v20 = *((_OWORD *)v0 + 7);
  long long v21 = *((_OWORD *)v0 + 8);
  long long v14 = *((_OWORD *)v0 + 1);
  long long v15 = *((_OWORD *)v0 + 2);
  long long v16 = *((_OWORD *)v0 + 3);
  long long v17 = *((_OWORD *)v0 + 4);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEBE0]), sel_init);
  sub_255E7D33C();
  sub_255EEF130();
  objc_msgSend(v3, sel_setDelegate_, v13);

  objc_msgSend(v3, sel_setMode_, 1);
  sub_255E7D500(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_255EF20B0;
  *(void *)(v4 + 32) = sub_255EEFD90();
  *(void *)(v4 + 40) = v5;
  id v6 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setDisplayedPropertyKeys_, v6);

  objc_msgSend(v3, sel_setOnlyRealContacts_, 1);
  id v7 = sub_255E7AF48();
  objc_msgSend(v3, sel_setPredicateForEnablingContact_, v7, v2, v1, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);

  if (v1)
  {
    if (v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_255EF03F0();
      swift_bridgeObjectRelease();
      if (v12 < 1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
LABEL_4:
      objc_msgSend(v3, sel_setShouldDisplaySuggestionsController_, 1);
      sub_255D7ED10(0, &qword_269F37DB0);
      uint64_t v8 = (void *)sub_255EEFE90();
      objc_msgSend(v3, sel_setContactSuggestions_, v8);
    }
  }
LABEL_5:
  sub_255D7ED10(0, &qword_269F37DA8);
  uint64_t v9 = (void *)sub_255EF0080();
  objc_msgSend(v3, sel_setPredicateForSelectionOfContact_, v9);

  char v10 = (void *)sub_255EF0080();
  objc_msgSend(v3, sel_setPredicateForSelectionOfProperty_, v10);

  return v3;
}

id sub_255E7AF48()
{
  unint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[23];
  uint64_t v39 = MEMORY[0x263F8EE78];
  sub_255D7ED10(0, &qword_269F37DA8);
  sub_255E7D398();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_255EF20B0;
  uint64_t v4 = sub_255EEFD90();
  uint64_t v6 = v5;
  uint64_t v7 = MEMORY[0x263F8D310];
  *(void *)(v3 + 56) = MEMORY[0x263F8D310];
  unint64_t v38 = sub_255E7D448();
  *(void *)(v3 + 64) = v38;
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  sub_255EF0080();
  MEMORY[0x25A29B8A0]();
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_255EEFEC0();
  }
  sub_255EEFEF0();
  sub_255EEFEB0();
  uint64_t v8 = sub_255E7B430();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    id v12 = objc_msgSend(v2, sel_profileIdentifier);
    id v13 = objc_msgSend(v12, sel_type);

    if (v13 == (id)3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_255EF1E20;
      uint64_t v15 = sub_255EEFD90();
      *(void *)(v14 + 56) = v7;
      *(void *)(v14 + 64) = v38;
      *(void *)(v14 + 32) = v15;
      *(void *)(v14 + 40) = v16;
      *(void *)(v14 + 96) = v7;
      *(void *)(v14 + 104) = v38;
      *(void *)(v14 + 72) = v10;
      *(void *)(v14 + 80) = v11;
      sub_255EF0080();
      MEMORY[0x25A29B8A0]();
      if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_255EEFEC0();
      }
      sub_255EEFEF0();
      sub_255EEFEB0();
    }
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v17 = sub_255EF03F0();
    if (v17) {
      goto LABEL_11;
    }
LABEL_25:
    long long v19 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_26;
  }
  uint64_t v17 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v17) {
    goto LABEL_25;
  }
LABEL_11:
  if (v17 < 1)
  {
    __break(1u);
LABEL_32:
    sub_255EEFEC0();
    goto LABEL_28;
  }
  uint64_t v18 = 0;
  long long v19 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v20 = (id)MEMORY[0x25A29BD10](v18, v1);
    }
    else {
      id v20 = *(id *)(v1 + 8 * v18 + 32);
    }
    long long v21 = v20;
    id v22 = objc_msgSend(v20, sel_nameContactIdentifier);
    if (v22)
    {
      long long v23 = v22;
      uint64_t v24 = sub_255EEFD90();
      uint64_t v26 = v25;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v19 = sub_255DFA9AC(0, v19[2] + 1, 1, v19);
      }
      unint64_t v28 = v19[2];
      unint64_t v27 = v19[3];
      if (v28 >= v27 >> 1) {
        long long v19 = sub_255DFA9AC((void *)(v27 > 1), v28 + 1, 1, v19);
      }
      void v19[2] = v28 + 1;
      uint64_t v29 = &v19[2 * v28];
      void v29[4] = v24;
      v29[5] = v26;
    }
    else
    {
    }
    ++v18;
  }
  while (v17 != v18);
LABEL_26:
  swift_bridgeObjectRelease_n();
  if (!v19[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_255EF1E20;
  uint64_t v31 = sub_255EEFD90();
  uint64_t v32 = MEMORY[0x263F8D310];
  *(void *)(v30 + 56) = MEMORY[0x263F8D310];
  *(void *)(v30 + 64) = v38;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v33;
  sub_255E7D500(0, &qword_269F36CD0, v32, MEMORY[0x263F8D488]);
  *(void *)(v30 + 96) = v34;
  *(void *)(v30 + 104) = sub_255E7D490();
  *(void *)(v30 + 72) = v19;
  sub_255EF0080();
  MEMORY[0x25A29B8A0]();
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_32;
  }
LABEL_28:
  sub_255EEFEF0();
  sub_255EEFEB0();
LABEL_30:
  uint64_t v35 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v36 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v35);

  return v36;
}

uint64_t sub_255E7B430()
{
  v25[1] = *(id *)MEMORY[0x263EF8340];
  if (objc_msgSend(self, sel_authorizationStatusForEntityType_, 0) != (id)3)
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_255EEE3D0();
    __swift_project_value_buffer(v10, (uint64_t)qword_269F3FE80);
    uint64_t v0 = sub_255EEE3B0();
    os_log_type_t v11 = sub_255EF00C0();
    if (os_log_type_enabled(v0, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_255D76000, v0, v11, "Medical ID is not authorized for the contact store, cannot fetch me card", v12, 2u);
      MEMORY[0x25A29C8A0](v12, -1, -1);
    }
    goto LABEL_12;
  }
  uint64_t v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEA68]), sel_init);
  [v0 setIncludeSharedPhotoContacts:0];
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEA58]), sel_initWithConfiguration_, v0);
  sub_255E7D500(0, (unint64_t *)&qword_269F37DE0, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_255EF6BE0;
  uint64_t v3 = (void *)*MEMORY[0x263EFDFE0];
  *(void *)(v2 + 32) = *MEMORY[0x263EFDFE0];
  sub_255EEFEB0();
  sub_255E2F1D4();
  id v4 = v3;
  uint64_t v5 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  v25[0] = 0;
  id v6 = objc_msgSend(v1, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, v5, v25);

  if (!v6)
  {
    id v13 = v25[0];
    uint64_t v14 = (void *)sub_255EEDFC0();

    swift_willThrow();
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_255EEE3D0();
    __swift_project_value_buffer(v15, (uint64_t)qword_269F3FE80);
    id v16 = v14;
    id v17 = v14;
    uint64_t v18 = sub_255EEE3B0();
    os_log_type_t v19 = sub_255EF00C0();
    if (!os_log_type_enabled(v18, v19))
    {

      return 0;
    }
    id v20 = (uint8_t *)swift_slowAlloc();
    long long v21 = (void *)swift_slowAlloc();
    v25[0] = v21;
    *(_DWORD *)id v20 = 136315138;
    swift_getErrorValue();
    uint64_t v22 = sub_255EF04E0();
    sub_255DB0024(v22, v23, (uint64_t *)v25);
    sub_255EF0200();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_255D76000, v18, v19, "Error fetching me contact: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v21, -1, -1);
    MEMORY[0x25A29C8A0](v20, -1, -1);

LABEL_12:
    return 0;
  }
  id v7 = v25[0];
  id v8 = objc_msgSend(v6, sel_identifier);
  uint64_t v9 = sub_255EEFD90();

  return v9;
}

id sub_255E7B89C()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  long long v42 = *(_OWORD *)(v0 + 112);
  long long v43 = v1;
  long long v44 = *(_OWORD *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 64);
  long long v38 = *(_OWORD *)(v0 + 48);
  long long v39 = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  long long v40 = *(_OWORD *)(v0 + 80);
  long long v41 = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  long long v36 = *(_OWORD *)(v0 + 16);
  long long v37 = v4;
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  char v7 = *(unsigned char *)(v0 + 176);
  sub_255E7BFAC(0, &qword_269F37D60, &qword_269F36C80, (uint64_t)&type metadata for MedicalIDEmergencyContact);
  sub_255EEF9A0();
  long long v42 = v33;
  long long v43 = v34;
  long long v44 = v35;
  long long v38 = v29;
  long long v39 = v30;
  long long v40 = v31;
  long long v41 = v32;
  long long v36 = v27;
  long long v37 = v28;
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  char v23 = v7;
  sub_255E7BFAC(0, &qword_269F37D68, &qword_269F37D70, (uint64_t)&type metadata for EmergencyContactPickerError);
  sub_255EEF9A0();
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  char v10 = v26;
  os_log_type_t v11 = (objc_class *)type metadata accessor for EmergencyContactPicker.ContactPickerCoordinator();
  id v12 = (char *)objc_allocWithZone(v11);
  id v13 = &v12[OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact];
  *((_OWORD *)v13 + 5) = v32;
  *((_OWORD *)v13 + 6) = v42;
  *((_OWORD *)v13 + 7) = v43;
  *((_OWORD *)v13 + 8) = v44;
  *((_OWORD *)v13 + 1) = v37;
  *((_OWORD *)v13 + 2) = v38;
  *((_OWORD *)v13 + 3) = v39;
  *((_OWORD *)v13 + 4) = v40;
  *(_OWORD *)id v13 = v36;
  uint64_t v14 = &v12[OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error];
  *(void *)uint64_t v14 = v8;
  *((void *)v14 + 1) = v9;
  unsigned char v14[16] = v10;
  id v15 = objc_allocWithZone(MEMORY[0x263F0A258]);
  swift_retain();
  swift_retain();
  id v16 = v12;
  id v17 = objc_msgSend(v15, sel_init);
  *(void *)&v16[OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator_coreTelephonyClient] = v17;

  v20.receiver = v16;
  v20.super_class = v11;
  id v18 = objc_msgSendSuper2(&v20, sel_init);
  swift_release();
  swift_release();
  return v18;
}

void sub_255E7BB90(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_emergencyContactWithContact_property_, a1, a2);
  id v5 = objc_msgSend(v4, sel_phoneNumber);
  if (v5
    && (uint64_t v6 = v5,
        id v7 = objc_retain(*(id *)(v2
                               + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator_coreTelephonyClient)),
        unsigned int v8 = objc_msgSend(v7, sel_isEmergencyServicePhoneNumber_, v6),
        v7,
        v6,
        v8))
  {
    uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error + 8);
    char v10 = *(unsigned char *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error + 16);
    *(void *)&long long v17 = *(void *)(v2
                                + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__error);
    *((void *)&v17 + 1) = v9;
    LOBYTE(v18) = v10;
    LOBYTE(v26[0]) = 1;
    sub_255E7BFAC(0, &qword_269F37D68, &qword_269F37D70, (uint64_t)&type metadata for EmergencyContactPickerError);
  }
  else
  {
    id v4 = v4;
    id v11 = a1;
    MedicalIDEmergencyContact.init(hkEmergencyContact:contact:)(v4, a1, v26);
    nullsub_1(v26);
    long long v12 = *(_OWORD *)(v2
                    + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact
                    + 112);
    long long v23 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 96);
    long long v24 = v12;
    long long v25 = *(_OWORD *)(v2
                    + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact
                    + 128);
    long long v13 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 48);
    long long v19 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 32);
    long long v20 = v13;
    long long v14 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 80);
    long long v21 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 64);
    long long v22 = v14;
    long long v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact + 16);
    long long v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtCV11MedicalIDUI22EmergencyContactPicker24ContactPickerCoordinator__contact);
    long long v18 = v15;
    sub_255E2E4D4((uint64_t)v26, (uint64_t)&v16);
    sub_255E7BFAC(0, &qword_269F37D60, &qword_269F36C80, (uint64_t)&type metadata for MedicalIDEmergencyContact);
  }
  sub_255EEF980();
}

id sub_255E7BD68()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EmergencyContactPicker.ContactPickerCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for EmergencyContactPicker.ContactPickerCoordinator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for EmergencyContactPickerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E7BF1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactPickerError()
{
  return &type metadata for EmergencyContactPickerError;
}

unint64_t sub_255E7BF58()
{
  unint64_t result = qword_269F37D50;
  if (!qword_269F37D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37D50);
  }
  return result;
}

void sub_255E7BFAC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_255E7D500(255, a3, a4, MEMORY[0x263F8D8F0]);
    unint64_t v5 = sub_255EEF9D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E7C018(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 112);
  swift_release();
  swift_release();
  sub_255E2E5D0(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), (void *)v9, *((void **)&v9 + 1));
  return a1;
}

uint64_t destroy for EmergencyContactPickerSheetView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for EmergencyContactPickerSheetView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  swift_retain();
  swift_retain();
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v10;
    uint64_t v11 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v11;
    uint64_t v12 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v12;
    uint64_t v13 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v13;
    uint64_t v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    uint64_t v16 = *(void **)(a2 + 144);
    uint64_t v15 = *(void *)(a2 + 152);
    *(void *)(a1 + 136) = v7;
    *(void *)(a1 + 144) = v16;
    uint64_t v17 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = v15;
    *(void *)(a1 + 160) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = v7;
    id v19 = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v20;
    long long v21 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v21;
    long long v22 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v22;
    long long v23 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v23;
  }
  uint64_t v24 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v24;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EmergencyContactPickerSheetView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v7 = (_OWORD *)(a1 + 40);
  id v8 = (long long *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136))
  {
    if (v9)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void **)(a2 + 136);
      uint64_t v11 = *(void **)(a1 + 136);
      *(void *)(a1 + 136) = v10;
      id v12 = v10;

      uint64_t v13 = *(void **)(a1 + 144);
      uint64_t v14 = *(void **)(a2 + 144);
      *(void *)(a1 + 144) = v14;
      id v15 = v14;

      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255E7C60C(a1 + 40);
      long long v20 = *(_OWORD *)(a2 + 88);
      long long v22 = *v8;
      long long v21 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v20;
      *uint64_t v7 = v22;
      *(_OWORD *)(a1 + 56) = v21;
      long long v23 = *(_OWORD *)(a2 + 152);
      long long v25 = *(_OWORD *)(a2 + 104);
      long long v24 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v23;
      *(_OWORD *)(a1 + 104) = v25;
      *(_OWORD *)(a1 + 120) = v24;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    uint64_t v16 = *(void **)(a2 + 136);
    *(void *)(a1 + 136) = v16;
    uint64_t v17 = *(void **)(a2 + 144);
    *(void *)(a1 + 144) = v17;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = v16;
    id v19 = v17;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *v8;
    long long v27 = *(_OWORD *)(a2 + 56);
    long long v28 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v28;
    *uint64_t v7 = v26;
    *(_OWORD *)(a1 + 56) = v27;
    long long v29 = *(_OWORD *)(a2 + 104);
    long long v30 = *(_OWORD *)(a2 + 120);
    long long v31 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v31;
    *(_OWORD *)(a1 + 104) = v29;
    *(_OWORD *)(a1 + 120) = v30;
  }
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_release();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t sub_255E7C60C(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy185_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for EmergencyContactPickerSheetView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  long long v5 = *(void **)(a1 + 136);
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 136);
  if (!v6)
  {
    sub_255E7C60C(a1 + 40);
LABEL_5:
    long long v15 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v15;
    long long v16 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v16;
    long long v17 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v17;
    long long v18 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v18;
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = v6;

  uint64_t v13 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);

  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyContactPickerSheetView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyContactPickerSheetView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 185) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactPickerSheetView()
{
  return &type metadata for EmergencyContactPickerSheetView;
}

uint64_t sub_255E7C8E0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_255E7C8FC@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_255E7AA20((uint64_t *)*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_255E7C904()
{
  unint64_t result = qword_269F37D78;
  if (!qword_269F37D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37D78);
  }
  return result;
}

void destroy for EmergencyContactPicker(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  long long v3 = *(void **)(a1 + 184);
}

uint64_t initializeWithCopy for EmergencyContactPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void **)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v10;
    uint64_t v11 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v11;
    uint64_t v12 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v12;
    uint64_t v14 = *(void **)(a2 + 136);
    uint64_t v13 = *(void *)(a2 + 144);
    *(void *)(a1 + 128) = v6;
    *(void *)(a1 + 136) = v14;
    uint64_t v15 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v13;
    *(void *)(a1 + 152) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v6;
    id v17 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v18;
    long long v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
    long long v20 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v20;
    long long v21 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v21;
  }
  uint64_t v22 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v22;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  long long v23 = *(void **)(a2 + 184);
  *(void *)(a1 + 184) = v23;
  swift_retain();
  swift_retain();
  id v24 = v23;
  return a1;
}

uint64_t assignWithCopy for EmergencyContactPicker(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (long long *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v6)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void **)(a2 + 128);
      uint64_t v8 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = v7;
      id v9 = v7;

      uint64_t v10 = *(void **)(a1 + 136);
      uint64_t v11 = *(void **)(a2 + 136);
      *(void *)(a1 + 136) = v11;
      id v12 = v11;

      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255E7C60C(a1 + 32);
      long long v17 = *(_OWORD *)(a2 + 80);
      long long v19 = *v5;
      long long v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v17;
      *uint64_t v4 = v19;
      *(_OWORD *)(a1 + 48) = v18;
      long long v20 = *(_OWORD *)(a2 + 144);
      long long v22 = *(_OWORD *)(a2 + 96);
      long long v21 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v20;
      *(_OWORD *)(a1 + 96) = v22;
      *(_OWORD *)(a1 + 112) = v21;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    uint64_t v13 = *(void **)(a2 + 128);
    *(void *)(a1 + 128) = v13;
    uint64_t v14 = *(void **)(a2 + 136);
    *(void *)(a1 + 136) = v14;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v13;
    id v16 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v23 = *v5;
    long long v24 = *(_OWORD *)(a2 + 48);
    long long v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v25;
    *uint64_t v4 = v23;
    *(_OWORD *)(a1 + 48) = v24;
    long long v26 = *(_OWORD *)(a2 + 96);
    long long v27 = *(_OWORD *)(a2 + 112);
    long long v28 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v28;
    *(_OWORD *)(a1 + 96) = v26;
    *(_OWORD *)(a1 + 112) = v27;
  }
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  long long v29 = *(void **)(a2 + 184);
  long long v30 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v29;
  id v31 = v29;

  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for EmergencyContactPicker(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  long long v4 = *(void **)(a1 + 128);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 128);
  if (!v5)
  {
    sub_255E7C60C(a1 + 32);
LABEL_5:
    long long v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
    long long v15 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v15;
    long long v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v16;
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = v5;

  id v12 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);

  uint64_t v13 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v13;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  long long v18 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);

  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyContactPicker(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyContactPicker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactPicker()
{
  return &type metadata for EmergencyContactPicker;
}

unint64_t sub_255E7D104()
{
  unint64_t result = qword_269F37D80;
  if (!qword_269F37D80)
  {
    sub_255E7D15C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37D80);
  }
  return result;
}

void sub_255E7D15C()
{
  if (!qword_269F37D88)
  {
    sub_255EEE810();
    sub_255E7C904();
    unint64_t v0 = sub_255EEE890();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37D88);
    }
  }
}

id sub_255E7D1D0@<X0>(void *a1@<X8>)
{
  id result = sub_255E7B89C();
  *a1 = result;
  return result;
}

uint64_t sub_255E7D1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_255E7D2E8();
  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t sub_255E7D25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_255E7D2E8();
  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void sub_255E7D2C0()
{
}

unint64_t sub_255E7D2E8()
{
  unint64_t result = qword_269F37D90;
  if (!qword_269F37D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37D90);
  }
  return result;
}

void sub_255E7D33C()
{
  if (!qword_269F37D98)
  {
    sub_255E7D2E8();
    unint64_t v0 = sub_255EEF140();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37D98);
    }
  }
}

void sub_255E7D398()
{
  if (!qword_269F37DB8)
  {
    sub_255E7D3F0();
    unint64_t v0 = sub_255EF0490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37DB8);
    }
  }
}

unint64_t sub_255E7D3F0()
{
  unint64_t result = qword_269F37DC0;
  if (!qword_269F37DC0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269F37DC0);
  }
  return result;
}

unint64_t sub_255E7D448()
{
  unint64_t result = qword_269F37DC8;
  if (!qword_269F37DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37DC8);
  }
  return result;
}

unint64_t sub_255E7D490()
{
  unint64_t result = qword_269F37DD8;
  if (!qword_269F37DD8)
  {
    sub_255E7D500(255, &qword_269F36CD0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37DD8);
  }
  return result;
}

void sub_255E7D500(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E7D54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E7D560);
}

uint64_t sub_255E7D560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E7D620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E7D634);
}

uint64_t sub_255E7D634(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDEditConditionsModalView()
{
  uint64_t result = qword_269F37DE8;
  if (!qword_269F37DE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E7D73C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E7D758(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_255EEFD40();
  MEMORY[0x270FA5388](v3 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  long long v4 = (void *)qword_269F352A8;
  uint64_t v5 = sub_255EEE200();
  MEMORY[0x270FA5388](v5 - 8);
  id v6 = v4;
  sub_255EEE1F0();
  uint64_t v7 = sub_255EEFDA0();
  uint64_t v39 = v8;
  uint64_t v40 = v7;
  if (qword_269F34B10 != -1) {
    swift_once();
  }
  uint64_t v9 = 0xD000000000000011;
  uint64_t v37 = qword_269F3FD80;
  uint64_t v38 = MEMORY[0x270FA5388](*(void *)algn_269F3FD88);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_255EEFCD0();
  uint64_t v11 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v10);
  id v12 = v11;
  sub_255EEE1F0();
  uint64_t v13 = sub_255EEFDA0();
  uint64_t v35 = v14;
  uint64_t v36 = v13;
  id v15 = *a1;
  id v16 = objc_msgSend(*a1, sel_medicalConditions);
  if (v16)
  {
    long long v17 = v16;
    uint64_t v18 = sub_255EEFD90();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  id v21 = objc_msgSend(v15, sel_conditionsListVersion, a1);
  if (v21)
  {

    MEMORY[0x270FA5388](v22);
    uint64_t v23 = sub_255EEFCD0();
    long long v24 = (void *)qword_269F352A8;
    MEMORY[0x270FA5388](v23);
    id v25 = v24;
    sub_255EEE1F0();
    uint64_t v26 = sub_255EEFDA0();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  sub_255D7F1F0();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_255EF1E20;
  *(void *)(v29 + 32) = 0x496C61636964654DLL;
  *(void *)(v29 + 40) = 0xE900000000000044;
  unint64_t v30 = 0x8000000255EF8F00;
  *(void *)(v29 + 48) = 0xD000000000000011;
  *(void *)(v29 + 56) = 0x8000000255EF8F00;
  id v31 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    uint64_t v9 = sub_255EEFD90();
    unint64_t v30 = v33;
  }
  *a2 = v40;
  a2[1] = v39;
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v36;
  a2[5] = v35;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v26;
  a2[9] = v28;
  a2[10] = v9;
  a2[11] = v30;
}

uint64_t sub_255E7DBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  return result;
}

double sub_255E7DC0C@<D0>(uint64_t a1@<X8>)
{
  sub_255E7D758(v1, (uint64_t *)v4);
  return sub_255E45818(v4, (uint64_t)sub_255E7DBC4, 0, a1);
}

ValueMetadata *type metadata accessor for MedicalIDMedicalInfoCell()
{
  return &type metadata for MedicalIDMedicalInfoCell;
}

uint64_t sub_255E7DC8C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_255E7DCA8@<D0>(_OWORD *a1@<X8>)
{
  long long v3 = v1[1];
  long long v20 = *v1;
  long long v21 = v3;
  long long v4 = v1[3];
  long long v22 = v1[2];
  long long v23 = v4;
  uint64_t v24 = *((void *)v1 + 8);
  long long v5 = v20;
  uint64_t v6 = v22;
  LOBYTE(v25) = v21;
  sub_255E7DF14((uint64_t)&v20);
  swift_bridgeObjectRetain();
  uint64_t v7 = MedicalIDListProperty.baseIdentifier.getter();
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  long long v11 = v23;
  *(_OWORD *)(v10 + 48) = v22;
  *(_OWORD *)(v10 + 64) = v11;
  *(void *)(v10 + 80) = v24;
  long long v12 = v21;
  *(_OWORD *)(v10 + 16) = v20;
  *(_OWORD *)(v10 + 32) = v12;
  if (qword_269F34B90 != -1) {
    swift_once();
  }
  LOBYTE(v15) = v6 != 0;
  BYTE1(v15) = 2;
  *((void *)&v15 + 1) = sub_255E7DFBC;
  *(void *)&long long v16 = v10;
  *((void *)&v16 + 1) = v7;
  *(void *)&long long v17 = v9;
  *((void *)&v17 + 1) = qword_269F37000;
  LOBYTE(v18[0]) = 1;
  sub_255E7DE34((uint64_t)&v20, (uint64_t)v18 + 8);
  *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)&v19[9];
  long long v13 = v18[1];
  v26[0] = *(_OWORD *)v19;
  a1[4] = v18[0];
  a1[5] = v13;
  a1[6] = v26[0];
  double result = *(double *)((char *)v26 + 9);
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v26 + 9);
  *a1 = v5;
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  return result;
}

double sub_255E7DE34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  LOBYTE(v4) = *(unsigned char *)(a1 + 16);
  swift_bridgeObjectRetain();
  MedicalIDListProperty.baseIdentifier.getter();
  sub_255E7DFE4();
  sub_255DEA818();
  sub_255EEEE00();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_255E7DF14(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E7DF6C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E7DFBC()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

unint64_t sub_255E7DFE4()
{
  unint64_t result = qword_269F37DF8;
  if (!qword_269F37DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37DF8);
  }
  return result;
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s11MedicalIDUI24MedicalIDMedicalInfoCellV9ViewModelVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MedicalIDMedicalInfoCell.ViewModel()
{
  return &type metadata for MedicalIDMedicalInfoCell.ViewModel;
}

unint64_t sub_255E7E248()
{
  unint64_t result = qword_269F37E00;
  if (!qword_269F37E00)
  {
    sub_255E7E2A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37E00);
  }
  return result;
}

void sub_255E7E2A0()
{
  if (!qword_269F37E08)
  {
    sub_255E7E304();
    sub_255E7E364();
    unint64_t v0 = type metadata accessor for MedicalIDCellView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37E08);
    }
  }
}

void sub_255E7E304()
{
  if (!qword_269F37E10)
  {
    unint64_t v0 = sub_255EEEE10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37E10);
    }
  }
}

unint64_t sub_255E7E364()
{
  unint64_t result = qword_269F37E18;
  if (!qword_269F37E18)
  {
    sub_255E7E304();
    sub_255E7DFE4();
    sub_255DEA818();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37E18);
  }
  return result;
}

void *sub_255E7E3DC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    uint64_t v10 = a3[5];
    long long v11 = (void *)(a1 + v10);
    long long v12 = (uint64_t *)((char *)a2 + v10);
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    sub_255E7EE20(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *long long v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    long long v17 = (void *)((char *)v4 + v15);
    uint64_t v18 = (uint64_t)a2 + v15;
    long long v20 = *(void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    *long long v17 = v20;
    v17[1] = v19;
    long long v21 = (void *)((char *)v4 + v16);
    uint64_t v22 = (uint64_t)a2 + v16;
    uint64_t v24 = *(void **)v22;
    uint64_t v23 = *(void *)(v22 + 8);
    *long long v21 = v24;
    v21[1] = v23;
    uint64_t v25 = a3[8];
    uint64_t v26 = (void *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t)a2 + v25;
    uint64_t v29 = *(void **)v27;
    uint64_t v28 = *(void *)(v27 + 8);
    *uint64_t v26 = v29;
    v26[1] = v28;
    id v30 = v20;
    id v31 = v24;
    id v32 = v29;
  }
  return v4;
}

void sub_255E7E5B0(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  sub_255E7EE20(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_255EEE860();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

  uint64_t v6 = *(void **)(a1 + a2[8]);
}

uint64_t sub_255E7E6BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  long long v11 = (void *)(a2 + v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  sub_255E7EE20(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_255EEE860();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v13);
  uint64_t v16 = a2 + v13;
  uint64_t v18 = *(void **)v16;
  uint64_t v17 = *(void *)(v16 + 8);
  *uint64_t v15 = v18;
  v15[1] = v17;
  uint64_t v19 = (void *)(a1 + v14);
  uint64_t v20 = a2 + v14;
  uint64_t v22 = *(void **)v20;
  uint64_t v21 = *(void *)(v20 + 8);
  *uint64_t v19 = v22;
  v19[1] = v21;
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v27 = *(void **)v25;
  uint64_t v26 = *(void *)(v25 + 8);
  void *v24 = v27;
  v24[1] = v26;
  id v28 = v18;
  id v29 = v22;
  id v30 = v27;
  return a1;
}

uint64_t sub_255E7E840(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_255E5076C(a1 + v7);
    sub_255E7EE20(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_255EEE860();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void **)(a1 + v11);
  uint64_t v15 = *(void **)(a2 + v11);
  *uint64_t v12 = v15;
  id v16 = v15;

  v12[1] = *(void *)(v13 + 8);
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void **)(a1 + v17);
  uint64_t v21 = *(void **)(a2 + v17);
  *uint64_t v18 = v21;
  id v22 = v21;

  v18[1] = *(void *)(v19 + 8);
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void **)(a1 + v23);
  uint64_t v27 = *(void **)v25;
  void *v24 = *(void *)v25;
  id v28 = v27;

  v24[1] = *(void *)(v25 + 8);
  return a1;
}

uint64_t sub_255E7EA28(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  sub_255E7EE20(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  uint64_t v11 = v10;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_255EEE860();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v8, v9, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_255E7EB68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    sub_255E5076C(a1 + v8);
    sub_255E7EE20(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
    uint64_t v12 = v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_255EEE860();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  id v16 = (void *)(a2 + v14);
  uint64_t v17 = *(void **)(a1 + v14);
  *uint64_t v15 = *v16;

  v15[1] = v16[1];
  uint64_t v18 = a3[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = *(void **)(a1 + v18);
  *uint64_t v19 = *v20;

  v19[1] = v20[1];
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = *(void **)(a1 + v22);
  *uint64_t v23 = *v24;

  v23[1] = v24[1];
  return a1;
}

uint64_t sub_255E7ED2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E7ED40);
}

uint64_t sub_255E7ED40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_255E7EE20(0, &qword_269F36400, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

void sub_255E7EE20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E7EE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E7EE98);
}

uint64_t sub_255E7EE98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_255E7EE20(0, &qword_269F36400, MEMORY[0x263F18D80], MEMORY[0x263F185D0]);
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDCellHeaderView()
{
  uint64_t result = qword_269F37E20;
  if (!qword_269F37E20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E7EFBC()
{
  sub_255E7EE20(319, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for MedicalIDCellHeaderViewModel()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MedicalIDCellHeaderViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicalIDCellHeaderViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicalIDCellHeaderViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MedicalIDCellHeaderViewModel()
{
  return &type metadata for MedicalIDCellHeaderViewModel;
}

uint64_t sub_255E7F244()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E7F260@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  sub_255E7FFB0();
  uint64_t v31 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E80180(0, &qword_269F37E68, MEMORY[0x263F19B20]);
  v28[0] = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v29 = (uint64_t)v28 - v5;
  sub_255E80100();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v28 - v10;
  sub_255E801F0();
  v28[1] = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_255EEE860();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MedicalIDCellHeaderView();
  sub_255DAAD40((uint64_t)v18);
  char v19 = sub_255EEE840();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v19)
  {
    *(void *)uint64_t v14 = sub_255EEED80();
    *((void *)v14 + 1) = 0;
    unsigned char v14[16] = 1;
    sub_255E80980();
    uint64_t v21 = (uint64_t)&v14[*(int *)(v20 + 44)];
    sub_255E7F7EC((uint64_t)v11);
    sub_255E7F9E4((uint64_t)v35);
    sub_255E815D4((uint64_t)v35, (uint64_t)v33, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_255E80A18((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))sub_255E80100);
    sub_255E815D4((uint64_t)v33, (uint64_t)v32, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_255E80A18((uint64_t)v9, v21, (uint64_t (*)(void))sub_255E80100);
    sub_255E802A4();
    uint64_t v23 = v21 + *(int *)(v22 + 48);
    sub_255E815D4((uint64_t)v32, (uint64_t)v34, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_255E815D4((uint64_t)v34, v23, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_255E80B64(v34, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_255E80A80);
    sub_255E80CAC((uint64_t)v11, (uint64_t (*)(void))sub_255E80100);
    sub_255E815D4((uint64_t)v32, (uint64_t)v35, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    sub_255E80B64(v35, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_255E80BD0);
    sub_255E80CAC((uint64_t)v9, (uint64_t (*)(void))sub_255E80100);
    sub_255E80A18((uint64_t)v14, v29, (uint64_t (*)(void))sub_255E801F0);
    swift_storeEnumTagMultiPayload();
    sub_255E80938(&qword_269F37E98, (void (*)(uint64_t))sub_255E801F0);
    sub_255E80938(&qword_269F37EA0, (void (*)(uint64_t))sub_255E7FFB0);
    sub_255EEEE00();
    uint64_t v24 = sub_255E801F0;
    uint64_t v25 = (uint64_t)v14;
  }
  else
  {
    *(void *)uint64_t v3 = sub_255EEEC80();
    *((void *)v3 + 1) = 0;
    v3[16] = 1;
    sub_255E808A0();
    sub_255E7FDC0((uint64_t)&v3[*(int *)(v26 + 44)]);
    sub_255E80A18((uint64_t)v3, v29, (uint64_t (*)(void))sub_255E7FFB0);
    swift_storeEnumTagMultiPayload();
    sub_255E80938(&qword_269F37E98, (void (*)(uint64_t))sub_255E801F0);
    sub_255E80938(&qword_269F37EA0, (void (*)(uint64_t))sub_255E7FFB0);
    sub_255EEEE00();
    uint64_t v24 = sub_255E7FFB0;
    uint64_t v25 = (uint64_t)v3;
  }
  return sub_255E80CAC(v25, (uint64_t (*)(void))v24);
}

void sub_255E7F7EC(uint64_t a1@<X8>)
{
  sub_255E80100();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[1];
  uint64_t v18 = *v1;
  uint64_t v19 = v6;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8D310];
  uint64_t v8 = sub_255EEF3D0();
  uint64_t v10 = v9;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  char v12 = v11 & 1;
  char v20 = v11 & 1;
  uint64_t v21 = v13;
  sub_255E81654(0, (unint64_t *)&qword_269F37DA0, v7, MEMORY[0x263F8E0F8]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_255EF1E20;
  uint64_t v15 = v1[6];
  *(void *)(v14 + 32) = v1[5];
  *(void *)(v14 + 40) = v15;
  *(void *)(v14 + 48) = 0x726564616548;
  *(void *)(v14 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v17 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v17)
  {
    sub_255EEFD90();

    sub_255E8181C(0, &qword_269F37E50);
    sub_255E80D2C();
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v8, v10, v12);
    swift_bridgeObjectRelease();
    sub_255E80DBC((uint64_t)v5, a1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E7F9E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for MedicalIDCellHeaderView();
  uint64_t v4 = *(void **)((char *)v1 + v3[6]);
  if (!v4)
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
    sub_255EEE9E0();
    __break(1u);
LABEL_9:
    sub_255D7ED10(0, &qword_269F35500);
    sub_255DD7C58(&qword_269F35DD8, &qword_269F35500);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if ((objc_msgSend(v4, sel_isEditingAvailable) & 1) == 0)
  {
    sub_255E80D0C((uint64_t)v22);
    sub_255E815D4((uint64_t)v22, (uint64_t)v40, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    return sub_255E815D4((uint64_t)v40, a1, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  }
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[6];
  uint64_t v8 = *(void **)((char *)v1 + v3[7]);
  if (!v8) {
    goto LABEL_9;
  }
  uint64_t v9 = *(void **)((char *)v1 + v3[8]);
  if (v9)
  {
    uint64_t v15 = *v1;
    char v16 = *((unsigned char *)v1 + 17);
    char v17 = *((unsigned char *)v1 + 16);
    uint64_t v18 = v1[3];
    uint64_t v19 = v1[5];
    sub_255E81654(0, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, MEMORY[0x263F8D8F0]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v14 = v8;
    id v10 = v9;
    sub_255EEF810();
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
    v22[0] = v15;
    v22[1] = v5;
    char v23 = v17;
    char v24 = v16;
    int v25 = v20;
    __int16 v26 = v21;
    uint64_t v27 = v18;
    uint64_t v28 = v6;
    uint64_t v29 = v19;
    uint64_t v30 = v7;
    long long v31 = v40[0];
    long long v32 = v40[1];
    long long v33 = v40[2];
    uint64_t v34 = v41;
    uint64_t v35 = v42;
    id v36 = v14;
    id v37 = v10;
    uint64_t v38 = sub_255EEE9F0();
    uint64_t v39 = v11;
    nullsub_1(v22);
    sub_255E815D4((uint64_t)v22, (uint64_t)v40, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
    return sub_255E815D4((uint64_t)v40, a1, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  }
  sub_255D7ED10(0, (unint64_t *)&qword_269F35518);
  sub_255DD7C58(&qword_269F35DE0, (unint64_t *)&qword_269F35518);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v13 = v8;
LABEL_11:
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

uint64_t sub_255E7FDC0@<X0>(uint64_t a1@<X8>)
{
  sub_255E80100();
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v12[-v6];
  sub_255E7F7EC((uint64_t)&v12[-v6]);
  sub_255E7F9E4((uint64_t)v15);
  sub_255E815D4((uint64_t)v15, (uint64_t)v13, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_255E80A18((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))sub_255E80100);
  sub_255E815D4((uint64_t)v13, (uint64_t)v12, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_255E80A18((uint64_t)v5, a1, (uint64_t (*)(void))sub_255E80100);
  sub_255E80064();
  uint64_t v9 = a1 + *(int *)(v8 + 48);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + *(int *)(v8 + 64);
  sub_255E815D4((uint64_t)v12, (uint64_t)v14, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_255E815D4((uint64_t)v14, v10, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_255E80B64(v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_255E80A80);
  sub_255E80CAC((uint64_t)v7, (uint64_t (*)(void))sub_255E80100);
  sub_255E815D4((uint64_t)v12, (uint64_t)v15, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton);
  sub_255E80B64(v15, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_255E80BD0);
  return sub_255E80CAC((uint64_t)v5, (uint64_t (*)(void))sub_255E80100);
}

void sub_255E7FFB0()
{
  if (!qword_269F37E30)
  {
    sub_255E7EE20(255, &qword_269F37E38, (uint64_t (*)(uint64_t))sub_255E80064, MEMORY[0x263F1BAC8]);
    sub_255E80338(&qword_269F37E60, &qword_269F37E38, (uint64_t (*)(uint64_t))sub_255E80064);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37E30);
    }
  }
}

void sub_255E80064()
{
  if (!qword_269F37E40)
  {
    sub_255E80100();
    sub_255E81654(255, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F37E40);
    }
  }
}

void sub_255E80100()
{
  if (!qword_269F37E48)
  {
    sub_255E8181C(255, &qword_269F37E50);
    sub_255EEF090();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37E48);
    }
  }
}

void sub_255E80180(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255E801F0();
    uint64_t v7 = v6;
    sub_255E7FFB0();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_255E801F0()
{
  if (!qword_269F37E70)
  {
    sub_255E7EE20(255, &qword_269F37E78, (uint64_t (*)(uint64_t))sub_255E802A4, MEMORY[0x263F1BAC8]);
    sub_255E80338(&qword_269F37E88, &qword_269F37E78, (uint64_t (*)(uint64_t))sub_255E802A4);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37E70);
    }
  }
}

void sub_255E802A4()
{
  if (!qword_269F37E80)
  {
    sub_255E80100();
    sub_255E81654(255, &qword_269F37E58, (uint64_t)&type metadata for MedicalIDHeaderAccessoryButton, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37E80);
    }
  }
}

uint64_t sub_255E80338(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E7EE20(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 sub_255E8039C@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[7];
  long long v31 = v1[6];
  long long v32 = v3;
  long long v33 = v1[8];
  long long v4 = v1[3];
  __n128 v5 = (__n128)v1[1];
  long long v27 = v1[2];
  long long v28 = v4;
  long long v6 = v1[3];
  long long v7 = v1[5];
  long long v29 = v1[4];
  long long v30 = v7;
  long long v8 = v1[1];
  long long v25 = *v1;
  long long v26 = v8;
  long long v22 = v27;
  long long v23 = v6;
  uint64_t v24 = v29;
  uint64_t v34 = *((void *)v1 + 18);
  long long v20 = v25;
  __n128 v21 = v5;
  sub_255E81500(&v25);
  char v9 = sub_255E80598();
  long long v35 = v25;
  long long v36 = v26;
  long long v37 = v27;
  uint64_t v38 = v28;
  uint64_t v10 = MEMORY[0x263F8D4F8];
  sub_255E815D4((uint64_t)&v36 + 1, (uint64_t)&v39, &qword_269F37EC8, MEMORY[0x263F8D4F8]);
  sub_255E815D4((uint64_t)&v39, (uint64_t)&v40, &qword_269F37EC8, v10);
  if (v40 != 2) {
    v9 &= v40;
  }
  char v11 = v36 & 1;
  uint64_t v13 = *((void *)&v37 + 1);
  uint64_t v12 = v38;
  uint64_t v14 = swift_allocObject();
  long long v15 = v32;
  *(_OWORD *)(v14 + 112) = v31;
  *(_OWORD *)(v14 + 128) = v15;
  *(_OWORD *)(v14 + 144) = v33;
  *(void *)(v14 + 160) = v34;
  long long v16 = v28;
  *(_OWORD *)(v14 + 48) = v27;
  *(_OWORD *)(v14 + 64) = v16;
  long long v17 = v30;
  *(_OWORD *)(v14 + 80) = v29;
  *(_OWORD *)(v14 + 96) = v17;
  long long v18 = v26;
  *(_OWORD *)(v14 + 16) = v25;
  *(_OWORD *)(v14 + 32) = v18;
  sub_255DD059C();
  swift_bridgeObjectRetain();
  sub_255EEF840();
  __n128 result = v21;
  *(unsigned char *)a1 = v11;
  *(unsigned char *)(a1 + 1) = v9 & 1;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = sub_255E8172C;
  *(void *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 40) = v20;
  *(__n128 *)(a1 + 56) = v21;
  *(_OWORD *)(a1 + 72) = v22;
  *(_OWORD *)(a1 + 88) = v23;
  *(void *)(a1 + 104) = v24;
  return result;
}

uint64_t sub_255E80598()
{
  uint64_t v1 = *(void **)(v0 + 136);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 120);
    id v3 = v1;
    id v4 = objc_msgSend(v3, sel_isEditingAvailable);
    if (v4)
    {
      id v5 = objc_msgSend(v2, sel_profileIdentifier);
      id v6 = objc_msgSend(v5, sel_type);

      if (v6 == (id)3) {
        objc_msgSend(v3, sel_accessPoint);
      }
    }

    return (uint64_t)v4;
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_255E8069C()
{
  uint64_t v1 = (void *)v0[17];
  if (v1)
  {
    uint64_t v2 = (uint64_t (*)(void))v0[3];
    id v3 = (void *)v0[15];
    char v9 = (void *)v0[16];
    id v4 = v1;
    if ((objc_msgSend(v4, sel_isEditingAvailable) & 1) != 0
      && (id v5 = objc_msgSend(v3, sel_profileIdentifier),
          id v6 = objc_msgSend(v5, sel_type),
          v5,
          v6 == (id)3))
    {
      id v7 = objc_msgSend(v4, sel_accessPoint);

      if (v7 != (id)8)
      {
        sub_255EB7658(v9, &v10);
        sub_255DD059C();
        return sub_255EEF830();
      }
    }
    else
    {
    }
    return v2();
  }
  else
  {
    sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
    sub_255DD7C58((unint64_t *)&qword_269F35578, (unint64_t *)&qword_269F354E8);
    uint64_t result = sub_255EEE9E0();
    __break(1u);
  }
  return result;
}

void sub_255E808A0()
{
  if (!qword_269F37E90)
  {
    sub_255E7EE20(255, &qword_269F37E38, (uint64_t (*)(uint64_t))sub_255E80064, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37E90);
    }
  }
}

uint64_t sub_255E80938(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E80980()
{
  if (!qword_269F37EA8)
  {
    sub_255E7EE20(255, &qword_269F37E78, (uint64_t (*)(uint64_t))sub_255E802A4, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37EA8);
    }
  }
}

uint64_t sub_255E80A18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255E80A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_255E09390(a8, a9);
    id v19 = a18;
    swift_retain();
    id v20 = a16;
    id v21 = a17;
  }
}

void *sub_255E80B64(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void sub_255E80BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_255E092A8(a8, a9);

    swift_release();
  }
}

uint64_t sub_255E80CAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_255E80D0C(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

unint64_t sub_255E80D2C()
{
  unint64_t result = qword_269F37EB0;
  if (!qword_269F37EB0)
  {
    sub_255E8181C(255, &qword_269F37E50);
    sub_255E5D6E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37EB0);
  }
  return result;
}

uint64_t sub_255E80DBC(uint64_t a1, uint64_t a2)
{
  sub_255E80100();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for MedicalIDHeaderAccessoryButton(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  uint64_t v2 = *(void **)(a1 + 136);
}

uint64_t initializeWithCopy for MedicalIDHeaderAccessoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    uint64_t v9 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
  }
  char v11 = *(void **)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void **)(a2 + 128);
  uint64_t v13 = *(void **)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  id v14 = v11;
  id v15 = v12;
  id v16 = v13;
  return a1;
}

uint64_t assignWithCopy for MedicalIDHeaderAccessoryButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 56);
  uint64_t v6 = (long long *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v7)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8(a1 + 56);
      long long v9 = *(_OWORD *)(a2 + 72);
      long long v8 = *(_OWORD *)(a2 + 88);
      long long v10 = *v6;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v9;
      *(_OWORD *)(a1 + 88) = v8;
      *uint64_t v5 = v10;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *v6;
    long long v12 = *(_OWORD *)(a2 + 72);
    long long v13 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v12;
    *(_OWORD *)(a1 + 88) = v13;
    *uint64_t v5 = v11;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  id v14 = *(void **)(a2 + 120);
  id v15 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v14;
  id v16 = v14;

  long long v17 = *(void **)(a2 + 128);
  long long v18 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v17;
  id v19 = v17;

  id v20 = *(void **)(a1 + 136);
  id v21 = *(void **)(a2 + 136);
  *(void *)(a1 + 136) = v21;
  id v22 = v21;

  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for MedicalIDHeaderAccessoryButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 64);
  if (!v6)
  {
    sub_255DB9AF8(a1 + 56);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    goto LABEL_6;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  long long v10 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  long long v11 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);

  long long v12 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);

  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDHeaderAccessoryButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDHeaderAccessoryButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDHeaderAccessoryButton()
{
  return &type metadata for MedicalIDHeaderAccessoryButton;
}

unint64_t sub_255E813F0()
{
  unint64_t result = qword_269F37EB8;
  if (!qword_269F37EB8)
  {
    sub_255E80180(255, &qword_269F37EC0, MEMORY[0x263F19B28]);
    sub_255E80938(&qword_269F37E98, (void (*)(uint64_t))sub_255E801F0);
    sub_255E80938(&qword_269F37EA0, (void (*)(uint64_t))sub_255E7FFB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37EB8);
  }
  return result;
}

uint64_t sub_255E814E4()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_255E81500(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  long long v9 = (void *)a1[15];
  long long v10 = (void *)a1[16];
  uint64_t v8 = (void *)a1[17];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_255E09390(v2, v3);
  id v4 = v8;
  swift_retain();
  id v5 = v9;
  id v6 = v10;
  return a1;
}

uint64_t sub_255E815D4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  sub_255E81654(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_255E81654(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E816A0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_255E8172C()
{
  return sub_255E8069C();
}

unint64_t sub_255E8178C()
{
  unint64_t result = qword_269F37ED0;
  if (!qword_269F37ED0)
  {
    sub_255E8181C(255, &qword_269F37ED8);
    sub_255E81868();
    sub_255E08F30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37ED0);
  }
  return result;
}

void sub_255E8181C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_255EEE870();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_255E81868()
{
  unint64_t result = qword_269F37EE0;
  if (!qword_269F37EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37EE0);
  }
  return result;
}

id static _HKMedicalIDData.mockMedicalIDData(listVersion:)(uint64_t a1, int a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9F8]), sel_init);
  unint64_t v5 = (void *)sub_255EEFD50();
  objc_msgSend(v4, sel_setName_, v5);

  v91.width = 1.0;
  v91.height = 1.0;
  UIGraphicsBeginImageContextWithOptions(v91, 0, 0.0);
  id v6 = objc_msgSend(self, sel_orangeColor);
  objc_msgSend(v6, sel_setFill);

  v92.origin.x = 0.0;
  v92.origin.y = 0.0;
  v92.size.width = 1.0;
  v92.size.height = 1.0;
  UIRectFill(v92);
  uint64_t v7 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  uint64_t v88 = a1;
  LODWORD(v84) = a2;
  if (v7)
  {
    uint64_t v8 = UIImagePNGRepresentation(v7);

    if (v8)
    {
      uint64_t v9 = sub_255EEE050();
      unint64_t v11 = v10;

      uint64_t v7 = (UIImage *)sub_255EEE040();
      sub_255D80D04(v9, v11);
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  objc_msgSend(v4, sel_setPictureData_, v7);

  uint64_t v12 = sub_255EEDF60();
  uint64_t v86 = *(void *)(v12 - 8);
  uint64_t v87 = v12;
  MEMORY[0x270FA5388](v12);
  id v14 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E8264C(0, &qword_269F37EE8, MEMORY[0x270FA9920]);
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v18 = sub_255EEE280();
  uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v85((char *)&v77 - v17, 1, 1, v18);
  sub_255E8264C(0, &qword_269F37EF0, MEMORY[0x270FA99E8]);
  id v89 = v4;
  MEMORY[0x270FA5388](v19 - 8);
  id v21 = (char *)&v77 - v20;
  uint64_t v22 = sub_255EEE2B0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_255EEDF40();
  sub_255EEDF30();
  sub_255EEDEE0();
  sub_255EEDF10();
  uint64_t v23 = sub_255EEDEF0();
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = (char *)&v77 - v17;
  uint64_t v25 = sub_255EEE210();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  long long v28 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v28, *MEMORY[0x263F07738], v25);
  sub_255EEE220();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  v85(v24, 0, 1, v18);
  sub_255EEDF50();
  uint64_t v85 = v14;
  long long v29 = (void *)sub_255EEDEA0();
  objc_msgSend(v89, sel_setGregorianBirthday_, v29);

  long long v30 = self;
  id v31 = objc_msgSend(v30, sel_footUnit);
  long long v32 = self;
  id v33 = objc_msgSend(v32, sel_quantityWithUnit_doubleValue_, v31, 5.58);

  objc_msgSend(v89, sel_setHeight_, v33);
  id v34 = objc_msgSend(v30, sel_poundUnit);
  id v35 = v89;
  id v36 = objc_msgSend(v32, sel_quantityWithUnit_doubleValue_, v34, 150.0);

  objc_msgSend(v35, sel_setWeight_, v36);
  objc_msgSend(v35, sel_setBloodType_, 1);
  sub_255D7ED10(0, (unint64_t *)&qword_269F35070);
  long long v37 = (void *)sub_255EF01C0();
  objc_msgSend(v35, sel_setIsOrganDonor_, v37);

  uint64_t v38 = (void *)sub_255EEFD50();
  objc_msgSend(v35, sel_setPrimaryLanguageCode_, v38);

  char v39 = (void *)sub_255EEFD50();
  objc_msgSend(v35, sel_setMedicalConditions_, v39);

  char v40 = (void *)sub_255EEFD50();
  objc_msgSend(v35, sel_setAllergyInfo_, v40);

  uint64_t v41 = (void *)sub_255EEFD50();
  objc_msgSend(v35, sel_setMedicationInfo_, v41);

  uint64_t v42 = (void *)sub_255EEFD50();
  objc_msgSend(v35, sel_setMedicalNotes_, v42);

  id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9B8]), sel_init);
  long long v44 = (void *)sub_255EEFD50();
  objc_msgSend(v43, sel_setName_, v44);

  uint64_t v45 = (void *)sub_255EEFD50();
  objc_msgSend(v43, sel_setPhoneNumber_, v45);

  long long v46 = (void *)sub_255EEFD50();
  objc_msgSend(v43, sel_setRelationship_, v46);

  sub_255E826A0();
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_255EF6BE0;
  *(void *)(v47 + 32) = v43;
  uint64_t v90 = v47;
  sub_255EEFEB0();
  sub_255D7ED10(0, &qword_269F36C88);
  id v48 = v43;
  long long v49 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_setEmergencyContacts_, v49);

  if (v84)
  {
    (*(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v86 + 8))(v85, v87);
  }
  else
  {
    id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0AA00]), sel_init);
    id v84 = v48;
    uint64_t v51 = v50;
    uint64_t v52 = (void *)sub_255EEFD50();
    objc_msgSend(v51, sel_setTextDescription_, v52);

    id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0AA00]), sel_init);
    uint64_t v54 = (void *)sub_255EEFD50();
    objc_msgSend(v53, (SEL)&selRef__setDateOfBirthComponents_error_ + 7, v54);

    uint64_t v55 = swift_allocObject();
    long long v81 = xmmword_255EF7070;
    *(_OWORD *)(v55 + 16) = xmmword_255EF7070;
    *(void *)(v55 + 32) = v51;
    *(void *)(v55 + 40) = v53;
    uint64_t v90 = v55;
    sub_255EEFEB0();
    sub_255D7ED10(0, &qword_269F37EF8);
    id v83 = v51;
    id v82 = v53;
    uint64_t v56 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setMedicationsList_, v56);

    uint64_t v57 = (void *)sub_255EF01C0();
    objc_msgSend(v35, sel_setMedicationsListVersion_, v57);

    id v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9E8]), sel_init);
    uint64_t v59 = (void *)sub_255EEFD50();
    objc_msgSend(v58, (SEL)&selRef__setDateOfBirthComponents_error_ + 7, v59);

    id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9E8]), sel_init);
    uint64_t v61 = (void *)sub_255EEFD50();
    objc_msgSend(v60, (SEL)&selRef__setDateOfBirthComponents_error_ + 7, v61);

    id v62 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9E8]), sel_init);
    uint64_t v63 = (void *)sub_255EEFD50();
    objc_msgSend(v62, (SEL)&selRef__setDateOfBirthComponents_error_ + 7, v63);

    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_255EF7080;
    *(void *)(v64 + 32) = v58;
    *(void *)(v64 + 40) = v60;
    *(void *)(v64 + 48) = v62;
    uint64_t v90 = v64;
    sub_255EEFEB0();
    sub_255D7ED10(0, &qword_269F37F00);
    id v80 = v58;
    id v79 = v60;
    id v78 = v62;
    id v65 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setAllergiesList_, v65);

    uint64_t v66 = (void *)sub_255EF01C0();
    objc_msgSend(v35, sel_setAllergiesListVersion_, v66);

    id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9F0]), sel_init);
    uint64_t v68 = (void *)sub_255EEFD50();
    objc_msgSend(v67, sel_setTextDescription_, v68);

    id v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9F0]), sel_init);
    uint64_t v70 = (void *)sub_255EEFD50();
    objc_msgSend(v69, sel_setTextDescription_, v70);

    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = v81;
    *(void *)(v71 + 32) = v67;
    *(void *)(v71 + 40) = v69;
    uint64_t v90 = v71;
    sub_255EEFEB0();
    sub_255D7ED10(0, &qword_269F37F08);
    id v72 = v67;
    id v73 = v69;
    uint64_t v74 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setConditionsList_, v74);

    uint64_t v75 = (void *)sub_255EF01C0();
    objc_msgSend(v35, sel_setConditionsListVersion_, v75);

    (*(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v86 + 8))(v85, v87);
  }
  return v35;
}

void sub_255E8264C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EF01E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E826A0()
{
  if (!qword_269F37DE0)
  {
    unint64_t v0 = sub_255EF0490();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37DE0);
    }
  }
}

uint64_t *sub_255E826FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    unint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_255E86668(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_255EEE730();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *unint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    unint64_t v11 = (char *)v4 + v9;
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *(void *)v12;
    LOBYTE(v12) = v12[8];
    *(void *)unint64_t v11 = v13;
    _OWORD v11[8] = (char)v12;
    id v14 = (char *)v4 + v10;
    uint64_t v15 = (char *)a2 + v10;
    *id v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_255E82874(uint64_t a1)
{
  sub_255E86668(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  return swift_release();
}

void *sub_255E82950(void *a1, void *a2, uint64_t a3)
{
  sub_255E86668(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_255EEE730();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  _OWORD v9[8] = (char)v10;
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a2 + v8;
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_255E82A7C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255E85BB0((uint64_t)a1, (uint64_t)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8], (uint64_t (*)(void))sub_255E86668);
    sub_255E86668(0, (unint64_t *)&qword_269F35580, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_255EEE730();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = *(void *)v11;
  LOBYTE(v11) = v11[8];
  *(void *)uint64_t v10 = v12;
  _OWORD v10[8] = (char)v11;
  swift_retain();
  swift_release();
  uint64_t v13 = *(int *)(a3 + 24);
  id v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *id v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_255E82C04(char *a1, char *a2, uint64_t a3)
{
  sub_255E86668(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_255EEE730();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  _OWORD v11[8] = v12[8];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  return a1;
}

char *sub_255E82D1C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255E85BB0((uint64_t)a1, (uint64_t)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8], (uint64_t (*)(void))sub_255E86668);
    sub_255E86668(0, (unint64_t *)&qword_269F35580, v6, v7);
    uint64_t v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  LOBYTE(v13) = v13[8];
  *(void *)uint64_t v12 = v14;
  long long v12[8] = (char)v13;
  swift_release();
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  unint64_t v17 = &a2[v15];
  *uint64_t v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_release();
  return a1;
}

uint64_t sub_255E82E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E82EB0);
}

uint64_t sub_255E82EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_255E86668(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_255E82FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E82FC4);
}

void sub_255E82FC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_255E86668(0, &qword_269F35720, MEMORY[0x263F188C0], MEMORY[0x263F185D0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
}

uint64_t type metadata accessor for MedicalIDDeleteView()
{
  uint64_t result = qword_269F37F28;
  if (!qword_269F37F28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E83100()
{
  sub_255E86668(319, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_255E831D0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_255E831EC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_255E832DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t (*)(void))sub_255DE2878, &qword_269F35F88, sub_255DE2878).n128_u64[0];
  return result;
}

double sub_255E83264@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_255E832DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, type metadata accessor for PersonInfoView, &qword_269F35F70, (void (*)(uint64_t))type metadata accessor for PersonInfoView).n128_u64[0];
  return result;
}

__n128 sub_255E832DC@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(void), unint64_t *a17, void (*a18)(uint64_t))
{
  uint64_t v20 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_255EF00D0();
    long long v29 = (void *)sub_255EEF150();
    sub_255EEE3A0();

    uint64_t v20 = a16;
  }
  sub_255EEE9B0();
  sub_255E863C0(v18, a9, v20);
  sub_255E86718(0, a17, a18);
  id v31 = (_OWORD *)(a9 + *(int *)(v30 + 36));
  v31[4] = v37;
  v31[5] = v38;
  v31[6] = v39;
  *id v31 = v33;
  v31[1] = v34;
  __n128 result = v36;
  v31[2] = v35;
  v31[3] = v36;
  return result;
}

uint64_t sub_255E834CC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_255EF00D0();
    uint64_t v23 = (void *)sub_255EEF150();
    sub_255EEE3A0();
  }
  sub_255EEE9B0();
  long long v24 = v13[5];
  a9[4] = v13[4];
  a9[5] = v24;
  a9[6] = v13[6];
  *(_OWORD *)((char *)a9 + 105) = *(_OWORD *)((char *)v13 + 105);
  long long v25 = v13[1];
  *a9 = *v13;
  a9[1] = v25;
  long long v26 = v13[3];
  a9[2] = v13[2];
  a9[3] = v26;
  a9[8] = v28;
  a9[9] = v29;
  a9[13] = v33;
  a9[14] = v34;
  a9[11] = v31;
  a9[12] = v32;
  a9[10] = v30;
  return sub_255E8651C((uint64_t)v13);
}

uint64_t sub_255E8369C@<X0>(uint64_t a1@<X8>)
{
  v15[2] = a1;
  sub_255E853BC(0, &qword_269F37F38, sub_255E85388, MEMORY[0x263F1A470]);
  v15[1] = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v16 = (char *)v15 - v3;
  sub_255E83A30((uint64_t)v15 - v3);
  uint64_t v4 = sub_255EEFD40();
  MEMORY[0x270FA5388](v4 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  int v5 = (void *)qword_269F352A8;
  uint64_t v6 = sub_255EEE200();
  MEMORY[0x270FA5388](v6 - 8);
  id v7 = v5;
  sub_255EEE1F0();
  uint64_t v19 = sub_255EEFDA0();
  uint64_t v20 = v8;
  uint64_t v9 = (char *)(v1 + *(int *)(type metadata accessor for MedicalIDDeleteView() + 24));
  char v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  char v17 = v10;
  uint64_t v18 = v11;
  sub_255E866CC(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  uint64_t v12 = sub_255EEF840();
  MEMORY[0x270FA5388](v12);
  sub_255E86668(0, &qword_269F37F70, (uint64_t (*)(uint64_t))sub_255E85678, MEMORY[0x263F1BAC8]);
  sub_255E85758();
  sub_255DAD520();
  sub_255E85B4C(&qword_269F37FB0, &qword_269F37F70, (uint64_t (*)(uint64_t))sub_255E85678);
  uint64_t v13 = (uint64_t)v16;
  sub_255EEF540();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_255E85BB0(v13, (uint64_t)&qword_269F37F38, (uint64_t)sub_255E85388, MEMORY[0x263F1A470], (uint64_t (*)(void))sub_255E853BC);
}

void sub_255E83A30(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v48 = a1;
  uint64_t v54 = sub_255EEE920();
  MEMORY[0x270FA5388](v54);
  uint64_t v56 = (uint64_t *)((char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v52 = sub_255EEE630();
  uint64_t v4 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MedicalIDDeleteView();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v49 + 64);
  MEMORY[0x270FA5388](v6 - 8);
  sub_255E8555C();
  uint64_t v50 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E854C8();
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E85430();
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E85388(0);
  uint64_t v55 = v20;
  MEMORY[0x270FA5388](v20);
  id v53 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E853BC(0, &qword_269F37F38, sub_255E85388, MEMORY[0x263F1A470]);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v47 = (char *)&v47 - v23;
  sub_255E863C0(v2, (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
  unint64_t v24 = (*(unsigned __int8 *)(v49 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v25 = swift_allocObject();
  sub_255E85C14((uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24);
  sub_255E86718(0, &qword_269F37F60, (void (*)(uint64_t))sub_255E3942C);
  sub_255E855DC();
  sub_255EEF870();
  id v26 = objc_msgSend(self, sel_tertiarySystemFillColor);
  uint64_t v27 = MEMORY[0x25A29B180](v26);
  LOBYTE(v7) = sub_255EEF180();
  uint64_t v28 = v50;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v11, v50);
  long long v29 = &v15[*(int *)(v13 + 44)];
  *(void *)long long v29 = v27;
  v29[8] = v7;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v28);
  long long v31 = v51;
  uint64_t v30 = v52;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v51, *MEMORY[0x263F18558], v52);
  uint64_t KeyPath = swift_getKeyPath();
  long long v33 = (uint64_t *)&v19[*(int *)(v17 + 44)];
  sub_255E86668(0, &qword_269F36810, MEMORY[0x263F18570], MEMORY[0x263F1A418]);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v33 + *(int *)(v34 + 28), v31, v30);
  uint64_t *v33 = KeyPath;
  sub_255E863C0((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(void))sub_255E854C8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v30);
  sub_255E86428((uint64_t)v15, (uint64_t (*)(void))sub_255E854C8);
  if (qword_269F34C00 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_269F37F10;
  __n128 v36 = v56;
  long long v37 = (char *)v56 + *(int *)(v54 + 20);
  uint64_t v38 = *MEMORY[0x263F19860];
  uint64_t v39 = sub_255EEED40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v37, v38, v39);
  *__n128 v36 = v35;
  v36[1] = v35;
  uint64_t v40 = (uint64_t)v53;
  uint64_t v41 = (uint64_t)&v53[*(int *)(v55 + 36)];
  sub_255E863C0((uint64_t)v36, v41, MEMORY[0x263F19048]);
  sub_255E394B8();
  *(_WORD *)(v41 + *(int *)(v42 + 36)) = 256;
  sub_255E863C0((uint64_t)v19, v40, (uint64_t (*)(void))sub_255E85430);
  sub_255E86428((uint64_t)v36, MEMORY[0x263F19048]);
  sub_255E86428((uint64_t)v19, (uint64_t (*)(void))sub_255E85430);
  sub_255E866CC(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_255EF1E20;
  *(void *)(v43 + 32) = 0x496C61636964654DLL;
  *(void *)(v43 + 40) = 0xE900000000000044;
  strcpy((char *)(v43 + 48), "DeleteButton");
  *(unsigned char *)(v43 + 61) = 0;
  *(_WORD *)(v43 + 62) = -5120;
  long long v44 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v45 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v45)
  {
    sub_255EEFD90();

    sub_255E85830();
    uint64_t v46 = (uint64_t)v47;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255E86428(v40, (uint64_t (*)(void))sub_255E85388);
    sub_255E86488(v46, v48);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E84214@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v41 = a2;
  uint64_t v3 = type metadata accessor for MedicalIDDeleteView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E86668(0, &qword_269F351C8, MEMORY[0x263F18380], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v35 - v8;
  sub_255E85708(0, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v40 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v39 = (char *)&v35 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v38 = (char *)&v35 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v42 = (char *)&v35 - v19;
  sub_255EEE4E0();
  uint64_t v20 = sub_255EEE4F0();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
  uint64_t v37 = v21 + 56;
  v36(v9, 0, 1, v20);
  sub_255E863C0(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
  unint64_t v22 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v23 = swift_allocObject();
  sub_255E85C14((uint64_t)v6, v23 + v22);
  sub_255EEF860();
  sub_255EEE4D0();
  v36(v9, 0, 1, v20);
  sub_255E863C0(v35, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
  uint64_t v24 = swift_allocObject();
  sub_255E85C14((uint64_t)v6, v24 + v22);
  uint64_t v25 = v38;
  sub_255EEF860();
  id v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v27 = v39;
  uint64_t v28 = v42;
  v26(v39, v42, v11);
  long long v29 = v40;
  uint64_t v30 = v25;
  v26(v40, v25, v11);
  long long v31 = v41;
  v26(v41, v27, v11);
  sub_255E85678();
  v26(&v31[*(int *)(v32 + 48)], v29, v11);
  long long v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v30, v11);
  v33(v28, v11);
  v33(v29, v11);
  return ((uint64_t (*)(char *, uint64_t))v33)(v27, v11);
}

uint64_t sub_255E846D8@<X0>(uint64_t a1@<X8>)
{
  return sub_255E848F0(a1);
}

uint64_t sub_255E846EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDDeleteView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E86668(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = sub_255EEFFA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_255E863C0(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
  sub_255EEFF70();
  uint64_t v10 = sub_255EEFF60();
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8F500];
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v13;
  sub_255E85C14((uint64_t)v5, v12 + v11);
  sub_255E09D10((uint64_t)v8, (uint64_t)&unk_269F37FC0, v12);
  return swift_release();
}

uint64_t sub_255E848D4@<X0>(uint64_t a1@<X8>)
{
  return sub_255E848F0(a1);
}

uint64_t sub_255E848F0@<X0>(uint64_t a1@<X8>)
{
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v2 = (id)qword_269F352A8;
  uint64_t result = sub_255EEF3C0();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_255E849B8()
{
  return sub_255EEF830();
}

__n128 sub_255E84A44@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255EEF260();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v6 = (id)qword_269F352A8;
  uint64_t v7 = sub_255EEF3C0();
  uint64_t v50 = v8;
  char v10 = v9 & 1;
  sub_255EEF200();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1A680], v2);
  sub_255EEF280();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = v50;
  uint64_t v12 = sub_255EEF3B0();
  uint64_t v14 = v13;
  char v16 = v15;
  v48[1] = v17;
  swift_release();
  char v18 = v16 & 1;
  sub_255D85120(v7, v11, v10);
  swift_bridgeObjectRelease();
  *(void *)&v51[0] = sub_255EEF6E0();
  uint64_t v50 = sub_255EEF370();
  uint64_t v20 = v19;
  int v49 = v21;
  uint64_t v23 = v22;
  sub_255D85120(v12, v14, v18);
  swift_release();
  swift_bridgeObjectRelease();
  char v24 = sub_255EEF170();
  if (qword_269F34C08 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  char v33 = sub_255EEF1E0();
  sub_255EEE540();
  char v34 = v49 & 1;
  char v78 = v49 & 1;
  char v75 = 0;
  char v72 = 0;
  uint64_t v35 = v50;
  uint64_t v52 = v50;
  uint64_t v53 = v20;
  char v54 = v49 & 1;
  *(_DWORD *)uint64_t v55 = *(_DWORD *)v77;
  *(_DWORD *)&v55[3] = *(_DWORD *)&v77[3];
  uint64_t v56 = v23;
  char v57 = v24;
  *(_DWORD *)&v58[3] = *(_DWORD *)&v76[3];
  *(_DWORD *)id v58 = *(_DWORD *)v76;
  uint64_t v59 = v26;
  uint64_t v60 = v28;
  uint64_t v61 = v30;
  uint64_t v62 = v32;
  char v63 = 0;
  *(_DWORD *)&v64[3] = *(_DWORD *)&v74[3];
  *(_DWORD *)uint64_t v64 = *(_DWORD *)v74;
  char v65 = v33;
  *(_DWORD *)&v66[3] = *(_DWORD *)&v73[3];
  *(_DWORD *)uint64_t v66 = *(_DWORD *)v73;
  uint64_t v67 = v36;
  uint64_t v68 = v37;
  uint64_t v69 = v38;
  uint64_t v70 = v39;
  char v71 = 0;
  if (qword_269F34C10 != -1) {
    swift_once();
  }
  double v40 = *(double *)&qword_269F37F20;
  sub_255EEFB10();
  sub_255E834CC(0.0, 1, 0.0, 1, INFINITY, 0, v40, 0, v51, 0.0, 1, 0.0, 1);
  sub_255D85120(v35, v20, v34);
  swift_bridgeObjectRelease();
  long long v41 = v51[13];
  *(_OWORD *)(a1 + 192) = v51[12];
  *(_OWORD *)(a1 + 208) = v41;
  *(_OWORD *)(a1 + 224) = v51[14];
  long long v42 = v51[9];
  *(_OWORD *)(a1 + 128) = v51[8];
  *(_OWORD *)(a1 + 144) = v42;
  long long v43 = v51[11];
  *(_OWORD *)(a1 + 160) = v51[10];
  *(_OWORD *)(a1 + 176) = v43;
  long long v44 = v51[5];
  *(_OWORD *)(a1 + 64) = v51[4];
  *(_OWORD *)(a1 + 80) = v44;
  long long v45 = v51[7];
  *(_OWORD *)(a1 + 96) = v51[6];
  *(_OWORD *)(a1 + 112) = v45;
  long long v46 = v51[1];
  *(_OWORD *)a1 = v51[0];
  *(_OWORD *)(a1 + 16) = v46;
  __n128 result = (__n128)v51[3];
  *(_OWORD *)(a1 + 32) = v51[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_255E84EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for MedicalIDDeleteView();
  v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[4] = v6;
  v4[5] = *(void *)(v6 + 64);
  _OWORD v4[6] = swift_task_alloc();
  sub_255E86668(0, &qword_269F34FE0, MEMORY[0x263F8F520], MEMORY[0x263F8D8F0]);
  v4[7] = swift_task_alloc();
  v4[8] = sub_255EEFF70();
  v4[9] = sub_255EEFF60();
  uint64_t v8 = sub_255EEFF20();
  v4[10] = v8;
  v4[11] = v7;
  return MEMORY[0x270FA2498](sub_255E85024, v8, v7);
}

uint64_t sub_255E85024()
{
  char v1 = *(unsigned char *)(v0[2] + *(int *)(v0[3] + 20) + 8);
  uint64_t v2 = swift_retain();
  v0[12] = sub_255DAA2A0(v2, v1);
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_255E850EC;
  return MedicalIDDataManager.delete()();
}

uint64_t sub_255E850EC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 80);
  return MEMORY[0x270FA2498](sub_255E85230, v3, v2);
}

uint64_t sub_255E85230()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  swift_release();
  uint64_t v5 = sub_255EEFFA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_255E863C0(v4, v1, (uint64_t (*)(void))type metadata accessor for MedicalIDDeleteView);
  uint64_t v6 = sub_255EEFF60();
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8F500];
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v9;
  sub_255E85C14(v1, v8 + v7);
  sub_255E09D10(v2, (uint64_t)&unk_269F37FD0, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void sub_255E85388(uint64_t a1)
{
}

void sub_255E853BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E85430()
{
  if (!qword_269F37F48)
  {
    sub_255E854C8();
    sub_255E86668(255, &qword_269F36810, MEMORY[0x263F18570], MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37F48);
    }
  }
}

void sub_255E854C8()
{
  if (!qword_269F37F50)
  {
    sub_255E8555C();
    sub_255E85708(255, &qword_269F36EE8, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A158]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37F50);
    }
  }
}

void sub_255E8555C()
{
  if (!qword_269F37F58)
  {
    sub_255E86718(255, &qword_269F37F60, (void (*)(uint64_t))sub_255E3942C);
    sub_255E855DC();
    unint64_t v0 = sub_255EEF8A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37F58);
    }
  }
}

unint64_t sub_255E855DC()
{
  unint64_t result = qword_269F37F68;
  if (!qword_269F37F68)
  {
    sub_255E86718(255, &qword_269F37F60, (void (*)(uint64_t))sub_255E3942C);
    sub_255E39848();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37F68);
  }
  return result;
}

uint64_t sub_255E85670@<X0>(char *a1@<X8>)
{
  return sub_255E84214(*(void *)(v1 + 16), a1);
}

void sub_255E85678()
{
  if (!qword_269F37F78)
  {
    sub_255E85708(255, (unint64_t *)&qword_269F35EA8, MEMORY[0x263F1A830], MEMORY[0x263F1A820], MEMORY[0x263F1B5E8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F37F78);
    }
  }
}

void sub_255E85708(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_255E85758()
{
  unint64_t result = qword_269F37F80;
  if (!qword_269F37F80)
  {
    sub_255E853BC(255, &qword_269F37F38, sub_255E85388, MEMORY[0x263F1A470]);
    sub_255E85830();
    sub_255E85B04(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37F80);
  }
  return result;
}

unint64_t sub_255E85830()
{
  unint64_t result = qword_269F37F88;
  if (!qword_269F37F88)
  {
    sub_255E85388(255);
    sub_255E858D8();
    sub_255E85B04(&qword_269F36F30, (void (*)(uint64_t))sub_255E394B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37F88);
  }
  return result;
}

unint64_t sub_255E858D8()
{
  unint64_t result = qword_269F37F90;
  if (!qword_269F37F90)
  {
    sub_255E85430();
    sub_255E85950();
    sub_255E85A7C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37F90);
  }
  return result;
}

unint64_t sub_255E85950()
{
  unint64_t result = qword_269F37F98;
  if (!qword_269F37F98)
  {
    sub_255E854C8();
    sub_255E85B04(&qword_269F37FA0, (void (*)(uint64_t))sub_255E8555C);
    sub_255E859F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37F98);
  }
  return result;
}

unint64_t sub_255E859F8()
{
  unint64_t result = qword_269F36F28;
  if (!qword_269F36F28)
  {
    sub_255E85708(255, &qword_269F36EE8, MEMORY[0x263F1B440], MEMORY[0x263F1B420], MEMORY[0x263F1A158]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F36F28);
  }
  return result;
}

unint64_t sub_255E85A7C()
{
  unint64_t result = qword_269F37FA8;
  if (!qword_269F37FA8)
  {
    sub_255E86668(255, &qword_269F36810, MEMORY[0x263F18570], MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F37FA8);
  }
  return result;
}

uint64_t sub_255E85B04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E85B4C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255E86668(255, a2, a3, MEMORY[0x263F1BAC8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E85BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_255E85C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDDeleteView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E85C78()
{
  return sub_255E86354();
}

uint64_t objectdestroyTm_19()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDDeleteView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_255E86668(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = sub_255EEE730();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E85DE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDDeleteView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return sub_255E846EC(v2);
}

uint64_t sub_255E85E44(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MedicalIDDeleteView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_255D7EE18;
  return sub_255E84EC8(a1, v5, v6, v7);
}

void sub_255E85F30()
{
  qword_269F37F10 = 0x4028000000000000;
}

void sub_255E85F40()
{
  qword_269F37F18 = 0x402E000000000000;
}

void sub_255E85F50()
{
  qword_269F37F20 = 0x4049000000000000;
}

uint64_t sub_255E85F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = sub_255EEE730();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  sub_255EEFF70();
  _OWORD v4[6] = sub_255EEFF60();
  uint64_t v7 = sub_255EEFF20();
  return MEMORY[0x270FA2498](sub_255E86054, v7, v6);
}

uint64_t sub_255E86054()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  swift_release();
  sub_255DAA4A8(v1);
  sub_255EEE720();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t objectdestroy_6Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for MedicalIDDeleteView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();
  sub_255E86668(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = sub_255EEE730();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E8625C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MedicalIDDeleteView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_255D7E778;
  return sub_255E85F60(a1, v5, v6, v7);
}

uint64_t sub_255E8634C()
{
  return sub_255E86354();
}

uint64_t sub_255E86354()
{
  return sub_255E849B8();
}

uint64_t sub_255E863C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E86428(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E86488(uint64_t a1, uint64_t a2)
{
  sub_255E853BC(0, &qword_269F37F38, sub_255E85388, MEMORY[0x263F1A470]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E8651C(uint64_t a1)
{
  return a1;
}

uint64_t sub_255E8655C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E86668(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E866CC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255E86718(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeWithCopy for ListInsetGroupedFooterView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ListInsetGroupedFooterView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ListInsetGroupedFooterView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ListInsetGroupedFooterView()
{
  return &type metadata for ListInsetGroupedFooterView;
}

uint64_t getEnumTagSinglePayload for ListCellModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ListCellModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255E869F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListCellModifier()
{
  return &type metadata for ListCellModifier;
}

ValueMetadata *type metadata accessor for ListInsetGroupedTableHeaderView()
{
  return &type metadata for ListInsetGroupedTableHeaderView;
}

uint64_t sub_255E86A40()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E86A5C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v56 = sub_255EEE920();
  MEMORY[0x270FA5388](v56);
  unsigned int v6 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255E87714(0);
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E877E4(0);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E87860(0);
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = sub_255EEF170();
  if (qword_269F34C18 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_255E87734();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v10, a1, v28);
  uint64_t v29 = &v10[*(int *)(v8 + 36)];
  *uint64_t v29 = v19;
  *((void *)v29 + 1) = v21;
  *((void *)v29 + 2) = v23;
  *((void *)v29 + 3) = v25;
  *((void *)v29 + 4) = v27;
  v29[40] = 0;
  char v30 = sub_255EEF1E0();
  if (qword_269F34C20 != -1) {
    swift_once();
  }
  sub_255EEE540();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_255E87A58((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))sub_255E87714);
  uint64_t v39 = &v14[*(int *)(v12 + 36)];
  char *v39 = v30;
  *((void *)v39 + 1) = v32;
  *((void *)v39 + 2) = v34;
  *((void *)v39 + 3) = v36;
  *((void *)v39 + 4) = v38;
  v39[40] = 0;
  sub_255E87AC0((uint64_t)v10, (uint64_t (*)(void))sub_255E87714);
  uint64_t v40 = sub_255EEFB10();
  uint64_t v42 = v41;
  long long v43 = self;
  if (a2)
  {
    uint64_t v58 = MEMORY[0x25A29B180](objc_msgSend(v43, sel_secondarySystemGroupedBackgroundColor));
    char v59 = 0;
  }
  else
  {
    uint64_t v58 = MEMORY[0x25A29B180](objc_msgSend(v43, sel_secondarySystemBackgroundColor));
    char v59 = 1;
  }
  sub_255EEEE00();
  uint64_t v44 = v60;
  char v45 = v61;
  sub_255E87A58((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))sub_255E877E4);
  long long v46 = &v18[*(int *)(v16 + 36)];
  *(void *)long long v46 = v44;
  _OWORD v46[8] = v45;
  *((void *)v46 + 2) = v40;
  *((void *)v46 + 3) = v42;
  sub_255E87AC0((uint64_t)v14, (uint64_t (*)(void))sub_255E877E4);
  if (qword_269F34A40 != -1) {
    swift_once();
  }
  uint64_t v47 = qword_269F3FD40;
  uint64_t v48 = (char *)v6 + *(int *)(v56 + 20);
  uint64_t v49 = *MEMORY[0x263F19860];
  uint64_t v50 = sub_255EEED40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 104))(v48, v49, v50);
  *unsigned int v6 = v47;
  v6[1] = v47;
  sub_255E879B0(0);
  uint64_t v52 = v57;
  uint64_t v53 = v57 + *(int *)(v51 + 36);
  sub_255E87A58((uint64_t)v6, v53, MEMORY[0x263F19048]);
  sub_255E394B8();
  *(_WORD *)(v53 + *(int *)(v54 + 36)) = 256;
  sub_255E87A58((uint64_t)v18, v52, (uint64_t (*)(void))sub_255E87860);
  sub_255E87AC0((uint64_t)v6, MEMORY[0x263F19048]);
  return sub_255E87AC0((uint64_t)v18, (uint64_t (*)(void))sub_255E87860);
}

uint64_t sub_255E86F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255E86A5C(a1, *v2, a2);
}

uint64_t sub_255E86F54()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E86F70@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_255EEF3C0();
  uint64_t v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = sub_255EEF2A0();
  uint64_t v10 = swift_getKeyPath();
  int v11 = sub_255EEEF30();
  char v12 = sub_255EEF170();
  char v13 = sub_255EEF190();
  if (qword_269F34C28 != -1) {
    swift_once();
  }
  uint64_t result = sub_255EEE540();
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = KeyPath;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 120) = v13;
  *(void *)(a1 + 128) = v15;
  *(void *)(a1 + 136) = v16;
  *(void *)(a1 + 144) = v17;
  *(void *)(a1 + 152) = v18;
  *(unsigned char *)(a1 + 160) = 0;
  return result;
}

uint64_t sub_255E870E8@<X0>(uint64_t a1@<X8>)
{
  return sub_255E86F70(a1);
}

uint64_t sub_255E870F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = a3;
  sub_255DE7714(0);
  uint64_t v39 = v5 - 8;
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v38 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255DE7748(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255DE76B4();
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E87534();
  uint64_t v41 = v14 - 8;
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_255EEF3D0();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  LOBYTE(a1) = v21 & 1;
  uint64_t v22 = *MEMORY[0x263F1A7B8];
  uint64_t v23 = sub_255EEF390();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v9, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v9, 0, 1, v23);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = v38;
  sub_255E87A58((uint64_t)v9, (uint64_t)v38 + *(int *)(v39 + 36), (uint64_t (*)(void))sub_255DE7748);
  *uint64_t v26 = KeyPath;
  sub_255E87A58((uint64_t)v26, (uint64_t)&v13[*(int *)(v11 + 44)], (uint64_t (*)(void))sub_255DE7714);
  *(void *)char v13 = v16;
  *((void *)v13 + 1) = v18;
  v13[16] = a1;
  *((void *)v13 + 3) = v20;
  sub_255D85214(v16, v18, a1);
  swift_bridgeObjectRetain();
  sub_255E87AC0((uint64_t)v26, (uint64_t (*)(void))sub_255DE7714);
  sub_255E87AC0((uint64_t)v9, (uint64_t (*)(void))sub_255DE7748);
  sub_255D85120(v16, v18, a1);
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_255EEF740();
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = v40;
  sub_255E87A58((uint64_t)v13, v40, (uint64_t (*)(void))sub_255DE76B4);
  char v30 = (uint64_t *)(v29 + *(int *)(v41 + 44));
  *char v30 = v28;
  v30[1] = v27;
  sub_255E87AC0((uint64_t)v13, (uint64_t (*)(void))sub_255DE76B4);
  uint64_t v31 = sub_255EEF2A0();
  uint64_t v32 = swift_getKeyPath();
  uint64_t v33 = v42;
  sub_255E87A58(v29, v42, (uint64_t (*)(void))sub_255E87534);
  sub_255E876F4(0);
  uint64_t v35 = (uint64_t *)(v33 + *(int *)(v34 + 36));
  uint64_t *v35 = v32;
  v35[1] = v31;
  return sub_255E87AC0(v29, (uint64_t (*)(void))sub_255E87534);
}

uint64_t sub_255E874D0@<X0>(uint64_t a1@<X8>)
{
  return sub_255E870F8(*v1, v1[1], a1);
}

uint64_t sub_255E874D8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255E874F4()
{
  qword_269F37FD8 = 0x4030000000000000;
}

void sub_255E87504()
{
  qword_269F37FE0 = 0x4020000000000000;
}

void sub_255E87514()
{
  qword_269F37FE8 = 0x4000000000000000;
}

void sub_255E87534()
{
  if (!qword_269F37FF0)
  {
    sub_255DE76B4();
    sub_255E5C6FC(255, (unint64_t *)&qword_269F36820, &qword_269F36828, MEMORY[0x263F1B440]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F37FF0);
    }
  }
}

uint64_t sub_255E875B4()
{
  return sub_255EEEB90();
}

uint64_t sub_255E875D8()
{
  return sub_255EEEB90();
}

uint64_t sub_255E875FC(uint64_t a1)
{
  sub_255DE7748(0);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255E87A58(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_255DE7748);
  return sub_255EEEBA0();
}

uint64_t sub_255E8769C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_255EEEA70();
  *a1 = result;
  return result;
}

uint64_t sub_255E876C8()
{
  return sub_255EEEA80();
}

void sub_255E876F4(uint64_t a1)
{
}

void sub_255E87714(uint64_t a1)
{
}

void sub_255E87734()
{
  if (!qword_269F38008)
  {
    sub_255E87790();
    unint64_t v0 = sub_255EEEF10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38008);
    }
  }
}

unint64_t sub_255E87790()
{
  unint64_t result = qword_269F38010;
  if (!qword_269F38010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38010);
  }
  return result;
}

void sub_255E877E4(uint64_t a1)
{
}

void sub_255E87804(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E87860(uint64_t a1)
{
}

void sub_255E87894()
{
  if (!qword_269F38028)
  {
    sub_255E87D10(255, &qword_269F38030, MEMORY[0x263F1B440], MEMORY[0x263F1B440], MEMORY[0x263F19B28]);
    sub_255E87920();
    unint64_t v0 = sub_255EEEDE0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38028);
    }
  }
}

unint64_t sub_255E87920()
{
  unint64_t result = qword_269F38038;
  if (!qword_269F38038)
  {
    sub_255E87D10(255, &qword_269F38030, MEMORY[0x263F1B440], MEMORY[0x263F1B440], MEMORY[0x263F19B28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38038);
  }
  return result;
}

void sub_255E879B0(uint64_t a1)
{
}

void sub_255E879E4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_255EEE870();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_255E87A58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E87AC0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_255E87B24()
{
  unint64_t result = qword_269F38048;
  if (!qword_269F38048)
  {
    sub_255E87804(255, &qword_269F38050, sub_255E87BB8);
    sub_255E87D60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38048);
  }
  return result;
}

void sub_255E87BB8(uint64_t a1)
{
}

void sub_255E87BD8()
{
  if (!qword_269F38060)
  {
    sub_255E87C6C(255);
    sub_255E87D10(255, (unint64_t *)&qword_269F36088, MEMORY[0x263F19E50], MEMORY[0x263F19E40], MEMORY[0x263F1A180]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38060);
    }
  }
}

void sub_255E87C6C(uint64_t a1)
{
}

void sub_255E87C8C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255E5C6FC(255, (unint64_t *)&qword_269F35178, &qword_269F35180, MEMORY[0x263F1A738]);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255E87D10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_255E87D60()
{
  unint64_t result = qword_269F38070;
  if (!qword_269F38070)
  {
    sub_255E87BB8(255);
    sub_255E8812C(&qword_269F38078, (void (*)(uint64_t))sub_255E87BD8, (void (*)(void))sub_255E87E1C, (void (*)(void))sub_255E5BB4C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38070);
  }
  return result;
}

uint64_t sub_255E87E1C()
{
  return sub_255E87E98(&qword_269F38080, sub_255E87C6C, (void (*)(void))sub_255DEABD4);
}

uint64_t sub_255E87E50()
{
  return sub_255E87E98(&qword_269F38088, sub_255E876F4, (void (*)(void))sub_255E87F3C);
}

uint64_t sub_255E87E98(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    sub_255E5C958(&qword_269F35198, (unint64_t *)&qword_269F35178, &qword_269F35180, MEMORY[0x263F1A738]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E87F3C()
{
  unint64_t result = qword_269F38090;
  if (!qword_269F38090)
  {
    sub_255E87534();
    sub_255E88004((unint64_t *)&qword_269F360A8, (void (*)(uint64_t))sub_255DE76B4, (void (*)(void))sub_255DE7B7C);
    sub_255E5C958(&qword_269F38098, (unint64_t *)&qword_269F36820, &qword_269F36828, MEMORY[0x263F1B440]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38090);
  }
  return result;
}

uint64_t sub_255E88004(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E88088(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E880D0()
{
  return sub_255E8812C(&qword_269F380A0, sub_255E879B0, (void (*)(void))sub_255E881B8, (void (*)(void))sub_255E398C0);
}

uint64_t sub_255E8812C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E881B8()
{
  return sub_255E8812C(&qword_269F380A8, sub_255E87860, (void (*)(void))sub_255E88200, (void (*)(void))sub_255E88320);
}

unint64_t sub_255E88200()
{
  unint64_t result = qword_269F380B0;
  if (!qword_269F380B0)
  {
    sub_255E877E4(255);
    sub_255E88278();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F380B0);
  }
  return result;
}

unint64_t sub_255E88278()
{
  unint64_t result = qword_269F380B8;
  if (!qword_269F380B8)
  {
    sub_255E87714(255);
    sub_255E88088(&qword_269F380C0, (void (*)(uint64_t))sub_255E87734);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F380B8);
  }
  return result;
}

uint64_t sub_255E88320()
{
  return sub_255E88088(&qword_269F380C8, (void (*)(uint64_t))sub_255E87894);
}

uint64_t sub_255E88354()
{
  id v0 = objc_msgSend(self, sel_systemRedColor);
  uint64_t result = MEMORY[0x25A29B0E0](v0);
  qword_269F3FE50 = result;
  return result;
}

uint64_t sub_255E88394()
{
  uint64_t result = sub_255EEF720();
  qword_269F3FE58 = result;
  return result;
}

uint64_t sub_255E883B4(uint64_t a1)
{
  uint64_t v2 = sub_255EEE100();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255E8AB10(0, &qword_269F35058, MEMORY[0x270FA9320], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v23[-v7];
  sub_255E0B4E8(a1, (uint64_t)&v23[-v7]);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_255D7ED4C((uint64_t)v8);
    return 0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08788]), sel_init);
    type metadata accessor for MedicalIDDataViewModel();
    uint64_t v11 = (void *)sub_255EEE1C0();
    objc_msgSend(v10, sel_setLocale_, v11);

    objc_msgSend(v10, sel_setDateStyle_, 2);
    uint64_t v12 = (void *)sub_255EEE0A0();
    id v13 = objc_msgSend(v10, sel_stringFromDate_, v12);

    uint64_t v14 = sub_255EEFD90();
    uint64_t v16 = v15;

    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v17 = sub_255EEFD40();
    MEMORY[0x270FA5388](v17 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v18 = (void *)qword_269F352A8;
    uint64_t v19 = sub_255EEE200();
    MEMORY[0x270FA5388](v19 - 8);
    id v20 = v18;
    sub_255EEE1F0();
    sub_255EEFDA0();
    sub_255E8AB10(0, (unint64_t *)&qword_269F37DB8, (uint64_t (*)(uint64_t))sub_255E7D3F0, MEMORY[0x263F8E0F8]);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_255EF20B0;
    *(void *)(v21 + 56) = MEMORY[0x263F8D310];
    *(void *)(v21 + 64) = sub_255E7D448();
    *(void *)(v21 + 32) = v14;
    *(void *)(v21 + 40) = v16;
    uint64_t v9 = sub_255EEFD60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_255E887BC(uint64_t a1)
{
  uint64_t v2 = sub_255EEE100();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255E8AB10(0, &qword_269F35058, MEMORY[0x270FA9320], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v23[-v7];
  sub_255E0B4E8(a1, (uint64_t)&v23[-v7]);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_255D7ED4C((uint64_t)v8);
    return 0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08788]), sel_init);
    uint64_t v11 = (void *)sub_255EEE1C0();
    objc_msgSend(v10, sel_setLocale_, v11);

    objc_msgSend(v10, sel_setDateStyle_, 2);
    uint64_t v12 = (void *)sub_255EEE0A0();
    id v13 = objc_msgSend(v10, sel_stringFromDate_, v12);

    uint64_t v14 = sub_255EEFD90();
    uint64_t v16 = v15;

    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v17 = sub_255EEFD40();
    MEMORY[0x270FA5388](v17 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v18 = (void *)qword_269F352A8;
    uint64_t v19 = sub_255EEE200();
    MEMORY[0x270FA5388](v19 - 8);
    id v20 = v18;
    sub_255EEE1F0();
    sub_255EEFDA0();
    sub_255E8AB10(0, (unint64_t *)&qword_269F37DB8, (uint64_t (*)(uint64_t))sub_255E7D3F0, MEMORY[0x263F8E0F8]);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_255EF20B0;
    *(void *)(v21 + 56) = MEMORY[0x263F8D310];
    *(void *)(v21 + 64) = sub_255E7D448();
    *(void *)(v21 + 32) = v14;
    *(void *)(v21 + 40) = v16;
    uint64_t v9 = sub_255EEFD60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

unint64_t sub_255E88BC4(uint64_t a1)
{
  return sub_255E88D38(a1, &qword_269F38170, &qword_269F35048);
}

unint64_t sub_255E88BE0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_255E8AD40();
  uint64_t v2 = sub_255EF0420();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_255E8AC14(v6, (uint64_t)&v15, (uint64_t (*)(void))sub_255E8ADAC);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_255E725A4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_255E8AC7C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_255E88D1C(uint64_t a1)
{
  return sub_255E88D38(a1, (unint64_t *)&qword_269F37AF8, &qword_269F37DB0);
}

unint64_t sub_255E88D38(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_255E8AE18(0, a2, a3);
  uint64_t v4 = (void *)sub_255EF0420();
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    id v10 = v9;
    unint64_t result = sub_255E725A4(v7, v8);
    if (v12) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v13 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_255E88E50(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_255E8AC8C(0, &qword_269F38158, MEMORY[0x263F8DFB0]);
  uint64_t v2 = (void *)sub_255EF0420();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_255E7261C();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_255E88F74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_255E8AB74();
  uint64_t v2 = sub_255EF0420();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_255E8AC14(v6, (uint64_t)&v13, (uint64_t (*)(void))sub_255E89C04);
    uint64_t v7 = v13;
    unint64_t result = sub_255E7261C(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_255E8AC7C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id MIUIMedicalIDNavigationBarView.init(healthStore:medicalIDData:showDateUpdated:locale:)(void *a1, void *a2, char a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  char v9 = (void *)sub_255EEE1C0();
  id v10 = objc_msgSend(v8, sel_initWithHealthStore_medicalIDData_showDateUpdated_locale_, a1, a2, a3 & 1, v9);

  uint64_t v11 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a4, v11);
  return v10;
}

id MIUIMedicalIDNavigationBarView.init(healthStore:medicalIDData:showDateUpdated:locale:)(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v89 = a4;
  int v85 = a3;
  if (a2)
  {
    id v8 = v4;
    id v87 = _HKMedicalIDData.displayName.getter();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v11 = v4;
    id v87 = 0;
    uint64_t v10 = 0;
  }
  sub_255E8AB10(0, &qword_269F35058, MEMORY[0x270FA9320], MEMORY[0x263F8D8F0]);
  unint64_t v13 = (*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12 - 8);
  long long v14 = (char *)&v77 - v13;
  uint64_t v88 = a2;
  if (a2)
  {
    id v15 = objc_msgSend(a2, sel_dateSaved);
    uint64_t v16 = (char *)&v77 - v13;
    if (MEMORY[0x270FA5388](v15))
    {
      sub_255EEE0D0();

      uint64_t v17 = sub_255EEE100();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
    }
    else
    {
      uint64_t v19 = sub_255EEE100();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v16, 1, 1, v19);
    }
    sub_255D8BB10((uint64_t)v16, (uint64_t)v14);
  }
  else
  {
    uint64_t v18 = sub_255EEE100();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))((char *)&v77 - v13, 1, 1, v18);
  }
  uint64_t v20 = sub_255EEE200();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v89, v20);
  type metadata accessor for MedicalIDNavigationBarViewModel();
  uint64_t v24 = (void *)swift_allocObject();
  id v25 = v87;
  v24[2] = a1;
  v24[3] = v25;
  v24[4] = v10;
  sub_255D8BB10((uint64_t)v14, (uint64_t)v24 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
  uint64_t v86 = v21;
  id v87 = (id)v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))((uint64_t)v24 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale, v23, v20);
  uint64_t v82 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_viewModel;
  *(void *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_viewModel] = v24;
  id v26 = objc_allocWithZone(MEMORY[0x263F82E00]);
  id v84 = a1;
  id v27 = objc_msgSend(v26, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView] = v27;
  objc_msgSend(v27, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v28 = objc_msgSend(self, sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x263F835F0]);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  sub_255E8AB10(0, &qword_269F380E8, (uint64_t (*)(uint64_t))sub_255E89C04, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  long long v83 = xmmword_255EF20B0;
  *(_OWORD *)(inited + 16) = xmmword_255EF20B0;
  uint64_t v31 = (void *)*MEMORY[0x263F817A0];
  *(void *)(inited + 32) = *MEMORY[0x263F817A0];
  sub_255E8AB10(0, &qword_269F380F8, (uint64_t (*)(uint64_t))sub_255E89C70, v29);
  uint64_t v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = v83;
  uint64_t v33 = (void *)*MEMORY[0x263F81850];
  *(void *)(v32 + 32) = *MEMORY[0x263F81850];
  *(void *)(v32 + 40) = *MEMORY[0x263F81840];
  id v34 = v31;
  id v35 = v33;
  unint64_t v36 = sub_255E88E50(v32);
  sub_255E8AC8C(0, &qword_269F38108, MEMORY[0x263F8D060]);
  *(void *)(inited + 64) = v37;
  *(void *)(inited + 40) = v36;
  sub_255E88F74(inited);
  type metadata accessor for AttributeName(0);
  sub_255E89CE0(&qword_269F34D88, type metadata accessor for AttributeName);
  uint64_t v38 = (void *)sub_255EEFC50();
  swift_bridgeObjectRelease();
  id v39 = objc_msgSend(v28, sel_fontDescriptorByAddingAttributes_, v38);

  id v79 = self;
  *(void *)&long long v83 = v39;
  id v40 = objc_msgSend(v79, sel_fontWithDescriptor_size_, v39, 0.0);
  uint64_t v78 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_titleFont;
  *(void *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_titleFont] = v40;
  id v41 = objc_msgSend(self, sel_configurationWithFont_, v40);
  if (qword_269F34C48 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  id v42 = v41;
  uint64_t v43 = (void *)sub_255EEFD50();
  swift_bridgeObjectRelease();
  id v44 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v43, v42);

  id v45 = objc_allocWithZone(MEMORY[0x263F82828]);
  id v80 = v44;
  id v46 = objc_msgSend(v45, sel_initWithImage_, v44);
  uint64_t v47 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView;
  *(void *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView] = v46;
  id v81 = v42;
  objc_msgSend(v46, sel_setPreferredSymbolConfiguration_, v42);
  uint64_t v48 = *(void **)&v5[v47];
  sub_255D7ED10(0, &qword_269F38120);
  uint64_t v49 = qword_269F34C30;
  id v50 = v48;
  if (v49 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v51 = (void *)sub_255EF01B0();
  objc_msgSend(v50, sel_setTintColor_, v51);

  objc_msgSend(*(id *)&v5[v47], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v53 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel;
  *(void *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel] = v52;
  uint64_t v54 = v82;
  id v55 = v52;
  swift_retain();
  sub_255EA1C1C();
  swift_release();
  uint64_t v56 = (void *)sub_255EEFD50();
  swift_bridgeObjectRelease();
  objc_msgSend(v55, sel_setText_, v56);

  objc_msgSend(*(id *)&v5[v53], sel_setFont_, *(void *)&v5[v78]);
  id v57 = *(id *)&v5[v53];
  swift_retain();
  uint64_t v58 = (void *)sub_255EF01B0();
  objc_msgSend(v57, sel_setTextColor_, v58);

  objc_msgSend(*(id *)&v5[v53], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v5[v53], sel_setAdjustsFontForContentSizeCategory_, 1);
  v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_showDateUpdated] = v85 & 1;
  id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v60 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel;
  *(void *)&v5[OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel] = v59;
  uint64_t v61 = *(void *)&v5[v54] + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved;
  id v62 = v59;
  swift_retain();
  sub_255E887BC(v61);
  uint64_t v64 = v63;
  swift_release();
  if (v64)
  {
    char v65 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v65 = 0;
  }
  uint64_t v66 = v88;
  objc_msgSend(v62, sel_setText_, v65);

  uint64_t v67 = *MEMORY[0x263F835B8];
  id v68 = *(id *)&v5[v60];
  id v69 = objc_msgSend(v79, sel_preferredFontForTextStyle_, v67);
  objc_msgSend(v68, sel_setFont_, v69);

  uint64_t v70 = *(void **)&v5[v60];
  char v71 = self;
  id v72 = v70;
  id v73 = objc_msgSend(v71, sel_labelColor);
  objc_msgSend(v72, sel_setTextColor_, v73);

  objc_msgSend(*(id *)&v5[v60], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v74 = *(id *)&v5[v60];
  objc_msgSend(v74, sel_setAdjustsFontForContentSizeCategory_, 1);

  v90.receiver = v5;
  v90.super_class = (Class)MIUIMedicalIDNavigationBarView;
  id v75 = objc_msgSendSuper2(&v90, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_255E89D28();

  (*(void (**)(uint64_t, id))(v86 + 8))(v89, v87);
  return v75;
}

void sub_255E89C04()
{
  if (!qword_269F380F0)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F380F0);
    }
  }
}

void sub_255E89C70()
{
  if (!qword_269F38100)
  {
    type metadata accessor for TraitKey(255);
    type metadata accessor for Weight(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F38100);
    }
  }
}

uint64_t sub_255E89CE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E89D28()
{
  uint64_t v1 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView;
  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView]);
  objc_msgSend(*(id *)&v0[v1], sel_addSubview_, *(void *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView]);
  objc_msgSend(*(id *)&v0[v1], sel_addSubview_, *(void *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel]);
  if (v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_showDateUpdated] == 1)
  {
    objc_msgSend(v0, sel_addSubview_, *(void *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel]);
    sub_255E89FAC();
  }
  else
  {
    sub_255E8A69C();
  }
}

void __swiftcall MIUIMedicalIDNavigationBarView.init(coder:)(MIUIMedicalIDNavigationBarView_optional *__return_ptr retstr, NSCoder coder)
{
}

void MIUIMedicalIDNavigationBarView.init(coder:)()
{
}

void sub_255E89FAC()
{
  sub_255E826A0();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_255EF7380;
  uint64_t v2 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView;
  id v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView], sel_firstBaselineAnchor);
  uint64_t v4 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel;
  id v5 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel], sel_firstBaselineAnchor);
  id v6 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v5);

  *(void *)(v1 + 32) = v6;
  id v7 = objc_msgSend(*(id *)&v0[v2], sel_trailingAnchor);
  id v8 = objc_msgSend(*(id *)&v0[v4], sel_leadingAnchor);
  if (qword_269F34A58 != -1) {
    swift_once();
  }
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v8, -*(double *)&qword_269F3FD58);

  *(void *)(v1 + 40) = v9;
  id v10 = objc_msgSend(*(id *)&v0[v2], sel_leadingAnchor);
  uint64_t v11 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView;
  id v12 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_containerView], byte_2653EE23A);
  id v13 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v12);

  *(void *)(v1 + 48) = v13;
  id v14 = objc_msgSend(*(id *)&v0[v4], sel_topAnchor);
  id v15 = objc_msgSend(*(id *)&v0[v11], (SEL)&_OBJC_LABEL_PROTOCOL___UIImagePickerControllerDelegate + 3);
  id v16 = objc_msgSend(v14, sel_constraintGreaterThanOrEqualToAnchor_, v15);

  *(void *)(v1 + 56) = v16;
  id v17 = objc_msgSend(*(id *)&v0[v11], sel_trailingAnchor);
  id v18 = objc_msgSend(*(id *)&v0[v4], sel_trailingAnchor);
  id v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(void *)(v1 + 64) = v19;
  id v20 = objc_msgSend(*(id *)&v0[v11], sel_bottomAnchor);
  id v21 = objc_msgSend(*(id *)&v0[v4], (SEL)&selRef_setIsDeletionAvailable_ + 5);
  id v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(void *)(v1 + 72) = v22;
  id v23 = objc_msgSend(*(id *)&v0[v11], byte_2653EE23A);
  id v24 = objc_msgSend(v0, byte_2653EE23A);
  id v25 = objc_msgSend(v23, sel_constraintGreaterThanOrEqualToAnchor_, v24);

  *(void *)(v1 + 80) = v25;
  id v26 = objc_msgSend(v0, sel_trailingAnchor);
  id v27 = objc_msgSend(*(id *)&v0[v11], sel_trailingAnchor);
  id v28 = objc_msgSend(v26, sel_constraintGreaterThanOrEqualToAnchor_, v27);

  *(void *)(v1 + 88) = v28;
  id v29 = objc_msgSend(*(id *)&v0[v11], sel_topAnchor);
  id v30 = objc_msgSend(v0, sel_topAnchor);
  id v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(void *)(v1 + 96) = v31;
  id v32 = objc_msgSend(*(id *)&v0[v11], sel_centerXAnchor);
  id v33 = objc_msgSend(v0, sel_centerXAnchor);
  id v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v33);

  *(void *)(v1 + 104) = v34;
  uint64_t v35 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel;
  id v36 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_dateUpdatedLabel], sel_topAnchor);
  id v37 = objc_msgSend(*(id *)&v0[v11], (SEL)&selRef_setIsDeletionAvailable_ + 5);
  if (qword_269F34C40 != -1) {
    swift_once();
  }
  id v38 = objc_msgSend(v36, sel_constraintEqualToAnchor_constant_, v37, *(double *)&qword_269F380D0);

  *(void *)(v1 + 112) = v38;
  id v39 = objc_msgSend(*(id *)&v0[v35], sel_centerXAnchor);
  id v40 = objc_msgSend(v0, sel_centerXAnchor);
  id v41 = objc_msgSend(v39, sel_constraintEqualToAnchor_, v40);

  *(void *)(v1 + 120) = v41;
  id v42 = objc_msgSend(v0, (SEL)&selRef_setIsDeletionAvailable_ + 5);
  id v43 = objc_msgSend(*(id *)&v0[v35], (SEL)&selRef_setIsDeletionAvailable_ + 5);
  id v44 = objc_msgSend(v42, sel_constraintEqualToAnchor_, v43);

  *(void *)(v1 + 128) = v44;
  id v45 = objc_msgSend(*(id *)&v0[v35], sel_leadingAnchor);
  id v46 = objc_msgSend(v0, sel_leadingAnchor);
  id v47 = objc_msgSend(v45, sel_constraintEqualToAnchor_, v46);

  *(void *)(v1 + 136) = v47;
  id v48 = objc_msgSend(v0, sel_trailingAnchor);
  id v49 = objc_msgSend(*(id *)&v0[v35], sel_trailingAnchor);
  id v50 = objc_msgSend(v48, sel_constraintEqualToAnchor_, v49);

  *(void *)(v1 + 144) = v50;
  sub_255EEFEB0();
  uint64_t v51 = self;
  sub_255D7ED10(0, &qword_269F38148);
  id v52 = (id)sub_255EEFE90();
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_activateConstraints_, v52);
}

void sub_255E8A69C()
{
  sub_255E826A0();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_255EF7390;
  uint64_t v2 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView;
  id v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_imageView], sel_firstBaselineAnchor);
  uint64_t v4 = OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel;
  id v5 = objc_msgSend(*(id *)&v0[OBJC_IVAR___MIUIMedicalIDNavigationBarView_textLabel], sel_firstBaselineAnchor);
  id v6 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v5);

  *(void *)(v1 + 32) = v6;
  id v7 = objc_msgSend(*(id *)&v0[v2], sel_trailingAnchor);
  id v8 = objc_msgSend(*(id *)&v0[v4], sel_leadingAnchor);
  if (qword_269F34A58 != -1) {
    swift_once();
  }
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v8, -*(double *)&qword_269F3FD58);

  *(void *)(v1 + 40) = v9;
  id v10 = objc_msgSend(*(id *)&v0[v2], sel_leadingAnchor);
  id v11 = objc_msgSend(v0, sel_leadingAnchor);
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(void *)(v1 + 48) = v12;
  id v13 = objc_msgSend(*(id *)&v0[v4], sel_trailingAnchor);
  id v14 = objc_msgSend(v0, sel_trailingAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  *(void *)(v1 + 56) = v15;
  id v16 = objc_msgSend(*(id *)&v0[v4], sel_centerYAnchor);
  id v17 = objc_msgSend(v0, sel_centerYAnchor);
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(void *)(v1 + 64) = v18;
  sub_255EEFEB0();
  id v19 = self;
  sub_255D7ED10(0, &qword_269F38148);
  id v20 = (id)sub_255EEFE90();
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_activateConstraints_, v20);
}

void __swiftcall MIUIMedicalIDNavigationBarView.init(frame:)(MIUIMedicalIDNavigationBarView *__return_ptr retstr, CGRect frame)
{
  double height = frame.size.height;
  double width = frame.size.width;
  double y = frame.origin.y;
  double x = frame.origin.x;
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v6, sel_initWithFrame_, x, y, width, height);
}

void MIUIMedicalIDNavigationBarView.init(frame:)()
{
}

void sub_255E8AAEC()
{
  qword_269F380D0 = 0x4014000000000000;
}

uint64_t type metadata accessor for MIUIMedicalIDNavigationBarView(uint64_t a1)
{
  return sub_255D7ED10(a1, &qword_269F38140);
}

void sub_255E8AB10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255E8AB74()
{
  if (!qword_269F38150)
  {
    type metadata accessor for AttributeName(255);
    sub_255E89CE0(&qword_269F34D88, type metadata accessor for AttributeName);
    unint64_t v0 = sub_255EF0430();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38150);
    }
  }
}

uint64_t sub_255E8AC14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *sub_255E8AC7C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_255E8AC8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for TraitKey(255);
    uint64_t v7 = v6;
    type metadata accessor for Weight(255);
    uint64_t v9 = v8;
    uint64_t v10 = sub_255E89CE0(&qword_269F34D78, type metadata accessor for TraitKey);
    unint64_t v11 = a3(a1, v7, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255E8AD40()
{
  if (!qword_269F38160)
  {
    unint64_t v0 = sub_255EF0430();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38160);
    }
  }
}

void sub_255E8ADAC()
{
  if (!qword_269F38168)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F38168);
    }
  }
}

void sub_255E8AE18(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_255D7ED10(255, a3);
    unint64_t v4 = sub_255EF0430();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void **sub_255E8AE80(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = (char *)v7 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_255EEE280();
    id v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    id v14 = v4;
    v13(v10, v11, v12);
    uint64_t v15 = *(int *)(v8 + 24);
    id v16 = (char *)v7 + v15;
    id v17 = (char *)a2 + v15;
    uint64_t v18 = sub_255EEE200();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = *(int *)(a3 + 24);
    id v21 = (void **)((char *)v7 + v19);
    id v22 = (void **)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *id v21 = *v22;
    v21[1] = v23;
    id v24 = (void **)((char *)v7 + v20);
    id v25 = (void **)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_255E8AFF4(id *a1)
{
  uint64_t v2 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  int v3 = (char *)a1 + *(int *)(v2 + 20);
  uint64_t v4 = sub_255EEE280();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v6 = sub_255EEE200();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

void **sub_255E8B0E0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v6;
  v12(v9, v10, v11);
  uint64_t v14 = *(int *)(v7 + 24);
  uint64_t v15 = (char *)a1 + v14;
  id v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (void **)((char *)a1 + v18);
  id v21 = (void **)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (void **)((char *)a1 + v19);
  id v24 = (void **)((char *)a2 + v19);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_255E8B208(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 24);
  uint64_t v15 = (char *)a1 + v14;
  id v16 = (char *)a2 + v14;
  uint64_t v17 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void **)((char *)a1 + v18);
  uint64_t v20 = (void **)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = (void **)((char *)a1 + v22);
  id v24 = (void **)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_255E8B344(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(int *)(v6 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(v6 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

void **sub_255E8B438(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_255EEE280();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 24);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_255EEE200();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void **)((char *)a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_255E8B554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255E8B568);
}

uint64_t sub_255E8B568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255E8B628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255E8B63C);
}

uint64_t sub_255E8B63C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for MedicalIDMedicalNotesCellView()
{
  uint64_t result = qword_269F38178;
  if (!qword_269F38178) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E8B744()
{
  uint64_t result = type metadata accessor for MedicalIDMedicalInfoViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255E8B7E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E8B804@<X0>(uint64_t a1@<X8>)
{
  if (qword_269F34B18 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_269F3FD90;
  uint64_t v3 = *(void *)algn_269F3FD98;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain();
  id v6 = objc_msgSend(v5, sel_medicalNotes);
  if (v6)
  {
    uint64_t v7 = sub_255EEFD90();
    unint64_t v9 = v8;

    swift_bridgeObjectRelease();
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    LOBYTE(v6) = v10 != 0;
  }
  uint64_t v11 = type metadata accessor for MedicalIDMedicalNotesCellView();
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (uint64_t *)((char *)v1 + *(int *)(v11 + 24));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = (char *)v1 + v12;
  uint64_t v17 = *(uint64_t *)((char *)v1 + v12);
  uint64_t v18 = *((void *)v16 + 1);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = (_BYTE)v6;
  *(unsigned char *)(a1 + 17) = 2;
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 32) = v18;
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v14;
  swift_bridgeObjectRetain();
  return swift_retain();
}

double sub_255E8B924@<D0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(*a1, sel_medicalNotes);
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_255EEFD90();
  unint64_t v8 = v7;

  swift_bridgeObjectRelease();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 && (id v10 = objc_msgSend(v3, sel_medicalNotes)) != 0)
  {
    uint64_t v11 = v10;
    sub_255EEFD90();

    type metadata accessor for MedicalIDMedicalNotesCellView();
  }
  else
  {
LABEL_7:
    uint64_t v12 = sub_255EEFD40();
    MEMORY[0x270FA5388](v12 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)qword_269F352A8;
    uint64_t v14 = sub_255EEE200();
    MEMORY[0x270FA5388](v14 - 8);
    id v15 = v13;
    sub_255EEE1F0();
    sub_255EEFDA0();
    type metadata accessor for MedicalIDMedicalNotesCellView();
  }
  sub_255E7DFE4();
  sub_255DEA818();
  swift_bridgeObjectRetain();
  sub_255EEEE00();
  double result = *(double *)&v17;
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 32) = v19;
  *(unsigned char *)(a2 + 48) = v20;
  return result;
}

double sub_255E8BBB0@<D0>(_OWORD *a1@<X8>)
{
  sub_255E8B804((uint64_t)v11);
  if (qword_269F34B90 != -1) {
    swift_once();
  }
  long long v5 = v11[0];
  long long v6 = v11[1];
  long long v7 = v11[2];
  *(void *)&long long v8 = v12;
  *((void *)&v8 + 1) = qword_269F37000;
  LOBYTE(v9[0]) = 1;
  sub_255E8B924(v1, (uint64_t)v9 + 8);
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)&v10[9];
  long long v3 = v9[1];
  v13[0] = *(_OWORD *)v10;
  a1[4] = v9[0];
  a1[5] = v3;
  a1[6] = v13[0];
  double result = *(double *)((char *)v13 + 9);
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v13 + 9);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t static LoadState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v7;
  uint64_t State = type metadata accessor for LoadState();
  uint64_t v9 = *(void *)(State - 8);
  MEMORY[0x270FA5388](State);
  id v30 = (char *)&v25 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  id v15 = (char *)&v25 - v14;
  uint64_t v16 = (char *)&v25 + *(int *)(v13 + 48) - v14;
  uint64_t v28 = v9;
  long long v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17((char *)&v25 - v14, a1, State);
  v17(v16, v29, State);
  uint64_t v29 = v5;
  long long v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v18(v15, 1, a3) == 1)
  {
    char v19 = 1;
    if (v18(v16, 1, a3) == 1) {
      goto LABEL_8;
    }
  }
  else
  {
    v17(v30, (uint64_t)v15, State);
    if (v18(v16, 1, a3) != 1)
    {
      uint64_t v20 = v29;
      uint64_t v21 = v26;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v16, a3);
      uint64_t v22 = v30;
      char v19 = sub_255EEFCC0();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v20 + 8);
      v23(v21, a3);
      v23(v22, a3);
LABEL_8:
      uint64_t v12 = v28;
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, a3);
  }
  char v19 = 0;
  uint64_t State = TupleTypeMetadata2;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, State);
  return v19 & 1;
}

uint64_t type metadata accessor for LoadState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_255E8BFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static LoadState.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_255E8C004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t sub_255E8C00C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_255E8C088(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_255E8C1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_255E8C288(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_255E8C380(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_255E8C4EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_255E8C5E4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t sub_255E8C750(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_255E8C8F0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x255E8CB2CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          long long v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_255E8CB54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_255E8CB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t sub_255E8CBB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_255EF0350();
    uint64_t v4 = (_OWORD *)(a1 + 32);
    for (uint64_t i = v2 - 1; ; --i)
    {
      long long v6 = v4[5];
      v11[4] = v4[4];
      v11[5] = v6;
      long long v7 = v4[7];
      v11[6] = v4[6];
      v11[7] = v7;
      long long v8 = v4[1];
      v11[0] = *v4;
      v11[1] = v8;
      long long v9 = v4[3];
      uint64_t v11[2] = v4[2];
      _OWORD v11[3] = v9;
      sub_255DCB308((uint64_t)v11);
      id v10 = sub_255DCB170();
      sub_255DCB3AC((uint64_t)v11);
      sub_255EF0320();
      sub_255EF0360();
      sub_255EF0370();
      sub_255EF0330();
      if (!i) {
        break;
      }
      v4 += 8;
    }
    return v12;
  }
  return result;
}

uint64_t MedicalIDDataManager.__allocating_init(medicalIDDataPublisher:medicalIDEmergencyContactProvider:shouldSaveDataToHealthDetails:saveDataToHealthStore:saveDataToMedicalIDStore:deleteDataFromMedicalIDStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  uint64_t v19 = sub_255E90F24(a1, v18, a3, a4, a5, a6, a7, a8, a9, a10, v21, v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v19;
}

uint64_t MedicalIDDataManager.medicalIDData.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  return sub_255D895B0(v3, a1);
}

uint64_t LoadState<>.loadedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v4 - 8);
  long long v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D895B0(v2, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for MedicalIDData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) != 1) {
    return sub_255E910FC((uint64_t)v6, a1);
  }
  sub_255D89614((uint64_t)v6, (uint64_t (*)(void))sub_255D894E4);
  sub_255E910A8(0, &qword_269F35058, MEMORY[0x270FA92E0]);
  v20[3] = v20;
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = sub_255EEE100();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  uint64_t v13 = v12((char *)v20 - v10, 1, 1, v11);
  void v20[2] = v20;
  MEMORY[0x270FA5388](v13);
  v12((char *)v20 - v10, 1, 1, v11);
  sub_255E910A8(0, &qword_269F350B8, MEMORY[0x270FA8180]);
  v20[1] = v20;
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v20 - v15;
  uint64_t v17 = sub_255EEDF60();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  MEMORY[0x270FA5388](v18);
  v12((char *)v20 - v10, 1, 1, v11);
  return MedicalIDData.init(name:emergencyContacts:medicalConditions:allergyInfo:medicalNotes:medicationInfo:bloodType:height:weight:pregnancyStartDate:pregnancyEstimatedDueDate:primaryLanguageCode:pregnancyStartDateTimeZoneID:isDisabled:shareDuringEmergency:pictureData:gregorianBirthday:isOrganDonor:dateSaved:)(0, 0, MEMORY[0x263F8EE78], 0, 0, 0, 0, 0, a1, 0, 0, 0, 0, (uint64_t)v20 - v10, (uint64_t)v20 - v10, 0, 0, 0, 0,
           0,
           0,
           0,
           0xF000000000000000,
           (uint64_t)v16,
           0,
           (uint64_t)v20 - v10);
}

uint64_t _s11MedicalIDUI0A13IDDataManagerC6updateyyyAA0aC0VzScMYccYaAC11UpdateErrorOYKF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = v3;
  v4[10] = a3;
  v4[7] = a1;
  v4[8] = a2;
  sub_255D894E4(0);
  v4[11] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v4[12] = swift_task_alloc();
  sub_255EEFF70();
  v4[13] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v4[14] = v6;
  v4[15] = v5;
  return MEMORY[0x270FA2498](sub_255E8D2A4, v6, v5);
}

uint64_t sub_255E8D2A4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = (void (*)(uint64_t))v0[7];
  swift_getKeyPath();
  v0[5] = v3;
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v5 = v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255D895B0(v5, v2);
  LoadState<>.loadedValue.getter(v1);
  sub_255D89614(v2, (uint64_t (*)(void))sub_255D894E4);
  v4(v1);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_255E8D44C;
  uint64_t v7 = v0[12];
  return sub_255E8F53C(v7, (uint64_t)(v0 + 6));
}

uint64_t sub_255E8D44C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v5 = sub_255E8D5F0;
  }
  else {
    uint64_t v5 = sub_255E8D55C;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255E8D55C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  sub_255D89614(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_255E8D5F0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[10];
  swift_release();
  sub_255D89614(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  *uint64_t v2 = v0[6];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t MedicalIDDataManager.delete()()
{
  v1[7] = v0;
  v1[8] = *v0;
  sub_255EEFF70();
  v1[9] = sub_255EEFF60();
  uint64_t v3 = sub_255EEFF20();
  v1[10] = v3;
  v1[11] = v2;
  return MEMORY[0x270FA2498](sub_255E8D754, v3, v2);
}

uint64_t sub_255E8D754()
{
  uint64_t v12 = v0;
  if (qword_269F34C50 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_255EEE3D0();
  v0[12] = __swift_project_value_buffer(v1, (uint64_t)qword_269F3FE80);
  uint64_t v2 = sub_255EEE3B0();
  os_log_type_t v3 = sub_255EF00A0();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = sub_255EF05E0();
    v0[6] = sub_255DB0024(v6, v7, &v11);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_255D76000, v2, v3, "[%s]: Removing medical id data", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v5, -1, -1);
    MEMORY[0x25A29C8A0](v4, -1, -1);
  }

  unint64_t v10 = (uint64_t (*)(void))(*(void *)(v0[7]
                                      + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore)
                          + **(int **)(v0[7]
                                     + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_255E8D994;
  return v10();
}

uint64_t sub_255E8D994(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 80);
    uint64_t v6 = *(void *)(v4 + 88);
    unint64_t v7 = sub_255E8DE08;
  }
  else
  {
    *(unsigned char *)(v4 + 120) = a1 & 1;
    uint64_t v5 = *(void *)(v4 + 80);
    uint64_t v6 = *(void *)(v4 + 88);
    unint64_t v7 = sub_255E8DABC;
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t sub_255E8DABC()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 120);
  swift_release();
  if (v1 == 1)
  {
    uint64_t v2 = sub_255EEE3B0();
    os_log_type_t v3 = sub_255EF00A0();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v20 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      uint64_t v6 = sub_255EF05E0();
      *(void *)(v0 + 40) = sub_255DB0024(v6, v7, &v20);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_255D76000, v2, v3, "[%s]: Removed medical id data", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v5, -1, -1);
      MEMORY[0x25A29C8A0](v4, -1, -1);
    }
  }
  else
  {
    id v8 = 0;
    id v9 = 0;
    uint64_t v2 = sub_255EEE3B0();
    os_log_type_t v10 = sub_255EF00C0();
    if (os_log_type_enabled(v2, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v20 = v12;
      *(_DWORD *)uint64_t v11 = 136315394;
      uint64_t v13 = sub_255EF05E0();
      *(void *)(v0 + 16) = sub_255DB0024(v13, v14, &v20);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      *(void *)(v0 + 24) = 0;
      id v15 = 0;
      sub_255E910A8(0, &qword_269F38238, (void (*)(uint64_t))sub_255D89E7C);
      uint64_t v16 = sub_255EEFDB0();
      *(void *)(v0 + 32) = sub_255DB0024(v16, v17, &v20);
      sub_255EF0200();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_255D76000, v2, v10, "[%s]: Failed to remove medical id data: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v12, -1, -1);
      MEMORY[0x25A29C8A0](v11, -1, -1);

      goto LABEL_8;
    }
  }
LABEL_8:
  uint64_t v18 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v18(v1);
}

uint64_t sub_255E8DE08()
{
  uint64_t v16 = v0;
  uint64_t v1 = (void *)v0[14];
  swift_release();
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_255EEE3B0();
  os_log_type_t v5 = sub_255EF00C0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = sub_255EF05E0();
    v0[2] = sub_255DB0024(v8, v9, &v15);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v0[3] = v1;
    id v10 = v1;
    sub_255E910A8(0, &qword_269F38238, (void (*)(uint64_t))sub_255D89E7C);
    uint64_t v11 = sub_255EEFDB0();
    v0[4] = sub_255DB0024(v11, v12, &v15);
    sub_255EF0200();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_255D76000, v4, v5, "[%s]: Failed to remove medical id data: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v7, -1, -1);
    MEMORY[0x25A29C8A0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13(0);
}

id MedicalIDDataManager.hkMedicalIDData.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  return v1;
}

void sub_255E8E090(void **a1, uint64_t *a2)
{
  id v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;
  id v5 = v2;

  id v6 = *(id *)(v3 + 16);
  sub_255E8E108(v6);
}

uint64_t sub_255E8E108(void *a1)
{
  sub_255E910A8(0, &qword_269F34FE0, MEMORY[0x263F8F520]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v96 = (char *)&v72 - v4;
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v95 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v1;
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider + 24);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider), v7);
  uint64_t v94 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 8))(a1, v7, v8);
  id v9 = objc_msgSend(a1, sel_name);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = sub_255EEFD90();
    uint64_t v92 = v12;
    uint64_t v93 = v11;
  }
  else
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
  }
  id v13 = objc_msgSend(a1, sel_medicalConditions);
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v15 = sub_255EEFD90();
    uint64_t v90 = v16;
    uint64_t v91 = v15;
  }
  else
  {
    uint64_t v90 = 0;
    uint64_t v91 = 0;
  }
  id v17 = objc_msgSend(a1, sel_allergyInfo);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = sub_255EEFD90();
    uint64_t v88 = v20;
    uint64_t v89 = v19;
  }
  else
  {
    uint64_t v88 = 0;
    uint64_t v89 = 0;
  }
  id v21 = objc_msgSend(a1, sel_medicalNotes);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = sub_255EEFD90();
    uint64_t v86 = v24;
    uint64_t v87 = v23;
  }
  else
  {
    uint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  id v25 = objc_msgSend(a1, sel_medicationInfo);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = sub_255EEFD90();
    uint64_t v84 = v28;
    uint64_t v85 = v27;
  }
  else
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
  }
  id v83 = objc_msgSend(a1, sel_bloodType);
  id v82 = objc_msgSend(a1, sel_height);
  id v81 = objc_msgSend(a1, sel_weight);
  id v29 = objc_msgSend(a1, sel_pregnancyStartDate);
  sub_255E910A8(0, &qword_269F35058, MEMORY[0x270FA92E0]);
  id v80 = &v72;
  uint64_t v31 = *(void *)(*(void *)(v30 - 8) + 64);
  MEMORY[0x270FA5388](v30 - 8);
  id v33 = (char *)&v72 - v32;
  if (v29)
  {
    sub_255EEE0D0();

    uint64_t v34 = sub_255EEE100();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
  }
  else
  {
    uint64_t v35 = sub_255EEE100();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v33, 1, 1, v35);
  }
  id v36 = objc_msgSend(a1, sel_pregnancyEstimatedDueDate);
  id v79 = &v72;
  if (MEMORY[0x270FA5388](v36))
  {
    sub_255EEE0D0();

    uint64_t v37 = sub_255EEE100();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v37);
  }
  else
  {
    uint64_t v38 = sub_255EEE100();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v38);
  }
  id v39 = objc_msgSend(a1, sel_primaryLanguageCode);
  if (v39)
  {
    id v40 = v39;
    uint64_t v78 = sub_255EEFD90();
    uint64_t v77 = v41;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v77 = 0;
  }
  id v42 = objc_msgSend(a1, sel_pregnancyStartDateTimeZoneID);
  if (v42)
  {
    id v43 = v42;
    uint64_t v76 = sub_255EEFD90();
    uint64_t v75 = v44;
  }
  else
  {
    uint64_t v76 = 0;
    uint64_t v75 = 0;
  }
  unsigned int v74 = objc_msgSend(a1, sel_isDisabled);
  unsigned int v73 = objc_msgSend(a1, sel_shareDuringEmergency);
  id v45 = objc_msgSend(a1, sel_pictureData);
  if (v45)
  {
    id v46 = v45;
    uint64_t v72 = sub_255EEE050();
    uint64_t v48 = v47;
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v48 = 0xF000000000000000;
  }
  id v49 = objc_msgSend(a1, sel_gregorianBirthday, v72);
  sub_255E910A8(0, &qword_269F350B8, MEMORY[0x270FA8180]);
  MEMORY[0x270FA5388](v50 - 8);
  id v52 = (char *)&v72 - v51;
  if (v49)
  {
    sub_255EEDEC0();

    uint64_t v53 = sub_255EEDF60();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
  else
  {
    uint64_t v54 = sub_255EEDF60();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v52, 1, 1, v54);
  }
  id v55 = objc_msgSend(a1, sel_isOrganDonor);
  id v56 = objc_msgSend(a1, sel_dateSaved);
  if (MEMORY[0x270FA5388](v56))
  {
    sub_255EEE0D0();

    uint64_t v57 = sub_255EEE100();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v57);
  }
  else
  {
    uint64_t v58 = sub_255EEE100();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))((char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v58);
  }
  uint64_t v71 = (uint64_t)v33;
  *((void *)&v70 + 1) = v83;
  *(void *)&long long v70 = v84;
  *((void *)&v69 + 1) = v85;
  *(void *)&long long v69 = v86;
  uint64_t v59 = v95;
  MedicalIDData.init(name:emergencyContacts:medicalConditions:allergyInfo:medicalNotes:medicationInfo:bloodType:height:weight:pregnancyStartDate:pregnancyEstimatedDueDate:primaryLanguageCode:pregnancyStartDateTimeZoneID:isDisabled:shareDuringEmergency:pictureData:gregorianBirthday:isOrganDonor:dateSaved:)(v93, v92, v94, v91, v90, v89, v88, v87, v95, v69, v70, (uint64_t)v82, (uint64_t)v81, v71, (uint64_t)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v78, v77, v76, v75,
    v74,
    v73,
    v72,
    v48,
    (uint64_t)v52,
    (uint64_t)v55,
    (uint64_t)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  uint64_t v62 = v97;
  uint64_t v98 = v97;
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2C0();
  swift_release();
  sub_255D89614(v59, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v63 = sub_255EEFFA0();
  uint64_t v64 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v96, 1, 1, v63);
  sub_255EEFF70();
  swift_retain();
  uint64_t v65 = sub_255EEFF60();
  uint64_t v66 = (void *)swift_allocObject();
  uint64_t v67 = MEMORY[0x263F8F500];
  v66[2] = v65;
  v66[3] = v67;
  v66[4] = v62;
  sub_255E09ED0(v64, (uint64_t)&unk_269F38280, (uint64_t)v66);
  return swift_release();
}

uint64_t sub_255E8EADC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  return sub_255D895B0(v4, a2);
}

uint64_t sub_255E8EBA8(uint64_t a1, uint64_t *a2)
{
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_255D895B0(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2C0();
  swift_release();
  return sub_255D89614((uint64_t)v6, (uint64_t (*)(void))sub_255D894E4);
}

uint64_t sub_255E8ECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255E9158C(a2, v3);
  return swift_endAccess();
}

uint64_t sub_255E8ED50()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E8EE14@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions);
  swift_beginAccess();
  *a2 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_255E8EEE0()
{
  return swift_release();
}

uint64_t sub_255E8EFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions);
  swift_beginAccess();
  *uint64_t v3 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MedicalIDDataManager.init(medicalIDDataPublisher:medicalIDEmergencyContactProvider:shouldSaveDataToHealthDetails:saveDataToHealthStore:saveDataToMedicalIDStore:deleteDataFromMedicalIDStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v24 = a5;
  uint64_t v25 = a7;
  v23[0] = a3;
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a2, v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = sub_255E90D64(a1, (uint64_t)v19, v23[0], a4, v24, a6, v25, a8, a9, a10, v23[1], v16, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v21;
}

uint64_t sub_255E8F1A0(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_255E915F0(0, &qword_269F38288, (uint64_t (*)(uint64_t))sub_255E91670, sub_255E916D8, MEMORY[0x263EFDAF8]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - v7;
  uint64_t v11 = a1;
  sub_255E91670();
  sub_255E916D8();
  uint64_t v11 = sub_255EEE4A0();
  sub_255E9170C((unint64_t *)&qword_269F34FD0, (void (*)(uint64_t))sub_255D7B90C);
  sub_255EEE4B0();
  swift_release();
  sub_255E9175C();
  swift_retain();
  sub_255EEE4C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getKeyPath();
  uint64_t v11 = v2;
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v11 = v2;
  swift_getKeyPath();
  sub_255EEE2F0();
  swift_release();
  swift_beginAccess();
  sub_255EEE400();
  swift_endAccess();
  swift_release();
  uint64_t v11 = v2;
  swift_getKeyPath();
  sub_255EEE2E0();
  return swift_release();
}

void sub_255E8F480(void **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (v3 == (void *)1) {
      return;
    }
    id v4 = *a1;
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9F8]), sel_init);
  }
  swift_beginAccess();
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v4;
  sub_255D7E64C(v3);
  sub_255D7E64C(v3);
  id v6 = v4;

  id v7 = *(id *)(a2 + 16);
  sub_255E8E108(v7);

  sub_255E9181C(v3);
}

uint64_t sub_255E8F53C(uint64_t a1, uint64_t a2)
{
  v3[15] = v2;
  v3[16] = a2;
  v3[14] = a1;
  v3[17] = *v2;
  sub_255EEFF70();
  v3[18] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v3[19] = v4;
  v3[20] = v5;
  return MEMORY[0x270FA2498](sub_255E8F634, v4, v5);
}

uint64_t sub_255E8F634()
{
  uint64_t v1 = (uint64_t *)v0[14];
  uint64_t v2 = (id *)(v0[15] + 16);
  swift_beginAccess();
  id v3 = *v2;
  uint64_t v4 = (void *)_HKMedicalIDData.typedCopy.getter();
  v0[21] = v4;

  unint64_t v5 = v1[1];
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = *v1;
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  uint64_t v9 = v0[14];
  objc_msgSend(v4, sel_setName_, v8);

  uint64_t v10 = swift_bridgeObjectRetain();
  sub_255E8CBB4(v10);
  swift_bridgeObjectRelease();
  sub_255D7ED10(0, &qword_269F36C88);
  uint64_t v11 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setEmergencyContacts_, v11);

  if (*(void *)(v9 + 32)) {
    uint64_t v12 = (void *)sub_255EEFD50();
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v0[14];
  objc_msgSend(v4, sel_setMedicalConditions_, v12);

  unint64_t v14 = *(void *)(v13 + 48);
  if (!v14) {
    goto LABEL_15;
  }
  uint64_t v15 = *(void *)(v13 + 40);
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_15:
    uint64_t v17 = 0;
  }
  uint64_t v18 = v0[14];
  objc_msgSend(v4, sel_setAllergyInfo_, v17);

  unint64_t v19 = *(void *)(v18 + 64);
  if (!v19) {
    goto LABEL_21;
  }
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = *(void *)(v18 + 56) & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_21:
    uint64_t v21 = 0;
  }
  uint64_t v22 = v0[14];
  objc_msgSend(v4, sel_setMedicalNotes_, v21);

  unint64_t v23 = *(void *)(v22 + 80);
  uint64_t v58 = v2;
  if (!v23) {
    goto LABEL_27;
  }
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = *(void *)(v22 + 72) & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = (void *)sub_255EEFD50();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_27:
    uint64_t v25 = 0;
  }
  uint64_t v26 = (void *)v0[14];
  objc_msgSend(v4, sel_setMedicationInfo_, v25);

  objc_msgSend(v4, sel_setBloodType_, v26[11]);
  objc_msgSend(v4, sel_setHeight_, v26[12]);
  objc_msgSend(v4, sel_setWeight_, v26[13]);
  uint64_t v59 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v27 = (uint64_t)v26 + v59[13];
  uint64_t v28 = (void (*)(uint64_t))MEMORY[0x270FA92E0];
  sub_255E910A8(0, &qword_269F35058, MEMORY[0x270FA92E0]);
  uint64_t v29 = swift_task_alloc();
  sub_255E9182C(v27, v29, &qword_269F35058, v28);
  uint64_t v30 = sub_255EEE100();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  id v33 = 0;
  if (v32(v29, 1, v30) != 1)
  {
    id v33 = (void *)sub_255EEE0A0();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  }
  uint64_t v34 = v0[14];
  swift_task_dealloc();
  objc_msgSend(v4, sel_setPregnancyStartDate_, v33);

  uint64_t v35 = v34 + v59[14];
  uint64_t v36 = swift_task_alloc();
  sub_255E9182C(v35, v36, &qword_269F35058, MEMORY[0x270FA92E0]);
  if (v32(v36, 1, v30) == 1)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = (void *)sub_255EEE0A0();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v36, v30);
  }
  uint64_t v38 = v0[14];
  swift_task_dealloc();
  objc_msgSend(v4, sel_setPregnancyEstimatedDueDate_, v37);

  if (*(void *)(v38 + v59[15] + 8)) {
    id v39 = (void *)sub_255EEFD50();
  }
  else {
    id v39 = 0;
  }
  uint64_t v40 = v0[14];
  objc_msgSend(v4, sel_setPrimaryLanguageCode_, v39);

  if (*(void *)(v40 + v59[16] + 8)) {
    uint64_t v41 = (void *)sub_255EEFD50();
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = v0[14];
  objc_msgSend(v4, sel_setPregnancyStartDateTimeZoneID_, v41);

  objc_msgSend(v4, sel_setIsDisabled_, *(unsigned __int8 *)(v42 + v59[17]));
  objc_msgSend(v4, sel_setShareDuringEmergency_, *(unsigned __int8 *)(v42 + v59[18]));
  if (*(void *)(v42 + v59[19] + 8) >> 60 == 15) {
    id v43 = 0;
  }
  else {
    id v43 = (void *)sub_255EEE040();
  }
  uint64_t v44 = v0[14];
  objc_msgSend(v4, sel_setPictureData_, v43);

  uint64_t v45 = v44 + v59[20];
  id v46 = (void (*)(uint64_t))MEMORY[0x270FA8180];
  sub_255E910A8(0, &qword_269F350B8, MEMORY[0x270FA8180]);
  uint64_t v47 = swift_task_alloc();
  sub_255E9182C(v45, v47, &qword_269F350B8, v46);
  uint64_t v48 = sub_255EEDF60();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) != 1)
  {
    uint64_t v50 = (void *)sub_255EEDEA0();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  }
  uint64_t v51 = v0[14];
  swift_task_dealloc();
  objc_msgSend(v4, sel_setGregorianBirthday_, v50);

  objc_msgSend(v4, sel_setIsOrganDonor_, *(void *)(v51 + v59[21]));
  sub_255D7ED10(0, &qword_269F35048);
  id v52 = *v58;
  char v53 = sub_255EF01D0();

  if (v53)
  {

    swift_release();
    uint64_t v54 = (uint64_t (*)(void))v0[1];
    return v54();
  }
  else
  {
    uint64_t v56 = v0[15];
    v0[8] = 0;
    uint64_t v60 = (uint64_t (*)(void *))(*(void *)(v56
                                                     + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore)
                                         + **(int **)(v56
                                                    + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore));
    uint64_t v57 = (void *)swift_task_alloc();
    v0[22] = v57;
    *uint64_t v57 = v0;
    v57[1] = sub_255E8FE9C;
    return v60(v4);
  }
}

uint64_t sub_255E8FE9C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v7 = sub_255E90408;
  }
  else
  {
    *(unsigned char *)(v4 + 192) = a1 & 1;
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v7 = sub_255E8FFF0;
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t sub_255E8FFF0()
{
  uint64_t v29 = v0;
  v28[1] = *MEMORY[0x263EF8340];
  int v1 = *(unsigned __int8 *)(v0 + 192);
  uint64_t v2 = swift_release();
  if (v1 == 1)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)(v0 + 120)
                                             + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_shouldSaveDataToHealthDetails))(v2) & 1) != 0)
      (*(void (**)(void))(*(void *)(v0 + 120)
                                     + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToHealthStore))(*(void *)(v0 + 168));
    id v3 = *(void **)(v0 + 168);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;
    id v6 = v3;

    id v7 = *(id *)(v4 + 16);
    sub_255E8E108(v7);
  }
  else
  {
    uint64_t v8 = (id *)(v0 + 64);
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_255EEE3D0();
    __swift_project_value_buffer(v9, (uint64_t)qword_269F3FE80);
    id v10 = *v8;
    id v11 = *v8;
    id v12 = v10;
    uint64_t v13 = sub_255EEE3B0();
    os_log_type_t v14 = sub_255EF00C0();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v28[0] = v27;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v17 = sub_255EF05E0();
      *(void *)(v0 + 88) = sub_255DB0024(v17, v18, v28);
      sub_255EF0200();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      if (v10)
      {
        id v19 = v10;
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 104) = v20;
        sub_255EF0200();
      }
      else
      {
        *(void *)(v0 + 96) = 0;
        sub_255EF0200();
        uint64_t v20 = 0;
      }
      *uint64_t v16 = v20;

      _os_log_impl(&dword_255D76000, v13, v14, "[%s]: failed to save medical id data due to: %@", (uint8_t *)v15, 0x16u);
      sub_255D7ECB8(0, (unint64_t *)&qword_269F35040, &qword_269F35048);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v16, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v27, -1, -1);
      MEMORY[0x25A29C8A0](v15, -1, -1);
    }
    else
    {
    }
    swift_beginAccess();
    id v21 = *v8;
    if (*v8)
    {
      uint64_t v22 = *(void **)(v0 + 168);
      **(void **)(v0 + 128) = v21;
      *(void *)(v0 + 80) = v21;
      id v23 = v21;
      id v24 = v21;
      sub_255DBD3D8();
      swift_willThrowTypedImpl();

      uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_17;
    }
  }
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v25();
}

uint64_t sub_255E90408()
{
  uint64_t v23 = v0;
  v22[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();

  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (id *)(v0 + 64);
  if (qword_269F34C50 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_255EEE3D0();
  __swift_project_value_buffer(v3, (uint64_t)qword_269F3FE80);
  id v4 = *v2;
  id v5 = *v2;
  id v6 = v4;
  id v7 = sub_255EEE3B0();
  os_log_type_t v8 = sub_255EF00C0();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v22[0] = v21;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = sub_255EF05E0();
    *(void *)(v0 + 88) = sub_255DB0024(v11, v12, v22);
    sub_255EF0200();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    if (v4)
    {
      id v13 = v4;
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 104) = v14;
      sub_255EF0200();
    }
    else
    {
      *(void *)(v0 + 96) = 0;
      sub_255EF0200();
      uint64_t v14 = 0;
    }
    *id v10 = v14;

    _os_log_impl(&dword_255D76000, v7, v8, "[%s]: failed to save medical id data due to: %@", (uint8_t *)v9, 0x16u);
    sub_255D7ECB8(0, (unint64_t *)&qword_269F35040, &qword_269F35048);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25A29C8A0](v21, -1, -1);
    MEMORY[0x25A29C8A0](v9, -1, -1);
  }
  else
  {
  }
  swift_beginAccess();
  id v15 = *v2;
  if (*v2)
  {
    uint64_t v16 = *(void **)(v0 + 168);
    **(void **)(v0 + 128) = v15;
    *(void *)(v0 + 80) = v15;
    id v17 = v15;
    id v18 = v15;
    sub_255DBD3D8();
    swift_willThrowTypedImpl();
  }
  else
  {
  }
  id v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t MedicalIDDataManager.deinit()
{
  sub_255D89614(v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData, (uint64_t (*)(void))sub_255D894E4);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDDataManager.__deallocating_deinit()
{
  MedicalIDDataManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_255E908FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a1;
  v4[8] = a4;
  type metadata accessor for MedicalIDData();
  v4[9] = swift_task_alloc();
  sub_255D894E4(0);
  v4[10] = swift_task_alloc();
  sub_255EEFF70();
  v4[11] = sub_255EEFF60();
  uint64_t v6 = sub_255EEFF20();
  v4[12] = v6;
  v4[13] = v5;
  return MEMORY[0x270FA2498](sub_255E909EC, v6, v5);
}

uint64_t sub_255E909EC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_getKeyPath();
  v0[5] = v3;
  sub_255E9170C(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255D895B0(v4, v1);
  LoadState<>.loadedValue.getter(v2);
  sub_255D89614(v1, (uint64_t (*)(void))sub_255D894E4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_255E90B70;
  uint64_t v6 = v0[9];
  return sub_255E8F53C(v6, (uint64_t)(v0 + 6));
}

uint64_t sub_255E90B70()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  if (v0) {

  }
  sub_255D89614(v3, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  uint64_t v4 = *(void *)(v2 + 96);
  uint64_t v5 = *(void *)(v2 + 104);
  return MEMORY[0x270FA2498](sub_255E90CE0, v4, v5);
}

uint64_t sub_255E90CE0()
{
  swift_release();
  **(unsigned char **)(v0 + 56) = *(void *)(v0 + 120) != 0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_255E90D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v29[3] = a12;
  void v29[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_1, a2, a12);
  *(void *)(a11 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A9F8]), sel_init);
  *(void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__subscriptions) = MEMORY[0x263F8EE88];
  sub_255EEE300();
  sub_255D89DC8((uint64_t)v29, a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_medicalIDEmergencyContactProvider);
  uint64_t v20 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_shouldSaveDataToHealthDetails);
  *uint64_t v20 = a3;
  v20[1] = a4;
  uint64_t v21 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToHealthStore);
  *uint64_t v21 = a5;
  v21[1] = a6;
  uint64_t v22 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_saveDataToMedicalIDStore);
  *uint64_t v22 = a7;
  v22[1] = a8;
  uint64_t v23 = (void *)(a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager_deleteDataFromMedicalIDStore);
  *uint64_t v23 = a9;
  v23[1] = a10;
  uint64_t v24 = a11 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  uint64_t v25 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_255E8F1A0(a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return a11;
}

uint64_t sub_255E90F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v22 = a4;
  uint64_t v16 = *(void *)(a12 - 8);
  MEMORY[0x270FA5388](a11);
  id v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a12);
  return sub_255E90D64(a1, (uint64_t)v18, a3, v22, v23, v24, v25, v26, a9, a10, v19, a12, a13);
}

uint64_t type metadata accessor for MedicalIDDataManager()
{
  uint64_t result = qword_269F38268;
  if (!qword_269F38268) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255E910A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EF01E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255E910FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MedicalIDData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_255E91160@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;
  return v4;
}

uint64_t sub_255E911BC()
{
  return type metadata accessor for MedicalIDDataManager();
}

void sub_255E911C4()
{
  sub_255D894E4(319);
  if (v0 <= 0x3F)
  {
    sub_255EEE310();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for MedicalIDDataManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MedicalIDDataManager);
}

uint64_t dispatch thunk of MedicalIDDataManager.__allocating_init(medicalIDDataPublisher:medicalIDEmergencyContactProvider:shouldSaveDataToHealthDetails:saveDataToHealthStore:saveDataToMedicalIDStore:deleteDataFromMedicalIDStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void *initializeBufferWithCopyOfBuffer for MedicalIDDataManager.UpdateError(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for MedicalIDDataManager.UpdateError(id *a1)
{
}

void **assignWithCopy for MedicalIDDataManager.UpdateError(void **a1, id *a2)
{
  id v3 = *a1;
  id v4 = *a2;
  id v5 = *a2;
  *a1 = v4;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for MedicalIDDataManager.UpdateError(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicalIDDataManager.UpdateError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicalIDDataManager.UpdateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDDataManager.UpdateError()
{
  return &type metadata for MedicalIDDataManager.UpdateError;
}

uint64_t sub_255E9147C()
{
  return sub_255E8ECE4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_255E91498()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E914D8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_255D7E778;
  return sub_255E908FC(a1, v4, v5, v6);
}

uint64_t sub_255E9158C(uint64_t a1, uint64_t a2)
{
  sub_255D894E4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_255E915F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255E91670()
{
  if (!qword_269F38290)
  {
    sub_255D7B90C();
    unint64_t v0 = sub_255EEE3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38290);
    }
  }
}

uint64_t sub_255E916D8()
{
  return sub_255E9170C(&qword_269F38298, (void (*)(uint64_t))sub_255E91670);
}

uint64_t sub_255E9170C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255E91754(void **a1)
{
  sub_255E8F480(a1, v1);
}

unint64_t sub_255E9175C()
{
  unint64_t result = qword_269F382A0[0];
  if (!qword_269F382A0[0])
  {
    sub_255E915F0(255, &qword_269F38288, (uint64_t (*)(uint64_t))sub_255E91670, sub_255E916D8, MEMORY[0x263EFDAF8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269F382A0);
  }
  return result;
}

uint64_t sub_255E91800()
{
  return sub_255E8EFC0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_255E9181C(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_255E9182C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255E910A8(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_255E9189C()
{
  return sub_255E9147C();
}

uint64_t sub_255E918B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 80);
}

void sub_255E918BC()
{
  sub_255EEF9D0();
  if (v0 <= 0x3F)
  {
    sub_255EF01E0();
    if (v1 <= 0x3F)
    {
      sub_255E9A29C(319, &qword_269F38328, MEMORY[0x270FA94A0], MEMORY[0x263F1B5D0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_255E91A38(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v9 = *(void *)(v6 + 64);
  }
  else {
    size_t v9 = v8 + 1;
  }
  uint64_t v10 = sub_255EEE140();
  int v11 = *(_DWORD *)(*(void *)(v10 - 8) + 80);
  uint64_t v12 = v11 & 0xF8;
  uint64_t v13 = v12 | 7;
  int v14 = (v11 | v7) & 0x100000;
  BOOL v15 = (v12 | 7 | v7) == 7 && v14 == 0;
  if (v15
    && (uint64_t v16 = v7 | 7,
        unint64_t v17 = ((v7 + 16) & ~(unint64_t)v7) + v8 + v7,
        uint64_t v18 = *(void *)(*(void *)(v10 - 8) + 64) + 7,
        (((v18 & 0xFFFFFFFFFFFFFFF8)
        + ((v12
          + 23
          + ((v9
            + ((v9
              + v7
              + ((v17 + ((v7 + 40) & ~v16)) & ~(unint64_t)v7)) & ~(unint64_t)v7)
            + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v13)
        + 31) & 0xFFFFFFFFFFFFFFF8)
      + 17 <= 0x18))
  {
    size_t v66 = v9 + v7;
    unint64_t v67 = v18 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v68 = v12 | 7;
    size_t v70 = v9;
    uint64_t v58 = v12 + 23;
    uint64_t v59 = *(void *)(*(void *)(v10 - 8) + 64) + 7;
    uint64_t v60 = *(void *)(v10 - 8);
    uint64_t v61 = v10;
    unint64_t v19 = ~(unint64_t)v7;
    uint64_t v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    uint64_t v62 = a1;
    uint64_t v21 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    v21[1] = v22[1];
    uint64_t v23 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    uint64_t v63 = (void *)(((unint64_t)v23 + v16 + 8) & ~v16);
    uint64_t v64 = (void *)(((unint64_t)v24 + v16 + 8) & ~v16);
    void *v63 = *v64;
    uint64_t v25 = (void *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v26;
    uint64_t v65 = ((unint64_t)v25 + v7 + 8) & v19;
    uint64_t v69 = v5;
    uint64_t v27 = ((unint64_t)v26 + v7 + 8) & v19;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    unint64_t v29 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v28(v65, v27, v69);
    uint64_t v30 = (void *)(((unint64_t)v63 + v29) & v19);
    uint64_t v31 = (const void *)(((unint64_t)v64 + v29) & v19);
    uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    if (v32(v31, 1, v69))
    {
      size_t v33 = v70;
      memcpy(v30, v31, v70);
      uint64_t v34 = (void (*)(char *, char *, uint64_t))v28;
    }
    else
    {
      uint64_t v34 = (void (*)(char *, char *, uint64_t))v28;
      v28((uint64_t)v30, (uint64_t)v31, v69);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v30, 0, 1, v69);
      size_t v33 = v70;
    }
    uint64_t v37 = (char *)(((unint64_t)v30 + v66) & v19);
    uint64_t v38 = (char *)(((unint64_t)v31 + v66) & v19);
    if (v32(v38, 1, v69))
    {
      memcpy(v37, v38, v33);
    }
    else
    {
      v34(v37, v38, v69);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v37, 0, 1, v69);
    }
    uint64_t v39 = ~v68;
    unint64_t v40 = v67 + 8;
    uint64_t v41 = &v37[v33];
    uint64_t v42 = &v38[v33];
    unint64_t v43 = (unint64_t)&v37[v33 + 7] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v44 = (unint64_t)(v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v45 = *(void *)v44;
    uint64_t v46 = *(void *)(v44 + 8);
    char v47 = *(unsigned char *)(v44 + 16);
    sub_255E91F08(*(void *)v44, v46, v47);
    *(void *)unint64_t v43 = v45;
    *(void *)(v43 + 8) = v46;
    *(unsigned char *)(v43 + 16) = v47;
    unint64_t v48 = (unint64_t)(v41 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (unint64_t)(v42 + 31) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v49 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
    }
    else
    {
      uint64_t v50 = *(void *)(v49 + 8);
      *(void *)unint64_t v48 = *(void *)v49;
      *(void *)(v48 + 8) = v50;
      swift_retain();
    }
    uint64_t v36 = v62;
    unint64_t v51 = (v58 + v48) & v39;
    unint64_t v52 = (v58 + v49) & v39;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v60 + 16))(v51, v52, v61);
    *(void *)((v59 + v51) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v59 + v52) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v53 = v51 + v40;
    *(unsigned char *)unint64_t v53 = *(unsigned char *)(v52 + v40);
    *(void *)(v53 + 8) = *(void *)(v52 + v40 + 8);
    unint64_t v54 = (v51 + v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (v52 + v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v56 = *(void *)(v55 + 8);
    *(void *)unint64_t v54 = *(void *)v55;
    *(void *)(v54 + 8) = v56;
    *(unsigned char *)(v54 + 16) = *(unsigned char *)(v55 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v35 = *a2;
    *a1 = *a2;
    uint64_t v36 = (void *)(v35 + (((v13 | v7) + 16) & ~(v13 | v7)));
  }
  swift_retain();
  return v36;
}

uint64_t sub_255E91F08(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return sub_255D85808(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_255E91F14(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  swift_release();
  swift_release();
  uint64_t v8 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v8((v7 + ((((v4 + (v7 | 7) + 8) & ~(v7 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7, v5);
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = ((v7 + 16) | v7) + v9 + ((v4 + (v7 | 7) + 8) & ~(v7 | 7));
  int v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10 & ~v7, 1, v5)) {
    v8(v10 & ~v7, v5);
  }
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v9 + 1;
  }
  uint64_t v13 = ((v10 | v7) + v12) & ~v7;
  if (!v11(v13, 1, v5)) {
    v8(v13, v5);
  }
  sub_255DADCEC(*(void *)((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16));
  int v14 = (void *)((v13 + v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  uint64_t v15 = sub_255EEE140();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v14 + v17 + 16) & ~v17, v15);
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_255E9218C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  unint64_t v52 = a1;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v59 = v10;
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  unint64_t v12 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (void *)(((unint64_t)v7 + v11 + 8) & v12);
  unint64_t v55 = (void *)(((unint64_t)v8 + v11 + 8) & v12);
  *unint64_t v54 = *v55;
  uint64_t v13 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  uint64_t v57 = ((unint64_t)v13 + v11 + 8) & ~v11;
  uint64_t v58 = ~v11;
  uint64_t v53 = ((unint64_t)v14 + v11 + 8) & ~v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v15(v57, v53, v9);
  size_t v16 = *(void *)(v10 + 64);
  uint64_t v17 = v16 + v11 + ((v11 + 16) & ~v11);
  unint64_t v18 = (unint64_t)v54 + v17;
  unint64_t v19 = (void *)(((unint64_t)v54 + v17) & ~v11);
  unint64_t v20 = (unint64_t)v55 + v17;
  uint64_t v21 = (const void *)(((unint64_t)v55 + v17) & ~v11);
  uint64_t v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v59 + 48);
  if (v56(v21, 1, v9))
  {
    int v22 = *(_DWORD *)(v59 + 84);
    if (v22) {
      size_t v23 = v16;
    }
    else {
      size_t v23 = v16 + 1;
    }
    memcpy(v19, v21, v23);
  }
  else
  {
    v15((uint64_t)v19, (uint64_t)v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v19, 0, 1, v9);
    int v22 = *(_DWORD *)(v59 + 84);
  }
  if (v22) {
    size_t v24 = v16;
  }
  else {
    size_t v24 = v16 + 1;
  }
  uint64_t v25 = (char *)(((v18 | v11) + v24) & v58);
  uint64_t v26 = (char *)(((v20 | v11) + v24) & v58);
  if (v56(v26, 1, v9))
  {
    memcpy(v25, v26, v24);
  }
  else
  {
    v15((uint64_t)v25, (uint64_t)v26, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v25, 0, 1, v9);
  }
  uint64_t v27 = &v25[v24];
  uint64_t v28 = &v26[v24];
  unint64_t v29 = (unint64_t)&v25[v24 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (unint64_t)(v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  char v33 = *(unsigned char *)(v30 + 16);
  sub_255E91F08(*(void *)v30, v32, v33);
  *(void *)unint64_t v29 = v31;
  *(void *)(v29 + 8) = v32;
  *(unsigned char *)(v29 + 16) = v33;
  unint64_t v34 = (unint64_t)(v27 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (unint64_t)(v28 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v35 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
  }
  else
  {
    uint64_t v36 = *(void *)(v35 + 8);
    *(void *)unint64_t v34 = *(void *)v35;
    *(void *)(v34 + 8) = v36;
    swift_retain();
  }
  uint64_t v37 = sub_255EEE140();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = v38 + 16;
  uint64_t v40 = *(_DWORD *)(v38 + 80) & 0xF8 | 7;
  unint64_t v41 = v35 + v40;
  uint64_t v42 = (v34 + v40 + 16) & ~v40;
  uint64_t v43 = (v41 + 16) & ~v40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v42, v43, v37);
  uint64_t v44 = *(void *)(v39 + 48) + 7;
  *(void *)((v44 + v42) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v44 + v43) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v45 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v46 = v45 + v42;
  unint64_t v47 = v45 + v43;
  *(unsigned char *)unint64_t v46 = *(unsigned char *)v47;
  *(void *)(v46 + 8) = *(void *)(v47 + 8);
  unint64_t v48 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v50 = *(void *)(v49 + 8);
  *(void *)unint64_t v48 = *(void *)v49;
  *(void *)(v48 + 8) = v50;
  *(unsigned char *)(v48 + 16) = *(unsigned char *)(v49 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  return v52;
}

void *sub_255E925BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v67 = a1;
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v64 = *(void *)(v10 - 8);
  uint64_t v11 = *(_DWORD *)(v64 + 80);
  unint64_t v12 = *(_DWORD *)(v64 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (void *)(((unint64_t)v8 + v11 + 8) & v12);
  int v14 = (void *)(((unint64_t)v9 + v11 + 8) & v12);
  *uint64_t v13 = *v14;
  swift_retain();
  swift_release();
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  swift_retain();
  swift_release();
  uint64_t v66 = ~v11;
  uint64_t v63 = *(void (**)(unint64_t, unint64_t, uint64_t))(v64 + 24);
  v63(((unint64_t)v15 + v11 + 8) & ~v11, ((unint64_t)v16 + v11 + 8) & ~v11, v10);
  size_t v17 = *(void *)(v64 + 64);
  uint64_t v18 = v17 + v11 + ((v11 + 16) & ~v11);
  unint64_t v19 = (unint64_t)v13 + v18;
  uint64_t v20 = v64;
  uint64_t v21 = v10;
  unint64_t v65 = v19;
  int v22 = (void *)(v19 & ~v11);
  unint64_t v23 = (unint64_t)v14 + v18;
  size_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v25 = v24(v22, 1, v21);
  int v26 = v24((void *)(v23 & ~v11), 1, v21);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(v20 + 16))(v22, v23 & ~v11, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v21);
      goto LABEL_12;
    }
    int v27 = *(_DWORD *)(v20 + 84);
  }
  else
  {
    if (!v26)
    {
      v63((unint64_t)v22, v23 & ~v11, v21);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v21);
    int v27 = *(_DWORD *)(v20 + 84);
  }
  if (v27) {
    size_t v28 = v17;
  }
  else {
    size_t v28 = v17 + 1;
  }
  memcpy(v22, (const void *)(v23 & ~v11), v28);
LABEL_12:
  if (*(_DWORD *)(v20 + 84)) {
    size_t v29 = v17;
  }
  else {
    size_t v29 = v17 + 1;
  }
  unint64_t v30 = (char *)(((v65 | v11) + v29) & v66);
  uint64_t v31 = (char *)(((v23 | v11) + v29) & v66);
  int v32 = v24(v30, 1, v21);
  int v33 = v24(v31, 1, v21);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v30, v31, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v21);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v30, v21);
LABEL_20:
    memcpy(v30, v31, v29);
    goto LABEL_21;
  }
  v63((unint64_t)v30, (unint64_t)v31, v21);
LABEL_21:
  unint64_t v34 = &v30[v29];
  unint64_t v35 = &v31[v29];
  unint64_t v36 = (unint64_t)&v30[v29 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (unint64_t)(v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = *(void *)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  char v40 = *(unsigned char *)(v37 + 16);
  sub_255E91F08(*(void *)v37, v39, v40);
  uint64_t v41 = *(void *)v36;
  uint64_t v42 = *(void *)(v36 + 8);
  char v43 = *(unsigned char *)(v36 + 16);
  *(void *)unint64_t v36 = v38;
  *(void *)(v36 + 8) = v39;
  *(unsigned char *)(v36 + 16) = v40;
  sub_255DADCEC(v41, v42, v43);
  uint64_t v44 = (void *)((unint64_t)(v34 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v45 = (unint64_t *)((unint64_t)(v35 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v46 = *v45;
  if (*v44 < 0xFFFFFFFFuLL)
  {
    if (v46 >= 0xFFFFFFFF)
    {
      unint64_t v48 = v45[1];
      void *v44 = v46;
      v44[1] = v48;
      swift_retain();
      goto LABEL_28;
    }
LABEL_27:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_28;
  }
  if (v46 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_27;
  }
  unint64_t v47 = v45[1];
  void *v44 = v46;
  v44[1] = v47;
  swift_retain();
  swift_release();
LABEL_28:
  uint64_t v49 = sub_255EEE140();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = v50 + 24;
  uint64_t v52 = *(_DWORD *)(v50 + 80) & 0xF8 | 7;
  uint64_t v53 = ((unint64_t)v44 + v52 + 16) & ~v52;
  uint64_t v54 = ((unint64_t)v45 + v52 + 16) & ~v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 24))(v53, v54, v49);
  uint64_t v55 = *(void *)(v51 + 40) + 7;
  *(void *)((v55 + v53) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v55 + v54) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v56 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v57 = v56 + v53;
  unint64_t v58 = v56 + v54;
  *(unsigned char *)unint64_t v57 = *(unsigned char *)v58;
  *(void *)(v57 + 8) = *(void *)(v58 + 8);
  swift_retain();
  swift_release();
  unint64_t v59 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (v58 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = *(void *)(v60 + 8);
  *(void *)unint64_t v59 = *(void *)v60;
  *(void *)(v59 + 8) = v61;
  swift_retain();
  swift_release();
  *(unsigned char *)(v59 + 16) = *(unsigned char *)(v60 + 16);
  return v67;
}

_OWORD *sub_255E92B2C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t v5 = (void *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(_DWORD *)(v8 + 80);
  unint64_t v11 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (void *)(((unint64_t)v5 + v10 + 8) & v11);
  uint64_t v13 = (void *)(((unint64_t)v6 + v10 + 8) & v11);
  *unint64_t v12 = *v13;
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v14 = *v15;
  uint64_t v50 = ~v10;
  size_t v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  v16(((unint64_t)v14 + v10 + 8) & ~v10, ((unint64_t)v15 + v10 + 8) & ~v10, v7);
  size_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = v17 + v10 + ((v10 + 16) & ~v10);
  unint64_t v19 = (unint64_t)v12 + v18;
  uint64_t v20 = (void *)(((unint64_t)v12 + v18) & ~v10);
  unint64_t v48 = (unint64_t)v13 + v18;
  uint64_t v21 = (const void *)(((unint64_t)v13 + v18) & ~v10);
  uint64_t v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v49(v21, 1, v7))
  {
    int v22 = *(_DWORD *)(v9 + 84);
    if (v22) {
      size_t v23 = v17;
    }
    else {
      size_t v23 = v17 + 1;
    }
    memcpy(v20, v21, v23);
  }
  else
  {
    v16((unint64_t)v20, (unint64_t)v21, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v7);
    int v22 = *(_DWORD *)(v9 + 84);
  }
  if (v22) {
    size_t v24 = v17;
  }
  else {
    size_t v24 = v17 + 1;
  }
  int v25 = (void *)(((v19 | v10) + v24) & v50);
  int v26 = (const void *)(((v48 | v10) + v24) & v50);
  if (v49(v26, 1, v7))
  {
    memcpy(v25, v26, v24);
  }
  else
  {
    v16((unint64_t)v25, (unint64_t)v26, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v25, 0, 1, v7);
  }
  unint64_t v27 = ((unint64_t)v25 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v26 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v29 = *(_OWORD *)v28;
  *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
  *(_OWORD *)unint64_t v27 = v29;
  unint64_t v30 = ((unint64_t)v25 + v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v26 + v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v31 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v32 = *(void *)(v31 + 8);
    *(void *)unint64_t v30 = *(void *)v31;
    *(void *)(v30 + 8) = v32;
  }
  uint64_t v33 = sub_255EEE140();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = v34 + 32;
  uint64_t v36 = *(_DWORD *)(v34 + 80) & 0xF8 | 7;
  unint64_t v37 = v31 + v36;
  uint64_t v38 = (v30 + v36 + 16) & ~v36;
  uint64_t v39 = (v37 + 16) & ~v36;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v38, v39, v33);
  uint64_t v40 = *(void *)(v35 + 32) + 7;
  *(void *)((v40 + v38) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v40 + v39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v41 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v42 = (_OWORD *)(v41 + v38);
  char v43 = (_OWORD *)(v41 + v39);
  *uint64_t v42 = *v43;
  unint64_t v44 = ((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = ((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v44 = *(_OWORD *)v45;
  *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
  return a1;
}

void *sub_255E92ECC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v63 = a1;
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  unint64_t v15 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v16 = (void *)(((unint64_t)v9 + v14 + 8) & v15);
  size_t v17 = (void *)(((unint64_t)v10 + v14 + 8) & v15);
  *size_t v16 = *v17;
  swift_release();
  uint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  swift_release();
  uint64_t v62 = ~v14;
  unint64_t v59 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40);
  v59(((unint64_t)v18 + v14 + 8) & ~v14, ((unint64_t)v19 + v14 + 8) & ~v14, v11);
  size_t v20 = *(void *)(v12 + 64);
  uint64_t v21 = v20 + v14 + ((v14 + 16) & ~v14);
  int v22 = (void *)(((unint64_t)v16 + v21) & ~v14);
  unint64_t v60 = (unint64_t)v16 + v21;
  unint64_t v61 = (unint64_t)v17 + v21;
  size_t v23 = (void *)(((unint64_t)v17 + v21) & ~v14);
  size_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v25 = v24(v22, 1, v11);
  int v26 = v24(v23, 1, v11);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v22, v23, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v22, 0, 1, v11);
      goto LABEL_12;
    }
    int v27 = *(_DWORD *)(v13 + 84);
  }
  else
  {
    if (!v26)
    {
      v59((unint64_t)v22, (unint64_t)v23, v11);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v22, v11);
    int v27 = *(_DWORD *)(v13 + 84);
  }
  if (v27) {
    size_t v28 = v20;
  }
  else {
    size_t v28 = v20 + 1;
  }
  memcpy(v22, v23, v28);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    size_t v29 = v20;
  }
  else {
    size_t v29 = v20 + 1;
  }
  unint64_t v30 = (void *)(((v60 | v14) + v29) & v62);
  unint64_t v31 = (void *)(((v61 | v14) + v29) & v62);
  int v32 = v24(v30, 1, v11);
  int v33 = v24(v31, 1, v11);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v30, v31, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v30, 0, 1, v11);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v30, v11);
LABEL_20:
    memcpy(v30, v31, v29);
    goto LABEL_21;
  }
  v59((unint64_t)v30, (unint64_t)v31, v11);
LABEL_21:
  unint64_t v34 = ((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v36 = *(unsigned char *)(v35 + 16);
  uint64_t v37 = *(void *)v34;
  uint64_t v38 = *(void *)(v34 + 8);
  char v39 = *(unsigned char *)(v34 + 16);
  *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
  *(unsigned char *)(v34 + 16) = v36;
  sub_255DADCEC(v37, v38, v39);
  uint64_t v40 = (void *)(((unint64_t)v30 + v29 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v41 = (unint64_t *)(((unint64_t)v31 + v29 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v42 = *v41;
  if (*v40 < 0xFFFFFFFFuLL)
  {
    if (v42 >= 0xFFFFFFFF)
    {
      unint64_t v44 = v41[1];
      *uint64_t v40 = v42;
      v40[1] = v44;
      goto LABEL_28;
    }
LABEL_27:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    goto LABEL_28;
  }
  if (v42 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_27;
  }
  unint64_t v43 = v41[1];
  *uint64_t v40 = v42;
  v40[1] = v43;
  swift_release();
LABEL_28:
  uint64_t v45 = sub_255EEE140();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = v46 + 40;
  uint64_t v48 = *(_DWORD *)(v46 + 80) & 0xF8 | 7;
  uint64_t v49 = (char *)v41 + v48;
  uint64_t v50 = ((unint64_t)v40 + v48 + 16) & ~v48;
  uint64_t v51 = (unint64_t)(v49 + 16) & ~v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 40))(v50, v51, v45);
  uint64_t v52 = *(void *)(v47 + 24) + 7;
  *(void *)((v52 + v50) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v52 + v51) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v53 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v54 = v53 + v50;
  unint64_t v55 = v53 + v51;
  *(unsigned char *)unint64_t v54 = *(unsigned char *)(v53 + v51);
  *(void *)(v54 + 8) = *(void *)(v53 + v51 + 8);
  swift_release();
  unint64_t v56 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
  swift_release();
  *(unsigned char *)(v56 + 16) = *(unsigned char *)(v57 + 16);
  return v63;
}

uint64_t sub_255E933D0(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7) {
    unsigned int v9 = v7 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = sub_255EEE140();
  if ((int)v7 >= 0) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v8;
  }
  uint64_t v12 = *(void *)(v6 + 64);
  if (v7) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  uint64_t v14 = *(void *)(v10 - 8);
  if (v9 <= v11) {
    unsigned int v15 = v11;
  }
  else {
    unsigned int v15 = v9;
  }
  uint64_t v16 = *(void *)(v10 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
  int v19 = *(_DWORD *)(v14 + 80);
  unsigned int v18 = *(_DWORD *)(v14 + 84);
  uint64_t v20 = *(void *)(v14 + 64);
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v14 + 84);
  }
  if (v15 > v21) {
    unsigned int v21 = v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v22 = v17 | 7;
  uint64_t v23 = ((v17 + 16) & ~v17) + v12 + v17;
  uint64_t v24 = v13 + v17;
  uint64_t v25 = v19 & 0xF8 | 7;
  uint64_t v26 = v20 + 7;
  if (v21 < a2)
  {
    unint64_t v27 = (((v26 & 0xFFFFFFFFFFFFFFF8)
          + ((v25 + ((v13 + ((v24 + ((v23 + ((v17 + 40) & ~v22)) & ~v17)) & ~v17) + 31) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v25)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 17;
    if (v27 < 4) {
      unsigned int v28 = ((a2 - v21 + 255) >> (8 * v27)) + 1;
    }
    else {
      unsigned int v28 = 2;
    }
    if (v28 >= 0x10000) {
      unsigned int v29 = 4;
    }
    else {
      unsigned int v29 = 2;
    }
    if (v28 < 0x100) {
      unsigned int v29 = 1;
    }
    if (v28 >= 2) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    switch(v30)
    {
      case 1:
        int v31 = a1[v27];
        if (!a1[v27]) {
          break;
        }
        goto LABEL_38;
      case 2:
        int v31 = *(unsigned __int16 *)&a1[v27];
        if (*(_WORD *)&a1[v27]) {
          goto LABEL_38;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x255E93798);
      case 4:
        int v31 = *(_DWORD *)&a1[v27];
        if (!v31) {
          break;
        }
LABEL_38:
        int v32 = (v31 - 1) << (8 * v27);
        if (v27 >= 4) {
          int v32 = 0;
        }
        if (v27 == 1) {
          int v33 = *a1;
        }
        else {
          int v33 = *(_DWORD *)a1;
        }
        return v21 + (v33 | v32) + 1;
      default:
        break;
    }
  }
  if ((v21 & 0x80000000) == 0)
  {
    unint64_t v34 = *((void *)a1 + 1);
    if (v34 >= 0xFFFFFFFF) {
      LODWORD(v34) = -1;
    }
    return (v34 + 1);
  }
  uint64_t v36 = ~v17;
  unint64_t v37 = (((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v22 + 8) & ~v22;
  if (v8 == v21)
  {
    uint64_t v38 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    return v38((v17 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v36, v7, v5);
  }
  unint64_t v39 = (v23 + v37) & v36;
  if (v9 == v21)
  {
    if (v7 >= 2)
    {
      unsigned int v42 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48))(v39, v7, v5, v16);
      if (v42 >= 2) {
        return v42 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v40 = (v25 + ((v13 + ((v24 + v39) & v36) + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v25;
  if (v18 < 0x7FFFFFFE)
  {
    unint64_t v43 = *(void *)((v26 + v40) & 0xFFFFFFFFFFFFFFF8);
    if (v43 >= 0xFFFFFFFF) {
      LODWORD(v43) = -1;
    }
    if ((v43 + 1) >= 2) {
      return v43;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v41 = *(uint64_t (**)(unint64_t))(v16 + 48);
    return v41(v40);
  }
}

void sub_255E937AC(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v47 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v47 - 8);
  uint64_t v48 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF) {
    int v9 = 0x7FFFFFFF;
  }
  else {
    int v9 = *(_DWORD *)(v7 + 84);
  }
  if (v8) {
    unsigned int v10 = v8 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = sub_255EEE140();
  int v12 = 0;
  if ((int)v8 >= 0) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v9;
  }
  uint64_t v14 = *(void *)(v7 + 64);
  if (v8) {
    uint64_t v15 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  uint64_t v16 = *(void *)(v11 - 8);
  if (v10 <= v13) {
    unsigned int v17 = v13;
  }
  else {
    unsigned int v17 = v10;
  }
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
  int v21 = *(_DWORD *)(v16 + 80);
  unsigned int v20 = *(_DWORD *)(v16 + 84);
  uint64_t v22 = *(void *)(v16 + 64);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v23 = 2147483646;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v16 + 84);
  }
  if (v17 <= v23) {
    unsigned int v17 = v23;
  }
  uint64_t v24 = ((v19 + 16) & ~v19) + v14 + v19;
  uint64_t v25 = v15 + v19;
  uint64_t v26 = v21 & 0xF8 | 7;
  uint64_t v27 = v22 + 7;
  unint64_t v28 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v29 = ((v28
        + ((v26
          + ((v15 + ((v15 + v19 + ((v24 + ((v19 + 40) & ~(v19 | 7))) & ~v19)) & ~v19) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 16) & ~v26)
        + 31) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  char v30 = 8 * v29;
  if (v17 < a3)
  {
    if (v29 <= 3) {
      unsigned int v31 = ((a3 - v17 + 255) >> v30) + 1;
    }
    else {
      unsigned int v31 = 2;
    }
    if (v31 >= 0x10000) {
      int v32 = 4;
    }
    else {
      int v32 = 2;
    }
    if (v31 < 0x100) {
      int v32 = 1;
    }
    if (v31 >= 2) {
      int v12 = v32;
    }
    else {
      int v12 = 0;
    }
  }
  if (v17 < a2)
  {
    unsigned int v33 = ~v17 + a2;
    unsigned int v34 = (~(_BYTE)v17 + a2);
    if (v29 < 4) {
      int v35 = (v33 >> v30) + 1;
    }
    else {
      int v35 = 1;
    }
    if (v29 >= 4) {
      unsigned int v36 = v33;
    }
    else {
      unsigned int v36 = v34;
    }
    bzero(a1, v29);
    if (v29 == 1) {
      *(unsigned char *)a1 = v36;
    }
    else {
      *(_DWORD *)a1 = v36;
    }
    switch(v12)
    {
      case 1:
        *((unsigned char *)a1 + v29) = v35;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v29) = v35;
        return;
      case 3:
        goto LABEL_77;
      case 4:
        *(_DWORD *)((char *)a1 + v29) = v35;
        return;
      default:
        return;
    }
  }
  uint64_t v37 = ~v19;
  uint64_t v38 = ~v26;
  switch(v12)
  {
    case 1:
      *((unsigned char *)a1 + v29) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_50;
    case 2:
      *(_WORD *)((char *)a1 + v29) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_50;
    case 3:
LABEL_77:
      __break(1u);
      JUMPOUT(0x255E93BF4);
    case 4:
      *(_DWORD *)((char *)a1 + v29) = 0;
      goto LABEL_49;
    default:
LABEL_49:
      if (!a2) {
        return;
      }
LABEL_50:
      if ((v17 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0)
        {
          *a1 = a2 ^ 0x80000000;
          a1[1] = 0;
        }
        else
        {
          a1[1] = (a2 - 1);
        }
        return;
      }
      unint64_t v39 = ((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + (v19 | 7) + 8) & ~(v19 | 7);
      if (v9 == v17)
      {
        unint64_t v40 = (v19 + ((v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v37;
        unint64_t v41 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
        uint64_t v42 = a2;
LABEL_59:
        v41(v40, v42, v8, v47);
        return;
      }
      unint64_t v40 = (v24 + v39) & v37;
      if (v10 == v17)
      {
        if (v8 < 2) {
          return;
        }
        uint64_t v42 = (a2 + 1);
        unint64_t v41 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
        goto LABEL_59;
      }
      unint64_t v43 = (_DWORD *)((v26 + ((v15 + ((v25 + v40) & v37) + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & v38);
      if (v23 >= a2)
      {
        if (v20 < 0x7FFFFFFE)
        {
          uint64_t v46 = (void *)(((unint64_t)v43 + v27) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v46 = 0;
            *(_DWORD *)uint64_t v46 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v46 = a2;
          }
        }
        else
        {
          uint64_t v45 = *(void (**)(_DWORD *, uint64_t))(v18 + 56);
          v45(v43, a2);
        }
      }
      else if (v28 != -8)
      {
        int v44 = ~v23 + a2;
        bzero((void *)((v26 + ((v15 + ((v25 + v40) & v37) + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & v38), (v28 + 8));
        _DWORD *v43 = v44;
      }
      return;
  }
}

uint64_t type metadata accessor for ExpandableWheelPickerView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_255E93C34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E93C78@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v34 = a5;
  v30[1] = a3;
  int v35 = a2;
  uint64_t v43 = a7;
  uint64_t v10 = sub_255EF01E0();
  uint64_t v46 = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = v10;
  uint64_t v11 = sub_255EEE950();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  MEMORY[0x270FA5388](v11);
  unint64_t v40 = (char *)v30 - v12;
  uint64_t v31 = sub_255EEE950();
  uint64_t v13 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v15 = (char *)v30 - v14;
  sub_255EEE960();
  swift_getWitnessTable();
  uint64_t v32 = sub_255EEEF00();
  uint64_t v16 = sub_255EEE870();
  uint64_t v36 = *(void *)(v16 - 8);
  uint64_t v37 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v30 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  unsigned int v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v30[0] = a1;
  v20(v15, a1, a4);
  int v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
  v21(v15, 0, 1, a4);
  unsigned int v33 = v18;
  uint64_t v22 = v34;
  sub_255EEF610();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v31);
  if (v35)
  {
    unsigned int v23 = v40;
    v20(v40, v30[0], a4);
    v21(v23, 0, 1, a4);
    uint64_t v24 = swift_checkMetadataState();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  }
  else
  {
    uint64_t v25 = swift_checkMetadataState();
    unsigned int v23 = v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v40, 1, 1, v25);
  }
  sub_255EEE960();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v44 = v22;
  uint64_t v45 = v26;
  uint64_t v27 = v37;
  swift_getWitnessTable();
  swift_getWitnessTable();
  unint64_t v28 = v33;
  sub_255EEF610();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v28, v27);
}

uint64_t (*sub_255E94118(uint64_t a1))(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v2 = v1 + *(int *)(a1 + 72);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  char v5 = *(unsigned char *)(v2 + 16);
  sub_255E91F08(*(void *)v2, v4, v5);
  uint64_t v6 = sub_255DAB304(v3, v4, v5);
  uint64_t v8 = v7;
  sub_255DADCEC(v3, v4, v5);
  if (!v6) {
    return 0;
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v8;
  return sub_255D7B2F0;
}

uint64_t sub_255E941CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v71 = *(void *)(a1 - 8);
  uint64_t v72 = *(void *)(v71 + 64);
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  size_t v70 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v75 = *(void *)(v2 + 24);
  uint64_t v5 = v2;
  uint64_t v68 = v2;
  uint64_t v6 = sub_255EEFF00();
  uint64_t v67 = *(void *)(v5 + 32);
  uint64_t v7 = *(void *)(v67 + 8);
  sub_255EEE960();
  swift_getWitnessTable();
  sub_255EEEF00();
  sub_255EEE870();
  uint64_t v74 = v4;
  sub_255EF01E0();
  uint64_t v99 = v7;
  swift_getWitnessTable();
  sub_255EEE960();
  swift_getWitnessTable();
  sub_255EEEF00();
  sub_255EEE870();
  sub_255EEF090();
  uint64_t v8 = sub_255EEE870();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v86 = v6;
  uint64_t v87 = v4;
  uint64_t v88 = v8;
  uint64_t v89 = WitnessTable;
  uint64_t v90 = v7;
  uint64_t v10 = sub_255EEFA20();
  uint64_t v11 = swift_getWitnessTable();
  uint64_t v12 = MEMORY[0x263F1A820];
  uint64_t v97 = MEMORY[0x263F1A820];
  uint64_t v98 = v11;
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v95 = v13;
  uint64_t v96 = v14;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = sub_255E9A310(&qword_269F351C0, MEMORY[0x263F1A470]);
  uint64_t v93 = v15;
  uint64_t v94 = v16;
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = v74;
  uint64_t v86 = MEMORY[0x263F1A830];
  uint64_t v87 = v74;
  uint64_t v88 = v10;
  uint64_t v89 = v12;
  uint64_t v90 = v7;
  uint64_t v91 = v17;
  sub_255EEF910();
  uint64_t v19 = sub_255EEE870();
  uint64_t v20 = sub_255EEE9A0();
  uint64_t v84 = swift_getWitnessTable();
  uint64_t v85 = v16;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v86 = v19;
  uint64_t v87 = v20;
  uint64_t v22 = MEMORY[0x263F190C8];
  uint64_t v88 = v21;
  uint64_t v89 = MEMORY[0x263F190C8];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v24 = sub_255EEE140();
  uint64_t v86 = v19;
  uint64_t v87 = v20;
  uint64_t v88 = v21;
  uint64_t v89 = v22;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v26 = sub_255E99A50((unint64_t *)&qword_269F351D8, MEMORY[0x270FA9600]);
  uint64_t v86 = OpaqueTypeMetadata2;
  uint64_t v87 = v24;
  uint64_t v88 = OpaqueTypeConformance2;
  uint64_t v89 = v26;
  sub_255EEF8D0();
  sub_255EF01E0();
  uint64_t v27 = v75;
  swift_getTupleTypeMetadata2();
  sub_255EEFB90();
  sub_255EEF790();
  sub_255E1FA68();
  uint64_t v28 = sub_255EEE870();
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v83 = v61;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v58 = v29;
  uint64_t v30 = sub_255E9A310(qword_269F36AF8, (void (*)(uint64_t))sub_255E1FA68);
  uint64_t v81 = v29;
  uint64_t v82 = v30;
  uint64_t v62 = swift_getWitnessTable();
  uint64_t v86 = v28;
  uint64_t v87 = v62;
  uint64_t v64 = MEMORY[0x263F1AA48];
  uint64_t v65 = swift_getOpaqueTypeMetadata2();
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v65);
  uint64_t v63 = (char *)&v58 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  unint64_t v59 = (char *)&v58 - v33;
  uint64_t v34 = swift_checkMetadataState();
  uint64_t v60 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v58 - v35;
  uint64_t v37 = swift_checkMetadataState();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  unint64_t v40 = (char *)&v58 - v39;
  uint64_t v76 = v18;
  uint64_t v77 = v27;
  uint64_t v41 = v68;
  uint64_t v42 = *(void *)(v68 + 40);
  uint64_t v43 = v67;
  uint64_t v78 = v67;
  uint64_t v79 = v42;
  uint64_t v44 = v69;
  uint64_t v80 = v69;
  swift_checkMetadataState();
  sub_255EEF780();
  sub_255DA6CF8();
  sub_255EEF490();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  uint64_t v45 = v71;
  uint64_t v46 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, v44, v41);
  uint64_t v47 = v45;
  unint64_t v48 = (*(unsigned __int8 *)(v45 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  uint64_t v49 = (char *)swift_allocObject();
  uint64_t v50 = v75;
  *((void *)v49 + 2) = v74;
  *((void *)v49 + 3) = v50;
  *((void *)v49 + 4) = v43;
  *((void *)v49 + 5) = v42;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v49[v48], v46, v41);
  uint64_t v51 = v59;
  uint64_t v52 = v62;
  sub_255EEF4B0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v34);
  uint64_t v86 = v34;
  uint64_t v87 = v52;
  uint64_t v53 = swift_getOpaqueTypeConformance2();
  unint64_t v54 = v63;
  uint64_t v55 = v65;
  sub_255DD37CC(v51, v65, v53);
  unint64_t v56 = *(void (**)(char *, uint64_t))(v66 + 8);
  v56(v51, v55);
  sub_255DD37CC(v54, v55, v53);
  return ((uint64_t (*)(char *, uint64_t))v56)(v54, v55);
}

void sub_255E94B28(void *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v167 = a5;
  uint64_t v159 = a4;
  uint64_t v164 = a3;
  uint64_t v166 = a1;
  uint64_t v147 = a6;
  uint64_t v163 = sub_255EEE9A0();
  uint64_t v140 = *(void *)(v163 - 8);
  MEMORY[0x270FA5388](v163);
  uint64_t v139 = (char *)v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_255EEF9D0();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v145 = (uint64_t)v127 - v10;
  uint64_t v11 = sub_255EEFF00();
  uint64_t v12 = *(void *)(a4 + 8);
  sub_255EEE960();
  swift_getWitnessTable();
  sub_255EEEF00();
  sub_255EEE870();
  uint64_t v165 = a2;
  sub_255EF01E0();
  uint64_t v190 = v12;
  swift_getWitnessTable();
  sub_255EEE960();
  swift_getWitnessTable();
  sub_255EEEF00();
  sub_255EEE870();
  sub_255EEF090();
  uint64_t v13 = sub_255EEE870();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v177 = v11;
  uint64_t v178 = a2;
  uint64_t v179 = v13;
  uint64_t v180 = WitnessTable;
  uint64_t v181 = v12;
  uint64_t v15 = sub_255EEFA20();
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v17 = MEMORY[0x263F1A820];
  uint64_t v188 = MEMORY[0x263F1A820];
  uint64_t v189 = v16;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v186 = v18;
  uint64_t v187 = v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = sub_255E9A310(&qword_269F351C0, MEMORY[0x263F1A470]);
  uint64_t v184 = v20;
  uint64_t v185 = v21;
  uint64_t v183 = swift_getWitnessTable();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = (uint64_t)v165;
  uint64_t v177 = MEMORY[0x263F1A830];
  uint64_t v178 = v165;
  uint64_t v142 = v15;
  uint64_t v179 = v15;
  uint64_t v180 = v17;
  uint64_t v144 = v12;
  uint64_t v181 = v12;
  uint64_t v182 = v22;
  uint64_t v141 = v22;
  uint64_t v24 = sub_255EEF910();
  uint64_t v134 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v143 = (char *)v127 - v25;
  uint64_t v26 = sub_255EEE870();
  uint64_t v136 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  unint64_t v133 = (char *)v127 - v27;
  uint64_t v135 = v24;
  uint64_t v132 = swift_getWitnessTable();
  v176[2] = v132;
  v176[3] = v21;
  uint64_t v157 = v26;
  uint64_t v156 = swift_getWitnessTable();
  uint64_t v177 = v26;
  uint64_t v178 = (char *)v163;
  uint64_t v179 = v156;
  uint64_t v180 = MEMORY[0x263F190C8];
  uint64_t v155 = MEMORY[0x263F1A9B0];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v138 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v137 = (char *)v127 - v28;
  uint64_t v177 = v23;
  uint64_t v29 = v164;
  uint64_t v30 = v159;
  uint64_t v178 = v164;
  uint64_t v179 = v159;
  uint64_t v180 = v167;
  uint64_t v31 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void *)(v32 + 64);
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)v127 - v34;
  sub_255E99B74();
  uint64_t v152 = v36;
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  uint64_t v151 = (void *)((char *)v127 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v153 = (uint64_t)v127 - v40;
  uint64_t v161 = *((void *)v29 - 1);
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v146 = (char *)v127 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v154 = (char *)v127 - v44;
  MEMORY[0x270FA5388](v43);
  char v162 = (char *)v127 - v45;
  uint64_t v46 = v32;
  uint64_t v150 = *(void (**)(char *, void *, uint64_t))(v32 + 16);
  uint64_t v47 = v166;
  unint64_t v48 = (void *)v31;
  v150(v35, v166, v31);
  unint64_t v49 = (*(unsigned __int8 *)(v46 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v149 = v49 + v33;
  uint64_t v50 = (uint64_t (*)())swift_allocObject();
  *((void *)v50 + 2) = v165;
  *((void *)v50 + 3) = v29;
  uint64_t v51 = v167;
  *((void *)v50 + 4) = v30;
  *((void *)v50 + 5) = v51;
  uint64_t v52 = *(void (**)(char *, char *, void *))(v46 + 32);
  uint64_t v148 = v35;
  v52((char *)v50 + v49, v35, v48);
  uint64_t v53 = v47;
  unint64_t v54 = v48;
  uint64_t v160 = v48;
  v150(v35, v53, (uint64_t)v48);
  uint64_t v55 = v167;
  unint64_t v56 = (uint64_t (*)())swift_allocObject();
  unint64_t v57 = v165;
  uint64_t v58 = v164;
  *((void *)v56 + 2) = v165;
  *((void *)v56 + 3) = v58;
  *((void *)v56 + 4) = v30;
  *((void *)v56 + 5) = v55;
  v52((char *)v56 + v49, v148, v54);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v60 = (uint64_t)v151;
  void *v151 = KeyPath;
  sub_255E9A29C(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v61 = v152;
  uint64_t v62 = v60 + v152[13];
  uint64_t v63 = *MEMORY[0x263F18CB8];
  uint64_t v64 = sub_255EEE860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 104))(v62, v63, v64);
  uint64_t v65 = (uint64_t (**)())(v60 + v61[14]);
  *uint64_t v65 = sub_255E9A1A8;
  v65[1] = v50;
  uint64_t v66 = (uint64_t (**)())(v60 + v61[15]);
  *uint64_t v66 = sub_255E9A1C4;
  v66[1] = v56;
  uint64_t v67 = v153;
  sub_255E9A93C(v60, v153, (uint64_t (*)(void))sub_255E99B74);
  uint64_t v168 = v57;
  uint64_t v169 = v58;
  uint64_t v170 = v30;
  uint64_t v171 = v55;
  uint64_t v172 = v166;
  sub_255E9A310(&qword_269F383C8, (void (*)(uint64_t))sub_255E99B74);
  uint64_t v68 = v154;
  sub_255EA4068((uint64_t (*)(uint64_t))sub_255E9A300);
  sub_255E9AB44(v67, (uint64_t (*)(void))sub_255E99B74);
  sub_255DD37CC(v68, v58, v55);
  uint64_t v69 = *(int **)(v161 + 8);
  uint64_t v153 = v161 + 8;
  uint64_t v152 = v69;
  ((void (*)(char *, char *))v69)(v68, v58);
  uint64_t v70 = sub_255EEE140();
  uint64_t v177 = v157;
  uint64_t v178 = (char *)v163;
  uint64_t v179 = v156;
  uint64_t v180 = MEMORY[0x263F190C8];
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v72 = sub_255E99A50((unint64_t *)&qword_269F351D8, MEMORY[0x270FA9600]);
  uint64_t v177 = OpaqueTypeMetadata2;
  uint64_t v178 = (char *)v70;
  uint64_t v179 = OpaqueTypeConformance2;
  uint64_t v180 = v72;
  uint64_t v151 = (void *)v72;
  uint64_t v73 = sub_255EEF8D0();
  uint64_t v74 = sub_255EF01E0();
  uint64_t v75 = *(char **)(v74 - 8);
  uint64_t v76 = (void (*)(char *, void *, uint64_t))*((void *)v75 + 8);
  unint64_t v77 = ((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v74);
  uint64_t v78 = (char *)v127 - v77;
  uint64_t v79 = (char *)v166 + *((int *)v160 + 21);
  char v80 = *v79;
  uint64_t v81 = (char *)*((void *)v79 + 1);
  LOBYTE(v177) = v80;
  uint64_t v178 = v81;
  sub_255E9A388(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  uint64_t v82 = sub_255EEF820();
  uint64_t v155 = v73;
  uint64_t v154 = (char *)v127 - v77;
  if ((v176[0] & 1) == 0)
  {
    MEMORY[0x270FA5388](v82);
    uint64_t v117 = (char *)v127 - v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v117, 1, 1, v73);
    swift_getWitnessTable();
    long long v114 = (void (*)(char *, char *, uint64_t))*((void *)v75 + 2);
    v114(v78, v117, v74);
    long long v115 = (void (*)(char *, uint64_t))*((void *)v75 + 1);
    v115(v117, v74);
    long long v116 = v146;
    goto LABEL_5;
  }
  uint64_t v129 = OpaqueTypeConformance2;
  uint64_t v130 = v70;
  uint64_t v148 = v75;
  uint64_t v150 = v76;
  uint64_t v149 = v74;
  uint64_t v131 = v127;
  uint64_t v128 = *(void *)(v73 - 8);
  uint64_t v83 = MEMORY[0x270FA5388](v82);
  v127[0] = (char *)v127 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127[1] = v127;
  MEMORY[0x270FA5388](v83);
  uint64_t v86 = (char *)v127 - v85;
  sub_255EEED10();
  uint64_t v87 = v166;
  uint64_t v88 = sub_255E975E0(v160, v145);
  MEMORY[0x270FA5388](v88);
  uint64_t v89 = v164;
  v127[-6] = v165;
  v127[-5] = v89;
  uint64_t v126 = v141;
  uint64_t v125 = v144;
  uint64_t v124 = v142;
  uint64_t v90 = v143;
  sub_255EEF8F0();
  sub_255E9A388(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v91 = swift_allocObject();
  *(_OWORD *)(v91 + 16) = xmmword_255EF1E20;
  uint64_t v92 = v87[3];
  *(void *)(v91 + 32) = v87[2];
  *(void *)(v91 + 40) = v92;
  *(void *)(v91 + 48) = 0x72656B636950;
  *(void *)(v91 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v93 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v94 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v94)
  {
    sub_255EEFD90();

    uint64_t v95 = v133;
    uint64_t v96 = v135;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v90, v96);
    uint64_t v97 = v139;
    sub_255EEE990();
    uint64_t v98 = v137;
    uint64_t v99 = v157;
    uint64_t v100 = v163;
    sub_255EEF460();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v97, v100);
    uint64_t v101 = (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v95, v99);
    uint64_t v102 = v130;
    uint64_t v103 = *(void *)(v130 - 8);
    MEMORY[0x270FA5388](v101);
    uint64_t v105 = (char *)v127 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255E9A29C(0, &qword_269F38328, MEMORY[0x270FA94A0], MEMORY[0x263F1B5D0]);
    sub_255EEF820();
    uint64_t v106 = OpaqueTypeMetadata2;
    sub_255EEF5D0();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v98, v106);
    uint64_t v107 = v155;
    uint64_t v108 = swift_getWitnessTable();
    uint64_t v109 = (char *)v127[0];
    sub_255DD37CC(v86, v107, v108);
    uint64_t v110 = v128;
    uint64_t v111 = *(uint64_t (**)(char *, uint64_t))(v128 + 8);
    uint64_t v112 = v111(v86, v107);
    uint64_t v76 = v150;
    MEMORY[0x270FA5388](v112);
    sub_255DD37CC(v109, v107, v108);
    v111(v109, v107);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))((char *)v127 - (((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v107);
    long long v113 = v148;
    long long v114 = (void (*)(char *, char *, uint64_t))*((void *)v148 + 2);
    uint64_t v74 = v149;
    v114(v154, (char *)v127 - (((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF0), v149);
    long long v115 = (void (*)(char *, uint64_t))*((void *)v113 + 1);
    v115((char *)v127 - (((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF0), v74);
    long long v116 = v146;
LABEL_5:
    uint64_t v118 = v162;
    long long v119 = v164;
    uint64_t v120 = (*(uint64_t (**)(char *, char *, char *))(v161 + 16))(v116, v162, v164);
    uint64_t v166 = v127;
    uint64_t v177 = (uint64_t)v116;
    MEMORY[0x270FA5388](v120);
    uint64_t v121 = (char *)v127 - (((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v122 = v154;
    v114(v121, v154, v74);
    uint64_t v178 = v121;
    v176[0] = v119;
    v176[1] = v74;
    uint64_t v174 = v167;
    uint64_t v173 = swift_getWitnessTable();
    uint64_t v175 = swift_getWitnessTable();
    sub_255E3B2E8((uint64_t)&v177, 2uLL, (uint64_t)v176);
    v115(v122, v74);
    uint64_t v123 = (void (*)(char *, char *))v152;
    ((void (*)(char *, char *))v152)(v118, v119);
    v115(v121, v74);
    v123(v116, v119);
    return;
  }
  __break(1u);
}

void sub_255E95FDC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = sub_255EEEC90();
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = 1;
  sub_255E9ACC8(0, &qword_269F383E0, &qword_269F38360, (uint64_t (*)(uint64_t))sub_255E99C68);
  sub_255E9607C(a1, a2, a3, a4, a5, a6 + *(int *)(v12 + 44));
}

void sub_255E9607C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v85 = a5;
  uint64_t v86 = a4;
  uint64_t v84 = a3;
  uint64_t v80 = a6;
  uint64_t v87 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E57B88();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v79 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v77 = (char *)&v76 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v78 = (uint64_t)&v76 - v15;
  sub_255DD8400();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v88 = (uint64_t)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v76 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v90 = (uint64_t)&v76 - v22;
  uint64_t v23 = a1[1];
  uint64_t v91 = *a1;
  uint64_t v92 = v23;
  unint64_t v24 = sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v25 = MEMORY[0x263F8D310];
  unint64_t v81 = v24;
  uint64_t v26 = sub_255EEF3D0();
  uint64_t v28 = v27;
  uint64_t v91 = v26;
  uint64_t v92 = v27;
  char v30 = v29 & 1;
  LOBYTE(v93) = v29 & 1;
  uint64_t v94 = v31;
  sub_255E9A388(0, (unint64_t *)&qword_269F37DA0, v25, MEMORY[0x263F8E0F8]);
  uint64_t v83 = v32;
  uint64_t v33 = swift_allocObject();
  long long v82 = xmmword_255EF1E20;
  *(_OWORD *)(v33 + 16) = xmmword_255EF1E20;
  uint64_t v35 = a1[2];
  uint64_t v34 = a1[3];
  uint64_t v89 = a1;
  *(void *)(v33 + 32) = v35;
  *(void *)(v33 + 40) = v34;
  *(void *)(v33 + 48) = 0x656C746954;
  *(void *)(v33 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  uint64_t v36 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v37 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v37)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v26, v28, v30);
    swift_bridgeObjectRelease();
    sub_255E9A93C((uint64_t)v21, v90, (uint64_t (*)(void))sub_255DD8400);
    uint64_t v91 = a2;
    uint64_t v92 = v84;
    uint64_t v38 = v86;
    uint64_t v93 = v86;
    uint64_t v94 = v85;
    uint64_t v39 = type metadata accessor for ExpandableWheelPickerView();
    uint64_t v40 = a2;
    uint64_t v41 = v89;
    uint64_t v85 = v39;
    uint64_t v42 = sub_255EEF9D0();
    MEMORY[0x25A29B390](v42);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(v40, v38);
    uint64_t v45 = v44;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v9, v40);
    uint64_t v91 = v43;
    uint64_t v92 = v45;
    uint64_t v46 = sub_255EEF3D0();
    uint64_t v48 = v47;
    char v50 = v49 & 1;
    uint64_t v91 = sub_255EEF6D0();
    uint64_t v51 = sub_255EEF370();
    uint64_t v53 = v52;
    LOBYTE(v45) = v54;
    uint64_t v56 = v55;
    sub_255D85120(v46, v48, v50);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v91 = v51;
    uint64_t v92 = v53;
    char v58 = v45 & 1;
    LOBYTE(v93) = v45 & 1;
    uint64_t v94 = v56;
    uint64_t v95 = KeyPath;
    char v96 = 2;
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = v82;
    uint64_t v60 = v41[3];
    *(void *)(v59 + 32) = v41[2];
    *(void *)(v59 + 40) = v60;
    *(void *)(v59 + 48) = 0x7470697263736544;
    *(void *)(v59 + 56) = 0xEB000000006E6F69;
    swift_bridgeObjectRetain();
    uint64_t v61 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v62 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v62)
    {
      sub_255EEFD90();

      sub_255DE7494();
      sub_255DEABD4();
      uint64_t v63 = (uint64_t)v77;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v51, v53, v58);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v64 = v78;
      sub_255E9A93C(v63, v78, (uint64_t (*)(void))sub_255E57B88);
      sub_255E9673C(v85, &v91);
      uint64_t v65 = v91;
      uint64_t v66 = v92;
      uint64_t v67 = v93;
      uint64_t v68 = v94;
      uint64_t v69 = v88;
      sub_255E9AADC(v90, v88, (uint64_t (*)(void))sub_255DD8400);
      uint64_t v70 = v79;
      sub_255E9AADC(v64, v79, (uint64_t (*)(void))sub_255E57B88);
      uint64_t v71 = v80;
      sub_255E9AADC(v69, v80, (uint64_t (*)(void))sub_255DD8400);
      sub_255E99C68();
      uint64_t v73 = v72;
      uint64_t v74 = v71 + *(int *)(v72 + 48);
      *(void *)uint64_t v74 = 0;
      *(unsigned char *)(v74 + 8) = 1;
      sub_255E9AADC(v70, v71 + *(int *)(v72 + 64), (uint64_t (*)(void))sub_255E57B88);
      uint64_t v75 = (uint64_t *)(v71 + *(int *)(v73 + 80));
      uint64_t *v75 = v65;
      v75[1] = v66;
      v75[2] = v67;
      v75[3] = v68;
      sub_255E3A77C(v65, v66);
      sub_255E9AB44(v64, (uint64_t (*)(void))sub_255E57B88);
      sub_255E9AB44(v90, (uint64_t (*)(void))sub_255DD8400);
      sub_255E3A7C0(v65, v66);
      sub_255E9AB44(v70, (uint64_t (*)(void))sub_255E57B88);
      sub_255E9AB44(v88, (uint64_t (*)(void))sub_255DD8400);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_255E9673C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v4 = a1 - 8;
  uint64_t v40 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v38 = v5;
  uint64_t v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = sub_255EF01E0();
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (*(unsigned char *)(v3 + *(int *)(v4 + 100)) == 1)
  {
    uint64_t v22 = v3;
    uint64_t v23 = v15;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v10, v3 + *(int *)(v42 + 68), v7);
    uint64_t v24 = v41;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, v6) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v10, v7);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v17, v10, v6);
      uint64_t v25 = v42;
      uint64_t v26 = sub_255EEF9D0();
      MEMORY[0x25A29B390](v26);
      uint64_t v27 = *(void *)(v25 + 32);
      char v28 = sub_255EEFCC0();
      char v29 = *(void (**)(char *, uint64_t))(v24 + 8);
      v29(v13, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v17, v6);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if ((v28 & 1) == 0)
      {
        uint64_t v18 = *(void *)(v22 + 16);
        uint64_t v19 = *(void *)(v22 + 24);
        uint64_t v31 = v39;
        uint64_t v30 = v40;
        uint64_t v32 = v22;
        uint64_t v33 = v42;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v32, v42);
        unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        uint64_t v21 = (char *)swift_allocObject();
        uint64_t v35 = *(void *)(v33 + 24);
        *((void *)v21 + 2) = v6;
        *((void *)v21 + 3) = v35;
        uint64_t v36 = *(void *)(v33 + 40);
        *((void *)v21 + 4) = v27;
        *((void *)v21 + 5) = v36;
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v21[v34], v31, v33);
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v20 = sub_255E9ABA8;
      }
    }
  }
  id v37 = v43;
  void *v43 = v18;
  v37[1] = v19;
  v37[2] = v20;
  v37[3] = v21;
  return result;
}

void sub_255E96AF0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = sub_255EEED80();
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = 1;
  sub_255E9A8A4();
  sub_255E96B6C(a1, a2, a3, a4, a5, a6 + *(int *)(v12 + 44));
}

void sub_255E96B6C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v45 = a6;
  sub_255E99EE0(0, &qword_269F38390, &qword_269F38398, (uint64_t (*)(uint64_t))sub_255E99F68, (void (*)(void))sub_255E9A004);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v44 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v38 - v10;
  sub_255DD8400();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v38 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v38 = (uint64_t)&v38 - v18;
  uint64_t v19 = a1[1];
  uint64_t v46 = *a1;
  uint64_t v47 = v19;
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v20 = MEMORY[0x263F8D310];
  uint64_t v21 = sub_255EEF3D0();
  uint64_t v23 = v22;
  uint64_t v46 = v21;
  uint64_t v47 = v22;
  char v25 = v24 & 1;
  char v48 = v24 & 1;
  uint64_t v49 = v26;
  sub_255E9A388(0, (unint64_t *)&qword_269F37DA0, v20, MEMORY[0x263F8E0F8]);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_255EF1E20;
  uint64_t v28 = a1[3];
  *(void *)(v27 + 32) = a1[2];
  *(void *)(v27 + 40) = v28;
  *(void *)(v27 + 48) = 0x656C746954;
  *(void *)(v27 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  char v29 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v30 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v30)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v21, v23, v25);
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t)v17;
    uint64_t v32 = v38;
    sub_255E9A93C(v31, v38, (uint64_t (*)(void))sub_255DD8400);
    *(void *)uint64_t v11 = sub_255EEEC90();
    *((void *)v11 + 1) = 0;
    v11[16] = 1;
    sub_255E9ACC8(0, &qword_269F383D8, &qword_269F38398, (uint64_t (*)(uint64_t))sub_255E99F68);
    sub_255E96F30((uint64_t)a1, v40, v41, v42, v43, (uint64_t)&v11[*(int *)(v33 + 44)]);
    uint64_t v34 = v39;
    sub_255E9AADC(v32, v39, (uint64_t (*)(void))sub_255DD8400);
    uint64_t v35 = v44;
    sub_255E9A9A4((uint64_t)v11, v44);
    uint64_t v36 = v45;
    sub_255E9AADC(v34, v45, (uint64_t (*)(void))sub_255DD8400);
    sub_255E99E38();
    sub_255E9A9A4(v35, v36 + *(int *)(v37 + 48));
    sub_255E9AA40((uint64_t)v11);
    sub_255E9AB44(v32, (uint64_t (*)(void))sub_255DD8400);
    sub_255E9AA40(v35);
    sub_255E9AB44(v34, (uint64_t (*)(void))sub_255DD8400);
  }
  else
  {
    __break(1u);
  }
}

void sub_255E96F30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v57 = a6;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255E57B88();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v56 = (uint64_t)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  char v54 = (char *)v52 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v55 = (uint64_t)v52 - v19;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v53 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v20 = sub_255EEF9D0();
  MEMORY[0x25A29B390](v20);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  uint64_t v58 = v21;
  uint64_t v59 = v23;
  sub_255DAD520();
  uint64_t v24 = sub_255EEF3D0();
  uint64_t v26 = v25;
  LOBYTE(a3) = v27 & 1;
  uint64_t v58 = sub_255EEF6D0();
  uint64_t v28 = sub_255EEF370();
  uint64_t v30 = v29;
  char v32 = v31;
  uint64_t v34 = v33;
  sub_255D85120(v24, v26, a3);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v58 = v28;
  uint64_t v59 = v30;
  char v36 = v32 & 1;
  LOBYTE(v60) = v32 & 1;
  v52[1] = v34;
  uint64_t v61 = v34;
  uint64_t v62 = KeyPath;
  char v63 = 2;
  sub_255E9A388(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_255EF1E20;
  uint64_t v38 = *(void *)(a1 + 24);
  *(void *)(v37 + 32) = *(void *)(a1 + 16);
  *(void *)(v37 + 40) = v38;
  *(void *)(v37 + 48) = 0x7470697263736544;
  *(void *)(v37 + 56) = 0xEB000000006E6F69;
  swift_bridgeObjectRetain();
  uint64_t v39 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v40 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v40)
  {
    sub_255EEFD90();

    sub_255DE7494();
    sub_255DEABD4();
    uint64_t v41 = (uint64_t)v54;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v28, v30, v36);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v42 = v55;
    sub_255E9A93C(v41, v55, (uint64_t (*)(void))sub_255E57B88);
    sub_255E9673C(v53, &v58);
    uint64_t v43 = v58;
    uint64_t v44 = v59;
    uint64_t v45 = v60;
    uint64_t v46 = v61;
    uint64_t v47 = v56;
    sub_255E9AADC(v42, v56, (uint64_t (*)(void))sub_255E57B88);
    uint64_t v48 = v57;
    sub_255E9AADC(v47, v57, (uint64_t (*)(void))sub_255E57B88);
    sub_255E99F68();
    uint64_t v50 = v48 + *(int *)(v49 + 48);
    *(void *)uint64_t v50 = 0;
    *(unsigned char *)(v50 + 8) = 1;
    uint64_t v51 = (uint64_t *)(v48 + *(int *)(v49 + 64));
    *uint64_t v51 = v43;
    v51[1] = v44;
    v51[2] = v45;
    v51[3] = v46;
    sub_255E3A77C(v43, v44);
    sub_255E9AB44(v42, (uint64_t (*)(void))sub_255E57B88);
    sub_255E3A7C0(v43, v44);
    sub_255E9AB44(v47, (uint64_t (*)(void))sub_255E57B88);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E973BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v25[0] = a1;
  v25[1] = a7;
  sub_255E99B74();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v13);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v25 - v20;
  id v25[2] = a3;
  v25[3] = a4;
  v25[4] = a5;
  v25[5] = a6;
  uint64_t v22 = *(void (**)(void))(a2 + *(int *)(type metadata accessor for ExpandableWheelPickerView() + 88));
  sub_255E9AADC(v25[0], (uint64_t)v15, (uint64_t (*)(void))sub_255E99B74);
  sub_255E9A310(&qword_269F383C8, (void (*)(uint64_t))sub_255E99B74);
  sub_255EEF960();
  v22();
  swift_release();
  sub_255DD37CC(v19, a4, a6);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v19, a4);
  sub_255DD37CC(v21, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, a4);
}

uint64_t sub_255E975E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = *(a1 - 1);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v28 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v26 = *(void (**)(char *))(v3 + 16);
  v26((char *)&v20 - v6);
  sub_255EEFF70();
  uint64_t v8 = sub_255EEFF60();
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 64) & ~v9;
  uint64_t v24 = v10 + v4;
  uint64_t v25 = v9 | 7;
  uint64_t v11 = (char *)swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8F500];
  *((void *)v11 + 2) = v8;
  *((void *)v11 + 3) = v12;
  uint64_t v13 = a1[3];
  uint64_t v22 = a1[2];
  *((void *)v11 + 4) = v22;
  *((void *)v11 + 5) = v13;
  uint64_t v14 = a1[5];
  uint64_t v23 = a1[4];
  *((void *)v11 + 6) = v23;
  *((void *)v11 + 7) = v14;
  uint64_t v21 = *(void (**)(char *, char *, void *))(v3 + 32);
  v21(&v11[v10], v7, a1);
  uint64_t v15 = v28;
  ((void (*)(char *, uint64_t, void *))v26)(v28, v27, a1);
  uint64_t v16 = sub_255EEFF60();
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = v16;
  uint64_t v18 = v22;
  *((void *)v17 + 3) = MEMORY[0x263F8F500];
  *((void *)v17 + 4) = v18;
  *((void *)v17 + 5) = v13;
  *((void *)v17 + 6) = v23;
  *((void *)v17 + 7) = v14;
  v21(&v17[v10], v15, a1);
  return sub_255EEF9B0();
}

uint64_t sub_255E97814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a5;
  uint64_t v54 = a6;
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v69 = a5;
  uint64_t v53 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v10 = *(void *)(v53 - 8);
  uint64_t v52 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v53);
  uint64_t v44 = (char *)&KeyPath - v11;
  uint64_t v12 = sub_255EEFF00();
  uint64_t v13 = *(void *)(a4 + 8);
  sub_255EEE960();
  swift_getWitnessTable();
  uint64_t v48 = sub_255EEEF00();
  uint64_t v39 = sub_255EEE870();
  sub_255EF01E0();
  uint64_t v71 = v13;
  uint64_t v46 = v13;
  swift_getWitnessTable();
  sub_255EEE960();
  swift_getWitnessTable();
  uint64_t v41 = sub_255EEEF00();
  uint64_t v40 = sub_255EEE870();
  sub_255EEF090();
  uint64_t v14 = sub_255EEE870();
  uint64_t v42 = v14;
  uint64_t v47 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v66 = v12;
  uint64_t v67 = a2;
  uint64_t v68 = v14;
  uint64_t v69 = WitnessTable;
  uint64_t v70 = v13;
  uint64_t v49 = sub_255EEFA20();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v49);
  uint64_t v38 = (char *)&KeyPath - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v43 = (char *)&KeyPath - v17;
  uint64_t v66 = *(void *)(a1 + 32);
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v57 = a4;
  uint64_t v20 = v51;
  uint64_t v58 = v51;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = v44;
  uint64_t v22 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v44, a1, v53);
  unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = a2;
  *((void *)v24 + 3) = v18;
  *((void *)v24 + 4) = v19;
  *((void *)v24 + 5) = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v24[v23], v21, v22);
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v64 = MEMORY[0x263F1A820];
  uint64_t v65 = v25;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v62 = v26;
  uint64_t v63 = v27;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = sub_255E9A310(&qword_269F351C0, MEMORY[0x263F1A470]);
  uint64_t v60 = v28;
  uint64_t v61 = v29;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v30 = v38;
  sub_255EEFA00();
  uint64_t v59 = v36;
  uint64_t v31 = v49;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v43;
  sub_255DD37CC(v30, v31, v32);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v50 + 8);
  v34(v30, v31);
  sub_255DD37CC(v33, v31, v32);
  return ((uint64_t (*)(char *, uint64_t))v34)(v33, v31);
}

void sub_255E97DA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v52 = a5;
  uint64_t v54 = *(void *)(a4 + 8);
  sub_255EEE960();
  swift_getWitnessTable();
  uint64_t v49 = sub_255EEEF00();
  uint64_t v8 = sub_255EEE870();
  sub_255EF01E0();
  uint64_t v66 = v54;
  swift_getWitnessTable();
  sub_255EEE960();
  swift_getWitnessTable();
  uint64_t v50 = v8;
  v43[1] = sub_255EEEF00();
  uint64_t v9 = sub_255EEE870();
  uint64_t v47 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v43 - v10;
  sub_255EEF090();
  uint64_t v44 = v9;
  v43[0] = sub_255EEE870();
  uint64_t v51 = *(void *)(v43[0] - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v43[0]);
  uint64_t v46 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)v43 - v14;
  uint64_t v53 = a4;
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  uint64_t v16 = a1;
  uint64_t v62 = v15(a3, a4);
  uint64_t v63 = v17;
  sub_255DAD520();
  uint64_t v18 = sub_255EEF3D0();
  uint64_t v20 = v19;
  uint64_t v62 = v18;
  uint64_t v63 = v19;
  char v22 = v21 & 1;
  char v64 = v21 & 1;
  uint64_t v65 = v23;
  uint64_t v45 = v11;
  uint64_t v24 = (uint64_t)v11;
  uint64_t v25 = MEMORY[0x263F1A820];
  sub_255E93C78(v16, 1, MEMORY[0x263F1A830], a3, MEMORY[0x263F1A820], v54, v24);
  sub_255D85120(v18, v20, v22);
  swift_bridgeObjectRelease();
  sub_255E9A388(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_255EF6660;
  uint64_t v27 = *(void *)(v55 + 24);
  *(void *)(v26 + 32) = *(void *)(v55 + 16);
  *(void *)(v26 + 40) = v27;
  *(void *)(v26 + 48) = 0x72656B636950;
  *(void *)(v26 + 56) = 0xE600000000000000;
  *(void *)(v26 + 64) = 0x6E6F6974704FLL;
  *(void *)(v26 + 72) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  *(void *)(v26 + 80) = v15(a3, v53);
  *(void *)(v26 + 88) = v28;
  uint64_t v29 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v30 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v30)
  {
    sub_255EEFD90();

    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v60 = v25;
    uint64_t v61 = WitnessTable;
    uint64_t v32 = swift_getWitnessTable();
    uint64_t v33 = swift_getWitnessTable();
    uint64_t v58 = v32;
    uint64_t v59 = v33;
    uint64_t v34 = v44;
    uint64_t v35 = swift_getWitnessTable();
    uint64_t v36 = v46;
    uint64_t v37 = v45;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v34);
    uint64_t v38 = sub_255E9A310(&qword_269F351C0, MEMORY[0x263F1A470]);
    uint64_t v56 = v35;
    uint64_t v57 = v38;
    uint64_t v39 = v43[0];
    uint64_t v40 = swift_getWitnessTable();
    uint64_t v41 = v48;
    sub_255DD37CC(v36, v39, v40);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v51 + 8);
    v42(v36, v39);
    sub_255DD37CC(v41, v39, v40);
    v42(v41, v39);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255E9831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_255EEEFC0();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v24 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v12 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = (uint64_t (**)(void))(a1 + *(int *)(v14 + 76));
  if (*v17) {
    uint64_t v14 = (*v17)();
  }
  uint64_t v23 = (uint64_t)&v23;
  MEMORY[0x270FA5388](v14);
  *(&v23 - 6) = a2;
  *(&v23 - 5) = a3;
  uint64_t v18 = v25;
  *(&v23 - 4) = a4;
  *(&v23 - 3) = v18;
  *(&v23 - 2) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = a2;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = a4;
  *((void *)v20 + 5) = v18;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v19], v16, v12);
  sub_255EEFB30();
  char v21 = v24;
  sub_255EEEFB0();
  sub_255EEE7C0();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v21, v27);
}

uint64_t sub_255E985BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t a1), void *a5)
{
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t aBlock = a2;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v6 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = a1 + *(int *)(v8 + 84);
  uint64_t v13 = *(void *)(v11 + 8);
  LOBYTE(aBlock) = *(unsigned char *)v11;
  char v12 = aBlock;
  uint64_t v49 = v13;
  sub_255E9A388(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  swift_retain();
  sub_255EEF820();
  LOBYTE(aBlock) = v12;
  uint64_t v49 = v13;
  BOOL v54 = (v47 & 1) == 0;
  sub_255EEF830();
  swift_release();
  sub_255E9993C();
  uint64_t v46 = sub_255EF0120();
  uint64_t v14 = sub_255EEFC30();
  uint64_t v44 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v19 = (char *)&v37 - v18;
  sub_255EEFC20();
  MEMORY[0x25A29B660](v19, 0.05);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v43 = v15 + 8;
  uint64_t v45 = v20;
  v20(v19, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  unint64_t v21 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  char v22 = (char *)swift_allocObject();
  uint64_t v23 = v40;
  *((void *)v22 + 2) = v39;
  *((void *)v22 + 3) = v23;
  uint64_t v24 = v42;
  *((void *)v22 + 4) = v41;
  *((void *)v22 + 5) = v24;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v22[v21], v10, v6);
  uint64_t v52 = sub_255E99980;
  uint64_t v53 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_255EA320C;
  uint64_t v51 = &block_descriptor_6;
  uint64_t v25 = _Block_copy(&aBlock);
  uint64_t v26 = sub_255EEFC10();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEFBF0();
  uint64_t v30 = sub_255EEFBE0();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x263F8EE78];
  sub_255E99A50(&qword_269F38338, MEMORY[0x270FCD9E0]);
  sub_255E9A29C(0, &qword_269F38340, MEMORY[0x270FCDA40], MEMORY[0x263F8D488]);
  sub_255E99A98();
  sub_255EF0270();
  uint64_t v34 = v38;
  uint64_t v35 = (void *)v46;
  MEMORY[0x25A29BB20](v38, v29, v33, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  v45(v34, v44);
  return swift_release();
}

uint64_t (*sub_255E98AE0(uint64_t a1))(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = sub_255E94118(a1);
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    MEMORY[0x270FA5388](result);
    sub_255EEFB30();
    sub_255EEE7D0();
    swift_release();
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))sub_255D879C4(v2);
  }
  return result;
}

uint64_t sub_255E98BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v7 = type metadata accessor for ExpandableWheelPickerView();
  sub_255E9A388(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  uint64_t result = sub_255EEF820();
  if (v9 == 1) {
    return a6(v7);
  }
  return result;
}

uint64_t sub_255E98C60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = sub_255EF01E0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v39 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = *(void *)(v3 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  uint64_t v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v37 = (char *)&v33 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v19 = *(int *)(a1 + 64);
  uint64_t v38 = v1;
  uint64_t v20 = v1 + v19;
  uint64_t v21 = v16;
  char v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v10, v20, v16);
  uint64_t v40 = v11;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v23(v10, 1, v3) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v21);
  }
  uint64_t v35 = v21;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v33(v18, v10, v3);
  uint64_t v34 = a1;
  uint64_t v25 = v35;
  uint64_t v26 = v39;
  v22(v39, v38 + *(int *)(a1 + 68), v35);
  if (v23(v26, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v18, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v39, v25);
  }
  else
  {
    uint64_t v27 = v37;
    v33(v37, v39, v3);
    uint64_t v28 = v34;
    uint64_t v29 = sub_255EEF9D0();
    uint64_t v30 = v36;
    MEMORY[0x25A29B390](v29);
    char v31 = sub_255EEFCC0();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v40 + 8);
    v32(v30, v3);
    if (v31) {
      sub_255E99864((uint64_t)v18, v28);
    }
    v32(v27, v3);
    return ((uint64_t (*)(char *, uint64_t))v32)(v18, v3);
  }
}

uint64_t sub_255E98FD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v6 = v2;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + *(int *)(v2 + 76));
  if (v7) {
    v7(v2, v3, v4, v5);
  }
  return sub_255E99040(v6);
}

uint64_t sub_255E99040(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = sub_255EF01E0();
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t v19 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v6);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v1 + *(int *)(a1 + 76));
  if (v13) {
    uint64_t v10 = v13(v10);
  }
  MEMORY[0x270FA5388](v10);
  *(&v17 - 6) = v4;
  *(_OWORD *)(&v17 - 5) = *(_OWORD *)(a1 + 24);
  *(&v17 - 3) = *(void *)(a1 + 40);
  *(&v17 - 2) = v1;
  sub_255EEFB30();
  sub_255EEE7D0();
  swift_release();
  uint64_t v15 = v18;
  uint64_t v14 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v8, v2 + *(int *)(a1 + 68), v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v8, v14);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v4);
  sub_255E99864((uint64_t)v12, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v4);
}

uint64_t sub_255E992B8(void (*a1)(uint64_t *, uint64_t, uint64_t, void))
{
  v5[3] = sub_255EEE140();
  v5[4] = sub_255E99A50((unint64_t *)&qword_269F351D8, MEMORY[0x270FA9600]);
  __swift_allocate_boxed_opaque_existential_1(v5);
  type metadata accessor for ExpandableWheelPickerView();
  sub_255E9A29C(0, &qword_269F38328, MEMORY[0x270FA94A0], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  sub_255EEFBB0();
  a1(v5, v2, v3, 0);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t sub_255E993D0()
{
  type metadata accessor for ExpandableWheelPickerView();
  uint64_t v0 = sub_255EEF9D0();
  return MEMORY[0x25A29B390](v0);
}

uint64_t sub_255E99434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ExpandableWheelPickerView();
  uint64_t v10 = v6;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + *(int *)(v6 + 76));
  if (v11) {
    v11(v6, v7, v8, v9);
  }
  return sub_255E99864(a1, v10);
}

uint64_t sub_255E994AC()
{
  return sub_255EEF830();
}

uint64_t sub_255E9954C()
{
  return sub_255E9A370((uint64_t (*)(void, void, void, void, void))sub_255E94B28);
}

uint64_t sub_255E99568()
{
  return sub_255E9ABC0((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_255E9831C);
}

uint64_t sub_255E99580()
{
  return sub_255E9AC9C((uint64_t (*)(void, void, void, void, void))sub_255E985BC);
}

uint64_t objectdestroyTm_20()
{
  long long v13 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = (int *)type metadata accessor for ExpandableWheelPickerView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[15];
  swift_release();
  swift_release();
  uint64_t v4 = v3 + *(int *)(sub_255EEF9D0() + 32);
  uint64_t v5 = *(void *)(v13 - 8);
  uint64_t v6 = *(void (**)(uint64_t, void))(v5 + 8);
  v6(v4, v13);
  uint64_t v7 = v2 + v1[16];
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, void))(v5 + 48);
  if (!v8(v7, 1, v13)) {
    v6(v7, v13);
  }
  uint64_t v9 = v2 + v1[17];
  if (!v8(v9, 1, v13)) {
    v6(v9, v13);
  }
  sub_255DADCEC(*(void *)(v2 + v1[18]), *(void *)(v2 + v1[18] + 8), *(unsigned char *)(v2 + v1[18] + 16));
  if (*(void *)(v2 + v1[19])) {
    swift_release();
  }
  uint64_t v10 = v2 + v1[20];
  uint64_t v11 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_255E9A29C(0, &qword_269F38328, MEMORY[0x270FA94A0], MEMORY[0x263F1B5D0]);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E9984C()
{
  return sub_255E99998(sub_255E98C60);
}

uint64_t sub_255E99864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_255EEF9D0();
  return sub_255EEF980();
}

unint64_t sub_255E9993C()
{
  unint64_t result = qword_269F38330;
  if (!qword_269F38330)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269F38330);
  }
  return result;
}

uint64_t sub_255E99980()
{
  return sub_255E99998((uint64_t (*)(uint64_t))sub_255E98AE0);
}

uint64_t sub_255E99998(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for ExpandableWheelPickerView() - 8);
  return sub_255E98BA8((uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4, v5, v6, a1);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_255E99A50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255E99A98()
{
  unint64_t result = qword_269F38348;
  if (!qword_269F38348)
  {
    sub_255E9A29C(255, &qword_269F38340, MEMORY[0x270FCDA40], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38348);
  }
  return result;
}

uint64_t sub_255E99B14()
{
  return sub_255E992B8(*(void (**)(uint64_t *, uint64_t, uint64_t, void))(v0 + 48));
}

uint64_t sub_255E99B3C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_255E99B74()
{
  if (!qword_269F38350)
  {
    sub_255E99EE0(255, &qword_269F38358, &qword_269F38360, (uint64_t (*)(uint64_t))sub_255E99C68, (void (*)(void))sub_255E99D1C);
    sub_255E99DA4();
    sub_255E9A114();
    sub_255E9A310(&qword_269F383C0, (void (*)(uint64_t))sub_255E99DA4);
    unint64_t v0 = type metadata accessor for MedicalIDAXLayoutView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38350);
    }
  }
}

void sub_255E99C68()
{
  if (!qword_269F38368)
  {
    sub_255DD8400();
    sub_255E57B88();
    sub_255E9A388(255, &qword_269F36F38, (uint64_t)&type metadata for ClearButtonView, MEMORY[0x263F8D8F0]);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_269F38368);
    }
  }
}

unint64_t sub_255E99D1C()
{
  unint64_t result = qword_269F38370;
  if (!qword_269F38370)
  {
    sub_255E9A29C(255, &qword_269F38360, (uint64_t (*)(uint64_t))sub_255E99C68, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38370);
  }
  return result;
}

void sub_255E99DA4()
{
  if (!qword_269F38378)
  {
    sub_255E9A29C(255, &qword_269F38380, (uint64_t (*)(uint64_t))sub_255E99E38, MEMORY[0x263F1BAC8]);
    sub_255E9A08C();
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38378);
    }
  }
}

void sub_255E99E38()
{
  if (!qword_269F38388)
  {
    sub_255DD8400();
    sub_255E99EE0(255, &qword_269F38390, &qword_269F38398, (uint64_t (*)(uint64_t))sub_255E99F68, (void (*)(void))sub_255E9A004);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F38388);
    }
  }
}

void sub_255E99EE0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    sub_255E9A29C(255, a3, a4, MEMORY[0x263F1BAC8]);
    a5();
    unint64_t v7 = sub_255EEF8C0();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_255E99F68()
{
  if (!qword_269F383A0)
  {
    sub_255E57B88();
    sub_255E9A388(255, &qword_269F36F38, (uint64_t)&type metadata for ClearButtonView, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F383A0);
    }
  }
}

unint64_t sub_255E9A004()
{
  unint64_t result = qword_269F383A8;
  if (!qword_269F383A8)
  {
    sub_255E9A29C(255, &qword_269F38398, (uint64_t (*)(uint64_t))sub_255E99F68, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F383A8);
  }
  return result;
}

unint64_t sub_255E9A08C()
{
  unint64_t result = qword_269F383B0;
  if (!qword_269F383B0)
  {
    sub_255E9A29C(255, &qword_269F38380, (uint64_t (*)(uint64_t))sub_255E99E38, MEMORY[0x263F1BAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F383B0);
  }
  return result;
}

unint64_t sub_255E9A114()
{
  unint64_t result = qword_269F383B8;
  if (!qword_269F383B8)
  {
    sub_255E99EE0(255, &qword_269F38358, &qword_269F38360, (uint64_t (*)(uint64_t))sub_255E99C68, (void (*)(void))sub_255E99D1C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F383B8);
  }
  return result;
}

uint64_t sub_255E9A1A8()
{
  return sub_255E9A1DC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_255E95FDC);
}

uint64_t sub_255E9A1C4()
{
  return sub_255E9A1DC((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_255E96AF0);
}

uint64_t sub_255E9A1DC(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for ExpandableWheelPickerView() - 8);
  unint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1(v7, v2, v3, v4, v5);
}

void sub_255E9A29C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255E9A300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_255E973BC(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_255E9A310(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255E9A358()
{
  return sub_255E9A370((uint64_t (*)(void, void, void, void, void))sub_255E97814);
}

uint64_t sub_255E9A370(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void sub_255E9A388(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255E9A3D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(type metadata accessor for ExpandableWheelPickerView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  sub_255E97DA4(a1, v8, v5, v6, a2);
}

uint64_t sub_255E9A498()
{
  type metadata accessor for ExpandableWheelPickerView();
  return sub_255E993D0();
}

uint64_t objectdestroy_23Tm()
{
  long long v14 = *(_OWORD *)(v0 + 32);
  uint64_t v1 = (int *)type metadata accessor for ExpandableWheelPickerView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + ((v2 + 64) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v1[15];
  swift_release();
  swift_release();
  uint64_t v5 = v4 + *(int *)(sub_255EEF9D0() + 32);
  uint64_t v6 = *(void *)(v14 - 8);
  uint64_t v7 = *(void (**)(uint64_t, void))(v6 + 8);
  v7(v5, v14);
  uint64_t v8 = v3 + v1[16];
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, void))(v6 + 48);
  if (!v9(v8, 1, v14)) {
    v7(v8, v14);
  }
  uint64_t v10 = v3 + v1[17];
  if (!v9(v10, 1, v14)) {
    v7(v10, v14);
  }
  sub_255DADCEC(*(void *)(v3 + v1[18]), *(void *)(v3 + v1[18] + 8), *(unsigned char *)(v3 + v1[18] + 16));
  if (*(void *)(v3 + v1[19])) {
    swift_release();
  }
  uint64_t v11 = v3 + v1[20];
  uint64_t v12 = sub_255EEE140();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_255E9A29C(0, &qword_269F38328, MEMORY[0x270FA94A0], MEMORY[0x263F1B5D0]);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255E9A7F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ExpandableWheelPickerView() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_255E99434(a1, v4, v5, v6);
}

void sub_255E9A8A4()
{
  if (!qword_269F383D0)
  {
    sub_255E9A29C(255, &qword_269F38380, (uint64_t (*)(uint64_t))sub_255E99E38, MEMORY[0x263F1BAC8]);
    unint64_t v0 = sub_255EEE7B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F383D0);
    }
  }
}

uint64_t sub_255E9A93C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E9A9A4(uint64_t a1, uint64_t a2)
{
  sub_255E99EE0(0, &qword_269F38390, &qword_269F38398, (uint64_t (*)(uint64_t))sub_255E99F68, (void (*)(void))sub_255E9A004);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255E9AA40(uint64_t a1)
{
  sub_255E99EE0(0, &qword_269F38390, &qword_269F38398, (uint64_t (*)(uint64_t))sub_255E99F68, (void (*)(void))sub_255E9A004);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255E9AADC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255E9AB44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255E9ABA8()
{
  return sub_255E9ABC0((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_255E98FD0);
}

uint64_t sub_255E9ABC0(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for ExpandableWheelPickerView() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1(v7, v2, v3, v4, v5);
}

uint64_t sub_255E9AC70()
{
  return sub_255E9AC9C((uint64_t (*)(void, void, void, void, void))sub_255E994AC);
}

uint64_t sub_255E9AC9C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void sub_255E9ACC8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_255E9A29C(255, a3, a4, MEMORY[0x263F1BAC8]);
    unint64_t v5 = sub_255EEE7B0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_255E9AD44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for EditNameCellView()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EditNameCellView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EditNameCellView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EditNameCellView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditNameCellView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditNameCellView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditNameCellView()
{
  return &type metadata for EditNameCellView;
}

uint64_t sub_255E9B430()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255E9B44C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v41 = a1;
  sub_255E9BD74(0, &qword_269F383E8, MEMORY[0x263F1A388], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v36 - v4;
  sub_255E9BA94();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v38 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_255EEFD40();
  MEMORY[0x270FA5388](v8 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_269F352A8;
  uint64_t v10 = sub_255EEE200();
  MEMORY[0x270FA5388](v10 - 8);
  id v11 = v9;
  sub_255EEE1F0();
  uint64_t v12 = sub_255EEFDA0();
  uint64_t v14 = v13;
  uint64_t v15 = *((void *)v1 + 5);
  uint64_t v36 = *((void *)v1 + 4);
  uint64_t v37 = v12;
  long long v16 = v1[1];
  long long v52 = *v1;
  long long v53 = v16;
  v55[0] = v52;
  sub_255E0E5B8((uint64_t)&v53, (uint64_t)v54);
  sub_255EEFF70();
  swift_bridgeObjectRetain_n();
  sub_255DBE854((uint64_t)v55);
  swift_retain();
  sub_255E0786C((uint64_t)v54);
  uint64_t v17 = sub_255EEFF60();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = MEMORY[0x263F8F500];
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v19;
  long long v20 = v1[1];
  *(_OWORD *)(v18 + 32) = *v1;
  *(_OWORD *)(v18 + 48) = v20;
  *(_OWORD *)(v18 + 64) = v1[2];
  swift_bridgeObjectRetain();
  sub_255DBE854((uint64_t)v55);
  swift_retain();
  sub_255E0786C((uint64_t)v54);
  uint64_t v21 = sub_255EEFF60();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v19;
  long long v23 = v2[1];
  *(_OWORD *)(v22 + 32) = *v2;
  *(_OWORD *)(v22 + 48) = v23;
  *(_OWORD *)(v22 + 64) = v2[2];
  sub_255EEF9B0();
  sub_255E1D218(v37, v14, v36, v15, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), (uint64_t)v50, 0, 0);
  swift_bridgeObjectRelease();
  long long v46 = v50[4];
  long long v47 = v50[5];
  long long v48 = v50[6];
  uint64_t v49 = v51;
  long long v42 = v50[0];
  long long v43 = v50[1];
  long long v44 = v50[2];
  long long v45 = v50[3];
  sub_255EEEFD0();
  uint64_t v24 = sub_255EEEFE0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v5, 0, 1, v24);
  sub_255E28CE0();
  uint64_t v25 = v38;
  sub_255EEF5B0();
  sub_255E9BBE4((uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = sub_255EEFD90();
  uint64_t v29 = v28;
  uint64_t v31 = v39;
  uint64_t v30 = v40;
  uint64_t v32 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v41, v25, v40);
  sub_255E9BCDC();
  uint64_t v34 = (uint64_t *)(v32 + *(int *)(v33 + 36));
  *uint64_t v34 = KeyPath;
  v34[1] = v27;
  v34[2] = v29;
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v30);
}

void *sub_255E9B974@<X0>(void *a1@<X8>)
{
  sub_255E9BD74(0, (unint64_t *)&qword_269F36308, (uint64_t (*)(uint64_t))sub_255E9BB14, MEMORY[0x263F1B750]);
  uint64_t result = MEMORY[0x25A29B390](&v5);
  uint64_t v3 = v5;
  unint64_t v4 = v6;
  if (!v6)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_255E9BA00()
{
  return sub_255EEF980();
}

void sub_255E9BA94()
{
  if (!qword_269F383F0)
  {
    sub_255E28CE0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F383F0);
    }
  }
}

void sub_255E9BB14()
{
  if (!qword_269F35700)
  {
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35700);
    }
  }
}

void *sub_255E9BB70@<X0>(void *a1@<X8>)
{
  return sub_255E9B974(a1);
}

uint64_t objectdestroyTm_21()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_255E9BBD8()
{
  return sub_255E9BA00();
}

uint64_t sub_255E9BBE4(uint64_t a1)
{
  sub_255E9BD74(0, &qword_269F383E8, MEMORY[0x263F1A388], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255E9BC70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_255EEEA90();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_255E9BC9C()
{
  return sub_255EEEAA0();
}

void sub_255E9BCDC()
{
  if (!qword_269F383F8)
  {
    sub_255E9BA94();
    sub_255E9BD74(255, &qword_269F38400, (uint64_t (*)(uint64_t))sub_255E9BB14, MEMORY[0x263F1A418]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F383F8);
    }
  }
}

void sub_255E9BD74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_255E9BDDC()
{
  unint64_t result = qword_269F38408;
  if (!qword_269F38408)
  {
    sub_255E9BCDC();
    sub_255E28CE0();
    swift_getOpaqueTypeConformance2();
    sub_255E9BE80();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38408);
  }
  return result;
}

unint64_t sub_255E9BE80()
{
  unint64_t result = qword_269F38410;
  if (!qword_269F38410)
  {
    sub_255E9BD74(255, &qword_269F38400, (uint64_t (*)(uint64_t))sub_255E9BB14, MEMORY[0x263F1A418]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38410);
  }
  return result;
}

id MedicalIDBiometricsViewModel.init(medicalIDData:locale:heightFormatter:weightFormatter:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v67 = a4;
  uint64_t v70 = a3;
  uint64_t v72 = a2;
  uint64_t v7 = 0x697274656D6F6942;
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_255EA1BB0(0, &qword_269F35260, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v65 = (uint64_t)v57 - v10;
  uint64_t v11 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EA1BB0(0, &qword_269F35268, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter, v8);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v61 = (uint64_t)v57 - v16;
  uint64_t v68 = (void *)type metadata accessor for MedicalIDHeightFormatter();
  uint64_t v59 = (void *)*(v68 - 1);
  uint64_t v17 = MEMORY[0x270FA5388](v68);
  v57[0] = (char *)v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v20 = (char *)v57 - v19;
  sub_255D7F1F0();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_255EF1E20;
  *(void *)(v21 + 32) = 0x496C61636964654DLL;
  *(void *)(v21 + 40) = 0xE900000000000044;
  unint64_t v22 = 0xEA00000000007363;
  *(void *)(v21 + 48) = 0x697274656D6F6942;
  *(void *)(v21 + 56) = 0xEA00000000007363;
  long long v23 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v24 = (id)HKUIJoinStringsForAutomationIdentifier();

  uint64_t v58 = v14;
  uint64_t v62 = v12;
  uint64_t v63 = v11;
  uint64_t v60 = v20;
  if (v24)
  {
    uint64_t v7 = sub_255EEFD90();
    unint64_t v22 = v25;
  }
  *a5 = v7;
  a5[1] = v22;
  uint64_t v26 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  sub_255E9EF18(a1, (uint64_t)a5 + v26[5], (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  uint64_t v27 = (char *)a5 + v26[6];
  uint64_t v28 = sub_255EEE200();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v29;
  uint64_t v69 = a5;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v64 = a1;
  uint64_t v32 = v72;
  v31(v27, (uint64_t)v72, v28);
  uint64_t v33 = v61;
  uint64_t v34 = sub_255E9EACC(v70, v61, &qword_269F35268, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
  v57[2] = v57;
  uint64_t v35 = *(void *)(v29 + 64);
  MEMORY[0x270FA5388](v34);
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v37 = (char *)v57 - v36;
  uint64_t v71 = v31;
  v31((char *)v57 - v36, (uint64_t)v32, v28);
  uint64_t v38 = ((uint64_t (*)(uint64_t, uint64_t, void *))v59[6])(v33, 1, v68);
  uint64_t v66 = v26;
  v57[1] = v30;
  if (v38 == 1)
  {
    uint64_t v59 = v57;
    MEMORY[0x270FA5388](v38);
    uint64_t v39 = (char *)v57 - v36;
    uint64_t v40 = v71;
    v71((char *)v57 - v36, (uint64_t)v57 - v36, v28);
    uint64_t v41 = v57[0];
    v40((char *)v57[0], (uint64_t)v39, v28);
    id v42 = sub_255DFE4B8((uint64_t)v39, 2);
    long long v43 = *(void (**)(char *, uint64_t))(v30 + 8);
    v43(v39, v28);
    *(void *)(v41 + *((int *)v68 + 5)) = v42;
    uint64_t v26 = v66;
    uint64_t v44 = (uint64_t)v60;
    sub_255E9F104(v41, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for MedicalIDHeightFormatter);
    v43(v37, v28);
    long long v45 = v69;
    sub_255E9EC5C(v33, &qword_269F35268, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
    uint64_t v46 = v67;
  }
  else
  {
    long long v43 = *(void (**)(char *, uint64_t))(v30 + 8);
    v43((char *)v57 - v36, v28);
    uint64_t v44 = (uint64_t)v60;
    sub_255E9F104(v33, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for MedicalIDHeightFormatter);
    uint64_t v46 = v67;
    long long v45 = v69;
  }
  sub_255E9F104(v44, (uint64_t)v45 + v26[7], (uint64_t (*)(void))type metadata accessor for MedicalIDHeightFormatter);
  uint64_t v47 = v65;
  uint64_t v48 = sub_255E9EACC(v46, v65, &qword_269F35260, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
  MEMORY[0x270FA5388](v48);
  unint64_t v49 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v50 = (char *)v57 - v49;
  uint64_t v51 = v46;
  long long v52 = v72;
  v71((char *)v57 - v49, (uint64_t)v72, v28);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v47, 1, v63);
  if (v53 != 1)
  {
    sub_255E9EC5C(v51, &qword_269F35260, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
    sub_255E9EC5C(v70, &qword_269F35268, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
    v43(v52, v28);
    sub_255E9ECCC(v64, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
    v43(v50, v28);
    uint64_t v56 = (uint64_t)v58;
    sub_255E9F104(v47, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for MedicalIDWeightFormatter);
    return (id)sub_255E9F104(v56, (uint64_t)v69 + v66[8], (uint64_t (*)(void))type metadata accessor for MedicalIDWeightFormatter);
  }
  uint64_t v54 = v64;
  uint64_t v68 = v57;
  MEMORY[0x270FA5388](v53);
  v71((char *)v57 - v49, (uint64_t)v57 - v49, v28);
  id result = objc_msgSend(self, sel_sharedFormatter);
  if (result)
  {
    uint64_t v56 = (uint64_t)v58;
    MedicalIDWeightFormatter.init(locale:personWeightFormatter:)((uint64_t)v57 - v49, result, (uint64_t)v58);
    sub_255E9EC5C(v67, &qword_269F35260, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
    sub_255E9EC5C(v70, &qword_269F35268, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDHeightFormatter);
    v43(v72, v28);
    sub_255E9ECCC(v54, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
    v43(v50, v28);
    sub_255E9EC5C(v47, &qword_269F35260, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDWeightFormatter);
    return (id)sub_255E9F104(v56, (uint64_t)v69 + v66[8], (uint64_t (*)(void))type metadata accessor for MedicalIDWeightFormatter);
  }
  __break(1u);
  return result;
}

id MedicalIDBiometricsViewModel.formattedWeightText(for:)(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 32);
  sub_255E9ED2C(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v18 - v6;
  sub_255E9EF80(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v18 - v9;
  sub_255E9ED94(a1, (uint64_t)v18 - v9, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_255E9EE08((uint64_t)v10, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
    return 0;
  }
  uint64_t v11 = v18[1] + v2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  sub_255EEDDD0();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A20]), sel_initWithDouble_, v12);
  id result = objc_msgSend(*(id *)(v11 + *(int *)(type metadata accessor for MedicalIDWeightFormatter() + 24)), sel_numberFormatter);
  if (result)
  {
    uint64_t v15 = result;
    id v16 = objc_msgSend(result, sel_stringFromNumber_, v13);

    if (v16)
    {
      uint64_t v17 = sub_255EEFD90();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return (id)v17;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall MedicalIDBiometricsViewModel.localizedWeightUnitDescription()()
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  sub_255E44C20(1);
  uint64_t v1 = v0;
  id v2 = sub_255E44DE4();
  id v3 = objc_msgSend(v1, sel_stringFromUnit_, v2);

  uint64_t v4 = sub_255EEFD90();
  uint64_t v6 = v5;

  uint64_t v7 = v4;
  uint64_t v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

id sub_255E9CB04(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for HealthDemographicData();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EA1BB0(0, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  double v12 = (char *)v22 - v11;
  unsigned int v13 = objc_msgSend(a1, sel_suggestHealthData);
  id v14 = 0;
  if (v13)
  {
    id v14 = 0;
    if (!*(void *)(v3 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 104))
    {
      swift_getKeyPath();
      v22[1] = a2;
      sub_255D7FD68();
      sub_255EEE2D0();
      swift_release();
      uint64_t v15 = a2 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
      swift_beginAccess();
      sub_255E9EACC(v15, (uint64_t)v12, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
      {
        sub_255E9EC5C((uint64_t)v12, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
        return 0;
      }
      else
      {
        sub_255E9EF18((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
        sub_255E9EC5C((uint64_t)v12, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData);
        id v16 = *(id *)&v9[*(int *)(v6 + 32)];
        sub_255E9ECCC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
        sub_255E9EF80(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
        MEMORY[0x270FA5388](v17 - 8);
        uint64_t v19 = (char *)v22 - v18;
        id v20 = v16;
        sub_255E447D4(v16, (uint64_t)v19);

        id v14 = MedicalIDBiometricsViewModel.formattedWeightText(for:)((uint64_t)v19);
        sub_255E9EE08((uint64_t)v19, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
      }
    }
  }
  return v14;
}

uint64_t MedicalIDBiometricsViewModel.weightMeasurement(for:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  if (!a2) {
    goto LABEL_16;
  }
  uint64_t v7 = HIBYTE(a2) & 0xF;
  uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain();
    sub_255EF02C0();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  MEMORY[0x270FA5388](v9);
  if ((a2 & 0x2000000000000000) != 0)
  {
    if (a1 <= 0x20u && ((1 << a1) & 0x100003E01) != 0)
    {
      swift_bridgeObjectRetain();
LABEL_15:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    swift_bridgeObjectRetain();
    uint64_t v15 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
    if (!v15) {
      goto LABEL_15;
    }
    int v16 = *v15;
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_16;
    }
LABEL_11:
    sub_255E44DE4();
    sub_255D7ED10(0, &qword_269F36390);
    sub_255EEDDC0();
    sub_255E9ED2C(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC0]);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a3, 0, 1, v12);
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v10 = sub_255EF0310();
    uint64_t v8 = v17;
  }
  swift_bridgeObjectRetain();
  char v11 = sub_255E9EBB8(v10, v8, (void (*)(uint64_t *__return_ptr))sub_255E9EED4);
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_11;
  }
LABEL_16:
  sub_255E9ED2C(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a3, 1, 1, v14);
}

BOOL MedicalIDBiometricsViewModel.hasBiometricData.getter()
{
  uint64_t v1 = type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = *(void *)(v0 + *(int *)(v5 + 20) + 96);
  sub_255E9EF18(v0, (uint64_t)&v12 - v6, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  if (v8)
  {
    sub_255E9ECCC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
    sub_255E9EF18(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v10 = *(void *)&v7[*(int *)(v1 + 20) + 104];
    sub_255E9ECCC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
    sub_255E9EF18(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
    if (v10) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = *(void *)&v4[*(int *)(v1 + 20) + 88] != 0;
    }
  }
  sub_255E9ECCC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  return v9;
}

BOOL MedicalIDBiometricsViewModel.hasHeightData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 96) != 0;
}

BOOL MedicalIDBiometricsViewModel.hasWeightData.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 104) != 0;
}

BOOL MedicalIDBiometricsViewModel.hasBloodType.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 88) != 0;
}

Swift::Bool __swiftcall MedicalIDBiometricsViewModel.suggestHealthData(with:)(MIUIDisplayConfiguration *with)
{
  return [(MIUIDisplayConfiguration *)with suggestHealthData];
}

Swift::String __swiftcall MedicalIDBiometricsViewModel.localizedBloodTypeDescription()()
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  id v0 = (id)HKStringForBloodType();
  uint64_t v1 = sub_255EEFD90();
  uint64_t v3 = v2;

  uint64_t v4 = v1;
  uint64_t v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

Swift::String_optional __swiftcall MedicalIDBiometricsViewModel.localizedHeightDescription()()
{
  sub_255E9ED2C(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7EC0]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v16 - v4;
  sub_255E9EF80(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_255DFD46C(*(void **)(v0 + *(int *)(v9 + 20) + 96), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_255E9EE08((uint64_t)v8, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0);
    uint64_t v10 = 0;
    char v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v10 = sub_255DFDD94((uint64_t)v5);
    char v11 = v12;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v13 = v10;
  uint64_t v14 = v11;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void MedicalIDBiometricsViewModel.heightMeasurement()(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_255DFD46C(*(void **)(v1 + *(int *)(v3 + 20) + 96), a1);
}

Swift::String __swiftcall MedicalIDBiometricsViewModel.localizedHeightUnitDescription()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 28);
  id v2 = sub_255DFE4B8(v1, 1);
  sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
  uint64_t v3 = sub_255EEE200();
  MEMORY[0x270FA5388](v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  sub_255E9ED2C(0, &qword_269F36358, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA8C80]);
  MEMORY[0x270FA5388](v6 - 8);
  sub_255EEDFF0();
  uint64_t v7 = (void *)sub_255EF0090();
  id v8 = objc_msgSend(v2, sel_stringFromUnit_, v7);

  uint64_t v9 = sub_255EEFD90();
  char v11 = v10;

  uint64_t v12 = v9;
  uint64_t v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

void MedicalIDBiometricsViewModel.heightMeasurement(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t MedicalIDBiometricsViewModel.formattedHeight(with:)(uint64_t a1)
{
  return sub_255DFDD94(a1);
}

uint64_t MedicalIDBiometricsViewModel.formattedHeightForPickers(with:)(uint64_t a1)
{
  uint64_t v24 = a1;
  sub_255E9ED2C(0, &qword_269F38418, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7E88]);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v22 = v1;
  uint64_t v23 = v2;
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v21 - v3;
  sub_255E9ED2C(0, &qword_269F38420, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7E68]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v21 - v8;
  sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
  sub_255EEDDE0();
  sub_255EA1BB0(0, (unint64_t *)&qword_269F38428, (uint64_t (*)(uint64_t))sub_255E9EFE8, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v21 - v11;
  sub_255E9EFE8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  sub_255E9ED2C(0, &qword_269F36358, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA8C80]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v21 - v17;
  sub_255EEDFE0();
  sub_255EEDD90();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_255E9EC5C((uint64_t)v12, (unint64_t *)&qword_269F38428, (uint64_t (*)(uint64_t))sub_255E9EFE8);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_255E9ED2C(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7EC0]);
  sub_255E9F098();
  uint64_t v19 = v22;
  sub_255EEDE10();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v19);
  return v25;
}

Swift::String_optional __swiftcall MedicalIDBiometricsViewModel.localizedWeightDescription()()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MedicalIDBiometricsViewModel() + 20) + 104);
  sub_255E9ED2C(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v16 - v5;
  sub_255E9EF80(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - v8;
  sub_255E447D4(v1, (uint64_t)&v16 - v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_255E9EE08((uint64_t)v9, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    type metadata accessor for MedicalIDWeightFormatter();
    sub_255D7ED10(0, &qword_269F36390);
    uint64_t v10 = sub_255EF0150();
    uint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v13 = v10;
  uint64_t v14 = v11;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void MedicalIDBiometricsViewModel.weightMeasurement()(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MedicalIDBiometricsViewModel();
  sub_255E447D4(*(void **)(v1 + *(int *)(v3 + 20) + 104), a1);
}

void MedicalIDBiometricsViewModel.weightMeasurement(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void MedicalIDBiometricsViewModel.validationResult(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(a1 + 104);
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v9 = self;
  id v10 = v8;
  id v11 = objc_msgSend(v9, sel_gramUnitWithMetricPrefix_, 9);
  objc_msgSend(v10, sel_doubleValueForUnit_, v11);
  double v13 = v12;

  objc_msgSend(self, sel_maximumWeightInKilograms);
  if (v13 <= v14)
  {

LABEL_7:
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return;
  }
  uint64_t v41 = v4;
  uint64_t v47 = v5;
  id v48 = v10;
  uint64_t v15 = sub_255EEFD40();
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  MEMORY[0x270FA5388](v15 - 8);
  unint64_t v42 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_269F352A8;
  uint64_t v18 = sub_255EEE200();
  MEMORY[0x270FA5388](v18 - 8);
  id v44 = v17;
  sub_255EEE1F0();
  uint64_t v19 = sub_255EEFDA0();
  uint64_t v45 = v20;
  uint64_t v46 = v19;
  uint64_t v40 = &v38;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v21);
  id v39 = v44;
  sub_255EEE1F0();
  uint64_t v22 = (void *)sub_255EEFDA0();
  uint64_t v43 = v23;
  id v44 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = sub_255EEFCD0();
  MEMORY[0x270FA5388](v24);
  id v25 = v39;
  sub_255EEE1F0();
  uint64_t v26 = sub_255EEFDA0();
  uint64_t v28 = v27;
  uint64_t v29 = v41;
  uint64_t v30 = &v7[*(int *)(v41 + 24)];
  sub_255EEE4E0();
  uint64_t v31 = sub_255EEE4F0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 0, 1, v31);
  sub_255EEE130();
  uint64_t v32 = (uint64_t *)&v7[*(int *)(v29 + 20)];
  *uint64_t v32 = v26;
  v32[1] = v28;
  uint64_t v33 = &v7[*(int *)(v29 + 28)];
  sub_255EA1BB0(0, &qword_269F351D0, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8E0F8]);
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  unint64_t v34 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_255EF20B0;
  sub_255E9F104((uint64_t)v7, v35 + v34, (uint64_t (*)(void))type metadata accessor for BasicAlertModel.Action);

  uint64_t v36 = v45;
  *(void *)a2 = v46;
  *(void *)(a2 + 8) = v36;
  uint64_t v37 = v43;
  *(void *)(a2 + 16) = v44;
  *(void *)(a2 + 24) = v37;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = v35;
}

void MedicalIDBiometricsViewModel.update(medicalIDData:heightMeasurement:weightMeasurement:bloodType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 88) = a4;
  id v6 = sub_255E9E4C4(a2);

  *(void *)(a1 + 96) = v6;
  id v7 = sub_255E9E7A0(a3);

  *(void *)(a1 + 104) = v7;
}

id sub_255E9E4C4(uint64_t a1)
{
  sub_255E9ED2C(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7EC0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v18 = (char *)&v17 - v5;
  sub_255E9EF80(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v17 - v7;
  sub_255E9ED94(a1, (uint64_t)&v17 - v7, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
  {
    sub_255E9EE08((uint64_t)v8, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0, 0x263F08CF0);
    return 0;
  }
  else
  {
    id v10 = v18;
    uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v18, v8, v3);
    MEMORY[0x270FA5388](v11);
    id v12 = objc_msgSend(self, sel_meters);
    sub_255EEDE00();

    id v13 = objc_msgSend(self, sel_meterUnit);
    sub_255EEDDD0();
    id v9 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, v13, v14);

    uint64_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15((char *)&v17 - v5, v3);
    v15(v10, v3);
  }
  return v9;
}

id sub_255E9E7A0(uint64_t a1)
{
  sub_255E9ED2C(0, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8, MEMORY[0x270FA7EC0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  unint64_t v5 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v18 = (char *)&v17 - v5;
  sub_255E9EF80(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v17 - v7;
  sub_255E9ED94(a1, (uint64_t)&v17 - v7, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
  {
    sub_255E9EE08((uint64_t)v8, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390, 0x263F08CF8);
    return 0;
  }
  else
  {
    id v10 = v18;
    uint64_t v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v18, v8, v3);
    MEMORY[0x270FA5388](v11);
    id v12 = objc_msgSend(self, sel_kilograms);
    sub_255EEDE00();

    id v13 = objc_msgSend(self, sel_gramUnitWithMetricPrefix_, 9);
    sub_255EEDDD0();
    id v9 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, v13, v14);

    uint64_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15((char *)&v17 - v5, v3);
    v15(v10, v3);
  }
  return v9;
}

uint64_t type metadata accessor for MedicalIDBiometricsViewModel()
{
  uint64_t result = qword_269F38448;
  if (!qword_269F38448) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255E9EACC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_255EA1BB0(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

unsigned char *sub_255E9EB4C@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_255E9EBB8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

void *sub_255E9EC18@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_255E9EC5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_255EA1BB0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255E9ECCC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255E9ED2C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_255D7ED10(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_255E9ED94(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  sub_255E9EF80(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_255E9EE08(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  sub_255E9EF80(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

unsigned char *sub_255E9EE64@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_255E9EED4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_255E9EF18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255E9EF80(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    sub_255E9ED2C(255, a3, a4, a5, MEMORY[0x270FA7EC0]);
    unint64_t v6 = sub_255EF01E0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_255E9EFE8()
{
  if (!qword_269F38430)
  {
    sub_255E9F044();
    unint64_t v0 = sub_255EEDFD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38430);
    }
  }
}

unint64_t sub_255E9F044()
{
  unint64_t result = qword_269F38438;
  if (!qword_269F38438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38438);
  }
  return result;
}

unint64_t sub_255E9F098()
{
  unint64_t result = qword_269F38440;
  if (!qword_269F38440)
  {
    sub_255E9ED2C(255, &qword_269F38418, (unint64_t *)&qword_269F352E0, 0x263F08CF0, MEMORY[0x270FA7E88]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38440);
  }
  return result;
}

uint64_t sub_255E9F104(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicalIDBiometricsViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v26 = (uint64_t *)(v25 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a3[5];
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *uint64_t v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 16);
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = v11;
    v7[3] = v10;
    uint64_t v12 = *((void *)v8 + 5);
    v7[4] = *((void *)v8 + 4);
    v7[5] = v12;
    uint64_t v13 = *((void *)v8 + 7);
    v7[6] = *((void *)v8 + 6);
    v7[7] = v13;
    uint64_t v14 = *((void *)v8 + 9);
    v7[8] = *((void *)v8 + 8);
    v7[9] = v14;
    uint64_t v15 = *((void *)v8 + 11);
    v7[10] = *((void *)v8 + 10);
    v7[11] = v15;
    uint64_t v86 = (void *)*((void *)v8 + 12);
    uint64_t v88 = (void *)*((void *)v8 + 13);
    v7[12] = v86;
    v7[13] = v88;
    uint64_t v16 = type metadata accessor for MedicalIDData();
    uint64_t v17 = *(int *)(v16 + 52);
    __dst = (char *)v7 + v17;
    long long v82 = (int *)v16;
    uint64_t v79 = &v8[v17];
    uint64_t v18 = sub_255EEE100();
    uint64_t v80 = *(void *)(v18 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    uint64_t v20 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v86;
    id v22 = v88;
    uint64_t v87 = v19;
    if (v19(v79, 1, v20))
    {
      sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v79, *(void *)(*(void *)(v23 - 8) + 64));
      uint64_t v24 = v80;
    }
    else
    {
      uint64_t v24 = v80;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(__dst, v79, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v27 = v82[14];
    uint64_t v28 = (char *)v7 + v27;
    uint64_t v29 = &v8[v27];
    if (v87(&v8[v27], 1, v20))
    {
      sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v28, v29, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v20);
    }
    uint64_t v31 = v82[15];
    uint64_t v32 = (void *)((char *)v7 + v31);
    uint64_t v33 = &v8[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *uint64_t v32 = *(void *)v33;
    v32[1] = v34;
    uint64_t v35 = v82[16];
    uint64_t v36 = (void *)((char *)v7 + v35);
    uint64_t v37 = &v8[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *uint64_t v36 = *(void *)v37;
    v36[1] = v38;
    *((unsigned char *)v7 + v82[17]) = v8[v82[17]];
    *((unsigned char *)v7 + v82[18]) = v8[v82[18]];
    uint64_t v39 = v82[19];
    uint64_t v40 = (char *)v7 + v39;
    uint64_t v41 = (uint64_t *)&v8[v39];
    unint64_t v42 = *(void *)&v8[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v43 = *v41;
      sub_255D80890(*v41, v42);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v42;
    }
    uint64_t v44 = v82[20];
    uint64_t v45 = (char *)v7 + v44;
    uint64_t v46 = &v8[v44];
    uint64_t v47 = sub_255EEDF60();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_255EA1BB0(0, &qword_269F350B8, MEMORY[0x270FA8158], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    uint64_t v50 = v82[21];
    uint64_t v51 = *(void **)&v8[v50];
    *(void *)((char *)v7 + v50) = v51;
    uint64_t v52 = v82[22];
    uint64_t v53 = (char *)v7 + v52;
    uint64_t v54 = &v8[v52];
    id v55 = v51;
    uint64_t v26 = a1;
    if (v87(v54, 1, v20))
    {
      sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v53, v54, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v53, 0, 1, v20);
    }
    uint64_t v57 = a3[6];
    uint64_t v58 = (char *)a1 + v57;
    uint64_t v59 = (char *)a2 + v57;
    uint64_t v60 = sub_255EEE200();
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
    v61(v58, v59, v60);
    uint64_t v62 = a3[7];
    uint64_t v63 = (char *)a1 + v62;
    uint64_t v64 = (char *)a2 + v62;
    v61((char *)a1 + v62, (char *)a2 + v62, v60);
    uint64_t v65 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    uint64_t v66 = *(void **)&v64[v65];
    *(void *)&v63[v65] = v66;
    uint64_t v67 = a3[8];
    uint64_t v68 = (char *)a1 + v67;
    uint64_t v69 = (char *)a2 + v67;
    id v70 = v66;
    v61(v68, v69, v60);
    uint64_t v71 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v72 = *(int *)(v71 + 20);
    uint64_t v73 = *(void **)&v69[v72];
    *(void *)&v68[v72] = v73;
    uint64_t v74 = *(int *)(v71 + 24);
    uint64_t v75 = *(void **)&v69[v74];
    *(void *)&v68[v74] = v75;
    id v76 = v73;
    id v77 = v75;
  }
  return v26;
}

void destroy for MedicalIDBiometricsViewModel(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v24 = a2;
  uint64_t v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[14];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(v4 + v5[19]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_255D80D04(*v11, v12);
  }
  uint64_t v13 = v4 + v5[20];
  uint64_t v14 = sub_255EEDF60();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }

  uint64_t v16 = v4 + v5[22];
  if (!v9(v16, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v7);
  }
  uint64_t v17 = a1 + v24[6];
  uint64_t v18 = sub_255EEE200();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(v17, v18);
  uint64_t v20 = a1 + v24[7];
  v19(v20, v18);

  uint64_t v21 = a1 + v24[8];
  v19(v21, v18);
  uint64_t v22 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v23 = *(void **)(v21 + *(int *)(v22 + 24));
}

char *initializeWithCopy for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v3;
  uint64_t v4 = a3[5];
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = *(void *)&a2[v4 + 8];
  *(void *)uint64_t v5 = *(void *)&a2[v4];
  *((void *)v5 + 1) = v7;
  uint64_t v9 = *(void *)&a2[v4 + 16];
  uint64_t v8 = *(void *)&a2[v4 + 24];
  *((void *)v5 + 2) = v9;
  *((void *)v5 + 3) = v8;
  uint64_t v10 = *((void *)v6 + 5);
  *((void *)v5 + 4) = *((void *)v6 + 4);
  *((void *)v5 + 5) = v10;
  uint64_t v11 = *((void *)v6 + 7);
  *((void *)v5 + 6) = *((void *)v6 + 6);
  *((void *)v5 + 7) = v11;
  uint64_t v12 = *((void *)v6 + 9);
  *((void *)v5 + 8) = *((void *)v6 + 8);
  *((void *)v5 + 9) = v12;
  uint64_t v13 = *((void *)v6 + 11);
  *((void *)v5 + 10) = *((void *)v6 + 10);
  *((void *)v5 + 11) = v13;
  long long v82 = (void *)*((void *)v6 + 12);
  uint64_t v84 = (void *)*((void *)v6 + 13);
  *((void *)v5 + 12) = v82;
  *((void *)v5 + 13) = v84;
  uint64_t v14 = type metadata accessor for MedicalIDData();
  uint64_t v15 = *(int *)(v14 + 52);
  __dst = &v5[v15];
  uint64_t v78 = (int *)v14;
  uint64_t v75 = &v6[v15];
  uint64_t v16 = sub_255EEE100();
  uint64_t v76 = *(void *)(v16 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  uint64_t v18 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = v82;
  id v20 = v84;
  uint64_t v83 = v17;
  if (v17(v75, 1, v18))
  {
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v75, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v76;
  }
  else
  {
    uint64_t v22 = v76;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(__dst, v75, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v18);
  }
  uint64_t v23 = v78[14];
  uint64_t v24 = &v5[v23];
  uint64_t v25 = &v6[v23];
  if (v83(&v6[v23], 1, v18))
  {
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v18);
  }
  uint64_t v27 = v78[15];
  uint64_t v28 = &v5[v27];
  uint64_t v29 = &v6[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  uint64_t v31 = v78[16];
  uint64_t v32 = &v5[v31];
  uint64_t v33 = &v6[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  v5[v78[17]] = v6[v78[17]];
  v5[v78[18]] = v6[v78[18]];
  uint64_t v35 = v78[19];
  uint64_t v36 = &v5[v35];
  uint64_t v37 = (uint64_t *)&v6[v35];
  unint64_t v38 = *(void *)&v6[v35 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *v37;
    sub_255D80890(*v37, v38);
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }
  uint64_t v40 = v78[20];
  uint64_t v41 = &v5[v40];
  unint64_t v42 = &v6[v40];
  uint64_t v43 = sub_255EEDF60();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_255EA1BB0(0, &qword_269F350B8, MEMORY[0x270FA8158], MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v46 = v78[21];
  uint64_t v47 = *(void **)&v6[v46];
  *(void *)&v5[v46] = v47;
  uint64_t v48 = v78[22];
  uint64_t v49 = &v5[v48];
  uint64_t v50 = &v6[v48];
  id v51 = v47;
  if (v83(v50, 1, v18))
  {
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v49, v50, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v49, 0, 1, v18);
  }
  uint64_t v53 = a3[6];
  uint64_t v54 = &a1[v53];
  id v55 = &a2[v53];
  uint64_t v56 = sub_255EEE200();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16);
  v57(v54, v55, v56);
  uint64_t v58 = a3[7];
  uint64_t v59 = &a1[v58];
  uint64_t v60 = &a2[v58];
  v57(&a1[v58], &a2[v58], v56);
  uint64_t v61 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v62 = *(void **)&v60[v61];
  *(void *)&v59[v61] = v62;
  uint64_t v63 = a3[8];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  id v66 = v62;
  v57(v64, v65, v56);
  uint64_t v67 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v68 = *(int *)(v67 + 20);
  uint64_t v69 = *(void **)&v65[v68];
  *(void *)&v64[v68] = v69;
  uint64_t v70 = *(int *)(v67 + 24);
  uint64_t v71 = *(void **)&v65[v70];
  *(void *)&v64[v70] = v71;
  id v72 = v69;
  id v73 = v71;
  return a1;
}

char *assignWithCopy for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = a3;
  uint64_t v94 = a2;
  uint64_t v6 = a3[5];
  uint64_t v95 = a1;
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *(void *)uint64_t v7 = *(void *)&a2[v6];
  *((void *)v7 + 1) = *(void *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 3) = *((void *)v8 + 3);
  *((void *)v7 + 4) = *((void *)v8 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 5) = *((void *)v8 + 5);
  *((void *)v7 + 6) = *((void *)v8 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 7) = *((void *)v8 + 7);
  *((void *)v7 + 8) = *((void *)v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 9) = *((void *)v8 + 9);
  *((void *)v7 + 10) = *((void *)v8 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v7 + 11) = *((void *)v8 + 11);
  uint64_t v9 = (void *)*((void *)v7 + 12);
  uint64_t v10 = (void *)*((void *)v8 + 12);
  *((void *)v7 + 12) = v10;
  id v11 = v10;

  uint64_t v12 = (void *)*((void *)v7 + 13);
  uint64_t v13 = (void *)*((void *)v8 + 13);
  *((void *)v7 + 13) = v13;
  id v14 = v13;

  uint64_t v15 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v15[13];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = sub_255EEE100();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  uint64_t v25 = v15[14];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  int v28 = v21(&v7[v25], 1, v19);
  int v29 = v21(v27, 1, v19);
  uint64_t v92 = v19;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v26, v27, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
LABEL_12:
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v26, v27, v19);
LABEL_13:
  uint64_t v31 = v15[15];
  uint64_t v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = v15[16];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v15[17]] = v8[v15[17]];
  v7[v15[18]] = v8[v15[18]];
  uint64_t v37 = v15[19];
  unint64_t v38 = (uint64_t *)&v7[v37];
  uint64_t v39 = (uint64_t *)&v8[v37];
  unint64_t v40 = *(void *)&v8[v37 + 8];
  uint64_t v91 = v20;
  uint64_t v90 = v21;
  if (*(void *)&v7[v37 + 8] >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      uint64_t v41 = *v39;
      sub_255D80890(*v39, v40);
      *unint64_t v38 = v41;
      v38[1] = v40;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v40 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v38);
LABEL_18:
    *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
    goto LABEL_20;
  }
  uint64_t v42 = *v39;
  sub_255D80890(*v39, v40);
  uint64_t v43 = *v38;
  unint64_t v44 = v38[1];
  *unint64_t v38 = v42;
  v38[1] = v40;
  sub_255D80D04(v43, v44);
LABEL_20:
  uint64_t v45 = v15[20];
  uint64_t v46 = &v7[v45];
  uint64_t v47 = &v8[v45];
  uint64_t v48 = sub_255EEDF60();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (v51)
  {
    uint64_t v53 = v91;
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v53 = v91;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_25:
    sub_255EA1BB0(0, &qword_269F350B8, MEMORY[0x270FA8158], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v46, v47, v48);
LABEL_26:
  uint64_t v55 = v15[21];
  uint64_t v56 = *(void **)&v7[v55];
  uint64_t v57 = *(void **)&v8[v55];
  *(void *)&v7[v55] = v57;
  id v58 = v57;

  uint64_t v59 = v15[22];
  uint64_t v60 = &v7[v59];
  uint64_t v61 = &v8[v59];
  int v62 = v90(&v7[v59], 1, v92);
  int v63 = v90(v61, 1, v92);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v60, v61, v92);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v60, v92);
    goto LABEL_31;
  }
  if (v63)
  {
LABEL_31:
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v60, v61, v92);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v60, 0, 1, v92);
LABEL_32:
  uint64_t v65 = v93[6];
  id v66 = &v95[v65];
  uint64_t v67 = &v94[v65];
  uint64_t v68 = sub_255EEE200();
  uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 24);
  v69(v66, v67, v68);
  uint64_t v70 = v93[7];
  uint64_t v71 = &v95[v70];
  id v72 = &v94[v70];
  v69(&v95[v70], &v94[v70], v68);
  uint64_t v73 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v74 = *(void **)&v72[v73];
  uint64_t v75 = *(void **)&v71[v73];
  *(void *)&v71[v73] = v74;
  id v76 = v74;

  uint64_t v77 = v93[8];
  uint64_t v78 = &v95[v77];
  uint64_t v79 = &v94[v77];
  v69(&v95[v77], &v94[v77], v68);
  uint64_t v80 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v81 = *(int *)(v80 + 20);
  long long v82 = *(void **)&v79[v81];
  uint64_t v83 = *(void **)&v78[v81];
  *(void *)&v78[v81] = v82;
  id v84 = v82;

  uint64_t v85 = *(int *)(v80 + 24);
  uint64_t v86 = *(void **)&v79[v85];
  uint64_t v87 = *(void **)&v78[v85];
  *(void *)&v78[v85] = v86;
  id v88 = v86;

  return v95;
}

char *initializeWithTake for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = a3[5];
  uint64_t v4 = &a1[v3];
  uint64_t v5 = &a2[v3];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&a2[v3];
  *((void *)v4 + 2) = *(void *)&a2[v3 + 16];
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&a2[v3 + 24];
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2[v3 + 40];
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&a2[v3 + 56];
  *(_OWORD *)(v4 + 72) = *(_OWORD *)&a2[v3 + 72];
  *((void *)v4 + 11) = *(void *)&a2[v3 + 88];
  *((_OWORD *)v4 + 6) = *(_OWORD *)&a2[v3 + 96];
  uint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = v6[13];
  uint64_t v8 = &v4[v7];
  uint64_t v9 = &v5[v7];
  uint64_t v10 = sub_255EEE100();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v6[14];
  uint64_t v15 = &v4[v14];
  uint64_t v16 = &v5[v14];
  uint64_t v42 = v12;
  if (v12(&v5[v14], 1, v10))
  {
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  *(_OWORD *)&v4[v6[15]] = *(_OWORD *)&v5[v6[15]];
  *(_OWORD *)&v4[v6[16]] = *(_OWORD *)&v5[v6[16]];
  v4[v6[17]] = v5[v6[17]];
  v4[v6[18]] = v5[v6[18]];
  *(_OWORD *)&v4[v6[19]] = *(_OWORD *)&v5[v6[19]];
  uint64_t v18 = v6[20];
  uint64_t v19 = &v4[v18];
  uint64_t v20 = &v5[v18];
  uint64_t v21 = sub_255EEDF60();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_255EA1BB0(0, &qword_269F350B8, MEMORY[0x270FA8158], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(void *)&v4[v6[21]] = *(void *)&v5[v6[21]];
  uint64_t v24 = v6[22];
  uint64_t v25 = &v4[v24];
  uint64_t v26 = &v5[v24];
  if (v42(&v5[v24], 1, v10))
  {
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v25, v26, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  }
  uint64_t v28 = a3[6];
  int v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = sub_255EEE200();
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32);
  v32(v29, v30, v31);
  uint64_t v33 = a3[7];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  v32(&a1[v33], &a2[v33], v31);
  uint64_t v36 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v34[*(int *)(v36 + 20)] = *(void *)&v35[*(int *)(v36 + 20)];
  uint64_t v37 = a3[8];
  unint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  v32(&a1[v37], &a2[v37], v31);
  uint64_t v40 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
  *(void *)&v38[*(int *)(v40 + 24)] = *(void *)&v39[*(int *)(v40 + 24)];
  return a1;
}

char *assignWithTake for MedicalIDBiometricsViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v90 = a3;
  uint64_t v91 = a2;
  uint64_t v7 = a3[5];
  uint64_t v92 = a1;
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = *(void *)&a2[v7 + 8];
  *(void *)uint64_t v8 = *(void *)&a2[v7];
  *((void *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  *((void *)v8 + 2) = *((void *)v9 + 2);
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v9 + 4);
  *((void *)v8 + 3) = *((void *)v9 + 3);
  *((void *)v8 + 4) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v9 + 6);
  *((void *)v8 + 5) = *((void *)v9 + 5);
  *((void *)v8 + 6) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v9 + 8);
  *((void *)v8 + 7) = *((void *)v9 + 7);
  *((void *)v8 + 8) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v9 + 10);
  *((void *)v8 + 9) = *((void *)v9 + 9);
  *((void *)v8 + 10) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)*((void *)v8 + 12);
  uint64_t v16 = *((void *)v9 + 12);
  *((void *)v8 + 11) = *((void *)v9 + 11);
  *((void *)v8 + 12) = v16;

  uint64_t v17 = (void *)*((void *)v8 + 13);
  *((void *)v8 + 13) = *((void *)v9 + 13);

  uint64_t v18 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v19 = v18[13];
  uint64_t v20 = &v8[v19];
  uint64_t v21 = &v9[v19];
  uint64_t v22 = sub_255EEE100();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  uint64_t v28 = v18[14];
  int v29 = &v8[v28];
  uint64_t v30 = &v9[v28];
  int v31 = v24(&v8[v28], 1, v22);
  int v32 = v24(v30, 1, v22);
  uint64_t v89 = v22;
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v30, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
LABEL_12:
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v29, v30, v22);
LABEL_13:
  uint64_t v34 = v18[15];
  uint64_t v35 = &v8[v34];
  uint64_t v36 = (uint64_t *)&v9[v34];
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = v18[16];
  uint64_t v40 = &v8[v39];
  uint64_t v41 = (uint64_t *)&v9[v39];
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  v8[v18[17]] = v9[v18[17]];
  v8[v18[18]] = v9[v18[18]];
  uint64_t v44 = v18[19];
  uint64_t v45 = (uint64_t)&v8[v44];
  uint64_t v46 = &v9[v44];
  unint64_t v47 = *(void *)&v8[v44 + 8];
  uint64_t v88 = v23;
  uint64_t v86 = v24;
  if (v47 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    goto LABEL_18;
  }
  unint64_t v48 = *((void *)v46 + 1);
  if (v48 >> 60 == 15)
  {
    sub_255D81EF8(v45);
    goto LABEL_16;
  }
  uint64_t v49 = *(void *)v45;
  *(void *)uint64_t v45 = *(void *)v46;
  *(void *)(v45 + 8) = v48;
  sub_255D80D04(v49, v47);
LABEL_18:
  uint64_t v87 = v18;
  uint64_t v50 = v18[20];
  int v51 = &v8[v50];
  int v52 = &v9[v50];
  uint64_t v53 = sub_255EEDF60();
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
LABEL_23:
    sub_255EA1BB0(0, &qword_269F350B8, MEMORY[0x270FA8158], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v51, v52, v53);
LABEL_24:
  uint64_t v59 = v87[21];
  uint64_t v60 = *(void **)&v8[v59];
  *(void *)&v8[v59] = *(void *)&v9[v59];

  uint64_t v61 = v87[22];
  int v62 = &v8[v61];
  int v63 = &v9[v61];
  int v64 = v86(&v8[v61], 1, v89);
  int v65 = v86(v63, 1, v89);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 40))(v62, v63, v89);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v62, v89);
    goto LABEL_29;
  }
  if (v65)
  {
LABEL_29:
    sub_255EA1BB0(0, &qword_269F35058, MEMORY[0x270FA9348], MEMORY[0x263F8D8F0]);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v62, v63, v89);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v62, 0, 1, v89);
LABEL_30:
  uint64_t v67 = v90[6];
  uint64_t v68 = &v92[v67];
  uint64_t v69 = &v91[v67];
  uint64_t v70 = sub_255EEE200();
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 40);
  v71(v68, v69, v70);
  uint64_t v72 = v90[7];
  uint64_t v73 = &v92[v72];
  uint64_t v74 = &v91[v72];
  v71(&v92[v72], &v91[v72], v70);
  uint64_t v75 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  id v76 = *(void **)&v73[v75];
  *(void *)&v73[v75] = *(void *)&v74[v75];

  uint64_t v77 = v90[8];
  uint64_t v78 = &v92[v77];
  uint64_t v79 = &v91[v77];
  v71(&v92[v77], &v91[v77], v70);
  uint64_t v80 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v81 = *(int *)(v80 + 20);
  long long v82 = *(void **)&v78[v81];
  *(void *)&v78[v81] = *(void *)&v79[v81];

  uint64_t v83 = *(int *)(v80 + 24);
  id v84 = *(void **)&v78[v83];
  *(void *)&v78[v83] = *(void *)&v79[v83];

  return v92;
}

uint64_t getEnumTagSinglePayload for MedicalIDBiometricsViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255EA16C8);
}

uint64_t sub_255EA16C8(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for MedicalIDData();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_255EEE200();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_11;
  }
  uint64_t v13 = type metadata accessor for MedicalIDHeightFormatter();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[8];
  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for MedicalIDBiometricsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255EA18A0);
}

uint64_t sub_255EA18A0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for MedicalIDData();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_255EEE200();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  uint64_t v13 = type metadata accessor for MedicalIDHeightFormatter();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[8];
  return v16(v18, a2, a2, v17);
}

uint64_t sub_255EA1A64()
{
  uint64_t result = type metadata accessor for MedicalIDData();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_255EEE200();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for MedicalIDHeightFormatter();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for MedicalIDWeightFormatter();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_255EA1BB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255EA1C1C()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_profileIdentifier);
  id v2 = objc_msgSend(v1, sel_type);

  if (v2 == (id)3 && *(void *)(v0 + 32))
  {
    uint64_t v3 = sub_255EEFD20();
    MEMORY[0x270FA5388](v3 - 8);
    sub_255EEFD10();
    sub_255EEFD00();
    sub_255EEFCF0();
    sub_255EEFD00();
    uint64_t v4 = sub_255EEFD40();
    MEMORY[0x270FA5388](v4 - 8);
    sub_255EEFD30();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
  }
  else
  {
    uint64_t v5 = sub_255EEFD40();
    MEMORY[0x270FA5388](v5 - 8);
    sub_255EEFCD0();
    if (qword_269F349A0 != -1) {
      swift_once();
    }
  }
  uint64_t v6 = (void *)qword_269F352A8;
  uint64_t v7 = sub_255EEE200();
  MEMORY[0x270FA5388](v7 - 8);
  id v8 = v6;
  sub_255EEE1F0();
  return sub_255EEFDA0();
}

uint64_t MedicalIDNavigationBarViewModel.deinit()
{
  swift_bridgeObjectRelease();
  sub_255D7ED4C(v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale;
  uint64_t v2 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDNavigationBarViewModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  sub_255D7ED4C(v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_dateSaved);
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI31MedicalIDNavigationBarViewModel_locale;
  uint64_t v2 = sub_255EEE200();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255EA2084()
{
  return type metadata accessor for MedicalIDNavigationBarViewModel();
}

uint64_t type metadata accessor for MedicalIDNavigationBarViewModel()
{
  uint64_t result = qword_269F38458;
  if (!qword_269F38458) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255EA20D8()
{
  sub_255D80868(319);
  if (v0 <= 0x3F)
  {
    sub_255EEE200();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for MedicalIDNavigationBarViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MedicalIDNavigationBarViewModel);
}

void sub_255EA21D4(void *a1)
{
  v98[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = sub_255EEDF60();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (char *)&v92 - v5;
  id v7 = objc_msgSend(a1, sel_gregorianBirthday);
  sub_255D98658(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v7)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
    goto LABEL_6;
  }
  MEMORY[0x270FA5388](v9);
  sub_255EEDEC0();

  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v12(v11, (char *)&v92 - v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
  {
LABEL_6:
    sub_255EA2FCC((uint64_t)v11);
    id v14 = v96;
    goto LABEL_7;
  }
  v12(v6, v11, v2);
  uint64_t v13 = (void *)sub_255EEDEA0();
  v98[0] = 0;
  id v14 = v96;
  unsigned int v15 = objc_msgSend(v96, sel__setDateOfBirthComponents_error_, v13, v98);

  if (v15)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
    id v17 = v98[0];
    v16(v6, v2);
  }
  else
  {
    id v39 = v98[0];
    uint64_t v40 = (void *)sub_255EEDFC0();

    swift_willThrow();
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_255EEE3D0();
    uint64_t v42 = __swift_project_value_buffer(v41, (uint64_t)qword_269F3FE80);
    MEMORY[0x270FA5388](v42);
    uint64_t v43 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v6, v2);
    id v44 = v40;
    id v45 = v40;
    uint64_t v46 = sub_255EEE3B0();
    os_log_type_t v47 = sub_255EF00C0();
    int v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v49 = swift_slowAlloc();
      int v93 = v48;
      uint64_t v50 = v49;
      uint64_t v94 = (void *)swift_slowAlloc();
      v98[0] = v94;
      *(_DWORD *)uint64_t v50 = 136315394;
      sub_255EA3090();
      os_log_t v92 = v46;
      uint64_t v51 = sub_255EF0480();
      id v97 = (id)sub_255DB0024(v51, v52, (uint64_t *)v98);
      uint64_t v95 = &v92;
      sub_255EF0200();
      swift_bridgeObjectRelease();
      uint64_t v53 = *(void (**)(char *, uint64_t))(v3 + 8);
      v53(v43, v2);
      *(_WORD *)(v50 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v54 = sub_255EF04E0();
      id v97 = (id)sub_255DB0024(v54, v55, (uint64_t *)v98);
      id v14 = v96;
      sub_255EF0200();
      swift_bridgeObjectRelease();

      os_log_t v56 = v92;
      _os_log_impl(&dword_255D76000, v92, (os_log_type_t)v93, "Failed to persist Medical ID birthday %s to Health profile, Error: %s", (uint8_t *)v50, 0x16u);
      int v57 = v94;
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v57, -1, -1);
      MEMORY[0x25A29C8A0](v50, -1, -1);

      v53(v6, v2);
    }
    else
    {

      uint64_t v91 = *(void (**)(char *, uint64_t))(v3 + 8);
      v91(v43, v2);

      v91(v6, v2);
    }
  }
LABEL_7:
  id v18 = objc_msgSend(a1, sel_weight);
  if (v18)
  {
    uint64_t v19 = v18;
    v98[0] = 0;
    if (objc_msgSend(v14, sel__setBodyMassCharacteristicQuantity_error_, v18, v98))
    {
      id v20 = v98[0];
    }
    else
    {
      id v21 = v98[0];
      uint64_t v22 = (void *)sub_255EEDFC0();

      swift_willThrow();
      if (qword_269F34C50 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_255EEE3D0();
      __swift_project_value_buffer(v23, (uint64_t)qword_269F3FE80);
      id v24 = v19;
      id v25 = v22;
      id v26 = v24;
      id v27 = v22;
      uint64_t v28 = sub_255EEE3B0();
      os_log_type_t v29 = sub_255EF00C0();
      uint64_t v95 = v28;
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        int v31 = a1;
        uint64_t v32 = swift_slowAlloc();
        uint64_t v94 = (void *)swift_slowAlloc();
        v98[0] = v94;
        *(_DWORD *)uint64_t v30 = 138412546;
        id v97 = v26;
        id v33 = v26;
        sub_255EF0200();
        uint64_t v34 = (void *)v32;
        a1 = v31;
        *uint64_t v34 = v19;

        *(_WORD *)(v30 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v35 = sub_255EF04E0();
        id v97 = (id)sub_255DB0024(v35, v36, (uint64_t *)v98);
        id v14 = v96;
        sub_255EF0200();
        swift_bridgeObjectRelease();

        uint64_t v37 = v95;
        _os_log_impl(&dword_255D76000, v95, v29, "Failed to persist Medical ID weight %@ to Health profile, Error: %s", (uint8_t *)v30, 0x16u);
        sub_255EA3028();
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v34, -1, -1);
        uint64_t v38 = v94;
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v38, -1, -1);
        MEMORY[0x25A29C8A0](v30, -1, -1);
      }
      else
      {
      }
    }
  }
  id v58 = objc_msgSend(a1, sel_height);
  if (v58)
  {
    uint64_t v59 = v58;
    v98[0] = 0;
    if (objc_msgSend(v14, sel__setHeightCharacteristicQuantity_error_, v58, v98))
    {
      id v60 = v98[0];
    }
    else
    {
      id v61 = v98[0];
      int v62 = (void *)sub_255EEDFC0();

      swift_willThrow();
      if (qword_269F34C50 != -1) {
        swift_once();
      }
      uint64_t v63 = sub_255EEE3D0();
      __swift_project_value_buffer(v63, (uint64_t)qword_269F3FE80);
      id v64 = v59;
      id v65 = v62;
      id v66 = v64;
      id v67 = v62;
      uint64_t v68 = sub_255EEE3B0();
      os_log_type_t v69 = sub_255EF00C0();
      uint64_t v95 = v68;
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v71 = (void *)swift_slowAlloc();
        uint64_t v94 = (void *)swift_slowAlloc();
        v98[0] = v94;
        *(_DWORD *)uint64_t v70 = 138412546;
        id v97 = v66;
        id v72 = v66;
        sub_255EF0200();
        uint64_t v73 = v71;
        *uint64_t v71 = v59;

        *(_WORD *)(v70 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v74 = sub_255EF04E0();
        id v97 = (id)sub_255DB0024(v74, v75, (uint64_t *)v98);
        id v14 = v96;
        sub_255EF0200();
        swift_bridgeObjectRelease();

        id v76 = v95;
        _os_log_impl(&dword_255D76000, v95, v69, "Failed to persist Medical ID height %@ to Health profile, Error: %s", (uint8_t *)v70, 0x16u);
        sub_255EA3028();
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v73, -1, -1);
        uint64_t v77 = v94;
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v77, -1, -1);
        MEMORY[0x25A29C8A0](v70, -1, -1);
      }
      else
      {
      }
    }
  }
  if (objc_msgSend(a1, sel_bloodType))
  {
    id v78 = objc_msgSend(a1, sel_bloodType);
    v98[0] = 0;
    if (objc_msgSend(v14, sel__setBloodType_error_, v78, v98))
    {
      MEMORY[0x270F9A8A0]();
    }
    else
    {
      id v96 = v98[0];
      id v79 = v98[0];
      uint64_t v80 = (void *)sub_255EEDFC0();

      swift_willThrow();
      if (qword_269F34C50 != -1) {
        swift_once();
      }
      uint64_t v81 = sub_255EEE3D0();
      __swift_project_value_buffer(v81, (uint64_t)qword_269F3FE80);
      id v82 = v80;
      id v83 = v80;
      id v84 = a1;
      uint64_t v85 = sub_255EEE3B0();
      os_log_type_t v86 = sub_255EF00C0();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = swift_slowAlloc();
        uint64_t v88 = (void *)swift_slowAlloc();
        v98[0] = v88;
        *(_DWORD *)uint64_t v87 = 134218242;
        id v97 = objc_msgSend(v84, sel_bloodType);
        sub_255EF0200();

        *(_WORD *)(v87 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v89 = sub_255EF04E0();
        id v97 = (id)sub_255DB0024(v89, v90, (uint64_t *)v98);
        sub_255EF0200();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_255D76000, v85, v86, "Failed to persist Medical ID blood type %ld to Health profile, Error: %s", (uint8_t *)v87, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25A29C8A0](v88, -1, -1);
        MEMORY[0x25A29C8A0](v87, -1, -1);
      }
      else
      {
      }
    }
  }
}

uint64_t sub_255EA2F7C@<X0>(uint64_t *a1@<X8>)
{
  sub_255D7ED10(0, &qword_269F35500);
  uint64_t result = sub_255EEE420();
  *a1 = result;
  return result;
}

uint64_t sub_255EA2FCC(uint64_t a1)
{
  sub_255D98658(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255EA3028()
{
  if (!qword_269F35040)
  {
    sub_255D7ED10(255, &qword_269F35048);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F35040);
    }
  }
}

unint64_t sub_255EA3090()
{
  unint64_t result = qword_269F38468;
  if (!qword_269F38468)
  {
    sub_255EEDF60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38468);
  }
  return result;
}

uint64_t MedicalIDSettingsProvider.medicalIDSettingsViewModel(data:healthStore:profileFirstName:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for MedicalIDData();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(os_unfair_lock_s **)(v5 + 24);
  unsigned int v15 = v14 + 4;
  uint64_t v16 = v14 + 5;
  os_unfair_lock_lock(v14 + 5);
  sub_255EA3B50(v15, &v20);
  os_unfair_lock_unlock(v16);
  LOBYTE(v15) = v20;
  sub_255D8BAAC(a1, (uint64_t)v13);
  id v17 = self;
  swift_bridgeObjectRetain();
  return MedicalIDSettingsViewModel.init(medicalIDData:healthStore:profileFirstName:hasPairedWatch:isEEDAvailable:)((uint64_t)v13, (uint64_t)a2, a3, a4, (char)objc_msgSend(v17, sel_hasPairedWatch), (char)v15, a5);
}

uint64_t sub_255EA320C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void *sub_255EA3250()
{
  uint64_t v1 = v0;
  sub_255EA3F04();
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 20) = 0;
  *(unsigned char *)(v2 + 16) = 2;
  v0[3] = v2;
  v0[4] = 0xD000000000000021;
  v0[5] = 0x8000000255EFB570;
  sub_255EEE300();
  uint64_t v16 = sub_255EF05E0();
  uint64_t v17 = v3;
  void v15[3] = sub_255E9993C();
  sub_255EEFE00();
  uint64_t v4 = sub_255EEE140();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EEE130();
  sub_255EEE110();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_255EEFE00();
  swift_bridgeObjectRelease();
  v15[1] = v16;
  uint64_t v8 = sub_255EEFC10();
  v15[2] = v15;
  MEMORY[0x270FA5388](v8 - 8);
  sub_255EEFC00();
  uint64_t v9 = sub_255EF00F0();
  MEMORY[0x270FA5388](v9);
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v10 = (void (*)(uint64_t))MEMORY[0x270FCDBE0];
  sub_255EA3F7C(&qword_269F38490, MEMORY[0x270FCDBE0]);
  sub_255EA3FC4(0, &qword_269F38498, v10);
  sub_255EA4018(&qword_269F384A0, &qword_269F38498, v10);
  sub_255EF0270();
  uint64_t v11 = sub_255EF0110();
  MEMORY[0x270FA5388](v11);
  (*(void (**)(char *, void))(v13 + 104))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F8F128]);
  v1[2] = sub_255EF0140();
  MedicalIDSettingsProvider.fetchAvailabilityStatus()();
  return v1;
}

Swift::Void __swiftcall MedicalIDSettingsProvider.fetchAvailabilityStatus()()
{
  uint64_t v13 = *(void *)(v0 + 16);
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_255EA3B98;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_255EA320C;
  aBlock[3] = &block_descriptor_7;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = sub_255EEFC10();
  uint64_t v2 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_255EEFBF0();
  uint64_t v5 = sub_255EEFBE0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t v9 = (void (*)(uint64_t))MEMORY[0x270FCDA80];
  sub_255EA3F7C(&qword_269F38338, MEMORY[0x270FCDA80]);
  sub_255EA3FC4(0, &qword_269F38340, v9);
  sub_255EA4018((unint64_t *)&qword_269F38348, &qword_269F38340, v9);
  sub_255EF0270();
  uint64_t v10 = v11;
  MEMORY[0x25A29BB50](0, v4, v8, v11);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v12);
  swift_release();
  swift_release();
}

void *sub_255EA38C0()
{
  swift_beginAccess();
  if (!swift_weakLoadStrong() || (int v0 = sub_255EA3A10(), swift_release(), v0 == 2))
  {
    unint64_t result = objc_msgSend(self, sel_sharedBehavior);
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v2 = result;
    objc_msgSend(result, sel_supportsEED);
  }
  swift_beginAccess();
  unint64_t result = (void *)swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result[3];
    swift_retain();
    uint64_t v4 = swift_release();
    MEMORY[0x270FA5388](v4);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
    sub_255EA3E10((unsigned char *)(v3 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_255EA3A10()
{
  if (objc_msgSend(self, sel_isAppleInternalInstall))
  {
    id v0 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t v1 = (void *)sub_255EEFD50();
    id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

    if (v2)
    {
      sub_255EF0260();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v5, 0, sizeof(v5));
    }
    sub_255EA3E1C((uint64_t)v5, (uint64_t)v6);
    if (v7)
    {
      if (swift_dynamicCast()) {
        return v4;
      }
    }
    else
    {
      sub_255EA3E94((uint64_t)v6);
    }
  }
  return 2;
}

id MedicalIDSettingsProvider.hasPairedWatch.getter()
{
  return objc_msgSend(self, sel_hasPairedWatch);
}

unsigned char *sub_255EA3B50@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

uint64_t sub_255EA3B60()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void *sub_255EA3B98()
{
  return sub_255EA38C0();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t MedicalIDSettingsProvider.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI25MedicalIDSettingsProvider___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicalIDSettingsProvider.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MedicalIDUI25MedicalIDSettingsProvider___observationRegistrar;
  uint64_t v2 = sub_255EEE310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_255EA3CEC()
{
  return type metadata accessor for MedicalIDSettingsProvider();
}

uint64_t type metadata accessor for MedicalIDSettingsProvider()
{
  uint64_t result = qword_269F38478;
  if (!qword_269F38478) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255EA3D40()
{
  uint64_t result = sub_255EEE310();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for MedicalIDSettingsProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MedicalIDSettingsProvider);
}

unsigned char *sub_255EA3E10(unsigned char *result)
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_255EA3E1C(uint64_t a1, uint64_t a2)
{
  sub_255E09260(0, (unint64_t *)&qword_269F37AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255EA3E94(uint64_t a1)
{
  sub_255E09260(0, (unint64_t *)&qword_269F37AD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255EA3F04()
{
  if (!qword_269F38488)
  {
    sub_255E09260(255, &qword_269F37EC8);
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_255EF0300();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38488);
    }
  }
}

uint64_t sub_255EA3F7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255EA3FC4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEFF00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255EA4018(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255EA3FC4(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255EA4068(uint64_t (*a1)(uint64_t))
{
  return a1(v1);
}

uint64_t sub_255EA4098()
{
  return sub_255EF0580();
}

uint64_t sub_255EA4104()
{
  return sub_255EF0580();
}

uint64_t sub_255EA41E4()
{
  return sub_255EF0580();
}

uint64_t sub_255EA426C()
{
  return sub_255EF0580();
}

uint64_t sub_255EA434C()
{
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255EA43A0()
{
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255EA446C()
{
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255EA45CC()
{
  sub_255EEFDE0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_255EA468C()
{
  return sub_255EF0580();
}

uint64_t sub_255EA4768()
{
  return sub_255EF0580();
}

uint64_t sub_255EA48E4()
{
  return sub_255EF0580();
}

uint64_t sub_255EA4968()
{
  return sub_255EF0580();
}

uint64_t sub_255EA4A44()
{
  return sub_255EF0580();
}

MedicalIDUI::OrganDonationStatus_optional __swiftcall OrganDonationStatus.init(medicalIDValue:)(NSNumber_optional medicalIDValue)
{
  uint64_t v2 = v1;
  if (medicalIDValue.value.super.super.isa)
  {
    Class isa = medicalIDValue.value.super.super.isa;
    unint64_t v4 = (unint64_t)[(objc_class *)medicalIDValue.value.super.super.isa integerValue];

    if (v4 > 2) {
      LOBYTE(v5) = 4;
    }
    else {
      unsigned int v5 = 0x30102u >> (8 * v4);
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  *uint64_t v2 = v5;
  return (MedicalIDUI::OrganDonationStatus_optional)medicalIDValue.value.super.super.isa;
}

void *static OrganDonationStatus.allCases.getter()
{
  return &unk_2704A3350;
}

uint64_t static Int.medicalIDOrganDonationStatusNotDonorValue.getter()
{
  return 0;
}

uint64_t static Int.medicalIDOrganDonationStatusSelfReportedDonorValue.getter()
{
  return 1;
}

uint64_t static Int.medicalIDOrganDonationStatusRegisteredValue.getter()
{
  return 2;
}

void OrganDonationStatus.id.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t OrganDonationStatus.medicalIDValue.getter()
{
  uint64_t result = *v0;
  switch(*v0)
  {
    case 1:
    case 2:
    case 3:
      sub_255D7EFC4();
      uint64_t result = sub_255EF01C0();
      break;
    default:
      return result;
  }
  return result;
}

MedicalIDUI::OrganDonationStatus_optional __swiftcall OrganDonationStatus.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_255EF0460();
  result.value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t OrganDonationStatus.rawValue.getter()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      return result;
    case 2:
      unint64_t result = 0x726F6E6F44746F6ELL;
      break;
    case 3:
      unint64_t result = 0x694C6574616E6F64;
      break;
    default:
      unint64_t result = 0x746553746F6ELL;
      break;
  }
  return result;
}

uint64_t sub_255EA4CB4(unsigned __int8 *a1, char *a2)
{
  return sub_255D8B018(*a1, *a2);
}

unint64_t sub_255EA4CC4()
{
  unint64_t result = qword_269F384A8;
  if (!qword_269F384A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F384A8);
  }
  return result;
}

uint64_t sub_255EA4D18()
{
  return sub_255EA426C();
}

uint64_t sub_255EA4D20()
{
  return sub_255EA43A0();
}

uint64_t sub_255EA4D28()
{
  return sub_255EA4968();
}

MedicalIDUI::OrganDonationStatus_optional sub_255EA4D30(Swift::String *a1)
{
  return OrganDonationStatus.init(rawValue:)(*a1);
}

unint64_t sub_255EA4D3C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = OrganDonationStatus.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_255EA4D68()
{
  unint64_t result = qword_269F384B0;
  if (!qword_269F384B0)
  {
    sub_255EA4DC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F384B0);
  }
  return result;
}

void sub_255EA4DC0()
{
  if (!qword_269F384B8)
  {
    unint64_t v0 = sub_255EEFF00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F384B8);
    }
  }
}

void sub_255EA4E18(void *a1@<X8>)
{
  *a1 = &unk_2704A3600;
}

unsigned char *storeEnumTagSinglePayload for OrganDonationStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x255EA4EF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrganDonationStatus()
{
  return &type metadata for OrganDonationStatus;
}

uint64_t sub_255EA4F30@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v107 = a4;
  uint64_t v108 = a5;
  uint64_t v109 = a3;
  uint64_t v120 = a2;
  long long v114 = a1;
  long long v115 = a6;
  uint64_t v7 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v110 = (uint64_t *)((char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for EditHeightCellView();
  uint64_t v10 = *(int *)(v9 + 40);
  uint64_t v11 = v9;
  uint64_t v121 = (int *)v9;
  uint64_t v12 = (uint64_t)a6 + v10;
  char v124 = 0;
  sub_255EEF810();
  uint64_t v13 = v123;
  *(unsigned char *)uint64_t v12 = v122;
  *(void *)(v12 + 8) = v13;
  uint64_t v104 = (void *)((char *)a6 + *(int *)(v11 + 44));
  uint64_t v14 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  uint64_t v118 = v15;
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 64);
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v19 = v18;
  uint64_t v111 = *(void *)(v18 - 8);
  uint64_t v20 = v111 + 56;
  long long v119 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56);
  uint64_t v21 = v119((char *)&v101 - v17, 1, 1, v18);
  MEMORY[0x270FA5388](v21);
  long long v116 = sub_255EB5120;
  sub_255EA6038((uint64_t)&v101 - v17, (uint64_t)&v101 - v17, (uint64_t)&qword_269F352E8, v14, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  sub_255EEF810();
  uint64_t v112 = sub_255EB5120;
  uint64_t v22 = sub_255EAF074((uint64_t)&v101 - v17, (uint64_t)&qword_269F352E8, v14, (uint64_t (*)(void))sub_255EB5120);
  uint64_t v23 = v115;
  uint64_t v24 = (uint64_t)v115 + v121[12];
  uint64_t v117 = v16;
  MEMORY[0x270FA5388](v22);
  uint64_t v101 = v19;
  uint64_t v25 = v119((char *)&v101 - v17, 1, 1, v19);
  MEMORY[0x270FA5388](v25);
  sub_255EA6038((uint64_t)&v101 - v17, (uint64_t)&v101 - v17, (uint64_t)&qword_269F352E8, v14, (uint64_t (*)(void, uint64_t, uint64_t))v116);
  uint64_t v105 = (uint64_t *)v24;
  sub_255EEF810();
  id v26 = v112;
  uint64_t v27 = sub_255EAF074((uint64_t)&v101 - v17, (uint64_t)&qword_269F352E8, v14, (uint64_t (*)(void))v112);
  uint64_t v28 = (uint64_t)v23 + v121[13];
  MEMORY[0x270FA5388](v27);
  unint64_t v102 = v17;
  uint64_t v113 = v20;
  uint64_t v29 = v119((char *)&v101 - v17, 1, 1, v19);
  MEMORY[0x270FA5388](v29);
  uint64_t v103 = (uint64_t *)v14;
  sub_255EA6038((uint64_t)&v101 - v17, (uint64_t)&v101 - v17, (uint64_t)&qword_269F352E8, v14, (uint64_t (*)(void, uint64_t, uint64_t))v116);
  uint64_t v106 = v28;
  sub_255EEF810();
  sub_255EAF074((uint64_t)&v101 - v17, (uint64_t)&qword_269F352E8, v14, (uint64_t (*)(void))v26);
  uint64_t v30 = v121;
  int v31 = (void *)((char *)v23 + v121[14]);
  *int v31 = swift_getKeyPath();
  sub_255EAFD58(0, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = (void *)((char *)v23 + v30[15]);
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  *uint64_t v32 = sub_255EEE9F0();
  v32[1] = v33;
  sub_255EA5F54((uint64_t)v114, (uint64_t)v23 + v30[5], (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  uint64_t v34 = sub_255EEE200();
  uint64_t v35 = *(void **)(v34 - 8);
  uint64_t v36 = v35[8];
  MEMORY[0x270FA5388](v34);
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EEE1F0();
  type metadata accessor for HeightDataProvider();
  uint64_t v38 = swift_allocObject();
  MEMORY[0x270FA5388](v38);
  id v39 = (void (*)(char *, char *, uint64_t))v35[2];
  v39((char *)&v101 - v37, (char *)&v101 - v37, v34);
  uint64_t v40 = swift_beginAccess();
  MEMORY[0x270FA5388](v40);
  v39((char *)&v101 - v37, (char *)&v101 - v37, v34);
  sub_255EEE470();
  uint64_t v41 = (void (*)(char *, uint64_t))v35[1];
  v41((char *)&v101 - v37, v34);
  swift_endAccess();
  uint64_t v42 = ((uint64_t (*)(char *, uint64_t))v41)((char *)&v101 - v37, v34);
  uint64_t v43 = (void *)((char *)v115 + v121[9]);
  uint64_t v118 = v38;
  uint64_t *v43 = v38;
  v43[1] = 0;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  unint64_t v45 = v102;
  MEMORY[0x270FA5388](v44);
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v47 = v46;
  swift_retain();
  MEMORY[0x25A29B390](v47);
  sub_255D95718((uint64_t)&v101 - v45, 1, (uint64_t)&v101 - v45);
  uint64_t v48 = (uint64_t)v103;
  sub_255EAF074((uint64_t)&v101 - v45, (uint64_t)&qword_269F352E8, (uint64_t)v103, (uint64_t (*)(void))v112);
  uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B5D0];
  uint64_t v50 = (uint64_t)v104;
  sub_255EAF074((uint64_t)v104, (uint64_t)&qword_269F384C8, MEMORY[0x263F1B5D0], (uint64_t (*)(void))sub_255EA5FBC);
  sub_255EA5FBC(0, &qword_269F384C8, v49);
  uint64_t v112 = (void (*)(uint64_t, unint64_t *, uint64_t (*)(uint64_t, uint64_t)))v51;
  *(void *)(v50 + *(int *)(v51 + 28)) = 0;
  uint64_t v52 = sub_255EB6324((uint64_t)&v101 - v45, v50, (uint64_t)&qword_269F352E8, v48, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  uint64_t v53 = MEMORY[0x270FA5388](v52);
  uint64_t v54 = (char *)&v101 - v45;
  MEMORY[0x270FA5388](v53);
  unint64_t v55 = (char *)&v101 - v45;
  uint64_t v104 = (uint64_t *)v47;
  uint64_t v56 = v47;
  uint64_t v57 = v101;
  uint64_t v58 = MEMORY[0x25A29B390](v56);
  MEMORY[0x270FA5388](v58);
  uint64_t v59 = (char *)&v101 - v45;
  uint64_t v60 = sub_255D95718((uint64_t)&v101 - v45, 1, (uint64_t)&v101 - v45);
  MEMORY[0x270FA5388](v60);
  id v61 = (char *)&v101 - v45;
  sub_255EA6038((uint64_t)&v101 - v45, (uint64_t)&v101 - v45, (uint64_t)&qword_269F352E8, v48, (uint64_t (*)(void, uint64_t, uint64_t))v116);
  int v62 = *(void (**)(uint64_t, unint64_t *, uint64_t (*)(uint64_t, uint64_t)))(v111 + 48);
  int v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v62)(v61, 1, v57);
  long long v116 = v62;
  if (v63 == 1)
  {
    sub_255EAF074((uint64_t)v61, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    uint64_t v64 = 1;
  }
  else
  {
    sub_255EEDDD0();
    long double v66 = v65;
    (*(void (**)(char *, uint64_t))(v111 + 8))(v61, v57);
    fmod(v66, 12.0);
    id v67 = objc_msgSend(self, sel_inches);
    sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
    sub_255EEDDC0();
    uint64_t v64 = 0;
  }
  uint64_t v68 = v57;
  uint64_t v69 = (uint64_t)v104;
  uint64_t v70 = MEMORY[0x263F8D8F0];
  sub_255EAF074((uint64_t)v59, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
  v119(v54, v64, 1, v57);
  sub_255EAF074((uint64_t)v55, (uint64_t)&qword_269F352E8, v70, (uint64_t (*)(void))sub_255EB5120);
  uint64_t v71 = (uint64_t)v105;
  sub_255EAF074((uint64_t)v105, (uint64_t)&qword_269F384C8, MEMORY[0x263F1B5D0], (uint64_t (*)(void))sub_255EA5FBC);
  *(void *)(v71 + *((int *)v112 + 7)) = 0;
  uint64_t v72 = sub_255EB6324((uint64_t)v54, v71, (uint64_t)&qword_269F352E8, v70, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  uint64_t v105 = &v101;
  uint64_t v73 = v117;
  uint64_t v74 = MEMORY[0x270FA5388](v72);
  unint64_t v75 = (v73 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v76 = (char *)&v101 - v75;
  uint64_t v104 = &v101;
  MEMORY[0x270FA5388](v74);
  uint64_t v77 = MEMORY[0x25A29B390](v69);
  uint64_t v103 = &v101;
  MEMORY[0x270FA5388](v77);
  uint64_t v78 = sub_255D95718((uint64_t)&v101 - v75, 1, (uint64_t)&v101 - v75);
  MEMORY[0x270FA5388](v78);
  sub_255EA6038((uint64_t)&v101 - v75, (uint64_t)&v101 - v75, (uint64_t)&qword_269F352E8, v70, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v116)((char *)&v101 - v75, 1, v68) == 1)
  {
    sub_255EAF074((uint64_t)&v101 - v75, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    uint64_t v79 = 1;
  }
  else
  {
    sub_255EEDDD0();
    (*(void (**)(char *, uint64_t))(v111 + 8))((char *)&v101 - v75, v68);
    id v80 = objc_msgSend(self, sel_feet);
    sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
    sub_255EEDDC0();
    uint64_t v79 = 0;
  }
  uint64_t v81 = v115;
  uint64_t v82 = v68;
  id v83 = v121;
  uint64_t v84 = MEMORY[0x263F8D8F0];
  sub_255EAF074((uint64_t)&v101 - v75, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
  v119(v76, v79, 1, v82);
  sub_255EAF074((uint64_t)&v101 - v75, (uint64_t)&qword_269F352E8, v84, (uint64_t (*)(void))sub_255EB5120);
  uint64_t v85 = v106;
  sub_255EAF074(v106, (uint64_t)&qword_269F384C8, MEMORY[0x263F1B5D0], (uint64_t (*)(void))sub_255EA5FBC);
  *(void *)(v85 + *((int *)v112 + 7)) = 0;
  sub_255EB6324((uint64_t)v76, v85, (uint64_t)&qword_269F352E8, v84, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  sub_255EA6038(v120, (uint64_t)v81 + v83[6], (uint64_t)&qword_269F384C0, MEMORY[0x263F1B750], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EA5FBC);
  uint64_t v86 = v108;
  *(uint64_t *)((char *)v81 + v83[7]) = v109;
  uint64_t v87 = v107;
  *uint64_t v81 = v107;
  v81[1] = v86;
  sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_255EF1E20;
  uint64_t v89 = v114;
  uint64_t v90 = v114[1];
  *(void *)(v88 + 32) = *v114;
  *(void *)(v88 + 40) = v90;
  *(void *)(v88 + 48) = 0x746867696548;
  *(void *)(v88 + 56) = 0xE600000000000000;
  swift_retain();
  uint64_t v91 = v87;
  swift_bridgeObjectRetain();
  sub_255D85808(v87);
  os_log_t v92 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v93 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v93)
  {
    uint64_t v94 = sub_255EEFD90();
    uint64_t v95 = v91;
    uint64_t v97 = v96;
    sub_255D879C4(v95);
    swift_release();

    swift_release();
  }
  else
  {
    sub_255D879C4(v91);
    swift_release();
    swift_release();
    uint64_t v94 = 0;
    uint64_t v97 = 0;
  }
  uint64_t v98 = v110;
  sub_255EAF074(v120, (uint64_t)&qword_269F384C0, MEMORY[0x263F1B750], (uint64_t (*)(void))sub_255EA5FBC);
  sub_255EAF0D4((uint64_t)v89, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  if (!v97)
  {
    uint64_t v94 = *v98;
    uint64_t v97 = v98[1];
    swift_bridgeObjectRetain();
  }
  uint64_t result = sub_255EAF13C((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  uint64_t v100 = (uint64_t *)((char *)v81 + v83[8]);
  uint64_t *v100 = v94;
  v100[1] = v97;
  return result;
}

uint64_t type metadata accessor for EditHeightCellView()
{
  uint64_t result = qword_269F384D0;
  if (!qword_269F384D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255EA5EDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_255D7ED10(255, (unint64_t *)&qword_269F352E0);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255EA5F54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_255EA5FBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255EA6038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_255EA60A8@<X0>(char *a1@<X8>)
{
  uint64_t v120 = a1;
  uint64_t v2 = type metadata accessor for EditHeightCellView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v137 = (void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v121 = (uint64_t)v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v117 - v6;
  sub_255EB3F2C();
  uint64_t v9 = (int *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (void *)((char *)v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v123 = (uint64_t)v117 - v13;
  sub_255EB4630();
  uint64_t v124 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v131 = (void *)((char *)v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255EB46D0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v129 = v16;
  uint64_t v130 = v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v138 = (char *)v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v127 = (char *)v117 - v20;
  sub_255EB4808();
  uint64_t v126 = v21;
  uint64_t v128 = *(char **)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v125 = (char *)v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = (void *)v1;
  char v122 = v7;
  uint64_t v136 = type metadata accessor for EditHeightCellView;
  sub_255EA5F54(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  uint64_t v23 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v24 = ((v23 + 16) & ~v23) + v4;
  uint64_t v25 = (v23 + 16) & ~v23;
  unint64_t v133 = (void *)(v23 | 7);
  uint64_t v134 = v24;
  uint64_t v26 = swift_allocObject();
  uint64_t v135 = v25;
  uint64_t v132 = type metadata accessor for EditHeightCellView;
  sub_255EAF0D4((uint64_t)v7, v26 + v25, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  uint64_t v27 = v1;
  uint64_t v28 = v121;
  sub_255EA5F54(v27, v121, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  uint64_t v29 = swift_allocObject();
  sub_255EAF0D4(v28, v29 + v25, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  *uint64_t v12 = swift_getKeyPath();
  sub_255EAFD58(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = (char *)v12 + v9[15];
  uint64_t v31 = *MEMORY[0x263F18CB8];
  uint64_t v32 = sub_255EEE860();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v30, v31, v32);
  uint64_t v33 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)v12 + v9[16]);
  char *v33 = sub_255EB49D0;
  v33[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v26;
  uint64_t v34 = (void (**)(uint64_t@<X8>))((char *)v12 + v9[17]);
  *uint64_t v34 = sub_255EB4A44;
  v34[1] = (void (*)(uint64_t@<X8>))v29;
  uint64_t v35 = v123;
  sub_255EAF0D4((uint64_t)v12, v123, (uint64_t (*)(void))sub_255EB3F2C);
  uint64_t v36 = (uint64_t)v131;
  sub_255EA5F54(v35, (uint64_t)v131, (uint64_t (*)(void))sub_255EB3F2C);
  uint64_t v37 = v124;
  *(unsigned char *)(v36 + *(int *)(v124 + 36)) = 0;
  sub_255EAF13C(v35, (uint64_t (*)(void))sub_255EB3F2C);
  uint64_t v38 = sub_255EEE200();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v121 = v40;
  unint64_t v118 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v41 = (char *)v117 - v118;
  uint64_t v42 = (uint64_t)v139;
  v117[1] = (char *)v139 + *((int *)v137 + 16);
  sub_255DAAA88((uint64_t)v117 - v118);
  uint64_t v43 = (uint64_t)v122;
  sub_255EA5F54(v42, (uint64_t)v122, (uint64_t (*)(void))v136);
  uint64_t v44 = swift_allocObject();
  sub_255EAF0D4(v43, v44 + v135, (uint64_t (*)(void))v132);
  uint64_t v45 = sub_255EB56B4(&qword_269F385B0, (void (*)(uint64_t))sub_255EB4630, (void (*)(void))sub_255EB4908, (void (*)(void))sub_255EB493C);
  uint64_t v46 = sub_255EB5AD8((unint64_t *)&qword_269F36C10, MEMORY[0x270FA97C0]);
  uint64_t v47 = v125;
  uint64_t v48 = (uint64_t)v131;
  sub_255EEF690();
  swift_release();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v50 = v41;
  uint64_t v51 = (uint64_t)v139;
  uint64_t v123 = v39 + 8;
  v117[0] = v49;
  v49(v50, v38);
  sub_255EAF13C(v48, (uint64_t (*)(void))sub_255EB4630);
  sub_255EA5F54(v51, v43, (uint64_t (*)(void))v136);
  uint64_t v52 = swift_allocObject();
  sub_255EAF0D4(v43, v52 + v135, (uint64_t (*)(void))v132);
  uint64_t v141 = v37;
  uint64_t v142 = v38;
  unint64_t v143 = v45;
  uint64_t v144 = v46;
  uint64_t v53 = v129;
  swift_getOpaqueTypeConformance2();
  uint64_t v55 = v126;
  uint64_t v54 = v127;
  sub_255EEF4B0();
  swift_release();
  (*((void (**)(char *, uint64_t))v128 + 1))(v47, v55);
  (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v138, v54, v53);
  sub_255EB4AE8();
  MEMORY[0x270FA5388](v56 - 8);
  uint64_t v136 = v57;
  uint64_t v58 = (char *)v117 - (((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v51 + *((int *)v137 + 12);
  char v60 = *(unsigned char *)v59;
  uint64_t v61 = *(void *)(v59 + 8);
  LOBYTE(v141) = v60;
  uint64_t v142 = v61;
  sub_255EB5A1C(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  LODWORD(v42) = v140;
  sub_255EB4DE8(0, &qword_269F385C8, (uint64_t (*)(uint64_t))sub_255EB4B84, (uint64_t (*)(uint64_t))sub_255EB4CB8, MEMORY[0x263F19B28]);
  if (v42 == 1)
  {
    uint64_t v134 = *(void *)(v62 - 8);
    uint64_t v135 = v62;
    uint64_t v128 = v58;
    unint64_t v133 = v117;
    uint64_t v63 = MEMORY[0x270FA5388](v62);
    uint64_t v132 = (uint64_t (*)())((char *)v117 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v137 = v117;
    MEMORY[0x270FA5388](v63);
    double v65 = (char *)v117 - v118;
    sub_255DAAA88((uint64_t)v117 - v118);
    uint64_t v66 = sub_255EEE190();
    uint64_t v131 = v117;
    uint64_t v67 = *(void *)(v66 - 8);
    uint64_t v68 = *(void *)(v67 + 64);
    MEMORY[0x270FA5388](v66);
    unint64_t v69 = (v68 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_255EEE1A0();
    uint64_t v70 = ((uint64_t (*)(char *, uint64_t))v117[0])(v65, v38);
    MEMORY[0x270FA5388](v70);
    sub_255EEE170();
    sub_255EB5AD8((unint64_t *)&qword_269F352D0, MEMORY[0x270FA9760]);
    char v71 = sub_255EEFCC0();
    uint64_t v72 = *(uint64_t (**)(char *, uint64_t))(v67 + 8);
    uint64_t v73 = v72((char *)v117 - v69, v66);
    if (v71)
    {
      v72((char *)v117 - v69, v66);
      uint64_t v74 = v119;
      uint64_t v75 = (uint64_t)v139;
      uint64_t v76 = (uint64_t)v128;
    }
    else
    {
      MEMORY[0x270FA5388](v73);
      sub_255EEE160();
      char v81 = sub_255EEFCC0();
      v72((char *)v117 - v69, v66);
      v72((char *)v117 - v69, v66);
      uint64_t v74 = v119;
      uint64_t v75 = (uint64_t)v139;
      uint64_t v76 = (uint64_t)v128;
      if ((v81 & 1) == 0)
      {
        sub_255EB4CB8();
        uint64_t v96 = v95;
        uint64_t v127 = (char *)v117;
        uint64_t v97 = *(void *)(v95 - 8);
        MEMORY[0x270FA5388](v95);
        uint64_t v99 = (char *)v117 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_255EA9504((uint64_t)v99);
        sub_255EB4DE8(0, &qword_269F386D8, (uint64_t (*)(uint64_t))sub_255EB4B84, (uint64_t (*)(uint64_t))sub_255EB4CB8, MEMORY[0x263F19B20]);
        uint64_t v139 = v117;
        MEMORY[0x270FA5388](v100);
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))((char *)v117 - v101, v99, v96);
        swift_storeEnumTagMultiPayload();
        sub_255EB4B84();
        uint64_t v126 = v102;
        sub_255EB6424(&qword_269F386E0, (void (*)(uint64_t))sub_255EB4B84);
        sub_255EB4DE8(255, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
        uint64_t v104 = v103;
        sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
        uint64_t v106 = v105;
        unint64_t v107 = sub_255EB5838();
        uint64_t v108 = sub_255EB5974(&qword_269F386B8, &qword_269F386C0);
        uint64_t v141 = v104;
        uint64_t v142 = v106;
        unint64_t v143 = v107;
        uint64_t v144 = v108;
        swift_getOpaqueTypeConformance2();
        uint64_t v94 = v132;
        sub_255EEEE00();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
        goto LABEL_8;
      }
    }
    sub_255EB4B84();
    uint64_t v137 = v117;
    MEMORY[0x270FA5388](v82);
    uint64_t v84 = (char *)v117 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(void *)uint64_t v84 = sub_255EEEC90();
    *((void *)v84 + 1) = 0;
    v84[16] = 1;
    sub_255EB646C(0, &qword_269F386E8, sub_255EB4C18);
    sub_255EA9D58(v75, &v84[*(int *)(v85 + 44)]);
    sub_255EB4DE8(0, &qword_269F386D8, (uint64_t (*)(uint64_t))sub_255EB4B84, (uint64_t (*)(uint64_t))sub_255EB4CB8, MEMORY[0x263F19B20]);
    uint64_t v139 = v117;
    MEMORY[0x270FA5388](v86);
    sub_255EA5F54((uint64_t)v84, (uint64_t)v117 - v87, (uint64_t (*)(void))sub_255EB4B84);
    swift_storeEnumTagMultiPayload();
    sub_255EB4CB8();
    sub_255EB6424(&qword_269F386E0, (void (*)(uint64_t))sub_255EB4B84);
    sub_255EB4DE8(255, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    uint64_t v89 = v88;
    sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    uint64_t v91 = v90;
    unint64_t v92 = sub_255EB5838();
    uint64_t v93 = sub_255EB5974(&qword_269F386B8, &qword_269F386C0);
    uint64_t v141 = v89;
    uint64_t v142 = v91;
    unint64_t v143 = v92;
    uint64_t v144 = v93;
    swift_getOpaqueTypeConformance2();
    uint64_t v94 = v132;
    sub_255EEEE00();
    sub_255EAF13C((uint64_t)v84, (uint64_t (*)(void))sub_255EB4B84);
LABEL_8:
    sub_255EB5B20((uint64_t)v94, v76);
    uint64_t v77 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v134 + 56))(v76, 0, 1, v135);
    uint64_t v53 = v129;
    uint64_t v79 = v130;
    uint64_t v58 = (char *)v76;
    id v80 = v136;
    uint64_t v78 = v120;
    goto LABEL_9;
  }
  uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v58, 1, 1, v62);
  uint64_t v78 = v120;
  uint64_t v79 = v130;
  uint64_t v74 = v119;
  id v80 = v136;
LABEL_9:
  uint64_t v139 = v117;
  MEMORY[0x270FA5388](v77);
  uint64_t v109 = (char *)v117 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = *(uint64_t (**)(char *, char *, uint64_t))(v79 + 16);
  uint64_t v111 = v138;
  uint64_t v112 = v110(v109, v138, v53);
  uint64_t v137 = v117;
  MEMORY[0x270FA5388](v112);
  uint64_t v113 = (char *)v117 - (((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EA5F54((uint64_t)v58, (uint64_t)v113, (uint64_t (*)(void))sub_255EB4AE8);
  v110(v78, v109, v53);
  sub_255EB5A68();
  sub_255EA5F54((uint64_t)v113, (uint64_t)&v78[*(int *)(v114 + 48)], (uint64_t (*)(void))sub_255EB4AE8);
  sub_255EAF13C((uint64_t)v58, (uint64_t (*)(void))sub_255EB4AE8);
  long long v115 = *(void (**)(char *, uint64_t))(v79 + 8);
  v115(v111, v53);
  sub_255EAF13C((uint64_t)v113, (uint64_t (*)(void))sub_255EB4AE8);
  return ((uint64_t (*)(char *, uint64_t))v115)(v109, v53);
}

uint64_t sub_255EA7354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = sub_255EEEC90();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  sub_255EB646C(0, &qword_269F38728, sub_255EB4068);
  return sub_255EAD23C(a1, a2 + *(int *)(v4 + 44));
}

void sub_255EA73CC(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_255EB4340();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB42F8(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = sub_255EEED80();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  sub_255EB646C(0, &qword_269F38708, sub_255EB43D4);
  sub_255EAE588(v2, (uint64_t)&v6[*(int *)(v10 + 44)]);
  sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_255EF1E20;
  uint64_t v12 = (void *)(v2 + *(int *)(type metadata accessor for EditHeightCellView() + 32));
  uint64_t v13 = v12[1];
  *(void *)(v11 + 32) = *v12;
  *(void *)(v11 + 40) = v13;
  *(void *)(v11 + 48) = 0x56746E65746E6F43;
  *(void *)(v11 + 56) = 0xEB00000000776569;
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v15 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v15)
  {
    sub_255EEFD90();

    sub_255EB45FC();
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255EAF13C((uint64_t)v6, (uint64_t (*)(void))sub_255EB4340);
    sub_255EAF0D4((uint64_t)v9, a1, (uint64_t (*)(void))sub_255EB42F8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255EA7624(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for EditHeightCellView() + 36));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  v10[1] = v3;
  v10[2] = v2;
  sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v4 = sub_255EEE200();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255DAAA88((uint64_t)v10 - v7);
  swift_getKeyPath();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v10 - v7, (char *)v10 - v7, v4);
  swift_retain();
  sub_255EEE490();
  (*(void (**)(char *, uint64_t))(v5 + 8))((char *)v10 - v7, v4);
  return swift_release();
}

uint64_t sub_255EA77F4(uint64_t (**a1)(uint64_t))
{
  uint64_t v2 = sub_255EEEFC0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for EditHeightCellView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x270FA5388](v6 - 8);
  if (*a1) {
    uint64_t v9 = (*a1)(v9);
  }
  MEMORY[0x270FA5388](v9);
  *(void *)&v13[-16] = a1;
  sub_255EA5F54((uint64_t)a1, (uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_255EAF0D4((uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255EEFB30();
  sub_255EEEFB0();
  sub_255EEE7C0();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_255EA7A4C()
{
  return swift_release();
}

uint64_t sub_255EA7B24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EditHeightCellView();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = a1 + *(int *)(v3 + 40);
  char v7 = *(unsigned char *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  _OWORD v17[8] = v7;
  uint64_t v18 = v8;
  sub_255EB5A1C(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  int v9 = v19;
  sub_255EA5F54(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  if (v9 != 1) {
    return sub_255EAF13C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  }
  uint64_t v10 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v17[-v12];
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  sub_255EAF13C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  int v15 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
  uint64_t result = sub_255EAF074((uint64_t)v13, (uint64_t)&qword_269F352E8, v10, (uint64_t (*)(void))sub_255EB5120);
  if (v15 == 1) {
    return sub_255EA7D8C();
  }
  return result;
}

uint64_t sub_255EA7D8C()
{
  uint64_t v1 = type metadata accessor for HealthDemographicData();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EAFD58(0, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v116 - v6;
  uint64_t v8 = type metadata accessor for EditHeightCellView();
  int v9 = *(void **)(v0 + *(int *)(v8 + 60));
  if (v9)
  {
    unsigned __int8 v10 = objc_msgSend(v9, sel_suggestHealthData);
    uint64_t v128 = v0;
    uint64_t v130 = v8;
    if (v10)
    {
      uint64_t v11 = *(void *)(v0 + *(int *)(v8 + 28));
      swift_getKeyPath();
      uint64_t v131 = v11;
      sub_255EB6424((unint64_t *)&qword_269F350A8, (void (*)(uint64_t))type metadata accessor for HealthDemographicDataProvider);
      sub_255EEE2D0();
      swift_release();
      uint64_t v12 = v11 + OBJC_IVAR____TtC11MedicalIDUI29HealthDemographicDataProvider__data;
      swift_beginAccess();
      sub_255D7FE80(v12, (uint64_t)v7);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
      {
        sub_255EA5F54((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
        sub_255EB6198((uint64_t)v7, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, MEMORY[0x263F8D8F0]);
        id v53 = *(id *)&v4[*(int *)(v1 + 28)];
        sub_255EAF13C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HealthDemographicData);
        sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
        uint64_t v129 = &v116;
        uint64_t v126 = *(void *)(*(void *)(v54 - 8) + 64);
        MEMORY[0x270FA5388](v54 - 8);
        uint64_t v56 = (char *)&v116 - v55;
        type metadata accessor for MedicalIDBiometricsViewModel();
        id v57 = v53;
        uint64_t v127 = (uint64_t *)v56;
        sub_255DFD46C(v53, (uint64_t)v56);
        id v125 = v57;

        uint64_t v58 = sub_255EEE200();
        uint64_t v124 = &v116;
        uint64_t v59 = *(void *)(v58 - 8);
        MEMORY[0x270FA5388](v58);
        uint64_t v61 = (char *)&v116 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_255DAAA88((uint64_t)v61);
        uint64_t v62 = sub_255EEE190();
        uint64_t v123 = &v116;
        uint64_t v63 = *(void *)(v62 - 8);
        uint64_t v64 = *(void *)(v63 + 64);
        MEMORY[0x270FA5388](v62);
        unint64_t v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF0;
        sub_255EEE1A0();
        uint64_t v66 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v61, v58);
        MEMORY[0x270FA5388](v66);
        sub_255EEE170();
        sub_255EB5AD8((unint64_t *)&qword_269F352D0, MEMORY[0x270FA9760]);
        char v67 = sub_255EEFCC0();
        uint64_t v68 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
        uint64_t v69 = v68((char *)&v116 - v65, v62);
        if (v67)
        {
          uint64_t v70 = v68((char *)&v116 - v65, v62);
        }
        else
        {
          MEMORY[0x270FA5388](v69);
          sub_255EEE160();
          char v71 = sub_255EEFCC0();
          v68((char *)&v116 - v65, v62);
          uint64_t v70 = v68((char *)&v116 - v65, v62);
          if ((v71 & 1) == 0)
          {
            uint64_t v107 = v126;
            MEMORY[0x270FA5388](v70);
            uint64_t v108 = (char *)&v116 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v109 = (uint64_t *)(v128 + *(int *)(v130 + 36));
            uint64_t v111 = *v109;
            uint64_t v110 = v109[1];
            uint64_t v132 = v111;
            uint64_t v133 = v110;
            sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
            sub_255EEF820();
            uint64_t v112 = (uint64_t)v127;
            sub_255D95718((uint64_t)v127, 1, (uint64_t)v108);
            uint64_t v113 = swift_release();
            MEMORY[0x270FA5388](v113);
            uint64_t v114 = MEMORY[0x263F8D8F0];
            sub_255EA6038((uint64_t)v108, (uint64_t)v108, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
            sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
            sub_255EEF830();

            sub_255EAF074((uint64_t)v108, (uint64_t)&qword_269F352E8, v114, (uint64_t (*)(void))sub_255EB5120);
            sub_255EAF074(v112, (uint64_t)&qword_269F352E8, v114, (uint64_t (*)(void))sub_255EB5120);
            return sub_255EAB144();
          }
        }
        uint64_t v123 = &v116;
        uint64_t v72 = v126;
        MEMORY[0x270FA5388](v70);
        unint64_t v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v74 = (char *)&v116 - v73;
        char v122 = (uint64_t *)(v128 + *(int *)(v130 + 36));
        uint64_t v75 = v122[1];
        uint64_t v132 = *v122;
        uint64_t v133 = v75;
        sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
        uint64_t v121 = v76;
        uint64_t v77 = sub_255EEF820();
        uint64_t v117 = &v116;
        MEMORY[0x270FA5388](v77);
        uint64_t v78 = (char *)&v116 - v73;
        uint64_t v79 = sub_255D95718((uint64_t)v127, 1, (uint64_t)&v116 - v73);
        MEMORY[0x270FA5388](v79);
        sub_255EA6038((uint64_t)&v116 - v73, (uint64_t)&v116 - v73, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
        sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
        uint64_t v81 = v80;
        uint64_t v82 = *(void *)(v80 - 8);
        unint64_t v118 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
        uint64_t v119 = v82 + 48;
        int v83 = v118((char *)&v116 - v73, 1, v80);
        uint64_t v124 = (uint64_t *)v82;
        if (v83 == 1)
        {
          uint64_t v84 = MEMORY[0x263F8D8F0];
          sub_255EAF074((uint64_t)&v116 - v73, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
          sub_255EAF074((uint64_t)v78, (uint64_t)&qword_269F352E8, v84, (uint64_t (*)(void))sub_255EB5120);
          uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
          uint64_t v86 = (char *)&v116 - v73;
          uint64_t v87 = 1;
        }
        else
        {
          sub_255EEDDD0();
          (*(void (**)(char *, uint64_t))(v82 + 8))((char *)&v116 - v73, v81);
          id v88 = objc_msgSend(self, sel_feet);
          sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
          sub_255EEDDC0();
          sub_255EAF074((uint64_t)v78, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
          uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
          uint64_t v86 = (char *)&v116 - v73;
          uint64_t v87 = 0;
        }
        uint64_t v120 = v85;
        v85(v86, v87, 1, v81);
        uint64_t v89 = swift_release();
        uint64_t v90 = v126;
        MEMORY[0x270FA5388](v89);
        unint64_t v91 = (v90 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v92 = MEMORY[0x263F8D8F0];
        sub_255EA6038((uint64_t)v74, (uint64_t)&v116 - v91, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
        sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
        uint64_t v117 = v93;
        sub_255EEF830();
        uint64_t v94 = sub_255EAF074((uint64_t)v74, (uint64_t)&qword_269F352E8, v92, (uint64_t (*)(void))sub_255EB5120);
        uint64_t v123 = &v116;
        MEMORY[0x270FA5388](v94);
        uint64_t v95 = (char *)&v116 - v91;
        uint64_t v96 = v122[1];
        uint64_t v132 = *v122;
        uint64_t v133 = v96;
        uint64_t v97 = sub_255EEF820();
        char v122 = &v116;
        uint64_t v98 = v134;
        MEMORY[0x270FA5388](v97);
        uint64_t v121 = v98;
        uint64_t v99 = sub_255D95718((uint64_t)v127, 1, (uint64_t)&v116 - v91);
        MEMORY[0x270FA5388](v99);
        sub_255EA6038((uint64_t)&v116 - v91, (uint64_t)&v116 - v91, (uint64_t)&qword_269F352E8, v92, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
        if (v118((char *)&v116 - v91, 1, v81) == 1)
        {
          sub_255EAF074((uint64_t)&v116 - v91, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
          uint64_t v100 = 1;
        }
        else
        {
          sub_255EEDDD0();
          long double v102 = v101;
          ((void (*)(char *, uint64_t))v124[1])((char *)&v116 - v91, v81);
          fmod(v102, 12.0);
          id v103 = objc_msgSend(self, sel_inches);
          sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
          sub_255EEDDC0();
          uint64_t v100 = 0;
        }
        uint64_t v104 = MEMORY[0x263F8D8F0];
        sub_255EAF074((uint64_t)&v116 - v91, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
        v120(v95, v100, 1, v81);
        uint64_t v105 = swift_release();
        MEMORY[0x270FA5388](v105);
        sub_255EA6038((uint64_t)v95, (uint64_t)&v116 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&qword_269F352E8, v104, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
        sub_255EEF830();

        sub_255EAF074((uint64_t)v95, (uint64_t)&qword_269F352E8, v104, (uint64_t (*)(void))sub_255EB5120);
        sub_255EAF074((uint64_t)v127, (uint64_t)&qword_269F352E8, v104, (uint64_t (*)(void))sub_255EB5120);
        return sub_255EAB144();
      }
      sub_255EB6198((uint64_t)v7, (unint64_t *)&qword_269F350A0, (uint64_t (*)(uint64_t))type metadata accessor for HealthDemographicData, MEMORY[0x263F8D8F0]);
    }
    uint64_t v13 = sub_255EEE200();
    uint64_t v129 = &v116;
    uint64_t v14 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v13);
    uint64_t v16 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255DAAA88((uint64_t)v16);
    uint64_t v17 = sub_255EEE190();
    uint64_t v127 = &v116;
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x270FA5388](v17);
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_255EEE1A0();
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    MEMORY[0x270FA5388](v21);
    sub_255EEE170();
    sub_255EB5AD8((unint64_t *)&qword_269F352D0, MEMORY[0x270FA9760]);
    char v22 = sub_255EEFCC0();
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
    uint64_t v24 = v23((char *)&v116 - v20, v17);
    if (v22)
    {
      v23((char *)&v116 - v20, v17);
    }
    else
    {
      MEMORY[0x270FA5388](v24);
      sub_255EEE160();
      char v25 = sub_255EEFCC0();
      v23((char *)&v116 - v20, v17);
      v23((char *)&v116 - v20, v17);
      if ((v25 & 1) == 0)
      {
        sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
        unint64_t v44 = (*(void *)(*(void *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
        MEMORY[0x270FA5388](v43 - 8);
        uint64_t v45 = (uint64_t *)(v128 + *(int *)(v130 + 36));
        uint64_t v47 = *v45;
        uint64_t v46 = v45[1];
        uint64_t v132 = v47;
        uint64_t v133 = v46;
        sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
        sub_255EEF820();
        if (qword_269F349D8 != -1) {
          swift_once();
        }
        sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
        uint64_t v49 = v48;
        __swift_project_value_buffer(v48, (uint64_t)qword_269F3FCB0);
        id v50 = objc_msgSend(self, sel_centimeters);
        sub_255EEDE00();

        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))((char *)&v116 - v44, 0, 1, v49);
        uint64_t v51 = swift_release();
        MEMORY[0x270FA5388](v51);
        uint64_t v52 = MEMORY[0x263F8D8F0];
        sub_255EA6038((uint64_t)&v116 - v44, (uint64_t)&v116 - v44, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
        sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
        sub_255EEF830();
        sub_255EAF074((uint64_t)&v116 - v44, (uint64_t)&qword_269F352E8, v52, (uint64_t (*)(void))sub_255EB5120);
        return sub_255EAB144();
      }
    }
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    uint64_t v129 = &v116;
    unint64_t v27 = (*(void *)(*(void *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x270FA5388](v26 - 8);
    uint64_t v28 = (uint64_t *)(v128 + *(int *)(v130 + 36));
    uint64_t v29 = v28[1];
    uint64_t v132 = *v28;
    uint64_t v133 = v29;
    sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
    uint64_t v127 = (uint64_t *)v30;
    sub_255EEF820();
    if (qword_269F349C0 != -1) {
      swift_once();
    }
    sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
    uint64_t v32 = v31;
    uint64_t v126 = __swift_project_value_buffer(v31, (uint64_t)qword_269F3FC68);
    sub_255EEDDD0();
    id v125 = self;
    id v33 = objc_msgSend(v125, sel_feet);
    uint64_t v124 = (uint64_t *)sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
    sub_255EEDDC0();
    uint64_t v34 = *(void *)(v32 - 8);
    char v122 = *(uint64_t **)(v34 + 56);
    uint64_t v123 = (uint64_t *)(v34 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v122)((char *)&v116 - v27, 0, 1, v32);
    uint64_t v35 = swift_release();
    MEMORY[0x270FA5388](v35);
    uint64_t v36 = MEMORY[0x263F8D8F0];
    uint64_t v121 = sub_255EB5120;
    sub_255EA6038((uint64_t)&v116 - v27, (uint64_t)&v116 - v27, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
    sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
    uint64_t v120 = v37;
    sub_255EEF830();
    uint64_t v38 = sub_255EAF074((uint64_t)&v116 - v27, (uint64_t)&qword_269F352E8, v36, (uint64_t (*)(void))sub_255EB5120);
    uint64_t v129 = &v116;
    MEMORY[0x270FA5388](v38);
    uint64_t v39 = v28[1];
    uint64_t v132 = *v28;
    uint64_t v133 = v39;
    sub_255EEF820();
    sub_255EEDDD0();
    fmod(v40, 12.0);
    id v41 = objc_msgSend(v125, sel_inches);
    sub_255EEDDC0();
    ((void (*)(char *, void, uint64_t, uint64_t))v122)((char *)&v116 - v27, 0, 1, v32);
    uint64_t v42 = swift_release();
    MEMORY[0x270FA5388](v42);
    sub_255EA6038((uint64_t)&v116 - v27, (uint64_t)&v116 - v27, (uint64_t)&qword_269F352E8, v36, (uint64_t (*)(void, uint64_t, uint64_t))v121);
    sub_255EEF830();
    sub_255EAF074((uint64_t)&v116 - v27, (uint64_t)&qword_269F352E8, v36, (uint64_t (*)(void))sub_255EB5120);
    return sub_255EAB144();
  }
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  uint64_t result = sub_255EEE9E0();
  __break(1u);
  return result;
}

void sub_255EA9504(uint64_t a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v2 = type metadata accessor for EditHeightCellView();
  uint64_t v3 = v2 - 8;
  uint64_t v54 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v55 = v4;
  uint64_t v56 = (uint64_t)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_255EEE9A0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  uint64_t v67 = v6;
  MEMORY[0x270FA5388](v5);
  unint64_t v65 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB4CB8();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x270FA5388](v8);
  id v57 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB4DE8(0, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  uint64_t v52 = v10;
  MEMORY[0x270FA5388](v10);
  id v53 = (char *)v49 - v11;
  sub_255EB4E6C();
  uint64_t v51 = v12;
  uint64_t v50 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB4F40();
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_255EEED10();
  uint64_t v63 = v21;
  uint64_t v64 = v20;
  uint64_t v62 = v22;
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v24 = *(int *)(v3 + 52);
  uint64_t v25 = v1;
  uint64_t v61 = v1;
  uint64_t v26 = v1 + v24;
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  v49[0] = v27;
  v49[1] = v26;
  sub_255EEF840();
  uint64_t v68 = v25;
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  sub_255EB5028();
  sub_255EB5974(&qword_269F38638, &qword_269F38640);
  sub_255EB5600();
  uint64_t v28 = v66;
  uint64_t v29 = v14;
  sub_255EEF8F0();
  uint64_t v30 = v65;
  sub_255EEE990();
  uint64_t v31 = sub_255EB6424(&qword_269F386A8, (void (*)(uint64_t))sub_255EB4F40);
  sub_255EEF460();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v30, v28);
  uint64_t v32 = v19;
  uint64_t v33 = v61;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v32, v16);
  sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_255EF1E20;
  uint64_t v35 = (void *)(v33 + *(int *)(v3 + 40));
  uint64_t v36 = v35[1];
  *(void *)(v34 + 32) = *v35;
  *(void *)(v34 + 40) = v36;
  *(void *)(v34 + 48) = 0x72656B636950;
  *(void *)(v34 + 56) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  uint64_t v37 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v38 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v38)
  {
    sub_255EEFD90();

    uint64_t v69 = v16;
    uint64_t v70 = v28;
    uint64_t v71 = v31;
    uint64_t v72 = MEMORY[0x263F190C8];
    swift_getOpaqueTypeConformance2();
    uint64_t v39 = (uint64_t)v53;
    uint64_t v40 = v51;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v29, v40);
    MEMORY[0x270FA5388](v41);
    uint64_t v43 = (char *)v49 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_255EEF820();
    uint64_t v44 = v33;
    uint64_t v45 = v56;
    sub_255EA5F54(v44, v56, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
    unint64_t v46 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    uint64_t v47 = swift_allocObject();
    sub_255EAF0D4(v45, v47 + v46, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
    sub_255EB5838();
    sub_255EB5974(&qword_269F386B8, &qword_269F386C0);
    uint64_t v48 = v57;
    sub_255EEF690();
    swift_release();
    sub_255EAF074((uint64_t)v43, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    sub_255EB5BD8(v39);
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v60, v48, v59);
  }
  else
  {
    __break(1u);
  }
}

void sub_255EA9D58(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v112 = a2;
  uint64_t v3 = type metadata accessor for EditHeightCellView();
  uint64_t v147 = v3;
  uint64_t v128 = *(char **)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v129 = v4;
  uint64_t v141 = (uint64_t)v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_255EEE9A0();
  uint64_t v151 = *(void **)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  uint64_t v6 = (char *)v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB4CB8();
  uint64_t v144 = *(void *)(v7 - 8);
  uint64_t v145 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v142 = v9;
  unint64_t v143 = (char *)v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v135 = v10;
  uint64_t v133 = (char *)((char *)v102 - v10);
  sub_255EB4DE8(0, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  uint64_t v140 = v11;
  uint64_t v132 = *(void **)(*(void *)(v11 - 8) + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v134 = v12;
  id v125 = (char *)((char *)v102 - v12);
  sub_255EB4E6C();
  uint64_t v139 = v13;
  uint64_t v149 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v131 = v14;
  uint64_t v130 = (char *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (char *)((char *)v102 - v130);
  sub_255EB4F40();
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v127 = v19;
  unint64_t v126 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)v102 - v126;
  uint64_t v138 = sub_255EEED10();
  uint64_t v137 = v21;
  uint64_t v136 = v22;
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v123 = *(void *)(*(void *)(v23 - 8) + 64);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v124 = v24;
  uint64_t v25 = *(int *)(v3 + 52);
  uint64_t v26 = a1;
  uint64_t v150 = a1;
  uint64_t v27 = a1 + v25;
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  uint64_t v148 = v28;
  uint64_t v113 = v27;
  sub_255EEF840();
  uint64_t v152 = v26;
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  uint64_t v30 = v29;
  sub_255EB5028();
  uint64_t v32 = v31;
  uint64_t v33 = sub_255EB5974(&qword_269F38638, &qword_269F38640);
  unint64_t v120 = sub_255EB5600();
  uint64_t v121 = v33;
  uint64_t v122 = v32;
  uint64_t v138 = v30;
  sub_255EEF8F0();
  sub_255EEE990();
  uint64_t v34 = sub_255EB6424(&qword_269F386A8, (void (*)(uint64_t))sub_255EB4F40);
  uint64_t v35 = MEMORY[0x263F190C8];
  uint64_t v114 = (uint64_t (*)(void, void))v15;
  uint64_t v36 = v146;
  sub_255EEF460();
  uint64_t v37 = (void (*)(char *, uint64_t))v151[1];
  uint64_t v137 = v6;
  uint64_t v38 = v36;
  ++v151;
  uint64_t v119 = v37;
  v37(v6, v36);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v136 = v18 + 8;
  unint64_t v118 = v39;
  v39(v20, v17);
  sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v117 = v40;
  uint64_t v41 = swift_allocObject();
  long long v116 = xmmword_255EF1E20;
  *(_OWORD *)(v41 + 16) = xmmword_255EF1E20;
  uint64_t v42 = (void *)(v150 + *(int *)(v147 + 32));
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  long long v115 = v42;
  *(void *)(v41 + 32) = v44;
  *(void *)(v41 + 40) = v43;
  *(void *)(v41 + 48) = 0x6B63695074656546;
  *(void *)(v41 + 56) = 0xEA00000000007265;
  swift_bridgeObjectRetain();
  uint64_t v45 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v46 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v46)
  {
    sub_255EEFD90();

    uint64_t v111 = v17;
    uint64_t v153 = v17;
    uint64_t v154 = v38;
    uint64_t v155 = v34;
    uint64_t v156 = v35;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v48 = (uint64_t)v125;
    uint64_t v49 = v139;
    uint64_t v110 = OpaqueTypeConformance2;
    uint64_t v50 = v114;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    uint64_t v51 = *(uint64_t (**)(void, void))(v149 + 8);
    v149 += 8;
    uint64_t v114 = v51;
    uint64_t v52 = v51(v50, v49);
    MEMORY[0x270FA5388](v52);
    uint64_t v109 = v53;
    unint64_t v108 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v54 = (char *)v102 - v108;
    sub_255EEF820();
    uint64_t v55 = v150;
    uint64_t v56 = v141;
    sub_255EA5F54(v150, v141, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
    uint64_t v57 = v128[80];
    uint64_t v58 = (v57 + 16) & ~v57;
    uint64_t v106 = v58 + v129;
    uint64_t v105 = v57 | 7;
    uint64_t v59 = swift_allocObject();
    uint64_t v113 = v58;
    sub_255EAF0D4(v56, v59 + v58, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
    unint64_t v60 = sub_255EB5838();
    uint64_t v61 = sub_255EB5974(&qword_269F386B8, &qword_269F386C0);
    uint64_t v129 = v34;
    uint64_t v62 = v133;
    unint64_t v107 = v60;
    uint64_t v104 = v61;
    sub_255EEF690();
    swift_release();
    sub_255EAF074((uint64_t)v54, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    sub_255EB5BD8(v48);
    uint64_t v63 = *(uint64_t (**)(char *, char *, uint64_t))(v144 + 32);
    id v125 = (char *)(v144 + 32);
    id v103 = v63;
    uint64_t v64 = v63(v143, v62, v145);
    uint64_t v133 = (char *)v102;
    uint64_t v65 = MEMORY[0x270FA5388](v64);
    uint64_t v128 = (char *)((char *)v102 - v135);
    v102[2] = v102;
    uint64_t v66 = MEMORY[0x270FA5388](v65);
    uint64_t v135 = (char *)v102 - v67;
    v102[1] = v102;
    uint64_t v68 = MEMORY[0x270FA5388](v66);
    uint64_t v134 = (char *)((char *)v102 - v134);
    uint64_t v132 = v102;
    uint64_t v69 = MEMORY[0x270FA5388](v68);
    uint64_t v70 = (char *)((char *)v102 - v130);
    uint64_t v131 = v102;
    MEMORY[0x270FA5388](v69);
    uint64_t v71 = (char *)v102 - v126;
    uint64_t v72 = sub_255EEED10();
    uint64_t v130 = (char *)v102;
    MEMORY[0x270FA5388](v72);
    uint64_t v147 = v55 + *(int *)(v147 + 48);
    uint64_t v73 = sub_255EEF840();
    MEMORY[0x270FA5388](v73);
    sub_255EEF8F0();
    uint64_t v74 = v137;
    sub_255EEE990();
    uint64_t v75 = v111;
    uint64_t v76 = v146;
    sub_255EEF460();
    v119(v74, v76);
    v118(v71, v75);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = v116;
    uint64_t v78 = v115[1];
    *(void *)(v77 + 32) = *v115;
    *(void *)(v77 + 40) = v78;
    strcpy((char *)(v77 + 48), "InchesPicker");
    *(unsigned char *)(v77 + 61) = 0;
    *(_WORD *)(v77 + 62) = -5120;
    swift_bridgeObjectRetain();
    uint64_t v79 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v80 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v80)
    {
      sub_255EEFD90();

      uint64_t v81 = (uint64_t)v134;
      uint64_t v82 = v139;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      uint64_t v83 = v114(v70, v82);
      MEMORY[0x270FA5388](v83);
      uint64_t v84 = (char *)v102 - v108;
      sub_255EEF820();
      uint64_t v85 = v141;
      sub_255EA5F54(v150, v141, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
      uint64_t v86 = swift_allocObject();
      sub_255EAF0D4(v85, v86 + v113, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
      uint64_t v87 = v135;
      sub_255EEF690();
      swift_release();
      sub_255EAF074((uint64_t)v84, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
      sub_255EB5BD8(v81);
      id v88 = v128;
      uint64_t v89 = v145;
      uint64_t v90 = v103(v128, v87, v145);
      uint64_t v151 = v102;
      uint64_t v91 = v142;
      MEMORY[0x270FA5388](v90);
      uint64_t v92 = (char *)v102 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v94 = v143;
      uint64_t v93 = v144;
      uint64_t v95 = *(uint64_t (**)(char *, char *, uint64_t))(v144 + 16);
      uint64_t v96 = v95(v92, v143, v89);
      LOBYTE(v153) = 1;
      MEMORY[0x270FA5388](v96);
      v95(v92, v88, v89);
      uint64_t v97 = v112;
      v95(v112, v92, v89);
      sub_255EB4C4C();
      uint64_t v99 = &v97[*(int *)(v98 + 48)];
      char v100 = v153;
      *(void *)uint64_t v99 = 0;
      v99[8] = v100;
      v95(&v97[*(int *)(v98 + 64)], v92, v89);
      double v101 = *(void (**)(char *, uint64_t))(v93 + 8);
      v101(v88, v89);
      v101(v94, v89);
      v101(v92, v89);
      v101(v92, v89);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_255EAADCC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EditHeightCellView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = (void **)(a1 + *(int *)(MEMORY[0x270FA5388](v2 - 8) + 44));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v19 = v7;
  uint64_t v20 = v6;
  sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  id v8 = objc_msgSend(self, sel_feet);
  if (qword_269F349F8 != -1) {
    swift_once();
  }
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v10 = v9;
  __swift_project_value_buffer(v9, (uint64_t)qword_269F3FD10);
  sub_255EEDDD0();
  double v12 = v11;
  if (qword_269F34A00 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v10, (uint64_t)qword_269F3FD28);
  sub_255EEDDD0();
  uint64_t v14 = sub_255D96C94(v8, v12, v13);
  swift_release();

  uint64_t v19 = v14;
  swift_getKeyPath();
  sub_255EA5F54(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = swift_allocObject();
  sub_255EAF0D4((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255EB5120(0, &qword_269F38610, MEMORY[0x263F8D488]);
  sub_255EB5190();
  sub_255EB558C();
  sub_255EB5D78(&qword_269F38640, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  sub_255EB56B4(&qword_269F38688, (void (*)(uint64_t))sub_255EB5190, (void (*)(void))sub_255EB5740, (void (*)(void))sub_255EB5804);
  return sub_255EEFA00();
}

uint64_t sub_255EAB144()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_255EEE200();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for EditHeightCellView();
  sub_255DAAA88((uint64_t)v5);
  uint64_t v6 = sub_255EEE190();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EEE1A0();
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  MEMORY[0x270FA5388](v10);
  sub_255EEE170();
  sub_255EB5AD8((unint64_t *)&qword_269F352D0, MEMORY[0x270FA9760]);
  char v11 = sub_255EEFCC0();
  double v12 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v13 = v12((char *)&v61 - v9, v6);
  if (v11)
  {
    v12((char *)&v61 - v9, v6);
    goto LABEL_4;
  }
  MEMORY[0x270FA5388](v13);
  sub_255EEE160();
  char v14 = sub_255EEFCC0();
  v12((char *)&v61 - v9, v6);
  v12((char *)&v61 - v9, v6);
  if (v14)
  {
LABEL_4:
    sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    uint64_t v19 = MEMORY[0x270FA5388](v15);
    unint64_t v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v68 = (char *)&v61 - v20;
    uint64_t v73 = &v61;
    MEMORY[0x270FA5388](v19);
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    uint64_t v72 = &v61;
    uint64_t v70 = *(void *)(*(void *)(v21 - 8) + 64);
    MEMORY[0x270FA5388](v21 - 8);
    uint64_t v67 = v22;
    uint64_t v23 = (char *)((char *)&v61 - (char *)v22);
    sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
    uint64_t v69 = v1;
    sub_255EEF820();
    uint64_t v71 = v17;
    uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
    uint64_t v25 = v24(v23, 1, v16);
    if (v25) {
      return sub_255EAF074((uint64_t)v23, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    }
    uint64_t v64 = &v61;
    uint64_t v65 = &v61;
    MEMORY[0x270FA5388](v25);
    uint64_t v66 = (unsigned int (*)(char *, uint64_t, uint64_t))v24;
    uint64_t v27 = v71;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))((char *)&v61 - v20, v23, v16);
    sub_255EAF074((uint64_t)v23, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    id v61 = self;
    id v28 = objc_msgSend(v61, sel_inches);
    sub_255EEDE00();

    uint64_t v62 = *(void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v63 = v27 + 8;
    v62((char *)&v61 - v20, v16);
    uint64_t v29 = *(id **)(v27 + 32);
    uint64_t v30 = v68;
    uint64_t v72 = v29;
    uint64_t v31 = ((uint64_t (*)(char *, char *, uint64_t))v29)(v68, (char *)&v61 - v20, v16);
    uint64_t v73 = &v61;
    uint64_t v32 = MEMORY[0x270FA5388](v31);
    uint64_t v33 = (char *)&v61 - v20;
    MEMORY[0x270FA5388](v32);
    uint64_t v34 = (char *)((char *)&v61 - (char *)v67);
    sub_255EEF820();
    if (v66(v34, 1, v16) == 1)
    {
      v62(v30, v16);
      return sub_255EAF074((uint64_t)v34, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    }
    else
    {
      uint64_t v46 = ((uint64_t (*)(char *, char *, uint64_t))v72)(v33, v34, v16);
      uint64_t v72 = &v61;
      MEMORY[0x270FA5388](v46);
      sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
      uint64_t v47 = sub_255EEDDF0();
      uint64_t v67 = &v61;
      uint64_t v48 = v70;
      MEMORY[0x270FA5388](v47);
      uint64_t v49 = (char *)&v61 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v50 = objc_msgSend(v61, sel_inches);
      sub_255EEDE00();

      uint64_t v51 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v49, 0, 1, v16);
      MEMORY[0x270FA5388](v51);
      uint64_t v52 = v30;
      uint64_t v53 = MEMORY[0x263F8D8F0];
      sub_255EA6038((uint64_t)v49, (uint64_t)v49, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
      sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
      sub_255EEF980();
      sub_255EAF074((uint64_t)v49, (uint64_t)&qword_269F352E8, v53, (uint64_t (*)(void))sub_255EB5120);
      uint64_t v54 = v62;
      v62((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
      v54(v33, v16);
      return ((uint64_t (*)(char *, uint64_t))v54)(v52, v16);
    }
  }
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  uint64_t v36 = *(void *)(*(void *)(v35 - 8) + 64);
  uint64_t v37 = MEMORY[0x270FA5388](v35 - 8);
  uint64_t v38 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)&v61 - v39;
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v42 = v41;
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v41);
  if (v44)
  {
    sub_255EAF074((uint64_t)v40, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    uint64_t v45 = 1;
  }
  else
  {
    MEMORY[0x270FA5388](v44);
    uint64_t v56 = (char *)&v61 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v56, v40, v42);
    sub_255EAF074((uint64_t)v40, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    id v57 = objc_msgSend(self, sel_centimeters);
    sub_255EEDE00();

    (*(void (**)(char *, uint64_t))(v43 + 8))(v56, v42);
    uint64_t v45 = 0;
  }
  uint64_t v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v38, v45, 1, v42);
  MEMORY[0x270FA5388](v58);
  uint64_t v59 = (char *)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = MEMORY[0x263F8D8F0];
  sub_255EA6038((uint64_t)v38, (uint64_t)v59, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  sub_255EEF980();
  return sub_255EAF074((uint64_t)v38, (uint64_t)&qword_269F352E8, v60, (uint64_t (*)(void))sub_255EB5120);
}

uint64_t sub_255EABD30(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EditHeightCellView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = (void **)(a1 + *(int *)(MEMORY[0x270FA5388](v2 - 8) + 44));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v19 = v7;
  unint64_t v20 = v6;
  sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  id v8 = objc_msgSend(self, sel_inches);
  if (qword_269F349E8 != -1) {
    swift_once();
  }
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v10 = v9;
  __swift_project_value_buffer(v9, (uint64_t)qword_269F3FCE0);
  sub_255EEDDD0();
  double v12 = v11;
  if (qword_269F349F0 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v10, (uint64_t)qword_269F3FCF8);
  sub_255EEDDD0();
  char v14 = sub_255D96C94(v8, v12, v13);
  swift_release();

  uint64_t v19 = v14;
  swift_getKeyPath();
  sub_255EA5F54(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = swift_allocObject();
  sub_255EAF0D4((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255EB5120(0, &qword_269F38610, MEMORY[0x263F8D488]);
  sub_255EB5190();
  sub_255EB558C();
  sub_255EB5D78(&qword_269F38640, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  sub_255EB56B4(&qword_269F38688, (void (*)(uint64_t))sub_255EB5190, (void (*)(void))sub_255EB5740, (void (*)(void))sub_255EB5804);
  return sub_255EEFA00();
}

uint64_t sub_255EAC0A8@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = (void (*)())a1;
  uint64_t v63 = a2;
  uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x270FA7E90];
  sub_255EA5EDC(0, &qword_269F38418, MEMORY[0x270FA7E90]);
  uint64_t v67 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v60 - v4;
  sub_255EA5EDC(0, &qword_269F38420, MEMORY[0x270FA7E70]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v60 - v9;
  sub_255D7ED10(0, (unint64_t *)&qword_269F352E0);
  sub_255EEDDE0();
  sub_255EB5C8C();
  MEMORY[0x270FA5388](v11 - 8);
  double v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB5D10(0, (unint64_t *)&qword_269F38430, (uint64_t (*)(void))sub_255E9F044, MEMORY[0x263F8D538], MEMORY[0x270FA8BF8]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_255EA5EDC(0, &qword_269F36358, MEMORY[0x270FA8C70]);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v60 - v18;
  sub_255EEDFE0();
  sub_255EEDD90();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_255EAF13C((uint64_t)v13, (uint64_t (*)(void))sub_255EB5C8C);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v21 = v20;
  sub_255EB5D78((unint64_t *)&qword_269F38440, &qword_269F38418, v66);
  uint64_t v22 = v67;
  uint64_t v23 = v62;
  sub_255EEDE10();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v22);
  sub_255DAD520();
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))sub_255EEF3D0();
  uint64_t v65 = v25;
  uint64_t v66 = v24;
  uint64_t v67 = v26;
  int v64 = v27 & 1;
  uint64_t v28 = MEMORY[0x263F8D8F0];
  uint64_t v61 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  uint64_t v30 = v29;
  uint64_t v60 = v29;
  uint64_t v31 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v60 - v32;
  uint64_t v34 = *(void *)(v21 - 8);
  (*(void (**)(char *, void (*)(), uint64_t))(v34 + 16))((char *)&v60 - v32, v23, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v33, 0, 1, v21);
  uint64_t v62 = sub_255EB5270;
  sub_255EB5214(0, &qword_269F38620, (void (*)(uint64_t))sub_255EB5270);
  uint64_t v36 = v35 - 8;
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v60 - v37;
  uint64_t v39 = MEMORY[0x263F19088];
  sub_255EB5324(0, &qword_269F386F8, MEMORY[0x263F19088]);
  MEMORY[0x270FA5388](v40 - 8);
  uint64_t v42 = (char *)&v60 - v41;
  sub_255EA6038((uint64_t)v33, (uint64_t)&v60 - v41, (uint64_t)&qword_269F352E8, v28, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  uint64_t v43 = *(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56);
  v43(v42, 0, 1, v30);
  sub_255EB5270();
  MEMORY[0x270FA5388](v44 - 8);
  uint64_t v46 = (char *)&v60 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB5DBC((uint64_t)v42, (uint64_t)v46, (uint64_t)&qword_269F386F8, v39, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5324);
  sub_255EA5F54((uint64_t)v46, (uint64_t)&v38[*(int *)(v36 + 44)], (uint64_t (*)(void))sub_255EB5270);
  uint64_t v48 = v65;
  uint64_t v47 = v66;
  *(void *)uint64_t v38 = v66;
  *((void *)v38 + 1) = v48;
  char v49 = v64;
  v38[16] = v64;
  *((void *)v38 + 3) = v67;
  sub_255D85214((uint64_t)v47, v48, v49);
  swift_bridgeObjectRetain();
  sub_255EAF13C((uint64_t)v46, (uint64_t (*)(void))sub_255EB5270);
  sub_255EB5E2C((uint64_t)v42, (uint64_t)&qword_269F386F8, v39, (uint64_t (*)(void))sub_255EB5324);
  uint64_t v50 = MEMORY[0x263F19088];
  sub_255EB5E8C(0, &qword_269F38700, MEMORY[0x263F19088]);
  MEMORY[0x270FA5388](v51 - 8);
  uint64_t v53 = (char *)&v60 - v52;
  uint64_t v54 = v61;
  sub_255EA6038((uint64_t)v33, (uint64_t)&v60 - v52, (uint64_t)&qword_269F352E8, v61, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  v43(v53, 0, 1, v60);
  sub_255EA5FBC(0, &qword_269F38660, MEMORY[0x263F8D8F0]);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v53, 0, 1, v55);
  sub_255EB5190();
  uint64_t v57 = v63;
  sub_255EB5DBC((uint64_t)v53, v63 + *(int *)(v56 + 36), (uint64_t)&qword_269F38700, v50, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5E8C);
  uint64_t v58 = (void (*)(uint64_t))v62;
  sub_255EB5F14((uint64_t)v38, v57, &qword_269F38620, (void (*)(uint64_t))v62);
  sub_255EB5E2C((uint64_t)v53, (uint64_t)&qword_269F38700, v50, (uint64_t (*)(void))sub_255EB5E8C);
  sub_255EB5F80((uint64_t)v38, &qword_269F38620, v58);
  sub_255EAF074((uint64_t)v33, (uint64_t)&qword_269F352E8, v54, (uint64_t (*)(void))sub_255EB5120);
  sub_255D85120((uint64_t)v66, v65, v64);
  return swift_bridgeObjectRelease();
}

uint64_t sub_255EAC930(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EditHeightCellView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = (void **)(a1 + *(int *)(MEMORY[0x270FA5388](v2 - 8) + 44));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v19 = v7;
  uint64_t v20 = v6;
  sub_255EAFD58(0, &qword_269F386F0, (uint64_t (*)(uint64_t))type metadata accessor for HeightDataProvider, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  if (qword_269F349A8 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F3FC40;
  if (qword_269F349D0 != -1) {
    swift_once();
  }
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v10 = v9;
  __swift_project_value_buffer(v9, (uint64_t)qword_269F3FC98);
  sub_255EEDDD0();
  double v12 = v11;
  if (qword_269F349E0 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v10, (uint64_t)qword_269F3FCC8);
  sub_255EEDDD0();
  uint64_t v14 = sub_255D96C94(v8, v12, v13);
  swift_release();
  uint64_t v19 = v14;
  swift_getKeyPath();
  sub_255EA5F54(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = swift_allocObject();
  sub_255EAF0D4((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255EB5120(0, &qword_269F38610, MEMORY[0x263F8D488]);
  sub_255EB5190();
  sub_255EB558C();
  sub_255EB5D78(&qword_269F38640, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  sub_255EB56B4(&qword_269F38688, (void (*)(uint64_t))sub_255EB5190, (void (*)(void))sub_255EB5740, (void (*)(void))sub_255EB5804);
  return sub_255EEFA00();
}

uint64_t sub_255EACCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  type metadata accessor for EditHeightCellView();
  type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v50 = sub_255DFDD94(a1);
  uint64_t v51 = v3;
  sub_255DAD520();
  uint64_t v4 = sub_255EEF3D0();
  uint64_t v47 = v5;
  uint64_t v48 = v4;
  uint64_t v49 = v6;
  int v46 = v7 & 1;
  uint64_t v8 = MEMORY[0x263F8D8F0];
  uint64_t v43 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  uint64_t v10 = v9;
  uint64_t v42 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  double v13 = (char *)&v42 - v12;
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, a1, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  uint64_t v44 = sub_255EB5270;
  sub_255EB5214(0, &qword_269F38620, (void (*)(uint64_t))sub_255EB5270);
  uint64_t v18 = v17 - 8;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t v21 = MEMORY[0x263F19088];
  sub_255EB5324(0, &qword_269F386F8, MEMORY[0x263F19088]);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v42 - v23;
  sub_255EA6038((uint64_t)v13, (uint64_t)&v42 - v23, (uint64_t)&qword_269F352E8, v8, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  v25(v24, 0, 1, v10);
  sub_255EB5270();
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB5DBC((uint64_t)v24, (uint64_t)v28, (uint64_t)&qword_269F386F8, v21, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5324);
  sub_255EA5F54((uint64_t)v28, (uint64_t)&v20[*(int *)(v18 + 44)], (uint64_t (*)(void))sub_255EB5270);
  uint64_t v30 = v47;
  uint64_t v29 = v48;
  *(void *)uint64_t v20 = v48;
  *((void *)v20 + 1) = v30;
  char v31 = v46;
  v20[16] = v46;
  *((void *)v20 + 3) = v49;
  sub_255D85214(v29, v30, v31);
  swift_bridgeObjectRetain();
  sub_255EAF13C((uint64_t)v28, (uint64_t (*)(void))sub_255EB5270);
  sub_255EB5E2C((uint64_t)v24, (uint64_t)&qword_269F386F8, v21, (uint64_t (*)(void))sub_255EB5324);
  uint64_t v32 = MEMORY[0x263F19088];
  sub_255EB5E8C(0, &qword_269F38700, MEMORY[0x263F19088]);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v35 = (char *)&v42 - v34;
  uint64_t v36 = v43;
  sub_255EA6038((uint64_t)v13, (uint64_t)&v42 - v34, (uint64_t)&qword_269F352E8, v43, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  v25(v35, 0, 1, v42);
  sub_255EA5FBC(0, &qword_269F38660, MEMORY[0x263F8D8F0]);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v35, 0, 1, v37);
  sub_255EB5190();
  uint64_t v39 = v45;
  sub_255EB5DBC((uint64_t)v35, v45 + *(int *)(v38 + 36), (uint64_t)&qword_269F38700, v32, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5E8C);
  uint64_t v40 = (void (*)(uint64_t))v44;
  sub_255EB5F14((uint64_t)v20, v39, &qword_269F38620, (void (*)(uint64_t))v44);
  sub_255EB5E2C((uint64_t)v35, (uint64_t)&qword_269F38700, v32, (uint64_t (*)(void))sub_255EB5E8C);
  sub_255EB5F80((uint64_t)v20, &qword_269F38620, v40);
  sub_255EAF074((uint64_t)v13, (uint64_t)&qword_269F352E8, v36, (uint64_t (*)(void))sub_255EB5120);
  sub_255D85120(v48, v47, v46);
  return swift_bridgeObjectRelease();
}

uint64_t sub_255EAD23C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  sub_255EB6394(0, &qword_269F38730, (uint64_t (*)(uint64_t))sub_255EB4160, MEMORY[0x263F19B20]);
  v34[2] = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v34 - v4;
  sub_255EB4160(0);
  v34[3] = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB6394(0, &qword_269F38500, (uint64_t (*)(uint64_t))sub_255EB4160, MEMORY[0x263F19B28]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v35 = (uint64_t)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  double v13 = (char *)v34 - v12;
  sub_255EB5214(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  v34[1] = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v34 - v18;
  sub_255EAD828((uint64_t)v34 - v18);
  uint64_t v20 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)v34 - v22;
  type metadata accessor for EditHeightCellView();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24);
  sub_255EAF074((uint64_t)v23, (uint64_t)&qword_269F352E8, v20, (uint64_t (*)(void))sub_255EB5120);
  if (v25 == 1)
  {
    sub_255EAE27C((uint64_t)v17);
    uint64_t v26 = (void (*)(uint64_t))MEMORY[0x263F1A470];
    sub_255EB5F14((uint64_t)v17, (uint64_t)v5, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    swift_storeEnumTagMultiPayload();
    sub_255EB6424(&qword_269F38738, sub_255EB4160);
    sub_255DD84C8();
    sub_255EEEE00();
    sub_255EB5F80((uint64_t)v17, (unint64_t *)&qword_269F35DF8, v26);
  }
  else
  {
    *(void *)uint64_t v8 = sub_255EEEC90();
    *((void *)v8 + 1) = 0;
    v8[16] = 1;
    sub_255EB646C(0, &qword_269F38740, sub_255EB4230);
    sub_255EADA50(a1, (uint64_t)&v8[*(int *)(v27 + 44)]);
    sub_255EA5F54((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))sub_255EB4160);
    swift_storeEnumTagMultiPayload();
    sub_255EB6424(&qword_269F38738, sub_255EB4160);
    sub_255DD84C8();
    sub_255EEEE00();
    sub_255EAF13C((uint64_t)v8, (uint64_t (*)(void))sub_255EB4160);
  }
  uint64_t v28 = (void (*)(uint64_t))MEMORY[0x263F1A470];
  sub_255EB5F14((uint64_t)v19, (uint64_t)v17, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  uint64_t v29 = v35;
  sub_255EB61FC((uint64_t)v13, v35, &qword_269F38500, (uint64_t (*)(uint64_t))sub_255EB4160);
  uint64_t v30 = v36;
  sub_255EB5F14((uint64_t)v17, v36, (unint64_t *)&qword_269F35DF8, v28);
  sub_255EB409C();
  uint64_t v32 = v30 + *(int *)(v31 + 48);
  *(void *)uint64_t v32 = 0;
  *(unsigned char *)(v32 + 8) = 1;
  sub_255EB61FC(v29, v30 + *(int *)(v31 + 64), &qword_269F38500, (uint64_t (*)(uint64_t))sub_255EB4160);
  sub_255EB627C((uint64_t)v13, &qword_269F38500, (uint64_t (*)(uint64_t))sub_255EB4160);
  sub_255EB5F80((uint64_t)v19, (unint64_t *)&qword_269F35DF8, v28);
  sub_255EB627C(v29, &qword_269F38500, (uint64_t (*)(uint64_t))sub_255EB4160);
  return sub_255EB5F80((uint64_t)v17, (unint64_t *)&qword_269F35DF8, v28);
}

void sub_255EAD828(uint64_t a1@<X8>)
{
  sub_255EB5214(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v11 - v4;
  if (qword_269F34B30 != -1) {
    swift_once();
  }
  v11[0] = qword_269F3FDC0;
  v11[1] = *(void *)algn_269F3FDC8;
  char v12 = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
  sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_255EF1E20;
  uint64_t v7 = (void *)(v1 + *(int *)(type metadata accessor for EditHeightCellView() + 32));
  uint64_t v8 = v7[1];
  *(void *)(v6 + 32) = *v7;
  *(void *)(v6 + 40) = v8;
  *(void *)(v6 + 48) = 0x656C746954;
  *(void *)(v6 + 56) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v10 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v10)
  {
    sub_255EEFD90();

    sub_255EEF580();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_255EB6324((uint64_t)v5, a1, (uint64_t)&qword_269F35DF8, MEMORY[0x263F1A470], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5214);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255EADA50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for EditHeightCellView();
  uint64_t v25 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v25 + 64);
  MEMORY[0x270FA5388](v3);
  sub_255E05F90();
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v24 - v9;
  sub_255EADD24((uint64_t)&v24 - v9);
  uint64_t v11 = a1 + *(int *)(v3 + 40);
  char v12 = *(unsigned char *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  char v27 = v12;
  uint64_t v28 = v13;
  sub_255EB5A1C(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v29 == 1)
  {
    uint64_t v18 = (uint64_t *)(a1 + *(int *)(v3 + 20));
    uint64_t v14 = *v18;
    uint64_t v15 = v18[1];
    sub_255EA5F54(a1, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
    unint64_t v19 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v17 = swift_allocObject();
    sub_255EAF0D4((uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v19, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_255EB62F0;
  }
  sub_255EA5F54((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))sub_255E05F90);
  uint64_t v20 = v26;
  sub_255EA5F54((uint64_t)v8, v26, (uint64_t (*)(void))sub_255E05F90);
  sub_255EB4264();
  uint64_t v22 = (uint64_t *)(v20 + *(int *)(v21 + 48));
  *uint64_t v22 = v14;
  v22[1] = v15;
  uint64_t v22[2] = (uint64_t)v16;
  v22[3] = v17;
  sub_255E3A77C(v14, v15);
  sub_255EAF13C((uint64_t)v10, (uint64_t (*)(void))sub_255E05F90);
  sub_255E3A7C0(v14, v15);
  return sub_255EAF13C((uint64_t)v8, (uint64_t (*)(void))sub_255E05F90);
}

void sub_255EADD24(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_255EB5214(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v55 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v46 - v9;
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v56 = (char *)&v46 - v14;
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = type metadata accessor for EditHeightCellView();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12) == 1)
  {
    sub_255EAF074((uint64_t)v17, (uint64_t)&qword_269F352E8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_255EB5120);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, 1, 1, v5);
  }
  else
  {
    uint64_t v51 = v10;
    uint64_t v52 = v6;
    uint64_t v53 = v5;
    uint64_t v54 = a1;
    uint64_t v47 = v13;
    unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v20 = (uint64_t)v56;
    uint64_t v49 = v12;
    v19(v56, v17, v12);
    type metadata accessor for MedicalIDBiometricsViewModel();
    uint64_t v57 = sub_255DFDD94(v20);
    uint64_t v58 = v21;
    sub_255DAD520();
    uint64_t v22 = sub_255EEF3D0();
    uint64_t v24 = v23;
    char v26 = v25 & 1;
    uint64_t v57 = sub_255EEF6D0();
    uint64_t v27 = v2;
    uint64_t v28 = sub_255EEF370();
    uint64_t v30 = v29;
    LOBYTE(v20) = v31;
    char v32 = v26;
    uint64_t v34 = v33;
    sub_255D85120(v22, v24, v32);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v50 = v28;
    uint64_t v57 = v28;
    uint64_t v58 = v30;
    uint64_t v48 = v30;
    char v35 = v20 & 1;
    char v59 = v20 & 1;
    uint64_t v60 = v34;
    sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_255EF1E20;
    uint64_t v37 = (void *)(v27 + *(int *)(v18 + 32));
    uint64_t v38 = v37[1];
    *(void *)(v36 + 32) = *v37;
    *(void *)(v36 + 40) = v38;
    *(void *)(v36 + 48) = 0x65756C6156;
    *(void *)(v36 + 56) = 0xE500000000000000;
    swift_bridgeObjectRetain();
    uint64_t v39 = (void *)sub_255EEFE90();
    swift_bridgeObjectRelease();
    id v40 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v40)
    {
      sub_255EEFD90();

      uint64_t v41 = (uint64_t)v55;
      sub_255EEF580();
      swift_bridgeObjectRelease();
      sub_255D85120(v50, v48, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v56, v49);
      uint64_t v42 = MEMORY[0x263F1A470];
      uint64_t v43 = (uint64_t)v51;
      sub_255EB6324(v41, (uint64_t)v51, (uint64_t)&qword_269F35DF8, MEMORY[0x263F1A470], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5214);
      uint64_t v44 = v43;
      uint64_t v45 = v54;
      sub_255EB6324(v44, v54, (uint64_t)&qword_269F35DF8, v42, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5214);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v45, 0, 1, v53);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_255EAE27C(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  sub_255EB5214(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  MEMORY[0x270FA5388](v2 - 8);
  char v25 = (char *)&v24 - v3;
  sub_255EEED10();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  id v4 = (id)qword_269F352A8;
  uint64_t v5 = sub_255EEF3C0();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t v27 = sub_255EEF6D0();
  uint64_t v10 = sub_255EEF370();
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v16 = v15;
  sub_255D85120(v5, v7, v9);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v27 = v10;
  uint64_t v28 = v12;
  char v17 = v14 & 1;
  char v29 = v14 & 1;
  uint64_t v30 = v16;
  sub_255EB5A1C(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_255EF1E20;
  unint64_t v19 = (void *)(v1 + *(int *)(type metadata accessor for EditHeightCellView() + 32));
  uint64_t v20 = v19[1];
  *(void *)(v18 + 32) = *v19;
  *(void *)(v18 + 40) = v20;
  *(void *)(v18 + 48) = 6579265;
  *(void *)(v18 + 56) = 0xE300000000000000;
  swift_bridgeObjectRetain();
  uint64_t v21 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v22)
  {
    sub_255EEFD90();

    uint64_t v23 = (uint64_t)v25;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255D85120(v10, v12, v17);
    swift_bridgeObjectRelease();
    sub_255EB6324(v23, v26, (uint64_t)&qword_269F35DF8, MEMORY[0x263F1A470], (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5214);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255EAE588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  sub_255EB6394(0, &qword_269F38710, (uint64_t (*)(uint64_t))sub_255EB44C4, MEMORY[0x263F19B20]);
  void v33[2] = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v33 - v4;
  sub_255EB44C4();
  v33[3] = v6;
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB6394(0, &qword_269F38550, (uint64_t (*)(uint64_t))sub_255EB44C4, MEMORY[0x263F19B28]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v34 = (uint64_t)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)v33 - v12;
  sub_255EB5214(0, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  v33[1] = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  char v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)v33 - v18;
  sub_255EAD828((uint64_t)v33 - v18);
  uint64_t v20 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)v33 - v22;
  type metadata accessor for EditHeightCellView();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  MEMORY[0x25A29B390]();
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24);
  sub_255EAF074((uint64_t)v23, (uint64_t)&qword_269F352E8, v20, (uint64_t (*)(void))sub_255EB5120);
  if (v25 == 1)
  {
    sub_255EAE27C((uint64_t)v17);
    uint64_t v26 = (void (*)(uint64_t))MEMORY[0x263F1A470];
    sub_255EB5F14((uint64_t)v17, (uint64_t)v5, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    swift_storeEnumTagMultiPayload();
    sub_255EB6424(&qword_269F38718, (void (*)(uint64_t))sub_255EB44C4);
    sub_255DD84C8();
    sub_255EEEE00();
    sub_255EB5F80((uint64_t)v17, (unint64_t *)&qword_269F35DF8, v26);
  }
  else
  {
    *(void *)char v8 = sub_255EEEC90();
    *((void *)v8 + 1) = 0;
    v8[16] = 1;
    sub_255EB646C(0, &qword_269F38720, sub_255EB4558);
    sub_255EAEB60(a1, (uint64_t)&v8[*(int *)(v27 + 44)]);
    sub_255EA5F54((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))sub_255EB44C4);
    swift_storeEnumTagMultiPayload();
    sub_255EB6424(&qword_269F38718, (void (*)(uint64_t))sub_255EB44C4);
    sub_255DD84C8();
    sub_255EEEE00();
    sub_255EAF13C((uint64_t)v8, (uint64_t (*)(void))sub_255EB44C4);
  }
  uint64_t v28 = (void (*)(uint64_t))MEMORY[0x263F1A470];
  sub_255EB5F14((uint64_t)v19, (uint64_t)v17, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
  uint64_t v29 = v34;
  sub_255EB61FC((uint64_t)v13, v34, &qword_269F38550, (uint64_t (*)(uint64_t))sub_255EB44C4);
  uint64_t v30 = v35;
  sub_255EB5F14((uint64_t)v17, v35, (unint64_t *)&qword_269F35DF8, v28);
  sub_255EB4408();
  sub_255EB61FC(v29, v30 + *(int *)(v31 + 48), &qword_269F38550, (uint64_t (*)(uint64_t))sub_255EB44C4);
  sub_255EB627C((uint64_t)v13, &qword_269F38550, (uint64_t (*)(uint64_t))sub_255EB44C4);
  sub_255EB5F80((uint64_t)v19, (unint64_t *)&qword_269F35DF8, v28);
  sub_255EB627C(v29, &qword_269F38550, (uint64_t (*)(uint64_t))sub_255EB44C4);
  return sub_255EB5F80((uint64_t)v17, (unint64_t *)&qword_269F35DF8, v28);
}

uint64_t sub_255EAEB60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EditHeightCellView();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v4);
  sub_255E05F90();
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v13 = (char *)&v23 - v12;
  sub_255EADD24((uint64_t)&v23 - v12);
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(v5 + 28));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  sub_255EA5F54(a1, (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = swift_allocObject();
  sub_255EAF0D4((uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255EA5F54((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))sub_255E05F90);
  sub_255EA5F54((uint64_t)v11, a2, (uint64_t (*)(void))sub_255E05F90);
  sub_255EB458C();
  uint64_t v20 = a2 + *(int *)(v19 + 48);
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = (void *)(a2 + *(int *)(v19 + 64));
  *uint64_t v21 = v16;
  v21[1] = v15;
  uint64_t v21[2] = sub_255EB62F0;
  v21[3] = v18;
  swift_bridgeObjectRetain_n();
  swift_retain();
  sub_255EAF13C((uint64_t)v13, (uint64_t (*)(void))sub_255E05F90);
  swift_release();
  swift_bridgeObjectRelease();
  return sub_255EAF13C((uint64_t)v11, (uint64_t (*)(void))sub_255E05F90);
}

uint64_t sub_255EAEDBC(uint64_t (**a1)(void))
{
  if (*a1) {
    a1 = (uint64_t (**)(void))(*a1)();
  }
  MEMORY[0x270FA5388](a1);
  sub_255EEFB30();
  sub_255EEE7D0();
  return swift_release();
}

uint64_t sub_255EAEE60(uint64_t a1)
{
  uint64_t v1 = (char *)(a1 + *(int *)(type metadata accessor for EditHeightCellView() + 40));
  char v2 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  v11[0] = v2;
  uint64_t v12 = v3;
  char v13 = 0;
  sub_255EB5A1C(0, (unint64_t *)&qword_269F355F0, MEMORY[0x263F8D4F8], MEMORY[0x263F1B5D0]);
  sub_255EEF830();
  uint64_t v4 = MEMORY[0x263F8D8F0];
  sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v9 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(&v11[-v7], 1, 1, v8);
  MEMORY[0x270FA5388](v9);
  sub_255EA6038((uint64_t)&v11[-v7], (uint64_t)&v11[-v7], (uint64_t)&qword_269F352E8, v4, (uint64_t (*)(void, uint64_t, uint64_t))sub_255EB5120);
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  sub_255EEF980();
  return sub_255EAF074((uint64_t)&v11[-v7], (uint64_t)&qword_269F352E8, v4, (uint64_t (*)(void))sub_255EB5120);
}

uint64_t sub_255EAF074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_255EAF0D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255EAF13C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_255EAF19C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    uint64_t v8 = (void *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (*a2)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    uint64_t v9 = a3[5];
    uint64_t v140 = a1;
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v141 = a2;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v135 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    uint64_t v136 = v11;
    uint64_t v13 = v135[5];
    uint64_t v129 = v10;
    uint64_t v14 = &v10[v13];
    uint64_t v15 = &v11[v13];
    uint64_t v16 = *(void *)&v11[v13 + 8];
    *(void *)uint64_t v14 = *(void *)&v11[v13];
    *((void *)v14 + 1) = v16;
    uint64_t v18 = *(void *)&v11[v13 + 16];
    uint64_t v17 = *(void *)&v11[v13 + 24];
    *((void *)v14 + 2) = v18;
    *((void *)v14 + 3) = v17;
    uint64_t v19 = *((void *)v15 + 5);
    *((void *)v14 + 4) = *((void *)v15 + 4);
    *((void *)v14 + 5) = v19;
    uint64_t v20 = *((void *)v15 + 7);
    *((void *)v14 + 6) = *((void *)v15 + 6);
    *((void *)v14 + 7) = v20;
    uint64_t v21 = *((void *)v15 + 9);
    *((void *)v14 + 8) = *((void *)v15 + 8);
    *((void *)v14 + 9) = v21;
    uint64_t v22 = *((void *)v15 + 11);
    *((void *)v14 + 10) = *((void *)v15 + 10);
    *((void *)v14 + 11) = v22;
    uint64_t v131 = (void *)*((void *)v15 + 12);
    uint64_t v132 = (void *)*((void *)v15 + 13);
    *((void *)v14 + 12) = v131;
    *((void *)v14 + 13) = v132;
    uint64_t v134 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v23 = v134[13];
    __dst = &v14[v23];
    uint64_t v130 = &v15[v23];
    uint64_t v24 = sub_255EEE100();
    uint64_t v138 = *(void *)(v24 - 8);
    int v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v26 = v131;
    id v27 = v132;
    if (v25(v130, 1, v24))
    {
      sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v130, *(void *)(*(void *)(v28 - 8) + 64));
      uint64_t v29 = v138;
    }
    else
    {
      uint64_t v29 = v138;
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(__dst, v130, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(__dst, 0, 1, v24);
    }
    uint64_t v30 = v134[14];
    uint64_t v31 = &v14[v30];
    char v32 = &v15[v30];
    if (v25(&v15[v30], 1, v24))
    {
      sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v32, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v24);
    }
    uint64_t v34 = v134[15];
    uint64_t v35 = &v14[v34];
    uint64_t v36 = &v15[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v37;
    uint64_t v38 = v134[16];
    uint64_t v39 = &v14[v38];
    id v40 = &v15[v38];
    uint64_t v41 = *((void *)v40 + 1);
    *(void *)uint64_t v39 = *(void *)v40;
    *((void *)v39 + 1) = v41;
    v14[v134[17]] = v15[v134[17]];
    v14[v134[18]] = v15[v134[18]];
    uint64_t v42 = v134[19];
    uint64_t v43 = &v14[v42];
    uint64_t v44 = (uint64_t *)&v15[v42];
    unint64_t v45 = *(void *)&v15[v42 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v45 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    }
    else
    {
      uint64_t v46 = *v44;
      sub_255D80890(*v44, v45);
      *(void *)uint64_t v43 = v46;
      *((void *)v43 + 1) = v45;
    }
    uint64_t v47 = v134[20];
    uint64_t v48 = &v14[v47];
    uint64_t v49 = &v15[v47];
    uint64_t v50 = sub_255EEDF60();
    uint64_t v51 = *(void *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      sub_255EAFD58(0, &qword_269F350B8, MEMORY[0x270FA81A0], MEMORY[0x263F8D8F0]);
      memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    uint64_t v53 = v134[21];
    uint64_t v54 = *(void **)&v15[v53];
    *(void *)&v14[v53] = v54;
    uint64_t v55 = v134[22];
    uint64_t v56 = &v14[v55];
    uint64_t v57 = &v15[v55];
    id v58 = v54;
    if (v25(v57, 1, v24))
    {
      sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
      memcpy(v56, v57, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v56, v57, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v56, 0, 1, v24);
    }
    uint64_t v60 = v135[6];
    uint64_t v61 = &v129[v60];
    uint64_t v62 = &v136[v60];
    uint64_t v63 = sub_255EEE200();
    int v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16);
    v64(v61, v62, v63);
    uint64_t v65 = v135[7];
    uint64_t v66 = &v129[v65];
    uint64_t v67 = &v136[v65];
    v64(&v129[v65], &v136[v65], v63);
    uint64_t v68 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    uint64_t v69 = *(void **)&v67[v68];
    *(void *)&v66[v68] = v69;
    uint64_t v70 = v135[8];
    uint64_t v71 = &v129[v70];
    uint64_t v72 = &v136[v70];
    id v73 = v69;
    uint64_t v137 = v64;
    uint64_t v139 = v63;
    v64(v71, v72, v63);
    uint64_t v74 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v75 = *(int *)(v74 + 20);
    uint64_t v76 = *(void **)&v72[v75];
    *(void *)&v71[v75] = v76;
    uint64_t v77 = *(int *)(v74 + 24);
    uint64_t v78 = *(void **)&v72[v77];
    *(void *)&v71[v77] = v78;
    uint64_t v79 = a3[6];
    id v80 = (void *)((char *)v140 + v79);
    uint64_t v81 = (char *)v141 + v79;
    uint64_t v82 = *(void *)((char *)v141 + v79 + 8);
    *id v80 = *(void *)((char *)v141 + v79);
    v80[1] = v82;
    sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
    uint64_t v84 = *(int *)(v83 + 32);
    uint64_t v85 = (char *)v80 + v84;
    uint64_t v86 = &v81[v84];
    sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
    uint64_t v88 = v87;
    uint64_t v89 = *(void *)(v87 - 8);
    uint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
    id v91 = v76;
    id v92 = v78;
    swift_retain();
    swift_retain();
    if (v90(v86, 1, v88))
    {
      sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
      memcpy(v85, v86, *(void *)(*(void *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v85, v86, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v85, 0, 1, v88);
    }
    uint64_t v94 = a3[8];
    *(void *)((char *)v140 + a3[7]) = *(void *)((char *)v141 + a3[7]);
    uint64_t v95 = (void *)((char *)v140 + v94);
    uint64_t v96 = (void *)((char *)v141 + v94);
    uint64_t v97 = v96[1];
    void *v95 = *v96;
    v95[1] = v97;
    uint64_t v98 = a3[9];
    uint64_t v99 = a3[10];
    char v100 = (void *)((char *)v140 + v98);
    double v101 = (void *)((char *)v141 + v98);
    uint64_t v102 = v101[1];
    void *v100 = *v101;
    v100[1] = v102;
    id v103 = (char *)v140 + v99;
    uint64_t v104 = (char *)v141 + v99;
    char *v103 = *v104;
    *((void *)v103 + 1) = *((void *)v104 + 1);
    uint64_t v105 = a3[11];
    uint64_t v106 = (char *)v140 + v105;
    unint64_t v107 = (char *)v141 + v105;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v90(v107, 1, v88))
    {
      sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
      memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v106, v107, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v106, 0, 1, v88);
    }
    sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
    uint64_t v110 = v109;
    *(void *)&v106[*(int *)(v109 + 28)] = *(void *)&v107[*(int *)(v109 + 28)];
    uint64_t v111 = a3[12];
    uint64_t v112 = (char *)v140 + v111;
    uint64_t v113 = (char *)v141 + v111;
    swift_retain();
    if (v90(v113, 1, v88))
    {
      sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
      memcpy(v112, v113, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v112, v113, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v112, 0, 1, v88);
    }
    *(void *)&v112[*(int *)(v110 + 28)] = *(void *)&v113[*(int *)(v110 + 28)];
    uint64_t v115 = a3[13];
    long long v116 = (char *)v140 + v115;
    uint64_t v117 = (char *)v141 + v115;
    swift_retain();
    if (v90(v117, 1, v88))
    {
      sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
      memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v116, v117, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v116, 0, 1, v88);
    }
    *(void *)&v116[*(int *)(v110 + 28)] = *(void *)&v117[*(int *)(v110 + 28)];
    uint64_t v119 = a3[14];
    unint64_t v120 = (char *)v140 + v119;
    uint64_t v121 = (char *)v141 + v119;
    sub_255EAFD58(0, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v137(v120, v121, v139);
    }
    else
    {
      *(void *)unint64_t v120 = *(void *)v121;
      swift_retain();
    }
    uint64_t v8 = v140;
    swift_storeEnumTagMultiPayload();
    uint64_t v122 = a3[15];
    uint64_t v123 = (void *)((char *)v140 + v122);
    uint64_t v124 = (char *)v141 + v122;
    unint64_t v126 = *(void **)v124;
    uint64_t v125 = *((void *)v124 + 1);
    *uint64_t v123 = v126;
    v123[1] = v125;
    id v127 = v126;
  }
  return v8;
}

void sub_255EAFD58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255EAFDBC(void *a1, int *a2)
{
  if (*a1) {
    swift_release();
  }
  uint64_t v4 = (char *)a1 + a2[5];
  swift_bridgeObjectRelease();
  uint64_t v36 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v37 = v4;
  int v5 = &v4[v36[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v6 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v7 = &v5[v6[13]];
  uint64_t v8 = sub_255EEE100();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = &v5[v6[14]];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v39 = a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t *)&v5[v6[19]];
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    sub_255D80D04(*v12, v13);
  }
  uint64_t v14 = &v5[v6[20]];
  uint64_t v15 = sub_255EEDF60();
  uint64_t v16 = *(void *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }

  uint64_t v17 = &v5[v6[22]];
  if (!v10(v17, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  }
  uint64_t v18 = &v37[v36[6]];
  uint64_t v19 = sub_255EEE200();
  uint64_t v20 = *(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  uint64_t v21 = &v37[v36[7]];
  v20(v21, v19);

  uint64_t v22 = &v37[v36[8]];
  uint64_t v38 = v20;
  v20(v22, v19);
  uint64_t v23 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v24 = (char *)a1 + v39[6];
  swift_release();
  swift_release();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  id v26 = &v24[*(int *)(v25 + 32)];
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (!v30(v26, 1, v27)) {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v31 = (char *)a1 + v39[11];
  if (!v30(v31, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  swift_release();
  char v32 = (char *)a1 + v39[12];
  if (!v30(v32, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
  }
  swift_release();
  uint64_t v33 = (char *)a1 + v39[13];
  if (!v30(v33, 1, v28)) {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
  }
  swift_release();
  uint64_t v34 = (char *)a1 + v39[14];
  sub_255EAFD58(0, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v38(v34, v19);
  }
  else {
    swift_release();
  }
  uint64_t v35 = *(void **)((char *)a1 + v39[15]);
}

void *sub_255EB03C0(void *a1, void *a2, int *a3)
{
  if (*a2)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v6 = a3[5];
  uint64_t v137 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v138 = a2;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *((void *)v8 + 1);
  *(void *)uint64_t v7 = *(void *)v8;
  *((void *)v7 + 1) = v9;
  uint64_t v132 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v133 = v8;
  uint64_t v10 = v132[5];
  unint64_t v126 = v7;
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = *(void *)&v8[v10 + 8];
  *(void *)uint64_t v11 = *(void *)&v8[v10];
  *((void *)v11 + 1) = v13;
  uint64_t v15 = *(void *)&v8[v10 + 16];
  uint64_t v14 = *(void *)&v8[v10 + 24];
  *((void *)v11 + 2) = v15;
  *((void *)v11 + 3) = v14;
  uint64_t v16 = *((void *)v12 + 5);
  *((void *)v11 + 4) = *((void *)v12 + 4);
  *((void *)v11 + 5) = v16;
  uint64_t v17 = *((void *)v12 + 7);
  *((void *)v11 + 6) = *((void *)v12 + 6);
  *((void *)v11 + 7) = v17;
  uint64_t v18 = *((void *)v12 + 9);
  *((void *)v11 + 8) = *((void *)v12 + 8);
  *((void *)v11 + 9) = v18;
  uint64_t v19 = *((void *)v12 + 11);
  *((void *)v11 + 10) = *((void *)v12 + 10);
  *((void *)v11 + 11) = v19;
  uint64_t v128 = (void *)*((void *)v12 + 12);
  uint64_t v129 = (void *)*((void *)v12 + 13);
  *((void *)v11 + 12) = v128;
  *((void *)v11 + 13) = v129;
  uint64_t v131 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v20 = v131[13];
  __dst = &v11[v20];
  id v127 = &v12[v20];
  uint64_t v21 = sub_255EEE100();
  uint64_t v135 = *(void *)(v21 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v23 = v128;
  id v24 = v129;
  if (v22(v127, 1, v21))
  {
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v127, *(void *)(*(void *)(v25 - 8) + 64));
    uint64_t v26 = v135;
  }
  else
  {
    uint64_t v26 = v135;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(__dst, v127, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(__dst, 0, 1, v21);
  }
  uint64_t v27 = v131[14];
  uint64_t v28 = &v11[v27];
  uint64_t v29 = &v12[v27];
  if (v22(&v12[v27], 1, v21))
  {
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v21);
  }
  uint64_t v31 = v131[15];
  char v32 = &v11[v31];
  uint64_t v33 = &v12[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)char v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = v131[16];
  uint64_t v36 = &v11[v35];
  uint64_t v37 = &v12[v35];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  v11[v131[17]] = v12[v131[17]];
  v11[v131[18]] = v12[v131[18]];
  uint64_t v39 = v131[19];
  id v40 = &v11[v39];
  uint64_t v41 = (uint64_t *)&v12[v39];
  unint64_t v42 = *(void *)&v12[v39 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42 >> 60 == 15)
  {
    *(_OWORD *)id v40 = *(_OWORD *)v41;
  }
  else
  {
    uint64_t v43 = *v41;
    sub_255D80890(*v41, v42);
    *(void *)id v40 = v43;
    *((void *)v40 + 1) = v42;
  }
  uint64_t v44 = v131[20];
  unint64_t v45 = &v11[v44];
  uint64_t v46 = &v12[v44];
  uint64_t v47 = sub_255EEDF60();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    sub_255EAFD58(0, &qword_269F350B8, MEMORY[0x270FA81A0], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  uint64_t v50 = v131[21];
  uint64_t v51 = *(void **)&v12[v50];
  *(void *)&v11[v50] = v51;
  uint64_t v52 = v131[22];
  uint64_t v53 = &v11[v52];
  uint64_t v54 = &v12[v52];
  id v55 = v51;
  if (v22(v54, 1, v21))
  {
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v53, v54, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v53, 0, 1, v21);
  }
  uint64_t v57 = v132[6];
  id v58 = &v126[v57];
  uint64_t v59 = &v133[v57];
  uint64_t v60 = sub_255EEE200();
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16);
  v61(v58, v59, v60);
  uint64_t v62 = v132[7];
  uint64_t v63 = &v126[v62];
  int v64 = &v133[v62];
  v61(&v126[v62], &v133[v62], v60);
  uint64_t v65 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v66 = *(void **)&v64[v65];
  *(void *)&v63[v65] = v66;
  uint64_t v67 = v132[8];
  uint64_t v68 = &v126[v67];
  uint64_t v69 = &v133[v67];
  id v70 = v66;
  uint64_t v134 = v61;
  uint64_t v136 = v60;
  v61(v68, v69, v60);
  uint64_t v71 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v72 = *(int *)(v71 + 20);
  id v73 = *(void **)&v69[v72];
  *(void *)&v68[v72] = v73;
  uint64_t v74 = *(int *)(v71 + 24);
  uint64_t v75 = *(void **)&v69[v74];
  *(void *)&v68[v74] = v75;
  uint64_t v76 = a3[6];
  uint64_t v77 = (void *)((char *)v137 + v76);
  uint64_t v78 = (char *)v138 + v76;
  uint64_t v79 = *(void *)((char *)v138 + v76 + 8);
  void *v77 = *(void *)((char *)v138 + v76);
  v77[1] = v79;
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v81 = *(int *)(v80 + 32);
  uint64_t v82 = (char *)v77 + v81;
  uint64_t v83 = &v78[v81];
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v85 = v84;
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
  id v88 = v73;
  id v89 = v75;
  swift_retain();
  swift_retain();
  if (v87(v83, 1, v85))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v82, v83, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v82, v83, v85);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v82, 0, 1, v85);
  }
  uint64_t v91 = a3[8];
  *(void *)((char *)v137 + a3[7]) = *(void *)((char *)v138 + a3[7]);
  id v92 = (void *)((char *)v137 + v91);
  uint64_t v93 = (void *)((char *)v138 + v91);
  uint64_t v94 = v93[1];
  *id v92 = *v93;
  v92[1] = v94;
  uint64_t v95 = a3[9];
  uint64_t v96 = a3[10];
  uint64_t v97 = (void *)((char *)v137 + v95);
  uint64_t v98 = (void *)((char *)v138 + v95);
  uint64_t v99 = v98[1];
  void *v97 = *v98;
  v97[1] = v99;
  char v100 = (char *)v137 + v96;
  double v101 = (char *)v138 + v96;
  char *v100 = *v101;
  *((void *)v100 + 1) = *((void *)v101 + 1);
  uint64_t v102 = a3[11];
  id v103 = (char *)v137 + v102;
  uint64_t v104 = (char *)v138 + v102;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v87(v104, 1, v85))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v103, v104, v85);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v103, 0, 1, v85);
  }
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  uint64_t v107 = v106;
  *(void *)&v103[*(int *)(v106 + 28)] = *(void *)&v104[*(int *)(v106 + 28)];
  uint64_t v108 = a3[12];
  uint64_t v109 = (char *)v137 + v108;
  uint64_t v110 = (char *)v138 + v108;
  swift_retain();
  if (v87(v110, 1, v85))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v109, v110, v85);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v109, 0, 1, v85);
  }
  *(void *)&v109[*(int *)(v107 + 28)] = *(void *)&v110[*(int *)(v107 + 28)];
  uint64_t v112 = a3[13];
  uint64_t v113 = (char *)v137 + v112;
  uint64_t v114 = (char *)v138 + v112;
  swift_retain();
  if (v87(v114, 1, v85))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v113, v114, v85);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v113, 0, 1, v85);
  }
  *(void *)&v113[*(int *)(v107 + 28)] = *(void *)&v114[*(int *)(v107 + 28)];
  uint64_t v116 = a3[14];
  uint64_t v117 = (char *)v137 + v116;
  uint64_t v118 = (char *)v138 + v116;
  sub_255EAFD58(0, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v134(v117, v118, v136);
  }
  else
  {
    *(void *)uint64_t v117 = *(void *)v118;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v119 = a3[15];
  unint64_t v120 = (void *)((char *)v137 + v119);
  uint64_t v121 = (char *)v138 + v119;
  uint64_t v123 = *(void **)v121;
  uint64_t v122 = *((void *)v121 + 1);
  void *v120 = v123;
  v120[1] = v122;
  id v124 = v123;
  return v137;
}

void *sub_255EB0F2C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  if (*(void *)a1)
  {
    if (v6)
    {
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = v6;
      *((void *)a1 + 1) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v6)
  {
    uint64_t v8 = *((void *)a2 + 1);
    *(void *)a1 = v6;
    *((void *)a1 + 1) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v157 = a3;
  uint64_t v158 = a1;
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v159 = a2;
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)&a2[v9];
  *((void *)v10 + 1) = *(void *)&a2[v9 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v153 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v154 = v11;
  uint64_t v12 = v153[5];
  uint64_t v155 = v10;
  uint64_t v13 = &v10[v12];
  uint64_t v14 = &v11[v12];
  *(void *)uint64_t v13 = *(void *)&v11[v12];
  *((void *)v13 + 1) = *(void *)&v11[v12 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 2) = *((void *)v14 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 3) = *((void *)v14 + 3);
  *((void *)v13 + 4) = *((void *)v14 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 5) = *((void *)v14 + 5);
  *((void *)v13 + 6) = *((void *)v14 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 7) = *((void *)v14 + 7);
  *((void *)v13 + 8) = *((void *)v14 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 9) = *((void *)v14 + 9);
  *((void *)v13 + 10) = *((void *)v14 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v13 + 11) = *((void *)v14 + 11);
  uint64_t v15 = (void *)*((void *)v13 + 12);
  uint64_t v16 = (void *)*((void *)v14 + 12);
  *((void *)v13 + 12) = v16;
  id v17 = v16;

  uint64_t v18 = (void *)*((void *)v13 + 13);
  uint64_t v19 = (void *)*((void *)v14 + 13);
  *((void *)v13 + 13) = v19;
  id v20 = v19;

  uint64_t v21 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v22 = v21[13];
  id v23 = &v13[v22];
  id v24 = &v14[v22];
  uint64_t v25 = sub_255EEE100();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  uint64_t v156 = v27;
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_13:
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_14:
  uint64_t v31 = v21[14];
  char v32 = &v13[v31];
  uint64_t v33 = &v14[v31];
  int v34 = v27(&v13[v31], 1, v25);
  int v35 = v27(v33, 1, v25);
  uint64_t v151 = v25;
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v32, v33, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v32, 0, 1, v25);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v25);
LABEL_19:
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v32, v33, v25);
LABEL_20:
  uint64_t v37 = v21[15];
  uint64_t v38 = &v13[v37];
  uint64_t v39 = &v14[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = v21[16];
  uint64_t v41 = &v13[v40];
  unint64_t v42 = &v14[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13[v21[17]] = v14[v21[17]];
  v13[v21[18]] = v14[v21[18]];
  uint64_t v43 = v21[19];
  uint64_t v44 = (uint64_t *)&v13[v43];
  unint64_t v45 = (uint64_t *)&v14[v43];
  unint64_t v46 = *(void *)&v14[v43 + 8];
  if (*(void *)&v13[v43 + 8] >> 60 == 15)
  {
    if (v46 >> 60 != 15)
    {
      uint64_t v47 = *v45;
      sub_255D80890(*v45, v46);
      uint64_t *v44 = v47;
      v44[1] = v46;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v46 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v44);
LABEL_25:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_27;
  }
  uint64_t v48 = *v45;
  sub_255D80890(*v45, v46);
  uint64_t v49 = *v44;
  unint64_t v50 = v44[1];
  uint64_t *v44 = v48;
  v44[1] = v46;
  sub_255D80D04(v49, v50);
LABEL_27:
  uint64_t v51 = v21[20];
  uint64_t v52 = &v13[v51];
  uint64_t v53 = &v14[v51];
  uint64_t v54 = sub_255EEDF60();
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1, v54);
  int v58 = v56(v53, 1, v54);
  if (v57)
  {
    uint64_t v59 = v26;
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v59 = v26;
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v54);
LABEL_32:
    sub_255EAFD58(0, &qword_269F350B8, MEMORY[0x270FA81A0], MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 24))(v52, v53, v54);
LABEL_33:
  uint64_t v61 = v21[21];
  uint64_t v62 = *(void **)&v13[v61];
  uint64_t v63 = *(void **)&v14[v61];
  *(void *)&v13[v61] = v63;
  id v64 = v63;

  uint64_t v65 = v21[22];
  uint64_t v66 = &v13[v65];
  uint64_t v67 = &v14[v65];
  int v68 = v156(&v13[v65], 1, v151);
  int v69 = v156(v67, 1, v151);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v66, v67, v151);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v66, 0, 1, v151);
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v66, v151);
LABEL_38:
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v66, v67, v151);
LABEL_39:
  uint64_t v71 = v153[6];
  uint64_t v72 = &v155[v71];
  id v73 = &v154[v71];
  uint64_t v74 = sub_255EEE200();
  uint64_t v152 = *(void *)(v74 - 8);
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v152 + 24);
  v75(v72, v73, v74);
  uint64_t v76 = v153[7];
  uint64_t v77 = &v155[v76];
  uint64_t v78 = &v154[v76];
  v75(&v155[v76], &v154[v76], v74);
  uint64_t v79 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v80 = *(void **)&v78[v79];
  uint64_t v81 = *(void **)&v77[v79];
  *(void *)&v77[v79] = v80;
  id v82 = v80;

  uint64_t v83 = v153[8];
  uint64_t v84 = &v155[v83];
  uint64_t v85 = &v154[v83];
  v75(&v155[v83], &v154[v83], v74);
  uint64_t v86 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v87 = *(int *)(v86 + 20);
  id v88 = *(void **)&v85[v87];
  id v89 = *(void **)&v84[v87];
  *(void *)&v84[v87] = v88;
  id v90 = v88;

  uint64_t v91 = *(int *)(v86 + 24);
  id v92 = *(void **)&v85[v91];
  uint64_t v93 = *(void **)&v84[v91];
  *(void *)&v84[v91] = v92;
  id v94 = v92;

  uint64_t v95 = v157[6];
  uint64_t v96 = &v158[v95];
  uint64_t v97 = &v159[v95];
  *(void *)&v158[v95] = *(void *)&v159[v95];
  swift_retain();
  swift_release();
  *((void *)v96 + 1) = *((void *)v97 + 1);
  swift_retain();
  swift_release();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v99 = *(int *)(v98 + 32);
  char v100 = &v96[v99];
  double v101 = &v97[v99];
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v103 = v102;
  uint64_t v104 = *(void *)(v102 - 8);
  uint64_t v105 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 48);
  int v106 = v105(v100, 1, v102);
  int v107 = v105(v101, 1, v103);
  if (v106)
  {
    if (!v107)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v100, v101, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v100, 0, 1, v103);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v107)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v100, v103);
LABEL_44:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v100, v101, *(void *)(*(void *)(v108 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v100, v101, v103);
LABEL_45:
  *(void *)&v158[v157[7]] = *(void *)&v159[v157[7]];
  swift_retain();
  swift_release();
  uint64_t v109 = v157[8];
  uint64_t v110 = &v158[v109];
  uint64_t v111 = &v159[v109];
  *(void *)uint64_t v110 = *(void *)v111;
  *((void *)v110 + 1) = *((void *)v111 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v112 = v157[9];
  uint64_t v113 = &v158[v112];
  uint64_t v114 = &v159[v112];
  *(void *)&v158[v112] = *(void *)&v159[v112];
  swift_retain();
  swift_release();
  *((void *)v113 + 1) = *((void *)v114 + 1);
  swift_retain();
  swift_release();
  uint64_t v115 = v157[10];
  uint64_t v116 = &v158[v115];
  uint64_t v117 = &v159[v115];
  char *v116 = *v117;
  *((void *)v116 + 1) = *((void *)v117 + 1);
  swift_retain();
  swift_release();
  uint64_t v118 = v157[11];
  uint64_t v119 = &v158[v118];
  unint64_t v120 = &v159[v118];
  int v121 = v105(&v158[v118], 1, v103);
  int v122 = v105(v120, 1, v103);
  if (v121)
  {
    if (!v122)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v119, v120, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v119, 0, 1, v103);
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v122)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v119, v103);
LABEL_50:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
    goto LABEL_51;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v119, v120, v103);
LABEL_51:
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  uint64_t v125 = v124;
  *(void *)&v119[*(int *)(v124 + 28)] = *(void *)&v120[*(int *)(v124 + 28)];
  swift_retain();
  swift_release();
  uint64_t v126 = v157[12];
  id v127 = &v158[v126];
  uint64_t v128 = &v159[v126];
  int v129 = v105(&v158[v126], 1, v103);
  int v130 = v105(v128, 1, v103);
  if (v129)
  {
    if (!v130)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v127, v128, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v127, 0, 1, v103);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v130)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v127, v103);
LABEL_56:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v127, v128, v103);
LABEL_57:
  *(void *)&v127[*(int *)(v125 + 28)] = *(void *)&v128[*(int *)(v125 + 28)];
  swift_retain();
  swift_release();
  uint64_t v132 = v157[13];
  uint64_t v133 = &v158[v132];
  uint64_t v134 = &v159[v132];
  int v135 = v105(&v158[v132], 1, v103);
  int v136 = v105(v134, 1, v103);
  if (v135)
  {
    if (!v136)
    {
      (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v133, v134, v103);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v133, 0, 1, v103);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v136)
  {
    (*(void (**)(char *, uint64_t))(v104 + 8))(v133, v103);
LABEL_62:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v133, v134, v103);
LABEL_63:
  uint64_t v138 = v158;
  *(void *)&v133[*(int *)(v125 + 28)] = *(void *)&v134[*(int *)(v125 + 28)];
  swift_retain();
  swift_release();
  if (v158 != v159)
  {
    uint64_t v139 = v157[14];
    uint64_t v140 = &v158[v139];
    uint64_t v141 = &v159[v139];
    uint64_t v142 = (uint64_t (*)(uint64_t))MEMORY[0x270FA97D8];
    unint64_t v143 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255EB6198((uint64_t)&v158[v139], &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
    sub_255EAFD58(0, &qword_269F35320, v142, v143);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v140, v141, v74);
    }
    else
    {
      *(void *)uint64_t v140 = *(void *)v141;
      swift_retain();
    }
    uint64_t v138 = v158;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v144 = v157[15];
  uint64_t v145 = (void *)((char *)v138 + v144);
  uint64_t v146 = &v159[v144];
  uint64_t v147 = *(void **)((char *)v138 + v144);
  uint64_t v148 = *(void **)&v159[v144];
  *uint64_t v145 = *(void *)v146;
  id v149 = v148;

  v145[1] = *((void *)v146 + 1);
  return v138;
}

void *sub_255EB1F90(void *a1, char *a2, int *a3)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = &a2[v5];
  *(_OWORD *)((char *)a1 + v5) = *(_OWORD *)&a2[v5];
  uint64_t v84 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v85 = v7;
  uint64_t v8 = v84[5];
  uint64_t v86 = v6;
  uint64_t v9 = &v6[v8];
  uint64_t v10 = &v7[v8];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v7[v8];
  *((void *)v9 + 2) = *(void *)&v7[v8 + 16];
  *(_OWORD *)(v9 + 24) = *(_OWORD *)&v7[v8 + 24];
  *(_OWORD *)(v9 + 40) = *(_OWORD *)&v7[v8 + 40];
  *(_OWORD *)(v9 + 56) = *(_OWORD *)&v7[v8 + 56];
  *(_OWORD *)(v9 + 72) = *(_OWORD *)&v7[v8 + 72];
  *((void *)v9 + 11) = *(void *)&v7[v8 + 88];
  *((_OWORD *)v9 + 6) = *(_OWORD *)&v7[v8 + 96];
  uint64_t v11 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v12 = v11[13];
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_255EEE100();
  uint64_t v16 = *(void *)(v15 - 8);
  id v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = v11[14];
  id v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  id v82 = v17;
  uint64_t v83 = v16;
  if (v17(&v10[v19], 1, v15))
  {
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v21, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  *(_OWORD *)&v9[v11[15]] = *(_OWORD *)&v10[v11[15]];
  *(_OWORD *)&v9[v11[16]] = *(_OWORD *)&v10[v11[16]];
  v9[v11[17]] = v10[v11[17]];
  v9[v11[18]] = v10[v11[18]];
  *(_OWORD *)&v9[v11[19]] = *(_OWORD *)&v10[v11[19]];
  uint64_t v23 = v11[20];
  id v24 = &v9[v23];
  uint64_t v25 = &v10[v23];
  uint64_t v26 = sub_255EEDF60();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    sub_255EAFD58(0, &qword_269F350B8, MEMORY[0x270FA81A0], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  *(void *)&v9[v11[21]] = *(void *)&v10[v11[21]];
  uint64_t v29 = v11[22];
  uint64_t v30 = &v9[v29];
  uint64_t v31 = &v10[v29];
  if (v82(&v10[v29], 1, v15))
  {
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v30, v31, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v30, 0, 1, v15);
  }
  uint64_t v33 = v84[6];
  int v34 = v86;
  int v35 = &v86[v33];
  uint64_t v36 = &v85[v33];
  uint64_t v37 = sub_255EEE200();
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32);
  v38(v35, v36, v37);
  uint64_t v39 = v84[7];
  uint64_t v40 = &v86[v39];
  uint64_t v41 = &v85[v39];
  v38(&v86[v39], &v85[v39], v37);
  uint64_t v42 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v40[*(int *)(v42 + 20)] = *(void *)&v41[*(int *)(v42 + 20)];
  uint64_t v43 = v84[8];
  uint64_t v44 = &v86[v43];
  unint64_t v45 = &v85[v43];
  uint64_t v87 = v38;
  v38(&v34[v43], &v85[v43], v37);
  uint64_t v46 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v44[*(int *)(v46 + 20)] = *(void *)&v45[*(int *)(v46 + 20)];
  *(void *)&v44[*(int *)(v46 + 24)] = *(void *)&v45[*(int *)(v46 + 24)];
  uint64_t v47 = a3[6];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = &a2[v47];
  uint64_t v50 = *(void *)&a2[v47 + 8];
  *uint64_t v48 = *(void *)&a2[v47];
  v48[1] = v50;
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v52 = *(int *)(v51 + 32);
  uint64_t v53 = (char *)v48 + v52;
  uint64_t v54 = &v49[v52];
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v56 = v55;
  uint64_t v57 = *(void *)(v55 - 8);
  int v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  if (v58(v54, 1, v55))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v53, v54, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v54, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
  }
  uint64_t v60 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  *(_OWORD *)((char *)a1 + v60) = *(_OWORD *)&a2[v60];
  uint64_t v61 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)((char *)a1 + v61) = *(_OWORD *)&a2[v61];
  uint64_t v62 = a3[11];
  uint64_t v63 = (char *)a1 + v62;
  id v64 = &a2[v62];
  if (v58(&a2[v62], 1, v56))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v63, v64, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v63, 0, 1, v56);
  }
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  uint64_t v67 = v66;
  *(void *)&v63[*(int *)(v66 + 28)] = *(void *)&v64[*(int *)(v66 + 28)];
  uint64_t v68 = a3[12];
  int v69 = (char *)a1 + v68;
  uint64_t v70 = &a2[v68];
  if (v58(&a2[v68], 1, v56))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v69, v70, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v69, 0, 1, v56);
  }
  *(void *)&v69[*(int *)(v67 + 28)] = *(void *)&v70[*(int *)(v67 + 28)];
  uint64_t v72 = a3[13];
  id v73 = (char *)a1 + v72;
  uint64_t v74 = &a2[v72];
  if (v58(&a2[v72], 1, v56))
  {
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v73, v74, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v73, 0, 1, v56);
  }
  *(void *)&v73[*(int *)(v67 + 28)] = *(void *)&v74[*(int *)(v67 + 28)];
  uint64_t v76 = a3[14];
  uint64_t v77 = (char *)a1 + v76;
  uint64_t v78 = &a2[v76];
  sub_255EAFD58(0, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
  uint64_t v80 = v79;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v87(v77, v78, v37);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v77, v78, *(void *)(*(void *)(v80 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)&a2[a3[15]];
  return a1;
}

void *sub_255EB29A0(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *(void *)a2;
  if (*(void *)a1)
  {
    if (v5)
    {
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a1 = v5;
      *((void *)a1 + 1) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a1 = v5;
    *((void *)a1 + 1) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v8 = a3[5];
  uint64_t v155 = a1;
  uint64_t v156 = a2;
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 8];
  *(void *)uint64_t v9 = *(void *)&a2[v8];
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v152 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v153 = v10;
  uint64_t v12 = v152[5];
  uint64_t v154 = v9;
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  *((void *)v13 + 2) = *((void *)v14 + 2);
  swift_bridgeObjectRelease();
  uint64_t v16 = *((void *)v14 + 4);
  *((void *)v13 + 3) = *((void *)v14 + 3);
  *((void *)v13 + 4) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)v14 + 6);
  *((void *)v13 + 5) = *((void *)v14 + 5);
  *((void *)v13 + 6) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)v14 + 8);
  *((void *)v13 + 7) = *((void *)v14 + 7);
  *((void *)v13 + 8) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *((void *)v14 + 10);
  *((void *)v13 + 9) = *((void *)v14 + 9);
  *((void *)v13 + 10) = v19;
  swift_bridgeObjectRelease();
  id v20 = (void *)*((void *)v13 + 12);
  uint64_t v21 = *((void *)v14 + 12);
  *((void *)v13 + 11) = *((void *)v14 + 11);
  *((void *)v13 + 12) = v21;

  uint64_t v22 = (void *)*((void *)v13 + 13);
  *((void *)v13 + 13) = *((void *)v14 + 13);

  uint64_t v23 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v24 = v23[13];
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  uint64_t v27 = sub_255EEE100();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_13:
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
LABEL_14:
  uint64_t v33 = v23[14];
  int v34 = &v13[v33];
  int v35 = &v14[v33];
  int v36 = v29(&v13[v33], 1, v27);
  int v37 = v29(v35, 1, v27);
  uint64_t v150 = v27;
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v34, v35, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v34, 0, 1, v27);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
LABEL_19:
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v34, v35, v27);
LABEL_20:
  uint64_t v39 = v23[15];
  uint64_t v40 = &v13[v39];
  uint64_t v41 = &v14[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v23[16];
  unint64_t v45 = &v13[v44];
  uint64_t v46 = &v14[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)unint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  v13[v23[17]] = v14[v23[17]];
  v13[v23[18]] = v14[v23[18]];
  uint64_t v49 = v23[19];
  uint64_t v50 = (uint64_t)&v13[v49];
  uint64_t v51 = &v14[v49];
  unint64_t v52 = *(void *)&v13[v49 + 8];
  uint64_t v149 = v28;
  uint64_t v147 = v29;
  if (v52 >> 60 == 15)
  {
LABEL_23:
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    goto LABEL_25;
  }
  unint64_t v53 = *((void *)v51 + 1);
  if (v53 >> 60 == 15)
  {
    sub_255D81EF8(v50);
    goto LABEL_23;
  }
  uint64_t v54 = *(void *)v50;
  *(void *)uint64_t v50 = *(void *)v51;
  *(void *)(v50 + 8) = v53;
  sub_255D80D04(v54, v52);
LABEL_25:
  uint64_t v148 = v23;
  uint64_t v55 = v23[20];
  uint64_t v56 = &v13[v55];
  uint64_t v57 = &v14[v55];
  uint64_t v58 = sub_255EEDF60();
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
LABEL_30:
    sub_255EAFD58(0, &qword_269F350B8, MEMORY[0x270FA81A0], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
LABEL_31:
  uint64_t v64 = v148[21];
  uint64_t v65 = *(void **)&v13[v64];
  *(void *)&v13[v64] = *(void *)&v14[v64];

  uint64_t v66 = v148[22];
  uint64_t v67 = &v13[v66];
  uint64_t v68 = &v14[v66];
  int v69 = v147(&v13[v66], 1, v150);
  int v70 = v147(v68, 1, v150);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v67, v68, v150);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v67, 0, 1, v150);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v149 + 8))(v67, v150);
LABEL_36:
    sub_255EAFD58(0, &qword_269F35058, MEMORY[0x270FA92F8], MEMORY[0x263F8D8F0]);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v149 + 40))(v67, v68, v150);
LABEL_37:
  uint64_t v72 = v152[6];
  id v73 = &v154[v72];
  uint64_t v74 = &v153[v72];
  uint64_t v75 = sub_255EEE200();
  uint64_t v151 = *(void *)(v75 - 8);
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v151 + 40);
  v76(v73, v74, v75);
  uint64_t v77 = v152[7];
  uint64_t v78 = &v154[v77];
  uint64_t v79 = &v153[v77];
  v76(&v154[v77], &v153[v77], v75);
  uint64_t v80 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v81 = *(void **)&v78[v80];
  *(void *)&v78[v80] = *(void *)&v79[v80];

  uint64_t v82 = v152[8];
  uint64_t v83 = &v154[v82];
  uint64_t v84 = &v153[v82];
  v76(&v154[v82], &v153[v82], v75);
  uint64_t v85 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v86 = *(int *)(v85 + 20);
  uint64_t v87 = *(void **)&v83[v86];
  *(void *)&v83[v86] = *(void *)&v84[v86];

  uint64_t v88 = *(int *)(v85 + 24);
  id v89 = *(void **)&v83[v88];
  *(void *)&v83[v88] = *(void *)&v84[v88];

  uint64_t v90 = a3[6];
  uint64_t v91 = &v155[v90];
  id v92 = &v156[v90];
  *(void *)&v155[v90] = *(void *)&v156[v90];
  swift_release();
  *((void *)v91 + 1) = *((void *)v92 + 1);
  swift_release();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v94 = *(int *)(v93 + 32);
  uint64_t v95 = &v91[v94];
  uint64_t v96 = &v92[v94];
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v98 = v97;
  uint64_t v99 = *(void *)(v97 - 8);
  char v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
  int v101 = v100(v95, 1, v97);
  int v102 = v100(v96, 1, v98);
  if (v101)
  {
    if (!v102)
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v95, v96, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v95, 0, 1, v98);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v102)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v95, v98);
LABEL_42:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v95, v96, *(void *)(*(void *)(v103 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v95, v96, v98);
LABEL_43:
  *(void *)&v155[a3[7]] = *(void *)&v156[a3[7]];
  swift_release();
  uint64_t v104 = a3[8];
  uint64_t v105 = &v155[v104];
  int v106 = (uint64_t *)&v156[v104];
  uint64_t v108 = *v106;
  uint64_t v107 = v106[1];
  *(void *)uint64_t v105 = v108;
  *((void *)v105 + 1) = v107;
  swift_bridgeObjectRelease();
  uint64_t v109 = a3[9];
  uint64_t v110 = &v155[v109];
  uint64_t v111 = &v156[v109];
  *(void *)&v155[v109] = *(void *)&v156[v109];
  swift_release();
  *((void *)v110 + 1) = *((void *)v111 + 1);
  swift_release();
  uint64_t v112 = a3[10];
  uint64_t v113 = &v155[v112];
  uint64_t v114 = &v156[v112];
  char *v113 = *v114;
  *((void *)v113 + 1) = *((void *)v114 + 1);
  swift_release();
  uint64_t v115 = a3[11];
  uint64_t v116 = &v155[v115];
  uint64_t v117 = &v156[v115];
  LODWORD(v110) = v100(&v155[v115], 1, v98);
  int v118 = v100(v117, 1, v98);
  if (v110)
  {
    if (!v118)
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v116, v117, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v116, 0, 1, v98);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v118)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v116, v98);
LABEL_48:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v116, v117, *(void *)(*(void *)(v119 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v116, v117, v98);
LABEL_49:
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  uint64_t v121 = v120;
  *(void *)&v116[*(int *)(v120 + 28)] = *(void *)&v117[*(int *)(v120 + 28)];
  swift_release();
  uint64_t v122 = a3[12];
  uint64_t v123 = &v155[v122];
  uint64_t v124 = &v156[v122];
  int v125 = v100(&v155[v122], 1, v98);
  int v126 = v100(v124, 1, v98);
  if (v125)
  {
    if (!v126)
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v123, v124, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v123, 0, 1, v98);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v126)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v123, v98);
LABEL_54:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v123, v124, *(void *)(*(void *)(v127 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v123, v124, v98);
LABEL_55:
  *(void *)&v123[*(int *)(v121 + 28)] = *(void *)&v124[*(int *)(v121 + 28)];
  swift_release();
  uint64_t v128 = a3[13];
  int v129 = &v155[v128];
  int v130 = &v156[v128];
  int v131 = v100(&v155[v128], 1, v98);
  int v132 = v100(v130, 1, v98);
  if (v131)
  {
    if (!v132)
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v129, v130, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v129, 0, 1, v98);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v132)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v129, v98);
LABEL_60:
    sub_255EB5120(0, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    memcpy(v129, v130, *(void *)(*(void *)(v133 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v129, v130, v98);
LABEL_61:
  uint64_t v134 = v155;
  *(void *)&v129[*(int *)(v121 + 28)] = *(void *)&v130[*(int *)(v121 + 28)];
  swift_release();
  if (v155 != v156)
  {
    uint64_t v135 = a3[14];
    int v136 = &v155[v135];
    uint64_t v137 = &v156[v135];
    uint64_t v138 = (uint64_t (*)(uint64_t))MEMORY[0x270FA97D8];
    uint64_t v139 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
    sub_255EB6198((uint64_t)&v155[v135], &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
    sub_255EAFD58(0, &qword_269F35320, v138, v139);
    uint64_t v141 = v140;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v136, v137, v75);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v136, v137, *(void *)(*(void *)(v141 - 8) + 64));
    }
    uint64_t v134 = v155;
  }
  uint64_t v142 = a3[15];
  unint64_t v143 = (void *)((char *)v134 + v142);
  uint64_t v144 = &v156[v142];
  uint64_t v145 = *(void **)((char *)v134 + v142);
  void *v143 = *(void *)v144;

  v143[1] = *((void *)v144 + 1);
  return v134;
}

uint64_t sub_255EB38D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255EB38EC);
}

uint64_t sub_255EB38EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDBiometricsViewModel();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v14(a1 + v9, a2, v7);
  }
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_11;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[7]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
    {
      uint64_t v7 = v13;
      uint64_t v8 = *(void *)(v13 - 8);
      uint64_t v9 = a3[11];
      goto LABEL_11;
    }
    sub_255EAFD58(0, &qword_269F35338, MEMORY[0x270FA97D8], MEMORY[0x263F185D0]);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[14];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_255EB3B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255EB3B24);
}

void sub_255EB3B24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MedicalIDBiometricsViewModel();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v14(a1 + v11, a2, a2, v9);
    return;
  }
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[7]) = (a2 - 1);
    return;
  }
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_9;
  }
  sub_255EAFD58(0, &qword_269F35338, MEMORY[0x270FA97D8], MEMORY[0x263F185D0]);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[14];
  v16(v18, a2, a2, v17);
}

void sub_255EB3D48()
{
  type metadata accessor for MedicalIDBiometricsViewModel();
  if (v0 <= 0x3F)
  {
    sub_255EA5FBC(319, &qword_269F384C0, MEMORY[0x263F1B750]);
    if (v1 <= 0x3F)
    {
      sub_255EA5FBC(319, &qword_269F384C8, MEMORY[0x263F1B5D0]);
      if (v2 <= 0x3F)
      {
        sub_255EAFD58(319, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_255EB3F10()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255EB3F2C()
{
  if (!qword_269F384E0)
  {
    sub_255EB402C(255);
    sub_255EB42F8(255);
    sub_255EB6424(&qword_269F38580, sub_255EB402C);
    sub_255EB56B4(&qword_269F38588, sub_255EB42F8, (void (*)(void))sub_255EB45FC, (void (*)(void))sub_255D855C4);
    unint64_t v0 = type metadata accessor for MedicalIDAXLayoutView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F384E0);
    }
  }
}

void sub_255EB402C(uint64_t a1)
{
}

void sub_255EB4068(uint64_t a1)
{
}

void sub_255EB409C()
{
  if (!qword_269F384F8)
  {
    sub_255EB5214(255, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    sub_255EB6394(255, &qword_269F38500, (uint64_t (*)(uint64_t))sub_255EB4160, MEMORY[0x263F19B28]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F384F8);
    }
  }
}

void sub_255EB4160(uint64_t a1)
{
}

void sub_255EB419C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_255EB6424(a4, a5);
    unint64_t v8 = sub_255EEF8C0();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255EB4230(uint64_t a1)
{
}

void sub_255EB4264()
{
  if (!qword_269F38518)
  {
    sub_255E05F90();
    sub_255EB5A1C(255, &qword_269F36F38, (uint64_t)&type metadata for ClearButtonView, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F38518);
    }
  }
}

void sub_255EB42F8(uint64_t a1)
{
}

void sub_255EB4340()
{
  if (!qword_269F38538)
  {
    sub_255EB43D4(255);
    sub_255EB6424(&qword_269F38578, sub_255EB43D4);
    unint64_t v0 = sub_255EEF950();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38538);
    }
  }
}

void sub_255EB43D4(uint64_t a1)
{
}

void sub_255EB4408()
{
  if (!qword_269F38548)
  {
    sub_255EB5214(255, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    sub_255EB6394(255, &qword_269F38550, (uint64_t (*)(uint64_t))sub_255EB44C4, MEMORY[0x263F19B28]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F38548);
    }
  }
}

void sub_255EB44C4()
{
  if (!qword_269F38558)
  {
    sub_255EB4558(255);
    sub_255EB6424(&qword_269F38570, sub_255EB4558);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38558);
    }
  }
}

void sub_255EB4558(uint64_t a1)
{
}

void sub_255EB458C()
{
  if (!qword_269F38568)
  {
    sub_255E05F90();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F38568);
    }
  }
}

uint64_t sub_255EB45FC()
{
  return sub_255EB6424(&qword_269F38590, (void (*)(uint64_t))sub_255EB4340);
}

void sub_255EB4630()
{
  if (!qword_269F38598)
  {
    sub_255EB3F2C();
    sub_255EB5D10(255, (unint64_t *)&qword_269F36AE0, (uint64_t (*)(void))sub_255DA6CF8, MEMORY[0x263F1BA90], MEMORY[0x263F19D88]);
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38598);
    }
  }
}

void sub_255EB46D0()
{
  if (!qword_269F385A0)
  {
    sub_255EB4808();
    sub_255EB4630();
    sub_255EEE200();
    sub_255EB56B4(&qword_269F385B0, (void (*)(uint64_t))sub_255EB4630, (void (*)(void))sub_255EB4908, (void (*)(void))sub_255EB493C);
    sub_255EB5AD8((unint64_t *)&qword_269F36C10, MEMORY[0x270FA97C0]);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F385A0);
    }
  }
}

void sub_255EB4808()
{
  if (!qword_269F385A8)
  {
    sub_255EB4630();
    sub_255EEE200();
    sub_255EB56B4(&qword_269F385B0, (void (*)(uint64_t))sub_255EB4630, (void (*)(void))sub_255EB4908, (void (*)(void))sub_255EB493C);
    sub_255EB5AD8((unint64_t *)&qword_269F36C10, MEMORY[0x270FA97C0]);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F385A8);
    }
  }
}

uint64_t sub_255EB4908()
{
  return sub_255EB6424(&qword_269F385B8, (void (*)(uint64_t))sub_255EB3F2C);
}

unint64_t sub_255EB493C()
{
  unint64_t result = qword_269F36AF8[0];
  if (!qword_269F36AF8[0])
  {
    sub_255EB5D10(255, (unint64_t *)&qword_269F36AE0, (uint64_t (*)(void))sub_255DA6CF8, MEMORY[0x263F1BA90], MEMORY[0x263F19D88]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269F36AF8);
  }
  return result;
}

uint64_t sub_255EB49D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for EditHeightCellView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_255EA7354(v4, a1);
}

void sub_255EB4A44(uint64_t a1@<X8>)
{
}

uint64_t sub_255EB4AB4()
{
  return sub_255EB6B68(sub_255EA7624);
}

uint64_t sub_255EB4AD0()
{
  return sub_255EB6B68((uint64_t (*)(uint64_t))sub_255EA77F4);
}

void sub_255EB4AE8()
{
  if (!qword_269F385C0)
  {
    sub_255EB4DE8(255, &qword_269F385C8, (uint64_t (*)(uint64_t))sub_255EB4B84, (uint64_t (*)(uint64_t))sub_255EB4CB8, MEMORY[0x263F19B28]);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F385C0);
    }
  }
}

void sub_255EB4B84()
{
  if (!qword_269F385D0)
  {
    sub_255EB4C18(255);
    sub_255EB6424(&qword_269F386C8, sub_255EB4C18);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F385D0);
    }
  }
}

void sub_255EB4C18(uint64_t a1)
{
}

void sub_255EB4C4C()
{
  if (!qword_269F385E0)
  {
    sub_255EB4CB8();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F385E0);
    }
  }
}

void sub_255EB4CB8()
{
  if (!qword_269F385E8)
  {
    sub_255EB4DE8(255, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    sub_255EB5838();
    sub_255EB5974(&qword_269F386B8, &qword_269F386C0);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F385E8);
    }
  }
}

void sub_255EB4DE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_255EB4E6C()
{
  if (!qword_269F385F8)
  {
    sub_255EB4F40();
    sub_255EEE9A0();
    sub_255EB6424(&qword_269F386A8, (void (*)(uint64_t))sub_255EB4F40);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F385F8);
    }
  }
}

void sub_255EB4F40()
{
  if (!qword_269F38600)
  {
    sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    sub_255EB5028();
    sub_255EB5974(&qword_269F38638, &qword_269F38640);
    sub_255EB5600();
    unint64_t v0 = sub_255EEF910();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38600);
    }
  }
}

void sub_255EB5028()
{
  if (!qword_269F38608)
  {
    sub_255EB5120(255, &qword_269F38610, MEMORY[0x263F8D488]);
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x270FA7EB8];
    sub_255EA5EDC(255, &qword_269F352D8, MEMORY[0x270FA7EB8]);
    sub_255EB5190();
    sub_255EB558C();
    sub_255EB5D78(&qword_269F38640, &qword_269F352D8, v0);
    unint64_t v1 = sub_255EEFA20();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_269F38608);
    }
  }
}

void sub_255EB5120(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255EA5EDC(255, &qword_269F352D8, MEMORY[0x270FA7EB8]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_255EB5190()
{
  if (!qword_269F38618)
  {
    sub_255EB5214(255, &qword_269F38620, (void (*)(uint64_t))sub_255EB5270);
    sub_255EB542C();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38618);
    }
  }
}

void sub_255EB5214(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255EB5270()
{
  if (!qword_269F38628)
  {
    uint64_t v0 = MEMORY[0x263F19090];
    sub_255EB5324(255, &qword_269F38630, MEMORY[0x263F19090]);
    sub_255EB53D8(&qword_269F38648, (uint64_t)&qword_269F38630, v0, (void (*)(uint64_t))sub_255EB5324);
    unint64_t v1 = sub_255EEEF00();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_269F38628);
    }
  }
}

void sub_255EB5324(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    uint64_t v7 = v6;
    uint64_t v8 = sub_255EB5974(&qword_269F38638, &qword_269F38640);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_255EB53D8(unint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a4(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255EB542C()
{
  if (!qword_269F38650)
  {
    uint64_t v0 = MEMORY[0x263F19090];
    sub_255EB5E8C(255, &qword_269F38658, MEMORY[0x263F19090]);
    sub_255EB53D8(&qword_269F38670, (uint64_t)&qword_269F38658, v0, (void (*)(uint64_t))sub_255EB5E8C);
    unint64_t v1 = sub_255EEEF00();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_269F38650);
    }
  }
}

unint64_t sub_255EB54E0()
{
  unint64_t result = qword_269F38668;
  if (!qword_269F38668)
  {
    sub_255EA5FBC(255, &qword_269F38660, MEMORY[0x263F8D8F0]);
    sub_255EB5974(&qword_269F38638, &qword_269F38640);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38668);
  }
  return result;
}

unint64_t sub_255EB558C()
{
  unint64_t result = qword_269F38678;
  if (!qword_269F38678)
  {
    sub_255EB5120(255, &qword_269F38610, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38678);
  }
  return result;
}

unint64_t sub_255EB5600()
{
  unint64_t result = qword_269F38680;
  if (!qword_269F38680)
  {
    sub_255EB5028();
    sub_255EB56B4(&qword_269F38688, (void (*)(uint64_t))sub_255EB5190, (void (*)(void))sub_255EB5740, (void (*)(void))sub_255EB5804);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38680);
  }
  return result;
}

uint64_t sub_255EB56B4(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255EB5740()
{
  unint64_t result = qword_269F38690;
  if (!qword_269F38690)
  {
    sub_255EB5214(255, &qword_269F38620, (void (*)(uint64_t))sub_255EB5270);
    sub_255EB6424(&qword_269F38698, (void (*)(uint64_t))sub_255EB5270);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38690);
  }
  return result;
}

uint64_t sub_255EB5804()
{
  return sub_255EB6424(&qword_269F386A0, (void (*)(uint64_t))sub_255EB542C);
}

unint64_t sub_255EB5838()
{
  unint64_t result = qword_269F386B0;
  if (!qword_269F386B0)
  {
    sub_255EB4DE8(255, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
    sub_255EB4F40();
    sub_255EEE9A0();
    sub_255EB6424(&qword_269F386A8, (void (*)(uint64_t))sub_255EB4F40);
    swift_getOpaqueTypeConformance2();
    sub_255D855C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F386B0);
  }
  return result;
}

uint64_t sub_255EB5974(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255EB5120(255, &qword_269F352E8, MEMORY[0x263F8D8F0]);
    sub_255EB5D78(a2, &qword_269F352D8, MEMORY[0x270FA7EB8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255EB5A1C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255EB5A68()
{
  if (!qword_269F386D0)
  {
    sub_255EB46D0();
    sub_255EB4AE8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F386D0);
    }
  }
}

uint64_t sub_255EB5AD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255EB5B20(uint64_t a1, uint64_t a2)
{
  sub_255EB4DE8(0, &qword_269F385C8, (uint64_t (*)(uint64_t))sub_255EB4B84, (uint64_t (*)(uint64_t))sub_255EB4CB8, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_255EB5BC8()
{
  return sub_255EAADCC(*(void *)(v0 + 16));
}

uint64_t sub_255EB5BD8(uint64_t a1)
{
  sub_255EB4DE8(0, &qword_269F385F0, (uint64_t (*)(uint64_t))sub_255EB4E6C, MEMORY[0x263F1A470], MEMORY[0x263F18E28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255EB5C78()
{
  return sub_255EABD30(*(void *)(v0 + 16));
}

void sub_255EB5C8C()
{
  if (!qword_269F38428)
  {
    sub_255EB5D10(255, (unint64_t *)&qword_269F38430, (uint64_t (*)(void))sub_255E9F044, MEMORY[0x263F8D538], MEMORY[0x270FA8BF8]);
    unint64_t v0 = sub_255EF01E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38428);
    }
  }
}

void sub_255EB5D10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_255EB5D78(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_255EA5EDC(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255EB5DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_255EB5E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_255EB5E8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    sub_255EA5FBC(255, &qword_269F38660, MEMORY[0x263F8D8F0]);
    uint64_t v7 = v6;
    unint64_t v8 = sub_255EB54E0();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_255EB5F14(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_255EB5214(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_255EB5F80(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_255EB5214(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255EB5FE0@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  return sub_255EAC0A8(a1, a2);
}

uint64_t sub_255EB6054()
{
  return sub_255EAC930(*(void *)(v0 + 16));
}

uint64_t sub_255EB6060()
{
  uint64_t v1 = *(void *)(type metadata accessor for EditHeightCellView() - 8);
  uint64_t v2 = *(void (**)(void))(v0
                        + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  if (v2) {
    v2();
  }
  return sub_255EAB144();
}

uint64_t sub_255EB60D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for EditHeightCellView();
  return sub_255EACCB8(a1, a2);
}

uint64_t sub_255EB6158()
{
  return sub_255EA7A4C();
}

uint64_t sub_255EB6178()
{
  return sub_255EB6B68(sub_255EA7B24);
}

uint64_t sub_255EB6198(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_255EAFD58(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_255EB61FC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_255EB6394(0, a3, a4, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_255EB627C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_255EB6394(0, a2, a3, MEMORY[0x263F19B28]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255EB62F0()
{
  return sub_255EB6B68((uint64_t (*)(uint64_t))sub_255EAEDBC);
}

uint64_t sub_255EB6308()
{
  return sub_255EAEE60(*(void *)(v0 + 16));
}

uint64_t sub_255EB6324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_255EB6394(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    sub_255EB5214(255, (unint64_t *)&qword_269F35DF8, MEMORY[0x263F1A470]);
    unint64_t v9 = a4(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_255EB6424(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255EB646C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE7B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t objectdestroyTm_22()
{
  uint64_t v1 = type metadata accessor for EditHeightCellView();
  uint64_t v35 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (void *)(v0 + ((v35 + 16) & ~v35));
  if (*v2) {
    swift_release();
  }
  uint64_t v3 = (char *)v2 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  int v36 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  int v37 = v3;
  unint64_t v4 = &v3[v36[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = &v4[v5[13]];
  uint64_t v7 = sub_255EEE100();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = &v4[v5[14]];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v39 = (int *)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)&v4[v5[19]];
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_255D80D04(*v11, v12);
  }
  uint64_t v13 = &v4[v5[20]];
  uint64_t v14 = sub_255EEDF60();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }

  uint64_t v16 = &v4[v5[22]];
  if (!v9(v16, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }
  uint64_t v17 = &v37[v36[6]];
  uint64_t v18 = sub_255EEE200();
  uint64_t v19 = *(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(v17, v18);
  id v20 = &v37[v36[7]];
  v19(v20, v18);

  uint64_t v21 = &v37[v36[8]];
  uint64_t v38 = v19;
  v19(v21, v18);
  uint64_t v22 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v23 = (char *)v2 + v39[6];
  swift_release();
  swift_release();
  sub_255EA5FBC(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  uint64_t v25 = &v23[*(int *)(v24 + 32)];
  sub_255EA5EDC(0, &qword_269F352D8, MEMORY[0x270FA7EB8]);
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (!v29(v25, 1, v26)) {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  int v30 = (char *)v2 + v39[11];
  if (!v29(v30, 1, v27)) {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  sub_255EA5FBC(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  swift_release();
  int v31 = (char *)v2 + v39[12];
  if (!v29(v31, 1, v27)) {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
  }
  swift_release();
  uint64_t v32 = (char *)v2 + v39[13];
  if (!v29(v32, 1, v27)) {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
  }
  swift_release();
  uint64_t v33 = (char *)v2 + v39[14];
  sub_255EAFD58(0, &qword_269F35320, MEMORY[0x270FA97D8], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v38(v33, v18);
  }
  else {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_255EB6B68(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for EditHeightCellView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

uint64_t sub_255EB6BDC()
{
  return sub_255EB6424(&qword_269F38748, sub_255EB6C24);
}

void sub_255EB6C24(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for HorizontalTitleDetailLabelView()
{
  return &type metadata for HorizontalTitleDetailLabelView;
}

uint64_t sub_255EB6C68()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_255EB6C84@<X0>(uint64_t a1@<X8>)
{
  sub_255DAD520();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_255EEF3D0();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  sub_255EEF200();
  uint64_t v7 = sub_255EEF3B0();
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  char v10 = v9;
  uint64_t v32 = v11;
  swift_release();
  char v29 = v10 & 1;
  sub_255D85120(v2, v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_255EEF3D0();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  sub_255EEF1F0();
  uint64_t v17 = sub_255EEF3B0();
  uint64_t v19 = v18;
  LOBYTE(v2) = v20;
  swift_release();
  sub_255D85120(v12, v14, v16);
  swift_bridgeObjectRelease();
  sub_255EEEF30();
  uint64_t v21 = sub_255EEF370();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  sub_255D85120(v17, v19, v2 & 1);
  swift_bridgeObjectRelease();
  *(void *)a1 = v31;
  *(void *)(a1 + 8) = v30;
  *(unsigned char *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v32;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v21;
  *(void *)(a1 + 56) = v23;
  *(unsigned char *)(a1 + 64) = v27;
  *(void *)(a1 + 72) = v25;
  sub_255D85214(v31, v30, v29);
  swift_bridgeObjectRetain();
  sub_255D85214(v21, v23, v27);
  swift_bridgeObjectRetain();
  sub_255D85120(v21, v23, v27);
  swift_bridgeObjectRelease();
  sub_255D85120(v31, v30, v29);
  return swift_bridgeObjectRelease();
}

__n128 sub_255EB6EC4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255EEEC90();
  sub_255EB6C84((uint64_t)&v11);
  char v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  char v7 = v17;
  uint64_t v8 = v18;
  __n128 result = v11;
  long long v10 = v16;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v8;
  return result;
}

uint64_t sub_255EB6F64()
{
  return sub_255EB7104(&qword_269F38758, (void (*)(uint64_t))sub_255EB6FAC);
}

void sub_255EB6FAC()
{
  if (!qword_269F38760)
  {
    sub_255EB7040();
    sub_255EB7104(&qword_269F38778, (void (*)(uint64_t))sub_255EB7040);
    unint64_t v0 = sub_255EEF8C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38760);
    }
  }
}

void sub_255EB7040()
{
  if (!qword_269F38768)
  {
    sub_255EB7098();
    unint64_t v0 = sub_255EEFB90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38768);
    }
  }
}

void sub_255EB7098()
{
  if (!qword_269F38770)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269F38770);
    }
  }
}

uint64_t sub_255EB7104(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255EB714C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MedicalIDHealthStoreDataProvider()
{
  return self;
}

void sub_255EB71B0()
{
  qword_269F3FE70 = 0x696C666F72617473;
  *(void *)algn_269F3FE78 = 0xEF6C6C69662E6566;
}

uint64_t sub_255EB71E0@<X0>(uint64_t a1@<X8>)
{
  return sub_255EB7D64(a1);
}

uint64_t sub_255EB71FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  uint64_t v36 = v5;
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_255EEFD40();
  MEMORY[0x270FA5388](v8 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  char v9 = (void *)qword_269F352A8;
  uint64_t v10 = sub_255EEE200();
  MEMORY[0x270FA5388](v10 - 8);
  id v11 = v9;
  sub_255EEE1F0();
  uint64_t v12 = sub_255EEFDA0();
  uint64_t v33 = v13;
  uint64_t v34 = v12;
  if (!a1) {
    goto LABEL_7;
  }
  uint64_t v14 = self;
  id v15 = a1;
  if (!objc_msgSend(v14, sel_isAppleInternalInstall))
  {

LABEL_7:
    unint64_t v32 = 0;
    unint64_t v16 = 0;
    goto LABEL_8;
  }
  unint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  sub_255EF02D0();
  swift_bridgeObjectRelease();
  unint64_t v37 = 0xD000000000000017;
  unint64_t v38 = 0x8000000255EFB620;
  swift_getErrorValue();
  sub_255EF04E0();
  sub_255EEFE00();
  swift_bridgeObjectRelease();

  unint64_t v16 = v38;
  unint64_t v32 = v37;
LABEL_8:
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = sub_255EEFCD0();
  uint64_t v18 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v17);
  id v19 = v18;
  sub_255EEE1F0();
  uint64_t v20 = sub_255EEFDA0();
  uint64_t v22 = v21;
  uint64_t v23 = v35;
  uint64_t v24 = &v7[*(int *)(v35 + 24)];
  sub_255EEE4E0();
  uint64_t v25 = sub_255EEE4F0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
  sub_255EEE130();
  char v26 = (uint64_t *)&v7[*(int *)(v23 + 20)];
  *char v26 = v20;
  v26[1] = v22;
  char v27 = &v7[*(int *)(v23 + 28)];
  sub_255EB813C(0, &qword_269F351D0, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8E0F8]);
  *(void *)char v27 = 0;
  *((void *)v27 + 1) = 0;
  unint64_t v28 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_255EF20B0;
  uint64_t result = sub_255D86460((uint64_t)v7, v29 + v28);
  uint64_t v31 = v33;
  *a2 = v34;
  a2[1] = v31;
  a2[2] = v32;
  a2[3] = v16;
  a2[5] = 0;
  a2[6] = 0;
  a2[4] = v29;
  return result;
}

uint64_t sub_255EB7658@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = type metadata accessor for BasicAlertModel.Action();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  uint64_t v52 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_255EEFD40();
  MEMORY[0x270FA5388](v7 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_269F352A8;
  uint64_t v9 = sub_255EEE200();
  MEMORY[0x270FA5388](v9 - 8);
  id v10 = v8;
  sub_255EEE1F0();
  uint64_t v11 = sub_255EEFDA0();
  uint64_t v49 = v12;
  uint64_t v50 = v11;
  id v13 = objc_msgSend(a1, sel_synchronouslyFetchFirstName);
  if (v13)
  {
    uint64_t v14 = v13;
    sub_255EEFD90();

    uint64_t v15 = sub_255EEFD20();
    uint64_t v47 = (uint64_t)&v47;
    MEMORY[0x270FA5388](v15 - 8);
    sub_255EEFD10();
    sub_255EEFD00();
    sub_255EEFCF0();
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_255EEFD00();
    MEMORY[0x270FA5388](v16);
    uint64_t v17 = sub_255EEFD30();
    uint64_t v18 = (void *)qword_269F352A8;
    MEMORY[0x270FA5388](v17);
    id v19 = v18;
    sub_255EEE1F0();
    uint64_t v20 = sub_255EEFDA0();
    uint64_t v22 = v21;
    uint64_t v23 = v20;
  }
  else
  {
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_255EEE3D0();
    __swift_project_value_buffer(v24, (uint64_t)qword_269F3FE80);
    uint64_t v25 = sub_255EEE3B0();
    os_log_type_t v26 = sub_255EF00C0();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v54[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v53 = sub_255DB0024(0x656C416369736142, 0xEF6C65646F4D7472, v54);
      sub_255EF0200();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v53 = sub_255DB0024(0xD000000000000024, 0x8000000255EFB680, v54);
      sub_255EF0200();
      _os_log_impl(&dword_255D76000, v25, v26, "%s %s first name not available", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v28, -1, -1);
      MEMORY[0x25A29C8A0](v27, -1, -1);
    }

    uint64_t v23 = 0;
    uint64_t v22 = 0;
  }
  MEMORY[0x270FA5388](v20);
  uint64_t v29 = sub_255EEFCD0();
  uint64_t v30 = (void *)qword_269F352A8;
  MEMORY[0x270FA5388](v29);
  id v31 = v30;
  sub_255EEE1F0();
  uint64_t v32 = sub_255EEFDA0();
  uint64_t v34 = v33;
  uint64_t v35 = v51;
  uint64_t v36 = &v6[*(int *)(v51 + 24)];
  uint64_t v37 = sub_255EEE4F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  sub_255EEE130();
  unint64_t v38 = (uint64_t *)&v6[*(int *)(v35 + 20)];
  *unint64_t v38 = v32;
  v38[1] = v34;
  uint64_t v39 = (uint64_t (**)())&v6[*(int *)(v35 + 28)];
  int *v39 = sub_255EB7F30;
  v39[1] = 0;
  sub_255EB813C(0, &qword_269F351D0, (uint64_t (*)(uint64_t))type metadata accessor for BasicAlertModel.Action, MEMORY[0x263F8E0F8]);
  uint64_t v40 = *(void *)(v52 + 72);
  unint64_t v41 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_255EF1E20;
  uint64_t v43 = v42 + v41;
  sub_255EB7D64(v43);
  sub_255D87960((uint64_t)v6, v43 + v40);
  uint64_t v44 = v48;
  uint64_t v45 = v49;
  *uint64_t v48 = v50;
  v44[1] = v45;
  v44[2] = v23;
  v44[3] = v22;
  v44[5] = 0;
  v44[6] = 0;
  v44[4] = v42;
  return sub_255DF00A8((uint64_t)v6);
}

uint64_t sub_255EB7D64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_255EEFD40();
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)qword_269F352A8;
  uint64_t v4 = sub_255EEE200();
  MEMORY[0x270FA5388](v4 - 8);
  id v5 = v3;
  sub_255EEE1F0();
  uint64_t v6 = sub_255EEFDA0();
  uint64_t v8 = v7;
  uint64_t v9 = (int *)type metadata accessor for BasicAlertModel.Action();
  uint64_t v10 = a1 + v9[6];
  sub_255EEE4E0();
  uint64_t v11 = sub_255EEE4F0();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  uint64_t result = sub_255EEE130();
  id v13 = (uint64_t *)(a1 + v9[5]);
  *id v13 = v6;
  v13[1] = v8;
  uint64_t v14 = (void *)(a1 + v9[7]);
  *uint64_t v14 = 0;
  v14[1] = 0;
  return result;
}

uint64_t sub_255EB7F30()
{
  sub_255EB813C(0, &qword_269F36908, MEMORY[0x270FA8E40], MEMORY[0x263F8D8F0]);
  unint64_t v1 = (*(void *)(*(void *)(v0 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v11 - v1;
  sub_255EEE020();
  id v3 = objc_msgSend(self, sel_defaultWorkspace);
  if (v3)
  {
    uint64_t v4 = v3;
    MEMORY[0x270FA5388](v3);
    id v5 = (char *)&v11 - v1;
    sub_255EB8220((uint64_t)v2, (uint64_t)v5);
    uint64_t v6 = sub_255EEE030();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      uint64_t v8 = (void *)sub_255EEE000();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    }
    sub_255E88BE0(MEMORY[0x263F8EE78]);
    uint64_t v9 = (void *)sub_255EEFC50();
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_openSensitiveURL_withOptions_, v8, v9);
  }
  return sub_255EB81A0((uint64_t)v2);
}

void sub_255EB813C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255EB81A0(uint64_t a1)
{
  sub_255EB813C(0, &qword_269F36908, MEMORY[0x270FA8E40], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_255EB8220(uint64_t a1, uint64_t a2)
{
  sub_255EB813C(0, &qword_269F36908, MEMORY[0x270FA8E40], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_255EB82A8()
{
  uint64_t v0 = sub_255EEE3D0();
  __swift_allocate_value_buffer(v0, qword_269F3FE80);
  __swift_project_value_buffer(v0, (uint64_t)qword_269F3FE80);
  return sub_255EEE3C0();
}

uint64_t destroy for ClearButtonView()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ClearButtonView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ClearButtonView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ClearButtonView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ClearButtonView()
{
  return &type metadata for ClearButtonView;
}

uint64_t sub_255EB8474()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255EB8490(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v60 = a5;
  sub_255EB8BD0();
  uint64_t v63 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB9124(0, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0);
  uint64_t v61 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v58 - v13;
  sub_255EB8E4C(0, &qword_269F387B8, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0, (void (*)(uint64_t))sub_255E1FA68);
  uint64_t v62 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v58 - v16;
  sub_255EB8EC4();
  uint64_t v64 = *(void *)(v18 - 8);
  uint64_t v65 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EB9124(0, &qword_269F387E0, (void (*)(uint64_t))sub_255EB8EC4);
  uint64_t v68 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v66 = (char *)&v58 - v22;
  sub_255EB8E4C(0, &qword_269F387E8, &qword_269F387E0, (void (*)(uint64_t))sub_255EB8EC4, MEMORY[0x263F1A470]);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v59 = (char *)&v58 - v24;
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v69 = a1;
  id v25[2] = a1;
  v25[3] = a2;
  v25[4] = v71;
  v25[5] = a4;
  sub_255EB8C34();
  sub_255EB8CFC();
  uint64_t v70 = a2;
  swift_bridgeObjectRetain();
  uint64_t v67 = a4;
  swift_retain();
  sub_255EEF870();
  if (qword_269F34C58 != -1) {
    swift_once();
  }
  char v26 = sub_255EEF180();
  sub_255EEE540();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v63;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v63);
  uint64_t v36 = &v14[*(int *)(v61 + 36)];
  *uint64_t v36 = v26;
  *((void *)v36 + 1) = v28;
  *((void *)v36 + 2) = v30;
  *((void *)v36 + 3) = v32;
  *((void *)v36 + 4) = v34;
  v36[40] = 0;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v35);
  sub_255EB9194((uint64_t)v14, (uint64_t)v17);
  v17[*(int *)(v62 + 36)] = 0;
  sub_255EB9484((uint64_t)v14, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0);
  uint64_t v37 = (void *)swift_allocObject();
  uint64_t v39 = v69;
  uint64_t v38 = v70;
  v37[2] = v69;
  v37[3] = v38;
  uint64_t v40 = v67;
  v37[4] = v71;
  v37[5] = v40;
  sub_255EB8F80();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_255EEF4B0();
  swift_release();
  sub_255EB9258((uint64_t)v17);
  char v41 = sub_255EEF180();
  sub_255EEE540();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v64;
  uint64_t v50 = v65;
  uint64_t v52 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v66, v20, v65);
  uint64_t v53 = v52 + *(int *)(v68 + 36);
  *(unsigned char *)uint64_t v53 = v41;
  *(void *)(v53 + 8) = v43;
  *(void *)(v53 + 16) = v45;
  *(void *)(v53 + 24) = v47;
  *(void *)(v53 + 32) = v49;
  *(unsigned char *)(v53 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v50);
  sub_255E13D48(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_255EF1E20;
  *(void *)(v54 + 32) = v39;
  *(void *)(v54 + 40) = v38;
  *(void *)(v54 + 48) = 0x7475427261656C43;
  *(void *)(v54 + 56) = 0xEB000000006E6F74;
  swift_bridgeObjectRetain();
  uint64_t v55 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v56 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v56)
  {
    sub_255EEFD90();

    sub_255EB9388();
    uint64_t v57 = (uint64_t)v59;
    sub_255EEF580();
    swift_bridgeObjectRelease();
    sub_255EB9484(v52, &qword_269F387E0, (void (*)(uint64_t))sub_255EB8EC4);
    sub_255EB94E0(v57, v60);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_255EB8B38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_255EEF7B0();
  id v3 = objc_msgSend(self, sel_systemGray3Color);
  uint64_t v4 = MEMORY[0x25A29B180](v3);
  uint64_t v5 = sub_255EEF200();
  uint64_t result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = v4;
  a1[2] = result;
  a1[3] = v5;
  return result;
}

void sub_255EB8BC4(uint64_t a1@<X8>)
{
  sub_255EB8490(*v1, v1[1], v1[2], v1[3], a1);
}

void sub_255EB8BD0()
{
  if (!qword_269F38788)
  {
    sub_255EB8C34();
    sub_255EB8CFC();
    unint64_t v0 = sub_255EEF8A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38788);
    }
  }
}

void sub_255EB8C34()
{
  if (!qword_269F38790)
  {
    sub_255EB8C9C();
    sub_255D84C2C();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38790);
    }
  }
}

void sub_255EB8C9C()
{
  if (!qword_269F38798)
  {
    sub_255E5A75C();
    unint64_t v0 = sub_255EEE870();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38798);
    }
  }
}

unint64_t sub_255EB8CFC()
{
  unint64_t result = qword_269F387A0;
  if (!qword_269F387A0)
  {
    sub_255EB8C34();
    sub_255EB8DA4();
    sub_255EB99D0(&qword_269F35198, (void (*)(uint64_t))sub_255D84C2C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F387A0);
  }
  return result;
}

unint64_t sub_255EB8DA4()
{
  unint64_t result = qword_269F387A8;
  if (!qword_269F387A8)
  {
    sub_255EB8C9C();
    sub_255EB99D0((unint64_t *)&qword_269F369E0, (void (*)(uint64_t))sub_255E5A75C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F387A8);
  }
  return result;
}

void sub_255EB8E4C(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  if (!*a2)
  {
    sub_255EB9124(255, a3, a4);
    a5(255);
    unint64_t v7 = sub_255EEE870();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_255EB8EC4()
{
  if (!qword_269F387C0)
  {
    sub_255EB8E4C(255, &qword_269F387B8, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0, (void (*)(uint64_t))sub_255E1FA68);
    sub_255EB8F80();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_269F387C0);
    }
  }
}

unint64_t sub_255EB8F80()
{
  unint64_t result = qword_269F387C8;
  if (!qword_269F387C8)
  {
    sub_255EB8E4C(255, &qword_269F387B8, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0, (void (*)(uint64_t))sub_255E1FA68);
    sub_255EB9060();
    sub_255EB99D0(qword_269F36AF8, (void (*)(uint64_t))sub_255E1FA68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F387C8);
  }
  return result;
}

unint64_t sub_255EB9060()
{
  unint64_t result = qword_269F387D0;
  if (!qword_269F387D0)
  {
    sub_255EB9124(255, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0);
    sub_255EB99D0(&qword_269F387D8, (void (*)(uint64_t))sub_255EB8BD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F387D0);
  }
  return result;
}

void sub_255EB9124(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_255EEE870();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_255EB9184()
{
  qword_269F38780 = 0x4020000000000000;
}

uint64_t sub_255EB9194(uint64_t a1, uint64_t a2)
{
  sub_255EB9124(0, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_23()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255EB9258(uint64_t a1)
{
  sub_255EB8E4C(0, &qword_269F387B8, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0, (void (*)(uint64_t))sub_255E1FA68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_255EB92EC(void *a1@<X8>)
{
  if (*(unsigned char *)v1 & 1) == 0 && (*(unsigned char *)(v1 + 1))
  {
    char v8 = sub_255EEE790();
    uint64_t v4 = *(void *)(v1 + 8);
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 32);
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 256;
    }
    unint64_t v3 = v9 & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *a1 = 0;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
}

unint64_t sub_255EB9388()
{
  unint64_t result = qword_269F387F0;
  if (!qword_269F387F0)
  {
    sub_255EB9124(255, &qword_269F387E0, (void (*)(uint64_t))sub_255EB8EC4);
    sub_255EB8E4C(255, &qword_269F387B8, &qword_269F387B0, (void (*)(uint64_t))sub_255EB8BD0, (void (*)(uint64_t))sub_255E1FA68);
    sub_255EB8F80();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F387F0);
  }
  return result;
}

uint64_t sub_255EB9484(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_255EB9124(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_255EB94E0(uint64_t a1, uint64_t a2)
{
  sub_255EB8E4C(0, &qword_269F387E8, &qword_269F387E0, (void (*)(uint64_t))sub_255EB8EC4, MEMORY[0x263F1A470]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for TextFieldClearButtonView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TextFieldClearButtonView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TextFieldClearButtonView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TextFieldClearButtonView()
{
  return &type metadata for TextFieldClearButtonView;
}

unint64_t sub_255EB96DC()
{
  unint64_t result = qword_269F387F8;
  if (!qword_269F387F8)
  {
    sub_255EB8E4C(255, &qword_269F387E8, &qword_269F387E0, (void (*)(uint64_t))sub_255EB8EC4, MEMORY[0x263F1A470]);
    sub_255EB9388();
    sub_255EB99D0(&qword_269F351C0, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F387F8);
  }
  return result;
}

uint64_t sub_255EB97BC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_255EB97DC()
{
  unint64_t result = qword_269F38800;
  if (!qword_269F38800)
  {
    sub_255EB98AC(255, &qword_269F38808, (uint64_t (*)(uint64_t))sub_255EB9910, MEMORY[0x263F8D8F0]);
    sub_255EB99D0(&qword_269F38828, sub_255EB9910);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38800);
  }
  return result;
}

void sub_255EB98AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255EB9910(uint64_t a1)
{
}

void sub_255EB9944()
{
  if (!qword_269F38818)
  {
    sub_255E13D48(255, &qword_269F38820, MEMORY[0x263F1B6B0], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269F38818);
    }
  }
}

uint64_t sub_255EB99D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_255EB9A1C()
{
  swift_getObjectType();
  objc_msgSend(v0, sel_copy);
  sub_255EF0260();
  swift_unknownObjectRelease();
  if (swift_dynamicCast()) {
    return v2;
  }
  sub_255EF02D0();
  sub_255EF05E0();
  swift_bridgeObjectRelease();
  sub_255EEFE00();
  uint64_t result = sub_255EF03D0();
  __break(1u);
  return result;
}

void **sub_255EB9B30(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v27 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v292 = (int *)type metadata accessor for MedicalIDDataViewModel();
    uint64_t v7 = v292[5];
    uint64_t v286 = a1;
    unint64_t v8 = (void **)((char *)a1 + v7);
    v291 = a2;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *unint64_t v8 = *(void **)((char *)a2 + v7);
    v8[1] = v10;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v7 + 16);
    uint64_t v11 = *(uint64_t *)((char *)a2 + v7 + 24);
    void v8[2] = v12;
    v8[3] = v11;
    uint64_t v13 = *((void *)v9 + 5);
    v8[4] = *((void *)v9 + 4);
    v8[5] = v13;
    uint64_t v14 = *((void *)v9 + 7);
    v8[6] = *((void *)v9 + 6);
    v8[7] = v14;
    uint64_t v15 = *((void *)v9 + 9);
    v8[8] = *((void *)v9 + 8);
    v8[9] = v15;
    uint64_t v16 = *((void *)v9 + 11);
    v8[10] = *((void *)v9 + 10);
    v8[11] = v16;
    unint64_t v287 = (void *)*((void *)v9 + 12);
    uint64_t v289 = (void *)*((void *)v9 + 13);
    v8[12] = v287;
    v8[13] = v289;
    uint64_t v17 = type metadata accessor for MedicalIDData();
    uint64_t v18 = *(int *)(v17 + 52);
    uint64_t v294 = (char *)v8 + v18;
    uint64_t v295 = (int *)v17;
    uint64_t v19 = &v9[v18];
    uint64_t v20 = sub_255EEE100();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    uint64_t v23 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v24 = v287;
    id v25 = v289;
    uint64_t v285 = v21;
    if (v22(v19, 1, v20))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v294, v19, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v294, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v294, 0, 1, v20);
    }
    uint64_t v28 = v295[14];
    uint64_t v29 = (char *)v8 + v28;
    uint64_t v30 = &v9[v28];
    if (v22(&v9[v28], 1, v20))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v29, v30, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(v29, 0, 1, v20);
    }
    uint64_t v32 = v295[15];
    uint64_t v33 = (void *)((char *)v8 + v32);
    uint64_t v34 = &v9[v32];
    uint64_t v35 = *((void *)v34 + 1);
    void *v33 = *(void *)v34;
    v33[1] = v35;
    uint64_t v36 = v295[16];
    uint64_t v37 = (void *)((char *)v8 + v36);
    uint64_t v38 = &v9[v36];
    uint64_t v39 = *((void *)v38 + 1);
    *uint64_t v37 = *(void *)v38;
    v37[1] = v39;
    *((unsigned char *)v8 + v295[17]) = v9[v295[17]];
    *((unsigned char *)v8 + v295[18]) = v9[v295[18]];
    uint64_t v40 = v295[19];
    char v41 = (char *)v8 + v40;
    uint64_t v42 = (uint64_t *)&v9[v40];
    unint64_t v43 = *(void *)&v9[v40 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)char v41 = *(_OWORD *)v42;
    }
    else
    {
      uint64_t v44 = *v42;
      sub_255D80890(*v42, v43);
      *(void *)char v41 = v44;
      *((void *)v41 + 1) = v43;
    }
    uint64_t v45 = v295[20];
    uint64_t v46 = (char *)v8 + v45;
    uint64_t v47 = &v9[v45];
    uint64_t v48 = sub_255EEDF60();
    uint64_t v49 = *(void *)(v48 - 8);
    v284 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    uint64_t v279 = v49;
    if (v284(v47, 1, v48))
    {
      sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    uint64_t v51 = v295[21];
    uint64_t v52 = *(void **)&v9[v51];
    *(void *)((char *)v8 + v51) = v52;
    uint64_t v53 = v295[22];
    uint64_t v54 = (char *)v8 + v53;
    uint64_t v55 = &v9[v53];
    id v56 = v52;
    uint64_t v293 = v22;
    uint64_t v280 = v48;
    uint64_t v281 = v20;
    if (v22(v55, 1, v20))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v54, v55, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(v54, 0, 1, v20);
    }
    uint64_t v58 = v292[6];
    uint64_t v59 = (char *)v286 + v58;
    uint64_t v60 = (char *)v291 + v58;
    uint64_t v61 = sub_255EEE280();
    uint64_t v282 = *(void (**)(char *, char *))(*(void *)(v61 - 8) + 16);
    uint64_t v283 = v61;
    v282(v59, v60);
    uint64_t v62 = v292[7];
    uint64_t v63 = *(void **)((char *)v291 + v62);
    *(void **)((char *)v286 + v62) = v63;
    uint64_t v64 = v292[8];
    uint64_t v65 = (char *)v286 + v64;
    uint64_t v66 = (char *)v291 + v64;
    uint64_t v67 = sub_255EEE200();
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
    id v69 = v63;
    uint64_t v290 = v67;
    uint64_t v288 = v68;
    v68(v65, v66, v67);
    uint64_t v70 = v292[9];
    uint64_t v71 = (char *)v286 + v70;
    uint64_t v72 = (char *)v291 + v70;
    uint64_t v73 = *(uint64_t *)((char *)v291 + v70 + 8);
    *(void *)uint64_t v71 = *(void **)((char *)v291 + v70);
    *((void *)v71 + 1) = v73;
    uint64_t v269 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    uint64_t v272 = v72;
    uint64_t v74 = v269[5];
    v275 = v71;
    uint64_t v75 = &v71[v74];
    uint64_t v76 = &v72[v74];
    uint64_t v77 = *(void *)&v72[v74 + 8];
    *(void *)uint64_t v75 = *(void *)&v72[v74];
    *((void *)v75 + 1) = v77;
    uint64_t v79 = *(void *)&v72[v74 + 16];
    uint64_t v78 = *(void *)&v72[v74 + 24];
    *((void *)v75 + 2) = v79;
    *((void *)v75 + 3) = v78;
    uint64_t v80 = *((void *)v76 + 5);
    *((void *)v75 + 4) = *((void *)v76 + 4);
    *((void *)v75 + 5) = v80;
    uint64_t v81 = *((void *)v76 + 7);
    *((void *)v75 + 6) = *((void *)v76 + 6);
    *((void *)v75 + 7) = v81;
    uint64_t v82 = *((void *)v76 + 9);
    *((void *)v75 + 8) = *((void *)v76 + 8);
    *((void *)v75 + 9) = v82;
    uint64_t v83 = *((void *)v76 + 11);
    *((void *)v75 + 10) = *((void *)v76 + 10);
    *((void *)v75 + 11) = v83;
    uint64_t v84 = (void *)*((void *)v76 + 12);
    v265 = (void *)*((void *)v76 + 13);
    *((void *)v75 + 12) = v84;
    *((void *)v75 + 13) = v265;
    uint64_t v85 = v295[13];
    __dst = &v75[v85];
    uint64_t v86 = &v76[v85];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v87 = v84;
    id v88 = v265;
    if (v22(v86, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v86, *(void *)(*(void *)(v89 - 8) + 64));
      uint64_t v90 = v285;
    }
    else
    {
      uint64_t v90 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(__dst, v86, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(__dst, 0, 1, v281);
    }
    uint64_t v91 = v295[14];
    id v92 = &v75[v91];
    uint64_t v93 = &v76[v91];
    if (v22(&v76[v91], 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v92, v93, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v281);
    }
    uint64_t v95 = v295[15];
    uint64_t v96 = &v75[v95];
    uint64_t v97 = &v76[v95];
    uint64_t v98 = *((void *)v97 + 1);
    *(void *)uint64_t v96 = *(void *)v97;
    *((void *)v96 + 1) = v98;
    uint64_t v99 = v295[16];
    char v100 = &v75[v99];
    int v101 = &v76[v99];
    uint64_t v102 = *((void *)v101 + 1);
    *(void *)char v100 = *(void *)v101;
    *((void *)v100 + 1) = v102;
    v75[v295[17]] = v76[v295[17]];
    v75[v295[18]] = v76[v295[18]];
    uint64_t v103 = v295[19];
    uint64_t v104 = &v75[v103];
    uint64_t v105 = (uint64_t *)&v76[v103];
    unint64_t v106 = *(void *)&v76[v103 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v106 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
    }
    else
    {
      uint64_t v107 = *v105;
      sub_255D80890(*v105, v106);
      *(void *)uint64_t v104 = v107;
      *((void *)v104 + 1) = v106;
    }
    uint64_t v108 = v295[20];
    uint64_t v109 = &v75[v108];
    uint64_t v110 = &v76[v108];
    if (v284(&v76[v108], 1, v280))
    {
      sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
      memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v109, v110, v280);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v279 + 56))(v109, 0, 1, v280);
    }
    uint64_t v112 = v295[21];
    uint64_t v113 = *(void **)&v76[v112];
    *(void *)&v75[v112] = v113;
    uint64_t v114 = v295[22];
    uint64_t v115 = &v75[v114];
    uint64_t v116 = &v76[v114];
    id v117 = v113;
    if (v22(v116, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v115, v116, *(void *)(*(void *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v115, v116, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v115, 0, 1, v281);
    }
    v288(&v275[v269[6]], &v272[v269[6]], v67);
    uint64_t v119 = v269[7];
    uint64_t v120 = &v275[v119];
    uint64_t v121 = &v272[v119];
    v288(&v275[v119], &v272[v119], v67);
    uint64_t v122 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    uint64_t v123 = *(void **)&v121[v122];
    *(void *)&v120[v122] = v123;
    uint64_t v124 = v269[8];
    int v125 = &v275[v124];
    int v126 = &v272[v124];
    id v127 = v123;
    v288(v125, v126, v67);
    uint64_t v128 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v129 = *(int *)(v128 + 20);
    int v130 = *(void **)&v126[v129];
    *(void *)&v125[v129] = v130;
    uint64_t v131 = *(int *)(v128 + 24);
    uint64_t v270 = *(void **)&v126[v131];
    *(void *)&v125[v131] = v270;
    uint64_t v132 = v292[10];
    uint64_t v133 = (void **)((char *)v286 + v132);
    uint64_t v134 = (char *)v291 + v132;
    uint64_t v135 = *(uint64_t *)((char *)v291 + v132 + 8);
    *uint64_t v133 = *(void **)((char *)v291 + v132);
    v133[1] = v135;
    uint64_t v137 = *(uint64_t *)((char *)v291 + v132 + 16);
    uint64_t v136 = *(uint64_t *)((char *)v291 + v132 + 24);
    v133[2] = v137;
    v133[3] = v136;
    uint64_t v138 = *((void *)v134 + 5);
    v133[4] = *((void *)v134 + 4);
    v133[5] = v138;
    uint64_t v139 = *((void *)v134 + 7);
    v133[6] = *((void *)v134 + 6);
    v133[7] = v139;
    uint64_t v140 = *((void *)v134 + 9);
    v133[8] = *((void *)v134 + 8);
    v133[9] = v140;
    uint64_t v141 = *((void *)v134 + 11);
    v133[10] = *((void *)v134 + 10);
    v133[11] = v141;
    uint64_t v142 = (void *)*((void *)v134 + 12);
    uint64_t v273 = (void *)*((void *)v134 + 13);
    v133[12] = v142;
    v133[13] = v273;
    uint64_t v143 = v295[13];
    uint64_t v276 = (char *)v133 + v143;
    uint64_t v144 = &v134[v143];
    id v145 = v130;
    id v146 = v270;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v147 = v142;
    id v148 = v273;
    if (v293(v144, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v276, v144, *(void *)(*(void *)(v149 - 8) + 64));
      uint64_t v150 = v285;
    }
    else
    {
      uint64_t v150 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v276, v144, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(v276, 0, 1, v281);
    }
    uint64_t v151 = v295[14];
    uint64_t v152 = (char *)v133 + v151;
    uint64_t v153 = &v134[v151];
    if (v293(&v134[v151], 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v152, v153, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v152, 0, 1, v281);
    }
    uint64_t v155 = v295[15];
    uint64_t v156 = (void *)((char *)v133 + v155);
    uint64_t v157 = &v134[v155];
    uint64_t v158 = *((void *)v157 + 1);
    void *v156 = *(void *)v157;
    v156[1] = v158;
    uint64_t v159 = v295[16];
    uint64_t v160 = (void *)((char *)v133 + v159);
    uint64_t v161 = &v134[v159];
    uint64_t v162 = *((void *)v161 + 1);
    *uint64_t v160 = *(void *)v161;
    v160[1] = v162;
    *((unsigned char *)v133 + v295[17]) = v134[v295[17]];
    *((unsigned char *)v133 + v295[18]) = v134[v295[18]];
    uint64_t v163 = v295[19];
    uint64_t v164 = (char *)v133 + v163;
    uint64_t v165 = (uint64_t *)&v134[v163];
    unint64_t v166 = *(void *)&v134[v163 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v166 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
    }
    else
    {
      uint64_t v167 = *v165;
      sub_255D80890(*v165, v166);
      *(void *)uint64_t v164 = v167;
      *((void *)v164 + 1) = v166;
    }
    uint64_t v168 = v295[20];
    uint64_t v169 = (char *)v133 + v168;
    uint64_t v170 = &v134[v168];
    if (v284(&v134[v168], 1, v280))
    {
      sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
      memcpy(v169, v170, *(void *)(*(void *)(v171 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v169, v170, v280);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v279 + 56))(v169, 0, 1, v280);
    }
    uint64_t v172 = v295[21];
    uint64_t v173 = *(void **)&v134[v172];
    *(void *)((char *)v133 + v172) = v173;
    uint64_t v174 = v295[22];
    uint64_t v175 = (char *)v133 + v174;
    uint64_t v176 = &v134[v174];
    id v177 = v173;
    if (v293(v176, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v175, v176, *(void *)(*(void *)(v178 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v175, v176, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v175, 0, 1, v281);
    }
    uint64_t v179 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
    ((void (*)(char *, char *, uint64_t))v282)((char *)v133 + v179[5], &v134[v179[5]], v283);
    v288((char *)v133 + v179[6], &v134[v179[6]], v67);
    uint64_t v180 = v179[7];
    uint64_t v181 = *(void **)&v134[v180];
    *(void *)((char *)v133 + v180) = v181;
    uint64_t v182 = v179[8];
    uint64_t v183 = *(void **)&v134[v182];
    *(void *)((char *)v133 + v182) = v183;
    uint64_t v184 = v179[9];
    uint64_t v185 = (void *)((char *)v133 + v184);
    uint64_t v186 = &v134[v184];
    uint64_t v187 = *((void *)v186 + 1);
    *uint64_t v185 = *(void *)v186;
    v185[1] = v187;
    uint64_t v188 = v292[11];
    uint64_t v189 = (char *)v286 + v188;
    uint64_t v190 = (char *)v291 + v188;
    v191 = *(void **)((char *)v291 + v188);
    *(void **)((char *)v286 + v188) = v191;
    uint64_t v192 = type metadata accessor for MedicalIDMedicalInfoViewModel();
    uint64_t v193 = *(int *)(v192 + 20);
    uint64_t v194 = &v189[v193];
    uint64_t v195 = &v190[v193];
    id v196 = v181;
    id v197 = v183;
    swift_bridgeObjectRetain();
    id v198 = v191;
    ((void (*)(char *, char *, uint64_t))v282)(v194, v195, v283);
    v288(&v189[*(int *)(v192 + 24)], &v190[*(int *)(v192 + 24)], v290);
    uint64_t v199 = v292[12];
    uint64_t v200 = (char *)v286 + v199;
    uint64_t v201 = (char *)v291 + v199;
    uint64_t v202 = *(uint64_t *)((char *)v291 + v199 + 8);
    *(void *)uint64_t v200 = *(void **)((char *)v291 + v199);
    *((void *)v200 + 1) = v202;
    uint64_t v271 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
    v274 = v200;
    uint64_t v203 = v271[5];
    uint64_t v204 = &v200[v203];
    uint64_t v277 = v201;
    int v205 = &v201[v203];
    uint64_t v206 = *(void *)&v201[v203];
    uint64_t v207 = *((void *)v205 + 1);
    *uint64_t v204 = v206;
    v204[1] = v207;
    uint64_t v208 = *((void *)v205 + 3);
    v204[2] = *((void *)v205 + 2);
    v204[3] = v208;
    uint64_t v209 = *((void *)v205 + 5);
    v204[4] = *((void *)v205 + 4);
    v204[5] = v209;
    uint64_t v210 = *((void *)v205 + 7);
    v204[6] = *((void *)v205 + 6);
    v204[7] = v210;
    uint64_t v211 = *((void *)v205 + 9);
    v204[8] = *((void *)v205 + 8);
    v204[9] = v211;
    uint64_t v212 = *((void *)v205 + 11);
    v204[10] = *((void *)v205 + 10);
    v204[11] = v212;
    uint64_t v213 = (void *)*((void *)v205 + 12);
    uint64_t v266 = (void *)*((void *)v205 + 13);
    v204[12] = v213;
    v204[13] = v266;
    uint64_t v214 = v295[13];
    __dsta = (char *)v204 + v214;
    unint64_t v215 = &v205[v214];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v216 = v213;
    id v217 = v266;
    v218 = v293;
    if (v293(v215, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v215, *(void *)(*(void *)(v219 - 8) + 64));
      uint64_t v220 = v285;
    }
    else
    {
      uint64_t v220 = v285;
      (*(void (**)(char *, char *, uint64_t))(v285 + 16))(__dsta, v215, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v285 + 56))(__dsta, 0, 1, v281);
    }
    uint64_t v221 = v295[14];
    v222 = (char *)v204 + v221;
    v223 = &v205[v221];
    if (v293(&v205[v221], 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v222, v223, *(void *)(*(void *)(v224 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v222, v223, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v222, 0, 1, v281);
    }
    uint64_t v225 = v295[15];
    v226 = (void *)((char *)v204 + v225);
    v227 = &v205[v225];
    uint64_t v228 = *((void *)v227 + 1);
    void *v226 = *(void *)v227;
    v226[1] = v228;
    uint64_t v229 = v295[16];
    v230 = (void *)((char *)v204 + v229);
    v231 = &v205[v229];
    uint64_t v232 = *((void *)v231 + 1);
    void *v230 = *(void *)v231;
    v230[1] = v232;
    *((unsigned char *)v204 + v295[17]) = v205[v295[17]];
    *((unsigned char *)v204 + v295[18]) = v205[v295[18]];
    uint64_t v233 = v295[19];
    v234 = (char *)v204 + v233;
    uint64_t v235 = (uint64_t *)&v205[v233];
    unint64_t v236 = *(void *)&v205[v233 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v236 >> 60 == 15)
    {
      *(_OWORD *)v234 = *(_OWORD *)v235;
    }
    else
    {
      uint64_t v237 = *v235;
      sub_255D80890(*v235, v236);
      *(void *)v234 = v237;
      *((void *)v234 + 1) = v236;
    }
    uint64_t v27 = v286;
    uint64_t v238 = v295[20];
    unint64_t v239 = (char *)v204 + v238;
    uint64_t v240 = &v205[v238];
    if (v284(&v205[v238], 1, v280))
    {
      sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
      memcpy(v239, v240, *(void *)(*(void *)(v241 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v239, v240, v280);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v279 + 56))(v239, 0, 1, v280);
      v218 = v293;
    }
    uint64_t v242 = v295[21];
    uint64_t v243 = *(void **)&v205[v242];
    *(void *)((char *)v204 + v242) = v243;
    uint64_t v244 = v295[22];
    v245 = (char *)v204 + v244;
    uint64_t v246 = &v205[v244];
    id v247 = v243;
    if (v218(v246, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v245, v246, *(void *)(*(void *)(v248 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v245, v246, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v245, 0, 1, v281);
    }
    ((void (*)(char *, char *, uint64_t))v282)(&v274[v271[6]], &v277[v271[6]], v283);
    v288(&v274[v271[7]], &v277[v271[7]], v290);
    *(void *)&v274[v271[8]] = *(void *)&v277[v271[8]];
    uint64_t v249 = v271[9];
    uint64_t v250 = &v274[v249];
    v251 = &v277[v249];
    swift_retain();
    if (v218(v251, 1, v281))
    {
      sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
      memcpy(v250, v251, *(void *)(*(void *)(v252 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v250, v251, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v250, 0, 1, v281);
    }
    uint64_t v253 = v292[13];
    uint64_t v254 = *(void **)((char *)v291 + v253);
    *(void **)((char *)v286 + v253) = v254;
    uint64_t v255 = a3[6];
    *(void **)((char *)v286 + a3[5]) = *(void **)((char *)v291 + a3[5]);
    *((unsigned char *)v286 + v255) = *((unsigned char *)v291 + v255);
    uint64_t v256 = a3[7];
    uint64_t v257 = a3[8];
    uint64_t v258 = *(void **)((char *)v291 + v256);
    *(void **)((char *)v286 + v256) = v258;
    v259 = (char *)v286 + v257;
    uint64_t v260 = (char *)v291 + v257;
    uint64_t v261 = *((void *)v260 + 1);
    *(void *)v259 = *(void *)v260;
    *((void *)v259 + 1) = v261;
    v259[16] = v260[16];
    id v262 = v254;
    swift_retain();
    id v263 = v258;
    swift_retain();
  }
  swift_retain();
  return v27;
}

void sub_255EBB220(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_255EBB284(id *a1, uint64_t a2)
{
  int v3 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v4 = (id *)((char *)a1 + v3[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = (char *)v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v61 = *(void *)(v7 - 8);
  unint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v6, v7);
  }
  uint64_t v9 = (char *)v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)((char *)v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = (char *)v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  if (!v58(v12, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v13);
  }
  uint64_t v60 = v13;

  uint64_t v14 = (char *)v4 + v5[22];
  if (!v8(v14, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v7);
  }
  uint64_t v15 = (char *)a1 + v3[6];
  uint64_t v16 = sub_255EEE280();
  uint64_t v54 = *(void (**)(char *))(*(void *)(v16 - 8) + 8);
  uint64_t v55 = v16;
  v54(v15);

  uint64_t v17 = (char *)a1 + v3[8];
  uint64_t v18 = sub_255EEE200();
  id v56 = *(void (**)(char *))(*(void *)(v18 - 8) + 8);
  uint64_t v57 = v18;
  v56(v17);
  uint64_t v59 = v3;
  uint64_t v19 = (char *)a1 + v3[9];
  swift_bridgeObjectRelease();
  uint64_t v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v22 = &v21[v5[13]];
  if (!v8(v22, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v7);
  }
  uint64_t v23 = &v21[v5[14]];
  if (!v8(v23, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v23, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v24 = (uint64_t *)&v21[v5[19]];
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_255D80D04(*v24, v25);
  }
  uint64_t v26 = &v21[v5[20]];
  if (!v58(v26, 1, v60)) {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v60);
  }

  uint64_t v27 = &v21[v5[22]];
  if (!v8(v27, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v27, v7);
  }
  ((void (*)(char *, uint64_t))v56)(&v19[v20[6]], v57);
  uint64_t v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v56)(v28, v57);

  uint64_t v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v56)(v29, v57);
  uint64_t v30 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v31 = (id *)((char *)a1 + v59[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v32 = (char *)v31 + v5[13];
  if (!v8(v32, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v7);
  }
  uint64_t v33 = (char *)v31 + v5[14];
  if (!v8(v33, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v33, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)((char *)v31 + v5[19]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_255D80D04(*v34, v35);
  }
  uint64_t v36 = (char *)v31 + v5[20];
  if (!v58(v36, 1, v60)) {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v60);
  }

  uint64_t v37 = (char *)v31 + v5[22];
  if (!v8(v37, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v37, v7);
  }
  uint64_t v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v54)((char *)v31 + v38[5], v55);
  ((void (*)(char *, uint64_t))v56)((char *)v31 + v38[6], v57);

  swift_bridgeObjectRelease();
  uint64_t v39 = (id *)((char *)a1 + v59[11]);

  uint64_t v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v54)((char *)v39 + *(int *)(v40 + 20), v55);
  ((void (*)(char *, uint64_t))v56)((char *)v39 + *(int *)(v40 + 24), v57);
  char v41 = (char *)a1 + v59[12];
  swift_bridgeObjectRelease();
  uint64_t v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  unint64_t v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v44 = &v43[v5[13]];
  if (!v8(v44, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v7);
  }
  uint64_t v45 = &v43[v5[14]];
  if (!v8(v45, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t *)&v43[v5[19]];
  unint64_t v47 = v46[1];
  if (v47 >> 60 != 15) {
    sub_255D80D04(*v46, v47);
  }
  uint64_t v48 = &v43[v5[20]];
  if (!v58(v48, 1, v60)) {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v60);
  }

  uint64_t v49 = &v43[v5[22]];
  if (!v8(v49, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v7);
  }
  ((void (*)(char *, uint64_t))v54)(&v41[v42[6]], v55);
  ((void (*)(char *, uint64_t))v56)(&v41[v42[7]], v57);
  swift_release();
  uint64_t v50 = &v41[v42[9]];
  if (!v8(v50, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v50, v7);
  }

  swift_release();
  swift_release();
  return swift_release();
}

void **sub_255EBBD20(void **a1, void **a2, int *a3)
{
  uint64_t v286 = *a2;
  *a1 = *a2;
  uint64_t v290 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v291 = a2;
  uint64_t v5 = v290[5];
  uint64_t v288 = a1;
  uint64_t v6 = (void **)((char *)a1 + v5);
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
  *uint64_t v6 = *(void **)((char *)a2 + v5);
  v6[1] = v8;
  uint64_t v10 = *(uint64_t *)((char *)a2 + v5 + 16);
  uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 24);
  v6[2] = v10;
  v6[3] = v9;
  uint64_t v11 = *((void *)v7 + 5);
  v6[4] = *((void *)v7 + 4);
  v6[5] = v11;
  uint64_t v12 = *((void *)v7 + 7);
  v6[6] = *((void *)v7 + 6);
  v6[7] = v12;
  uint64_t v13 = *((void *)v7 + 9);
  v6[8] = *((void *)v7 + 8);
  v6[9] = v13;
  uint64_t v14 = *((void *)v7 + 11);
  v6[10] = *((void *)v7 + 10);
  v6[11] = v14;
  uint64_t v283 = (void *)*((void *)v7 + 12);
  v284 = (void *)*((void *)v7 + 13);
  v6[12] = v283;
  v6[13] = v284;
  uint64_t v293 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v15 = v293[13];
  uint64_t v289 = (char *)v6 + v15;
  uint64_t v16 = &v7[v15];
  uint64_t v17 = sub_255EEE100();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  id v20 = v286;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v21 = v283;
  id v22 = v284;
  uint64_t v282 = v18;
  if (v19(v16, 1, v17))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v289, v16, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v289, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v289, 0, 1, v17);
  }
  uint64_t v24 = v293[14];
  unint64_t v25 = (char *)v6 + v24;
  uint64_t v26 = &v7[v24];
  if (v19(&v7[v24], 1, v17))
  {
    uint64_t v27 = v17;
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v25, v26, v17);
    uint64_t v27 = v17;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v25, 0, 1, v17);
  }
  uint64_t v29 = v293[15];
  uint64_t v30 = (void *)((char *)v6 + v29);
  uint64_t v31 = &v7[v29];
  uint64_t v32 = *((void *)v31 + 1);
  *uint64_t v30 = *(void *)v31;
  v30[1] = v32;
  uint64_t v33 = v293[16];
  uint64_t v34 = (void *)((char *)v6 + v33);
  unint64_t v35 = &v7[v33];
  uint64_t v36 = *((void *)v35 + 1);
  *uint64_t v34 = *(void *)v35;
  v34[1] = v36;
  *((unsigned char *)v6 + v293[17]) = v7[v293[17]];
  *((unsigned char *)v6 + v293[18]) = v7[v293[18]];
  uint64_t v37 = v293[19];
  uint64_t v38 = (char *)v6 + v37;
  uint64_t v39 = (uint64_t *)&v7[v37];
  unint64_t v40 = *(void *)&v7[v37 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  }
  else
  {
    uint64_t v41 = *v39;
    sub_255D80890(*v39, v40);
    *(void *)uint64_t v38 = v41;
    *((void *)v38 + 1) = v40;
  }
  uint64_t v42 = v293[20];
  unint64_t v43 = (char *)v6 + v42;
  uint64_t v44 = &v7[v42];
  uint64_t v45 = sub_255EEDF60();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v281 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  uint64_t v277 = v45;
  if (v281(v44, 1, v45))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  uint64_t v48 = v293[21];
  uint64_t v49 = *(void **)&v7[v48];
  *(void *)((char *)v6 + v48) = v49;
  uint64_t v50 = v293[22];
  uint64_t v51 = (char *)v6 + v50;
  uint64_t v52 = &v7[v50];
  id v53 = v49;
  v292 = v19;
  uint64_t v276 = v46;
  uint64_t v278 = v27;
  if (v19(v52, 1, v27))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v51, v52, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v51, 0, 1, v27);
  }
  uint64_t v55 = v290[6];
  id v56 = (char *)v288 + v55;
  uint64_t v57 = (char *)v291 + v55;
  uint64_t v58 = sub_255EEE280();
  uint64_t v279 = *(void (**)(char *, char *))(*(void *)(v58 - 8) + 16);
  uint64_t v280 = v58;
  v279(v56, v57);
  uint64_t v59 = v290[7];
  uint64_t v60 = *(void **)((char *)v291 + v59);
  *(void **)((char *)v288 + v59) = v60;
  uint64_t v61 = v290[8];
  uint64_t v62 = (char *)v288 + v61;
  uint64_t v63 = (char *)v291 + v61;
  uint64_t v64 = sub_255EEE200();
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16);
  id v66 = v60;
  uint64_t v285 = v65;
  uint64_t v287 = v64;
  v65(v62, v63, v64);
  uint64_t v67 = v290[9];
  uint64_t v68 = (char *)v288 + v67;
  id v69 = (char *)v291 + v67;
  uint64_t v70 = *(uint64_t *)((char *)v291 + v67 + 8);
  *(void *)uint64_t v68 = *(void **)((char *)v291 + v67);
  *((void *)v68 + 1) = v70;
  uint64_t v267 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v270 = v69;
  uint64_t v71 = v267[5];
  uint64_t v273 = v68;
  uint64_t v72 = &v68[v71];
  uint64_t v73 = &v69[v71];
  uint64_t v74 = *(void *)&v69[v71 + 8];
  *(void *)uint64_t v72 = *(void *)&v69[v71];
  *((void *)v72 + 1) = v74;
  uint64_t v76 = *(void *)&v69[v71 + 16];
  uint64_t v75 = *(void *)&v69[v71 + 24];
  *((void *)v72 + 2) = v76;
  *((void *)v72 + 3) = v75;
  uint64_t v77 = *((void *)v73 + 5);
  *((void *)v72 + 4) = *((void *)v73 + 4);
  *((void *)v72 + 5) = v77;
  uint64_t v78 = *((void *)v73 + 7);
  *((void *)v72 + 6) = *((void *)v73 + 6);
  *((void *)v72 + 7) = v78;
  uint64_t v79 = *((void *)v73 + 9);
  *((void *)v72 + 8) = *((void *)v73 + 8);
  *((void *)v72 + 9) = v79;
  uint64_t v80 = *((void *)v73 + 11);
  *((void *)v72 + 10) = *((void *)v73 + 10);
  *((void *)v72 + 11) = v80;
  uint64_t v81 = (void *)*((void *)v73 + 12);
  id v263 = (void *)*((void *)v73 + 13);
  *((void *)v72 + 12) = v81;
  *((void *)v72 + 13) = v263;
  uint64_t v82 = v293[13];
  __dst = &v72[v82];
  uint64_t v83 = &v73[v82];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v84 = v81;
  id v85 = v263;
  if (v19(v83, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v83, *(void *)(*(void *)(v86 - 8) + 64));
    uint64_t v87 = v282;
  }
  else
  {
    uint64_t v87 = v282;
    (*(void (**)(char *, char *, uint64_t))(v282 + 16))(__dst, v83, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(__dst, 0, 1, v278);
  }
  uint64_t v88 = v293[14];
  uint64_t v89 = &v72[v88];
  uint64_t v90 = &v73[v88];
  if (v19(&v73[v88], 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v89, v90, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v89, 0, 1, v278);
  }
  uint64_t v92 = v293[15];
  uint64_t v93 = &v72[v92];
  uint64_t v94 = &v73[v92];
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)uint64_t v93 = *(void *)v94;
  *((void *)v93 + 1) = v95;
  uint64_t v96 = v293[16];
  uint64_t v97 = &v72[v96];
  uint64_t v98 = &v73[v96];
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = v99;
  v72[v293[17]] = v73[v293[17]];
  v72[v293[18]] = v73[v293[18]];
  uint64_t v100 = v293[19];
  int v101 = &v72[v100];
  uint64_t v102 = (uint64_t *)&v73[v100];
  unint64_t v103 = *(void *)&v73[v100 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v103 >> 60 == 15)
  {
    *(_OWORD *)int v101 = *(_OWORD *)v102;
  }
  else
  {
    uint64_t v104 = *v102;
    sub_255D80890(*v102, v103);
    *(void *)int v101 = v104;
    *((void *)v101 + 1) = v103;
  }
  uint64_t v105 = v293[20];
  unint64_t v106 = &v72[v105];
  uint64_t v107 = &v73[v105];
  if (v281(&v73[v105], 1, v277))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v276 + 16))(v106, v107, v277);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v276 + 56))(v106, 0, 1, v277);
  }
  uint64_t v109 = v293[21];
  uint64_t v110 = *(void **)&v73[v109];
  *(void *)&v72[v109] = v110;
  uint64_t v111 = v293[22];
  uint64_t v112 = &v72[v111];
  uint64_t v113 = &v73[v111];
  id v114 = v110;
  if (v19(v113, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v112, v113, *(void *)(*(void *)(v115 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v112, v113, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v112, 0, 1, v278);
  }
  v285(&v273[v267[6]], &v270[v267[6]], v287);
  uint64_t v116 = v267[7];
  id v117 = &v273[v116];
  uint64_t v118 = &v270[v116];
  v285(&v273[v116], &v270[v116], v287);
  uint64_t v119 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v120 = *(void **)&v118[v119];
  *(void *)&v117[v119] = v120;
  uint64_t v121 = v267[8];
  uint64_t v122 = &v273[v121];
  uint64_t v123 = &v270[v121];
  id v124 = v120;
  v285(v122, v123, v287);
  uint64_t v125 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v126 = *(int *)(v125 + 20);
  id v127 = *(void **)&v123[v126];
  *(void *)&v122[v126] = v127;
  uint64_t v128 = *(int *)(v125 + 24);
  uint64_t v268 = *(void **)&v123[v128];
  *(void *)&v122[v128] = v268;
  uint64_t v129 = v290[10];
  int v130 = (void **)((char *)v288 + v129);
  uint64_t v131 = (char *)v291 + v129;
  uint64_t v132 = *(uint64_t *)((char *)v291 + v129 + 8);
  *int v130 = *(void **)((char *)v291 + v129);
  v130[1] = v132;
  uint64_t v134 = *(uint64_t *)((char *)v291 + v129 + 16);
  uint64_t v133 = *(uint64_t *)((char *)v291 + v129 + 24);
  v130[2] = v134;
  v130[3] = v133;
  uint64_t v135 = *((void *)v131 + 5);
  v130[4] = *((void *)v131 + 4);
  v130[5] = v135;
  uint64_t v136 = *((void *)v131 + 7);
  v130[6] = *((void *)v131 + 6);
  v130[7] = v136;
  uint64_t v137 = *((void *)v131 + 9);
  v130[8] = *((void *)v131 + 8);
  v130[9] = v137;
  uint64_t v138 = *((void *)v131 + 11);
  v130[10] = *((void *)v131 + 10);
  v130[11] = v138;
  uint64_t v139 = (void *)*((void *)v131 + 12);
  uint64_t v271 = (void *)*((void *)v131 + 13);
  v130[12] = v139;
  v130[13] = v271;
  uint64_t v140 = v293[13];
  v274 = (char *)v130 + v140;
  uint64_t v141 = &v131[v140];
  id v142 = v127;
  id v143 = v268;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v144 = v139;
  id v145 = v271;
  if (v292(v141, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v274, v141, *(void *)(*(void *)(v146 - 8) + 64));
    uint64_t v147 = v282;
  }
  else
  {
    uint64_t v147 = v282;
    (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v274, v141, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v274, 0, 1, v278);
  }
  uint64_t v148 = v293[14];
  uint64_t v149 = (char *)v130 + v148;
  uint64_t v150 = &v131[v148];
  if (v292(&v131[v148], 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v149, v150, *(void *)(*(void *)(v151 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v149, v150, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v149, 0, 1, v278);
  }
  uint64_t v152 = v293[15];
  uint64_t v153 = (void *)((char *)v130 + v152);
  uint64_t v154 = &v131[v152];
  uint64_t v155 = *((void *)v154 + 1);
  *uint64_t v153 = *(void *)v154;
  v153[1] = v155;
  uint64_t v156 = v293[16];
  uint64_t v157 = (void *)((char *)v130 + v156);
  uint64_t v158 = &v131[v156];
  uint64_t v159 = *((void *)v158 + 1);
  *uint64_t v157 = *(void *)v158;
  v157[1] = v159;
  *((unsigned char *)v130 + v293[17]) = v131[v293[17]];
  *((unsigned char *)v130 + v293[18]) = v131[v293[18]];
  uint64_t v160 = v293[19];
  uint64_t v161 = (char *)v130 + v160;
  uint64_t v162 = (uint64_t *)&v131[v160];
  unint64_t v163 = *(void *)&v131[v160 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v163 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
  }
  else
  {
    uint64_t v164 = *v162;
    sub_255D80890(*v162, v163);
    *(void *)uint64_t v161 = v164;
    *((void *)v161 + 1) = v163;
  }
  uint64_t v165 = v293[20];
  unint64_t v166 = (char *)v130 + v165;
  uint64_t v167 = &v131[v165];
  if (v281(&v131[v165], 1, v277))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v166, v167, *(void *)(*(void *)(v168 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v276 + 16))(v166, v167, v277);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v276 + 56))(v166, 0, 1, v277);
  }
  uint64_t v169 = v293[21];
  uint64_t v170 = *(void **)&v131[v169];
  *(void *)((char *)v130 + v169) = v170;
  uint64_t v171 = v293[22];
  uint64_t v172 = (char *)v130 + v171;
  uint64_t v173 = &v131[v171];
  id v174 = v170;
  if (v292(v173, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v172, v173, *(void *)(*(void *)(v175 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v147 + 16))(v172, v173, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v172, 0, 1, v278);
  }
  uint64_t v176 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v279)((char *)v130 + v176[5], &v131[v176[5]], v280);
  v285((char *)v130 + v176[6], &v131[v176[6]], v287);
  uint64_t v177 = v176[7];
  uint64_t v178 = *(void **)&v131[v177];
  *(void *)((char *)v130 + v177) = v178;
  uint64_t v179 = v176[8];
  uint64_t v180 = *(void **)&v131[v179];
  *(void *)((char *)v130 + v179) = v180;
  uint64_t v181 = v176[9];
  uint64_t v182 = (void *)((char *)v130 + v181);
  uint64_t v183 = &v131[v181];
  uint64_t v184 = *((void *)v183 + 1);
  void *v182 = *(void *)v183;
  v182[1] = v184;
  uint64_t v185 = v290[11];
  uint64_t v186 = (char *)v288 + v185;
  uint64_t v187 = (char *)v291 + v185;
  uint64_t v188 = *(void **)((char *)v291 + v185);
  *(void **)((char *)v288 + v185) = v188;
  uint64_t v189 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v190 = *(int *)(v189 + 20);
  v191 = &v186[v190];
  uint64_t v192 = &v187[v190];
  id v193 = v178;
  id v194 = v180;
  swift_bridgeObjectRetain();
  id v195 = v188;
  ((void (*)(char *, char *, uint64_t))v279)(v191, v192, v280);
  v285(&v186[*(int *)(v189 + 24)], &v187[*(int *)(v189 + 24)], v287);
  uint64_t v196 = v290[12];
  id v197 = (char *)v288 + v196;
  id v198 = (char *)v291 + v196;
  uint64_t v199 = *(uint64_t *)((char *)v291 + v196 + 8);
  *(void *)id v197 = *(void **)((char *)v291 + v196);
  *((void *)v197 + 1) = v199;
  uint64_t v269 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v272 = v197;
  uint64_t v200 = v269[5];
  uint64_t v201 = &v197[v200];
  v275 = v198;
  uint64_t v202 = &v198[v200];
  uint64_t v203 = *(void *)&v198[v200];
  uint64_t v204 = *((void *)v202 + 1);
  *uint64_t v201 = v203;
  v201[1] = v204;
  uint64_t v205 = *((void *)v202 + 3);
  v201[2] = *((void *)v202 + 2);
  v201[3] = v205;
  uint64_t v206 = *((void *)v202 + 5);
  v201[4] = *((void *)v202 + 4);
  v201[5] = v206;
  uint64_t v207 = *((void *)v202 + 7);
  v201[6] = *((void *)v202 + 6);
  v201[7] = v207;
  uint64_t v208 = *((void *)v202 + 9);
  v201[8] = *((void *)v202 + 8);
  v201[9] = v208;
  uint64_t v209 = *((void *)v202 + 11);
  v201[10] = *((void *)v202 + 10);
  v201[11] = v209;
  uint64_t v210 = (void *)*((void *)v202 + 12);
  uint64_t v264 = (void *)*((void *)v202 + 13);
  v201[12] = v210;
  v201[13] = v264;
  uint64_t v211 = v293[13];
  __dsta = (char *)v201 + v211;
  uint64_t v212 = &v202[v211];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v213 = v210;
  id v214 = v264;
  unint64_t v215 = v292;
  if (v292(v212, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(__dsta, v212, *(void *)(*(void *)(v216 - 8) + 64));
    uint64_t v217 = v282;
  }
  else
  {
    uint64_t v217 = v282;
    (*(void (**)(char *, char *, uint64_t))(v282 + 16))(__dsta, v212, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(__dsta, 0, 1, v278);
  }
  uint64_t v218 = v293[14];
  uint64_t v219 = (char *)v201 + v218;
  uint64_t v220 = &v202[v218];
  if (v292(&v202[v218], 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v219, v220, *(void *)(*(void *)(v221 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v219, v220, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v219, 0, 1, v278);
  }
  uint64_t v222 = v293[15];
  v223 = (void *)((char *)v201 + v222);
  uint64_t v224 = &v202[v222];
  uint64_t v225 = *((void *)v224 + 1);
  void *v223 = *(void *)v224;
  v223[1] = v225;
  uint64_t v226 = v293[16];
  v227 = (void *)((char *)v201 + v226);
  uint64_t v228 = &v202[v226];
  uint64_t v229 = *((void *)v228 + 1);
  void *v227 = *(void *)v228;
  v227[1] = v229;
  *((unsigned char *)v201 + v293[17]) = v202[v293[17]];
  *((unsigned char *)v201 + v293[18]) = v202[v293[18]];
  uint64_t v230 = v293[19];
  v231 = (char *)v201 + v230;
  uint64_t v232 = (uint64_t *)&v202[v230];
  unint64_t v233 = *(void *)&v202[v230 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v233 >> 60 == 15)
  {
    *(_OWORD *)v231 = *(_OWORD *)v232;
  }
  else
  {
    uint64_t v234 = *v232;
    sub_255D80890(*v232, v233);
    *(void *)v231 = v234;
    *((void *)v231 + 1) = v233;
  }
  uint64_t v235 = v293[20];
  unint64_t v236 = (char *)v201 + v235;
  uint64_t v237 = &v202[v235];
  if (v281(&v202[v235], 1, v277))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v236, v237, *(void *)(*(void *)(v238 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v276 + 16))(v236, v237, v277);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v276 + 56))(v236, 0, 1, v277);
    unint64_t v215 = v292;
  }
  uint64_t v239 = v293[21];
  uint64_t v240 = *(void **)&v202[v239];
  *(void *)((char *)v201 + v239) = v240;
  uint64_t v241 = v293[22];
  uint64_t v242 = (char *)v201 + v241;
  uint64_t v243 = &v202[v241];
  id v244 = v240;
  if (v215(v243, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v242, v243, *(void *)(*(void *)(v245 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v242, v243, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v242, 0, 1, v278);
  }
  ((void (*)(char *, char *, uint64_t))v279)(&v272[v269[6]], &v275[v269[6]], v280);
  v285(&v272[v269[7]], &v275[v269[7]], v287);
  *(void *)&v272[v269[8]] = *(void *)&v275[v269[8]];
  uint64_t v246 = v269[9];
  id v247 = &v272[v246];
  uint64_t v248 = &v275[v246];
  swift_retain();
  if (v215(v248, 1, v278))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v247, v248, *(void *)(*(void *)(v249 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v247, v248, v278);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v247, 0, 1, v278);
  }
  uint64_t v250 = v290[13];
  v251 = *(void **)((char *)v291 + v250);
  *(void **)((char *)v288 + v250) = v251;
  uint64_t v252 = a3[6];
  *(void **)((char *)v288 + a3[5]) = *(void **)((char *)v291 + a3[5]);
  *((unsigned char *)v288 + v252) = *((unsigned char *)v291 + v252);
  uint64_t v253 = a3[7];
  uint64_t v254 = a3[8];
  uint64_t v255 = *(void **)((char *)v291 + v253);
  *(void **)((char *)v288 + v253) = v255;
  uint64_t v256 = (char *)v288 + v254;
  uint64_t v257 = (char *)v291 + v254;
  uint64_t v258 = *((void *)v257 + 1);
  *(void *)uint64_t v256 = *(void *)v257;
  *((void *)v256 + 1) = v258;
  v256[16] = v257[16];
  id v259 = v251;
  swift_retain();
  id v260 = v255;
  swift_retain();
  swift_retain();
  return v288;
}

void **sub_255EBD3F4(void **a1, void **a2, int *a3)
{
  int v3 = a2;
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  id v7 = v5;

  uint64_t v301 = (int *)type metadata accessor for MedicalIDDataViewModel();
  v302 = v3;
  uint64_t v8 = v301[5];
  uint64_t v303 = a1;
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (void **)((char *)v3 + v8);
  *(void *)uint64_t v9 = *(void **)((char *)v3 + v8);
  *((void *)v9 + 1) = *(void **)((char *)v3 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 2) = v10[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 3) = v10[3];
  *((void *)v9 + 4) = v10[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 5) = v10[5];
  *((void *)v9 + 6) = v10[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 7) = v10[7];
  *((void *)v9 + 8) = v10[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 9) = v10[9];
  *((void *)v9 + 10) = v10[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 11) = v10[11];
  uint64_t v11 = (void *)*((void *)v9 + 12);
  uint64_t v12 = (void *)v10[12];
  *((void *)v9 + 12) = v12;
  id v13 = v12;

  uint64_t v14 = (void *)*((void *)v9 + 13);
  uint64_t v15 = (void *)v10[13];
  *((void *)v9 + 13) = v15;
  id v16 = v15;

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v9[v18];
  id v20 = (char *)v10 + v18;
  uint64_t v21 = sub_255EEE100();
  uint64_t v305 = *(void *)(v21 - 8);
  id v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v305 + 48);
  LODWORD(v3) = v22(v19, 1, v21);
  v306 = v22;
  int v23 = v22(v20, 1, v21);
  if (v3)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v19, v21);
LABEL_6:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v19, v20, v21);
LABEL_7:
  uint64_t v25 = v17[14];
  uint64_t v26 = &v9[v25];
  uint64_t v27 = (char *)v10 + v25;
  int v28 = v22(&v9[v25], 1, v21);
  int v29 = v22(v27, 1, v21);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v26, v27, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v26, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v26, v21);
LABEL_12:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v26, v27, v21);
LABEL_13:
  uint64_t v31 = v17[15];
  uint64_t v32 = &v9[v31];
  uint64_t v33 = (void *)((char *)v10 + v31);
  *(void *)uint64_t v32 = *v33;
  *((void *)v32 + 1) = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = v17[16];
  unint64_t v35 = &v9[v34];
  uint64_t v36 = (void *)((char *)v10 + v34);
  *(void *)unint64_t v35 = *v36;
  *((void *)v35 + 1) = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[v17[17]] = *((unsigned char *)v10 + v17[17]);
  v9[v17[18]] = *((unsigned char *)v10 + v17[18]);
  uint64_t v37 = v17[19];
  uint64_t v38 = (uint64_t *)&v9[v37];
  uint64_t v39 = (void *)((char *)v10 + v37);
  unint64_t v40 = *(void *)((char *)v10 + v37 + 8);
  if (*(void *)&v9[v37 + 8] >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      uint64_t v41 = *v39;
      sub_255D80890(*v39, v40);
      *uint64_t v38 = v41;
      v38[1] = v40;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v40 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v38);
LABEL_18:
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    goto LABEL_20;
  }
  uint64_t v42 = *v39;
  sub_255D80890(*v39, v40);
  uint64_t v43 = *v38;
  unint64_t v44 = v38[1];
  *uint64_t v38 = v42;
  v38[1] = v40;
  sub_255D80D04(v43, v44);
LABEL_20:
  uint64_t v45 = v17[20];
  uint64_t v46 = &v9[v45];
  uint64_t v47 = (char *)v10 + v45;
  uint64_t v48 = sub_255EEDF60();
  uint64_t v295 = *(void *)(v48 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v295 + 48);
  int v50 = v49(v46, 1, v48);
  uint64_t v304 = v48;
  uint64_t v299 = v49;
  int v51 = v49(v47, 1, v48);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v46, 0, 1, v48);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v46, v48);
LABEL_25:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v46, v47, v48);
LABEL_26:
  uint64_t v53 = v17[21];
  uint64_t v54 = *(void **)&v9[v53];
  uint64_t v55 = *(void **)((char *)v10 + v53);
  *(void *)&v9[v53] = v55;
  id v56 = v55;

  uint64_t v57 = v17[22];
  uint64_t v58 = &v9[v57];
  uint64_t v59 = (char *)v10 + v57;
  int v60 = v306(&v9[v57], 1, v21);
  int v61 = v306(v59, 1, v21);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v58, v59, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v58, 0, 1, v21);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v58, v21);
LABEL_31:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v58, v59, v21);
LABEL_32:
  uint64_t v63 = v301[6];
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (uint64_t)v302 + v63;
  uint64_t v298 = sub_255EEE280();
  uint64_t v294 = *(void (**)(char *, uint64_t))(*(void *)(v298 - 8) + 24);
  v294(v64, v65);
  uint64_t v66 = v301[7];
  uint64_t v67 = *(void **)((char *)v302 + v66);
  uint64_t v68 = *(void **)((char *)a1 + v66);
  *(void **)((char *)a1 + v66) = v67;
  id v69 = v67;

  uint64_t v70 = v301[8];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (uint64_t)v302 + v70;
  uint64_t v73 = sub_255EEE200();
  v296 = (void (**)(char *, uint64_t))(*(void *)(v73 - 8) + 24);
  uint64_t v297 = v73;
  uint64_t v300 = *v296;
  (*v296)(v71, v72);
  uint64_t v74 = v301[9];
  uint64_t v75 = (void **)((char *)a1 + v74);
  uint64_t v76 = (uint64_t)v302 + v74;
  void *v75 = *(void **)((char *)v302 + v74);
  v75[1] = *(void **)((char *)v302 + v74 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v288 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v289 = v76;
  uint64_t v77 = v288[5];
  v291 = v75;
  uint64_t v78 = (char *)v75 + v77;
  uint64_t v79 = (void *)(v76 + v77);
  *(void *)uint64_t v78 = *(void *)(v76 + v77);
  *((void *)v78 + 1) = *(void *)(v76 + v77 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 2) = v79[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 3) = v79[3];
  *((void *)v78 + 4) = v79[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 5) = v79[5];
  *((void *)v78 + 6) = v79[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 7) = v79[7];
  *((void *)v78 + 8) = v79[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 9) = v79[9];
  *((void *)v78 + 10) = v79[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v78 + 11) = v79[11];
  uint64_t v80 = (void *)*((void *)v78 + 12);
  uint64_t v81 = (void *)v79[12];
  *((void *)v78 + 12) = v81;
  id v82 = v81;

  uint64_t v83 = (void *)*((void *)v78 + 13);
  id v84 = (void *)v79[13];
  *((void *)v78 + 13) = v84;
  id v85 = v84;

  uint64_t v86 = v17[13];
  uint64_t v87 = &v78[v86];
  uint64_t v88 = (char *)v79 + v86;
  LODWORD(v76) = v306(&v78[v86], 1, v21);
  int v89 = v306(v88, 1, v21);
  if (v76)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v87, v88, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v87, 0, 1, v21);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v87, v21);
LABEL_37:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v87, v88, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v87, v88, v21);
LABEL_38:
  uint64_t v91 = v17[14];
  uint64_t v92 = &v78[v91];
  uint64_t v93 = (char *)v79 + v91;
  int v94 = v306(&v78[v91], 1, v21);
  int v95 = v306(v93, 1, v21);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v92, v93, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v92, 0, 1, v21);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v92, v21);
LABEL_43:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v92, v93, v21);
LABEL_44:
  uint64_t v97 = v17[15];
  uint64_t v98 = &v78[v97];
  uint64_t v99 = (void *)((char *)v79 + v97);
  *(void *)uint64_t v98 = *v99;
  *((void *)v98 + 1) = v99[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v17[16];
  int v101 = &v78[v100];
  uint64_t v102 = (void *)((char *)v79 + v100);
  *(void *)int v101 = *v102;
  *((void *)v101 + 1) = v102[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v78[v17[17]] = *((unsigned char *)v79 + v17[17]);
  v78[v17[18]] = *((unsigned char *)v79 + v17[18]);
  uint64_t v103 = v17[19];
  uint64_t v104 = (uint64_t *)&v78[v103];
  uint64_t v105 = (void *)((char *)v79 + v103);
  unint64_t v106 = *(void *)((char *)v79 + v103 + 8);
  if (*(void *)&v78[v103 + 8] >> 60 == 15)
  {
    if (v106 >> 60 != 15)
    {
      uint64_t v107 = *v105;
      sub_255D80890(v107, v106);
      *uint64_t v104 = v107;
      v104[1] = v106;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  if (v106 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v104);
LABEL_49:
    *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
    goto LABEL_51;
  }
  uint64_t v108 = *v105;
  sub_255D80890(v108, v106);
  uint64_t v109 = *v104;
  unint64_t v110 = v104[1];
  *uint64_t v104 = v108;
  v104[1] = v106;
  sub_255D80D04(v109, v110);
LABEL_51:
  uint64_t v111 = v17[20];
  uint64_t v112 = &v78[v111];
  uint64_t v113 = (char *)v79 + v111;
  int v114 = v49(&v78[v111], 1, v304);
  int v115 = v49(v113, 1, v304);
  if (v114)
  {
    uint64_t v116 = v21;
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v112, v113, v304);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v112, 0, 1, v304);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v116 = v21;
  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v112, v304);
LABEL_56:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v112, v113, *(void *)(*(void *)(v117 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v112, v113, v304);
LABEL_57:
  uint64_t v118 = v17[21];
  uint64_t v119 = *(void **)&v78[v118];
  uint64_t v120 = *(void **)((char *)v79 + v118);
  *(void *)&v78[v118] = v120;
  id v121 = v120;

  uint64_t v122 = v17[22];
  uint64_t v123 = &v78[v122];
  id v124 = (char *)v79 + v122;
  int v125 = v306(&v78[v122], 1, v116);
  int v126 = v306(v124, 1, v116);
  if (v125)
  {
    if (!v126)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v123, v124, v116);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v123, 0, 1, v116);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v126)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v123, v116);
LABEL_62:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v123, v124, *(void *)(*(void *)(v127 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v123, v124, v116);
LABEL_63:
  ((void (*)(char *, uint64_t, uint64_t))v300)((char *)v291 + v288[6], v289 + v288[6], v297);
  uint64_t v128 = v288[7];
  uint64_t v129 = (char *)v291 + v128;
  uint64_t v130 = v289 + v128;
  ((void (*)(char *, uint64_t, uint64_t))v300)((char *)v291 + v128, v289 + v128, v297);
  uint64_t v131 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v132 = *(void **)(v130 + v131);
  uint64_t v133 = *(void **)&v129[v131];
  *(void *)&v129[v131] = v132;
  id v134 = v132;

  uint64_t v135 = v288[8];
  uint64_t v136 = (char *)v291 + v135;
  uint64_t v137 = v289 + v135;
  ((void (*)(char *, uint64_t, uint64_t))v300)((char *)v291 + v135, v289 + v135, v297);
  uint64_t v138 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v139 = *(int *)(v138 + 20);
  uint64_t v140 = *(void **)(v137 + v139);
  uint64_t v141 = *(void **)&v136[v139];
  *(void *)&v136[v139] = v140;
  id v142 = v140;

  uint64_t v143 = *(int *)(v138 + 24);
  id v144 = *(void **)(v137 + v143);
  id v145 = *(void **)&v136[v143];
  *(void *)&v136[v143] = v144;
  id v146 = v144;

  uint64_t v147 = v301[10];
  uint64_t v148 = (char *)v303 + v147;
  uint64_t v149 = (void **)((char *)v302 + v147);
  *(void *)uint64_t v148 = *(void **)((char *)v302 + v147);
  *((void *)v148 + 1) = *(void **)((char *)v302 + v147 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v148 + 2) = v149[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v148 + 3) = v149[3];
  *((void *)v148 + 4) = v149[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v148 + 5) = v149[5];
  *((void *)v148 + 6) = v149[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v148 + 7) = v149[7];
  *((void *)v148 + 8) = v149[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v148 + 9) = v149[9];
  *((void *)v148 + 10) = v149[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v148 + 11) = v149[11];
  uint64_t v150 = (void *)*((void *)v148 + 12);
  uint64_t v151 = (void *)v149[12];
  *((void *)v148 + 12) = v151;
  id v152 = v151;

  uint64_t v153 = (void *)*((void *)v148 + 13);
  uint64_t v154 = (void *)v149[13];
  *((void *)v148 + 13) = v154;
  id v155 = v154;

  uint64_t v156 = v17[13];
  uint64_t v157 = &v148[v156];
  uint64_t v158 = (char *)v149 + v156;
  LODWORD(v137) = v306(&v148[v156], 1, v116);
  int v159 = v306(v158, 1, v116);
  if (v137)
  {
    if (!v159)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v157, v158, v116);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v157, 0, 1, v116);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v159)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v157, v116);
LABEL_68:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v157, v158, *(void *)(*(void *)(v160 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v157, v158, v116);
LABEL_69:
  uint64_t v161 = v17[14];
  uint64_t v162 = &v148[v161];
  unint64_t v163 = (char *)v149 + v161;
  int v164 = v306(&v148[v161], 1, v116);
  int v165 = v306(v163, 1, v116);
  if (v164)
  {
    if (!v165)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v162, v163, v116);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v162, 0, 1, v116);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v165)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v162, v116);
LABEL_74:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v162, v163, *(void *)(*(void *)(v166 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v162, v163, v116);
LABEL_75:
  uint64_t v167 = v17[15];
  uint64_t v168 = &v148[v167];
  uint64_t v169 = (void *)((char *)v149 + v167);
  *(void *)uint64_t v168 = *v169;
  *((void *)v168 + 1) = v169[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v170 = v17[16];
  uint64_t v171 = &v148[v170];
  uint64_t v172 = (void *)((char *)v149 + v170);
  *(void *)uint64_t v171 = *v172;
  *((void *)v171 + 1) = v172[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v148[v17[17]] = *((unsigned char *)v149 + v17[17]);
  v148[v17[18]] = *((unsigned char *)v149 + v17[18]);
  uint64_t v173 = v17[19];
  id v174 = (uint64_t *)&v148[v173];
  uint64_t v175 = (void *)((char *)v149 + v173);
  unint64_t v176 = *(void *)((char *)v149 + v173 + 8);
  if (*(void *)&v148[v173 + 8] >> 60 == 15)
  {
    if (v176 >> 60 != 15)
    {
      uint64_t v177 = *v175;
      sub_255D80890(*v175, v176);
      uint64_t *v174 = v177;
      v174[1] = v176;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  if (v176 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v174);
LABEL_80:
    *(_OWORD *)id v174 = *(_OWORD *)v175;
    goto LABEL_82;
  }
  uint64_t v178 = *v175;
  sub_255D80890(*v175, v176);
  uint64_t v179 = *v174;
  unint64_t v180 = v174[1];
  uint64_t *v174 = v178;
  v174[1] = v176;
  sub_255D80D04(v179, v180);
LABEL_82:
  uint64_t v181 = v17[20];
  uint64_t v182 = &v148[v181];
  uint64_t v183 = (char *)v149 + v181;
  int v184 = v299(&v148[v181], 1, v304);
  int v185 = v299(v183, 1, v304);
  if (v184)
  {
    if (!v185)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v182, v183, v304);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v182, 0, 1, v304);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v182, v304);
LABEL_87:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v182, v183, *(void *)(*(void *)(v186 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v182, v183, v304);
LABEL_88:
  uint64_t v187 = v17[21];
  uint64_t v188 = *(void **)&v148[v187];
  uint64_t v189 = *(void **)((char *)v149 + v187);
  *(void *)&v148[v187] = v189;
  id v190 = v189;

  uint64_t v191 = v17[22];
  uint64_t v192 = &v148[v191];
  id v193 = (char *)v149 + v191;
  int v194 = v306(&v148[v191], 1, v21);
  int v195 = v306(v193, 1, v21);
  if (v194)
  {
    if (!v195)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v192, v193, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v192, 0, 1, v21);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v195)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v192, v21);
LABEL_93:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v192, v193, *(void *)(*(void *)(v196 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v192, v193, v21);
LABEL_94:
  id v197 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v294)(&v148[v197[5]], (char *)v149 + v197[5], v298);
  ((void (*)(char *, char *, uint64_t))v300)(&v148[v197[6]], (char *)v149 + v197[6], v297);
  uint64_t v198 = v197[7];
  uint64_t v199 = *(void **)&v148[v198];
  uint64_t v200 = *(void **)((char *)v149 + v198);
  *(void *)&v148[v198] = v200;
  id v201 = v200;

  uint64_t v202 = v197[8];
  uint64_t v203 = *(void **)((char *)v149 + v202);
  uint64_t v204 = *(void **)&v148[v202];
  *(void *)&v148[v202] = v203;
  id v205 = v203;

  uint64_t v206 = v197[9];
  uint64_t v207 = &v148[v206];
  uint64_t v208 = (void *)((char *)v149 + v206);
  *(void *)uint64_t v207 = *v208;
  *((void *)v207 + 1) = v208[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v209 = v301[11];
  uint64_t v210 = (void **)((char *)v303 + v209);
  uint64_t v211 = (uint64_t)v302 + v209;
  uint64_t v212 = *(void **)((char *)v302 + v209);
  id v213 = *v210;
  *uint64_t v210 = v212;
  id v214 = v212;

  uint64_t v215 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t, uint64_t))v294)((char *)v210 + *(int *)(v215 + 20), v211 + *(int *)(v215 + 20), v298);
  ((void (*)(char *, uint64_t, uint64_t))v300)((char *)v210 + *(int *)(v215 + 24), v211 + *(int *)(v215 + 24), v297);
  uint64_t v216 = v301[12];
  uint64_t v217 = (char *)v303 + v216;
  uint64_t v218 = (uint64_t)v302 + v216;
  *(void *)uint64_t v217 = *(void **)((char *)v302 + v216);
  *((void *)v217 + 1) = *(void **)((char *)v302 + v216 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v290 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v292 = v218;
  uint64_t v219 = v290[5];
  uint64_t v220 = &v217[v219];
  uint64_t v221 = (void *)(v218 + v219);
  *(void *)uint64_t v220 = *v221;
  *((void *)v220 + 1) = v221[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v220 + 2) = v221[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v220 + 3) = v221[3];
  *((void *)v220 + 4) = v221[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v220 + 5) = v221[5];
  *((void *)v220 + 6) = v221[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v220 + 7) = v221[7];
  *((void *)v220 + 8) = v221[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v220 + 9) = v221[9];
  *((void *)v220 + 10) = v221[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v220 + 11) = v221[11];
  uint64_t v222 = (void *)*((void *)v220 + 12);
  v223 = (void *)v221[12];
  *((void *)v220 + 12) = v223;
  id v224 = v223;

  uint64_t v225 = (void *)*((void *)v220 + 13);
  uint64_t v226 = (void *)v221[13];
  *((void *)v220 + 13) = v226;
  id v227 = v226;

  uint64_t v228 = v17[13];
  uint64_t v229 = &v220[v228];
  uint64_t v230 = (char *)v221 + v228;
  LODWORD(v211) = v306(&v220[v228], 1, v21);
  int v231 = v306(v230, 1, v21);
  if (v211)
  {
    if (!v231)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v229, v230, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v229, 0, 1, v21);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v231)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v229, v21);
LABEL_99:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v229, v230, *(void *)(*(void *)(v232 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v229, v230, v21);
LABEL_100:
  uint64_t v233 = v17[14];
  uint64_t v234 = &v220[v233];
  uint64_t v235 = (char *)v221 + v233;
  int v236 = v306(&v220[v233], 1, v21);
  int v237 = v306(v235, 1, v21);
  if (v236)
  {
    if (!v237)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v234, v235, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v234, 0, 1, v21);
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (v237)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v234, v21);
LABEL_105:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v234, v235, *(void *)(*(void *)(v238 - 8) + 64));
    goto LABEL_106;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v234, v235, v21);
LABEL_106:
  uint64_t v239 = v17[15];
  uint64_t v240 = &v220[v239];
  uint64_t v241 = (void *)((char *)v221 + v239);
  *(void *)uint64_t v240 = *v241;
  *((void *)v240 + 1) = v241[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v242 = v17[16];
  uint64_t v243 = &v220[v242];
  id v244 = (void *)((char *)v221 + v242);
  *(void *)uint64_t v243 = *v244;
  *((void *)v243 + 1) = v244[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v220[v17[17]] = *((unsigned char *)v221 + v17[17]);
  v220[v17[18]] = *((unsigned char *)v221 + v17[18]);
  uint64_t v245 = v17[19];
  uint64_t v246 = (uint64_t *)&v220[v245];
  id v247 = (void *)((char *)v221 + v245);
  unint64_t v248 = *(void *)((char *)v221 + v245 + 8);
  if (*(void *)&v220[v245 + 8] >> 60 == 15)
  {
    if (v248 >> 60 != 15)
    {
      uint64_t v249 = *v247;
      sub_255D80890(v249, v248);
      *uint64_t v246 = v249;
      v246[1] = v248;
      goto LABEL_113;
    }
    goto LABEL_111;
  }
  if (v248 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v246);
LABEL_111:
    *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
    goto LABEL_113;
  }
  uint64_t v250 = *v247;
  sub_255D80890(v250, v248);
  uint64_t v251 = *v246;
  unint64_t v252 = v246[1];
  *uint64_t v246 = v250;
  v246[1] = v248;
  sub_255D80D04(v251, v252);
LABEL_113:
  uint64_t v253 = v17[20];
  uint64_t v254 = &v220[v253];
  uint64_t v255 = (char *)v221 + v253;
  int v256 = v299(&v220[v253], 1, v304);
  int v257 = v299(v255, 1, v304);
  if (v256)
  {
    uint64_t v258 = v21;
    if (!v257)
    {
      (*(void (**)(char *, char *, uint64_t))(v295 + 16))(v254, v255, v304);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v295 + 56))(v254, 0, 1, v304);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  uint64_t v258 = v21;
  if (v257)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v254, v304);
LABEL_118:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v254, v255, *(void *)(*(void *)(v259 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v295 + 24))(v254, v255, v304);
LABEL_119:
  uint64_t v260 = v17[21];
  uint64_t v261 = *(void **)&v220[v260];
  id v262 = *(void **)((char *)v221 + v260);
  *(void *)&v220[v260] = v262;
  id v263 = v262;

  uint64_t v264 = v17[22];
  v265 = &v220[v264];
  uint64_t v266 = (char *)v221 + v264;
  int v267 = v306(&v220[v264], 1, v258);
  int v268 = v306(v266, 1, v258);
  if (v267)
  {
    if (!v268)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v265, v266, v258);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v265, 0, 1, v258);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v268)
  {
    (*(void (**)(char *, uint64_t))(v305 + 8))(v265, v258);
LABEL_124:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v265, v266, *(void *)(*(void *)(v269 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v265, v266, v258);
LABEL_125:
  ((void (*)(char *, uint64_t, uint64_t))v294)(&v217[v290[6]], v292 + v290[6], v298);
  ((void (*)(char *, uint64_t, uint64_t))v300)(&v217[v290[7]], v292 + v290[7], v297);
  *(void *)&v217[v290[8]] = *(void *)(v292 + v290[8]);
  swift_retain();
  swift_release();
  uint64_t v270 = v290[9];
  uint64_t v271 = &v217[v270];
  uint64_t v272 = (char *)(v292 + v270);
  int v273 = v306(&v217[v270], 1, v258);
  int v274 = v306(v272, 1, v258);
  if (!v273)
  {
    if (!v274)
    {
      (*(void (**)(char *, char *, uint64_t))(v305 + 24))(v271, v272, v258);
      goto LABEL_131;
    }
    (*(void (**)(char *, uint64_t))(v305 + 8))(v271, v258);
    goto LABEL_130;
  }
  if (v274)
  {
LABEL_130:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v271, v272, *(void *)(*(void *)(v275 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v271, v272, v258);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v271, 0, 1, v258);
LABEL_131:
  uint64_t v276 = v301[13];
  uint64_t v277 = *(void **)((char *)v302 + v276);
  uint64_t v278 = *(void **)((char *)v303 + v276);
  *(void **)((char *)v303 + v276) = v277;
  id v279 = v277;

  *(void **)((char *)v303 + a3[5]) = *(void **)((char *)v302 + a3[5]);
  swift_retain();
  swift_release();
  *((unsigned char *)v303 + a3[6]) = *((unsigned char *)v302 + a3[6]);
  uint64_t v280 = a3[7];
  uint64_t v281 = *(void **)((char *)v302 + v280);
  uint64_t v282 = *(void **)((char *)v303 + v280);
  *(void **)((char *)v303 + v280) = v281;
  id v283 = v281;

  uint64_t v284 = a3[8];
  uint64_t v285 = (char *)v303 + v284;
  uint64_t v286 = (uint64_t)v302 + v284;
  *(void **)((char *)v303 + v284) = *(void **)((char *)v302 + v284);
  swift_retain();
  swift_release();
  *((void *)v285 + 1) = *(void *)(v286 + 8);
  swift_retain();
  swift_release();
  v285[16] = *(unsigned char *)(v286 + 16);
  return v303;
}

__n128 sub_255EBF53C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v136 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v137 = a2;
  uint64_t v5 = v136[5];
  uint64_t v138 = a1;
  uint64_t v6 = (char *)a1 + v5;
  id v7 = (char *)a2 + v5;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)((char *)a2 + v5);
  *((void *)v6 + 2) = *(void *)((char *)a2 + v5 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + v5 + 24);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)((char *)a2 + v5 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)((char *)a2 + v5 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)a2 + v5 + 72);
  *((void *)v6 + 11) = *(void *)((char *)a2 + v5 + 88);
  *((_OWORD *)v6 + 6) = *(_OWORD *)((char *)a2 + v5 + 96);
  uint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v139 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v139(v11, 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  id v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  if (v139(&v7[v15], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  id v20 = &v6[v19];
  uint64_t v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v132 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  uint64_t v133 = v22;
  if (v132(v21, 1, v22))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  uint64_t v134 = v13;
  uint64_t v127 = v23;
  if (v139(&v7[v25], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = v136[6];
  uint64_t v30 = (char *)v138 + v29;
  uint64_t v31 = (char *)v137 + v29;
  uint64_t v131 = sub_255EEE280();
  uint64_t v128 = *(void (**)(char *, char *))(*(void *)(v131 - 8) + 32);
  v128(v30, v31);
  *(void *)((char *)v138 + v136[7]) = *(void *)((char *)v137 + v136[7]);
  uint64_t v32 = v136[8];
  uint64_t v33 = (char *)v138 + v32;
  uint64_t v34 = (char *)v137 + v32;
  uint64_t v35 = sub_255EEE200();
  uint64_t v129 = (void (**)(char *, char *))(*(void *)(v35 - 8) + 32);
  uint64_t v130 = v35;
  uint64_t v135 = *v129;
  (*v129)(v33, v34);
  uint64_t v36 = v136[9];
  uint64_t v37 = (char *)v138 + v36;
  uint64_t v38 = (char *)v137 + v36;
  *(_OWORD *)((char *)v138 + v36) = *(_OWORD *)((char *)v137 + v36);
  uint64_t v39 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v40 = v39[5];
  uint64_t v41 = &v37[v40];
  uint64_t v42 = &v38[v40];
  *(_OWORD *)uint64_t v41 = *(_OWORD *)&v38[v40];
  *((void *)v41 + 2) = *(void *)&v38[v40 + 16];
  *(_OWORD *)(v41 + 24) = *(_OWORD *)&v38[v40 + 24];
  *(_OWORD *)(v41 + 40) = *(_OWORD *)&v38[v40 + 40];
  *(_OWORD *)(v41 + 56) = *(_OWORD *)&v38[v40 + 56];
  *(_OWORD *)(v41 + 72) = *(_OWORD *)&v38[v40 + 72];
  *((void *)v41 + 11) = *(void *)&v38[v40 + 88];
  *((_OWORD *)v41 + 6) = *(_OWORD *)&v38[v40 + 96];
  uint64_t v43 = v8[13];
  unint64_t v44 = &v41[v43];
  uint64_t v45 = &v42[v43];
  if (v139(&v42[v43], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v44, v45, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v44, 0, 1, v12);
  }
  uint64_t v47 = v8[14];
  uint64_t v48 = &v41[v47];
  uint64_t v49 = &v42[v47];
  if (v139(&v42[v47], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v48, v49, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v48, 0, 1, v12);
  }
  *(_OWORD *)&v41[v8[15]] = *(_OWORD *)&v42[v8[15]];
  *(_OWORD *)&v41[v8[16]] = *(_OWORD *)&v42[v8[16]];
  v41[v8[17]] = v42[v8[17]];
  v41[v8[18]] = v42[v8[18]];
  *(_OWORD *)&v41[v8[19]] = *(_OWORD *)&v42[v8[19]];
  uint64_t v51 = v8[20];
  uint64_t v52 = &v41[v51];
  uint64_t v53 = &v42[v51];
  if (v132(&v42[v51], 1, v133))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v52, v53, v133);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v52, 0, 1, v133);
  }
  *(void *)&v41[v8[21]] = *(void *)&v42[v8[21]];
  uint64_t v55 = v8[22];
  id v56 = &v41[v55];
  uint64_t v57 = &v42[v55];
  if (v139(&v42[v55], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v56, v57, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v56, 0, 1, v12);
  }
  ((void (*)(char *, char *, uint64_t))v135)(&v37[v39[6]], &v38[v39[6]], v130);
  uint64_t v59 = v39[7];
  int v60 = &v37[v59];
  int v61 = &v38[v59];
  ((void (*)(char *, char *, uint64_t))v135)(&v37[v59], &v38[v59], v130);
  uint64_t v62 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v60[*(int *)(v62 + 20)] = *(void *)&v61[*(int *)(v62 + 20)];
  uint64_t v63 = v39[8];
  uint64_t v64 = &v37[v63];
  uint64_t v65 = &v38[v63];
  ((void (*)(char *, char *, uint64_t))v135)(&v37[v63], &v38[v63], v130);
  uint64_t v66 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v64[*(int *)(v66 + 20)] = *(void *)&v65[*(int *)(v66 + 20)];
  *(void *)&v64[*(int *)(v66 + 24)] = *(void *)&v65[*(int *)(v66 + 24)];
  uint64_t v67 = v136[10];
  uint64_t v68 = (char *)v138 + v67;
  id v69 = (char *)v137 + v67;
  *(_OWORD *)uint64_t v68 = *(_OWORD *)((char *)v137 + v67);
  *((void *)v68 + 2) = *(void *)((char *)v137 + v67 + 16);
  *(_OWORD *)(v68 + 24) = *(_OWORD *)((char *)v137 + v67 + 24);
  *(_OWORD *)(v68 + 40) = *(_OWORD *)((char *)v137 + v67 + 40);
  *(_OWORD *)(v68 + 56) = *(_OWORD *)((char *)v137 + v67 + 56);
  *(_OWORD *)(v68 + 72) = *(_OWORD *)((char *)v137 + v67 + 72);
  *((void *)v68 + 11) = *(void *)((char *)v137 + v67 + 88);
  *((_OWORD *)v68 + 6) = *(_OWORD *)((char *)v137 + v67 + 96);
  uint64_t v70 = v8[13];
  uint64_t v71 = &v68[v70];
  uint64_t v72 = &v69[v70];
  if (v139(&v69[v70], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
    uint64_t v74 = v134;
  }
  else
  {
    uint64_t v74 = v134;
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v71, v72, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v71, 0, 1, v12);
  }
  uint64_t v75 = v8[14];
  uint64_t v76 = &v68[v75];
  uint64_t v77 = &v69[v75];
  if (v139(&v69[v75], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v76, v77, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v76, 0, 1, v12);
  }
  *(_OWORD *)&v68[v8[15]] = *(_OWORD *)&v69[v8[15]];
  *(_OWORD *)&v68[v8[16]] = *(_OWORD *)&v69[v8[16]];
  v68[v8[17]] = v69[v8[17]];
  v68[v8[18]] = v69[v8[18]];
  *(_OWORD *)&v68[v8[19]] = *(_OWORD *)&v69[v8[19]];
  uint64_t v79 = v8[20];
  uint64_t v80 = &v68[v79];
  uint64_t v81 = &v69[v79];
  if (v132(&v69[v79], 1, v133))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v80, v81, v133);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v80, 0, 1, v133);
  }
  *(void *)&v68[v8[21]] = *(void *)&v69[v8[21]];
  uint64_t v83 = v8[22];
  id v84 = &v68[v83];
  id v85 = &v69[v83];
  if (v139(&v69[v83], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v84, v85, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v84, 0, 1, v12);
  }
  uint64_t v87 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v128)(&v68[v87[5]], &v69[v87[5]], v131);
  ((void (*)(char *, char *, uint64_t))v135)(&v68[v87[6]], &v69[v87[6]], v130);
  *(void *)&v68[v87[7]] = *(void *)&v69[v87[7]];
  *(void *)&v68[v87[8]] = *(void *)&v69[v87[8]];
  *(_OWORD *)&v68[v87[9]] = *(_OWORD *)&v69[v87[9]];
  uint64_t v88 = v136[11];
  int v89 = (char *)v138 + v88;
  uint64_t v90 = (char *)v137 + v88;
  *(void *)((char *)v138 + v88) = *(void *)((char *)v137 + v88);
  uint64_t v91 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v128)(&v89[*(int *)(v91 + 20)], &v90[*(int *)(v91 + 20)], v131);
  ((void (*)(char *, char *, uint64_t))v135)(&v89[*(int *)(v91 + 24)], &v90[*(int *)(v91 + 24)], v130);
  uint64_t v92 = v136[12];
  uint64_t v93 = (_OWORD *)((char *)v138 + v92);
  int v94 = (char *)v137 + v92;
  *uint64_t v93 = *(_OWORD *)((char *)v137 + v92);
  int v95 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v96 = v95[5];
  uint64_t v97 = (char *)v93 + v96;
  uint64_t v98 = &v94[v96];
  *(_OWORD *)uint64_t v97 = *(_OWORD *)&v94[v96];
  *((void *)v97 + 2) = *(void *)&v94[v96 + 16];
  *(_OWORD *)(v97 + 24) = *(_OWORD *)&v94[v96 + 24];
  *(_OWORD *)(v97 + 40) = *(_OWORD *)&v94[v96 + 40];
  *(_OWORD *)(v97 + 56) = *(_OWORD *)&v94[v96 + 56];
  *(_OWORD *)(v97 + 72) = *(_OWORD *)&v94[v96 + 72];
  *((void *)v97 + 11) = *(void *)&v94[v96 + 88];
  *((_OWORD *)v97 + 6) = *(_OWORD *)&v94[v96 + 96];
  uint64_t v99 = v8[13];
  uint64_t v100 = &v97[v99];
  int v101 = &v98[v99];
  uint64_t v102 = v12;
  if (v139(&v98[v99], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v100, v101, *(void *)(*(void *)(v103 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v100, v101, v12);
    uint64_t v102 = v12;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v100, 0, 1, v12);
  }
  uint64_t v104 = v8[14];
  uint64_t v105 = &v97[v104];
  unint64_t v106 = &v98[v104];
  if (v139(&v98[v104], 1, v102))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v105, v106, *(void *)(*(void *)(v107 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v105, v106, v102);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v105, 0, 1, v102);
  }
  *(_OWORD *)&v97[v8[15]] = *(_OWORD *)&v98[v8[15]];
  *(_OWORD *)&v97[v8[16]] = *(_OWORD *)&v98[v8[16]];
  v97[v8[17]] = v98[v8[17]];
  v97[v8[18]] = v98[v8[18]];
  *(_OWORD *)&v97[v8[19]] = *(_OWORD *)&v98[v8[19]];
  uint64_t v108 = v8[20];
  uint64_t v109 = &v97[v108];
  unint64_t v110 = &v98[v108];
  if (v132(&v98[v108], 1, v133))
  {
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v109, v110, v133);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v109, 0, 1, v133);
  }
  *(void *)&v97[v8[21]] = *(void *)&v98[v8[21]];
  uint64_t v112 = v8[22];
  uint64_t v113 = &v97[v112];
  int v114 = &v98[v112];
  if (v139(&v98[v112], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
    uint64_t v116 = v134;
  }
  else
  {
    uint64_t v116 = v134;
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v113, v114, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v113, 0, 1, v12);
  }
  ((void (*)(char *, char *, uint64_t))v128)((char *)v93 + v95[6], &v94[v95[6]], v131);
  ((void (*)(char *, char *, uint64_t))v135)((char *)v93 + v95[7], &v94[v95[7]], v130);
  *(void *)((char *)v93 + v95[8]) = *(void *)&v94[v95[8]];
  uint64_t v117 = v95[9];
  uint64_t v118 = (char *)v93 + v117;
  uint64_t v119 = &v94[v117];
  if (v139(&v94[v117], 1, v12))
  {
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v118, v119, *(void *)(*(void *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v118, v119, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v118, 0, 1, v12);
  }
  *(void *)((char *)v138 + v136[13]) = *(void *)((char *)v137 + v136[13]);
  uint64_t v121 = a3[6];
  *(void *)((char *)v138 + a3[5]) = *(void *)((char *)v137 + a3[5]);
  *((unsigned char *)v138 + v121) = *((unsigned char *)v137 + v121);
  uint64_t v122 = a3[8];
  *(void *)((char *)v138 + a3[7]) = *(void *)((char *)v137 + a3[7]);
  uint64_t v123 = (__n128 *)((char *)v138 + v122);
  id v124 = (__n128 *)((char *)v137 + v122);
  __n128 result = *v124;
  *uint64_t v123 = *v124;
  v123[1].n128_u8[0] = v124[1].n128_u8[0];
  return result;
}

void **sub_255EC08C8(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a1;
  *a1 = *a2;

  uint64_t v294 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v6 = v294[5];
  v296 = a1;
  id v7 = (char *)a1 + v6;
  uint64_t v295 = a2;
  uint64_t v8 = (void **)((char *)a2 + v6);
  uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
  *(void *)id v7 = *(void **)((char *)a2 + v6);
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = v8[2];
  swift_bridgeObjectRelease();
  uint64_t v10 = v8[4];
  *((void *)v7 + 3) = v8[3];
  *((void *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v8[6];
  *((void *)v7 + 5) = v8[5];
  *((void *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v8[8];
  *((void *)v7 + 7) = v8[7];
  *((void *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v8[10];
  *((void *)v7 + 9) = v8[9];
  *((void *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)*((void *)v7 + 12);
  uint64_t v15 = v8[12];
  *((void *)v7 + 11) = v8[11];
  *((void *)v7 + 12) = v15;

  id v16 = (void *)*((void *)v7 + 13);
  *((void *)v7 + 13) = v8[13];

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v7[v18];
  id v20 = (char *)v8 + v18;
  uint64_t v21 = sub_255EEE100();
  uint64_t v298 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v298 + 48);
  int v23 = v22(v19, 1, v21);
  uint64_t v299 = v22;
  int v24 = v22(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v19, v21);
LABEL_6:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v26 = v17[14];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = (char *)v8 + v26;
  int v29 = v22(&v7[v26], 1, v21);
  int v30 = v22(v28, 1, v21);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v27, v28, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v27, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v27, v21);
LABEL_12:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v27, v28, v21);
LABEL_13:
  uint64_t v32 = v17[15];
  uint64_t v33 = &v7[v32];
  uint64_t v34 = (void *)((char *)v8 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = v17[16];
  uint64_t v38 = &v7[v37];
  uint64_t v39 = (void *)((char *)v8 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *(void *)uint64_t v38 = v41;
  *((void *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v7[v17[17]] = *((unsigned char *)v8 + v17[17]);
  v7[v17[18]] = *((unsigned char *)v8 + v17[18]);
  uint64_t v42 = v17[19];
  uint64_t v43 = (uint64_t)&v7[v42];
  unint64_t v44 = (char *)v8 + v42;
  unint64_t v45 = *(void *)&v7[v42 + 8];
  if (v45 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    goto LABEL_18;
  }
  unint64_t v46 = *((void *)v44 + 1);
  if (v46 >> 60 == 15)
  {
    sub_255D81EF8(v43);
    goto LABEL_16;
  }
  uint64_t v47 = *(void *)v43;
  *(void *)uint64_t v43 = *(void *)v44;
  *(void *)(v43 + 8) = v46;
  sub_255D80D04(v47, v45);
LABEL_18:
  uint64_t v48 = v17[20];
  uint64_t v49 = &v7[v48];
  uint64_t v50 = (char *)v8 + v48;
  uint64_t v51 = sub_255EEDF60();
  uint64_t v288 = *(void *)(v51 - 8);
  uint64_t v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v288 + 48);
  int v53 = v52(v49, 1, v51);
  uint64_t v297 = v51;
  uint64_t v292 = v52;
  int v54 = v52(v50, 1, v51);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v288 + 32))(v49, v50, v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v288 + 56))(v49, 0, 1, v51);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v288 + 8))(v49, v51);
LABEL_23:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v288 + 40))(v49, v50, v51);
LABEL_24:
  uint64_t v56 = v17[21];
  uint64_t v57 = *(void **)&v7[v56];
  *(void *)&v7[v56] = *(void *)((char *)v8 + v56);

  uint64_t v58 = v17[22];
  uint64_t v59 = &v7[v58];
  int v60 = (char *)v8 + v58;
  int v61 = v299(&v7[v58], 1, v21);
  int v62 = v299(v60, 1, v21);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v59, v60, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v59, 0, 1, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v59, v21);
LABEL_29:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v59, v60, v21);
LABEL_30:
  uint64_t v64 = v294[6];
  uint64_t v65 = (char *)v296 + v64;
  uint64_t v66 = (char *)a2 + v64;
  uint64_t v291 = sub_255EEE280();
  uint64_t v287 = *(void (**)(char *, char *))(*(void *)(v291 - 8) + 40);
  v287(v65, v66);
  uint64_t v67 = v294[7];
  uint64_t v68 = *(void **)((char *)v296 + v67);
  *(void **)((char *)v296 + v67) = *(void **)((char *)a2 + v67);

  uint64_t v69 = v294[8];
  uint64_t v70 = (char *)v296 + v69;
  uint64_t v71 = (char *)a2 + v69;
  uint64_t v72 = sub_255EEE200();
  uint64_t v289 = (void (**)(char *, char *))(*(void *)(v72 - 8) + 40);
  uint64_t v290 = v72;
  uint64_t v293 = *v289;
  (*v289)(v70, v71);
  uint64_t v73 = v294[9];
  uint64_t v74 = (void **)((char *)v296 + v73);
  uint64_t v75 = (char *)a2 + v73;
  uint64_t v76 = *(uint64_t *)((char *)a2 + v73 + 8);
  *uint64_t v74 = *(void **)((char *)a2 + v73);
  v74[1] = v76;
  swift_bridgeObjectRelease();
  uint64_t v281 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v282 = v75;
  uint64_t v77 = v281[5];
  uint64_t v284 = v74;
  uint64_t v78 = (char *)v74 + v77;
  uint64_t v79 = &v75[v77];
  uint64_t v80 = *(void *)&v75[v77 + 8];
  *(void *)uint64_t v78 = *(void *)&v75[v77];
  *((void *)v78 + 1) = v80;
  swift_bridgeObjectRelease();
  *((void *)v78 + 2) = *((void *)v79 + 2);
  swift_bridgeObjectRelease();
  uint64_t v81 = *((void *)v79 + 4);
  *((void *)v78 + 3) = *((void *)v79 + 3);
  *((void *)v78 + 4) = v81;
  swift_bridgeObjectRelease();
  uint64_t v82 = *((void *)v79 + 6);
  *((void *)v78 + 5) = *((void *)v79 + 5);
  *((void *)v78 + 6) = v82;
  swift_bridgeObjectRelease();
  uint64_t v83 = *((void *)v79 + 8);
  *((void *)v78 + 7) = *((void *)v79 + 7);
  *((void *)v78 + 8) = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = *((void *)v79 + 10);
  *((void *)v78 + 9) = *((void *)v79 + 9);
  *((void *)v78 + 10) = v84;
  swift_bridgeObjectRelease();
  id v85 = (void *)*((void *)v78 + 12);
  uint64_t v86 = *((void *)v79 + 12);
  *((void *)v78 + 11) = *((void *)v79 + 11);
  *((void *)v78 + 12) = v86;

  uint64_t v87 = (void *)*((void *)v78 + 13);
  *((void *)v78 + 13) = *((void *)v79 + 13);

  uint64_t v88 = v17[13];
  int v89 = &v78[v88];
  uint64_t v90 = &v79[v88];
  int v91 = v299(&v78[v88], 1, v21);
  int v92 = v299(v90, 1, v21);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v89, v90, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v89, 0, 1, v21);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v92)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v89, v21);
LABEL_35:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v89, v90, v21);
LABEL_36:
  uint64_t v94 = v17[14];
  int v95 = &v78[v94];
  uint64_t v96 = &v79[v94];
  int v97 = v299(&v78[v94], 1, v21);
  int v98 = v299(v96, 1, v21);
  if (v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v95, v96, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v95, 0, 1, v21);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v95, v21);
LABEL_41:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v95, v96, v21);
LABEL_42:
  uint64_t v100 = v17[15];
  int v101 = &v78[v100];
  uint64_t v102 = &v79[v100];
  uint64_t v104 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  *(void *)int v101 = v104;
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  uint64_t v105 = v17[16];
  unint64_t v106 = &v78[v105];
  uint64_t v107 = &v79[v105];
  uint64_t v109 = *(void *)v107;
  uint64_t v108 = *((void *)v107 + 1);
  *(void *)unint64_t v106 = v109;
  *((void *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
  v78[v17[17]] = v79[v17[17]];
  v78[v17[18]] = v79[v17[18]];
  uint64_t v110 = v17[19];
  uint64_t v111 = (uint64_t)&v78[v110];
  uint64_t v112 = &v79[v110];
  unint64_t v113 = *(void *)&v78[v110 + 8];
  if (v113 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v111 = *(_OWORD *)v112;
    goto LABEL_47;
  }
  unint64_t v114 = *((void *)v112 + 1);
  if (v114 >> 60 == 15)
  {
    sub_255D81EF8(v111);
    goto LABEL_45;
  }
  uint64_t v115 = *(void *)v111;
  *(void *)uint64_t v111 = *(void *)v112;
  *(void *)(v111 + 8) = v114;
  sub_255D80D04(v115, v113);
LABEL_47:
  uint64_t v116 = v17[20];
  uint64_t v117 = &v78[v116];
  uint64_t v118 = &v79[v116];
  int v119 = v52(&v78[v116], 1, v297);
  int v120 = v52(v118, 1, v297);
  if (v119)
  {
    if (!v120)
    {
      (*(void (**)(char *, char *, uint64_t))(v288 + 32))(v117, v118, v297);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v288 + 56))(v117, 0, 1, v297);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v120)
  {
    (*(void (**)(char *, uint64_t))(v288 + 8))(v117, v297);
LABEL_52:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
    goto LABEL_53;
  }
  (*(void (**)(char *, char *, uint64_t))(v288 + 40))(v117, v118, v297);
LABEL_53:
  uint64_t v122 = v17[21];
  uint64_t v123 = *(void **)&v78[v122];
  *(void *)&v78[v122] = *(void *)&v79[v122];

  uint64_t v124 = v17[22];
  int v125 = &v78[v124];
  int v126 = &v79[v124];
  int v127 = v299(&v78[v124], 1, v21);
  int v128 = v299(v126, 1, v21);
  if (v127)
  {
    if (!v128)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v125, v126, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v125, 0, 1, v21);
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (v128)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v125, v21);
LABEL_58:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v125, v126, v21);
LABEL_59:
  ((void (*)(char *, char *, uint64_t))v293)((char *)v284 + v281[6], &v282[v281[6]], v290);
  uint64_t v130 = v281[7];
  uint64_t v131 = (char *)v284 + v130;
  uint64_t v132 = &v282[v130];
  ((void (*)(char *, char *, uint64_t))v293)((char *)v284 + v130, &v282[v130], v290);
  uint64_t v133 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v134 = *(void **)&v131[v133];
  *(void *)&v131[v133] = *(void *)&v132[v133];

  uint64_t v135 = v281[8];
  uint64_t v136 = (char *)v284 + v135;
  uint64_t v137 = &v282[v135];
  ((void (*)(char *, char *, uint64_t))v293)((char *)v284 + v135, &v282[v135], v290);
  uint64_t v138 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v139 = *(int *)(v138 + 20);
  uint64_t v140 = *(void **)&v136[v139];
  *(void *)&v136[v139] = *(void *)&v137[v139];

  uint64_t v141 = *(int *)(v138 + 24);
  id v142 = *(void **)&v136[v141];
  *(void *)&v136[v141] = *(void *)&v137[v141];

  uint64_t v143 = v294[10];
  id v144 = (char *)v296 + v143;
  id v145 = (void **)((char *)a2 + v143);
  uint64_t v146 = *(uint64_t *)((char *)a2 + v143 + 8);
  *(void *)id v144 = *(void **)((char *)a2 + v143);
  *((void *)v144 + 1) = v146;
  swift_bridgeObjectRelease();
  *((void *)v144 + 2) = v145[2];
  swift_bridgeObjectRelease();
  uint64_t v147 = v145[4];
  *((void *)v144 + 3) = v145[3];
  *((void *)v144 + 4) = v147;
  swift_bridgeObjectRelease();
  uint64_t v148 = v145[6];
  *((void *)v144 + 5) = v145[5];
  *((void *)v144 + 6) = v148;
  swift_bridgeObjectRelease();
  uint64_t v149 = v145[8];
  *((void *)v144 + 7) = v145[7];
  *((void *)v144 + 8) = v149;
  swift_bridgeObjectRelease();
  uint64_t v150 = v145[10];
  *((void *)v144 + 9) = v145[9];
  *((void *)v144 + 10) = v150;
  swift_bridgeObjectRelease();
  uint64_t v151 = (void *)*((void *)v144 + 12);
  uint64_t v152 = v145[12];
  *((void *)v144 + 11) = v145[11];
  *((void *)v144 + 12) = v152;

  uint64_t v153 = (void *)*((void *)v144 + 13);
  *((void *)v144 + 13) = v145[13];

  uint64_t v154 = v17[13];
  id v155 = &v144[v154];
  uint64_t v156 = (char *)v145 + v154;
  LODWORD(v137) = v299(&v144[v154], 1, v21);
  int v157 = v299(v156, 1, v21);
  if (v137)
  {
    if (!v157)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v155, v156, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v155, 0, 1, v21);
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v157)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v155, v21);
LABEL_64:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
    goto LABEL_65;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v155, v156, v21);
LABEL_65:
  uint64_t v159 = v17[14];
  uint64_t v160 = &v144[v159];
  uint64_t v161 = (char *)v145 + v159;
  int v162 = v299(&v144[v159], 1, v21);
  int v163 = v299(v161, 1, v21);
  if (v162)
  {
    if (!v163)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v160, v161, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v160, 0, 1, v21);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v163)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v160, v21);
LABEL_70:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v160, v161, v21);
LABEL_71:
  uint64_t v165 = v17[15];
  uint64_t v166 = &v144[v165];
  uint64_t v167 = (void *)((char *)v145 + v165);
  uint64_t v169 = *v167;
  uint64_t v168 = v167[1];
  *(void *)uint64_t v166 = v169;
  *((void *)v166 + 1) = v168;
  swift_bridgeObjectRelease();
  uint64_t v170 = v17[16];
  uint64_t v171 = &v144[v170];
  uint64_t v172 = (void *)((char *)v145 + v170);
  uint64_t v174 = *v172;
  uint64_t v173 = v172[1];
  *(void *)uint64_t v171 = v174;
  *((void *)v171 + 1) = v173;
  swift_bridgeObjectRelease();
  v144[v17[17]] = *((unsigned char *)v145 + v17[17]);
  v144[v17[18]] = *((unsigned char *)v145 + v17[18]);
  uint64_t v175 = v17[19];
  uint64_t v176 = (uint64_t)&v144[v175];
  uint64_t v177 = (char *)v145 + v175;
  unint64_t v178 = *(void *)&v144[v175 + 8];
  if (v178 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
    goto LABEL_76;
  }
  unint64_t v179 = *((void *)v177 + 1);
  if (v179 >> 60 == 15)
  {
    sub_255D81EF8(v176);
    goto LABEL_74;
  }
  uint64_t v180 = *(void *)v176;
  *(void *)uint64_t v176 = *(void *)v177;
  *(void *)(v176 + 8) = v179;
  sub_255D80D04(v180, v178);
LABEL_76:
  uint64_t v181 = v17[20];
  uint64_t v182 = &v144[v181];
  uint64_t v183 = (char *)v145 + v181;
  int v184 = v292(&v144[v181], 1, v297);
  int v185 = v292(v183, 1, v297);
  if (v184)
  {
    if (!v185)
    {
      (*(void (**)(char *, char *, uint64_t))(v288 + 32))(v182, v183, v297);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v288 + 56))(v182, 0, 1, v297);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v288 + 8))(v182, v297);
LABEL_81:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v182, v183, *(void *)(*(void *)(v186 - 8) + 64));
    goto LABEL_82;
  }
  (*(void (**)(char *, char *, uint64_t))(v288 + 40))(v182, v183, v297);
LABEL_82:
  uint64_t v187 = v17[21];
  uint64_t v188 = *(void **)&v144[v187];
  *(void *)&v144[v187] = *(void *)((char *)v145 + v187);

  uint64_t v189 = v17[22];
  id v190 = &v144[v189];
  uint64_t v191 = (char *)v145 + v189;
  int v192 = v299(&v144[v189], 1, v21);
  int v193 = v299(v191, 1, v21);
  if (v192)
  {
    if (!v193)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v190, v191, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v190, 0, 1, v21);
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v193)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v190, v21);
LABEL_87:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v190, v191, v21);
LABEL_88:
  int v195 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v287)(&v144[v195[5]], (char *)v145 + v195[5], v291);
  ((void (*)(char *, char *, uint64_t))v293)(&v144[v195[6]], (char *)v145 + v195[6], v290);
  uint64_t v196 = v195[7];
  id v197 = *(void **)&v144[v196];
  *(void *)&v144[v196] = *(void *)((char *)v145 + v196);

  uint64_t v198 = v195[8];
  uint64_t v199 = *(void **)&v144[v198];
  *(void *)&v144[v198] = *(void *)((char *)v145 + v198);

  uint64_t v200 = v195[9];
  id v201 = &v144[v200];
  uint64_t v202 = (void *)((char *)v145 + v200);
  uint64_t v204 = *v202;
  uint64_t v203 = v202[1];
  *(void *)id v201 = v204;
  *((void *)v201 + 1) = v203;
  swift_bridgeObjectRelease();
  uint64_t v205 = v294[11];
  uint64_t v206 = (char *)v296 + v205;
  uint64_t v207 = (char *)a2 + v205;
  uint64_t v208 = *(void **)((char *)v296 + v205);
  *(void **)((char *)v296 + v205) = *(void **)((char *)a2 + v205);

  uint64_t v209 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, char *, uint64_t))v287)(&v206[*(int *)(v209 + 20)], &v207[*(int *)(v209 + 20)], v291);
  ((void (*)(char *, char *, uint64_t))v293)(&v206[*(int *)(v209 + 24)], &v207[*(int *)(v209 + 24)], v290);
  uint64_t v210 = v294[12];
  uint64_t v211 = (char *)v296 + v210;
  uint64_t v212 = (char *)a2 + v210;
  uint64_t v213 = *(uint64_t *)((char *)a2 + v210 + 8);
  *(void *)uint64_t v211 = *(void **)((char *)a2 + v210);
  *((void *)v211 + 1) = v213;
  swift_bridgeObjectRelease();
  id v283 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v285 = v212;
  uint64_t v214 = v283[5];
  uint64_t v215 = &v211[v214];
  uint64_t v216 = &v212[v214];
  uint64_t v217 = *((void *)v216 + 1);
  *(void *)uint64_t v215 = *(void *)v216;
  *((void *)v215 + 1) = v217;
  swift_bridgeObjectRelease();
  *((void *)v215 + 2) = *((void *)v216 + 2);
  swift_bridgeObjectRelease();
  uint64_t v218 = *((void *)v216 + 4);
  *((void *)v215 + 3) = *((void *)v216 + 3);
  *((void *)v215 + 4) = v218;
  swift_bridgeObjectRelease();
  uint64_t v219 = *((void *)v216 + 6);
  *((void *)v215 + 5) = *((void *)v216 + 5);
  *((void *)v215 + 6) = v219;
  swift_bridgeObjectRelease();
  uint64_t v220 = *((void *)v216 + 8);
  *((void *)v215 + 7) = *((void *)v216 + 7);
  *((void *)v215 + 8) = v220;
  swift_bridgeObjectRelease();
  uint64_t v221 = *((void *)v216 + 10);
  *((void *)v215 + 9) = *((void *)v216 + 9);
  *((void *)v215 + 10) = v221;
  swift_bridgeObjectRelease();
  uint64_t v222 = (void *)*((void *)v215 + 12);
  uint64_t v223 = *((void *)v216 + 12);
  *((void *)v215 + 11) = *((void *)v216 + 11);
  *((void *)v215 + 12) = v223;

  id v224 = (void *)*((void *)v215 + 13);
  *((void *)v215 + 13) = *((void *)v216 + 13);

  uint64_t v225 = v17[13];
  uint64_t v226 = &v215[v225];
  id v227 = &v216[v225];
  LODWORD(v207) = v299(&v215[v225], 1, v21);
  int v228 = v299(v227, 1, v21);
  if (v207)
  {
    if (!v228)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v226, v227, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v226, 0, 1, v21);
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  if (v228)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v226, v21);
LABEL_93:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v226, v227, *(void *)(*(void *)(v229 - 8) + 64));
    goto LABEL_94;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v226, v227, v21);
LABEL_94:
  uint64_t v230 = v17[14];
  int v231 = &v215[v230];
  uint64_t v232 = &v216[v230];
  int v233 = v299(&v215[v230], 1, v21);
  int v234 = v299(v232, 1, v21);
  if (v233)
  {
    if (!v234)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v231, v232, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v231, 0, 1, v21);
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  if (v234)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v231, v21);
LABEL_99:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
    goto LABEL_100;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v231, v232, v21);
LABEL_100:
  uint64_t v236 = v17[15];
  int v237 = &v215[v236];
  uint64_t v238 = &v216[v236];
  uint64_t v240 = *(void *)v238;
  uint64_t v239 = *((void *)v238 + 1);
  *(void *)int v237 = v240;
  *((void *)v237 + 1) = v239;
  swift_bridgeObjectRelease();
  uint64_t v241 = v17[16];
  uint64_t v242 = &v215[v241];
  uint64_t v243 = &v216[v241];
  uint64_t v245 = *(void *)v243;
  uint64_t v244 = *((void *)v243 + 1);
  *(void *)uint64_t v242 = v245;
  *((void *)v242 + 1) = v244;
  swift_bridgeObjectRelease();
  v215[v17[17]] = v216[v17[17]];
  v215[v17[18]] = v216[v17[18]];
  uint64_t v246 = v17[19];
  uint64_t v247 = (uint64_t)&v215[v246];
  unint64_t v248 = &v216[v246];
  unint64_t v249 = *(void *)&v215[v246 + 8];
  if (v249 >> 60 == 15)
  {
LABEL_103:
    *(_OWORD *)uint64_t v247 = *(_OWORD *)v248;
    goto LABEL_105;
  }
  unint64_t v250 = *((void *)v248 + 1);
  if (v250 >> 60 == 15)
  {
    sub_255D81EF8(v247);
    goto LABEL_103;
  }
  uint64_t v251 = *(void *)v247;
  *(void *)uint64_t v247 = *(void *)v248;
  *(void *)(v247 + 8) = v250;
  sub_255D80D04(v251, v249);
LABEL_105:
  uint64_t v252 = v17[20];
  uint64_t v253 = &v215[v252];
  uint64_t v254 = &v216[v252];
  int v255 = v292(&v215[v252], 1, v297);
  int v256 = v292(v254, 1, v297);
  if (v255)
  {
    uint64_t v257 = v21;
    if (!v256)
    {
      (*(void (**)(char *, char *, uint64_t))(v288 + 32))(v253, v254, v297);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v288 + 56))(v253, 0, 1, v297);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  uint64_t v257 = v21;
  if (v256)
  {
    (*(void (**)(char *, uint64_t))(v288 + 8))(v253, v297);
LABEL_110:
    sub_255EBB220(0, &qword_269F350B8, MEMORY[0x270FA8110], MEMORY[0x263F8D8F0]);
    memcpy(v253, v254, *(void *)(*(void *)(v258 - 8) + 64));
    goto LABEL_111;
  }
  (*(void (**)(char *, char *, uint64_t))(v288 + 40))(v253, v254, v297);
LABEL_111:
  uint64_t v259 = v17[21];
  uint64_t v260 = *(void **)&v215[v259];
  *(void *)&v215[v259] = *(void *)&v216[v259];

  uint64_t v261 = v17[22];
  id v262 = &v215[v261];
  id v263 = &v216[v261];
  int v264 = v299(&v215[v261], 1, v257);
  int v265 = v299(v263, 1, v257);
  if (v264)
  {
    if (!v265)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v262, v263, v257);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v262, 0, 1, v257);
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v265)
  {
    (*(void (**)(char *, uint64_t))(v298 + 8))(v262, v257);
LABEL_116:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v262, v263, *(void *)(*(void *)(v266 - 8) + 64));
    goto LABEL_117;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v262, v263, v257);
LABEL_117:
  ((void (*)(char *, char *, uint64_t))v287)(&v211[v283[6]], &v285[v283[6]], v291);
  ((void (*)(char *, char *, uint64_t))v293)(&v211[v283[7]], &v285[v283[7]], v290);
  *(void *)&v211[v283[8]] = *(void *)&v285[v283[8]];
  swift_release();
  uint64_t v267 = v283[9];
  int v268 = &v211[v267];
  uint64_t v269 = &v285[v267];
  int v270 = v299(&v211[v267], 1, v257);
  int v271 = v299(v269, 1, v257);
  if (!v270)
  {
    if (!v271)
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 40))(v268, v269, v257);
      goto LABEL_123;
    }
    (*(void (**)(char *, uint64_t))(v298 + 8))(v268, v257);
    goto LABEL_122;
  }
  if (v271)
  {
LABEL_122:
    sub_255EBB220(0, &qword_269F35058, MEMORY[0x270FA9190], MEMORY[0x263F8D8F0]);
    memcpy(v268, v269, *(void *)(*(void *)(v272 - 8) + 64));
    goto LABEL_123;
  }
  (*(void (**)(char *, char *, uint64_t))(v298 + 32))(v268, v269, v257);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v298 + 56))(v268, 0, 1, v257);
LABEL_123:
  uint64_t v273 = v294[13];
  int v274 = *(void **)((char *)v296 + v273);
  *(void **)((char *)v296 + v273) = *(void **)((char *)v295 + v273);

  *(void **)((char *)v296 + a3[5]) = *(void **)((char *)v295 + a3[5]);
  swift_release();
  uint64_t v275 = a3[7];
  *((unsigned char *)v296 + a3[6]) = *((unsigned char *)v295 + a3[6]);
  uint64_t v276 = *(void **)((char *)v296 + v275);
  *(void **)((char *)v296 + v275) = *(void **)((char *)v295 + v275);

  uint64_t v277 = a3[8];
  uint64_t v278 = (char *)v296 + v277;
  id v279 = (char *)v295 + v277;
  *(void *)uint64_t v278 = *(void **)((char *)v295 + v277);
  swift_release();
  *((void *)v278 + 1) = *((void *)v279 + 1);
  swift_release();
  v278[16] = v279[16];
  return v296;
}

uint64_t sub_255EC26A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_255EC26B8);
}

uint64_t sub_255EC26B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MedicalIDDataViewModel();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_255EC2778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_255EC278C);
}

uint64_t sub_255EC278C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MedicalIDDataViewModel();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t _s15SectionGridItemVMa()
{
  uint64_t result = qword_269F38830;
  if (!qword_269F38830) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_255EC2894()
{
  uint64_t result = type metadata accessor for MedicalIDDataViewModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_255EC2950()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_255EC296C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_255EC29E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v194 = a1;
  uint64_t v178 = type metadata accessor for MedicalIDMedicalNotesCellView();
  uint64_t v2 = MEMORY[0x270FA5388](v178);
  uint64_t v158 = (uint64_t)&v147 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v159 = (uint64_t)&v147 - v4;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F19B20];
  sub_255EC7F48(0, &qword_269F38840, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView, MEMORY[0x263F19B20]);
  uint64_t v173 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v175 = (uint64_t)&v147 - v7;
  sub_255EC5C4C(0);
  uint64_t v180 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v176 = (char *)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for MedicalIDMedicalConditionsCellView();
  MEMORY[0x270FA5388](v174);
  int v157 = (uint64_t *)((char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v154 = (uint64_t)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for MedicalIDBiometricsCell();
  MEMORY[0x270FA5388](v172);
  uint64_t v156 = (uint64_t *)((char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255EC7F48(0, &qword_269F38850, (uint64_t (*)(uint64_t))sub_255EC5C94, (uint64_t (*)(uint64_t))sub_255EC5C4C, v5);
  uint64_t v187 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v179 = (uint64_t)&v147 - v15;
  sub_255EC7F48(0, &qword_269F38860, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell, v5);
  uint64_t v169 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v170 = (uint64_t)&v147 - v17;
  sub_255EC5C94(0);
  uint64_t v188 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v171 = (char *)&v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EC5CDC(0);
  uint64_t v193 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v181 = (char *)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for MedicalIDData();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v152 = (uint64_t)&v147 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255D894E4(0);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v151 = (uint64_t)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for MedicalIDEmergencyContactsCellView();
  MEMORY[0x270FA5388](v168);
  id v155 = (uint64_t *)((char *)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v166 = type metadata accessor for MedicalIDAllergiesCellView();
  MEMORY[0x270FA5388](v166);
  uint64_t v153 = (uint64_t *)((char *)&v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_255EC7F48(0, &qword_269F38870, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDAllergiesCellView, v5);
  uint64_t v163 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v165 = (uint64_t)&v147 - v29;
  sub_255EC5D24(0);
  uint64_t v186 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v167 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v148 = (uint64_t)&v147 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v177 = (uint64_t)&v147 - v35;
  uint64_t v162 = type metadata accessor for MedicalIDMedicationsCellView();
  MEMORY[0x270FA5388](v162);
  uint64_t v150 = (uint64_t *)((char *)&v147 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = type metadata accessor for MedicalIDPregnancyViewModel();
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v39 = (char *)&v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = type metadata accessor for MedicalIDPregnancyCellView();
  MEMORY[0x270FA5388](v164);
  uint64_t v149 = (uint64_t)&v147 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EC7F48(0, &qword_269F38880, (uint64_t (*)(uint64_t))sub_255EC5D6C, (uint64_t (*)(uint64_t))sub_255EC5CDC, v5);
  uint64_t v189 = v41;
  MEMORY[0x270FA5388](v41);
  uint64_t v190 = (uint64_t)&v147 - v42;
  sub_255EC7F48(0, &qword_269F38898, (uint64_t (*)(uint64_t))sub_255EC5DB4, (uint64_t (*)(uint64_t))sub_255EC5D24, v5);
  uint64_t v182 = v43;
  MEMORY[0x270FA5388](v43);
  uint64_t v184 = (uint64_t)&v147 - v44;
  sub_255EC7F48(0, &qword_269F388A0, type metadata accessor for MedicalIDPersonalInformationCellView, (uint64_t (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView, v5);
  uint64_t v160 = v45;
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v147 - v46;
  sub_255EC5DB4(0);
  uint64_t v183 = v48;
  MEMORY[0x270FA5388](v48);
  uint64_t v161 = (char *)&v147 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255EC5D6C(0);
  uint64_t v192 = v50;
  MEMORY[0x270FA5388](v50);
  int v185 = (char *)&v147 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = _s15SectionGridItemVMa();
  uint64_t v191 = *(void *)(v52 - 8);
  uint64_t v53 = *(void *)(v191 + 64);
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v55 = (char *)&v147 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v54);
  uint64_t v57 = (char *)&v147 - v56;
  uint64_t v58 = type metadata accessor for MedicalIDPersonalInfoViewModel();
  MEMORY[0x270FA5388](v58 - 8);
  int v60 = (char *)&v147 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for MedicalIDPersonalInformationCellView(0);
  MEMORY[0x270FA5388](v61);
  uint64_t v63 = (char *)&v147 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*(unsigned char *)(v1 + *(int *)(v52 + 24)))
  {
    case 1:
      uint64_t v74 = type metadata accessor for MedicalIDDataViewModel();
      sub_255EC7028(v1 + *(int *)(v74 + 48), (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
      sub_255EC7028(v1, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v75 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v76 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v76 + v75, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v77 = v149;
      sub_255EC6FC0((uint64_t)v39, v149, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyViewModel);
      uint64_t v78 = v164;
      uint64_t v79 = (uint64_t (**)())(v77 + *(int *)(v164 + 20));
      *uint64_t v79 = sub_255EC63FC;
      v79[1] = (uint64_t (*)())v76;
      uint64_t v80 = (uint64_t *)(v77 + *(int *)(v78 + 24));
      sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
      sub_255DA7C7C();
      *uint64_t v80 = sub_255EEE9F0();
      v80[1] = v81;
      sub_255EC7028(v77, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F388E8, (void (*)(uint64_t))type metadata accessor for MedicalIDPersonalInformationCellView);
      sub_255EC5F04(&qword_269F388F0, (void (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView);
      uint64_t v82 = (uint64_t)v161;
      sub_255EEEE00();
      sub_255EC7028(v82, v184, (uint64_t (*)(void))sub_255EC5DB4);
      swift_storeEnumTagMultiPayload();
      sub_255EC6144();
      sub_255EC621C();
      uint64_t v83 = (uint64_t)v185;
      sub_255EEEE00();
      sub_255EC7090(v82, (uint64_t (*)(void))sub_255EC5DB4);
      sub_255EC7028(v83, v190, (uint64_t (*)(void))sub_255EC5D6C);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v83, (uint64_t (*)(void))sub_255EC5D6C);
      uint64_t v72 = (uint64_t (*)(void))type metadata accessor for MedicalIDPregnancyCellView;
      uint64_t v73 = v77;
      return sub_255EC7090(v73, v72);
    case 2:
      uint64_t v84 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v85 = v177;
      sub_255EC7028(v1 + *(int *)(v84 + 44), v177, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      sub_255EC7028(v1, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v86 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v87 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v87 + v86, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v88 = v150;
      sub_255EC6FC0(v85, (uint64_t)v150, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      int v89 = (uint64_t (**)())((char *)v88 + *(int *)(v162 + 20));
      *int v89 = sub_255EC63E0;
      v89[1] = (uint64_t (*)())v87;
      sub_255EC7028((uint64_t)v88, v165, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicationsCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F38900, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView);
      sub_255EC5F04(&qword_269F38908, (void (*)(uint64_t))type metadata accessor for MedicalIDAllergiesCellView);
      uint64_t v90 = (uint64_t)v167;
      sub_255EEEE00();
      sub_255EC7028(v90, v184, (uint64_t (*)(void))sub_255EC5D24);
      swift_storeEnumTagMultiPayload();
      sub_255EC6144();
      sub_255EC621C();
      uint64_t v91 = (uint64_t)v185;
      sub_255EEEE00();
      sub_255EC7090(v90, (uint64_t (*)(void))sub_255EC5D24);
      sub_255EC7028(v91, v190, (uint64_t (*)(void))sub_255EC5D6C);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v91, (uint64_t (*)(void))sub_255EC5D6C);
      int v92 = type metadata accessor for MedicalIDMedicationsCellView;
      goto LABEL_9;
    case 3:
      uint64_t v93 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v94 = v177;
      sub_255EC7028(v1 + *(int *)(v93 + 44), v177, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      sub_255EC7028(v1, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v95 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v96 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v96 + v95, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v88 = v153;
      sub_255EC6FC0(v94, (uint64_t)v153, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      int v97 = (uint64_t (**)())((char *)v88 + *(int *)(v166 + 20));
      char *v97 = sub_255EC63C4;
      v97[1] = (uint64_t (*)())v96;
      sub_255EC7028((uint64_t)v88, v165, (uint64_t (*)(void))type metadata accessor for MedicalIDAllergiesCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F38900, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView);
      sub_255EC5F04(&qword_269F38908, (void (*)(uint64_t))type metadata accessor for MedicalIDAllergiesCellView);
      uint64_t v98 = (uint64_t)v167;
      sub_255EEEE00();
      sub_255EC7028(v98, v184, (uint64_t (*)(void))sub_255EC5D24);
      swift_storeEnumTagMultiPayload();
      sub_255EC6144();
      sub_255EC621C();
      uint64_t v99 = (uint64_t)v185;
      sub_255EEEE00();
      sub_255EC7090(v98, (uint64_t (*)(void))sub_255EC5D24);
      sub_255EC7028(v99, v190, (uint64_t (*)(void))sub_255EC5D6C);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v99, (uint64_t (*)(void))sub_255EC5D6C);
      int v92 = type metadata accessor for MedicalIDAllergiesCellView;
      goto LABEL_9;
    case 4:
      uint64_t v100 = *(int *)(v52 + 20);
      uint64_t v101 = v1;
      uint64_t v102 = *(void *)(*(void *)(v1 + v100) + 56);
      swift_getKeyPath();
      uint64_t v195 = v102;
      sub_255EC5F04(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
      swift_retain();
      sub_255EEE2D0();
      swift_release();
      uint64_t v103 = v102 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
      swift_beginAccess();
      uint64_t v104 = v103;
      uint64_t v105 = v151;
      sub_255EC7028(v104, v151, (uint64_t (*)(void))sub_255D894E4);
      swift_release();
      uint64_t v106 = v152;
      LoadState<>.loadedValue.getter(v152);
      sub_255EC7090(v105, (uint64_t (*)(void))sub_255D894E4);
      uint64_t v107 = *(void *)(v106 + 16);
      swift_bridgeObjectRetain();
      sub_255EC7090(v106, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
      sub_255EC7028(v101, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v108 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v109 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v109 + v108, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v88 = v155;
      sub_255DE928C(v107, (uint64_t)sub_255EC63A8, v109, v155);
      sub_255EC7028((uint64_t)v88, v170, (uint64_t (*)(void))type metadata accessor for MedicalIDEmergencyContactsCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F388C0, (void (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView);
      sub_255EC5F04(&qword_269F388C8, (void (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell);
      uint64_t v110 = (uint64_t)v171;
      sub_255EEEE00();
      sub_255EC7028(v110, v179, (uint64_t (*)(void))sub_255EC5C94);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F4C();
      sub_255EC6024();
      uint64_t v111 = (uint64_t)v181;
      sub_255EEEE00();
      sub_255EC7090(v110, (uint64_t (*)(void))sub_255EC5C94);
      sub_255EC7028(v111, v190, (uint64_t (*)(void))sub_255EC5CDC);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v111, (uint64_t (*)(void))sub_255EC5CDC);
      int v92 = type metadata accessor for MedicalIDEmergencyContactsCellView;
      goto LABEL_9;
    case 5:
      uint64_t v112 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v113 = v154;
      sub_255EC7028(v1 + *(int *)(v112 + 36), v154, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
      sub_255EC7028(v1, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v114 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v115 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v115 + v114, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v117 = v172;
      uint64_t v88 = v156;
      *(uint64_t *)((char *)v156 + *(int *)(v172 + 24)) = KeyPath;
      sub_255EBB220(0, &qword_269F35680, MEMORY[0x263F18D80], MEMORY[0x263F185C8]);
      swift_storeEnumTagMultiPayload();
      sub_255EC6FC0(v113, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
      uint64_t v118 = (uint64_t (**)())((char *)v88 + *(int *)(v117 + 20));
      *uint64_t v118 = sub_255EC635C;
      v118[1] = (uint64_t (*)())v115;
      sub_255EC7028((uint64_t)v88, v170, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsCell);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F388C0, (void (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView);
      sub_255EC5F04(&qword_269F388C8, (void (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell);
      uint64_t v119 = (uint64_t)v171;
      sub_255EEEE00();
      sub_255EC7028(v119, v179, (uint64_t (*)(void))sub_255EC5C94);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F4C();
      sub_255EC6024();
      uint64_t v120 = (uint64_t)v181;
      sub_255EEEE00();
      sub_255EC7090(v119, (uint64_t (*)(void))sub_255EC5C94);
      sub_255EC7028(v120, v190, (uint64_t (*)(void))sub_255EC5CDC);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v120, (uint64_t (*)(void))sub_255EC5CDC);
      int v92 = type metadata accessor for MedicalIDBiometricsCell;
      goto LABEL_9;
    case 6:
      uint64_t v121 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v122 = v177;
      sub_255EC7028(v1 + *(int *)(v121 + 44), v177, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      sub_255EC7028(v1, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v123 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v124 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v124 + v123, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v88 = v157;
      sub_255EC6FC0(v122, (uint64_t)v157, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      int v125 = (uint64_t (**)())((char *)v88 + *(int *)(v174 + 20));
      *int v125 = sub_255EC6340;
      v125[1] = (uint64_t (*)())v124;
      sub_255EC7028((uint64_t)v88, v175, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalConditionsCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F388A8, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView);
      sub_255EC5F04(&qword_269F388B0, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView);
      uint64_t v126 = (uint64_t)v176;
      sub_255EEEE00();
      sub_255EC7028(v126, v179, (uint64_t (*)(void))sub_255EC5C4C);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F4C();
      sub_255EC6024();
      uint64_t v127 = (uint64_t)v181;
      sub_255EEEE00();
      sub_255EC7090(v126, (uint64_t (*)(void))sub_255EC5C4C);
      sub_255EC7028(v127, v190, (uint64_t (*)(void))sub_255EC5CDC);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v127, (uint64_t (*)(void))sub_255EC5CDC);
      int v92 = type metadata accessor for MedicalIDMedicalConditionsCellView;
LABEL_9:
      uint64_t v72 = (uint64_t (*)(void))v92;
      uint64_t v73 = (uint64_t)v88;
      break;
    case 7:
      uint64_t v129 = 0x4E6C61636964654DLL;
      uint64_t v130 = type metadata accessor for MedicalIDDataViewModel();
      uint64_t v131 = v148;
      sub_255EC7028(v1 + *(int *)(v130 + 44), v148, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      sub_255EC7028(v1, (uint64_t)v55, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v132 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v133 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v55, v133 + v132, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v134 = v158;
      sub_255EC6FC0(v131, v158, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalInfoViewModel);
      uint64_t v135 = (uint64_t (**)())(v134 + *(int *)(v178 + 20));
      *uint64_t v135 = sub_255EC5E00;
      v135[1] = (uint64_t (*)())v133;
      sub_255EC71EC(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v136 = swift_allocObject();
      *(_OWORD *)(v136 + 16) = xmmword_255EF1E20;
      *(void *)(v136 + 32) = 0x496C61636964654DLL;
      *(void *)(v136 + 40) = 0xE900000000000044;
      unint64_t v137 = 0xEC0000007365746FLL;
      strcpy((char *)(v136 + 48), "MedicalNotes");
      *(unsigned char *)(v136 + 61) = 0;
      *(_WORD *)(v136 + 62) = -5120;
      uint64_t v138 = (void *)sub_255EEFE90();
      swift_bridgeObjectRelease();
      id v139 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (v139)
      {
        uint64_t v129 = sub_255EEFD90();
        unint64_t v137 = v140;
      }
      uint64_t v141 = v190;
      uint64_t v142 = (uint64_t)v181;
      uint64_t v143 = v179;
      id v144 = (uint64_t *)(v134 + *(int *)(v178 + 24));
      uint64_t *v144 = v129;
      v144[1] = v137;
      uint64_t v145 = v159;
      sub_255EC6FC0(v134, v159, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalNotesCellView);
      sub_255EC7028(v145, v175, (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalNotesCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F388A8, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView);
      sub_255EC5F04(&qword_269F388B0, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView);
      uint64_t v146 = (uint64_t)v176;
      sub_255EEEE00();
      sub_255EC7028(v146, v143, (uint64_t (*)(void))sub_255EC5C4C);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F4C();
      sub_255EC6024();
      sub_255EEEE00();
      sub_255EC7090(v146, (uint64_t (*)(void))sub_255EC5C4C);
      sub_255EC7028(v142, v141, (uint64_t (*)(void))sub_255EC5CDC);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v142, (uint64_t (*)(void))sub_255EC5CDC);
      uint64_t v72 = (uint64_t (*)(void))type metadata accessor for MedicalIDMedicalNotesCellView;
      uint64_t v73 = v145;
      break;
    default:
      uint64_t v64 = type metadata accessor for MedicalIDDataViewModel();
      sub_255EC7028(v1 + *(int *)(v64 + 40), (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
      sub_255EC7028(v1, (uint64_t)v57, (uint64_t (*)(void))_s15SectionGridItemVMa);
      unint64_t v65 = (*(unsigned __int8 *)(v191 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v66 = swift_allocObject();
      sub_255EC6FC0((uint64_t)v57, v66 + v65, (uint64_t (*)(void))_s15SectionGridItemVMa);
      uint64_t v67 = (uint64_t *)&v63[*(int *)(v61 + 24)];
      sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
      sub_255DA7C7C();
      *uint64_t v67 = sub_255EEE9F0();
      v67[1] = v68;
      sub_255EC6FC0((uint64_t)v60, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for MedicalIDPersonalInfoViewModel);
      uint64_t v69 = (uint64_t (**)())&v63[*(int *)(v61 + 20)];
      *uint64_t v69 = sub_255EC6F34;
      v69[1] = (uint64_t (*)())v66;
      sub_255EC7028((uint64_t)v63, (uint64_t)v47, type metadata accessor for MedicalIDPersonalInformationCellView);
      swift_storeEnumTagMultiPayload();
      sub_255EC5F04(&qword_269F388E8, (void (*)(uint64_t))type metadata accessor for MedicalIDPersonalInformationCellView);
      sub_255EC5F04(&qword_269F388F0, (void (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView);
      uint64_t v70 = (uint64_t)v161;
      sub_255EEEE00();
      sub_255EC7028(v70, v184, (uint64_t (*)(void))sub_255EC5DB4);
      swift_storeEnumTagMultiPayload();
      sub_255EC6144();
      sub_255EC621C();
      uint64_t v71 = (uint64_t)v185;
      sub_255EEEE00();
      sub_255EC7090(v70, (uint64_t (*)(void))sub_255EC5DB4);
      sub_255EC7028(v71, v190, (uint64_t (*)(void))sub_255EC5D6C);
      swift_storeEnumTagMultiPayload();
      sub_255EC60FC();
      sub_255EC62F4();
      sub_255EEEE00();
      sub_255EC7090(v71, (uint64_t (*)(void))sub_255EC5D6C);
      uint64_t v72 = type metadata accessor for MedicalIDPersonalInformationCellView;
      uint64_t v73 = (uint64_t)v63;
      break;
  }
  return sub_255EC7090(v73, v72);
}

uint64_t sub_255EC4DAC(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 0;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC4EE0(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 1;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC5018(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 2;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC5150(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 3;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC5288(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 4;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC53C0(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 5;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC54F8(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 6;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC5630(uint64_t a1)
{
  uint64_t v2 = _s15SectionGridItemVMa();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  sub_255EC7028(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_s15SectionGridItemVMa);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_255EC6FC0((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, (uint64_t (*)(void))_s15SectionGridItemVMa);
  *(unsigned char *)(v6 + v5 + v4) = 7;
  sub_255EC5B00((uint64_t)sub_255EC70F4, v6);
  return swift_release();
}

uint64_t sub_255EC5768(char a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_255EEE3D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v13 = a3 + *(int *)(_s15SectionGridItemVMa() + 32);
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    LOBYTE(v13) = *(unsigned char *)(v13 + 16);
    v29[0] = v14;
    v29[1] = v15;
    char v30 = v13;
    LOBYTE(v31) = a4;
    sub_255EC7170();
    return sub_255EEF980();
  }
  else if (a2)
  {
    id v16 = a2;
    if (qword_269F34C50 != -1) {
      swift_once();
    }
    uint64_t v17 = __swift_project_value_buffer(v8, (uint64_t)qword_269F3FE80);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v17, v8);
    id v18 = a2;
    id v19 = a2;
    uint64_t v20 = sub_255EEE3B0();
    os_log_type_t v21 = sub_255EF00E0();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v29[0] = v28;
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v31 = sub_255DB0024(0x476E6F6974636553, 0xEF6D657449646972, v29);
      sub_255EF0200();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v31 = sub_255DB0024(0xD000000000000014, 0x8000000255EFB7E0, v29);
      sub_255EF0200();
      *(_WORD *)(v22 + 22) = 2112;
      id v23 = a2;
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v31 = v24;
      sub_255EF0200();
      uint64_t v25 = v27;
      *uint64_t v27 = v24;

      _os_log_impl(&dword_255D76000, v20, v21, "[%s.%s] Authentication failed: %@", (uint8_t *)v22, 0x20u);
      sub_255EA3028();
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v25, -1, -1);
      uint64_t v26 = v28;
      swift_arrayDestroy();
      MEMORY[0x25A29C8A0](v26, -1, -1);
      MEMORY[0x25A29C8A0](v22, -1, -1);
    }
    else
    {
    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return result;
}

void sub_255EC5B00(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_applicationWithBundleIdentifier_, *MEMORY[0x263F0AD08]);
  id v5 = objc_msgSend(self, sel_sharedGuard);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v8[4] = sub_255EC7130;
  v8[5] = v6;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1107296256;
  void v8[2] = sub_255EC296C;
  v8[3] = &block_descriptor_8;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_authenticateForSubject_completion_, v4, v7);
  _Block_release(v7);
}

void sub_255EC5C4C(uint64_t a1)
{
}

void sub_255EC5C94(uint64_t a1)
{
}

void sub_255EC5CDC(uint64_t a1)
{
}

void sub_255EC5D24(uint64_t a1)
{
}

void sub_255EC5D6C(uint64_t a1)
{
}

void sub_255EC5DB4(uint64_t a1)
{
}

uint64_t sub_255EC5E00()
{
  return sub_255EC6F4C(sub_255EC5630);
}

uint64_t sub_255EC5E18()
{
  return sub_255EEEA50();
}

uint64_t sub_255EC5E3C(uint64_t a1)
{
  uint64_t v2 = sub_255EEE860();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_255EEEA60();
}

uint64_t sub_255EC5F04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_255EC5F4C()
{
  unint64_t result = qword_269F388B8;
  if (!qword_269F388B8)
  {
    sub_255EC5C94(255);
    sub_255EC5F04(&qword_269F388C0, (void (*)(uint64_t))type metadata accessor for MedicalIDEmergencyContactsCellView);
    sub_255EC5F04(&qword_269F388C8, (void (*)(uint64_t))type metadata accessor for MedicalIDBiometricsCell);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F388B8);
  }
  return result;
}

unint64_t sub_255EC6024()
{
  unint64_t result = qword_269F388D0;
  if (!qword_269F388D0)
  {
    sub_255EC5C4C(255);
    sub_255EC5F04(&qword_269F388A8, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicalConditionsCellView);
    sub_255EC5F04(&qword_269F388B0, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicalNotesCellView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F388D0);
  }
  return result;
}

uint64_t sub_255EC60FC()
{
  return sub_255EC7E74(&qword_269F388D8, sub_255EC5D6C, (void (*)(void))sub_255EC6144, (void (*)(void))sub_255EC621C);
}

unint64_t sub_255EC6144()
{
  unint64_t result = qword_269F388E0;
  if (!qword_269F388E0)
  {
    sub_255EC5DB4(255);
    sub_255EC5F04(&qword_269F388E8, (void (*)(uint64_t))type metadata accessor for MedicalIDPersonalInformationCellView);
    sub_255EC5F04(&qword_269F388F0, (void (*)(uint64_t))type metadata accessor for MedicalIDPregnancyCellView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F388E0);
  }
  return result;
}

unint64_t sub_255EC621C()
{
  unint64_t result = qword_269F388F8;
  if (!qword_269F388F8)
  {
    sub_255EC5D24(255);
    sub_255EC5F04(&qword_269F38900, (void (*)(uint64_t))type metadata accessor for MedicalIDMedicationsCellView);
    sub_255EC5F04(&qword_269F38908, (void (*)(uint64_t))type metadata accessor for MedicalIDAllergiesCellView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F388F8);
  }
  return result;
}

uint64_t sub_255EC62F4()
{
  return sub_255EC7E74(&qword_269F38910, sub_255EC5CDC, (void (*)(void))sub_255EC5F4C, (void (*)(void))sub_255EC6024);
}

uint64_t sub_255EC6340()
{
  return sub_255EC6F4C(sub_255EC54F8);
}

uint64_t sub_255EC635C()
{
  return sub_255EC6F4C(sub_255EC53C0);
}

uint64_t sub_255EC6374()
{
  return sub_255EEEA50();
}

uint64_t sub_255EC63A8()
{
  return sub_255EC6F4C(sub_255EC5288);
}

uint64_t sub_255EC63C4()
{
  return sub_255EC6F4C(sub_255EC5150);
}

uint64_t sub_255EC63E0()
{
  return sub_255EC6F4C(sub_255EC5018);
}

uint64_t sub_255EC63FC()
{
  return sub_255EC6F4C(sub_255EC4EE0);
}

uint64_t objectdestroyTm_24()
{
  uint64_t v1 = _s15SectionGridItemVMa();
  uint64_t v52 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v53 = v1;
  uint64_t v2 = (id *)(v0 + ((v52 + 16) & ~v52));

  uint64_t v3 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v4 = (id *)((char *)v2 + v3[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = (char *)v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v7);
  }
  uint64_t v9 = (char *)v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)((char *)v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = (char *)v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
  if (!v59(v12, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v13);
  }
  uint64_t v61 = v13;

  uint64_t v14 = (char *)v4 + v5[22];
  if (!v8(v14, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v7);
  }
  uint64_t v15 = (char *)v2 + v3[6];
  uint64_t v16 = sub_255EEE280();
  uint64_t v55 = *(void (**)(char *))(*(void *)(v16 - 8) + 8);
  uint64_t v56 = v16;
  v55(v15);

  uint64_t v17 = (char *)v2 + v3[8];
  uint64_t v18 = sub_255EEE200();
  uint64_t v57 = *(void (**)(char *))(*(void *)(v18 - 8) + 8);
  uint64_t v58 = v18;
  v57(v17);
  int v60 = v3;
  id v19 = (char *)v2 + v3[9];
  swift_bridgeObjectRelease();
  uint64_t v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  os_log_type_t v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v22 = &v21[v5[13]];
  if (!v8(v22, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v22, v7);
  }
  id v23 = &v21[v5[14]];
  if (!v8(v23, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v23, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t *)&v21[v5[19]];
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_255D80D04(*v24, v25);
  }
  uint64_t v26 = &v21[v5[20]];
  if (!v59(v26, 1, v61)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v61);
  }

  uint64_t v27 = &v21[v5[22]];
  if (!v8(v27, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v27, v7);
  }
  ((void (*)(char *, uint64_t))v57)(&v19[v20[6]], v58);
  uint64_t v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v57)(v28, v58);

  uint64_t v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v57)(v29, v58);
  uint64_t v30 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v31 = (id *)((char *)v2 + v60[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v32 = (char *)v31 + v5[13];
  if (!v8(v32, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v7);
  }
  uint64_t v33 = (char *)v31 + v5[14];
  if (!v8(v33, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v33, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)((char *)v31 + v5[19]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_255D80D04(*v34, v35);
  }
  uint64_t v36 = (char *)v31 + v5[20];
  if (!v59(v36, 1, v61)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v61);
  }

  uint64_t v37 = (char *)v31 + v5[22];
  if (!v8(v37, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v7);
  }
  uint64_t v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v55)((char *)v31 + v38[5], v56);
  ((void (*)(char *, uint64_t))v57)((char *)v31 + v38[6], v58);

  swift_bridgeObjectRelease();
  uint64_t v39 = (id *)((char *)v2 + v60[11]);

  uint64_t v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v55)((char *)v39 + *(int *)(v40 + 20), v56);
  ((void (*)(char *, uint64_t))v57)((char *)v39 + *(int *)(v40 + 24), v58);
  uint64_t v41 = (char *)v2 + v60[12];
  swift_bridgeObjectRelease();
  uint64_t v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v44 = &v43[v5[13]];
  if (!v8(v44, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v7);
  }
  uint64_t v45 = &v43[v5[14]];
  if (!v8(v45, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v45, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t *)&v43[v5[19]];
  unint64_t v47 = v46[1];
  if (v47 >> 60 != 15) {
    sub_255D80D04(*v46, v47);
  }
  uint64_t v48 = &v43[v5[20]];
  if (!v59(v48, 1, v61)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v48, v61);
  }

  uint64_t v49 = &v43[v5[22]];
  if (!v8(v49, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v7);
  }
  ((void (*)(char *, uint64_t))v55)(&v41[v42[6]], v56);
  ((void (*)(char *, uint64_t))v57)(&v41[v42[7]], v58);
  swift_release();
  uint64_t v50 = &v41[v42[9]];
  if (!v8(v50, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v50, v7);
  }

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255EC6F34()
{
  return sub_255EC6F4C(sub_255EC4DAC);
}

uint64_t sub_255EC6F4C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(_s15SectionGridItemVMa() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3);
}

uint64_t sub_255EC6FC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_255EC7028(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255EC7090(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_255EC70F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255EC7130()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void sub_255EC7170()
{
  if (!qword_269F38918)
  {
    sub_255EC71EC(255, &qword_269F355A8, (uint64_t)&type metadata for MedicalIDDisplaySection, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_255EEF9D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269F38918);
    }
  }
}

void sub_255EC71EC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v1 = _s15SectionGridItemVMa();
  uint64_t v52 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v53 = v1;
  uint64_t v2 = (id *)(v0 + ((v52 + 16) & ~v52));

  uint64_t v3 = (int *)type metadata accessor for MedicalIDDataViewModel();
  uint64_t v4 = (id *)((char *)v2 + v3[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v5 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v6 = (char *)v4 + v5[13];
  uint64_t v7 = sub_255EEE100();
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  if (!v8(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v7);
  }
  uint64_t v9 = (char *)v4 + v5[14];
  if (!v8(v9, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)((char *)v4 + v5[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = (char *)v4 + v5[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
  if (!v59(v12, 1, v13)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v13);
  }
  uint64_t v61 = v13;

  uint64_t v14 = (char *)v4 + v5[22];
  if (!v8(v14, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v14, v7);
  }
  uint64_t v15 = (char *)v2 + v3[6];
  uint64_t v16 = sub_255EEE280();
  uint64_t v55 = *(void (**)(char *))(*(void *)(v16 - 8) + 8);
  uint64_t v56 = v16;
  v55(v15);

  uint64_t v17 = (char *)v2 + v3[8];
  uint64_t v18 = sub_255EEE200();
  uint64_t v57 = *(void (**)(char *))(*(void *)(v18 - 8) + 8);
  uint64_t v58 = v18;
  v57(v17);
  int v60 = v3;
  id v19 = (char *)v2 + v3[9];
  swift_bridgeObjectRelease();
  uint64_t v20 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  os_log_type_t v21 = &v19[v20[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v22 = &v21[v5[13]];
  if (!v8(v22, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v22, v7);
  }
  id v23 = &v21[v5[14]];
  if (!v8(v23, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v23, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t *)&v21[v5[19]];
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_255D80D04(*v24, v25);
  }
  uint64_t v26 = &v21[v5[20]];
  if (!v59(v26, 1, v61)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v61);
  }

  uint64_t v27 = &v21[v5[22]];
  if (!v8(v27, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v27, v7);
  }
  ((void (*)(char *, uint64_t))v57)(&v19[v20[6]], v58);
  uint64_t v28 = &v19[v20[7]];
  ((void (*)(char *, uint64_t))v57)(v28, v58);

  uint64_t v29 = &v19[v20[8]];
  ((void (*)(char *, uint64_t))v57)(v29, v58);
  uint64_t v30 = type metadata accessor for MedicalIDWeightFormatter();

  uint64_t v31 = (id *)((char *)v2 + v60[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v32 = (char *)v31 + v5[13];
  if (!v8(v32, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v7);
  }
  uint64_t v33 = (char *)v31 + v5[14];
  if (!v8(v33, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v33, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)((char *)v31 + v5[19]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_255D80D04(*v34, v35);
  }
  uint64_t v36 = (char *)v31 + v5[20];
  if (!v59(v36, 1, v61)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v61);
  }

  uint64_t v37 = (char *)v31 + v5[22];
  if (!v8(v37, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v7);
  }
  uint64_t v38 = (int *)type metadata accessor for MedicalIDPersonalInfoViewModel();
  ((void (*)(char *, uint64_t))v55)((char *)v31 + v38[5], v56);
  ((void (*)(char *, uint64_t))v57)((char *)v31 + v38[6], v58);

  swift_bridgeObjectRelease();
  uint64_t v39 = (id *)((char *)v2 + v60[11]);

  uint64_t v40 = type metadata accessor for MedicalIDMedicalInfoViewModel();
  ((void (*)(char *, uint64_t))v55)((char *)v39 + *(int *)(v40 + 20), v56);
  ((void (*)(char *, uint64_t))v57)((char *)v39 + *(int *)(v40 + 24), v58);
  uint64_t v41 = (char *)v2 + v60[12];
  swift_bridgeObjectRelease();
  uint64_t v42 = (int *)type metadata accessor for MedicalIDPregnancyViewModel();
  uint64_t v43 = &v41[v42[5]];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v44 = &v43[v5[13]];
  if (!v8(v44, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v7);
  }
  uint64_t v45 = &v43[v5[14]];
  if (!v8(v45, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v45, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t *)&v43[v5[19]];
  unint64_t v47 = v46[1];
  if (v47 >> 60 != 15) {
    sub_255D80D04(*v46, v47);
  }
  uint64_t v48 = &v43[v5[20]];
  if (!v59(v48, 1, v61)) {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v48, v61);
  }

  uint64_t v49 = &v43[v5[22]];
  if (!v8(v49, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v7);
  }
  ((void (*)(char *, uint64_t))v55)(&v41[v42[6]], v56);
  ((void (*)(char *, uint64_t))v57)(&v41[v42[7]], v58);
  swift_release();
  uint64_t v50 = &v41[v42[9]];
  if (!v8(v50, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v50, v7);
  }

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_255EC7D74(char a1, void *a2)
{
  uint64_t v5 = *(void *)(_s15SectionGridItemVMa() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  char v7 = *(unsigned char *)(v2 + v6 + *(void *)(v5 + 64));
  return sub_255EC5768(a1, a2, v2 + v6, v7);
}

uint64_t sub_255EC7E18()
{
  return sub_255EC7E74(&qword_269F38920, sub_255EC7F00, (void (*)(void))sub_255EC60FC, (void (*)(void))sub_255EC62F4);
}

uint64_t sub_255EC7E74(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_255EC7F00(uint64_t a1)
{
}

void sub_255EC7F48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_255EC7FCC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v64 = a1;
  uint64_t v5 = (int *)type metadata accessor for MedicalIDEditBiometricsModalView();
  unint64_t v6 = (_OWORD *)(a4 + v5[5]);
  sub_255E13D48(0, (unint64_t *)&qword_269F35708, (uint64_t)&type metadata for BasicAlertModel, MEMORY[0x263F8D8F0]);
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v68 = 0;
  sub_255EEF810();
  long long v7 = v70;
  *unint64_t v6 = v69;
  v6[1] = v7;
  long long v8 = v72;
  v6[2] = v71;
  v6[3] = v8;
  uint64_t v9 = (uint64_t *)(a4 + v5[6]);
  *uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F185C8];
  sub_255EC8808(0, &qword_269F35320, MEMORY[0x270FA9818], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  unint64_t v11 = (uint64_t *)(a4 + v5[7]);
  *unint64_t v11 = swift_getKeyPath();
  sub_255EC8808(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], v10);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a4 + v5[8];
  type metadata accessor for MedicalIDDataManager();
  sub_255ECFCCC(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  *(void *)uint64_t v12 = sub_255EEE650();
  *(unsigned char *)(v12 + 8) = v13 & 1;
  uint64_t v14 = (uint64_t *)(a4 + v5[9]);
  sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  sub_255DA7C7C();
  *uint64_t v14 = sub_255EEE9F0();
  v14[1] = v15;
  uint64_t v16 = a4 + v5[12];
  sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))((char *)v56 - v19, 1, 1, v20);
  uint64_t v60 = v18;
  MEMORY[0x270FA5388](v21);
  unint64_t v59 = v19;
  sub_255EC8920((uint64_t)v56 - v19, (uint64_t)v56 - v19, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v61 = v16;
  sub_255EEF810();
  sub_255EC8994((uint64_t)v56 - v19, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v22 = a4 + v5[13];
  sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
  MEMORY[0x270FA5388](v23);
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))((char *)v56 - v25, 1, 1, v26);
  MEMORY[0x270FA5388](v27);
  unint64_t v57 = v25;
  sub_255EC8920((uint64_t)v56 - v25, (uint64_t)v56 - v25, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v58 = v22;
  sub_255EEF810();
  uint64_t v28 = 0x697274656D6F6942;
  sub_255EC8994((uint64_t)v56 - v25, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  sub_255E13D48(0, (unint64_t *)&qword_269F37DA0, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_255EF1E20;
  *(void *)(v29 + 32) = 0x496C61636964654DLL;
  *(void *)(v29 + 40) = 0xE900000000000044;
  unint64_t v30 = 0xEA00000000007363;
  *(void *)(v29 + 48) = 0x697274656D6F6942;
  *(void *)(v29 + 56) = 0xEA00000000007363;
  uint64_t v31 = (void *)sub_255EEFE90();
  swift_bridgeObjectRelease();
  id v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v32)
  {
    uint64_t v28 = sub_255EEFD90();
    unint64_t v30 = v33;
  }
  uint64_t v34 = (uint64_t *)(a4 + v5[15]);
  *uint64_t v34 = v28;
  v34[1] = v30;
  uint64_t v35 = a4 + v5[16];
  sub_255ECA7AC();
  sub_255EEE590();
  uint64_t v36 = *((void *)&v69 + 1);
  char v37 = v70;
  *(unsigned char *)uint64_t v35 = v69;
  *(void *)(v35 + 8) = v36;
  *(unsigned char *)(v35 + 16) = v37;
  uint64_t v38 = v64;
  sub_255ECA800(v64, a4, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  uint64_t v39 = v62;
  uint64_t v40 = v63;
  *(void *)(a4 + v5[10]) = v62;
  *(void *)(a4 + v5[11]) = v40;
  uint64_t v41 = type metadata accessor for MedicalIDBiometricsViewModel();
  v56[1] = v56;
  uint64_t v42 = v38 + *(int *)(v41 + 20);
  uint64_t v43 = (void *)(a4 + v5[14]);
  void *v43 = *(void *)(v42 + 88);
  v43[1] = 0;
  MEMORY[0x270FA5388](v41);
  uint64_t v44 = (char *)v56 - v57;
  uint64_t v45 = *(void **)(v42 + 96);
  id v46 = v39;
  swift_retain();
  sub_255DFD46C(v45, (uint64_t)v44);
  unint64_t v47 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B5D0];
  uint64_t v48 = v58;
  sub_255ED0020(v58, (uint64_t)&qword_269F384C8, MEMORY[0x263F1B5D0], (uint64_t (*)(void))sub_255ECFF18);
  sub_255ECFF18(0, &qword_269F384C8, v47);
  *(void *)(v48 + *(int *)(v49 + 28)) = 0;
  uint64_t v50 = sub_255ECA948((uint64_t)v44, v48, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  MEMORY[0x270FA5388](v50);
  uint64_t v51 = (char *)v56 - v59;
  sub_255E447D4(*(void **)(v42 + 104), (uint64_t)v56 - v59);

  swift_release();
  sub_255ECA868(v38, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F1B5D0];
  uint64_t v53 = v61;
  sub_255ED0020(v61, (uint64_t)&qword_269F38948, MEMORY[0x263F1B5D0], (uint64_t (*)(void))sub_255ECA8C8);
  sub_255ECA8C8(0, &qword_269F38948, v52);
  *(void *)(v53 + *(int *)(v54 + 28)) = 0;
  return sub_255ECA948((uint64_t)v51, v53, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
}

uint64_t type metadata accessor for MedicalIDEditBiometricsModalView()
{
  uint64_t result = qword_269F38950;
  if (!qword_269F38950) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_255EC8808(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_255EC886C(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    sub_255EC88C8(255, a3, a4);
    unint64_t v5 = sub_255EF01E0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_255EC88C8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_255D7ED10(255, a3);
    unint64_t v4 = sub_255EEDE20();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_255EC8920(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  sub_255EC886C(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_255EC8994(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  sub_255EC886C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_255EC89F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MedicalIDEditBiometricsModalView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269F34C60 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)algn_269F38938;
  uint64_t v39 = qword_269F38930;
  uint64_t v38 = type metadata accessor for MedicalIDEditBiometricsModalView;
  sub_255ECA800(v2, (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MedicalIDEditBiometricsModalView);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v41 = v9 | 7;
  uint64_t v11 = swift_allocObject();
  uint64_t v40 = type metadata accessor for MedicalIDEditBiometricsModalView;
  sub_255ECF8B8((uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, (uint64_t (*)(void))type metadata accessor for MedicalIDEditBiometricsModalView);
  uint64_t v12 = (long long *)(v2 + *(int *)(v4 + 20));
  long long v13 = v12[1];
  long long v43 = *v12;
  long long v44 = v13;
  long long v14 = v12[3];
  long long v45 = v12[2];
  long long v46 = v14;
  sub_255DD059C();
  swift_bridgeObjectRetain();
  sub_255EEF840();
  long long v37 = v47;
  long long v36 = v48;
  long long v35 = v49;
  long long v34 = v50;
  uint64_t v15 = v51;
  *a1 = swift_getKeyPath();
  sub_255EC8808(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  sub_255ECF9EC();
  uint64_t v17 = v16;
  uint64_t v18 = (uint64_t *)((char *)a1 + v16[9]);
  *uint64_t v18 = v39;
  v18[1] = v8;
  unint64_t v19 = (uint64_t *)((char *)a1 + v16[10]);
  *unint64_t v19 = &unk_269F38970;
  v19[1] = v11;
  uint64_t v20 = (char *)a1 + v16[11];
  long long v21 = v36;
  *(_OWORD *)uint64_t v20 = v37;
  *((_OWORD *)v20 + 1) = v21;
  long long v22 = v34;
  *((_OWORD *)v20 + 2) = v35;
  *((_OWORD *)v20 + 3) = v22;
  *((void *)v20 + 8) = v15;
  uint64_t v23 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)a1 + v16[12]);
  uint64_t v24 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v25 = v38;
  sub_255ECA800(v2, (uint64_t)v24, (uint64_t (*)(void))v38);
  uint64_t v26 = swift_allocObject();
  uint64_t v39 = (uint64_t)a1;
  uint64_t v27 = v10;
  uint64_t v28 = v26 + v10;
  uint64_t v29 = v40;
  sub_255ECF8B8((uint64_t)v7, v28, (uint64_t (*)(void))v40);
  sub_255ECA800(v2, (uint64_t)v7, (uint64_t (*)(void))v25);
  uint64_t v30 = swift_allocObject();
  sub_255ECF8B8((uint64_t)v7, v30 + v27, (uint64_t (*)(void))v29);
  *uint64_t v23 = sub_255ECFE34;
  v23[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v26;
  uint64_t v23[2] = (uint64_t (*)@<X0>(uint64_t@<X8>))sub_255ECFEA8;
  v23[3] = (uint64_t (*)@<X0>(uint64_t@<X8>))v30;
  void v23[4] = (uint64_t (*)@<X0>(uint64_t@<X8>))nullsub_1;
  v23[5] = 0;
  uint64_t v31 = v39 + v17[13];
  char v42 = 0;
  uint64_t result = sub_255EEF810();
  uint64_t v33 = *((void *)&v43 + 1);
  *(unsigned char *)uint64_t v31 = v43;
  *(void *)(v31 + 8) = v33;
  return result;
}

uint64_t sub_255EC8DA4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_255D7E778;
  return sub_255EC8E34();
}

uint64_t sub_255EC8E34()
{
  v1[17] = v0;
  uint64_t v2 = sub_255EEE730();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  sub_255D894E4(0);
  v1[21] = swift_task_alloc();
  type metadata accessor for MedicalIDData();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = sub_255EEFF70();
  v1[25] = sub_255EEFF60();
  uint64_t v4 = sub_255EEFF20();
  v1[26] = v4;
  v1[27] = v3;
  return MEMORY[0x270FA2498](sub_255EC8F94, v4, v3);
}

uint64_t sub_255EC8F94()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = type metadata accessor for MedicalIDEditBiometricsModalView();
  *(void *)(v0 + 224) = v4;
  uint64_t v24 = v3 + *(int *)(v4 + 32);
  char v5 = *(unsigned char *)(v24 + 8);
  uint64_t v6 = swift_retain();
  uint64_t v7 = sub_255DAA2A0(v6, v5);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 120) = v7;
  *(void *)(v0 + 232) = sub_255ECFCCC(&qword_269F35218, (void (*)(uint64_t))type metadata accessor for MedicalIDDataManager);
  sub_255EEE2D0();
  swift_release();
  uint64_t v8 = v7 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255ECA800(v8, v2, (uint64_t (*)(void))sub_255D894E4);
  swift_release();
  LoadState<>.loadedValue.getter(v1);
  sub_255ECA868(v2, (uint64_t (*)(void))sub_255D894E4);
  sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v9 = swift_task_alloc();
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v10 = swift_task_alloc();
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  *(_OWORD *)(v0 + 88) = *(_OWORD *)(v3 + *(int *)(v4 + 56));
  sub_255EC8808(0, &qword_269F389D0, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, MEMORY[0x263F1B5D0]);
  sub_255EEF820();
  *(void *)(v1 + 88) = *(void *)(v0 + 112);
  id v11 = sub_255E9E4C4(v9);

  *(void *)(v1 + 96) = v11;
  id v12 = sub_255E9E7A0(v10);

  *(void *)(v1 + 104) = v12;
  sub_255EC8994(v10, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  sub_255EC8994(v9, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  swift_task_dealloc();
  swift_task_dealloc();
  MedicalIDBiometricsViewModel.validationResult(for:)(v1, (uint64_t)&v26);
  uint64_t v13 = v27;
  if (v27)
  {
    uint64_t v14 = v30;
    long long v23 = v28;
    long long v25 = v29;
    uint64_t v15 = v26;
    swift_release();
    sub_255D86638();
    swift_allocError();
    *(void *)uint64_t v16 = v15;
    *(void *)(v16 + 8) = v13;
    *(_OWORD *)(v16 + 16) = v23;
    *(_OWORD *)(v16 + 32) = v25;
    *(void *)(v16 + 48) = v14;
    swift_willThrow();
    sub_255ECA868(*(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for MedicalIDData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    char v19 = *(unsigned char *)(v24 + 8);
    uint64_t v20 = swift_retain();
    *(void *)(v0 + 240) = sub_255DAA2A0(v20, v19);
    swift_release();
    *(void *)(v0 + 248) = sub_255EEFF60();
    uint64_t v22 = sub_255EEFF20();
    *(void *)(v0 + 256) = v22;
    *(void *)(v0 + 264) = v21;
    return MEMORY[0x270FA2498](sub_255EC9484, v22, v21);
  }
}

uint64_t sub_255EC9484()
{
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[21];
  swift_getKeyPath();
  v0[13] = v1;
  sub_255EEE2D0();
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC11MedicalIDUI20MedicalIDDataManager__medicalIDData;
  swift_beginAccess();
  sub_255ECA800(v5, v4, (uint64_t (*)(void))sub_255D894E4);
  LoadState<>.loadedValue.getter(v3);
  sub_255ECA868(v4, (uint64_t (*)(void))sub_255D894E4);
  sub_255ECA868(v3, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_beginAccess();
  sub_255ECA800(v2, v3, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_255EC964C;
  uint64_t v7 = v0[22];
  return sub_255E8F53C(v7, (uint64_t)(v0 + 16));
}

uint64_t sub_255EC964C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  uint64_t v4 = *(void *)(v2 + 264);
  if (v0) {
    uint64_t v5 = sub_255EC98E4;
  }
  else {
    uint64_t v5 = sub_255EC975C;
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

uint64_t sub_255EC975C()
{
  uint64_t v1 = v0[22];
  swift_release();
  sub_255ECA868(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_release();
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[27];
  return MEMORY[0x270FA2498](sub_255EC97E8, v2, v3);
}

uint64_t sub_255EC97E8()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  swift_release();
  sub_255DAA4A8(v2);
  sub_255EEE720();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_255ECA868(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_255EC98E4()
{
  uint64_t v1 = v0[22];
  swift_release();
  sub_255ECA868(v1, (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_release();
  v0[35] = v0[16];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[27];
  return MEMORY[0x270FA2498](sub_255EC9978, v2, v3);
}

uint64_t sub_255EC9978()
{
  uint64_t v1 = v0[35];
  swift_release();
  sub_255DBD3D8();
  swift_allocError();
  *uint64_t v2 = v1;
  sub_255ECA868(v0[23], (uint64_t (*)(void))type metadata accessor for MedicalIDData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_255EC9A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v96 = type metadata accessor for EditBloodTypeCellView() - 8;
  uint64_t v3 = MEMORY[0x270FA5388](v96);
  uint64_t v97 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v95 = (uint64_t)&v79 - v5;
  uint64_t v86 = type metadata accessor for EditWeightCellView();
  MEMORY[0x270FA5388](v86);
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_255ECFBD4();
  uint64_t v103 = *(void *)(v8 - 8);
  uint64_t v104 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v94 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v101 = (char *)&v79 - v11;
  uint64_t v12 = type metadata accessor for MedicalIDEditBiometricsModalView();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = v12 - 8;
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v16 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MedicalIDBiometricsViewModel();
  MEMORY[0x270FA5388](v17 - 8);
  char v19 = (uint64_t *)((char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for EditHeightCellView();
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v102 = (uint64_t)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (uint64_t *)((char *)&v79 - v23);
  uint64_t v100 = (uint64_t)&v79 - v23;
  *(void *)&long long v99 = type metadata accessor for MedicalIDBiometricsViewModel;
  sub_255ECA800(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  sub_255ECFF18(0, &qword_269F384C0, MEMORY[0x263F1B750]);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v79 - v26;
  uint64_t v79 = v15;
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v28 = *(int *)(v15 + 52);
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v87 = v28;
  uint64_t v93 = type metadata accessor for MedicalIDEditBiometricsModalView;
  uint64_t v88 = v16;
  sub_255ECA800(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MedicalIDEditBiometricsModalView);
  uint64_t v30 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v31 = (v30 + 16) & ~v30;
  uint64_t v91 = v31 + v14;
  uint64_t v92 = v31;
  uint64_t v90 = v30 | 7;
  uint64_t v32 = swift_allocObject();
  int v89 = type metadata accessor for MedicalIDEditBiometricsModalView;
  sub_255ECF8B8((uint64_t)v16, v32 + v31, (uint64_t (*)(void))type metadata accessor for MedicalIDEditBiometricsModalView);
  swift_retain();
  uint64_t v81 = v19;
  sub_255EA4F30(v19, (uint64_t)v27, v29, (uint64_t)sub_255ECFF9C, v32, v24);
  uint64_t v33 = (uint64_t (*)(void))v99;
  sub_255ECA800(a1, (uint64_t)v19, (uint64_t (*)(void))v99);
  uint64_t v83 = MEMORY[0x263F1B750];
  sub_255ECA8C8(0, &qword_269F36BC0, MEMORY[0x263F1B750]);
  uint64_t v82 = v34;
  MEMORY[0x270FA5388](v34);
  long long v36 = (char *)&v79 - v35;
  uint64_t v37 = v79;
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  uint64_t v80 = *(void *)(a1 + v28);
  uint64_t v38 = (int *)v86;
  *(void *)&v7[*(int *)(v86 + 28)] = 6;
  uint64_t v39 = (uint64_t *)&v7[v38[9]];
  uint64_t *v39 = swift_getKeyPath();
  sub_255EC8808(0, &qword_269F35320, MEMORY[0x270FA9818], MEMORY[0x263F185C8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = (uint64_t *)&v7[v38[10]];
  uint64_t v85 = sub_255D7ED10(0, (unint64_t *)&qword_269F354E8);
  unint64_t v84 = sub_255DA7C7C();
  swift_retain();
  *uint64_t v40 = sub_255EEE9F0();
  v40[1] = v41;
  uint64_t v42 = (uint64_t)v81;
  sub_255ECA800((uint64_t)v81, (uint64_t)v7, v33);
  sub_255ECFFA0((uint64_t)v36, (uint64_t)&v7[v38[5]]);
  sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  MEMORY[0x270FA5388](v43 - 8);
  long long v45 = (char *)&v79 - v44;
  MEMORY[0x25A29B390](v82);
  id v46 = MedicalIDBiometricsViewModel.formattedWeightText(for:)((uint64_t)v45);
  uint64_t v48 = v47;
  sub_255ED0020((uint64_t)v36, (uint64_t)&qword_269F36BC0, v83, (uint64_t (*)(void))sub_255ECA8C8);
  sub_255ECA868(v42, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  sub_255EC8994((uint64_t)v45, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
  long long v49 = &v7[v38[8]];
  *(void *)long long v49 = v46;
  *((void *)v49 + 1) = v48;
  *((void *)v49 + 2) = 0;
  *(void *)&v7[v38[6]] = v80;
  uint64_t v50 = a1 + *(int *)(v37 + 72);
  char v51 = *(unsigned char *)v50;
  uint64_t v52 = *(void *)(v50 + 8);
  LOBYTE(v50) = *(unsigned char *)(v50 + 16);
  LOBYTE(v107) = v51;
  *((void *)&v107 + 1) = v52;
  char v108 = v50;
  sub_255ED0080();
  sub_255EEE570();
  LOBYTE(v107) = 0;
  sub_255E13D48(0, &qword_269F389A0, (uint64_t)&type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus, MEMORY[0x263F8D8F0]);
  sub_255ECFCCC(&qword_269F389A8, (void (*)(uint64_t))type metadata accessor for EditWeightCellView);
  sub_255ECFD14();
  uint64_t v53 = v94;
  sub_255EEF620();
  swift_release();
  swift_release();
  sub_255ECA868((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for EditWeightCellView);
  uint64_t v54 = v101;
  (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v101, v53, v104);
  sub_255ECA800(a1, v42, (uint64_t (*)(void))v99);
  long long v107 = *(_OWORD *)(a1 + *(int *)(v37 + 64));
  sub_255EC8808(0, &qword_269F389D0, (uint64_t (*)(uint64_t))type metadata accessor for HKBloodType, MEMORY[0x263F1B5D0]);
  sub_255EEF840();
  long long v99 = v105;
  uint64_t v55 = v106;
  uint64_t v56 = *(void *)(a1 + v87);
  uint64_t v57 = (uint64_t)v88;
  sub_255ECA800(a1, (uint64_t)v88, (uint64_t (*)(void))v93);
  uint64_t v58 = swift_allocObject();
  sub_255ECF8B8(v57, v58 + v92, (uint64_t (*)(void))v89);
  swift_retain();
  uint64_t v59 = sub_255EEE9F0();
  uint64_t v61 = v60;
  uint64_t v62 = v95;
  sub_255ECF8B8(v42, v95, (uint64_t (*)(void))type metadata accessor for MedicalIDBiometricsViewModel);
  uint64_t v63 = (int *)v96;
  uint64_t v64 = v62 + *(int *)(v96 + 28);
  *(_OWORD *)uint64_t v64 = v99;
  *(void *)(v64 + 16) = v55;
  *(void *)(v62 + v63[8]) = v56;
  long long v65 = (void *)(v62 + v63[9]);
  *long long v65 = sub_255ECFF9C;
  v65[1] = v58;
  long long v66 = (uint64_t *)(v62 + v63[10]);
  *long long v66 = v59;
  v66[1] = v61;
  uint64_t v67 = v102;
  sub_255ECA800(v100, v102, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  uint64_t v68 = v103;
  long long v69 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  long long v70 = v54;
  uint64_t v71 = v104;
  v69(v53, v70, v104);
  uint64_t v72 = v97;
  sub_255ECA800(v62, v97, (uint64_t (*)(void))type metadata accessor for EditBloodTypeCellView);
  uint64_t v73 = v67;
  uint64_t v74 = v98;
  sub_255ECA800(v73, v98, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255ECFB4C();
  uint64_t v76 = v75;
  v69((char *)(v74 + *(int *)(v75 + 48)), v53, v71);
  sub_255ECA800(v72, v74 + *(int *)(v76 + 64), (uint64_t (*)(void))type metadata accessor for EditBloodTypeCellView);
  sub_255ECA868(v62, (uint64_t (*)(void))type metadata accessor for EditBloodTypeCellView);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v68 + 8);
  v77(v101, v71);
  sub_255ECA868(v100, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
  sub_255ECA868(v72, (uint64_t (*)(void))type metadata accessor for EditBloodTypeCellView);
  v77(v53, v71);
  return sub_255ECA868(v102, (uint64_t (*)(void))type metadata accessor for EditHeightCellView);
}

uint64_t sub_255ECA544()
{
  return sub_255EEE560();
}

uint64_t sub_255ECA5B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (qword_269F34B28 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_269F3FDB0;
  uint64_t v4 = *(void *)algn_269F3FDB8;
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for MedicalIDEditBiometricsModalView() + 60));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  *a2 = v5;
  a2[1] = v4;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = v7;
  a2[5] = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_255ECA65C()
{
  uint64_t v0 = sub_255EEFD40();
  MEMORY[0x270FA5388](v0 - 8);
  sub_255EEFCD0();
  if (qword_269F349A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_269F352A8;
  uint64_t v2 = sub_255EEE200();
  MEMORY[0x270FA5388](v2 - 8);
  id v3 = v1;
  sub_255EEE1F0();
  uint64_t result = sub_255EEFDA0();
  qword_269F38930 = result;
  *(void *)algn_269F38938 = v5;
  return result;
}

unint64_t sub_255ECA7AC()
{
  unint64_t result = qword_269F38940;
  if (!qword_269F38940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269F38940);
  }
  return result;
}

uint64_t sub_255ECA800(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_255ECA868(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_255ECA8C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_255EC886C(255, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_255ECA948(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  sub_255EC886C(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for MedicalIDEditBiometricsModalView.TextFieldFocus(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x255ECAA58);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDEditBiometricsModalView.TextFieldFocus()
{
  return &type metadata for MedicalIDEditBiometricsModalView.TextFieldFocus;
}

char *sub_255ECAA90(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v25 = (char *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v6;
    unint64_t v140 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
    uint64_t v7 = v140[5];
    uint64_t v143 = a1;
    id v144 = a2;
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = *(void *)&a2[v7];
    uint64_t v11 = *((void *)v9 + 1);
    *(void *)uint64_t v8 = v10;
    *((void *)v8 + 1) = v11;
    uint64_t v12 = *((void *)v9 + 3);
    *((void *)v8 + 2) = *((void *)v9 + 2);
    *((void *)v8 + 3) = v12;
    uint64_t v13 = *((void *)v9 + 5);
    *((void *)v8 + 4) = *((void *)v9 + 4);
    *((void *)v8 + 5) = v13;
    uint64_t v14 = *((void *)v9 + 7);
    *((void *)v8 + 6) = *((void *)v9 + 6);
    *((void *)v8 + 7) = v14;
    uint64_t v15 = *((void *)v9 + 9);
    *((void *)v8 + 8) = *((void *)v9 + 8);
    *((void *)v8 + 9) = v15;
    uint64_t v16 = *((void *)v9 + 11);
    *((void *)v8 + 10) = *((void *)v9 + 10);
    *((void *)v8 + 11) = v16;
    unint64_t v137 = (void *)*((void *)v9 + 12);
    uint64_t v141 = (void *)*((void *)v9 + 13);
    *((void *)v8 + 12) = v137;
    *((void *)v8 + 13) = v141;
    uint64_t v145 = (int *)type metadata accessor for MedicalIDData();
    uint64_t v17 = v145[13];
    __dst = &v8[v17];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = sub_255EEE100();
    uint64_t v138 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v21 = v137;
    id v22 = v141;
    uint64_t v142 = v20;
    if (v20(v18, 1, v19))
    {
      sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v18, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(__dst, 0, 1, v19);
    }
    uint64_t v26 = v145[14];
    uint64_t v27 = &v8[v26];
    uint64_t v28 = &v9[v26];
    if (v142(&v9[v26], 1, v19))
    {
      uint64_t v29 = v138;
      sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
      memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v27, v28, v19);
      uint64_t v29 = v138;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v27, 0, 1, v19);
    }
    uint64_t v31 = v145[15];
    uint64_t v32 = &v8[v31];
    uint64_t v33 = &v9[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = v145[16];
    long long v36 = &v8[v35];
    uint64_t v37 = &v9[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)long long v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    v8[v145[17]] = v9[v145[17]];
    v8[v145[18]] = v9[v145[18]];
    uint64_t v39 = v145[19];
    uint64_t v40 = &v8[v39];
    uint64_t v41 = (uint64_t *)&v9[v39];
    unint64_t v42 = *(void *)&v9[v39 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    }
    else
    {
      uint64_t v43 = *v41;
      sub_255D80890(*v41, v42);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v42;
    }
    uint64_t v44 = v29;
    uint64_t v45 = v145[20];
    id v46 = &v8[v45];
    uint64_t v47 = &v9[v45];
    uint64_t v48 = sub_255EEDF60();
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      sub_255EC8808(0, &qword_269F350B8, MEMORY[0x270FA8120], MEMORY[0x263F8D8F0]);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    uint64_t v51 = v145[21];
    uint64_t v52 = *(void **)&v9[v51];
    *(void *)&v8[v51] = v52;
    uint64_t v53 = v145[22];
    uint64_t v54 = &v8[v53];
    uint64_t v55 = &v9[v53];
    id v56 = v52;
    if (v142(v55, 1, v19))
    {
      sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
      memcpy(v54, v55, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v54, v55, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v54, 0, 1, v19);
    }
    uint64_t v58 = v140[6];
    uint64_t v59 = &v143[v58];
    uint64_t v60 = &v144[v58];
    uint64_t v61 = sub_255EEE200();
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16);
    v62(v59, v60, v61);
    uint64_t v63 = v140[7];
    uint64_t v64 = &v143[v63];
    long long v65 = &v144[v63];
    v62(&v143[v63], &v144[v63], v61);
    uint64_t v66 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
    uint64_t v67 = *(void **)&v65[v66];
    *(void *)&v64[v66] = v67;
    uint64_t v68 = v140[8];
    long long v69 = &v143[v68];
    long long v70 = &v144[v68];
    id v71 = v67;
    v62(v69, v70, v61);
    uint64_t v72 = type metadata accessor for MedicalIDWeightFormatter();
    uint64_t v73 = *(int *)(v72 + 20);
    uint64_t v74 = *(void **)&v70[v73];
    *(void *)&v69[v73] = v74;
    uint64_t v75 = *(int *)(v72 + 24);
    uint64_t v76 = *(void **)&v70[v75];
    *(void *)&v69[v75] = v76;
    uint64_t v77 = a3[5];
    uint64_t v78 = &v143[v77];
    uint64_t v79 = &v144[v77];
    uint64_t v80 = *(void *)&v144[v77 + 8];
    id v81 = v74;
    id v82 = v76;
    if (v80)
    {
      *(void *)uint64_t v78 = *(void *)v79;
      *((void *)v78 + 1) = v80;
      uint64_t v83 = *((void *)v79 + 3);
      *((void *)v78 + 2) = *((void *)v79 + 2);
      *((void *)v78 + 3) = v83;
      uint64_t v84 = *((void *)v79 + 5);
      *((void *)v78 + 4) = *((void *)v79 + 4);
      *((void *)v78 + 5) = v84;
      *((void *)v78 + 6) = *((void *)v79 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v85 = *((_OWORD *)v79 + 1);
      *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
      *((_OWORD *)v78 + 1) = v85;
      *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
      *((void *)v78 + 6) = *((void *)v79 + 6);
    }
    *((void *)v78 + 7) = *((void *)v79 + 7);
    uint64_t v86 = a3[6];
    uint64_t v87 = &v143[v86];
    uint64_t v88 = &v144[v86];
    sub_255EC8808(0, &qword_269F35320, MEMORY[0x270FA9818], MEMORY[0x263F185C8]);
    swift_retain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v62(v87, v88, v61);
    }
    else
    {
      *(void *)uint64_t v87 = *(void *)v88;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v89 = a3[7];
    uint64_t v90 = &v143[v89];
    uint64_t v91 = &v144[v89];
    sub_255EC8808(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v92 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 16))(v90, v91, v92);
    }
    else
    {
      *(void *)uint64_t v90 = *(void *)v91;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v93 = a3[8];
    uint64_t v94 = a3[9];
    uint64_t v95 = &v143[v93];
    uint64_t v96 = &v144[v93];
    uint64_t v97 = *(void *)v96;
    LOBYTE(v96) = v96[8];
    *(void *)uint64_t v95 = v97;
    v95[8] = (char)v96;
    uint64_t v98 = &v143[v94];
    long long v99 = &v144[v94];
    uint64_t v101 = *(void **)v99;
    uint64_t v100 = *((void *)v99 + 1);
    *(void *)uint64_t v98 = v101;
    *((void *)v98 + 1) = v100;
    uint64_t v102 = a3[10];
    uint64_t v103 = a3[11];
    uint64_t v104 = *(void **)&v144[v102];
    *(void *)&v143[v102] = v104;
    *(void *)&v143[v103] = *(void *)&v144[v103];
    uint64_t v105 = a3[12];
    uint64_t v106 = &v143[v105];
    long long v107 = &v144[v105];
    sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
    uint64_t v109 = v108;
    uint64_t v110 = *(void *)(v108 - 8);
    uint64_t v111 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
    swift_retain();
    id v112 = v101;
    id v113 = v104;
    swift_retain();
    if (v111(v107, 1, v109))
    {
      sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
      memcpy(v106, v107, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v106, v107, v109);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v106, 0, 1, v109);
    }
    sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
    *(void *)&v106[*(int *)(v115 + 28)] = *(void *)&v107[*(int *)(v115 + 28)];
    uint64_t v116 = a3[13];
    uint64_t v25 = v143;
    uint64_t v117 = &v143[v116];
    uint64_t v118 = &v144[v116];
    sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
    uint64_t v120 = v119;
    uint64_t v121 = *(void *)(v119 - 8);
    uint64_t v122 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48);
    swift_retain();
    if (v122(v118, 1, v120))
    {
      sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
      memcpy(v117, v118, *(void *)(*(void *)(v123 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v117, v118, v120);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v117, 0, 1, v120);
    }
    sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
    *(void *)&v117[*(int *)(v124 + 28)] = *(void *)&v118[*(int *)(v124 + 28)];
    uint64_t v125 = a3[14];
    uint64_t v126 = a3[15];
    uint64_t v127 = &v143[v125];
    int v128 = &v144[v125];
    uint64_t v129 = *((void *)v128 + 1);
    *(void *)uint64_t v127 = *(void *)v128;
    *((void *)v127 + 1) = v129;
    uint64_t v130 = &v143[v126];
    uint64_t v131 = &v144[v126];
    uint64_t v132 = *((void *)v131 + 1);
    *(void *)uint64_t v130 = *(void *)v131;
    *((void *)v130 + 1) = v132;
    uint64_t v133 = a3[16];
    uint64_t v134 = &v143[v133];
    uint64_t v135 = &v144[v133];
    *uint64_t v134 = *v135;
    *((void *)v134 + 1) = *((void *)v135 + 1);
    v134[16] = v135[16];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v25;
}

uint64_t sub_255ECB640(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v34 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v3 = a1 + v34[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unsigned int v4 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v5 = v3 + v4[13];
  uint64_t v6 = sub_255EEE100();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[14];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[19]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_255D80D04(*v10, v11);
  }
  uint64_t v12 = v3 + v4[20];
  uint64_t v13 = sub_255EEDF60();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }

  uint64_t v15 = v3 + v4[22];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = a1 + v34[6];
  uint64_t v17 = sub_255EEE200();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = a1 + v34[7];
  v18(v19, v17);

  uint64_t v20 = a1 + v34[8];
  v18(v20, v17);
  uint64_t v21 = type metadata accessor for MedicalIDWeightFormatter();

  if (*(void *)(a1 + a2[5] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v22 = a1 + a2[6];
  sub_255EC8808(0, &qword_269F35320, MEMORY[0x270FA9818], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1) {
    v18(v22, v17);
  }
  else {
    swift_release();
  }
  uint64_t v23 = a1 + a2[7];
  sub_255EC8808(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = sub_255EEE730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_release();
  uint64_t v25 = a1 + a2[12];
  sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v27);
  }
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  swift_release();
  uint64_t v29 = a1 + a2[13];
  sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30)) {
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v31);
  }
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

char *sub_255ECBCB0(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  uint64_t v138 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v6 = v138[5];
  uint64_t v141 = a1;
  uint64_t v142 = a2;
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *(void *)uint64_t v7 = *(void *)&a2[v6];
  *((void *)v7 + 1) = v9;
  uint64_t v11 = *(void *)&a2[v6 + 16];
  uint64_t v10 = *(void *)&a2[v6 + 24];
  *((void *)v7 + 2) = v11;
  *((void *)v7 + 3) = v10;
  uint64_t v12 = *((void *)v8 + 5);
  *((void *)v7 + 4) = *((void *)v8 + 4);
  *((void *)v7 + 5) = v12;
  uint64_t v13 = *((void *)v8 + 7);
  *((void *)v7 + 6) = *((void *)v8 + 6);
  *((void *)v7 + 7) = v13;
  uint64_t v14 = *((void *)v8 + 9);
  *((void *)v7 + 8) = *((void *)v8 + 8);
  *((void *)v7 + 9) = v14;
  uint64_t v15 = *((void *)v8 + 11);
  *((void *)v7 + 10) = *((void *)v8 + 10);
  *((void *)v7 + 11) = v15;
  uint64_t v135 = (void *)*((void *)v8 + 12);
  id v139 = (void *)*((void *)v8 + 13);
  *((void *)v7 + 12) = v135;
  *((void *)v7 + 13) = v139;
  uint64_t v143 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v16 = v143[13];
  __dst = &v7[v16];
  uint64_t v134 = &v8[v16];
  uint64_t v17 = sub_255EEE100();
  uint64_t v136 = *(void *)(v17 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = v135;
  id v20 = v139;
  unint64_t v140 = v18;
  if (v18(v134, 1, v17))
  {
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v134, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v136;
  }
  else
  {
    uint64_t v22 = v136;
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(__dst, v134, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(__dst, 0, 1, v17);
  }
  uint64_t v23 = v143[14];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  if (v140(&v8[v23], 1, v17))
  {
    uint64_t v26 = v22;
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v25, v17);
    uint64_t v26 = v22;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v17);
  }
  uint64_t v28 = v143[15];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  uint64_t v32 = v143[16];
  uint64_t v33 = &v7[v32];
  uint64_t v34 = &v8[v32];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  v7[v143[17]] = v8[v143[17]];
  v7[v143[18]] = v8[v143[18]];
  uint64_t v36 = v143[19];
  uint64_t v37 = &v7[v36];
  uint64_t v38 = (uint64_t *)&v8[v36];
  unint64_t v39 = *(void *)&v8[v36 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v39 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  }
  else
  {
    uint64_t v40 = *v38;
    sub_255D80890(*v38, v39);
    *(void *)uint64_t v37 = v40;
    *((void *)v37 + 1) = v39;
  }
  uint64_t v41 = v26;
  uint64_t v42 = v143[20];
  uint64_t v43 = &v7[v42];
  uint64_t v44 = &v8[v42];
  uint64_t v45 = sub_255EEDF60();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_255EC8808(0, &qword_269F350B8, MEMORY[0x270FA8120], MEMORY[0x263F8D8F0]);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  uint64_t v48 = v143[21];
  uint64_t v49 = *(void **)&v8[v48];
  *(void *)&v7[v48] = v49;
  uint64_t v50 = v143[22];
  uint64_t v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  id v53 = v49;
  if (v140(v52, 1, v17))
  {
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v51, v52, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v51, 0, 1, v17);
  }
  uint64_t v55 = v138[6];
  id v56 = &v141[v55];
  uint64_t v57 = &v142[v55];
  uint64_t v58 = sub_255EEE200();
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16);
  v59(v56, v57, v58);
  uint64_t v60 = v138[7];
  uint64_t v61 = &v141[v60];
  uint64_t v62 = &v142[v60];
  v59(&v141[v60], &v142[v60], v58);
  uint64_t v63 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v64 = *(void **)&v62[v63];
  *(void *)&v61[v63] = v64;
  uint64_t v65 = v138[8];
  uint64_t v66 = &v141[v65];
  uint64_t v67 = &v142[v65];
  id v68 = v64;
  v59(v66, v67, v58);
  uint64_t v69 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v70 = *(int *)(v69 + 20);
  id v71 = *(void **)&v67[v70];
  *(void *)&v66[v70] = v71;
  uint64_t v72 = *(int *)(v69 + 24);
  uint64_t v73 = *(void **)&v67[v72];
  *(void *)&v66[v72] = v73;
  uint64_t v74 = a3[5];
  uint64_t v75 = &v141[v74];
  uint64_t v76 = &v142[v74];
  uint64_t v77 = *(void *)&v142[v74 + 8];
  id v78 = v71;
  id v79 = v73;
  if (v77)
  {
    *(void *)uint64_t v75 = *(void *)v76;
    *((void *)v75 + 1) = v77;
    uint64_t v80 = *((void *)v76 + 3);
    *((void *)v75 + 2) = *((void *)v76 + 2);
    *((void *)v75 + 3) = v80;
    uint64_t v81 = *((void *)v76 + 5);
    *((void *)v75 + 4) = *((void *)v76 + 4);
    *((void *)v75 + 5) = v81;
    *((void *)v75 + 6) = *((void *)v76 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v82 = *((_OWORD *)v76 + 1);
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v82;
    *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
    *((void *)v75 + 6) = *((void *)v76 + 6);
  }
  *((void *)v75 + 7) = *((void *)v76 + 7);
  uint64_t v83 = a3[6];
  uint64_t v84 = &v141[v83];
  long long v85 = &v142[v83];
  sub_255EC8808(0, &qword_269F35320, MEMORY[0x270FA9818], MEMORY[0x263F185C8]);
  swift_retain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59(v84, v85, v58);
  }
  else
  {
    *(void *)uint64_t v84 = *(void *)v85;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v86 = a3[7];
  uint64_t v87 = &v141[v86];
  uint64_t v88 = &v142[v86];
  sub_255EC8808(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v89 = sub_255EEE730();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
  }
  else
  {
    *(void *)uint64_t v87 = *(void *)v88;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v90 = a3[8];
  uint64_t v91 = a3[9];
  uint64_t v92 = &v141[v90];
  uint64_t v93 = &v142[v90];
  uint64_t v94 = *(void *)v93;
  LOBYTE(v93) = v93[8];
  *(void *)uint64_t v92 = v94;
  v92[8] = (char)v93;
  uint64_t v95 = &v141[v91];
  uint64_t v96 = &v142[v91];
  uint64_t v98 = *(void **)v96;
  uint64_t v97 = *((void *)v96 + 1);
  *(void *)uint64_t v95 = v98;
  *((void *)v95 + 1) = v97;
  uint64_t v99 = a3[10];
  uint64_t v100 = a3[11];
  uint64_t v101 = *(void **)&v142[v99];
  *(void *)&v141[v99] = v101;
  *(void *)&v141[v100] = *(void *)&v142[v100];
  uint64_t v102 = a3[12];
  uint64_t v103 = &v141[v102];
  uint64_t v104 = &v142[v102];
  sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v106 = v105;
  uint64_t v107 = *(void *)(v105 - 8);
  uint64_t v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
  swift_retain();
  id v109 = v98;
  id v110 = v101;
  swift_retain();
  if (v108(v104, 1, v106))
  {
    sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
    memcpy(v103, v104, *(void *)(*(void *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v103, v104, v106);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v103, 0, 1, v106);
  }
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  *(void *)&v103[*(int *)(v112 + 28)] = *(void *)&v104[*(int *)(v112 + 28)];
  uint64_t v113 = a3[13];
  uint64_t v114 = &v141[v113];
  uint64_t v115 = &v142[v113];
  sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v117 = v116;
  uint64_t v118 = *(void *)(v116 - 8);
  uint64_t v119 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
  swift_retain();
  if (v119(v115, 1, v117))
  {
    sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
    memcpy(v114, v115, *(void *)(*(void *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v114, v115, v117);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(v114, 0, 1, v117);
  }
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  *(void *)&v114[*(int *)(v121 + 28)] = *(void *)&v115[*(int *)(v121 + 28)];
  uint64_t v122 = a3[14];
  uint64_t v123 = a3[15];
  uint64_t v124 = &v141[v122];
  uint64_t v125 = &v142[v122];
  uint64_t v126 = *((void *)v125 + 1);
  *(void *)uint64_t v124 = *(void *)v125;
  *((void *)v124 + 1) = v126;
  uint64_t v127 = &v141[v123];
  int v128 = &v142[v123];
  uint64_t v129 = *((void *)v128 + 1);
  *(void *)uint64_t v127 = *(void *)v128;
  *((void *)v127 + 1) = v129;
  uint64_t v130 = a3[16];
  uint64_t v131 = &v141[v130];
  uint64_t v132 = &v142[v130];
  *uint64_t v131 = *v132;
  *((void *)v131 + 1) = *((void *)v132 + 1);
  v131[16] = v132[16];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v141;
}

char *sub_255ECC814(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v155 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v156 = a2;
  uint64_t v5 = v155[5];
  int v157 = a1;
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  *(void *)uint64_t v6 = *(void *)&a2[v5];
  *((void *)v6 + 1) = *(void *)&a2[v5 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 2) = *((void *)v7 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 3) = *((void *)v7 + 3);
  *((void *)v6 + 4) = *((void *)v7 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 5) = *((void *)v7 + 5);
  *((void *)v6 + 6) = *((void *)v7 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 7) = *((void *)v7 + 7);
  *((void *)v6 + 8) = *((void *)v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 9) = *((void *)v7 + 9);
  *((void *)v6 + 10) = *((void *)v7 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v6 + 11) = *((void *)v7 + 11);
  uint64_t v8 = (void *)*((void *)v6 + 12);
  uint64_t v9 = (void *)*((void *)v7 + 12);
  *((void *)v6 + 12) = v9;
  id v10 = v9;

  uint64_t v11 = (void *)*((void *)v6 + 13);
  uint64_t v12 = (void *)*((void *)v7 + 13);
  *((void *)v6 + 13) = v12;
  id v13 = v12;

  uint64_t v14 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v15 = v14[13];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v18 = sub_255EEE100();
  uint64_t v19 = *(void *)(v18 - 8);
  id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  uint64_t v159 = v20;
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = v14[14];
  uint64_t v25 = &v6[v24];
  uint64_t v26 = &v7[v24];
  int v27 = v20(&v6[v24], 1, v18);
  int v28 = v20(v26, 1, v18);
  uint64_t v154 = v18;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_12:
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v25, v26, v18);
LABEL_13:
  uint64_t v30 = v14[15];
  uint64_t v31 = &v6[v30];
  uint64_t v32 = &v7[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = v14[16];
  uint64_t v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[v14[17]] = v7[v14[17]];
  v6[v14[18]] = v7[v14[18]];
  uint64_t v36 = v14[19];
  uint64_t v37 = (uint64_t *)&v6[v36];
  uint64_t v38 = (uint64_t *)&v7[v36];
  unint64_t v39 = *(void *)&v7[v36 + 8];
  if (*(void *)&v6[v36 + 8] >> 60 == 15)
  {
    if (v39 >> 60 != 15)
    {
      uint64_t v40 = *v38;
      sub_255D80890(*v38, v39);
      *uint64_t v37 = v40;
      v37[1] = v39;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
    sub_255D81EF8((uint64_t)v37);
LABEL_18:
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  uint64_t v41 = *v38;
  sub_255D80890(*v38, v39);
  uint64_t v42 = *v37;
  unint64_t v43 = v37[1];
  *uint64_t v37 = v41;
  v37[1] = v39;
  sub_255D80D04(v42, v43);
LABEL_20:
  uint64_t v44 = v14[20];
  uint64_t v45 = &v6[v44];
  uint64_t v46 = &v7[v44];
  uint64_t v47 = sub_255EEDF60();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_25:
    sub_255EC8808(0, &qword_269F350B8, MEMORY[0x270FA8120], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_26:
  uint64_t v53 = v14[21];
  uint64_t v54 = *(void **)&v6[v53];
  uint64_t v55 = *(void **)&v7[v53];
  *(void *)&v6[v53] = v55;
  id v56 = v55;

  uint64_t v57 = v14[22];
  uint64_t v58 = &v6[v57];
  uint64_t v59 = &v7[v57];
  int v60 = v159(&v6[v57], 1, v154);
  int v61 = v159(v59, 1, v154);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v58, v59, v154);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v58, 0, 1, v154);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v58, v154);
LABEL_31:
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v58, v59, v154);
LABEL_32:
  uint64_t v63 = a3;
  uint64_t v64 = v155[6];
  uint64_t v65 = &v157[v64];
  uint64_t v66 = &v156[v64];
  uint64_t v67 = sub_255EEE200();
  uint64_t v160 = *(void *)(v67 - 8);
  id v68 = *(void (**)(char *, char *, uint64_t))(v160 + 24);
  v68(v65, v66, v67);
  uint64_t v69 = v155[7];
  uint64_t v70 = &v157[v69];
  id v71 = &v156[v69];
  v68(&v157[v69], &v156[v69], v67);
  uint64_t v72 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v73 = *(void **)&v71[v72];
  uint64_t v74 = *(void **)&v70[v72];
  *(void *)&v70[v72] = v73;
  id v75 = v73;

  uint64_t v76 = v155[8];
  uint64_t v77 = &v157[v76];
  id v78 = &v156[v76];
  v68(&v157[v76], &v156[v76], v67);
  uint64_t v79 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v80 = *(int *)(v79 + 20);
  uint64_t v81 = *(void **)&v78[v80];
  long long v82 = *(void **)&v77[v80];
  *(void *)&v77[v80] = v81;
  id v83 = v81;

  uint64_t v84 = *(int *)(v79 + 24);
  long long v85 = *(void **)&v78[v84];
  uint64_t v86 = *(void **)&v77[v84];
  *(void *)&v77[v84] = v85;
  id v87 = v85;

  uint64_t v88 = a3[5];
  uint64_t v89 = &v157[v88];
  uint64_t v90 = &v156[v88];
  uint64_t v91 = *(void *)&v157[v88 + 8];
  uint64_t v92 = *(void *)&v156[v88 + 8];
  if (v91)
  {
    if (v92)
    {
      *(void *)uint64_t v89 = *(void *)v90;
      *((void *)v89 + 1) = *((void *)v90 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v89 + 2) = *((void *)v90 + 2);
      *((void *)v89 + 3) = *((void *)v90 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v89 + 4) = *((void *)v90 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v89 + 5) = *((void *)v90 + 5);
      *((void *)v89 + 6) = *((void *)v90 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_255DB9AF8((uint64_t)v89);
      long long v94 = *((_OWORD *)v90 + 1);
      long long v93 = *((_OWORD *)v90 + 2);
      long long v95 = *(_OWORD *)v90;
      *((void *)v89 + 6) = *((void *)v90 + 6);
      *((_OWORD *)v89 + 1) = v94;
      *((_OWORD *)v89 + 2) = v93;
      *(_OWORD *)uint64_t v89 = v95;
    }
  }
  else if (v92)
  {
    *(void *)uint64_t v89 = *(void *)v90;
    *((void *)v89 + 1) = *((void *)v90 + 1);
    *((void *)v89 + 2) = *((void *)v90 + 2);
    *((void *)v89 + 3) = *((void *)v90 + 3);
    *((void *)v89 + 4) = *((void *)v90 + 4);
    *((void *)v89 + 5) = *((void *)v90 + 5);
    *((void *)v89 + 6) = *((void *)v90 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v63 = a3;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v96 = *(_OWORD *)v90;
    long long v97 = *((_OWORD *)v90 + 1);
    long long v98 = *((_OWORD *)v90 + 2);
    *((void *)v89 + 6) = *((void *)v90 + 6);
    *((_OWORD *)v89 + 1) = v97;
    *((_OWORD *)v89 + 2) = v98;
    *(_OWORD *)uint64_t v89 = v96;
  }
  *((void *)v89 + 7) = *((void *)v90 + 7);
  swift_retain();
  swift_release();
  if (v157 != v156)
  {
    uint64_t v99 = v63[6];
    uint64_t v100 = &v157[v99];
    uint64_t v101 = &v156[v99];
    uint64_t v102 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9818];
    sub_255ECD818((uint64_t)&v157[v99], &qword_269F35320, MEMORY[0x270FA9818]);
    sub_255EC8808(0, &qword_269F35320, v102, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v100, v101, v67);
    }
    else
    {
      *(void *)uint64_t v100 = *(void *)v101;
      swift_retain();
    }
    uint64_t v63 = a3;
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = a3[7];
    uint64_t v104 = &v157[v103];
    uint64_t v105 = &v156[v103];
    uint64_t v106 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    sub_255ECD818((uint64_t)&v157[v103], (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0]);
    sub_255EC8808(0, (unint64_t *)&qword_269F35580, v106, MEMORY[0x263F185C8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v107 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v104, v105, v107);
    }
    else
    {
      *(void *)uint64_t v104 = *(void *)v105;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v108 = v63[8];
  id v109 = &v157[v108];
  id v110 = &v156[v108];
  uint64_t v111 = *(void *)v110;
  LOBYTE(v110) = v110[8];
  *(void *)id v109 = v111;
  v109[8] = (char)v110;
  swift_retain();
  swift_release();
  uint64_t v112 = v63[9];
  uint64_t v113 = &v157[v112];
  uint64_t v114 = &v156[v112];
  uint64_t v115 = *(void **)&v157[v112];
  uint64_t v116 = *(void **)&v156[v112];
  *(void *)uint64_t v113 = v116;
  id v117 = v116;

  *((void *)v113 + 1) = *((void *)v114 + 1);
  uint64_t v118 = v63[10];
  uint64_t v119 = *(void **)&v156[v118];
  uint64_t v120 = *(void **)&v157[v118];
  *(void *)&v157[v118] = v119;
  id v121 = v119;

  *(void *)&v157[v63[11]] = *(void *)&v156[v63[11]];
  swift_retain();
  swift_release();
  uint64_t v122 = v63[12];
  uint64_t v123 = &v157[v122];
  uint64_t v124 = &v156[v122];
  sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v126 = v125;
  uint64_t v127 = *(void *)(v125 - 8);
  int v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
  int v129 = v128(v123, 1, v125);
  int v130 = v128(v124, 1, v126);
  if (v129)
  {
    if (!v130)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v123, v124, v126);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v123, 0, 1, v126);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v130)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v123, v126);
LABEL_56:
    sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
    memcpy(v123, v124, *(void *)(*(void *)(v131 - 8) + 64));
    goto LABEL_57;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 24))(v123, v124, v126);
LABEL_57:
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  *(void *)&v123[*(int *)(v132 + 28)] = *(void *)&v124[*(int *)(v132 + 28)];
  swift_retain();
  swift_release();
  uint64_t v133 = v63[13];
  uint64_t v134 = &v157[v133];
  uint64_t v135 = &v156[v133];
  sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v137 = v136;
  uint64_t v138 = *(void *)(v136 - 8);
  id v139 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 48);
  int v140 = v139(v134, 1, v136);
  int v141 = v139(v135, 1, v137);
  if (!v140)
  {
    if (!v141)
    {
      (*(void (**)(char *, char *, uint64_t))(v138 + 24))(v134, v135, v137);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v138 + 8))(v134, v137);
    goto LABEL_62;
  }
  if (v141)
  {
LABEL_62:
    sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
    memcpy(v134, v135, *(void *)(*(void *)(v142 - 8) + 64));
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v134, v135, v137);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v134, 0, 1, v137);
LABEL_63:
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  *(void *)&v134[*(int *)(v143 + 28)] = *(void *)&v135[*(int *)(v143 + 28)];
  swift_retain();
  swift_release();
  uint64_t v144 = v63[14];
  uint64_t v145 = &v157[v144];
  uint64_t v146 = &v156[v144];
  *(void *)uint64_t v145 = *(void *)v146;
  *((void *)v145 + 1) = *((void *)v146 + 1);
  swift_retain();
  swift_release();
  uint64_t v147 = v63[15];
  uint64_t v148 = &v157[v147];
  uint64_t v149 = &v156[v147];
  *(void *)uint64_t v148 = *(void *)v149;
  *((void *)v148 + 1) = *((void *)v149 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v150 = v63[16];
  uint64_t v151 = &v157[v150];
  uint64_t v152 = &v156[v150];
  char *v151 = v156[v150];
  *((void *)v151 + 1) = *(void *)&v156[v150 + 8];
  swift_retain();
  swift_release();
  v151[16] = v152[16];
  return v157;
}

uint64_t sub_255ECD818(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_255EC8808(0, a2, a3, MEMORY[0x263F185C8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *sub_255ECD888(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v85 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v5 = v85[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&a2[v5];
  *((void *)v6 + 2) = *(void *)&a2[v5 + 16];
  *(_OWORD *)(v6 + 24) = *(_OWORD *)&a2[v5 + 24];
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2[v5 + 40];
  *(_OWORD *)(v6 + 56) = *(_OWORD *)&a2[v5 + 56];
  *(_OWORD *)(v6 + 72) = *(_OWORD *)&a2[v5 + 72];
  *((void *)v6 + 11) = *(void *)&a2[v5 + 88];
  *((_OWORD *)v6 + 6) = *(_OWORD *)&a2[v5 + 96];
  uint64_t v8 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v9 = v8[13];
  id v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_255EEE100();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v88(v11, 1, v12))
  {
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = v8[14];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  id v87 = a2;
  uint64_t v84 = v13;
  if (v88(&v7[v15], 1, v12))
  {
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_OWORD *)&v6[v8[15]] = *(_OWORD *)&v7[v8[15]];
  *(_OWORD *)&v6[v8[16]] = *(_OWORD *)&v7[v8[16]];
  v6[v8[17]] = v7[v8[17]];
  v6[v8[18]] = v7[v8[18]];
  *(_OWORD *)&v6[v8[19]] = *(_OWORD *)&v7[v8[19]];
  uint64_t v19 = v8[20];
  id v20 = &v6[v19];
  int v21 = &v7[v19];
  uint64_t v22 = sub_255EEDF60();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_255EC8808(0, &qword_269F350B8, MEMORY[0x270FA8120], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(void *)&v6[v8[21]] = *(void *)&v7[v8[21]];
  uint64_t v25 = v8[22];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v88(&v7[v25], 1, v12))
  {
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v26, v27, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v26, 0, 1, v12);
  }
  uint64_t v29 = v85[6];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &v87[v29];
  uint64_t v32 = sub_255EEE200();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32);
  v33(v30, v31, v32);
  uint64_t v34 = v85[7];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &v87[v34];
  v33(&a1[v34], &v87[v34], v32);
  uint64_t v37 = type metadata accessor for MedicalIDHeightFormatter();
  *(void *)&v35[*(int *)(v37 + 20)] = *(void *)&v36[*(int *)(v37 + 20)];
  uint64_t v38 = v85[8];
  unint64_t v39 = &a1[v38];
  uint64_t v40 = &v87[v38];
  v33(&a1[v38], &v87[v38], v32);
  uint64_t v41 = type metadata accessor for MedicalIDWeightFormatter();
  *(void *)&v39[*(int *)(v41 + 20)] = *(void *)&v40[*(int *)(v41 + 20)];
  *(void *)&v39[*(int *)(v41 + 24)] = *(void *)&v40[*(int *)(v41 + 24)];
  uint64_t v42 = a3[5];
  uint64_t v43 = a3[6];
  uint64_t v44 = &a1[v42];
  uint64_t v45 = &v87[v42];
  long long v46 = *((_OWORD *)v45 + 3);
  *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
  *((_OWORD *)v44 + 3) = v46;
  long long v47 = *((_OWORD *)v45 + 1);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *((_OWORD *)v44 + 1) = v47;
  uint64_t v48 = &a1[v43];
  uint64_t v49 = &v87[v43];
  sub_255EC8808(0, &qword_269F35320, MEMORY[0x270FA9818], MEMORY[0x263F185C8]);
  uint64_t v51 = v50;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v33(v48, v49, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64));
  }
  uint64_t v52 = a3[7];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &v87[v52];
  sub_255EC8808(0, (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0], MEMORY[0x263F185C8]);
  uint64_t v56 = v55;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v57 = sub_255EEE730();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v53, v54, v57);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
  }
  uint64_t v58 = a3[8];
  uint64_t v59 = a3[9];
  int v60 = &a1[v58];
  int v61 = &v87[v58];
  *(void *)int v60 = *(void *)v61;
  v60[8] = v61[8];
  *(_OWORD *)&a1[v59] = *(_OWORD *)&v87[v59];
  uint64_t v62 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&v87[a3[10]];
  *(void *)&a1[v62] = *(void *)&v87[v62];
  uint64_t v63 = a3[12];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &v87[v63];
  sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v67 = v66;
  uint64_t v68 = *(void *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v65, 1, v66))
  {
    sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
    memcpy(v64, v65, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v64, v65, v67);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
  }
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  *(void *)&v64[*(int *)(v70 + 28)] = *(void *)&v65[*(int *)(v70 + 28)];
  uint64_t v71 = a3[13];
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &v87[v71];
  sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v75 = v74;
  uint64_t v76 = *(void *)(v74 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v73, 1, v74))
  {
    sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
    memcpy(v72, v73, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v72, v73, v75);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v72, 0, 1, v75);
  }
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  *(void *)&v72[*(int *)(v78 + 28)] = *(void *)&v73[*(int *)(v78 + 28)];
  uint64_t v79 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&v87[a3[14]];
  *(_OWORD *)&a1[v79] = *(_OWORD *)&v87[v79];
  uint64_t v80 = a3[16];
  uint64_t v81 = &a1[v80];
  long long v82 = &v87[v80];
  *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
  v81[16] = v82[16];
  return a1;
}

char *sub_255ECE23C(char *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v5;
  swift_bridgeObjectRelease();
  uint64_t v153 = (int *)type metadata accessor for MedicalIDBiometricsViewModel();
  uint64_t v154 = a2;
  uint64_t v6 = v153[5];
  id v155 = a1;
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *(void *)uint64_t v7 = *(void *)&a2[v6];
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = *((void *)v8 + 2);
  swift_bridgeObjectRelease();
  uint64_t v10 = *((void *)v8 + 4);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  *((void *)v7 + 4) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v8 + 6);
  *((void *)v7 + 5) = *((void *)v8 + 5);
  *((void *)v7 + 6) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *((void *)v8 + 8);
  *((void *)v7 + 7) = *((void *)v8 + 7);
  *((void *)v7 + 8) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v8 + 10);
  *((void *)v7 + 9) = *((void *)v8 + 9);
  *((void *)v7 + 10) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)*((void *)v7 + 12);
  uint64_t v15 = *((void *)v8 + 12);
  *((void *)v7 + 11) = *((void *)v8 + 11);
  *((void *)v7 + 12) = v15;

  uint64_t v16 = (void *)*((void *)v7 + 13);
  *((void *)v7 + 13) = *((void *)v8 + 13);

  uint64_t v17 = (int *)type metadata accessor for MedicalIDData();
  uint64_t v18 = v17[13];
  uint64_t v19 = &v7[v18];
  id v20 = &v8[v18];
  uint64_t v21 = sub_255EEE100();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v157 = v23;
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_6:
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_7:
  uint64_t v27 = v17[14];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  int v30 = v23(&v7[v27], 1, v21);
  int v31 = v23(v29, 1, v21);
  uint64_t v152 = v21;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_12:
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v28, v29, v21);
LABEL_13:
  uint64_t v33 = v17[15];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = (uint64_t *)&v8[v33];
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v17[16];
  unint64_t v39 = &v7[v38];
  uint64_t v40 = (uint64_t *)&v8[v38];
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)unint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v7[v17[17]] = v8[v17[17]];
  v7[v17[18]] = v8[v17[18]];
  uint64_t v43 = v17[19];
  uint64_t v44 = (uint64_t)&v7[v43];
  uint64_t v45 = &v8[v43];
  unint64_t v46 = *(void *)&v7[v43 + 8];
  if (v46 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_18;
  }
  unint64_t v47 = *((void *)v45 + 1);
  if (v47 >> 60 == 15)
  {
    sub_255D81EF8(v44);
    goto LABEL_16;
  }
  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_255D80D04(v48, v46);
LABEL_18:
  uint64_t v49 = v17[20];
  uint64_t v50 = &v7[v49];
  uint64_t v51 = &v8[v49];
  uint64_t v52 = sub_255EEDF60();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_23:
    sub_255EC8808(0, &qword_269F350B8, MEMORY[0x270FA8120], MEMORY[0x263F8D8F0]);
    memcpy(v50, v51, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_24:
  uint64_t v58 = v17[21];
  uint64_t v59 = *(void **)&v7[v58];
  *(void *)&v7[v58] = *(void *)&v8[v58];

  uint64_t v60 = v17[22];
  int v61 = &v7[v60];
  uint64_t v62 = &v8[v60];
  int v63 = v157(&v7[v60], 1, v152);
  int v64 = v157(v62, 1, v152);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v61, v62, v152);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v61, 0, 1, v152);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v61, v152);
LABEL_29:
    sub_255EC8808(0, &qword_269F35058, MEMORY[0x270FA91C0], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v61, v62, v152);
LABEL_30:
  uint64_t v66 = a3;
  uint64_t v67 = v153[6];
  uint64_t v68 = &v155[v67];
  uint64_t v69 = &v154[v67];
  uint64_t v70 = sub_255EEE200();
  uint64_t v71 = *(void *)(v70 - 8);
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v71 + 40);
  v72(v68, v69, v70);
  uint64_t v73 = v153[7];
  uint64_t v74 = &v155[v73];
  uint64_t v75 = &v154[v73];
  v72(&v155[v73], &v154[v73], v70);
  uint64_t v76 = *(int *)(type metadata accessor for MedicalIDHeightFormatter() + 20);
  uint64_t v77 = *(void **)&v74[v76];
  *(void *)&v74[v76] = *(void *)&v75[v76];

  uint64_t v78 = v153[8];
  uint64_t v79 = &v155[v78];
  uint64_t v80 = &v154[v78];
  v72(&v155[v78], &v154[v78], v70);
  uint64_t v81 = type metadata accessor for MedicalIDWeightFormatter();
  uint64_t v82 = *(int *)(v81 + 20);
  id v83 = *(void **)&v79[v82];
  *(void *)&v79[v82] = *(void *)&v80[v82];

  uint64_t v84 = *(int *)(v81 + 24);
  long long v85 = *(void **)&v79[v84];
  *(void *)&v79[v84] = *(void *)&v80[v84];

  uint64_t v86 = a3[5];
  id v87 = &v155[v86];
  uint64_t v88 = &v154[v86];
  if (*(void *)&v155[v86 + 8])
  {
    uint64_t v89 = *((void *)v88 + 1);
    if (v89)
    {
      *(void *)id v87 = *(void *)v88;
      *((void *)v87 + 1) = v89;
      swift_bridgeObjectRelease();
      uint64_t v90 = *((void *)v88 + 3);
      *((void *)v87 + 2) = *((void *)v88 + 2);
      *((void *)v87 + 3) = v90;
      swift_bridgeObjectRelease();
      *((void *)v87 + 4) = *((void *)v88 + 4);
      swift_bridgeObjectRelease();
      uint64_t v91 = *((void *)v88 + 6);
      *((void *)v87 + 5) = *((void *)v88 + 5);
      *((void *)v87 + 6) = v91;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    sub_255DB9AF8((uint64_t)v87);
  }
  long long v92 = *((_OWORD *)v88 + 1);
  *(_OWORD *)id v87 = *(_OWORD *)v88;
  *((_OWORD *)v87 + 1) = v92;
  *((_OWORD *)v87 + 2) = *((_OWORD *)v88 + 2);
  *((void *)v87 + 6) = *((void *)v88 + 6);
LABEL_35:
  *((void *)v87 + 7) = *((void *)v88 + 7);
  swift_release();
  if (v155 != v154)
  {
    uint64_t v93 = a3[6];
    long long v94 = &v155[v93];
    long long v95 = &v154[v93];
    long long v96 = (uint64_t (*)(uint64_t))MEMORY[0x270FA9818];
    sub_255ECD818((uint64_t)&v155[v93], &qword_269F35320, MEMORY[0x270FA9818]);
    sub_255EC8808(0, &qword_269F35320, v96, MEMORY[0x263F185C8]);
    uint64_t v98 = v97;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v94, v95, v70);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
    }
    uint64_t v66 = a3;
    uint64_t v99 = a3[7];
    uint64_t v100 = &v155[v99];
    uint64_t v101 = &v154[v99];
    uint64_t v102 = (uint64_t (*)(uint64_t))MEMORY[0x263F188C0];
    sub_255ECD818((uint64_t)&v155[v99], (unint64_t *)&qword_269F35580, MEMORY[0x263F188C0]);
    sub_255EC8808(0, (unint64_t *)&qword_269F35580, v102, MEMORY[0x263F185C8]);
    uint64_t v104 = v103;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v105 = sub_255EEE730();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 32))(v100, v101, v105);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
    }
  }
  uint64_t v106 = v66[8];
  uint64_t v107 = &v155[v106];
  uint64_t v108 = &v154[v106];
  uint64_t v109 = *(void *)v108;
  LOBYTE(v108) = v108[8];
  *(void *)uint64_t v107 = v109;
  v107[8] = (char)v108;
  swift_release();
  uint64_t v110 = v66[9];
  uint64_t v111 = &v155[v110];
  uint64_t v112 = &v154[v110];
  uint64_t v113 = *(void **)&v155[v110];
  *(void *)uint64_t v111 = *(void *)v112;

  *((void *)v111 + 1) = *((void *)v112 + 1);
  uint64_t v114 = v66[10];
  uint64_t v115 = *(void **)&v155[v114];
  *(void *)&v155[v114] = *(void *)&v154[v114];

  *(void *)&v155[v66[11]] = *(void *)&v154[v66[11]];
  swift_release();
  uint64_t v116 = v66[12];
  id v117 = &v155[v116];
  uint64_t v118 = &v154[v116];
  sub_255EC88C8(0, (unint64_t *)&qword_269F36388, &qword_269F36390);
  uint64_t v120 = v119;
  uint64_t v121 = *(void *)(v119 - 8);
  uint64_t v122 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48);
  int v123 = v122(v117, 1, v119);
  int v124 = v122(v118, 1, v120);
  if (v123)
  {
    if (!v124)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v117, v118, v120);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v117, 0, 1, v120);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v124)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v117, v120);
LABEL_47:
    sub_255EC886C(0, &qword_269F36BC8, (unint64_t *)&qword_269F36388, &qword_269F36390);
    memcpy(v117, v118, *(void *)(*(void *)(v125 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v121 + 40))(v117, v118, v120);
LABEL_48:
  sub_255ECA8C8(0, &qword_269F38948, MEMORY[0x263F1B5D0]);
  *(void *)&v117[*(int *)(v126 + 28)] = *(void *)&v118[*(int *)(v126 + 28)];
  swift_release();
  uint64_t v127 = v66[13];
  int v128 = &v155[v127];
  int v129 = &v154[v127];
  sub_255EC88C8(0, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
  uint64_t v131 = v130;
  uint64_t v132 = *(void *)(v130 - 8);
  uint64_t v133 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
  int v134 = v133(v128, 1, v130);
  int v135 = v133(v129, 1, v131);
  if (!v134)
  {
    if (!v135)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 40))(v128, v129, v131);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v132 + 8))(v128, v131);
    goto LABEL_53;
  }
  if (v135)
  {
LABEL_53:
    sub_255EC886C(0, &qword_269F352E8, &qword_269F352D8, (unint64_t *)&qword_269F352E0);
    memcpy(v128, v129, *(void *)(*(void *)(v136 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v128, v129, v131);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v128, 0, 1, v131);
LABEL_54:
  sub_255ECFF18(0, &qword_269F384C8, MEMORY[0x263F1B5D0]);
  *(void *)&v128[*(int *)(v137 + 28)] = *(void *)&v129[*(int *)(v137 + 28)];
  swift_release();
  uint64_t v138 = v66[14];
  id v139 = &v155[v138];
  int v140 = (uint64_t *)&v154[v138];
  uint64_t v142 = *v140;
  uint64_t v141 = v140[1];
  *(void *)id v139 = v142;
  *((void *)v139 + 1) = v141;
  swift_release();
  uint64_t v143 = v66[15];
  uint64_t v144 = &v155[v143];
  uint64_t v145 = (uint64_t *)&v154[v143];
  uint64_t v147 = *v145;
  uint64_t v146 = v145[1];
  *(void *)uint64_t v144 = v147;
  *((void *)v144 + 1) = v146;
  swift_bridgeObjectRelease();
  uint64_t v148 = v66[16];
  uint64_t v149 = &v155[v148];
  uint64_t v150 = &v154[v148];
  *uint64_t v149 = v154[v148];
  *((void *)v149 + 1) = *(void *)&v154[v148 + 8];
  swift_release();
  v149[16] = v150[16];
  return v155;
}